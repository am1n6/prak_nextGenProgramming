[
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void postModule(final Module module, final String user, final String password) throws GrapesCommunicationException, AuthenticationException { final Client client = getClient(user, password); final WebResource resource = client.resource(serverURL).path(RequestUtils.moduleResourcePath()); final ClientResponse response = resource.type(MediaType.APPLICATION_JSON).post(ClientResponse.class, module); client.destroy(); if(ClientResponse.Status.CREATED.getStatusCode() != response.getStatus()){ final String message = \"Failed to POST module\"; if(LOG.isErrorEnabled()) { LOG.error(String.format(HTTP_STATUS_TEMPLATE_MSG, message, response.getStatus())); } throw new GrapesCommunicationException(message, response.getStatus()); } }### Assistant: @Test public void postModuleFailed() throws AuthenticationException{ Module module1 = DataModelFactory.createModule(\"module\", \"1.0.0-SNAPSHOT\"); Artifact artifact1 = DataModelFactory.createArtifact(\"com.axway.test\", \"artifact1\", \"1.0.0-SNAPSHOT\", \"win32\", \"jar\", \"\"); Artifact artifact2 = DataModelFactory.createArtifact(\"com.axway.test\", \"artifact2\", \"1.0.0-SNAPSHOT\", \"win32\", \"jar\", \"\"); Artifact dependency = DataModelFactory.createArtifact(\"com.axway.test\", \"dependency\", \"1.0.0-SNAPSHOT\", \"win32\", \"jar\", \"\"); module1.addDependency(DataModelFactory.createDependency(artifact2,Scope.COMPILE)); module1.addDependency(DataModelFactory.createDependency(dependency, Scope.TEST)); module1.addArtifact(artifact1); module1.addArtifact(artifact2); stubFor(post(urlEqualTo(\"/\" + ServerAPI.MODULE_RESOURCE)) .willReturn(aResponse() .withStatus(Status.NOT_ACCEPTABLE.getStatusCode()))); GrapesCommunicationException exception = null; try{ client.postModule(module1, \"user\", \"password\"); }catch (GrapesCommunicationException e) { exception = e; } assertNotNull(exception); assertEquals(Status.NOT_ACCEPTABLE.getStatusCode(), exception.getHttpStatus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void configure(Settings.Builder settings) { credentials.applyTo(settings); certInfo.applyTo(settings); }### Assistant: @Test public void appliesCredentialsIfConfigured() { Credentials<Settings.Builder> credentials = Mockito.mock(Credentials.class); Settings.Builder settingsBuilder = Settings.builder(); XPackAuth xPackAuth = createTestBuilder() .withCredentials(credentials) .build(); xPackAuth.configure(settingsBuilder); Mockito.verify(credentials).applyTo(builderArgumentCaptor.capture()); Assert.assertEquals(settingsBuilder, builderArgumentCaptor.getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public MessageSender<Event<T>> newBackend(T target) { return new EventToDynamicListener<>(target); }### Assistant: @Test public void event_objects_are_serializable() throws Exception { DummyListener target = mock(DummyListener.class); MessageSender<Event<DummyListener>> backend = eventizer.newBackend(target); frontend.onSomething(\"param\"); Event<DummyListener> original = queue.poll(); Event<DummyListener> deserialized = deserialize(serialize(original)); backend.send(deserialized); verify(target).onSomething(\"param\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String unseal(final String sealedMessage) throws GeneralSecurityException { try { if (protocolVersion.equals(PaymentMethodTokenConstants.PROTOCOL_VERSION_EC_V1)) { return unsealECV1(sealedMessage); } else if (protocolVersion.equals(PaymentMethodTokenConstants.PROTOCOL_VERSION_EC_V2)) { return unsealECV2(sealedMessage); } else if (protocolVersion.equals( PaymentMethodTokenConstants.PROTOCOL_VERSION_EC_V2_SIGNING_ONLY)) { return unsealECV2SigningOnly(sealedMessage); } throw new IllegalArgumentException(\"unsupported version: \" + protocolVersion); } catch (JSONException e) { throw new GeneralSecurityException(\"cannot unseal; invalid JSON message\"); } }### Assistant: @Test public void testShouldFailIfIntermediateSigningKeyIsExpiredInECV2SigningOnly() throws Exception { PaymentMethodTokenRecipient recipient = new PaymentMethodTokenRecipient.Builder() .protocolVersion(PaymentMethodTokenConstants.PROTOCOL_VERSION_EC_V2_SIGNING_ONLY) .senderVerifyingKeys(GOOGLE_VERIFYING_PUBLIC_KEYS_JSON) .recipientId(RECIPIENT_ID) .build(); PaymentMethodTokenSender sender = new PaymentMethodTokenSender.Builder() .protocolVersion(PaymentMethodTokenConstants.PROTOCOL_VERSION_EC_V2_SIGNING_ONLY) .senderIntermediateSigningKey( GOOGLE_SIGNING_EC_V2_SIGNING_ONLY_INTERMEDIATE_PRIVATE_KEY_PKCS8_BASE64) .senderIntermediateCert( new SenderIntermediateCertFactory.Builder() .protocolVersion( PaymentMethodTokenConstants.PROTOCOL_VERSION_EC_V2_SIGNING_ONLY) .addSenderSigningKey(GOOGLE_SIGNING_EC_V2_SIGNING_ONLY_PRIVATE_KEY_PKCS8_BASE64) .senderIntermediateSigningKey( GOOGLE_SIGNING_EC_V2_SIGNING_ONLY_INTERMEDIATE_PUBLIC_KEY_X509_BASE64) .expiration(Instant.now().minus(Duration.standardDays(1)).getMillis()) .build() .create()) .recipientId(RECIPIENT_ID) .build(); try { recipient.unseal(sender.seal(PLAINTEXT)); fail(\"Expected GeneralSecurityException\"); } catch (GeneralSecurityException e) { assertEquals(\"expired intermediateSigningKey\", e.getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void editSchedule() { CSQueue root = scheduler.getRootQueue(); Resource clusterResources = Resources.clone(scheduler.getClusterResource()); clusterResources = getNonLabeledResources(clusterResources); setNodeLabels(scheduler.getRMContext().getNodeLabelManager() .getNodeLabels()); containerBasedPreemptOrKill(root, clusterResources); }### Assistant: @Test public void testPreemptCycle() { int[][] qData = new int[][]{ { 100, 40, 40, 20 }, { 100, 100, 100, 100 }, { 100, 0, 60, 40 }, { 10, 10, 0, 0 }, { 0, 0, 0, 0 }, { 3, 1, 1, 1 }, { -1, 1, 1, 1 }, { 3, 0, 0, 0 }, }; ProportionalCapacityPreemptionPolicy policy = buildPolicy(qData); policy.editSchedule(); verify(mDisp, times(10)).handle(argThat(new IsPreemptionRequestFor(appC))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void init(Random random, int n) { try { getLowerBound(n - 1); getUpperBound(n - 1); } catch (IndexOutOfBoundsException outOfBoundException) { throw new IllegalArgumentException( \"Cannot initialize a genotype with \" + n + \" entries with the specified bounds\", outOfBoundException); } for (int i = 0; i < n; i++) { int lo = getLowerBound(i); int hi = getUpperBound(i); int value = lo + random.nextInt(hi - lo + 1); if (i >= size()) { add(value); } else { set(i, value); } } }### Assistant: @Test(expected = IllegalArgumentException.class) public void testWrongBoundSettingList() { Random rand = new Random(); List<Integer> lowerBounds = new ArrayList<>(); lowerBounds.add(1); lowerBounds.add(2); lowerBounds.add(3); List<Integer> upperBounds = new ArrayList<>(); upperBounds.add(2); upperBounds.add(3); upperBounds.add(4); IntegerBounds bounds = new IntegerBounds(lowerBounds, upperBounds); IntegerGenotype listBoundGeno = new IntegerGenotype(bounds); assertTrue(listBoundGeno.isEmpty()); listBoundGeno.init(rand, 3); assertEquals(3, listBoundGeno.size()); listBoundGeno.init(rand, 4); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isLocal() { return true; }### Assistant: @Test public void testIsLocal() throws Exception { assertTrue( containerHostEntity.isLocal() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setProtocols(final String value) { this.protocols = new LinkedHashSet<>(); final String[] protocolNames = value.split(\",\", -1); for (String protocolName : protocolNames) { protocolName = protocolName.trim(); if (!protocolName.isEmpty()) { this.log.debug(\"init protocol: {}\", protocolName); if (WaffleAuthenticatorBase.SUPPORTED_PROTOCOLS.contains(protocolName)) { this.protocols.add(protocolName); } else { this.log.error(\"unsupported protocol: {}\", protocolName); throw new RuntimeException(\"Unsupported protocol: \" + protocolName); } } } }### Assistant: @Test void should_accept_Negotiate_protocol() { this.waffleAuthenticatorBase.setProtocols(\" Negotiate \"); Assertions.assertEquals(1, this.waffleAuthenticatorBase.protocols.size(), \"One protocol added\"); Assertions.assertEquals(\"Negotiate\", this.waffleAuthenticatorBase.protocols.iterator().next()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Type optional(Type innerType) { return SimpleParameterizedType.create(Optional.class, innerType); }### Assistant: @Test void optional() { assertSingleParameter(Optional.class, Integer.class, DefaultType::optional); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Long hDel(byte[] key, byte[]... fields) { return helper.doInScope(RedisCommand.HDEL, key, () -> connection.hDel(key, fields)); }### Assistant: @Test public void invokingHDelCreatesNewSpan() { commandCreatesNewSpan(RedisCommand.HDEL, () -> getConnection().hDel(\"key\".getBytes(), \"field\".getBytes())); verify(mockRedisConnection()).hDel(\"key\".getBytes(), \"field\".getBytes()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int getHttpServicePort(final BundleContext bc) { return getHttpServicePortProperty(bc, \"org.osgi.service.http.port\"); }### Assistant: @Test public void shouldReturnHttpServicePortFromServiceReference() { int port = HttpServiceUtil.getHttpServicePort(bundleContext); assertThat(port, is(8080)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public HelmInstall version(String version) { return withFlags(Argument.of(\"--version\", version)); }### Assistant: @Test public void shouldAddVersionOption() { HelmInstall command = Helm.install(\"foo\"); HelmInstall copy = command.version(\"bar\"); assertThat(copy, is(not(sameInstance(command)))); assertCommand(copy, \"install\", \"foo\", \"--version\", \"bar\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Column[] getPrimaryKeys() throws DataSetException { return new Column[0]; }### Assistant: @Test public void testGetPrimaryKeys() throws DataSetException { assertThat(tableMetaData.getPrimaryKeys().length, is(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Type type() { return InternalTypeSystem.TYPE_SYSTEM.LOCAL_DATE_TIME(); }### Assistant: @Test void shouldHaveCorrectType() { LocalDateTime dateTime = LocalDateTime.of( 1991, AUGUST, 24, 12, 0, 0 ); LocalDateTimeValue dateTimeValue = new LocalDateTimeValue( dateTime ); assertEquals( InternalTypeSystem.TYPE_SYSTEM.LOCAL_DATE_TIME(), dateTimeValue.type() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Properties loadProperties(final String configFile) { Properties properties = new Properties(); try { checkPropertyFileArgument(configFile); InputStream inputStream = new FileInputStream(configFile); properties.load(inputStream); logger.debug(\"Properties loaded from external configuration.\"); } catch (IOException e) { throw new PropertiesNotAvailableException(\"Configuration file \" + configFile + \" cannot be loaded\", e); } return properties; }### Assistant: @Test(expectedExceptions = PropertiesNotAvailableException.class) public void testLoadPropertiesWhenProgramArgumentInvalidShouldThrowException() { Whitebox.setInternalState(underTest, \"configFile\", \"wilma.conf.prop\"); underTest.loadProperties(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ConditionList buildUpdateConditions(List<Segment> filtered) { if(filtered.contains(SegmentConstants.INSERT)) { if(filtered.contains(SegmentConstants.SELECT) || filtered.contains(SegmentConstants.SET)) { filtered = filterColumnList(filtered); return buildQueryConditions(filtered); } return buildByParameters(filtered); } if(filtered.contains(SegmentConstants.DELETE)) { return buildQueryConditions(filtered); } if(filtered.contains(SegmentConstants.UPDATE)) { return buildQueryConditions(filtered); } return buildByParameters(filtered); }### Assistant: @Test public void testUpdate() throws SQLException { SqlBuilder builder = SqlBuilder.update(p).set(p.Name.eq(\"Jerry\"), p.CountryID.eq(1)); ConditionList cl = builder.buildUpdateConditions(); assertTrue(cl.isIntersected()); assertEquals(2, cl.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static IDifference construct(String name, Point3d first, Point3d second) { if (first == null && second == null) return null; Point3dDifference totalDiff = new Point3dDifference(name); totalDiff.addChild(DoubleDifference.construct(\"x\", first == null ? null : first.x, second == null ? null : second.x)); totalDiff.addChild(DoubleDifference.construct(\"y\", first == null ? null : first.y, second == null ? null : second.y)); totalDiff.addChild(DoubleDifference.construct(\"z\", first == null ? null : first.z, second == null ? null : second.z)); if (totalDiff.childCount() == 0) { return null; } return totalDiff; }### Assistant: @Test public void testSame() { Point3d foo = new Point3d(1.0, 2.0, 4.5); Point3d bar = new Point3d(1.0, 2.0, 4.5); IDifference result = Point3dDifference.construct(\"Foo\", foo, bar); Assert.assertNull(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> T get(Map<String, Object> struct, String dotSeparatedPath, Class<T> expectedType) { final String[] parts = dotSeparatedPath.split(\"\\\\.\"); return get(struct, parts, expectedType, new LinkedList<>(), dotSeparatedPath); }### Assistant: @Test public void gettingNonExistingTerminalShouldFail() { final String path = \"patch.value.typed_config.value.root_id\"; try { assertEquals(\"stats_outbound\", StructHelper.get(map, path, String.class)); fail(\"Should have thrown an IllegalArgumentException\"); } catch (IllegalArgumentException e) { final String message = e.getMessage(); assertEquals(\"'root_id' is not a child of 'patch.value.typed_config.value'. Known children: \" + \"'config'\", message); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public UserProfile fetchUserProfile(GitHub github) { GitHubUserProfile profile = github.userOperations().getUserProfile(); return new UserProfileBuilder().setName(profile.getName()).setEmail(profile.getEmail()).setUsername(profile.getLogin()).build(); }### Assistant: @Test public void fetchProfileMiddleName() { UserOperations userOperations = Mockito.mock(UserOperations.class); when(github.userOperations()).thenReturn(userOperations); when(userOperations.getUserProfile()).thenReturn(createProfile(123456L, \"habuma\", \"Michael Craig Walls\", \"Plano, TX\", \"SpringSource\", null, \"cwalls@vmware.com\", null, null)); UserProfile profile = apiAdapter.fetchUserProfile(github); assertEquals(\"Michael Craig Walls\", profile.getName()); assertEquals(\"Michael\", profile.getFirstName()); assertEquals(\"Walls\", profile.getLastName()); assertEquals(\"cwalls@vmware.com\", profile.getEmail()); assertEquals(\"habuma\", profile.getUsername()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public MetadataReportBuilder group(String group) { this.group = group; return getThis(); }### Assistant: @Test void group() { MetadataReportBuilder builder = new MetadataReportBuilder(); builder.group(\"group\"); Assertions.assertEquals(\"group\", builder.build().getGroup()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void generatePagerLinks( Pager pager, Class<?> klass ) { if ( pager == null ) { return; } Schema schema = schemaService.getDynamicSchema( klass ); if ( !schema.haveApiEndpoint() ) { return; } generatePagerLinks( pager, schema.getRelativeApiEndpoint() ); }### Assistant: @Test public void prevLinkDefaultParameters() { Mockito.when( schemaService.getDynamicSchema( Mockito.eq( OrganisationUnit.class ) ) ).thenAnswer( invocation -> { Schema schema = new Schema( OrganisationUnit.class, \"organisationUnit\", \"organisationUnits\" ); schema.setRelativeApiEndpoint( \"/organizationUnits\" ); return schema; } ); request.setRequestURI( \"/organizationUnits.xml\" ); Mockito.when( contextService.getRequest() ).thenReturn( request ); Mockito.when( contextService.getApiPath() ).thenReturn( \"/demo/api/456\" ); Mockito.when( contextService.getParameterValuesMap() ).thenAnswer( invocation -> { final Map<String, List<String>> map = new HashMap<>(); map.put( \"page\", Collections.singletonList( \"1\" ) ); map.put( \"pageSize\", Collections.singletonList( \"55\" ) ); return map; } ); final Pager pager = new Pager( 2, 60 ); service.generatePagerLinks( pager, OrganisationUnit.class ); Assert.assertEquals( \"/demo/api/456/organizationUnits.xml\", pager.getPrevPage() ); Assert.assertNull( pager.getNextPage() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Color getColor(ResultSet rs, long fid) throws ParameterException { return getParameter(rs, fid).getColor(rs, fid); }### Assistant: @Test public void testAddMapItems(){ try { recode.addMapItem(key1, c1); assertTrue(recode.getNumMapItem() == 1); assertTrue(recode.getMapItemKey(0).equals(\"k1\")); assertTrue(recode.getMapItemValue(0).getColor(null, -1) == c1.getColor(null, -1)); assertTrue(recode.getMapItemValue(\"k1\").getColor(null, -1) == c1.getColor(null, -1)); recode.addMapItem(key2, c2); assertTrue(recode.getNumMapItem() == 2); assertTrue(recode.getMapItemKey(0).equals(\"k1\")); assertTrue(recode.getMapItemKey(1).equals(\"k2\")); assertTrue(recode.getMapItemValue(1).getColor(null, -1) == c2.getColor(null, -1)); assertTrue(recode.getMapItemValue(\"k2\").getColor(null, -1) == c2.getColor(null, -1)); recode.addMapItem(key3, c3); assertTrue(recode.getNumMapItem() == 3); assertTrue(recode.getMapItemKey(0).equals(\"k1\")); assertTrue(recode.getMapItemKey(1).equals(\"k2\")); assertTrue(recode.getMapItemKey(2).equals(\"k3\")); assertTrue(recode.getMapItemValue(2).getColor(null, -1) == c3.getColor(null, -1)); assertTrue(recode.getMapItemValue(\"k3\").getColor(null, -1) == c3.getColor(null, -1)); } catch (ParameterException ex) { Logger.getLogger(Recode2ColorTest.class.getName()).log(Level.SEVERE, null, ex); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static SimilarityUnit calcSimilarity(BufferedImage expectedImage, BufferedImage actualImage, Rectangle rectangle, ComparedRectangleArea similarRectangle, Offset offset) { return calcSimilarity(expectedImage, actualImage, rectangle, similarRectangle, offset, -1); }### Assistant: @Test public void testCalcSimilarityWithDiff() throws Exception { BufferedImage image1 = ImageIO.read(getClass().getResource(\"hifive_logo.png\")); BufferedImage image2 = ImageIO.read(getClass().getResource(\"hifive_logo_similar.png\")); Rectangle rectangle = new Rectangle(0, 0, image1.getWidth(), image1.getHeight()); ComparedRectangleArea similarRectangle = new ComparedRectangleArea(rectangle); Offset offset = new Offset(0, 0); SimilarityUnit unit; double actual; unit = SimilarityUtils.calcSimilarity(image1, image2, rectangle, similarRectangle, offset); actual = unit.getSimilarityThresDiff(); assertThat(actual, is(0.97)); unit = SimilarityUtils.calcSimilarity(image1, image2, rectangle, similarRectangle, offset, 1.0); actual = unit.getSimilarityThresDiff(); assertThat(actual, is(0.97)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int hashCode() { return Objects.hashCode(super.hashCode(), description, statusColor, iconUrl); }### Assistant: @Test public void testHashCode() throws Exception { assertEquals(P1.hashCode(), P2.hashCode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onVisit(Schema schema, Collection<String> breadcrumb) { if (PII.equalsIgnoreCase(schema.getProp(SENSITIVITY))) { throw new InvalidPiiAnnotationException(breadcrumb); } }### Assistant: @Test public void schemaWithPii() throws Exception { Schema schema = SchemaBuilder.builder().stringBuilder().prop(SENSITIVITY, PII).endString(); try { underTest.onVisit(schema, breadcrumb); fail(); } catch (InvalidPiiAnnotationException e) { assertThat(e.getPath(), is(\"/a/b\")); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public long getDurationUs() { return durationUs; }### Assistant: @Test public void testGetDurationUs_forKnownInputLength_returnCorrectDuration() { constantBitrateSeekMap = new ConstantBitrateSeekMap( 2_300, 100, 8_000, 100); assertThat(constantBitrateSeekMap.getDurationUs()).isEqualTo(2_200_000); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private static String toString(final FsPermission permission) { return String.format(\"%o\", permission.toShort()); }### Assistant: @Test public void testHdfsFileStatus() throws Exception { HdfsFileStatus hdfsFileStatus = new HdfsFileStatus.Builder() .replication(1) .blocksize(1024) .perm(new FsPermission((short) 777)) .owner(\"owner\") .group(\"group\") .symlink(new byte[0]) .path(new byte[0]) .fileId(1010) .isdir(true) .build(); assertFalse(hdfsFileStatus.isSymlink()); LambdaTestUtils.intercept(IOException.class, \"Path \" + hdfsFileStatus.getPath() + \" is not a symbolic link\", () -> hdfsFileStatus.getSymlink()); String expectString = new StringBuilder() .append(\"HdfsLocatedFileStatus\") .append(\"{\") .append(\"path=\" + null) .append(\"; isDirectory=\" + true) .append(\"; modification_time=\" + 0) .append(\"; access_time=\" + 0) .append(\"; owner=\" + \"owner\") .append(\"; group=\" + \"group\") .append(\"; permission=\" + \"r----x--t\") .append(\"; isSymlink=\" + false) .append(\"; hasAcl=\" + false) .append(\"; isEncrypted=\" + false) .append(\"; isErasureCoded=\" + false) .append(\"}\") .toString(); assertEquals(expectString, hdfsFileStatus.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public RequestTemplate method(String method) { checkNotNull(method, \"method\"); try { this.method = HttpMethod.valueOf(method); } catch (IllegalArgumentException iae) { throw new IllegalArgumentException(\"Invalid HTTP Method: \" + method); } return this; }### Assistant: @SuppressWarnings(\"deprecation\") @Test public void uriStuffedIntoMethod() { thrown.expect(IllegalArgumentException.class); thrown.expectMessage(\"Invalid HTTP Method: /path?queryParam={queryParam}\"); new RequestTemplate().method(\"/path?queryParam={queryParam}\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int readerIndex() { return readerIndex; }### Assistant: @Test(expected = IllegalReferenceCountException.class) public void testInternalNioBufferAfterRelease() { ByteBuf releasedBuffer = releasedBuffer(); releasedBuffer.internalNioBuffer(releasedBuffer.readerIndex(), 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Optional<String> get() { try { if (n >= 0 && n < LENGTH) { return Optional.of(String.format(\"%s%s\", CHAR1.charAt(n % CHAR1.length()), CHAR2.charAt(n / CHAR1.length()) ).trim()); } return Optional.empty(); } finally { n += 1; } }### Assistant: @Test public void testNameSequence() { Map<Integer,String> expecteds = new HashMap<>(); expecteds.put(0, \"A\"); expecteds.put(25, \"Z\"); expecteds.put(26, \"AA\"); expecteds.put(51, \"ZA\"); expecteds.put(52, \"AB\"); expecteds.put(77, \"ZB\"); expecteds.put(VariableNameGenerator.LENGTH-1, \"Z9\"); int lastCheck = expecteds.keySet().stream().max(Integer::compare).get(); VariableNameGenerator gen = new VariableNameGenerator(); for (int i = 0; i <= lastCheck; i++) { String varName = gen.get().orElseThrow(() -> new RuntimeException(\"Ran out of variable names too early!\")); if (expecteds.containsKey(i)) { assertEquals(expecteds.get(i), varName); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean shouldOverrideUrlLoading(WebView view, String url) { if (handleSpecialMoPubScheme(url) || handlePhoneScheme(url) || handleNativeBrowserScheme(url)) { return true; } MoPubLog.d(\"Ad clicked. Click URL: \" + url); if (!isWebSiteUrl(url) && IntentUtils.canHandleApplicationUrl(mContext, url)) { if (launchApplicationUrl(url)) { return true; } } showMoPubBrowserForUrl(url); return true; }### Assistant: @Test public void shouldOverrideUrlLoading_withEmptyUrl_withUserClick_shouldLoadAboutBlank() throws Exception { stub(htmlWebView.wasClicked()).toReturn(true); subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null); subject.shouldOverrideUrlLoading(htmlWebView, \"\"); Intent startedActivity = assertActivityStarted(); assertThat(startedActivity.getComponent().getClassName()).isEqualTo(\"com.mopub.common.MoPubBrowser\"); assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(\"about:blank\"); assertThat(startedActivity.getData()).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting void globalUpdates(String args, SchedConfUpdateInfo updateInfo) { if (args == null) { return; } HashMap<String, String> globalUpdates = new HashMap<>(); for (String globalUpdate : args.split(SPLIT_BY_SLASH_COMMA)) { globalUpdate = globalUpdate.replace(\"\\\\\", \"\"); putKeyValuePair(globalUpdates, globalUpdate); } updateInfo.setGlobalParams(globalUpdates); }### Assistant: @Test(timeout = 10000) public void testGlobalUpdate() { SchedConfUpdateInfo schedUpdateInfo = new SchedConfUpdateInfo(); cli.globalUpdates(\"schedKey1=schedVal1,schedKey2=schedVal2\", schedUpdateInfo); Map<String, String> paramValues = new HashMap<>(); paramValues.put(\"schedKey1\", \"schedVal1\"); paramValues.put(\"schedKey2\", \"schedVal2\"); validateGlobalParams(schedUpdateInfo, paramValues); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean checkReversing(ListNode list) { validateInput(list); ListNode<Integer> reversedList = reverseLinkedList.reverseIterative(list); boolean isPalindrome = true; while (list != null) { isPalindrome = list.equals(reversedList); if (!isPalindrome) { break; } reversedList = reversedList.getNext(); list = list.getNext(); } return isPalindrome; }### Assistant: @Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullListAsInputReversing() { palindromeList.checkReversing(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String[] convertToStringArray(Object o) { String[] result; if (o == null) { result = new String[0]; } else if (o instanceof List) { List list = (List) o; result = new String[list.size()]; for (int i = 0; i < list.size(); i++) { result[i] = String.valueOf(list.get(i)); } } else if (o.getClass().isArray()) { Object[] array = (Object[]) o; result = new String[array.length]; for (int i = 0; i < array.length; i++) { result[i] = String.valueOf(array[i]); } } else { result = new String[1]; result[0] = String.valueOf(o); } return result; }### Assistant: @Test public void testConvertToStringArray() throws Exception { assertThat(convertToStringArray(null), Is.<Object>is(new String[0])); assertThat(convertToStringArray(\"test\"), Is.<Object>is(new String[]{\"test\"})); assertThat(convertToStringArray(new String[]{\"test\"}), Is.<Object>is(new String[]{\"test\"})); assertThat(convertToStringArray(singletonList(\"test\")), Is.<Object>is(new String[]{\"test\"})); assertThat(convertToStringArray(new Vector<>(singletonList(\"test\"))), Is.<Object>is(new String[]{\"test\"})); assertThat(convertToStringArray(1), Is.<Object>is(new String[]{\"1\"})); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public RecognitionResult getRecognitionResult(final Mmi mmi, final ExtensionNotification ext) throws ConversionException { JAXBContext context; try { context = JAXBContext.newInstance(Mmi.class); Marshaller marshaller = context.createMarshaller(); final EmmaSemanticInterpretationExtractor extractor = new EmmaSemanticInterpretationExtractor(); marshaller.marshal(mmi, extractor); return extractor.getRecognitonResult(); } catch (JAXBException e) { throw new ConversionException(e.getMessage(), e); } }### Assistant: @Test public void testSimple() throws Exception { final Mmi mmi = new Mmi(); final ExtensionNotification notification = new ExtensionNotification(); mmi.setExtensionNotification(notification); notification.setContext(UUID.randomUUID().toString()); notification.setRequestId(\"42\"); notification.setSource(\"fromhere\"); notification.setTarget(\"tothere\"); final AnyComplexType any = new AnyComplexType(); notification.setData(any); final DocumentBuilderFactory factory = DocumentBuilderFactory .newInstance(); factory.setNamespaceAware(true); final DocumentBuilder builder = factory.newDocumentBuilder(); final Document document = builder.newDocument(); final Element emma = document.createElementNS(EMMA_NAMESPACE, \"emma:emma\"); emma.setAttribute(\"version\", \"1.0\"); document.appendChild(emma); final Element interpretation = document.createElementNS(EMMA_NAMESPACE, \"emma:interpretation\"); interpretation.setAttribute(\"id\", \"dummy\"); interpretation .setAttributeNS(EMMA_NAMESPACE, \"emma:medium\", \"acoustic\"); any.addContent(emma); interpretation.setAttributeNS(EMMA_NAMESPACE, \"emma:mode\", \"mmi\"); float confidence = 0.4f; interpretation.setAttributeNS(EMMA_NAMESPACE, \"emma:confidence\", Float.toString(confidence)); final String tokens = \"this is a test\"; interpretation.setAttributeNS(EMMA_NAMESPACE, \"emma:tokens\", tokens); emma.appendChild(interpretation); final XmlExtensionNotificationDataExtractor extractor = new XmlExtensionNotificationDataExtractor(); final ExtensionNotification ext = mmi.getExtensionNotification(); final RecognitionResult result = extractor.getRecognitionResult(mmi, ext); Assert.assertEquals(tokens, result.getUtterance()); Assert.assertEquals(confidence, result.getConfidence(), .001); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private NhsCodeValidator() {}### Assistant: @Test public void nhsCodeValidatorTest() { assertThat(NhsCodeValidator.nhsNumberValid(\"0123456789\")).isTrue(); assertThat(NhsCodeValidator.nhsNumberValid(null)).isFalse(); assertThat(NhsCodeValidator.nhsNumberValid(\"\")).isFalse(); assertThat(NhsCodeValidator.nhsNumberValid(\"012345678\")).isFalse(); assertThat(NhsCodeValidator.nhsNumberValid(\"01234567890\")).isFalse(); assertThat(NhsCodeValidator.nhsNumberValid(\"012345678A\")).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"deprecation\") static HttpUriRequest createHttpRequest( Request<?> request, Map<String, String> additionalHeaders) throws AuthFailureError { switch (request.getMethod()) { case Method.DEPRECATED_GET_OR_POST: { byte[] postBody = request.getPostBody(); if (postBody != null) { HttpPost postRequest = new HttpPost(request.getUrl()); postRequest.addHeader( HEADER_CONTENT_TYPE, request.getPostBodyContentType()); HttpEntity entity; entity = new ByteArrayEntity(postBody); postRequest.setEntity(entity); return postRequest; } else { return new HttpGet(request.getUrl()); } } case Method.GET: return new HttpGet(request.getUrl()); case Method.DELETE: return new HttpDelete(request.getUrl()); case Method.POST: { HttpPost postRequest = new HttpPost(request.getUrl()); postRequest.addHeader(HEADER_CONTENT_TYPE, request.getBodyContentType()); setEntityIfNonEmptyBody(postRequest, request); return postRequest; } case Method.PUT: { HttpPut putRequest = new HttpPut(request.getUrl()); putRequest.addHeader(HEADER_CONTENT_TYPE, request.getBodyContentType()); setEntityIfNonEmptyBody(putRequest, request); return putRequest; } case Method.HEAD: return new HttpHead(request.getUrl()); case Method.OPTIONS: return new HttpOptions(request.getUrl()); case Method.TRACE: return new HttpTrace(request.getUrl()); case Method.PATCH: { HttpPatch patchRequest = new HttpPatch(request.getUrl()); patchRequest.addHeader(HEADER_CONTENT_TYPE, request.getBodyContentType()); setEntityIfNonEmptyBody(patchRequest, request); return patchRequest; } default: throw new IllegalStateException(\"Unknown request method.\"); } }### Assistant: @Test public void createPutRequestWithBody() throws Exception { TestRequest.PutWithBody request = new TestRequest.PutWithBody(); assertEquals(request.getMethod(), Method.PUT); HttpUriRequest httpRequest = HttpClientStack.createHttpRequest(request, null); assertTrue(httpRequest instanceof HttpPut); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void releaseLock(Lock lockImpl, String lock, String token, Logger log){ if(lockImpl == null){ log.info(\"No lock implementation defined, going to pretend like we released the lock\"); return; } log.debug(\"Trying to release lock '\"+lock+\"' with token '\"+token+\"'\"); lockImpl.releaseLock(lock, token).setHandler(releaseEvent -> { if(releaseEvent.succeeded()){ if(releaseEvent.result()){ log.debug(\"Released lock '\"+lock+\"' with token '\"+token+\"'\"); } } else { log.error(\"Could not release lock '\"+lock+\"'. Message: \" + releaseEvent.cause().getMessage()); } }); }### Assistant: @Test public void testReleaseLockError(TestContext context) { Mockito.when(lock.releaseLock(anyString(), anyString())).thenReturn(Future.failedFuture(\"Booom\")); LockUtil.releaseLock(lock, \"someLock\", \"someToken\", log); Mockito.verify(log, Mockito.times(1)).debug(Matchers.eq(\"Trying to release lock 'someLock' with token 'someToken'\")); Mockito.verify(log, Mockito.times(1)).error(Matchers.eq(\"Could not release lock 'someLock'. Message: Booom\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static LogicalSearchFilter or(final SearchFilter filter1, final SearchFilter filter2, final SearchFilter... furtherFilters) { return ImmutableLogicalFilter.or(filter1, filter2, furtherFilters); }### Assistant: @Test public void createOrFilterWithMultipleFilters() { final LogicalSearchFilter searchFilter = SearchModelFactory.or(filterMock, filterMock, filterMock, filterMock); final Collection<SearchFilter> filters = searchFilter.getFilters(); assertThat(filters).hasSize(4); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isEmpty(Object o) { if (null == o) { return true; } if (o instanceof String) { return 0 == ((String) o).length(); } if (o instanceof Collection<?>) { return ((Collection<?>) o).isEmpty(); } if (o instanceof Map<?, ?>) { return ((Map<?, ?>) o).isEmpty(); } if (o.getClass().isArray()) { return Array.getLength(o) == 0; } return false; }### Assistant: @Test public void testIsEmpty() throws Exception { assertTrue(utils.isEmpty(null)); assertFalse(utils.isEmpty(new Object())); assertFalse(utils.isEmpty(Boolean.FALSE)); assertFalse(utils.isEmpty(Long.valueOf(0))); assertFalse(utils.isEmpty(Integer.valueOf(0))); assertFalse(utils.isEmpty(Short.valueOf((short) 0))); assertFalse(utils.isEmpty(Byte.valueOf((byte) 0))); assertTrue(utils.isEmpty(\"\")); assertFalse(utils.isEmpty(\"s\")); assertTrue(utils.isEmpty(new ArrayList<Object>())); assertTrue(utils.isEmpty(Collections.EMPTY_LIST)); List<Object> testList = new ArrayList<Object>(); testList.add(\"x\"); assertFalse(utils.isEmpty(testList)); assertTrue(utils.isEmpty(new HashMap<String, Object>())); assertTrue(utils.isEmpty(Collections.EMPTY_MAP)); Map<String, Object> testMap = new HashMap<String, Object>(); testMap.put(\"x\", \"y\"); assertFalse(utils.isEmpty(testMap)); assertTrue(utils.isEmpty(new Object[0])); assertTrue(utils.isEmpty(new int[0])); assertFalse(utils.isEmpty(new Object[1])); assertFalse(utils.isEmpty(new int[1])); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> T deserialize(Node value, Class<T> into) { return deserializeNext(value, \"\", into, Object.class, this); }### Assistant: @Test @SuppressWarnings(\"unchecked\") public void deserializesArrayObject() { Node value = Node.fromStrings(\"a\", \"b\"); NodeMapper mapper = new NodeMapper(); Object result = mapper.deserialize(value, Object.class); assertThat((ArrayList<Object>) result, contains(\"a\", \"b\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static final KeyTemplate aes256CmacTemplate() { AesCmacPrfKeyFormat format = AesCmacPrfKeyFormat.newBuilder().setKeySize(32).build(); return KeyTemplate.create( new AesCmacPrfKeyManager().getKeyType(), format.toByteArray(), KeyTemplate.OutputPrefixType.RAW); }### Assistant: @Test public void testAes256CmacTemplate() throws Exception { KeyTemplate template = AesCmacPrfKeyManager.aes256CmacTemplate(); assertThat(template.getTypeUrl()).isEqualTo(new AesCmacPrfKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW); AesCmacPrfKeyFormat format = AesCmacPrfKeyFormat.parseFrom( template.getValue(), ExtensionRegistryLite.getEmptyRegistry()); assertThat(format.getKeySize()).isEqualTo(32); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkSignatures (File file, InputStream stream, RepInfo info) throws IOException { info.setFormat (_format[0]); info.setMimeType (_mimeType[0]); info.setModule (this); ByteCountingPushBackInputStream pbin = new ByteCountingPushBackInputStream(stream, GzipReader.DEFAULT_INPUT_BUFFER_SIZE); boolean checkIsWarc = WarcReaderFactory.isWarcFile(pbin); if (checkIsWarc) { info.setSigMatch(_name); return; } boolean checkIsGzip = GzipReader.isGzipped(pbin); if (checkIsGzip) { info.setSigMatch(_name); return; } info.setWellFormed (false); }### Assistant: @Test public void checkSignatureValidUTF8File() throws Exception { File warcFile = new File(\"src/test/resources/warc/valid-warcfile-utf8.warc\"); WarcModule wm = new WarcModule(); RepInfo info = new RepInfo(warcFile.getAbsolutePath()); wm.checkSignatures(null, new FileInputStream(warcFile), info); assertEquals(RepInfo.TRUE, info.getWellFormed()); assertEquals(WarcModule.class, info.getModule().getClass()); assertEquals(Arrays.asList(wm.getName()), info.getSigMatch()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Pure public BusNetwork getBusNetwork() { return this; }### Assistant: @Test public void testGetBusNetwork() { assertSame(this.network, this.network.getBusNetwork()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<MappingRule> getMappingRules(String jsonPath) throws IOException { MappingRulesDescription desc = getMappingRulesFromJson(jsonPath); return getMappingRules(desc); }### Assistant: @Test public void testMatchesUnset() { rule.setMatches(null); expected.expect(IllegalArgumentException.class); expected.expectMessage(\"Match string is undefined\"); ruleCreator.getMappingRules(description); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void write(int b) throws IOException { int expected = expectedBytesStream.read(); if (expected == -1) { throw new MismatchException(\"EOF reached in expectedBytesStream\"); } if (expected != b) { throw new MismatchException(\"Data does not match\"); } }### Assistant: @Test(expected = MismatchException.class) public void testWrite_PastEndOfMatchStream() throws IOException { outputStream.write(data); outputStream.write(data); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Constraint<G, C> constraint() { return _constraint; }### Assistant: @Test public void constraint() { final int populationSize = 100; final Engine<DoubleGene, Double> engine = Engine .builder(a -> a.gene().allele(), DoubleChromosome.of(0, 1)) .constraint(RetryConstraint.of(pt -> false)) .populationSize(populationSize) .build(); final EvolutionResult<DoubleGene, Double> result = engine.stream() .limit(10) .collect(EvolutionResult.toBestEvolutionResult()); Assert.assertEquals(result.invalidCount(), populationSize); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public QueryResult<User> query(final Query<User> query) { final String roleField = \"roles\"; final xyz.morphia.query.Query<User> q = this.datastore.createQuery(User.class); if (query.doFilter()) { final List<String> roles = query.getFilters().get(roleField); final List<String> batchIds = query.getFilters().get(\"batchid\"); if (roles != null) { q.field(roleField).hasAllOf(new ArrayList<>(roles)); } if (batchIds != null) { q.field(\"batchId\").equal(batchIds.get(0)); } } final FindOptions options = new FindOptions(); if (query.doPaginate()) { options.limit(query.getPageSize()); options.skip(query.getPageNumber() * query.getPageSize()); } final long total = q.count(); final List<User> ret = q.asList(options); return new QueryResult<>(query, ret, (int) total); }### Assistant: @Test public void testPaginationFull() { final int usersTotal = 13; final int pageLen = 6; final int pageIndex = 1; this.fillUsers(usersTotal); final MultivaluedHashMap<String, String> paginationParams = new MultivaluedHashMap<>(); paginationParams.add(\"page[number]\", \"\" + pageIndex); paginationParams.add(\"page[size]\", \"\" + pageLen); final Query<User> paginationQuery = Query.fromParameterMap(paginationParams); final xyz.morphia.query.Query<User> q = Mockito.mock(xyz.morphia.query.Query.class); Mockito.when(this.store.createQuery(User.class)).thenReturn(q); Mockito.doAnswer(new Answer<List<User>>() { @Override public List<User> answer(final InvocationOnMock invocation) throws Throwable { final FindOptions options = invocation.getArgument(0, FindOptions.class); final int skip = options.getSkip(); final int limit = options.getLimit(); final List<User> r = new ArrayList<>(UserServiceTest.this.users.subList(skip, skip + limit)); return r; } }).when(q).asList(ArgumentMatchers.any(FindOptions.class)); final QueryResult<User> returned = this.userService.query(paginationQuery); Assert.assertEquals(pageLen, returned.getN()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static JsonNode buildBeanForInput(TypeDescriptor descriptor) throws JDOMException, IOException { Element element = XMLSplitterSerialisationHelper.typeDescriptorToExtensionXML(descriptor); return buildBeanForInput(element); }### Assistant: @Test public void testBuildBeanForInput2() throws Exception { String xml = \"<s:extensions xmlns:s=\\\"http: Element element = new SAXBuilder().build(new StringReader(xml)).getRootElement(); JsonNode bean = XMLSplitterConfigurationBeanBuilder.buildBeanForInput(element); assertNotNull(\"The bean should not be null\",bean); assertEquals(\"There should be 4 inputs\",4,bean.get(\"inputPorts\").size()); assertEquals(\"There should be 1 output\",1,bean.get(\"outputPorts\").size()); assertEquals(\"The first input should be named address\",\"address\",bean.get(\"inputPorts\").get(0).get(\"name\").textValue()); assertEquals(\"The output should be named output\",\"output\",bean.get(\"outputPorts\").get(0).get(\"name\").textValue()); assertEquals(\"The type xml definition should match\",xml,bean.get(\"wrappedType\").textValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String telnet(Channel channel, String message) { StringBuilder buf = new StringBuilder(); String port = null; boolean detail = false; if (message.length() > 0) { String[] parts = message.split(\"\\\\s+\"); for (String part : parts) { if (\"-l\".equals(part)) { detail = true; } else { if (!StringUtils.isInteger(part)) { return \"Illegal port \" + part + \", must be integer.\"; } port = part; } } } if (port == null || port.length() == 0) { for (ProtocolServer server : DubboProtocol.getDubboProtocol().getServers()) { if (buf.length() > 0) { buf.append(\"\\r\\n\"); } if (detail) { buf.append(server.getUrl().getProtocol()).append(\": } else { buf.append(server.getUrl().getPort()); } } } else { int p = Integer.parseInt(port); ProtocolServer protocolServer = null; for (ProtocolServer s : DubboProtocol.getDubboProtocol().getServers()) { if (p == s.getUrl().getPort()) { protocolServer = s; break; } } if (protocolServer != null) { ExchangeServer server = (ExchangeServer) protocolServer.getRemotingServer(); Collection<ExchangeChannel> channels = server.getExchangeChannels(); for (ExchangeChannel c : channels) { if (buf.length() > 0) { buf.append(\"\\r\\n\"); } if (detail) { buf.append(c.getRemoteAddress()).append(\" -> \").append(c.getLocalAddress()); } else { buf.append(c.getRemoteAddress()); } } } else { buf.append(\"No such port \").append(port); } } return buf.toString(); }### Assistant: @Test public void testNoPort() throws RemotingException { String result = port.telnet(null, \"-l 20880\"); assertEquals(\"No such port 20880\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static final String write(GeometryWrapper geometryWrapper) { StringBuilder sb = new StringBuilder(); SRSInfo srsInfo = geometryWrapper.getSrsInfo(); if (!srsInfo.isWktDefault()) { sb.append(\"<\").append(geometryWrapper.getSrsURI()).append(\"> \"); } Geometry geometry = geometryWrapper.getParsingGeometry(); CoordinateSequenceDimensions dimensions = geometryWrapper.getCoordinateSequenceDimensions(); String wktText = expand(geometry, dimensions); sb.append(wktText); return sb.toString(); }### Assistant: @Test public void testWriteMultiPolygonEmpty() { Geometry geometry = GEOMETRY_FACTORY.createMultiPolygon(); GeometryWrapper geometryWrapper = new GeometryWrapper(geometry, SRS_URI.DEFAULT_WKT_CRS84, WKTDatatype.URI, new DimensionInfo(2, 2, 2)); String result = WKTWriter.write(geometryWrapper); String expResult = \"MULTIPOLYGON EMPTY\"; assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public T handle(Request request, Response response) { if (!successfulResponseCodes.contains(response.getStatusCode())) { throw new UnexpectedResponseException( String.format(\"Expected response code to be %s, but was %d: %s\", successfulResponseCodes, response.getStatusCode(), response.getStatusMessage()), request, response); } String contentType = response.getHeader(CONTENT_TYPE); if (contentType == null) { throw new UnexpectedResponseException(\"Content-Type is not set for response\", request, response); } if (!MediaType.parse(contentType).is(MEDIA_TYPE_SMILE)) { throw new UnexpectedResponseException(\"Expected application/x-jackson-smile response from server but got \" + contentType, request, response); } try { JsonParser jsonParser = new SmileFactory().createParser(response.getInputStream()); ObjectMapper objectMapper = OBJECT_MAPPER_SUPPLIER.get(); jsonParser.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE); return objectMapper.readValue(jsonParser, objectMapper.getTypeFactory().constructType(jsonCodec.getType())); } catch (InvalidFormatException e) { throw new IllegalArgumentException(\"Unable to create \" + jsonCodec.getType() + \" from SMILE response\", e); } catch (IOException e) { throw new RuntimeException(\"Error reading SMILE response from server\", e); } }### Assistant: @Test(expectedExceptions = UnexpectedResponseException.class, expectedExceptionsMessageRegExp = \"Expected application/x-jackson-smile response from server but got text/plain; charset=utf-8\") public void testNonJsonResponse() { handler.handle(null, mockResponse() .contentType(PLAIN_TEXT_UTF_8) .body(\"hello\") .build()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String read(ByteBuffer buffer) { byte[] bytes = new byte[this.length]; buffer.position(this.start); buffer.get(bytes); String fieldValue = new String(bytes); if (!whitespaceSignificant || fieldValue.trim().isEmpty()) { fieldValue = fieldValue.trim(); } log.debug(\"Read {}='{}'\", this.id, fieldValue); return fieldValue; }### Assistant: @Test public void testRead_withSignificantWhitespaceButEmptyWithNull() { Field aField = new Field(\"abc\", 2, 6, false,false,null,true); buffer.position(0); byte[] bytes = new byte[]{'1','2','\\u0000','\\u0000','\\u0000','\\u0000','\\u0000','\\u0000'}; buffer.put(bytes); String result = aField.read(buffer); assertEquals(\"\",result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void unzip(java.io.File zipFile, java.io.File destination) throws IOException { boolean success; if (zipFile == null) { logger.error(\"The zip file cannot be null\"); throw new IllegalArgumentException(\"The zip file must be set\"); } if (!zipFile.exists()) { logger.error(\"The zip file does not exist: {}\", zipFile.getCanonicalPath()); throw new FileNotFoundException(\"The zip file does not exist: \" + zipFile.getCanonicalPath()); } if (destination == null) { logger.error(\"The destination file cannot be null\"); throw new IllegalArgumentException(\"Destination file cannot be null\"); } File f; try { f = new File(zipFile.getCanonicalFile()); } catch (IOException ioe) { logger.error(\"Unable to create the zip file: {}\", destination.getAbsolutePath()); throw new IOException(\"Unable to create the zip file: {}\" + destination.getAbsolutePath(), ioe); } try { if (f.isArchive() && f.isDirectory()) { if (destination.exists()) { if (!destination.isDirectory()) { logger.error(\"Destination file must be a directory\"); throw new IllegalArgumentException(\"Destination file must be a directory\"); } } try { destination.mkdirs(); } catch (SecurityException e) { logger.error(\"Cannot create destination directory: {}\", e.getMessage()); throw new IOException(\"Cannot create destination directory\", e); } success = f.copyAllTo(destination); if (success) logger.debug(\"File {} unzipped successfully\", zipFile.getCanonicalPath()); else { logger.warn(\"File {} was not correctly unzipped\", zipFile.getCanonicalPath()); throw new IOException(\"File \" + zipFile.getCanonicalPath() + \" was not correctly unzipped\"); } } else { logger.error(\"The input file is not a valid zip file\"); throw new IllegalArgumentException(\"The input file is not a valid zip file\"); } } catch (IOException e) { throw (e); } finally { umount(f); } }### Assistant: @Test public void badInputUnzipFileStr() throws Exception { File destFile = new File(destDir, \"badInputFileStr\"); try { try { ZipUtil.unzip((File) null, destFile.getCanonicalPath()); logger.error(\"Unzip should fail when input File is null\"); Assert.fail(\"Unzip should fail when input File is null\"); } catch (IllegalArgumentException e) { logger.debug(\"Detecting null input File (File, String): OK\"); } try { ZipUtil.unzip(dummieFile, destFile.getCanonicalPath()); logger.error(\"Unzip should fail when input File doesn't exist\"); Assert.fail(\"Unzip should fail when input File doesn't exist\"); } catch (FileNotFoundException e) { logger.debug(\"Detecting non-existing input File (File, String): OK\"); } try { ZipUtil.unzip(sampleZip, (String) null); logger.error(\"Unzip should fail when destination filename is null\"); Assert.fail(\"Unzip should fail when destination filename is null\"); } catch (IllegalArgumentException e) { logger.debug(\"Detecting null destination filename (File, String): OK\"); } try { ZipUtil.unzip(sampleZip.getCanonicalPath(), \"\"); logger.error(\"Unzip should fail when destination filename is empty\"); Assert.fail(\"Unzip should fail when destination filename is empty\"); } catch (IllegalArgumentException e) { logger.debug(\"Detecting empty destination filename (File, String): OK\"); } try { ZipUtil.unzip(srcFile, destFile.getCanonicalPath()); logger.error(\"Unzip should fail when the input File does not represent a zip file\"); Assert.fail(\"Unzip should fail when the input File does not represent a zip file\"); } catch (IllegalArgumentException e) { logger.debug(\"Detecting input File not representing a valid zip file (File, String): OK\"); } try { ZipUtil.unzip(sampleZip, srcFile.getCanonicalPath()); logger.error(\"Unzip should fail when the destination filename does not represent a directory\"); Assert.fail(\"Unzip should fail when the destination filename does not represent a directory\"); } catch (IllegalArgumentException e) { logger.debug(\"Detecting destination filename not representing a directory (File, String): OK\"); } } catch (Exception e) { logger.error(\"Another exception was expected, but got {} instead: {}\", e.getClass().getName(), e.getMessage()); Assert.fail(\"Another exception was expected, but got \" + e.getClass().getName() + \"instead: \" + e.getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void splitSwappingRecursive(int[] array) { if (array == null) { throw new IllegalArgumentException(\"Array passed as parameter can't be null.\"); } if (array.length == 0) { return; } splitSwappingRecursiveInner(array, 0, array.length - 1); }### Assistant: @Test public void shouldMoveNegativeElementsToTheLeftWithTwoPointersRecursive() { int[] array = { 1, 2, -1, -3, 4, -6 }; splitArray.splitSwappingRecursive(array); assertNegativeElementsAreBeforePositiveOnes(array); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Source createSource(String url, String username, String password, Integer maxDownloads) { IllegalArgumentException exception = new IllegalArgumentException(\"Invalid URL\"); if (url == null || url.isEmpty()) { throw exception; } try { URL checkUrl = new URL(url); if (!checkUrl.getProtocol().startsWith(\"http\")) { throw exception; } } catch (MalformedURLException e) { throw new IllegalArgumentException(\"Invalid URL\"); } return getSourceManager().create(url, username, password, maxDownloads); }### Assistant: @Test(dependsOnMethods = {\"get\"}) public void createSource() { String expectedUrl = \"https: String expectedUsername = \"login-username\"; String expectedPassword = \"login-password\"; Source source = service.createSource(expectedUrl, expectedUsername, expectedPassword, null); Assert.assertNotNull(source); Assert.assertTrue(source.getId() > 3); Assert.assertEquals(source.getUrl(), expectedUrl); Assert.assertEquals(source.getUsername(), expectedUsername); Assert.assertEquals(source.getPassword(), expectedPassword); Assert.assertEquals(source.getBandwidth(), -1L); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Result invoke(Invocation invocation) throws RpcException { Result result = null; String value = directory.getUrl().getMethodParameter(invocation.getMethodName(), Constants.MOCK_KEY, Boolean.FALSE.toString()).trim(); if (value.length() == 0 || value.equalsIgnoreCase(\"false\")) { result = this.invoker.invoke(invocation); } else if (value.startsWith(\"force\")) { if (logger.isWarnEnabled()) { logger.info(\"force-mock: \" + invocation.getMethodName() + \" force-mock enabled , url : \" + directory.getUrl()); } result = doMockInvoke(invocation, null); } else { try { result = this.invoker.invoke(invocation); } catch (RpcException e) { if (e.isBiz()) { throw e; } else { if (logger.isWarnEnabled()) { logger.warn(\"fail-mock: \" + invocation.getMethodName() + \" fail-mock enabled , url : \" + directory.getUrl(), e); } result = doMockInvoke(invocation, e); } } } return result; }### Assistant: @Test public void testMockInvokerFromOverride_Invoke_checkCompatible_ImplMock2() { URL url = URL.valueOf(\"remote: .addParameter(\"mock\", \"fail\") .addParameter(\"invoke_return_error\", \"true\"); Invoker<IHelloService> cluster = getClusterInvoker(url); RpcInvocation invocation = new RpcInvocation(); invocation.setMethodName(\"getSomething\"); Result ret = cluster.invoke(invocation); Assert.assertEquals(\"somethingmock\", ret.getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkAttributeSemantics(PerunSessionImpl perunSession, Resource resource, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException { if (attribute.getValue() == null) { throw new WrongReferenceAttributeValueException(attribute, null, resource, null, \"Attribute value is null.\"); } Attribute resourceAttr; try { resourceAttr = perunSession.getPerunBl().getAttributesManagerBl().getAttribute(perunSession, resource, A_R_shells); } catch (AttributeNotExistsException ex) { throw new InternalErrorException(\"Attribute with list of shells from resource \" + resource.getId() + \" could not obtained.\", ex); } if (resourceAttr.getValue() == null) { throw new WrongReferenceAttributeValueException(resourceAttr, null, resource, null, \"Attribute with list of shells from resource has null value.\"); } List<String> shells = resourceAttr.valueAsList(); if (!shells.contains(attribute.valueAsString())) { throw new WrongReferenceAttributeValueException(attribute, resourceAttr, resource, null, resource, null, \"Shell \" + attribute.getValue() + \" is not at specified resource (\" + resource + \")\"); } }### Assistant: @Test(expected=WrongReferenceAttributeValueException.class) public void checkAttributeWithoutValue() throws Exception { System.out.println(\"checkAttributeWithoutValue()\"); defShellAttr.checkAttributeSemantics(ps, new Resource(), new Attribute()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isValidatedSearch(String usstate, String city, String zipcode, String gender, String specialty, String phone, String firstname, String lastname, String facilityName) { boolean validateCall = true; if (usstate == null && city == null && zipcode == null && phone == null && specialty == null && firstname == null && lastname == null && gender == null) validateCall = false; if (usstate != null && zipcode != null) validateCall = false; if (usstate != null) { if (usstate.matches(\"[a-zA-Z][a-zA-Z]\") == true) { List<LookupDto> stateCodes = stateCodeService .findAllStateCodes(); boolean isValidStateCode = false; for (LookupDto stateCode : stateCodes) { if (usstate.compareToIgnoreCase(stateCode.getCode()) == 0) { isValidStateCode = true; break; } } if (isValidStateCode != true) { validateCall = false; } } else validateCall = false; } if (city != null && city.length() < 3) validateCall = false; if (zipcode != null && zipcode.length() < 5) validateCall = false; if (specialty != null && specialty.length() < 3) validateCall = false; if (phone != null && phone.length() != 10) validateCall = false; if (firstname != null && firstname.length() < 2) validateCall = false; if (lastname != null && lastname.length() < 2) validateCall = false; if (city != null && usstate == null) validateCall = false; return validateCall; }### Assistant: @Test public void testIsValidatedSearch_When_State_And_Zipcode_Given() { Boolean validateCall = providerSearchLookupServiceImpl .isValidatedSearch(\"MD\", null, \"21046\", null, null, null, null, null, null); assertEquals(false, validateCall); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static void addSignature(SignableXMLObject signable, PrivateKey key, X509Certificate cert, SigEntryType type, String sigDigestAlg) throws CertificateEncodingException { if (type == SigEntryType.NONE) { return; } if (sigDigestAlg == null) { throw new IllegalArgumentException(\"Signature Digest Algorithm must not be null.\"); } Signature sig = new SignatureBuilder().buildObject(); BasicX509Credential credential = new BasicX509Credential(cert); credential.setPrivateKey(key); sig.setSigningCredential(credential); String keyAlg = key.getAlgorithm(); if (\"EC\".equalsIgnoreCase(keyAlg) || \"ECDSA\".equalsIgnoreCase(keyAlg)) { checkForECSignatures(sigDigestAlg, sig); } else if (\"RSA\".equalsIgnoreCase(keyAlg)) { checkForRSASignatures(sigDigestAlg, sig); } else if (\"DSA\".equalsIgnoreCase(keyAlg)) { checkForDSASignatures(sigDigestAlg, sig); } else { throw new IllegalArgumentException(\"Unsupported key algorithm \" + keyAlg + \", use RSA, DSA, ECDSA or EC\"); } sig.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS); KeyInfo keyInfo = new KeyInfoBuilder().buildObject(); X509Data x509Data = new X509DataBuilder().buildObject(); if (type == SigEntryType.CERTIFICATE) { addCertificate(cert, x509Data); } else if (type == SigEntryType.ISSUERSERIAL) { addIssuerSerial(cert, x509Data); } keyInfo.getX509Datas().add(x509Data); sig.setKeyInfo(keyInfo); signable.setSignature(sig); if (\"SHA256\".equals(sigDigestAlg) || \"SHA256-PSS\".equals(sigDigestAlg)) { ((SAMLObjectContentReference)sig.getContentReferences() .get(0)).setDigestAlgorithm(EncryptionConstants.ALGO_ID_DIGEST_SHA256); } }### Assistant: @Test void testWhenAddSignatureCalledWithUnknownDigestAlgoThenThrowIllegalArgumentException() throws Exception { X509Certificate cert = Utils.readCert(XMLSignatureHandlerTest.class.getResourceAsStream(\"/EidasSignerTest_x509.cer\")); PrivateKey pk = Utils.readPKCS12(XMLSignatureHandlerTest.class.getResourceAsStream(TEST_P12_RSA), \"123456\".toCharArray()) .getKey(); Assertions.assertThrows(IllegalArgumentException.class, () -> XMLSignatureHandler.addSignature(signableXMLObject, pk, cert, XMLSignatureHandler.SigEntryType.CERTIFICATE, \"SHB-256\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public synchronized T findCounter(Enum<?> counterKey) throws IllegalAccessException, InstantiationException { T counter = cache.get(counterKey); if (counter == null) { counter = counterType.newInstance(); cache.put(counterKey, counter); } return counter; }### Assistant: @Test public void testBasicCountersAggregator() throws InstantiationException, IllegalAccessException { List<Object> physicalCounters = Lists.newArrayList(); for (int i = 0; i < 5; i++) { BasicCounters<MutableDouble> doubleBasicCounters = new BasicCounters<MutableDouble>(MutableDouble.class); MutableDouble counterA = doubleBasicCounters.findCounter(CounterKeys.A); counterA.increment(); physicalCounters.add(doubleBasicCounters); } BasicCounters.DoubleAggregator<MutableDouble> aggregator = new BasicCounters.DoubleAggregator<MutableDouble>(); @SuppressWarnings(\"unchecked\") Map<String, NumberAggregate.DoubleAggregate> aggregateMap = (Map<String, NumberAggregate.DoubleAggregate>)aggregator.aggregate(physicalCounters); Assert.assertNotNull(\"null\", aggregateMap.get(CounterKeys.A.name())); NumberAggregate.DoubleAggregate aggregate = aggregateMap.get(CounterKeys.A.name()); Assert.assertEquals(aggregate.getSum().doubleValue(), 5.0, 0); Assert.assertEquals(aggregate.getMin().doubleValue(), 1.0, 0); Assert.assertEquals(aggregate.getMax().doubleValue(), 1.0, 0); Assert.assertEquals(aggregate.getAvg().doubleValue(), 1.0, 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static final boolean test(long bits, boolean isSet, int bitIndex) { check(bitIndex) ; return test$(bits, isSet, bitIndex) ; }### Assistant: @Test public void testBitTest2() { long v = 1 ; assertTrue(BitsLong.test(v, true, 0)) ; }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static long requireNonZero(long val) { if (val == 0) { throw new IllegalArgumentException(val + IS_ZERO); } return val; }### Assistant: @Test void testRequireNonZero3() { assertEquals(-1, LongRangeUtil.requireNonZero(-1, RuntimeException::new)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder builder() { return new Builder(); }### Assistant: @Test(expected = NullPointerException.class) public void ensureFolderNullIdentityThrows() { Folder f = Folder.builder().setName(\"Folder1\").build(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onMessage(Message msg) { TextMessage tMsg = (TextMessage)msg; AsyncRetrieveMessage aMsg = null; try { aMsg = (AsyncRetrieveMessage)getAsyncMessageFormat().parse(tMsg.getText()); } catch (Exception ex) { logger.error(\"message parsing error for \" + msg + \": USER CANNOT BE NOTIFIED (users info is not known)\", ex); return; } C32DocumentEntity doc = getC32Document(aMsg); try { if (logger.isDebugEnabled()) { logger.debug(\"Attempting to Persist Domain XML for: \" + aMsg.getPatientId()); } updateDocumentWithNewDocument(aMsg.getPatientId(), doc); } catch (Exception ex) { logger.error(\"error saving c32 document: USER NOT NOTIFIED:\" + msg, ex); } }### Assistant: @Test public void onMessage_happyPath() { ptIdToAssert = \"112233v10\"; setupDocList(ptIdToAssert, ptIdToAssert); retriever.onMessage(new TestTextMessage(\"20120908070605:112233v10:fred\")); Assert.assertEquals(0, insertedList.size()); Assert.assertEquals(1, updatedList.size()); Assert.assertEquals(returnXml, updatedList.get(0).getDocument()); Assert.assertEquals(ptIdToAssert, updatedList.get(0).getDocumentPatientId()); Assert.assertEquals(ptIdToAssert, updatedList.get(0).getIcn()); assertDatePartEqualsToday(updatedList.get(0).getCreateDate()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Vector4 divide(final double scalar, final Vector4 store) { Vector4 result = store; if (result == null) { result = new Vector4(); } return result.set(getX() / scalar, getY() / scalar, getZ() / scalar, getW() / scalar); }### Assistant: @Test public void testDivide() { final Vector4 vec1 = new Vector4(1, -1, 2, -2); final Vector4 vec2 = vec1.divide(2.0, null); final Vector4 vec2B = vec1.divide(2.0, new Vector4()); assertEquals(new Vector4(0.5, -0.5, 1.0, -1.0), vec2); assertEquals(new Vector4(0.5, -0.5, 1.0, -1.0), vec2B); vec2.divideLocal(0.5); assertEquals(new Vector4(1.0, -1.0, 2.0, -2.0), vec2); final Vector4 vec3 = vec1.divide(vec2, null); final Vector4 vec3B = vec1.divide(vec2, new Vector4()); assertEquals(Vector4.ONE, vec3); assertEquals(Vector4.ONE, vec3B); final Vector4 vec4 = vec1.divide(2, 3, 4, 5, null); final Vector4 vec4B = vec1.divide(2, 3, 4, 5, new Vector4()); assertEquals(new Vector4(0.5, -1 / 3., 0.5, -0.4), vec4); assertEquals(new Vector4(0.5, -1 / 3., 0.5, -0.4), vec4B); vec1.divideLocal(0.5, 0.5, 0.5, 0.5); assertEquals(new Vector4(2, -2, 4, -4), vec1); vec1.divideLocal(vec2); assertEquals(new Vector4(2, 2, 2, 2), vec1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public URL use(ApplicationId applicationId, String resourceKey) throws YarnException { Path resourcePath = null; UseSharedCacheResourceRequest request = Records.newRecord( UseSharedCacheResourceRequest.class); request.setAppId(applicationId); request.setResourceKey(resourceKey); try { UseSharedCacheResourceResponse response = this.scmClient.use(request); if (response != null && response.getPath() != null) { resourcePath = new Path(response.getPath()); } } catch (Exception e) { throw new YarnException(e); } if (resourcePath != null) { URL pathURL = URL.fromPath(resourcePath); return pathURL; } else { return null; } }### Assistant: @Test(expected = YarnException.class) public void testUseError() throws Exception { String message = \"Mock IOExcepiton!\"; when(cProtocol.use(isA(UseSharedCacheResourceRequest.class))).thenThrow( new IOException(message)); client.use(mock(ApplicationId.class), \"key\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @SuppressWarnings(\"unchecked\") public <G extends Genotype> G newInstance() { try { return (G) this.getClass().newInstance(); } catch (InstantiationException e) { throw new RuntimeException(e); } catch (IllegalAccessException e) { throw new RuntimeException(e); } }### Assistant: @Test public void newInstance() { CompositeGenotype<String, Genotype> composite = new CompositeGenotype<String, Genotype>(); composite.put(\"one\", new IntegerGenotype(0, 2)); composite.put(\"two\", new IntegerGenotype(0, 2)); CompositeGenotype<String, Genotype> composite2 = composite.newInstance(); Assert.assertEquals(0, composite2.size()); Assert.assertFalse(composite.equals(composite2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setMaxHttpConnections(int maxHttpConnections) { if (maxHttpConnections <= 0) { throw new IllegalArgumentException(\"maxHttpConnections: \" + maxHttpConnections + \" (expected: > 0)\"); } this.maxHttpConnections = maxHttpConnections; }### Assistant: @Test public void testSetMaxHttpConnections() { final Configuration c = new Configuration(); assertThatThrownBy(() -> c.setMaxHttpConnections(-1)) .isInstanceOf(IllegalArgumentException.class) .hasMessage(\"maxHttpConnections: -1 (expected: > 0)\"); assertThatThrownBy(() -> c.setMaxHttpConnections(0)) .isInstanceOf(IllegalArgumentException.class) .hasMessage(\"maxHttpConnections: 0 (expected: > 0)\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ImmutableList<Complex> find(double a, double b, double c, double d, double e) { if (a == 0) { return CubicRootFinder.find(b, c, d, e); } b = b / a; c = c / a; d = d / a; e = e / a; Complex yToXAdjustment = new Complex(-b / 4, 0); double p = c - 3 * Math.pow(b, 2) / 8; double q = d + (Math.pow(b, 3) / 8) - (b * c / 2); double r = e - (3 * Math.pow(b, 4) / 256) + (Math.pow(b, 2) * c / 16) - (b * d / 4); if (p == 0 && q == 0 && r == 0) { return ImmutableList.of(yToXAdjustment, yToXAdjustment, yToXAdjustment, yToXAdjustment); } ImmutableList<Complex> rootsOfCubic = CubicRootFinder.find(1, p, (Math.pow(p, 2) / 4) - r, -Math.pow(q, 2) / 8); Complex m = rootsOfCubic.stream() .filter(complex -> Math.abs(complex.getImaginary()) > EPSILON || Math.abs(complex.getReal()) > EPSILON) .findFirst() .orElseThrow(() -> new IllegalStateException(\"No non-zero solution for m found\")); Complex yRoot1 = calculateRoot(p, q, m, true, true); Complex yRoot2 = calculateRoot(p, q, m, true, false); Complex yRoot3 = calculateRoot(p, q, m, false, true); Complex yRoot4 = calculateRoot(p, q, m, false, false); return ImmutableList.of( yRoot1.add(yToXAdjustment), yRoot2.add(yToXAdjustment), yRoot3.add(yToXAdjustment), yRoot4.add(yToXAdjustment)); }### Assistant: @Test void find_whenGivenCubicEquation_thenReturnsCorrectRoots() { ImmutableList<Complex> roots = CubicRootFinder.find(1, 6, 12, 8); ImmutableList<Pair<Double, Double>> expectedRoots = ImmutableList.of( Pair.of(-2.0, 0.0), Pair.of(-2.0, 0.0), Pair.of(-2.0, 0.0) ); assertEquals(expectedRoots, roots); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> deleteAppRole(String token, AppRole appRole, UserDetails userDetails){ if (TVaultConstants.SELF_SERVICE_APPROLE_NAME.equals(appRole.getRole_name())) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Access denied: no permission to remove this AppRole\\\"]}\"); } Response permissionResponse = ControllerUtil.canDeleteRole(appRole.getRole_name(), token, userDetails, TVaultConstants.APPROLE_METADATA_MOUNT_PATH); if (HttpStatus.INTERNAL_SERVER_ERROR.equals(permissionResponse.getHttpstatus()) || HttpStatus.UNAUTHORIZED.equals(permissionResponse.getHttpstatus())) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"\"+permissionResponse.getResponse()+\"\\\"]}\"); } String jsonStr = JSONUtil.getJSON(appRole); log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Delete AppRoleId\"). put(LogMessage.MESSAGE, String.format(\"Trying to delete AppRoleId [%s]\", jsonStr)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); AppRoleMetadata appRoleMetadata = readAppRoleMetadata(token, appRole.getRole_name()); String approleCreatedBy = userDetails.getUsername(); if ( appRoleMetadata.getAppRoleMetadataDetails() != null) { approleCreatedBy = appRoleMetadata.getAppRoleMetadataDetails().getCreatedBy(); } Response response = reqProcessor.process(\"/auth/approle/role/delete\",jsonStr,token); if(response.getHttpstatus().equals(HttpStatus.NO_CONTENT)) { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Delete AppRole\"). put(LogMessage.MESSAGE, \"Delete AppRole completed\"). put(LogMessage.STATUS, response.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); String jsonstr = ControllerUtil.populateAppRoleMetaJson(appRole.getRole_name(), userDetails.getUsername()); Response resp = reqProcessor.process(\"/delete\",jsonstr,token); String appRoleUsermetadataJson = ControllerUtil.populateUserMetaJson(appRole.getRole_name(),approleCreatedBy); Response appRoleUserMetaDataDeletionResponse = reqProcessor.process(\"/delete\",appRoleUsermetadataJson,token); if (HttpStatus.NO_CONTENT.equals(resp.getHttpstatus()) && HttpStatus.NO_CONTENT.equals(appRoleUserMetaDataDeletionResponse.getHttpstatus())) { return ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"AppRole deleted\\\"]}\"); } return ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"AppRole deleted, metadata delete failed\\\"]}\"); } log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Delete AppRole\"). put(LogMessage.MESSAGE, \"Delete AppRole failed\"). put(LogMessage.RESPONSE, response.getResponse()). put(LogMessage.STATUS, response.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(response.getHttpstatus()).body(response.getResponse()); }### Assistant: @Test public void test_deleteAppRole_successfully_metadata404() throws Exception{ String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; String appRoleId = \"approle1\"; Response response =getMockResponse(HttpStatus.NO_CONTENT, true, \"\"); Response response404 =getMockResponse(HttpStatus.NOT_FOUND, true, \"\"); ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"AppRole deleted\\\"]}\"); AppRole appRole = new AppRole(); appRole.setRole_name(appRoleId); String jsonStr = \"{\\\"role_name\\\":\\\"approle1\\\",\\\"policies\\\":null,\\\"bind_secret_id\\\":false,\\\"secret_id_num_uses\\\":null,\\\"secret_id_ttl\\\":null,\\\"token_num_uses\\\":null,\\\"token_ttl\\\":null,\\\"token_max_ttl\\\":null}\"; when(JSONUtil.getJSON(appRole)).thenReturn(jsonStr); when(reqProcessor.process(\"/auth/approle/role/delete\",jsonStr,token)).thenReturn(response); UserDetails userDetails = getMockUser(true); when(reqProcessor.process(eq(\"/read\"),Mockito.any(),eq(token))).thenReturn(response404); Map<String, Object> responseMap = new HashMap<>(); Map<String, Object> data = new HashMap<>(); data.put(\"createdBy\", \"normaluser\"); responseMap.put(\"data\", data); when(ControllerUtil.parseJson(Mockito.any())).thenReturn(responseMap); when(reqProcessor.process(eq(\"/delete\"),Mockito.any(),eq(token))).thenReturn(response); String approleusername=\"safeadmin\"; String role_name=appRole.getRole_name(); String path = TVaultConstants.APPROLE_METADATA_MOUNT_PATH + \"/\" + role_name; Response approleMetadataResponse = getMockResponse(HttpStatus.OK, true, getAppRoleMetadataJSON(path, approleusername, role_name)); when(reqProcessor.process(\"/read\",\"{\\\"path\\\":\\\"\"+path+\"\\\"}\",userDetails.getSelfSupportToken())).thenReturn(approleMetadataResponse); Response permissionResponse =getMockResponse(HttpStatus.OK, true, \"\"); when(ControllerUtil.canDeleteRole(appRole.getRole_name(), token, userDetails, TVaultConstants.APPROLE_METADATA_MOUNT_PATH)).thenReturn(permissionResponse); ResponseEntity<String> responseEntityActual = appRoleService.deleteAppRole(token, appRole, userDetails); assertEquals(HttpStatus.OK, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected, responseEntityActual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void cleanUpLdapUsersWithoutGroup() throws AmbariException { final List<User> allUsers = users.getAllUsers(); for (User user : allUsers) { if (user.isLdapUser() && user.getGroups().isEmpty()) { users.removeUser(user); } } }### Assistant: @Test @SuppressWarnings(\"serial\") public void testCleanUpLdapUsersWithoutGroup() throws AmbariException { final Configuration configuration = createNiceMock(Configuration.class); final Users users = createNiceMock(Users.class); final GroupEntity ldapGroup = new GroupEntity(); ldapGroup.setGroupId(1); ldapGroup.setGroupName(\"ldapGroup\"); ldapGroup.setGroupType(GroupType.LDAP); ldapGroup.setMemberEntities(new HashSet<MemberEntity>()); final User ldapUserWithoutGroup = createLdapUserWithoutGroup(); final User ldapUserWithGroup = createLdapUserWithGroup(ldapGroup); final User localUserWithoutGroup = createLocalUserWithoutGroup(); final User localUserWithGroup = createLocalUserWithGroup(ldapGroup); final List<User> allUsers = new ArrayList<User>() { { add(ldapUserWithoutGroup); add(ldapUserWithGroup); add(localUserWithoutGroup); add(localUserWithGroup); } }; expect(users.getAllUsers()).andReturn(new ArrayList<User>(allUsers)); final List<User> removedUsers = new ArrayList<User>(); final Capture<User> userCapture = EasyMock.newCapture(); users.removeUser(capture(userCapture)); expectLastCall().andAnswer(new IAnswer<Void>() { @Override public Void answer() throws Throwable { removedUsers.add(userCapture.getValue()); allUsers.remove(userCapture.getValue()); return null; } }); replay(users); final AmbariLdapDataPopulatorTestInstance populator = new AmbariLdapDataPopulatorTestInstance(configuration, users); populator.setLdapTemplate(createNiceMock(LdapTemplate.class)); populator.setLdapServerProperties(createNiceMock(LdapServerProperties.class)); populator.cleanUpLdapUsersWithoutGroup(); assertEquals(removedUsers.size(), 1); assertEquals(allUsers.size(), 3); assertTrue(allUsers.contains(ldapUserWithGroup)); assertTrue(allUsers.contains(localUserWithoutGroup)); assertTrue(allUsers.contains(localUserWithGroup)); assertEquals(removedUsers.get(0), ldapUserWithoutGroup); verify(users); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String separatorsToUnix(final String path) { if (path == null || path.indexOf('\\\\') == -1) { return path; } return path.replace('\\\\', '/'); }### Assistant: @Test public void testSeparatorsToUnix() { assertNull(\"expect null path\", DefaultSlingSimulator.separatorsToUnix(null)); assertEquals(\"expect new path\", \"/some/path\", DefaultSlingSimulator.separatorsToUnix(\"\\\\some\\\\path\")); assertEquals(\"expect same path\", \"/some/path\", DefaultSlingSimulator.separatorsToUnix(\"/some/path\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validate(AkibanInformationSchema ais, AISValidationOutput output) { for(Table table : ais.getTables().values()) { for(Index index : table.getIndexesIncludingInternal()) { for(IndexColumn indexColumn : index.getKeyColumns()) { if(indexColumn.getIndexedLength() != null) { output.reportFailure(new AISValidationFailure( new IndexColumnIsPartialException(table.getName(), index.getIndexName().getName(), indexColumn.getPosition()) )); } } } } }### Assistant: @Test(expected=IndexColumnIsPartialException.class) public void partialLengthIsInvalid() { validate(createAIS(32, 16)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public RangerServiceDef getServiceDefByName(String name) throws Exception { if (LOG.isDebugEnabled()) { LOG.debug(\"==> ServiceDBStore.getServiceDefByName(\" + name + \")\"); } RangerServiceDef ret = null; XXServiceDef xServiceDef = daoMgr.getXXServiceDef().findByName(name); if(xServiceDef != null) { ret = serviceDefService.getPopulatedViewObject(xServiceDef); } if (LOG.isDebugEnabled()) { LOG.debug(\"== ServiceDBStore.getServiceDefByName(\" + name + \"): \" + ret); } return ret; }### Assistant: @Test public void test15getServiceDefByName() throws Exception { String name = \"fdfdfds\"; XXServiceDefDao xServiceDefDao = Mockito.mock(XXServiceDefDao.class); XXServiceDef xServiceDef = Mockito.mock(XXServiceDef.class); Mockito.when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao); Mockito.when(xServiceDefDao.findByName(name)).thenReturn(xServiceDef); RangerServiceDef dbServiceDef = serviceDBStore .getServiceDefByName(name); Assert.assertNull(dbServiceDef); Mockito.verify(daoManager).getXXServiceDef(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting protected void mergeAllocateResponse(AllocateResponse homeResponse, AllocateResponse otherResponse, SubClusterId otherRMAddress) { if (otherResponse.getAMRMToken() != null) { if (otherRMAddress.equals(this.homeSubClusterId)) { homeResponse.setAMRMToken(otherResponse.getAMRMToken()); } else { throw new YarnRuntimeException( \"amrmToken from UAM \" + otherRMAddress + \" should be null here\"); } } if (!isNullOrEmpty(otherResponse.getAllocatedContainers())) { if (!isNullOrEmpty(homeResponse.getAllocatedContainers())) { homeResponse.getAllocatedContainers() .addAll(otherResponse.getAllocatedContainers()); } else { homeResponse .setAllocatedContainers(otherResponse.getAllocatedContainers()); } } if (!isNullOrEmpty(otherResponse.getCompletedContainersStatuses())) { if (!isNullOrEmpty(homeResponse.getCompletedContainersStatuses())) { homeResponse.getCompletedContainersStatuses() .addAll(otherResponse.getCompletedContainersStatuses()); } else { homeResponse.setCompletedContainersStatuses( otherResponse.getCompletedContainersStatuses()); } } if (!isNullOrEmpty(otherResponse.getUpdatedNodes())) { if (!isNullOrEmpty(homeResponse.getUpdatedNodes())) { homeResponse.getUpdatedNodes().addAll(otherResponse.getUpdatedNodes()); } else { homeResponse.setUpdatedNodes(otherResponse.getUpdatedNodes()); } } if (otherResponse.getApplicationPriority() != null) { homeResponse.setApplicationPriority( otherResponse.getApplicationPriority()); } homeResponse.setNumClusterNodes( homeResponse.getNumClusterNodes() + otherResponse.getNumClusterNodes()); PreemptionMessage homePreempMessage = homeResponse.getPreemptionMessage(); PreemptionMessage otherPreempMessage = otherResponse.getPreemptionMessage(); if (homePreempMessage == null && otherPreempMessage != null) { homeResponse.setPreemptionMessage(otherPreempMessage); } if (homePreempMessage != null && otherPreempMessage != null) { PreemptionContract par1 = homePreempMessage.getContract(); PreemptionContract par2 = otherPreempMessage.getContract(); if (par1 == null && par2 != null) { homePreempMessage.setContract(par2); } if (par1 != null && par2 != null) { par1.getResourceRequest().addAll(par2.getResourceRequest()); par1.getContainers().addAll(par2.getContainers()); } StrictPreemptionContract spar1 = homePreempMessage.getStrictContract(); StrictPreemptionContract spar2 = otherPreempMessage.getStrictContract(); if (spar1 == null && spar2 != null) { homePreempMessage.setStrictContract(spar2); } if (spar1 != null && spar2 != null) { spar1.getContainers().addAll(spar2.getContainers()); } } if (!isNullOrEmpty(otherResponse.getNMTokens())) { if (!isNullOrEmpty(homeResponse.getNMTokens())) { homeResponse.getNMTokens().addAll(otherResponse.getNMTokens()); } else { homeResponse.setNMTokens(otherResponse.getNMTokens()); } } if (!isNullOrEmpty(otherResponse.getUpdatedContainers())) { if (!isNullOrEmpty(homeResponse.getUpdatedContainers())) { homeResponse.getUpdatedContainers() .addAll(otherResponse.getUpdatedContainers()); } else { homeResponse.setUpdatedContainers(otherResponse.getUpdatedContainers()); } } if (!isNullOrEmpty(otherResponse.getUpdateErrors())) { if (!isNullOrEmpty(homeResponse.getUpdateErrors())) { homeResponse.getUpdateErrors().addAll(otherResponse.getUpdateErrors()); } else { homeResponse.setUpdateErrors(otherResponse.getUpdateErrors()); } } }### Assistant: @Test public void testMergeAllocateResponse() { ContainerId cid = ContainerId.newContainerId(attemptId, 0); ContainerStatus cStatus = Records.newRecord(ContainerStatus.class); cStatus.setContainerId(cid); Container container = Container.newInstance(cid, null, null, null, null, null); AllocateResponse homeResponse = Records.newRecord(AllocateResponse.class); homeResponse.setAllocatedContainers(Collections.singletonList(container)); homeResponse.setCompletedContainersStatuses( Collections.singletonList(cStatus)); homeResponse.setUpdatedNodes( Collections.singletonList(Records.newRecord(NodeReport.class))); homeResponse.setNMTokens( Collections.singletonList(Records.newRecord(NMToken.class))); homeResponse.setUpdatedContainers( Collections.singletonList( Records.newRecord(UpdatedContainer.class))); homeResponse.setUpdateErrors(Collections .singletonList(Records.newRecord(UpdateContainerError.class))); homeResponse.setAvailableResources(Records.newRecord(Resource.class)); homeResponse.setPreemptionMessage(createDummyPreemptionMessage( ContainerId.newContainerId(attemptId, 0))); AllocateResponse response = Records.newRecord(AllocateResponse.class); response.setAllocatedContainers(Collections.singletonList(container)); response.setCompletedContainersStatuses(Collections.singletonList(cStatus)); response.setUpdatedNodes( Collections.singletonList(Records.newRecord(NodeReport.class))); response.setNMTokens( Collections.singletonList(Records.newRecord(NMToken.class))); response.setUpdatedContainers( Collections.singletonList( Records.newRecord(UpdatedContainer.class))); response.setUpdateErrors(Collections .singletonList(Records.newRecord(UpdateContainerError.class))); response.setAvailableResources(Records.newRecord(Resource.class)); response.setPreemptionMessage(createDummyPreemptionMessage( ContainerId.newContainerId(attemptId, 1))); interceptor.mergeAllocateResponse(homeResponse, response, SubClusterId.newInstance(\"SC-1\")); Assert.assertEquals(2, homeResponse.getPreemptionMessage().getContract() .getContainers().size()); Assert.assertEquals(2, homeResponse.getAllocatedContainers().size()); Assert.assertEquals(2, homeResponse.getUpdatedNodes().size()); Assert.assertEquals(2, homeResponse.getCompletedContainersStatuses().size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object obj) { if (obj instanceof JsonArray) { JsonArray ary = (JsonArray) obj; int size = size(); if (size != ary.size()) { return false; } for (int i = 0; i < size; i++) { if (!stateList.get(i).equals(ary.stateList.get(i))) { return false; } else if (get(i) == null && ary.get(i) != null) { return false; } else if (get(i) == null && ary.get(i) == null) { continue; } else if (!get(i).equals(ary.get(i))) { return false; } } return true; } else { return false; } }### Assistant: @Test public void equalsTest() { JsonArray jsonArray1 = new JsonArray(); JsonArray jsonArray2 = new JsonArray(); assertThat(jsonArray1.equals(jsonArray2), is(true)); jsonArray1.add(\"hoge\"); assertThat(jsonArray1.equals(jsonArray2), is(false)); jsonArray2.add(\"hoge\"); assertThat(jsonArray1.equals(jsonArray2), is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Topology get() { StreamsBuilder builder = new StreamsBuilder(); if (dependencyQueryEnabled) { builder.addStateStore( Stores.windowStoreBuilder( Stores.persistentWindowStore( DEPENDENCIES_STORE_NAME, dependencyTtl, dependencyWindowSize, false), Serdes.String(), dependencyLinkSerde ).withLoggingDisabled()); builder.stream(dependencyTopic, Consumed.with(Serdes.String(), dependencyLinkSerde)) .process(() -> new Processor<String, DependencyLink>() { ProcessorContext context; WindowStore<String, DependencyLink> dependenciesStore; @SuppressWarnings(\"unchecked\") @Override public void init(ProcessorContext context) { this.context = context; dependenciesStore = (WindowStore<String, DependencyLink>) context.getStateStore( DEPENDENCIES_STORE_NAME); } @Override public void process(String linkKey, DependencyLink link) { Instant now = Instant.ofEpochMilli(context.timestamp()); Instant from = now.minus(dependencyWindowSize); try (WindowStoreIterator<DependencyLink> currentLinkWindow = dependenciesStore.fetch(linkKey, from, now)) { KeyValue<Long, DependencyLink> windowAndValue = null; if (currentLinkWindow.hasNext()) windowAndValue = currentLinkWindow.next(); if (currentLinkWindow.hasNext()) windowAndValue = currentLinkWindow.next(); if (windowAndValue != null) { DependencyLink currentLink = windowAndValue.value; DependencyLink aggregated = currentLink.toBuilder() .callCount(currentLink.callCount() + link.callCount()) .errorCount(currentLink.errorCount() + link.errorCount()) .build(); dependenciesStore.put(linkKey, aggregated, windowAndValue.key); } else { dependenciesStore.put(linkKey, link); } } } @Override public void close() { } }, DEPENDENCIES_STORE_NAME); } return builder.build(); }### Assistant: @Test void should_storeDependencies() { Duration dependenciesRetentionPeriod = Duration.ofMinutes(1); Duration dependenciesWindowSize = Duration.ofMillis(100); Topology topology = new DependencyStorageTopology( dependencyTopic, dependenciesRetentionPeriod, dependenciesWindowSize, true).get(); TopologyDescription description = topology.describe(); assertThat(description.subtopologies()).hasSize(1); TopologyTestDriver testDriver = new TopologyTestDriver(topology, props); ConsumerRecordFactory<String, DependencyLink> factory = new ConsumerRecordFactory<>(dependencyTopic, new StringSerializer(), dependencyLinkSerde.serializer()); DependencyLink dependencyLink = DependencyLink.newBuilder() .parent(\"svc_a\").child(\"svc_b\").callCount(1).errorCount(0) .build(); String dependencyLinkId = \"svc_a:svc_b\"; testDriver.pipeInput(factory.create(dependencyTopic, dependencyLinkId, dependencyLink, 10L)); WindowStore<String, DependencyLink> links = testDriver.getWindowStore(DEPENDENCIES_STORE_NAME); WindowStoreIterator<DependencyLink> firstLink = links.fetch(dependencyLinkId, 0L, 100L); assertThat(firstLink).hasNext(); assertThat(firstLink.next().value).isEqualTo(dependencyLink); testDriver.pipeInput(factory.create(dependencyTopic, dependencyLinkId, dependencyLink, 90L)); WindowStoreIterator<DependencyLink> secondLink = links.fetch(dependencyLinkId, 0L, 100L); assertThat(secondLink).hasNext(); assertThat(secondLink.next().value.callCount()).isEqualTo(2); testDriver.advanceWallClockTime(dependenciesRetentionPeriod.toMillis() + 91L); testDriver.pipeInput(factory.create(dependencyTopic, dependencyLinkId, dependencyLink)); KeyValueIterator<Windowed<String>, DependencyLink> thirdLink = links.all(); assertThat(thirdLink).hasNext(); assertThat(thirdLink.next().value.callCount()).isEqualTo(1); testDriver.close(); dependencyLinkSerde.close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SoyContext putInjectedData(String key, Object value) { Map<String, Object> injectedData = (Map<String, Object>)_map.get( SoyTemplateConstants.INJECTED_DATA); if (injectedData == null) { injectedData = new HashMap<>(); _map.put(SoyTemplateConstants.INJECTED_DATA, injectedData); } injectedData.put(key, value); return this; }### Assistant: @Test public void testPutInjectedData() { SoyContextImpl soyContextImpl = new SoyContextImpl(); soyContextImpl.putInjectedData(\"injectedKey\", \"injectedValue\"); Map<String, Object> injectedData = (Map<String, Object>)soyContextImpl.get( SoyTemplateConstants.INJECTED_DATA); Assert.assertEquals(injectedData.toString(), 1, injectedData.size()); Assert.assertEquals(\"injectedValue\", injectedData.get(\"injectedKey\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ServletRequest prepareRequest(ServletRequest request, ServletResponse response, ServletContext originalServletContext) { if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) { HttpRequestWrapper wrappedRequest = (HttpRequestWrapper)request.getAttribute(REQUEST_WRAPPED_ATTRIBUTE); ServletContext servletContext = originalServletContext; if (servletContext == null) { logger.info(\"ServletContext was null when prepareRequest() was called from Filter. \" + \"This means that filter's init() method was not called at initialization time. \" + \"This may result in unexpected behavior if this filter was invoked after\" + \"servlet dispatch forward() and include() calls.\"); servletContext = ((HttpServletRequest)request).getServletContext(); } if (wrappedRequest == null || servletContext != wrappedRequest.getServletContext()) { if (interceptListeners) { findListenersByIntercepting(servletContext, (HttpServletRequest)request); } wrappedRequest = wrapRequest(request, servletContext); wrappedRequest.setResponse(wrapResponse(response, wrappedRequest)); request.setAttribute(REQUEST_WRAPPED_ATTRIBUTE, wrappedRequest); return wrappedRequest; } } return request; }### Assistant: @Test public void testPrepareRequestNotInitializedFilter() { ServletRequest request = mock(HttpServletRequest.class); when(request.getServletContext()).thenReturn(servletContext); ServletResponse response = mock(HttpServletResponse.class); ServletRequest result = SessionHelpersFacade.prepareRequest(request, response, null); assertNotNull(result); assertNotSame(request, result); assertTrue(result instanceof HttpRequestWrapper); verify(request).setAttribute(eq(SessionHelpers.REQUEST_WRAPPED_ATTRIBUTE), refEq(result)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CertificateCredentialValue findTransitionalVersion(final String caName) { final List<CredentialVersion> credentialVersions = certificateVersionDataService.findBothActiveCertAndTransitionalCert(caName); if (credentialVersions == null) { throw new EntryNotFoundException(ErrorMessages.Credential.INVALID_ACCESS); } final CertificateCredentialVersion transitionalVersion = (CertificateCredentialVersion) credentialVersions.stream().filter(version -> { if (!(version instanceof CertificateCredentialVersion)) { throw new ParameterizedValidationException(ErrorMessages.NOT_A_CA_NAME); } return ((CertificateCredentialVersion) version).isVersionTransitional(); }).findFirst().orElse(null); if (transitionalVersion == null) { return null; } else if (!transitionalVersion.getParsedCertificate().isCa()) { throw new ParameterizedValidationException(ErrorMessages.CERT_NOT_CA); } return new CertificateCredentialValue( transitionalVersion.getCertificate(), transitionalVersion.getPrivateKey(), transitionalVersion.isCertificateAuthority(), transitionalVersion.isSelfSigned(), transitionalVersion.getGenerated(), transitionalVersion.isVersionTransitional(), transitionalVersion.getVersionCreatedAt()); }### Assistant: @Test public void findTransitionalVersion_givenExistingTransitionalCa_returnsTheTransitionalCa() { final CertificateReader certificateReader = mock(CertificateReader.class); when(transitionalCertificateCredential.getParsedCertificate()).thenReturn(certificateReader); when(certificateReader.isCa()).thenReturn(true); when(certificateVersionDataService.findBothActiveCertAndTransitionalCert(CREDENTIAL_NAME)).thenReturn(Arrays.asList(certificateCredential, transitionalCertificateCredential)); when(transitionalCertificateCredential.getCertificate()).thenReturn(SELF_SIGNED_CA_CERT); assertThat(certificateAuthorityService.findTransitionalVersion(CREDENTIAL_NAME).getCertificate(), equalTo(transitionalCertificateCredential.getCertificate())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void parse( InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException { try { SyndFeed feed = new SyndFeedInput().build( new InputSource(new CloseShieldInputStream(stream))); String title = stripTags(feed.getTitleEx()); String description = stripTags(feed.getDescriptionEx()); metadata.set(TikaCoreProperties.TITLE, title); metadata.set(TikaCoreProperties.DESCRIPTION, description); XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata); xhtml.startDocument(); xhtml.element(\"h1\", title); xhtml.element(\"p\", description); xhtml.startElement(\"ul\"); for (Object e : feed.getEntries()) { SyndEntry entry = (SyndEntry) e; String link = entry.getLink(); if (link != null) { xhtml.startElement(\"li\"); xhtml.startElement(\"a\", \"href\", link); xhtml.characters(stripTags(entry.getTitleEx())); xhtml.endElement(\"a\"); SyndContent content = entry.getDescription(); if (content != null) { xhtml.newline(); xhtml.characters(stripTags(content)); } xhtml.endElement(\"li\"); } } xhtml.endElement(\"ul\"); xhtml.endDocument(); } catch (FeedException e) { throw new TikaException(\"RSS parse error\", e); } }### Assistant: @Test public void testAtomParser() throws Exception { try (InputStream input = FeedParserTest.class.getResourceAsStream( \"/test-documents/testATOM.atom\")) { Metadata metadata = new Metadata(); ContentHandler handler = new BodyContentHandler(); ParseContext context = new ParseContext(); new FeedParser().parse(input, handler, metadata, context); String content = handler.toString(); assertFalse(content == null); assertEquals(\"Sample Atom File for Junit test\", metadata.get(TikaCoreProperties.DESCRIPTION)); assertEquals(\"Test Atom Feed\", metadata.get(TikaCoreProperties.TITLE)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void deleteXUserPermission(Long id, boolean force) { XXUserPermission xUserPermission = daoManager.getXXUserPermission().getById(id); if (xUserPermission == null) { throw restErrorUtil.createRESTException(\"No UserPermission found to delete, ID: \" + id, MessageEnums.DATA_NOT_FOUND); } xUserPermissionService.deleteResource(id); Set<UserSessionBase> userSessions = sessionMgr.getActiveUserSessionsForPortalUserId(xUserPermission.getUserId()); if (!CollectionUtils.isEmpty(userSessions)) { for (UserSessionBase userSession : userSessions) { logger.info(\"deleting permission of user who's found logged in into system, so updating permission in session of that user\"); sessionMgr.resetUserModulePermission(userSession); } } }### Assistant: @Test public void test31deleteXUserPermission() { UserSessionBase userSession = Mockito.mock(UserSessionBase.class); Set<UserSessionBase> userSessions = new HashSet<UserSessionBase>(); userSessions.add(userSession); XXUserPermission xUserPermissionObj = xxUserPermission(); XXUserPermissionDao xUserPermDao = Mockito.mock(XXUserPermissionDao.class); Mockito.when(daoManager.getXXUserPermission()).thenReturn(xUserPermDao); Mockito.when(xUserPermDao.getById(1L)).thenReturn(xUserPermissionObj); Mockito.when(xUserPermissionService.deleteResource(1L)).thenReturn(true); Mockito.when(sessionMgr.getActiveUserSessionsForPortalUserId(xUserPermissionObj.getUserId())).thenReturn(userSessions); xUserMgr.deleteXUserPermission(1L, true); Mockito.verify(xUserPermissionService).deleteResource(1L); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public com.car2go.maps.model.LatLngBounds map(LatLngBounds input) { LatLng southWest = AnyMapAdapter.adapt(input.southwest); LatLng northEast = AnyMapAdapter.adapt(input.northeast); return new com.car2go.maps.model.LatLngBounds(southWest, northEast); }### Assistant: @Test public void testMap() throws Exception { LatLngBoundsMapper mapper = new LatLngBoundsMapper(); LatLngBounds input = new LatLngBounds( new LatLng(10, 10), new LatLng(20, 20) ); com.car2go.maps.model.LatLngBounds output = mapper.map(input); TestUtil.assertEquals( input.southwest, output.southwest ); TestUtil.assertEquals( input.northeast, output.northeast ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected HeimdallRoute getMatchingHeimdallRoute(String requestURI, String method, RequestContext ctx) { boolean auxMatch = false; for (Entry<String, ZuulRoute> entry : routeLocator.getAtomicRoutes().get().entrySet()) { if (entry.getKey() != null) { String pattern = entry.getKey(); if (this.pathMatcher.match(pattern, requestURI)) { auxMatch = true; List<Credential> credentials = credentialRepository.findByPattern(pattern); Credential credential = null; if (Objects.nonNull(credentials) && !credentials.isEmpty()) { if (method.equals(HttpMethod.OPTIONS.name())) { Optional<Credential> first = credentials.stream().findFirst(); if (first.get().isCors()) { credential = first.get(); } } if (Objects.isNull(credential)) { credential = credentials.stream() .filter(o -> o.getMethod().equals(HttpMethod.ALL.name()) || method.equals(o.getMethod().toUpperCase())) .findFirst().orElse(null); } } if (credential != null) { ZuulRoute zuulRoute = entry.getValue(); String basePath = credential.getApiBasePath(); requestURI = org.apache.commons.lang.StringUtils.removeStart(requestURI, basePath); ctx.put(PATTERN, org.apache.commons.lang.StringUtils.removeStart(pattern, basePath)); ctx.put(API_NAME, credential.getApiName()); ctx.put(API_ID, credential.getApiId()); ctx.put(RESOURCE_ID, credential.getResourceId()); ctx.put(OPERATION_ID, credential.getOperationId()); ctx.put(OPERATION_PATH, credential.getOperationPath()); String host = ctx.getRequest().getHeader(\"Host\"); EnvironmentInfo environment; String location = null; if (host != null && !host.isEmpty()) { environment = environmentInfoRepository.findByApiIdAndEnvironmentInboundURL(credential.getApiId(), host.toLowerCase()); } else { environment = environmentInfoRepository.findByApiIdAndEnvironmentInboundURL(credential.getApiId(), ctx.getRequest().getRequestURL().toString().toLowerCase()); } if (environment != null) { location = environment.getOutboundURL(); ctx.put(ENVIRONMENT_VARIABLES, environment.getVariables()); } Route route = new Route(zuulRoute.getId(), requestURI, location, \"\", zuulRoute.getRetryable() != null ? zuulRoute.getRetryable() : false, zuulRoute.isCustomSensitiveHeaders() ? zuulRoute.getSensitiveHeaders() : null); TraceContextHolder traceContextHolder = TraceContextHolder.getInstance(); traceContextHolder.getActualTrace().setApiId(credential.getApiId()); traceContextHolder.getActualTrace().setApiName(credential.getApiName()); traceContextHolder.getActualTrace().setResourceId(credential.getResourceId()); traceContextHolder.getActualTrace().setOperationId(credential.getOperationId()); return new HeimdallRoute(pattern, route, false); } else { ctx.put(INTERRUPT, true); } } } } if (auxMatch) { return new HeimdallRoute().methodNotAllowed(); } return null; }### Assistant: @Test public void testCallMethodIsOptionWithCors() { this.request.setRequestURI(\"/v2/api/foo\"); this.request.setMethod(HttpMethod.OPTIONS.name()); Map<String, ZuulRoute> routes = new LinkedHashMap<>(); ZuulRoute route = new ZuulRoute(\"idFoo\", \"/v2/api/foo\", null, \"my.dns.com.br\", true, null, Collections.newSetFromMap(new ConcurrentHashMap<>())); routes.put(\"/v2/api/foo\", route); Credential opPost = new Credential(HttpMethod.POST.name(), \"/api/foo\", \"/v2\", \"apiName\", 11L, 88L, 10L, true); Credential opDelete = new Credential(HttpMethod.DELETE.name(), \"/api/foo\", \"/v2\", \"apiName\", 12L, 88L, 10L, true); Credential opGet = new Credential(HttpMethod.GET.name(), \"/api/foo\", \"/v2\", \"apiName\", 13L, 88L, 10L, true); Mockito.when(routeLocator.getAtomicRoutes()).thenReturn(new AtomicReference<>(routes)); Mockito.when(credentialRepository.findByPattern(\"/v2/api/foo\")).thenReturn(Lists.newArrayList(opPost, opDelete, opGet)); HeimdallRoute heimdallRoute = this.filter.getMatchingHeimdallRoute(\"/v2/api/foo\", HttpMethod.OPTIONS.name(), this.ctx); assertNotNull(heimdallRoute); assertEquals(\"/api/foo\", heimdallRoute.getRoute().getPath()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ListenableFuture<UTXOsMessage> getUTXOs(List<TransactionOutPoint> outPoints) { return getUTXOs(outPoints, true); }### Assistant: @Test public void getUTXOs() throws Exception { connectWithVersion(GetUTXOsMessage.MIN_PROTOCOL_VERSION, VersionMessage.NODE_NETWORK | VersionMessage.NODE_GETUTXOS | VersionMessage.NODE_BITCOIN_CASH); TransactionOutPoint op1 = new TransactionOutPoint(PARAMS, 1, Sha256Hash.of(\"foo\".getBytes())); TransactionOutPoint op2 = new TransactionOutPoint(PARAMS, 2, Sha256Hash.of(\"bar\".getBytes())); ListenableFuture<UTXOsMessage> future1 = peer.getUTXOs(ImmutableList.of(op1)); ListenableFuture<UTXOsMessage> future2 = peer.getUTXOs(ImmutableList.of(op2)); GetUTXOsMessage msg1 = (GetUTXOsMessage) outbound(writeTarget); GetUTXOsMessage msg2 = (GetUTXOsMessage) outbound(writeTarget); assertEquals(op1, msg1.getOutPoints().get(0)); assertEquals(op2, msg2.getOutPoints().get(0)); assertEquals(1, msg1.getOutPoints().size()); assertFalse(future1.isDone()); ECKey key = new ECKey(); TransactionOutput out1 = new TransactionOutput(PARAMS, null, Coin.CENT, key); UTXOsMessage response1 = new UTXOsMessage(PARAMS, ImmutableList.of(out1), new long[]{UTXOsMessage.MEMPOOL_HEIGHT}, Sha256Hash.ZERO_HASH, 1234); inbound(writeTarget, response1); assertEquals(future1.get(), response1); TransactionOutput out2 = new TransactionOutput(PARAMS, null, Coin.FIFTY_COINS, key); UTXOsMessage response2 = new UTXOsMessage(PARAMS, ImmutableList.of(out2), new long[]{1000}, Sha256Hash.ZERO_HASH, 1234); inbound(writeTarget, response2); assertEquals(future2.get(), response2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting int comparePluginsByDependencyGraph(Class<? extends Plugin> p1, Class<? extends Plugin> p2) { if (requires(p1, p2)) { if (requires(p2, p1)) { throw new IllegalStateException( \"Cyclical dependency detected! \" + p1.getName() + \" <-> \" + p2.getName()); } return 1; } else if (requires(p2, p1)) { return -1; } else { return 0; } }### Assistant: @Test public void testCyclicalDependencyThrows() { assertThrows(IllegalStateException.class, () -> loader.comparePluginsByDependencyGraph(CyclicalPluginA.class, CyclicalPluginB.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: Node createMuteSwitchButton(final Slider volumeSlider) { final Button muteButton = createButton(\"mute\", SPEAKER_ICON, \"mute\", ICON_SIZE / 2d); final Button unmuteButton = createButton(\"unmute\", MUTE_ICON, \"unmute\", ICON_SIZE / 2d); setUpSwitchButton(muteButton); setUpSwitchButton(unmuteButton); final boolean muted = volumeSlider.getValue() == 0; muteButton.setVisible(!muted); unmuteButton.setVisible(muted); if (muted) { beforeMutedValue = Configuration.DEFAULT_VALUE_MUSIC_VOLUME; } else { beforeMutedValue = volumeSlider.getValue(); } muteButton.setOnAction((event) -> { beforeMutedValue = volumeSlider.getValue(); volumeSlider.setValue(0); }); unmuteButton.setOnAction((event) -> volumeSlider.setValue(beforeMutedValue)); volumeSlider.valueProperty().addListener((observable, oldValue, newValue) -> { final boolean localMuted = newValue.doubleValue() == 0; muteButton.setVisible(!localMuted); unmuteButton.setVisible(localMuted); }); return new StackPane(muteButton, unmuteButton); }### Assistant: @Test void shouldUnmuteVolumeWhenUnmuteButtonPressed() { mockVolumeSlider.setValue(0); StackPane result = (StackPane) musicControl.createMuteSwitchButton(mockVolumeSlider); Button unmute = (Button) result.getChildren().get(1); unmute.fire(); assertNotEquals(0, mockVolumeSlider.getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Charset parseContentTypeCharset(String mimeType) { Map<String, String> map = parseContentTypeParams(mimeType); if (map == null) { return null; } String cs = map.get(CHARSET); if (cs == null) { return null; } return Charset.forName(cs); }### Assistant: @Test public void testParseContentTypeCharset() { assertEquals(FileUtils.UTF8, HttpUtils.parseContentTypeCharset(\"application/json; charset=UTF-8\")); assertEquals(FileUtils.UTF8, HttpUtils.parseContentTypeCharset(\"application/json; charset = UTF-8 \")); assertEquals(FileUtils.UTF8, HttpUtils.parseContentTypeCharset(\"application/json; charset=UTF-8; version=1.2.3\")); assertEquals(FileUtils.UTF8, HttpUtils.parseContentTypeCharset(\"application/json; charset = UTF-8 ; version=1.2.3\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void init() { if (!calledInit) { buildFields(); if (isCheckEncloseChar()) { if (isEnclosed()) { throw new FileException(\"columnEncloseChar can not change.\", new IllegalStateException(), fileName); } } if (isCheckColumnAnnotationCount()) { if (fields.length == 0) { throw new FileException(\"InputFileColumn is not found.\", new IllegalStateException(), fileName); } } buildStringConverters(); buildMethods(); try { buildLineReader(); buildHeader(); buildTrailerQueue(); } catch (FileException e) { if (this.reader != null) { try { closeFile(); } catch (FileException fe) { } } throw e; } calledInit = true; } }### Assistant: @Test public void testInit08() throws Exception { URL url = this.getClass().getResource(\"File_Empty.txt\"); String fileName = url.getPath(); Map<String, ColumnParser> columnParserMap = new HashMap<String, ColumnParser>(); columnParserMap.put(\"java.lang.String\", new NullColumnParser()); AbstractFileLineIteratorImpl02<AbstractFileLineIterator_Stub07> fileLineIterator = PowerMockito.spy( new AbstractFileLineIteratorImpl02<AbstractFileLineIterator_Stub07>( fileName, AbstractFileLineIterator_Stub07.class, columnParserMap)); ReflectionTestUtils.setField(fileLineIterator, \"calledInit\", false); FileException exception = new FileException(\"buildLineReader\u306e\u30a8\u30e9\u30fc\u3067\u3059\"); PowerMockito.doThrow(exception).when(fileLineIterator, \"buildLineReader\"); try { fileLineIterator.init(); fail(\"FileException\u304c\u30b9\u30ed\u30fc\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\"); } catch (FileException e) { assertFalse((Boolean) ReflectionTestUtils.getField(fileLineIterator, \"calledInit\")); PowerMockito.verifyPrivate(fileLineIterator).invoke(\"buildStringConverters\"); PowerMockito.verifyPrivate(fileLineIterator).invoke(\"buildMethods\"); PowerMockito.verifyPrivate(fileLineIterator).invoke(\"buildLineReader\"); PowerMockito.verifyPrivate(fileLineIterator, Mockito.never()).invoke(\"buildHeader\"); PowerMockito.verifyPrivate(fileLineIterator, Mockito.never()).invoke(\"buildTrailerQueue\"); assertSame(exception, e); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void refreshJobRetentionSettings() throws IOException { UserGroupInformation user = checkAcls(\"refreshJobRetentionSettings\"); try { loginUGI.doAs(new PrivilegedExceptionAction<Void>() { @Override public Void run() throws IOException { jobHistoryService.refreshJobRetentionSettings(); return null; } }); } catch (InterruptedException e) { throw new IOException(e); } HSAuditLogger.logSuccess(user.getShortUserName(), \"refreshJobRetentionSettings\", HISTORY_ADMIN_SERVER); }### Assistant: @Test public void testRefreshJobRetentionSettings() throws Exception { String[] args = new String[1]; args[0] = \"-refreshJobRetentionSettings\"; hsAdminClient.run(args); verify(jobHistoryService).refreshJobRetentionSettings(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TimelineEntities getEntities(String entityType, Long limit, Long windowStart, Long windowEnd, String fromId, Long fromTs, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters, EnumSet<Field> fields) { if (limit == null) { limit = DEFAULT_LIMIT; } if (windowStart == null) { windowStart = Long.MIN_VALUE; } if (windowEnd == null) { windowEnd = Long.MAX_VALUE; } if (fields == null) { fields = EnumSet.allOf(Field.class); } Iterator<TimelineEntity> entityIterator = null; if (fromId != null) { TimelineEntity firstEntity = entities.get(new EntityIdentifier(fromId, entityType)); if (firstEntity == null) { return new TimelineEntities(); } else { entityIterator = new TreeSet<TimelineEntity>(entities.values()) .tailSet(firstEntity, true).iterator(); } } if (entityIterator == null) { entityIterator = new PriorityQueue<TimelineEntity>(entities.values()) .iterator(); } List<TimelineEntity> entitiesSelected = new ArrayList<TimelineEntity>(); while (entityIterator.hasNext()) { TimelineEntity entity = entityIterator.next(); if (entitiesSelected.size() >= limit) { break; } if (!entity.getEntityType().equals(entityType)) { continue; } if (entity.getStartTime() <= windowStart) { continue; } if (entity.getStartTime() > windowEnd) { continue; } if (fromTs != null && entityInsertTimes.get(new EntityIdentifier( entity.getEntityId(), entity.getEntityType())) > fromTs) { continue; } if (primaryFilter != null && !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) { continue; } if (secondaryFilters != null) { boolean flag = true; for (NameValuePair secondaryFilter : secondaryFilters) { if (secondaryFilter != null && !matchPrimaryFilter( entity.getPrimaryFilters(), secondaryFilter) && !matchFilter(entity.getOtherInfo(), secondaryFilter)) { flag = false; break; } } if (!flag) { continue; } } entitiesSelected.add(entity); } List<TimelineEntity> entitiesToReturn = new ArrayList<TimelineEntity>(); for (TimelineEntity entitySelected : entitiesSelected) { entitiesToReturn.add(maskFields(entitySelected, fields)); } Collections.sort(entitiesToReturn); TimelineEntities entitiesWrapper = new TimelineEntities(); entitiesWrapper.setEntities(entitiesToReturn); return entitiesWrapper; }### Assistant: @Test public void testGetEntities() throws IOException { super.testGetEntities(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void enforcePartitionExclusivity(ResourceRequest resReq, Set<String> enforcedPartitions, String appLabel) { if (enforcedPartitions == null || enforcedPartitions.isEmpty()) { return; } if (!enforcedPartitions.contains(appLabel) && enforcedPartitions.contains(resReq.getNodeLabelExpression())) { resReq.setNodeLabelExpression(appLabel); } if (enforcedPartitions.contains(appLabel)) { resReq.setNodeLabelExpression(appLabel); } }### Assistant: @Test public void testEnforcePartitionExclusivityMultipleLabels() { String enforcedLabel1 = \"x\"; String enforcedLabel2 = \"y\"; Set<String> enforcedExclusiveLabelSet = new HashSet<>(); enforcedExclusiveLabelSet.add(enforcedLabel1); enforcedExclusiveLabelSet.add(enforcedLabel2); String dummyLabel = \"dummyLabel\"; String appLabel = \"appLabel\"; ResourceRequest rr = BuilderUtils.newResourceRequest( mock(Priority.class), ResourceRequest.ANY, mock(Resource.class), 1); SchedulerUtils.enforcePartitionExclusivity(rr, enforcedExclusiveLabelSet, null); Assert.assertNull(rr.getNodeLabelExpression()); SchedulerUtils.enforcePartitionExclusivity(rr, enforcedExclusiveLabelSet, appLabel); Assert.assertNull(rr.getNodeLabelExpression()); rr.setNodeLabelExpression(dummyLabel); SchedulerUtils.enforcePartitionExclusivity(rr, enforcedExclusiveLabelSet, null); Assert.assertEquals(dummyLabel, rr.getNodeLabelExpression()); SchedulerUtils.enforcePartitionExclusivity(rr, enforcedExclusiveLabelSet, appLabel); Assert.assertEquals(dummyLabel, rr.getNodeLabelExpression()); rr.setNodeLabelExpression(enforcedLabel1); SchedulerUtils.enforcePartitionExclusivity(rr, enforcedExclusiveLabelSet, null); Assert.assertNull(rr.getNodeLabelExpression()); rr.setNodeLabelExpression(enforcedLabel2); SchedulerUtils.enforcePartitionExclusivity(rr, enforcedExclusiveLabelSet, appLabel); Assert.assertEquals(appLabel, rr.getNodeLabelExpression()); rr.setNodeLabelExpression(null); SchedulerUtils.enforcePartitionExclusivity(rr, enforcedExclusiveLabelSet, enforcedLabel1); Assert.assertEquals(enforcedLabel1, rr.getNodeLabelExpression()); rr.setNodeLabelExpression(dummyLabel); SchedulerUtils.enforcePartitionExclusivity(rr, enforcedExclusiveLabelSet, enforcedLabel2); Assert.assertEquals(enforcedLabel2, rr.getNodeLabelExpression()); rr.setNodeLabelExpression(enforcedLabel1); SchedulerUtils.enforcePartitionExclusivity(rr, enforcedExclusiveLabelSet, enforcedLabel1); Assert.assertEquals(enforcedLabel1, rr.getNodeLabelExpression()); rr.setNodeLabelExpression(enforcedLabel2); SchedulerUtils.enforcePartitionExclusivity(rr, enforcedExclusiveLabelSet, enforcedLabel1); Assert.assertEquals(enforcedLabel1, rr.getNodeLabelExpression()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private static Operation createPost(URI uri, State currentState) { Operation op = Operation.createPost(uri); return prepareOp(op, currentState); }### Assistant: @Test public void successMigrateDocumentsWithAllVersions() throws Throwable { clearSourceAndDestInProcessPeers = true; Map<String, DocumentVersionType> typeBySelfLink = createVersionedExampleDocuments(this.exampleSourceFactory, this.serviceCount); MigrationTaskService.State migrationState = validMigrationState(ExampleService.FACTORY_LINK); migrationState.migrationOptions = EnumSet.of(MigrationOption.ALL_VERSIONS); Operation post = Operation.createPost(this.destinationFactoryUri).setBody(migrationState); ServiceDocument taskState = this.sender.sendAndWait(post, ServiceDocument.class); State finalState = waitForServiceCompletion(taskState.documentSelfLink, getDestinationHost()); assertEquals(TaskStage.FINISHED, finalState.taskInfo.stage); validateVersionedExampleDocuments(typeBySelfLink); long expectedProcessedDocs = this.serviceCount * (1 + 2 + 3 + 1 + 2 + 3); validateNumOfProcessedDoc(getDestinationHost(), taskState.documentSelfLink, expectedProcessedDocs); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getIdProperty() { return idProperty; }### Assistant: @Test public void testGetIdProperty() throws Exception { List<EntityConfig> entities = getEntityConfigs(); Assert.assertEquals(2, entities.size()); Assert.assertEquals(\"id\", entities.get(0).getIdProperty()); Assert.assertEquals(\"name\", entities.get(1).getIdProperty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isActivated() { String color = System.getProperty(\"maven.color\"); if (color != null) { return Boolean.valueOf(color); } String activation = System.getProperty(\"style.color\"); if (\"always\".equals(activation)) { return true; } if (\"never\".equals(activation)) { return false; } Set<String> args = split(System.getenv(\"MAVEN_CMD_LINE_ARGS\")); return !isBatchMode(args) && !isLogFile(args) && !isDumbTerminal(); }### Assistant: @Test public void return_maven_color_property_first() { System.setProperty(\"maven.color\", \"true\"); System.setProperty(\"style.color\", \"false\"); env.set(\"TERM\", \"dumb\"); env.set(\"MAVEN_CMD_LINE_ARGS\", \"test -B\"); assertThat(ColorActivation.isActivated()).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String dump(ByteBuffer buffer, int nbBytes, boolean toAscii) { byte data[]; int start; int size = Math.min(buffer.remaining(), nbBytes >= 0 ? nbBytes : Integer.MAX_VALUE); int length = buffer.remaining(); if (buffer.hasArray() && !buffer.isReadOnly()) { start = buffer.position(); data = buffer.array(); } else { data = new byte[size]; int oldpos = buffer.position(); buffer.get(data); buffer.position(oldpos); start = 0; length = data.length; } boolean binaryContent = false; if (toAscii) { for (int i = start; i < start + size; i++) { byte b = data[i]; if (((b < 32) || (b > 126)) && (b != 13) && (b != 10)) { binaryContent = true; break; } } } if (!toAscii || binaryContent) { StringBuilder out = new StringBuilder(size * 3 + 30); out.append(\"ByteBuffer[len=\").append(length).append(\",bytes='\"); int byteValue = data[start] & 0xFF; boolean isFirst = true; for (int i = start; i < start + size; i++) { if (isFirst) { isFirst = false; } else { out.append(' '); } byteValue = data[i] & 0xFF; out.append(new String(new byte[] { '0', 'x', HEX_CHAR[(byteValue & 0x00F0) >> 4], HEX_CHAR[byteValue & 0x000F] })); } out.append(\"']\"); return out.toString(); } else { StringBuilder sb = new StringBuilder(size); sb.append(\"ByteBuffer[len=\").append(length).append(\",str='\").append(new String(data, start, size)) .append(\"']\"); return sb.toString(); } }### Assistant: @Test public void testWithSizeLimit() { ByteBuffer bb = ByteBuffer.allocate(10); bb.put(new byte[] { 0x01, (byte) 0x8F, 0x04, 0x7A, (byte) 0xc2, 0x23, (byte) 0xA0, 0x08, 0x44 }); bb.flip(); assertEquals(\"ByteBuffer[len=9,bytes='0x01 0x8F 0x04 0x7A 0xC2']\", ByteBufferDumper.dump(bb, 5, false)); assertEquals(\"ByteBuffer[len=9,bytes='0x01 0x8F 0x04 0x7A 0xC2']\", ByteBufferDumper.dump(bb, 5, true)); assertEquals(\"ByteBuffer[len=9,str='']\", ByteBufferDumper.dump(bb, 0, true)); assertEquals(\"ByteBuffer[len=9,bytes='0x01 0x8F 0x04 0x7A 0xC2 0x23 0xA0 0x08 0x44']\", ByteBufferDumper.dump(bb, 10, true)); assertEquals(\"ByteBuffer[len=9,bytes='0x01 0x8F 0x04 0x7A 0xC2 0x23 0xA0 0x08 0x44']\", ByteBufferDumper.dump(bb, -1, false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void handleEventException(Throwable ex, long sequence, SofaTracerSpanEvent event) { if (event != null) { SofaTracerSpan sofaTracerSpan = event.getSofaTracerSpan(); SynchronizingSelfLog.error( \"AsyncConsumer occurs exception during handle SofaTracerSpanEvent, The sofaTracerSpan is[\" + sofaTracerSpan + \"]\", ex); } else { SynchronizingSelfLog .error( \"AsyncConsumer occurs exception during handle SofaTracerSpanEvent, The sofaTracerSpan is null\", ex); } }### Assistant: @Test public void handleEventExceptionWithEventNull() throws IOException, InterruptedException { consumerExceptionHandler.handleEventException(new Throwable(), 1, null); TestUtil.waitForAsyncLog(); File log = customFileLog(\"sync.log\"); List<String> logs = FileUtils.readLines(log); assertTrue(logs.toString(), logs.get(0).contains(\"[ERROR]\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AppSchema extractAppSchema() { for ( QName ftName : ftNameToFtElement.keySet() ) { FeatureType ft = buildFeatureType( ftNameToFtElement.get( ftName ) ); ftNameToFt.put( ftName, ft ); } FeatureType[] fts = ftNameToFt.values().toArray( new FeatureType[ftNameToFt.size()] ); Map<FeatureType, FeatureType> ftSubstitution = new HashMap<FeatureType, FeatureType>(); for ( QName ftName : ftNameToSubstitutionGroupName.keySet() ) { QName substitutionFtName = ftNameToSubstitutionGroupName.get( ftName ); if ( substitutionFtName != null ) { ftSubstitution.put( ftNameToFt.get( ftName ), ftNameToFt.get( substitutionFtName ) ); } } final List<GMLObjectType> genericGmlObjectTypes = new ArrayList<GMLObjectType>(); for ( final XSElementDeclaration elDecl : gmlSchema.getGeometryElementDeclarations( null, false ) ) { final GMLObjectType type = buildGenericObjectType( elDecl ); genericGmlObjectTypes.add( type ); typeNameToType.put( type.getName(), type ); } Map<GMLObjectType, GMLObjectType> typeToSuperType = new HashMap<GMLObjectType, GMLObjectType>(); for ( QName ftName : geometryNameToSubstitutionGroupName.keySet() ) { QName substitutionFtName = geometryNameToSubstitutionGroupName.get( ftName ); if ( substitutionFtName != null ) { typeToSuperType.put( typeNameToType.get( ftName ), typeNameToType.get( substitutionFtName ) ); } } for ( final XSElementDeclaration elDecl : gmlSchema.getTimeObjectElementDeclarations( null, false ) ) { final GMLObjectType type = buildGenericObjectType( elDecl ); genericGmlObjectTypes.add( type ); typeNameToType.put( type.getName(), type ); } for ( final XSElementDeclaration elDecl : gmlSchema.getTimeSliceElementDeclarations( null, false ) ) { final GMLObjectType type = buildGenericObjectType( elDecl ); genericGmlObjectTypes.add( type ); typeNameToType.put( type.getName(), type ); } return new GenericAppSchema( fts, ftSubstitution, prefixToNs, gmlSchema, genericGmlObjectTypes, typeToSuperType ); }### Assistant: @Test public void testAIXMTimeSliceDeclarations() throws ClassCastException, ClassNotFoundException, InstantiationException, IllegalAccessException { String schemaUrl = this.getClass().getResource( \"../aixm/schema/message/AIXM_BasicMessage.xsd\" ).toString(); GMLAppSchemaReader adapter = new GMLAppSchemaReader( null, null, schemaUrl ); AppSchema schema = adapter.extractAppSchema(); GMLSchemaInfoSet gmlSchema = schema.getGMLSchema(); List<XSElementDeclaration> timeSliceElementDecls = gmlSchema.getTimeSliceElementDeclarations( null, true ); Assert.assertEquals( 126, timeSliceElementDecls.size() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String retrieveLastModificationTime() { Struct lastModStruct = get(LAST_MOD_FNAME, Struct.class); if (lastModStruct == null) { return null; } return lastModStruct.getString(ATTR_LAST_MOD_TIME); }### Assistant: @Test public void testRetrieveLastModificationTime() { ZMSFileChangeLogStoreCommon cstore = new ZMSFileChangeLogStoreCommon(FSTORE_PATH); try (PrintWriter out = new PrintWriter(FSTORE_PATH + \"/.lastModTime\")) { out.write(\"{\\\"lastModTime\\\":\\\"12345\\\"}\"); } catch (FileNotFoundException e) { fail(); } assertEquals(cstore.retrieveLastModificationTime(), \"12345\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String addQueryParameters(String uri, Object... parameters) { if (uri == null) { return null; } StringBuilder query = new StringBuilder(); int questionAt = uri.indexOf('?'); if (questionAt > -1) { String queryString = uri.substring(questionAt + 1); int beginAt = 0; while (true) { int ampIndex = queryString.indexOf('&', beginAt); String param = queryString.substring(beginAt, ampIndex > -1 ? ampIndex : queryString.length()); if (!param.isEmpty() || ampIndex > -1) { query.append('&'); int equalsIndex = param.indexOf('='); if (equalsIndex > -1) { query.append(encodeUri(decodeUri(param.substring(0, equalsIndex)))); query.append('='); query.append(encodeUri(decodeUri(param.substring(equalsIndex + 1)))); } else { query.append(encodeUri(decodeUri(param))); } } if (ampIndex > -1) { beginAt = ampIndex + 1; } else { break; } } uri = uri.substring(0, questionAt); } int parametersLength = parameters != null ? parameters.length : 0; for (int i = 0; i < parametersLength; i += 2) { String name = parameters[i].toString(); String prefix = \"&\" + name + \"=\"; int prefixLength = prefix.length(); int beginAt = 0; int endAt; while (true) { beginAt = query.indexOf(prefix, beginAt); if (beginAt < 0) { break; } endAt = query.indexOf(\"&\", beginAt + prefixLength); if (endAt > -1) { query.delete(beginAt, endAt); } else { query.delete(beginAt, query.length()); break; } } if (i + 1 < parametersLength) { Object value = parameters[i + 1]; if (value != null) { for (Object item : ObjectUtils.to(Iterable.class, value)) { if (item != null) { query.append('&'); query.append(encodeUri(name)); query.append('='); query.append(encodeUri(item instanceof Enum ? ((Enum<?>) item).name() : item.toString())); } } } } } if (query.length() <= 1) { return uri; } else { query.delete(0, 1); query.insert(0, \"?\"); query.insert(0, uri); return query.toString(); } }### Assistant: @Test public void addQueryParameters_append() { assertEquals(\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static final boolean isSet(byte b, int mask) { return (b & mask) == mask; }### Assistant: @Test public final void testBit8() { final byte b = Hex.decode(\"f0\")[0]; Assert.assertTrue(Bit.isSet(b, Bit.B8)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getPublicAdminNetwork(PaasManagerUser user, String region) throws OpenStackException { log.debug(\"Obtain public admin network \"); String type = \"net\"; String networkId = regionCache.getUrl(region, type); if (networkId != null) { log.debug(\"in cache \" + networkId); return networkId; } NetworkInstance net = this.getPublicAdmin(user, region); if (net != null) { log.debug(\"net \" + net.getNetworkName() + \" \" + net.getIdNetwork()); regionCache.putUrl(region, type, net.getNetworkName()); return net.getIdNetwork(); } return null; }### Assistant: @Test public void testObtainPublicNetworkSeveralExternalNetworks() throws OpenStackException { String CONTENT_NETWORKS = \"{\\\"networks\\\": [{\\\"status\\\": \\\"ACTIVE\\\", \" + \"\\\"subnets\\\": [\\\"eb602a2b-13cd-46c8-9055-99ad45180730\\\"],\" + \"\\\"name\\\": \\\"net04_ext\\\", \\\"provider:physical_network\\\": null, \" + \"\\\"admin_state_up\\\": true, \\\"tenant_id\\\": \" + \"\\\"eab8403e83e048719ab220353c10806f\\\", \\\"provider:network_type\\\": \" + \"\\\"gre\\\", \\\"router:external\\\": true, \\\"shared\\\": \" + \"true, \\\"id\\\": \\\"04c9aedf-aeb6-4553-8ddb-845701da71bd\\\", \" + \"\\\"provider:segmentation_id\\\": 3}, \" + \"{\\\"status\\\": \\\"ACTIVE\\\", \\\"subnets\\\": [\\\"6ba86d6b-b7ad-4d0b-b552-cb63b36c9ef2\\\"], \" + \"\\\"name\\\": \\\"sec_ext_net\\\", \" + \"\\\"provider:physical_network\\\": \\\"physnet1\\\", \\\"admin_state_up\\\": true, \\\"tenant_id\\\":\" + \"\\\"eab8403e83e048719ab220353c10806f\\\", \" + \"\\\"provider:network_type\\\": \\\"flat\\\", \\\"router:external\\\": true, \\\"shared\\\": false,\" + \" \\\"id\\\": \\\"063f1075-77eb-45f9-be7a-205a591840ee\\\",\" + \"\\\"provider:segmentation_id\\\": null}]}\"; System.out.print(CONTENT_NETWORKS); String region = \"RegionOne5\"; OpenStackAccess openStackAccess = new OpenStackAccess(); openStackAccess.setToken(\"1234567891234567989\"); openStackAccess.setTenantId(\"08bed031f6c54c9d9b35b42aa06b51c0\"); when(openStackRegion.getTokenAdmin()).thenReturn(openStackAccess); when(openOperationUtil.executeNovaRequest(any(HttpUriRequest.class))).thenReturn(CONTENT_NETWORKS); String net = openStackUtil.getPublicAdminNetwork(paasManagerUser, region); assertNotNull(net); assertEquals(net, \"04c9aedf-aeb6-4553-8ddb-845701da71bd\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameters) { String expected = parameters.get(EXPECTED_KEY); String path = parameters.get(JSONPATH_KEY); boolean equals; try { String actualValue = JsonPath.read(request.getBody(), path); equals = evaluate(expected, actualValue); } catch (Exception e) { logger.debug(\"Request body isn't of JSON format, message:\" + request.getWilmaMessageLoggerId(), e); equals = false; } return equals; }### Assistant: @Test public void testCheckConditionShouldFailWhenJsonHasNoSuchParameter() throws Exception { givenExpectations(\"Wilma\", \"$.name\"); givenWilmaRequest(\"{\\\"firstName\\\":\\\"Wilma\\\",\\\"age\\\":\\\"20\\\"}\"); boolean matches = underTest.checkCondition(request, parameters); assertFalse(matches); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Timeout newTimeout(TimerTask task, long delay, TimeUnit unit) { if (task == null) { throw new NullPointerException(\"task\"); } if (unit == null) { throw new NullPointerException(\"unit\"); } long pendingTimeoutsCount = pendingTimeouts.incrementAndGet(); if (maxPendingTimeouts > 0 && pendingTimeoutsCount > maxPendingTimeouts) { pendingTimeouts.decrementAndGet(); throw new RejectedExecutionException(\"Number of pending timeouts (\" + pendingTimeoutsCount + \") is greater than or equal to maximum allowed pending \" + \"timeouts (\" + maxPendingTimeouts + \")\"); } start(); long deadline = System.nanoTime() + unit.toNanos(delay) - startTime; if (delay > 0 && deadline < 0) { deadline = Long.MAX_VALUE; } HashedWheelTimeout timeout = new HashedWheelTimeout(this, task, deadline); timeouts.add(timeout); return timeout; }### Assistant: @Test public void newTimeout() throws InterruptedException { final Timer timer = newTimer(); for (int i = 0; i < 10; i++) { timer.newTimeout(new PrintTask(), 1, TimeUnit.SECONDS); Thread.sleep(1000); } Thread.sleep(5000); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void watch(Object watchedReference) { watch(watchedReference, \"\"); }### Assistant: @Test public void unreachableObject_noDump() { TestDumper dumper = new TestDumper(); TestExecutor executor = new TestExecutor(); RefWatcher refWatcher = defaultWatcher(dumper, executor); refWatcher.watch(new Object()); executor.command.run(); assertFalse(dumper.called); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") <T> List<T> getFacets(@Nullable Class<T> facet) { if (facet != null && Plugin.class.isAssignableFrom(facet)) { List<T> ts = new ArrayList<>(); Plugin plugin = pluginsByClass.get(facet); if (plugin != null) { ts.add((T) plugin); } return ts; } return (List<T>) pluginsByFacet.get(facet); }### Assistant: @Test public void get_multiple_facet_implementations() { List<Plugin> plugins = new ArrayList<>(); OneFacetPlugin oneFacetPlugin = new OneFacetPlugin(); TwoFacetPlugin twoFacetPlugin = new TwoFacetPlugin(); plugins.add(oneFacetPlugin); plugins.add(twoFacetPlugin); FacetRegistry registry = new FacetRegistry(plugins); List<Facet1> facet1s = registry.getFacets(Facet1.class); Assertions.assertThat(facet1s).hasSize(2); Assertions.assertThat(facet1s.get(0)).isEqualTo(oneFacetPlugin); Assertions.assertThat(facet1s.get(0)).isInstanceOf(OneFacetPlugin.class); Assertions.assertThat(facet1s.get(1)).isEqualTo(twoFacetPlugin); Assertions.assertThat(facet1s.get(1)).isInstanceOf(TwoFacetPlugin.class); List<Facet2> facet2s = registry.getFacets(Facet2.class); Assertions.assertThat(facet2s).hasSize(1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean awaitTermination(final long timeout, final TimeUnit unit) throws InterruptedException { logger.info(String.format(\"Awaiting completion up to %d %s.\", timeout, unit)); if (!executor.awaitTermination(timeout, unit)) { logger.warn(String.format(\"Executor failed to terminate in %d %s.\", timeout, unit)); return false; } logger.info(\"Terminated.\"); return true; }### Assistant: @Test public void testAwaitTermination() throws ExecutionException, InterruptedException, TimeoutException { final ExecutorProxyStub proxy = new ExecutorProxyStub(); final Future<Boolean> result = proxy.getExecutor().submit(()-> { Thread.sleep(1000); return true; }); proxy.shutdown(); Assert.assertTrue(proxy.awaitTermination(2, TimeUnit.SECONDS)); Assert.assertTrue(result.get(0, TimeUnit.MILLISECONDS)); Assert.assertTrue(proxy.awaitTermination(0, TimeUnit.SECONDS)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String apply(PathOperation operation) { if (config.isSeparatedOperationsEnabled()) return new File(config.getSeparatedOperationsFolder(), markupDocBuilder.addFileExtension(normalizeName(operation.getId()))).getPath(); else return markupDocBuilder.addFileExtension(config.getPathsDocument()); }### Assistant: @Test public void testWithInterDocumentCrossReferencesAndMarkdown() { Swagger2MarkupConfig config = new Swagger2MarkupConfigBuilder() .withInterDocumentCrossReferences() .withMarkupLanguage(MarkupLanguage.MARKDOWN) .build(); Swagger2MarkupConverter.SwaggerContext context = createContext(config); context.setOutputPath(Paths.get(\"/tmp\")); assertThat(new OperationDocumentNameResolver(context).apply(operation)) .isEqualTo(\"paths.md\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void setInterpolator(@Nullable final TimeInterpolator interpolator) { this.animator.setInterpolator(interpolator); }### Assistant: @Test public void testSetInterpolator() { final Animator mockAnimator = mock(Animator.class); final AnimatorWrapper wrapper = new AnimatorWrapper(mockAnimator); final TimeInterpolator mockInterpolator = mock(TimeInterpolator.class); wrapper.setInterpolator(mockInterpolator); verify(mockAnimator).setInterpolator(mockInterpolator); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void beforeDeleteNode(NodeRef nodeRef) { if (auditEnabled()) { getNodeChange(nodeRef).beforeDeleteNode(nodeRef); } }### Assistant: @Test public final void testBeforeDeleteNode() throws Exception { serviceRegistry.getNodeService().deleteNode(content0); txn.commit(); txn = null; assertEquals(1, auditMapList.size()); Map<String, Serializable> auditMap = auditMapList.get(0); assertEquals(\"DELETE\", auditMap.get(\"action\")); assertContains(\"deleteNode\", auditMap.get(\"sub-actions\")); assertEquals(\"/cm:homeFolder/cm:folder0/cm:content0\", auditMap.get(\"path\")); assertEquals(\"cm:content\", auditMap.get(\"type\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Com_Query loadFromPacket(byte[] packet) { Com_Query obj = new Com_Query(); Proto proto = new Proto(packet, 3); obj.sequenceId = proto.get_fixed_int(1); proto.get_filler(1); obj.query = proto.get_eop_str(); return obj; }### Assistant: @Test public void test2() { byte[] packet = Proto.packet_string_to_bytes(\"\" + \"09 00 00 00 03 53 45 4c 45 43 54 20 31\" ); Com_Query pkt = Com_Query.loadFromPacket(packet); assertArrayEquals(packet, pkt.toPacket()); assertEquals(pkt.query, \"SELECT 1\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ShapeId fromRelative(String namespace, String relativeName) { Objects.requireNonNull(namespace, \"Shape ID namespace must not be null\"); Objects.requireNonNull(relativeName, \"Shape ID relative name must not be null\"); if (relativeName.contains(\"#\")) { throw new ShapeIdSyntaxException(\"Relative shape ID must not contain a namespace: \" + relativeName); } return from(namespace + \"#\" + relativeName); }### Assistant: @Test public void fromRelativeContainingNamespace() { Assertions.assertThrows(IllegalArgumentException.class, () -> { ShapeId.fromRelative(\"name.space\", \"name.space#Name$member\"); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DistCpOptions parse(String args[]) throws IllegalArgumentException { CommandLineParser parser = new CustomParser(); CommandLine command; try { command = parser.parse(cliOptions, args, true); } catch (ParseException e) { throw new IllegalArgumentException(\"Unable to parse arguments. \" + Arrays.toString(args), e); } DistCpOptions option; Path targetPath; List<Path> sourcePaths = new ArrayList<Path>(); String leftOverArgs[] = command.getArgs(); if (leftOverArgs == null || leftOverArgs.length < 1) { throw new IllegalArgumentException(\"Target path not specified\"); } targetPath = new Path(leftOverArgs[leftOverArgs.length -1].trim()); for (int index = 0; index < leftOverArgs.length - 1; index++) { sourcePaths.add(new Path(leftOverArgs[index].trim())); } if (command.hasOption(DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())) { if (!sourcePaths.isEmpty()) { throw new IllegalArgumentException(\"Both source file listing and source paths present\"); } option = new DistCpOptions(new Path(getVal(command, DistCpOptionSwitch. SOURCE_FILE_LISTING.getSwitch())), targetPath); } else { if (sourcePaths.isEmpty()) { throw new IllegalArgumentException(\"Neither source file listing nor source paths present\"); } option = new DistCpOptions(sourcePaths, targetPath); } if (command.hasOption(DistCpOptionSwitch.IGNORE_FAILURES.getSwitch())) { option.setIgnoreFailures(true); } if (command.hasOption(DistCpOptionSwitch.ATOMIC_COMMIT.getSwitch())) { option.setAtomicCommit(true); } if (command.hasOption(DistCpOptionSwitch.WORK_PATH.getSwitch()) && option.shouldAtomicCommit()) { String workPath = getVal(command, DistCpOptionSwitch.WORK_PATH.getSwitch()); if (workPath != null && !workPath.isEmpty()) { option.setAtomicWorkPath(new Path(workPath)); } } else if (command.hasOption(DistCpOptionSwitch.WORK_PATH.getSwitch())) { throw new IllegalArgumentException(\"-tmp work-path can only be specified along with -atomic\"); } if (command.hasOption(DistCpOptionSwitch.LOG_PATH.getSwitch())) { option.setLogPath(new Path(getVal(command, DistCpOptionSwitch.LOG_PATH.getSwitch()))); } if (command.hasOption(DistCpOptionSwitch.SYNC_FOLDERS.getSwitch())) { option.setSyncFolder(true); } if (command.hasOption(DistCpOptionSwitch.OVERWRITE.getSwitch())) { option.setOverwrite(true); } if (command.hasOption(DistCpOptionSwitch.DELETE_MISSING.getSwitch())) { option.setDeleteMissing(true); } if (command.hasOption(DistCpOptionSwitch.SKIP_CRC.getSwitch())) { option.setSkipCRC(true); } if (command.hasOption(DistCpOptionSwitch.BLOCKING.getSwitch())) { option.setBlocking(false); } if (command.hasOption(DistCpOptionSwitch.BANDWIDTH.getSwitch())) { try { Integer mapBandwidth = Integer.parseInt( getVal(command, DistCpOptionSwitch.BANDWIDTH.getSwitch()).trim()); if (mapBandwidth.intValue() <= 0) { throw new IllegalArgumentException(\"Bandwidth specified is not positive: \" + mapBandwidth); } option.setMapBandwidth(mapBandwidth); } catch (NumberFormatException e) { throw new IllegalArgumentException(\"Bandwidth specified is invalid: \" + getVal(command, DistCpOptionSwitch.BANDWIDTH.getSwitch()), e); } } if (command.hasOption(DistCpOptionSwitch.SSL_CONF.getSwitch())) { option.setSslConfigurationFile(command. getOptionValue(DistCpOptionSwitch.SSL_CONF.getSwitch())); } if (command.hasOption(DistCpOptionSwitch.MAX_MAPS.getSwitch())) { try { Integer maps = Integer.parseInt( getVal(command, DistCpOptionSwitch.MAX_MAPS.getSwitch()).trim()); option.setMaxMaps(maps); } catch (NumberFormatException e) { throw new IllegalArgumentException(\"Number of maps is invalid: \" + getVal(command, DistCpOptionSwitch.MAX_MAPS.getSwitch()), e); } } if (command.hasOption(DistCpOptionSwitch.COPY_STRATEGY.getSwitch())) { option.setCopyStrategy( getVal(command, DistCpOptionSwitch.COPY_STRATEGY.getSwitch())); } if (command.hasOption(DistCpOptionSwitch.PRESERVE_STATUS.getSwitch())) { String attributes = getVal(command, DistCpOptionSwitch.PRESERVE_STATUS.getSwitch()); if (attributes == null || attributes.isEmpty()) { for (FileAttribute attribute : FileAttribute.values()) { option.preserve(attribute); } } else { for (int index = 0; index < attributes.length(); index++) { option.preserve(FileAttribute. getAttribute(attributes.charAt(index))); } } } if (command.hasOption(DistCpOptionSwitch.FILE_LIMIT.getSwitch())) { String fileLimitString = getVal(command, DistCpOptionSwitch.FILE_LIMIT.getSwitch().trim()); try { Integer.parseInt(fileLimitString); } catch (NumberFormatException e) { throw new IllegalArgumentException(\"File-limit is invalid: \" + fileLimitString, e); } LOG.warn(DistCpOptionSwitch.FILE_LIMIT.getSwitch() + \" is a deprecated\" + \" option. Ignoring.\"); } if (command.hasOption(DistCpOptionSwitch.SIZE_LIMIT.getSwitch())) { String sizeLimitString = getVal(command, DistCpOptionSwitch.SIZE_LIMIT.getSwitch().trim()); try { Long.parseLong(sizeLimitString); } catch (NumberFormatException e) { throw new IllegalArgumentException(\"Size-limit is invalid: \" + sizeLimitString, e); } LOG.warn(DistCpOptionSwitch.SIZE_LIMIT.getSwitch() + \" is a deprecated\" + \" option. Ignoring.\"); } return option; }### Assistant: @Test public void testParseMaps() { DistCpOptions options = OptionsParser.parse(new String[] { \"hdfs: \"hdfs: Assert.assertEquals(options.getMaxMaps(), DistCpConstants.DEFAULT_MAPS); options = OptionsParser.parse(new String[] { \"-m\", \"1\", \"hdfs: \"hdfs: Assert.assertEquals(options.getMaxMaps(), 1); options = OptionsParser.parse(new String[] { \"-m\", \"0\", \"hdfs: \"hdfs: Assert.assertEquals(options.getMaxMaps(), 1); try { OptionsParser.parse(new String[] { \"-m\", \"hello\", \"hdfs: \"hdfs: Assert.fail(\"Non numberic map parsed\"); } catch (IllegalArgumentException ignore) { } try { OptionsParser.parse(new String[] { \"-mapredXslConf\", \"hdfs: \"hdfs: Assert.fail(\"Non numberic map parsed\"); } catch (IllegalArgumentException ignore) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String generateRandom(int length) { String generatedStr = null; if (length < 0) { return generatedStr; } if (length == 0) { return \"\"; } char[] generatedChar = new char[length]; int charsLength = chars.length; Random random = new SecureRandom(); for(int i = 0; i < length; ++i) { int index = random.nextInt(charsLength); generatedChar[i] = (char) chars[index]; } generatedStr = String.valueOf(generatedChar); return generatedStr; }### Assistant: @Test public void utilShouldReturnCorrectLengthString() { int one = 1; int length = 3; int otherLength = 10; String oneStr = StringUtils.generateRandom(one); String str = StringUtils.generateRandom(length); String otherStr = StringUtils.generateRandom(otherLength); assertThat(oneStr.length(), is(one)); assertThat(str.length(), is(length)); assertThat(otherStr.length(), is(otherLength)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getIterative(int n) { validateInput(n); if (n <= 1) { return 1; } int previous = 1; int current = 1; int element = 0; for (int i = 2; i <= n; i++) { element = previous + current; previous = current; current = element; } return element; }### Assistant: @Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNegativeValuesIterative() { fibonacciNumbers.getIterative(-1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<List<String>> lfsort(List<List<String>> list) { Map<Integer, Integer> freqs = new HashMap<>(); list.stream().map(List::size).forEach(l -> freqs.put(l, freqs.compute(l, (k, v) -> v == null ? 1 : v + 1))); return list .stream() .sorted((xs1, xs2) -> freqs.get(xs1.size()) - freqs.get(xs2.size())) .collect(toList()); }### Assistant: @Test public void shouldSortByLengthFrequency() throws Exception { List<List<String>> input = Arrays.asList(Arrays.asList(\"a\", \"b\", \"c\"), Arrays.asList(\"d\", \"e\"), Arrays.asList(\"f\", \"g\", \"h\"), Arrays.asList(\"d\", \"e\"), Arrays.asList(\"i\", \"j\", \"k\", \"l\"), Arrays.asList(\"m\", \"n\"), Arrays.asList(\"o\")); List<List<String>> result = P28.lfsort(input); assertThat(result, is(equalTo(Arrays.asList(Arrays.asList(\"i\", \"j\", \"k\", \"l\"), Arrays.asList(\"o\"), Arrays.asList(\"a\", \"b\", \"c\"), Arrays.asList(\"f\", \"g\", \"h\"), Arrays.asList(\"d\", \"e\"), Arrays.asList(\"d\", \"e\"), Arrays.asList(\"m\", \"n\"))))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getDependencySnippet(ArtifactCoordinates inputCoordinates) { PypiArtifactCoordinates coordinates = (PypiArtifactCoordinates) inputCoordinates; String sb = coordinates.getId(); if (!\"version\".equals(coordinates.getVersion())) { sb += \" == \" + coordinates.getVersion(); } return sb; }### Assistant: @Test public void testGetDependencySnippet() { for (int i = 0; i < formattedWheels.size(); ++i) { assertThat(formattedWheels.get(i)).isEqualTo(wheelArtifactcoordinates.get(i)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FSINFO3Response fsinfo(XDR xdr, RpcInfo info) { return fsinfo(xdr, getSecurityHandler(info), info.remoteAddress()); }### Assistant: @Test(timeout = 60000) public void testFsinfo() throws Exception { HdfsFileStatus status = nn.getRpcServer().getFileInfo(\"/tmp/bar\"); long dirId = status.getFileId(); int namenodeId = Nfs3Utils.getNamenodeId(config); FileHandle handle = new FileHandle(dirId, namenodeId); XDR xdr_req = new XDR(); FSINFO3Request req = new FSINFO3Request(handle); req.serialize(xdr_req); FSINFO3Response response1 = nfsd.fsinfo(xdr_req.asReadOnlyWrap(), securityHandlerUnpriviledged, new InetSocketAddress(\"localhost\", 1234)); assertEquals(\"Incorrect return code:\", Nfs3Status.NFS3ERR_ACCES, response1.getStatus()); FSINFO3Response response2 = nfsd.fsinfo(xdr_req.asReadOnlyWrap(), securityHandler, new InetSocketAddress(\"localhost\", 1234)); assertEquals(\"Incorrect return code:\", Nfs3Status.NFS3_OK, response2.getStatus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public File createTmpFileForWrite(String pathStr, long size, Configuration conf) throws IOException { AllocatorPerContext context = obtainContext(contextCfgItemName); return context.createTmpFileForWrite(pathStr, size, conf); }### Assistant: @Test (timeout = 30000) public void testNoSideEffects() throws IOException { assumeNotWindows(); String dir = buildBufferDir(ROOT, 0); try { conf.set(CONTEXT, dir); File result = dirAllocator.createTmpFileForWrite(FILENAME, -1, conf); assertTrue(result.delete()); assertTrue(result.getParentFile().delete()); assertFalse(new File(dir).exists()); } finally { Shell.execCommand(Shell.getSetPermissionCommand(\"u+w\", false, BUFFER_DIR_ROOT)); rmBufferDirs(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private static String toString(final Object o1, final Object o2) { return o1 + \", \" + o2; }### Assistant: @Test public void testByThrownAndThreadDeathSub() { LogRecord r1 = new LogRecord(Level.INFO, Level.INFO.toString()); LogRecord r2 = new LogRecord(Level.INFO, Level.INFO.toString()); swapSeq(r1, r2); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); r1.setThrown(headSubTdChain(null)); r2.setThrown(new Error()); assertRecordLessThan(r1, r2); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); r1.setThrown(headSubTdChain(null)); r2.setThrown(new RuntimeException()); assertRecordLessThan(r1, r2); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); r1.setThrown(headSubTdChain(null)); r2.setThrown(new Exception()); assertRecordLessThan(r1, r2); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); r1.setThrown(headSubTdChain(new Error())); r2.setThrown(new Error()); assertRecordLessThan(r1, r2); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); r1.setThrown(headSubTdChain(new RuntimeException())); r2.setThrown(new RuntimeException()); assertRecordLessThan(r1, r2); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); r1.setThrown(headSubTdChain(new Exception())); r2.setThrown(new Exception()); assertRecordLessThan(r1, r2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public D setSetting(String settingName, Object value) throws InvalidConfigException { D newConfig = super.setSetting(settingName, value); return setNewConfig(newConfig); }### Assistant: @Test public void testStringPropertyTrimming() throws Exception { DynamicConfig config = _configManager.setSetting(\"com.linkedin.databus2.nestedConfig.stringSetting\", \" text to trim \"); assertEquals(\"trimmed value\", \"text to trim\", config.getNestedConfig().getStringSetting()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void setLoggerLevel(String logger, org.slf4j.event.Level level) { if(level == null) { throw new IllegalArgumentException(\"level argument cannot be null\"); } loggerContext.getLogger(logger).setLevel(getLogbackLogLevel(level)); }### Assistant: @Test public void testLoggerAsClassAndLogBackLevelAsInfo() { Assert.assertNotNull(logbackVerboseConfigurator); Assert.assertNotNull(loggerContext); logbackVerboseConfigurator.setLoggerLevel(this.getClass(), Level.INFO); Assert.assertTrue(loggerContext.getLogger(this.getClass()).getLevel() == ch.qos.logback.classic.Level.INFO); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void initialize() { final List<Item> allColumns = columnStorage.getAllColumns(); for (Item next : allColumns) { registry.register(next); } registry.register(new ColumnBuilder().build()); }### Assistant: @Test public void testInitialize() { final ColumnStorage storage = mock(ColumnStorage.class); final List<Item> columnList = new ArrayList<>(); columnList.add(new ColumnBuilder().name(\"col_1\").build()); columnList.add(new ColumnBuilder().name(\"col_2\").build()); when(storage.getAllColumns()).thenReturn(columnList); final ColumnRegistry registry = new ColumnRegistry(); final ColumnRegistryInitializer initializer = new ColumnRegistryInitializer(registry, storage); initializer.initialize(); Item item = registry.getColumn(\"col_1\"); assertNotNull(item); item = registry.getColumn(\"col_2\"); assertNotNull(item); item = registry.getColumn(\"Implicit\"); assertNotNull(item); verify(storage, times(1)).getAllColumns(); verifyNoMoreInteractions(storage); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void handle(Object event) { AuthenticationSuccessEvent loginSuccessEvent = (AuthenticationSuccessEvent) event; Object name = loginSuccessEvent.getAuthentication().getPrincipal(); if (name != null) { Users user = (Users) name; user.setFailedLoginAttemptsToZero(); usersRepository.updateUser(user); } }### Assistant: @Test public void testHandle() { AuthenticationSuccessEvent loginSuccessEvent=mock(AuthenticationSuccessEvent.class); Authentication authentication=mock(Authentication.class); Users user=mock(Users.class); when(loginSuccessEvent.getAuthentication()).thenReturn(authentication); when(authentication.getPrincipal()).thenReturn(user); loginSuccessEventListener.handle(loginSuccessEvent); verify(user).setFailedLoginAttemptsToZero(); verify(usersRepository).updateUser(user); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String resolve(Token token, QueryContext ctx) { if (token.getType() != TokenType.IN) { throw new DalRuntimeException(\"Internal error: only IN token is supported by \" + getClass()); } if (token instanceof StartTagToken) { if (ctx.isWithinInToken()) { throw new DalRuntimeException(\"IN token can't be nested\"); } ctx.setWithinInToken(true); return \"(\"; } else if (token instanceof EndTagToken) { ctx.setWithinInToken(false); return \")\"; } else { throw new DalRuntimeException(\"Internal error: IN token can only be used as <IN> or </IN>\"); } }### Assistant: @Test public void testInConstant() throws Exception { QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.SELECT, \"<IN>...</IN>\"); User user = new User(); QueryContext ctx = getSelectContext(query, user, null); Assert.assertEquals(false, ctx.isWithinInToken()); m_queryResolver.resolve(ctx); Assert.assertEquals(\"(...)\", ctx.getSqlStatement()); Assert.assertEquals(0, ctx.getParameters().size()); Assert.assertEquals(false, ctx.isWithinInToken()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object obj) { if (this == obj) { return true; } if (obj == null || getClass() != obj.getClass()) { return false; } ContentRange other = (ContentRange) obj; return this.first == other.first && this.last == other.last; }### Assistant: @Test public void testUnequalFirst() { assertFalse(new ContentRange(1, 3).equals(new ContentRange(2, 3))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ThreadPoolExecutor newCachedThreadPool(int corePoolSize, int maximumPoolSize) { return new ThreadPoolExecutor(corePoolSize, maximumPoolSize, DateUtils.MILLISECONDS_PER_MINUTE, TimeUnit.MILLISECONDS, new SynchronousQueue<Runnable>()); }### Assistant: @Test public void newCachedThreadPool4() throws Exception { BlockingQueue<Runnable> queue = new SynchronousQueue<Runnable>(); RejectedExecutionHandler handler = new RejectedExecutionHandler() { @Override public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) { } }; ThreadFactory factory = new NamedThreadFactory(\"xxx\"); ThreadPoolExecutor executor = ThreadPoolUtils.newCachedThreadPool(10, 20, 45678, queue, factory, handler); Assert.assertEquals(executor.getCorePoolSize(), 10); Assert.assertEquals(executor.getMaximumPoolSize(), 20); Assert.assertEquals(executor.getQueue(), queue); Assert.assertEquals(executor.getKeepAliveTime(TimeUnit.MILLISECONDS), 45678); Assert.assertEquals(executor.getThreadFactory(), factory); Assert.assertEquals(executor.getRejectedExecutionHandler(), handler); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final void execute() throws MojoFailureException { WebsterPlan.Builder builder = new WebsterPlan.Builder(); builder.withArchiveRoot(websterArchiveRoot.getAbsoluteFile()); suppressOakLogging(System::setProperty); if (websterTargets == null || websterTargets.isEmpty()) { getLog().info(\"No websterTargets configuration found in plugin configuration. skipping webster execution.\"); return; } addTargets(builder, JsonTargetFactory::fromJsonHintMap); WebsterPlan.FixtureProvider fixtureProvider = getFixtureProvider(); if (fixtureProvider == null) { getLog().info(\"No source Oak repository provided. skipping webster execution.\"); return; } builder.withFixtureProvider(fixtureProvider); executeWebsterPlan(builder); }### Assistant: @Test public void testExecute_noTargets() throws Exception { final File testOutDir = new File(testOutBaseDir, \"testExecute_noTargets\"); FileUtils.deleteDirectory(testOutDir); final File projectRoot = new File(testOutDir, \"content-package\"); FileUtils.copyDirectory(new File(srcDir, \"content-package\"), projectRoot); WebsterMojo mojo = newMojo(); mojo.websterArchiveRoot = new File(projectRoot, \"src/main/resources\"); mojo.execute(); Optional<MockMojoLog.MockMojoLogEntry> logEntry = logFor(mojo).last(); assertTrue(\"log is not empty\", logEntry.isPresent()); assertTrue(\"log starts with 'No websterTargets\", logEntry.get().message.startsWith(\"No websterTargets\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public JsonQuery compile(String queryStr) { return new Parser(queryStr).parse(); }### Assistant: @Test public void testCompile_Query3() { assertThrows(Exception.class, () -> compiler.compile(\"$.store.boo k[*].author\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isValid(RectangularBox value, ConstraintValidatorContext context) { if (value != null) { return value.getBottom() >= 0 && value.getTop() >= 0 && value.getLeft() >= 0 && value.getRight() >= 0; } return true; }### Assistant: @Test public void testLeftNegative() { TestUtils.setProperty(box, \"left\", -1); assertFalse(victim.isValid(box, null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<ZTreeNode> tree() { List<Object[]> list = deptRepository.tree(); List<ZTreeNode> nodes = new ArrayList<>(); for(Object[] obj:list){ ZTreeNode node = transfer(obj); nodes.add(node); } return nodes; }### Assistant: @Test public void tree() throws Exception { System.out.println(JSON.toJSON(deptService.tree())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<String> generate(String input) { List<String> anagrams = new ArrayList<String>(); char[] inputChars = input.toCharArray(); for (int i = 0; i < total(input); i++) { int movePosition = i < input.length() ? i : 0; char move = inputChars[movePosition]; char replace = inputChars[1]; inputChars[movePosition] = replace; inputChars[1] = move; String output = String.valueOf(inputChars); anagrams.add(output); } return anagrams; }### Assistant: @Ignore @Test public void testFirstLetterOfBiroIsSwappedWithTheLast() throws Exception { String input = \"biro\"; List<String> output = Anagrams.generate(input); assertThat(output).contains(\"oirb\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> MutableTuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> create18() { return new MutableTuple18Impl<>(); }### Assistant: @Test void create18() { final MutableTuple18<Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> tuple = MutableTuples.create18(); test(tuple); final MutableTuple18<Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> defaultTuple = new MutableTuple18<Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer>() { private Integer t0; private Integer t1; private Integer t2; private Integer t3; private Integer t4; private Integer t5; private Integer t6; private Integer t7; private Integer t8; private Integer t9; private Integer t10; private Integer t11; private Integer t12; private Integer t13; private Integer t14; private Integer t15; private Integer t16; private Integer t17; @Override public Optional<Integer> get0() { return Optional.of(0); } @Override public void set0(Integer val) { t0 = val; } @Override public Optional<Integer> get1() { return Optional.of(1); } @Override public void set1(Integer val) { t1 = val; } @Override public Optional<Integer> get2() { return Optional.of(2); } @Override public void set2(Integer val) { t2 = val; } @Override public Optional<Integer> get3() { return Optional.of(3); } @Override public void set3(Integer val) { t3 = val; } @Override public Optional<Integer> get4() { return Optional.of(4); } @Override public void set4(Integer val) { t4 = val; } @Override public Optional<Integer> get5() { return Optional.of(5); } @Override public void set5(Integer val) { t5 = val; } @Override public Optional<Integer> get6() { return Optional.of(6); } @Override public void set6(Integer val) { t6 = val; } @Override public Optional<Integer> get7() { return Optional.of(7); } @Override public void set7(Integer val) { t7 = val; } @Override public Optional<Integer> get8() { return Optional.of(8); } @Override public void set8(Integer val) { t8 = val; } @Override public Optional<Integer> get9() { return Optional.of(9); } @Override public void set9(Integer val) { t9 = val; } @Override public Optional<Integer> get10() { return Optional.of(10); } @Override public void set10(Integer val) { t10 = val; } @Override public Optional<Integer> get11() { return Optional.of(11); } @Override public void set11(Integer val) { t11 = val; } @Override public Optional<Integer> get12() { return Optional.of(12); } @Override public void set12(Integer val) { t12 = val; } @Override public Optional<Integer> get13() { return Optional.of(13); } @Override public void set13(Integer val) { t13 = val; } @Override public Optional<Integer> get14() { return Optional.of(14); } @Override public void set14(Integer val) { t14 = val; } @Override public Optional<Integer> get15() { return Optional.of(15); } @Override public void set15(Integer val) { t15 = val; } @Override public Optional<Integer> get16() { return Optional.of(16); } @Override public void set16(Integer val) { t16 = val; } @Override public Optional<Integer> get17() { return Optional.of(17); } @Override public void set17(Integer val) { t17 = val; } }; test(defaultTuple); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Update(Repository repository) { super(repository); }### Assistant: @Test public void testFoo() throws Exception { Foo foo = repository.query(new Foo()).single(); repository.update(foo); assertEquals(1, repository.query(new Foo()).count()); assertEquals(0, repository.query(new Bar()).count()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure public static File normalizeWindowsNativeFilename(String filename) { final String fn = extractLocalPath(filename); if (fn != null && fn.length() > 0) { final Pattern pattern = Pattern.compile(WINDOW_NATIVE_FILENAME_PATTERN); final Matcher matcher = pattern.matcher(fn); if (matcher.find()) { return new File(fn.replace(WINDOWS_SEPARATOR_CHAR, File.separatorChar)); } } return null; }### Assistant: @Test public void normalizeWindowNativeFilename() { assertNormedFile(\"C:/a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"file:C:\\\\a\\\\b\\\\c.txt\")); assertNormedFile(\"C:/a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"file: assertNormedFile(\"C:a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"file:C:a\\\\b\\\\c.txt\")); assertNormedFile(\"C:a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"file: assertNormedFile(\"/a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"file:\\\\a\\\\b\\\\c.txt\")); assertNormedFile(\"/a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"file: assertNormedFile(\"a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"file:a\\\\b\\\\c.txt\")); assertNormedFile(\"a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"file: assertNormedFile(\" assertNormedFile(\" assertNormedFile(\"C:/a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"C:\\\\a\\\\b\\\\c.txt\")); assertNormedFile(\"C:a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"C:a\\\\b\\\\c.txt\")); assertNormedFile(\"C:a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"file: assertNormedFile(\"/a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"\\\\a\\\\b\\\\c.txt\")); assertNormedFile(\"a/b/c.txt\", FileSystem.normalizeWindowsNativeFilename(\"a\\\\b\\\\c.txt\")); assertNormedFile(\" assertNull(FileSystem.normalizeWindowsNativeFilename(\"file:C:/a/b/c.txt\")); assertNull(FileSystem.normalizeWindowsNativeFilename(\"file: assertNull(FileSystem.normalizeWindowsNativeFilename(\"file:C:a/b/c.txt\")); assertNull(FileSystem.normalizeWindowsNativeFilename(\"file: assertNull(FileSystem.normalizeWindowsNativeFilename(\"file:/a/b/c.txt\")); assertNull(FileSystem.normalizeWindowsNativeFilename(\"file: assertNull(FileSystem.normalizeWindowsNativeFilename(\"file:a/b/c.txt\")); assertNull(FileSystem.normalizeWindowsNativeFilename(\"file: assertNull(FileSystem.normalizeWindowsNativeFilename(\"file: assertNull(FileSystem.normalizeWindowsNativeFilename(\"file: assertNormedFile(\"C:c.txt\", FileSystem.normalizeWindowsNativeFilename(\"C:c.txt\")); assertNull(FileSystem.normalizeWindowsNativeFilename(\"c.txt\")); assertNormedFile(\"C:c.txt\", FileSystem.normalizeWindowsNativeFilename(\"file:C:c.txt\")); assertNull(FileSystem.normalizeWindowsNativeFilename(\"file:c.txt\")); assertNormedFile(\"C:c.txt\", FileSystem.normalizeWindowsNativeFilename(\"file: assertNull(FileSystem.normalizeWindowsNativeFilename(\"file: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getName() { return name; }### Assistant: @Test public void getName() { assertEquals(\"java\", cookbookConfiguration.getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void undoAll() { while (undo()) { } }### Assistant: @Test public void undoAll() { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean hasChanged(@Nullable final Object context) { return hasChanged; }### Assistant: @Test public void hasChanged() { final IDependencyObject<String> depOne = new StaticDependencyObject<>(\"Static\"); Assert.assertTrue(depOne.hasChanged(new DummyInjectionTarget())); Assert.assertEquals(\"Static\", depOne.get(new DummyInjectionTarget())); Assert.assertFalse(depOne.hasChanged(new DummyInjectionTarget())); depOne.set(new DummyInjectionTarget(), \"Changed\"); Assert.assertTrue(depOne.hasChanged(new DummyInjectionTarget())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Type resolveType(Field field) { B2Preconditions.checkArgument( field.getDeclaringClass().equals(this.clazz), \"cannot resolve fields from other classes\"); return resolveType(field.getGenericType()); }### Assistant: @Test public void testWildcardTypesNotSupported() { final B2TypeResolver resolverWithWildcards = new B2TypeResolver( EnclosingWithWildcards.class, new Type[]{String.class}); thrown.expect(RuntimeException.class); thrown.expectMessage(\"Wildcard types are not supported\"); resolverWithWildcards.resolveType(EnclosingWithWildcards.class.getDeclaredFields()[0]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String hankakuToZenkaku(String value) { if (value == null || \"\".equals(value)) { return value; } char[] chars = value.toCharArray(); StringBuilder returnValue = new StringBuilder(); String getValue = null; Character nextvalue = null; for (int i = 0; i < chars.length; i++) { getValue = getZenkakuMoji(chars[i]); if (getValue != null) { returnValue.append(getValue); } else if (i == (chars.length - 1)) { getValue = getZenkakuKasatahaMoji(chars[i]); if (getValue != null) { returnValue.append(getValue); } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff9c'))) { returnValue.append(\"\u30ef\"); } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff66'))) { returnValue.append(\"\u30f2\"); } else { returnValue.append(String.valueOf(chars[i])); } } else { nextvalue = Character.valueOf(chars[i + 1]); if (nextvalue.equals(Character.valueOf('\uff9e'))) { getValue = getZenkakuDakuMoji(chars[i]); if (getValue != null) { returnValue.append(getValue); i++; } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff9c'))) { returnValue.append(ZENKAKU_WA_DAKUTEN); i++; } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff66'))) { returnValue.append(ZENKAKU_WO_DAKUTEN); i++; } else { returnValue.append((String.valueOf(chars[i]) + \"\u309b\")); i++; } } else if (nextvalue.equals(Character.valueOf('\uff9f'))) { getValue = getZenkakuHandakuMoji(chars[i]); if (getValue != null) { returnValue.append(getValue); i++; } else { getValue = getZenkakuKasatahaMoji(chars[i]); if (getValue == null && (Character.valueOf('\uff9c')).equals(chars[i])) { returnValue.append(\"\u30ef\").append(\"\u309c\"); } else if ((Character.valueOf('\uff66')).equals(chars[i])) { returnValue.append(\"\u30f2\").append(\"\u309c\"); } else { returnValue.append(String.valueOf(getValue)).append(\"\u309c\"); } i++; } } else { getValue = getZenkakuKasatahaMoji(chars[i]); if (getValue != null) { returnValue.append(getValue); } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff9c'))) { returnValue.append(\"\u30ef\"); } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff66'))) { returnValue.append(\"\u30f2\"); } else { returnValue.append(String.valueOf(chars[i])); } } } } return returnValue.toString(); }### Assistant: @Test public void testHankakuToZenkaku18() throws Exception { String input = \"tB\uff66\"; String result = StringUtil.hankakuToZenkaku(input); assertEquals(\"\uff54\uff22\u30f2\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static long[] getNumbers(IAtomContainer atomContainer) throws CDKException { String aux = auxInfo(atomContainer); long[] numbers = new long[atomContainer.getAtomCount()]; parseAuxInfo(aux, numbers); return numbers; }### Assistant: @Test public void testGlycine() throws Exception { SmilesParser parser = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer atomContainer = parser.parseSmiles(\"C(C(=O)O)N\"); long[] numbers = InChINumbersTools.getNumbers(atomContainer); Assert.assertEquals(5, numbers.length); Assert.assertEquals(1, numbers[0]); Assert.assertEquals(2, numbers[1]); Assert.assertEquals(4, numbers[2]); Assert.assertEquals(5, numbers[3]); Assert.assertEquals(3, numbers[4]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Pair<byte[], byte[]> hashimotoLight(BlockHeader header, long nonce) { return hashimotoLight(header, longToBytes(nonce)); }### Assistant: @Test public void cacheTest() { EthashAlgo ethash = new EthashAlgo(); byte[] seed = \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\".getBytes(); long cacheSize = 1024; long fullSize = 1024 * 32; int[] cache = ethash.makeCache(cacheSize, seed); Assert.assertArrayEquals(intsToBytes(cache, false), Hex.decode(\"2da2b506f21070e1143d908e867962486d6b0a02e31d468fd5e3a7143aafa76a14201f63374314e2a6aaf84ad2eb57105dea3378378965a1b3873453bb2b78f9a8620b2ebeca41fbc773bb837b5e724d6eb2de570d99858df0d7d97067fb8103b21757873b735097b35d3bea8fd1c359a9e8a63c1540c76c9784cf8d975e995ca8620b2ebeca41fbc773bb837b5e724d6eb2de570d99858df0d7d97067fb8103b21757873b735097b35d3bea8fd1c359a9e8a63c1540c76c9784cf8d975e995ca8620b2ebeca41fbc773bb837b5e724d6eb2de570d99858df0d7d97067fb8103b21757873b735097b35d3bea8fd1c359a9e8a63c1540c76c9784cf8d975e995c259440b89fa3481c2c33171477c305c8e1e421f8d8f6d59585449d0034f3e421808d8da6bbd0b6378f567647cc6c4ba6c434592b198ad444e7284905b7c6adaf70bf43ec2daa7bd5e8951aa609ab472c124cf9eba3d38cff5091dc3f58409edcc386c743c3bd66f92408796ee1e82dd149eaefbf52b00ce33014a6eb3e50625413b072a58bc01da28262f42cbe4f87d4abc2bf287d15618405a1fe4e386fcdafbb171064bd99901d8f81dd6789396ce5e364ac944bbbd75a7827291c70b42d26385910cd53ca535ab29433dd5c5714d26e0dce95514c5ef866329c12e958097e84462197c2b32087849dab33e88b11da61d52f9dbc0b92cc61f742c07dbbf751c49d7678624ee60dfbe62e5e8c47a03d8247643f3d16ad8c8e663953bcda1f59d7e2d4a9bf0768e789432212621967a8f41121ad1df6ae1fa78782530695414c6213942865b2730375019105cae91a4c17a558d4b63059661d9f108362143107babe0b848de412e4da59168cce82bfbff3c99e022dd6ac1e559db991f2e3f7bb910cefd173e65ed00a8d5d416534e2c8416ff23977dbf3eb7180b75c71580d08ce95efeb9b0afe904ea12285a392aff0c8561ff79fca67f694a62b9e52377485c57cc3598d84cac0a9d27960de0cc31ff9bbfe455acaa62c8aa5d2cce96f345da9afe843d258a99c4eaf3650fc62efd81c7b81cd0d534d2d71eeda7a6e315d540b4473c80f8730037dc2ae3e47b986240cfc65ccc565f0d8cde0bc68a57e39a271dda57440b3598bee19f799611d25731a96b5dbbbefdff6f4f656161462633030d62560ea4e9c161cf78fc96a2ca5aaa32453a6c5dea206f766244e8c9d9a8dc61185ce37f1fc804459c5f07434f8ecb34141b8dcae7eae704c950b55556c5f40140c3714b45eddb02637513268778cbf937a33e4e33183685f9deb31ef54e90161e76d969587dd782eaa94e289420e7c2ee908517f5893a26fdb5873d68f92d118d4bcf98d7a4916794d6ab290045e30f9ea00ca547c584b8482b0331ba1539a0f2714fddc3a0b06b0cfbb6a607b8339c39bcfd6640b1f653e9d70ef6c985b\")); int[] bytes = ethash.calcDatasetItem(cache, 0); Assert.assertArrayEquals(intsToBytes(bytes, false), Hex.decode(\"b1698f829f90b35455804e5185d78f549fcb1bdce2bee006d4d7e68eb154b596be1427769eb1c3c3e93180c760af75f81d1023da6a0ffbe321c153a7c0103597\")); byte[] blockHash = \"~~~X~~~~~~~~~~~~~~~~~~~~~~~~~~~~\".getBytes(); long nonce = 0x7c7c597cL; Pair<byte[], byte[]> pair = ethash.hashimotoLight(fullSize, cache, blockHash, longToBytes(nonce)); Assert.assertArrayEquals(pair.getLeft(), Hex.decode(\"d7b668b90c2f26961d98d7dd244f5966368165edbce8cb8162dd282b6e5a8eae\")); Assert.assertArrayEquals(pair.getRight(), Hex.decode(\"b8cb1cb3ac1a7a6e12c4bc90f2779ef97e661f7957619e677636509d2f26055c\")); System.out.println(Hex.toHexString(pair.getLeft())); System.out.println(Hex.toHexString(pair.getRight())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean setIfCurrentlyNull(T newObject) { synchronized (lock_object) { T oldObject = currentObject; if (oldObject != null) { return false; } currentObject = newObject; return true; } }### Assistant: @Test public void setIfCurrentlyNullSetsCurrentObjectIfNull() { boolean expectedReturnValue = true; Whitebox.setInternalState(testSubject, \"currentObject\", (GenericTestObject) null); boolean actualReturnValue = testSubject.setIfCurrentlyNull(mockNewObject); Assert.assertEquals(expectedReturnValue, actualReturnValue); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResultSet<?> traverse(Collection<UUID> startingObjects, String query, TraverseParams traverseParams) throws OperationTimeoutException, InvalidArgumentException { if (CollectionUtils.isEmpty(startingObjects)) { return StreamingResultSet.builder().build(); } Collection<Object> result = executeTraversal(startingObjects, query, traverseParams); return StreamingResultSet.builder() .setCount(result.size()) .setValues(result) .build(); }### Assistant: @Test public void testTraverseGraphReturnProperties() throws Exception { ObjectRecord source = mockObjectRecord(mockObjectType(), \"someValue\"); ObjectRecord destination = mockObjectRecord(mockObjectType(), \"someOther\"); mockFact(source, destination); when(propertyHelper.getObjectProperties(eq(source), any())) .thenReturn(ListUtils.list( new PropertyEntry<>(\"name\", \"test\"), new PropertyEntry<>(\"value\", \"someValue\"))); ResultSet<?> resultSet = handler.traverse(set(source.getId()), \"g.properties()\", TraverseParams.builder().build()); Set<?> result = set(resultSet.iterator()); assertEquals(2, result.size()); assertEquals(set(\"vp[value->someValue]\", \"vp[name->test]\"), result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Optional<IRI> findFirstVersionIRI(Model model, IRI ontologyIRI, ValueFactory vf) { Optional<Value> optionalValue = Models.findFirstObject(model, ontologyIRI, vf.createIRI(OWL.VERSIONIRI.stringValue())); if (optionalValue.isPresent() && optionalValue.get() instanceof IRI) { return Optional.of((IRI) optionalValue.get()); } return Optional.empty(); }### Assistant: @Test public void findFirstVersionIRIMultipleTest() { Model model = mf.createModel(); model.add(ontologyIRI, type, ontologyObj); model.add(ontologyIRI, versionType, versionIRI); model.add(ontologyIRI, versionType, vf.createIRI(\"urn:versionIRI2\")); model.add(ontologyIRI, versionType, vf.createIRI(\"urn:versionIRI3\")); Optional<IRI> versionIRIOpt = OntologyModels.findFirstVersionIRI(model, ontologyIRI, vf); assertTrue(versionIRIOpt.isPresent()); assertTrue(versionIRIOpt.get().equals(versionIRI) || versionIRIOpt.get().equals(vf.createIRI(\"urn:versionIRI2\")) || versionIRIOpt.get().equals(vf.createIRI(\"urn:versionIRI3\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Specification<MetadataStatus> hasMetadataId(final int metadataId) { return new Specification<MetadataStatus>() { @Override public Predicate toPredicate(Root<MetadataStatus> root, CriteriaQuery<?> query, CriteriaBuilder cb) { Path<Integer> metadataIdAttributePath = root.get(MetadataStatus_.id).get(MetadataStatusId_.metadataId); Predicate idEqualPredicate = cb.equal(metadataIdAttributePath, cb.literal(metadataId)); return idEqualPredicate; } }; }### Assistant: @Test public void testHasMetadataId() throws Exception { MetadataStatus md1 = _repo.save(newMetadataStatus()); _repo.save(newMetadataStatus()); final List<MetadataStatus> found = _repo.findAll(hasMetadataId(md1.getId().getMetadataId())); assertEquals(1, found.size()); assertEquals(md1.getId(), found.get(0).getId()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CertRecordStore create(PrivateKeyStore keyStore) { rdsUser = System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_USER); rdsIamRole = System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_IAM_ROLE); rdsMaster = System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_MASTER_INSTANCE); rdsPort = Integer.parseInt(System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_MASTER_PORT, \"3306\")); final String rdsEngine = System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_ENGINE, \"mysql\"); final String rdsDatabase = System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_DATABASE, \"zts_store\"); final String jdbcStore = String.format(\"jdbc:%s: String rdsToken = getAuthToken(rdsMaster, rdsPort, rdsUser, rdsIamRole); if (LOGGER.isDebugEnabled()) { LOGGER.debug(\"Connecting to {} with auth token {}\", jdbcStore, rdsToken); } mysqlConnectionProperties.setProperty(ZTSConsts.DB_PROP_VERIFY_SERVER_CERT, System.getProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_VERIFY_SERVER_CERT, \"true\")); mysqlConnectionProperties.setProperty(ZTSConsts.DB_PROP_USE_SSL, System.getProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_USE_SSL, \"true\")); mysqlConnectionProperties.setProperty(ZTSConsts.DB_PROP_USER, rdsUser); mysqlConnectionProperties.setProperty(ZTSConsts.DB_PROP_PASSWORD, rdsToken); PoolableDataSource dataSource = DataSourceFactory.create(jdbcStore, mysqlConnectionProperties); long credsRefreshTime = Integer.parseInt(System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_CREDS_REFRESH_TIME, \"300\")); ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(1); scheduledThreadPool.scheduleAtFixedRate(new CredentialsUpdater(), credsRefreshTime, credsRefreshTime, TimeUnit.SECONDS); return new JDBCCertRecordStore(dataSource); }### Assistant: @Test public void testGetTokenException() { System.setProperty(ZTSConsts.ZTS_PROP_AWS_RDS_MASTER_INSTANCE, \"instance\"); System.setProperty(ZTSConsts.ZTS_PROP_AWS_RDS_USER, \"rds-user\"); System.setProperty(ZTSConsts.ZTS_PROP_AWS_RDS_IAM_ROLE, \"role\"); System.setProperty(ZTSConsts.ZTS_PROP_AWS_RDS_CREDS_REFRESH_TIME, \"1\"); AWSCertRecordStoreFactory factory = new TestAWSCertRecordStoreFactory2(); CertRecordStore store = factory.create(null); assertNotNull(store); ((TestAWSCertRecordStoreFactory2) factory).setThrowGetTokenExc(true); AWSCertRecordStoreFactory.CredentialsUpdater updater = factory.new CredentialsUpdater(); updater.run(); updater.run(); System.clearProperty(ZTSConsts.ZTS_PROP_AWS_RDS_MASTER_INSTANCE); System.clearProperty(ZTSConsts.ZTS_PROP_AWS_RDS_USER); System.clearProperty(ZTSConsts.ZTS_PROP_AWS_RDS_IAM_ROLE); System.clearProperty(ZTSConsts.ZTS_PROP_AWS_RDS_CREDS_REFRESH_TIME); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<String,byte[]> findScriptResourcesForAgent( String targetId ) throws IOException { Map<String,byte[]> result = new HashMap<>( 0 ); File targetDir = new File( findTargetDirectory( targetId ), Constants.PROJECT_SUB_DIR_SCRIPTS ); if( targetDir.isDirectory()){ List<String> exclusionPatterns = Arrays.asList( \"(?i).*\" + Pattern.quote( Constants.LOCAL_RESOURCE_PREFIX ) + \".*\" ); result.putAll( Utils.storeDirectoryResourcesAsBytes( targetDir, exclusionPatterns )); } return result; }### Assistant: @Test public void testFindScriptResourcesForAgent() throws Exception { Properties props = new Properties(); props.setProperty( \"id\", \"tid1\" ); props.setProperty( \"handler\", \"h\" ); File propsFile = this.folder.newFile( \"my-target.properties\" ); Utils.writePropertiesFile( props, propsFile ); TestApplication app = new TestApplication(); String targetId1 = this.mngr.createTarget( propsFile, app.getTemplate()); String targetId2 = this.mngr.createTarget( \"id: tid2\\nhandler: h\" ); File dir1 = new File( this.configurationMngr.getWorkingDirectory(), ConfigurationUtils.TARGETS + \"/\" + targetId1 + \"/\" + Constants.PROJECT_SUB_DIR_SCRIPTS ); File dir2 = new File( this.configurationMngr.getWorkingDirectory(), ConfigurationUtils.TARGETS + \"/\" + targetId2 + \"/\" + Constants.PROJECT_SUB_DIR_SCRIPTS ); Assert.assertTrue( new File( dir1, \"sub\" ).mkdirs()); Assert.assertTrue( new File( dir2, \"sub\" ).mkdirs()); Utils.writeStringInto( \"#!/bin/bash\\necho Bonjour le monde cruel > toto.txt\", new File( dir1, Constants.SCOPED_SCRIPT_AT_AGENT_SUFFIX + \"sh\" )); Utils.writeStringInto( \"#!/bin/bash\\necho Bonjour le monde cruel > toto.txt\", new File( dir1, \"sub/whatever.sh\" )); Utils.writeStringInto( \"#!/bin/bash\\necho Bonjour le monde cruel > toto.txt\", new File( dir1, \"sub/\" + Constants.LOCAL_RESOURCE_PREFIX + \"whatever.sh\" )); Utils.writeStringInto( \"#!/bin/bash\\necho Bonjour le monde cruel > toto.txt\", new File( dir1, \"some-properties-for-whatever.properties\" )); Utils.writeStringInto( \"#!/bin/bash\\necho Bonjour le monde cruel > toto.txt\", new File( dir1, \"sub/properties-for-whatever.properties\" )); Utils.writeStringInto( \"#!/bin/bash\\necho touch toto.txt\", new File( dir2, \"toto-script.py\" )); this.mngr.associateTargetWith( targetId1, app, null ); Map<String,byte[]> resources = this.mngr.findScriptResourcesForAgent( targetId1 ); Assert.assertEquals( 4, resources.size()); Assert.assertTrue( resources.containsKey( Constants.SCOPED_SCRIPT_AT_AGENT_SUFFIX + \"sh\" )); Assert.assertTrue( resources.containsKey( \"sub/whatever.sh\" )); Assert.assertTrue( resources.containsKey( \"some-properties-for-whatever.properties\" )); Assert.assertTrue( resources.containsKey( \"sub/properties-for-whatever.properties\" )); Map<String,byte[]> resourcesByInst = this.mngr.findScriptResourcesForAgent( app, app.getMySqlVm()); Assert.assertEquals( resources.keySet(), resourcesByInst.keySet()); this.mngr.associateTargetWith( targetId2, app, InstanceHelpers.computeInstancePath( app.getMySqlVm())); resources = this.mngr.findScriptResourcesForAgent( targetId1 ); Assert.assertEquals( 4, resources.size()); Assert.assertTrue( resources.containsKey( Constants.SCOPED_SCRIPT_AT_AGENT_SUFFIX + \"sh\" )); Assert.assertTrue( resources.containsKey( \"sub/whatever.sh\" )); Assert.assertTrue( resources.containsKey( \"some-properties-for-whatever.properties\" )); Assert.assertTrue( resources.containsKey( \"sub/properties-for-whatever.properties\" )); resourcesByInst = this.mngr.findScriptResourcesForAgent( app, app.getMySqlVm()); Assert.assertEquals( 1, resourcesByInst.size()); Assert.assertTrue( resourcesByInst.containsKey( \"toto-script.py\" )); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String[] parameterNamesFor(AccessibleObject method) { try { String[] parameterNames = info.lookupParameterNames(method); if (logger.isDebugEnabled()) { logger.debug(\"Found parameter names with paranamer for {} as {}\", Stringnifier.simpleNameFor(method), Arrays.toString(parameterNames)); } String[] defensiveCopy = new String[parameterNames.length]; System.arraycopy(parameterNames, 0, defensiveCopy, 0, parameterNames.length); return defensiveCopy; } catch (ParameterNamesNotFoundException e) { throw new IllegalStateException(\"Paranamer were not able to find your parameter names for \" + method + \"You must compile your code with debug information (javac -g) or register another \" + \"name provider. Try to use \" + DefaultParameterNameProvider.class.getName() + \" instead.\"); } }### Assistant: @Test public void shouldNameArrayAsItsSimpleTypeName() throws SecurityException, NoSuchMethodException { assertThat(provider.parameterNamesFor(Horse.class.getMethod(\"setLeg\", int[].class))[0], is(equalTo(\"length\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull @Override public final R addFiles(@Nullable final List<String> paths) { if (paths != null) { for (final String path : paths) { addFile(path); } } return (R) this; }### Assistant: @Test public void addFilesWithSeq() { final AbstractKyloCatalogDataSetAccess access = Mockito.spy(AbstractKyloCatalogDataSetAccess.class); access.addFiles(Seq$.MODULE$.newBuilder().$plus$eq(\"path1\").$plus$eq(\"path2\").result()); Mockito.verify(access).addFile(\"path1\"); Mockito.verify(access).addFile(\"path2\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean orgUnitFieldIsValid() { if ( orgUnitField == null ) { return true; } if ( program != null ) { return validateProgramHasOrgUnitField( program ); } if ( !itemProgramIndicators.isEmpty() ) { return !itemProgramIndicators.stream().anyMatch( pi -> !validateProgramHasOrgUnitField( pi.getProgram() ) ); } return false; }### Assistant: @Test public void testIsOrgUnitFieldValid() { QueryItem iA = new QueryItem( createDataElement( 'A', new CategoryCombo() ) ); EventQueryParams params = new EventQueryParams.Builder() .withProgram( prA ) .withOrgUnitField( deD.getUid() ) .addItem( iA ).build(); assertTrue( params.orgUnitFieldIsValid() ); params = new EventQueryParams.Builder() .withProgram( prA ) .withOrgUnitField( \"someInvalidOrgUnitField\" ) .addItem( iA ).build(); assertFalse( params.orgUnitFieldIsValid() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Map<String, Object> buildHttpRequestContext(HttpServletRequest req) { Map<String, Object> result = new TreeMap<>(); StringBuilder uriBuilder = new StringBuilder(req.getServletPath()); if (req.getPathInfo() != null) { uriBuilder.append(req.getPathInfo()); } if (req.getQueryString() != null) { uriBuilder.append('?').append(req.getQueryString()); } result.put(\"relativeURI\", uriBuilder.toString()); result.put(\"method\", req.getMethod()); Enumeration<String> headerIt = req.getHeaderNames(); while (headerIt.hasMoreElements()) { String header = headerIt.nextElement(); result.put(header, req.getHeader(header)); } return result; }### Assistant: @Test public void testBuildOfHttpRequest() { HttpServletRequest httpRequest = mock(HttpServletRequest.class); when(httpRequest.getServletPath()).thenReturn(\"/servletPath\"); when(httpRequest.getPathInfo()).thenReturn(\"/pathInfo\"); when(httpRequest.getHeaderNames()).thenReturn(enumerationOf(\"Content-Type\")); Map<String, Object> mappedRequest = ErrorResponses.buildHttpRequestContext(httpRequest); assertThat(mappedRequest.get(\"relativeURI\"), is(equalTo(\"/servletPath/pathInfo\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean isPossible(String word) { boolean possible; int prefixLength = 1; do { possible = possiblePrefixes(word.substring(0, prefixLength)); prefixLength++; } while (possible && prefixLength <= word.length()); return possible; }### Assistant: @Test public void testAPossible() throws Exception { assertTrue(spelling.isPossible(\"a\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ObjectMapper createStandardObjectMapper() { return createStandardObjectMapper(null); }### Assistant: @Test public void createStandardObjectMapper_disableJacksonAnnotations() throws Exception { System.setProperty(EndpointsFlag.JSON_USE_JACKSON_ANNOTATIONS.systemPropertyName, \"false\"); try { ObjectMapper mapper = ObjectMapperUtil.createStandardObjectMapper(); assertThat(mapper.writeValueAsString(new TestObject())).contains(\"TEST\"); } finally { System.clearProperty(EndpointsFlag.JSON_USE_JACKSON_ANNOTATIONS.systemPropertyName); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public <T> T get(String... key) { List<String> keys = ((key == null) ? new ArrayList<String>() : Arrays.asList(key)) .stream() .flatMap( k -> Arrays.stream( k == null ? new String[] {null} : StringUtils.split(k, Cake.SEPARATOR))) .collect(Collectors.toList()); if (keys.isEmpty()) { throw new IllegalArgumentException(\"cannot get value for empty key\"); } keys.forEach(Cake::validateKey); String fullKey = StringUtils.join(keys, Cake.SEPARATOR); String searchKey = getPrefixWithSeparator(prefixStack) + fullKey; if (entries.containsKey(searchKey)) { return (T) entries.get(searchKey); } LinkedList<String> namespaces = new LinkedList<>(prefixStack); while (!namespaces.isEmpty()) { namespaces.removeLast(); searchKey = getPrefixWithSeparator(namespaces) + fullKey; if (entries.containsKey(searchKey)) { return (T) entries.get(searchKey); } } List<String> candidates = entries.keySet().stream() .filter( k -> { String[] subkeys = StringUtils.split(k, SEPARATOR); if (keys.size() > subkeys.length) { return false; } for (int i = 0; i < keys.size(); i++) { if (!keys.get(keys.size() - 1 - i).equals(subkeys[subkeys.length - 1 - i])) { return false; } } return true; }) .collect(Collectors.toList()); if (candidates.size() == 1) { return (T) entries.get(candidates.get(0)); } else if (candidates.isEmpty()) { throw new RuntimeException( \"cake does not contain key '\" + fullKey + \"; current keys: \" + this.entries.keySet()); } else { throw new RuntimeException( \"cannot retrieve ambiguous key '\" + fullKey + \"'; candidates: \" + candidates); } }### Assistant: @Test(expected = RuntimeException.class) public void testGet_throwsOnMissingKey() { cake.get(\"foo\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FDConnection create(final String flowId, final String processGroupId, final VersionedConnection requestComponentConfig) { final ConnectableComponent sourceConnectable = requestComponentConfig.getSource(); final ConnectableComponent destConnectable = requestComponentConfig.getDestination(); if (sourceConnectable == null || destConnectable == null) { throw new IllegalArgumentException(\"Both source and destination must be specified\"); } if (sourceConnectable.getId() == null || destConnectable.getId() == null) { throw new IllegalArgumentException(\"Both source and destination ids must be specified\"); } if (sourceConnectable.getType() == null || destConnectable.getType() == null) { throw new IllegalArgumentException(\"Both source and destination types must be specified\"); } if (sourceConnectable.getType() == ConnectableComponentType.FUNNEL && destConnectable.getType() == ConnectableComponentType.FUNNEL && sourceConnectable.getId().equals(destConnectable.getId())) { throw new IllegalArgumentException(\"A funnel cannot be connected to itself\"); } if (sourceConnectable.getGroupId() == null) { sourceConnectable.setGroupId(processGroupId); } if (destConnectable.getGroupId() == null) { destConnectable.setGroupId(processGroupId); } if (sourceConnectable.getType() == ConnectableComponentType.PROCESSOR) { if (requestComponentConfig.getSelectedRelationships() == null || requestComponentConfig.getSelectedRelationships().isEmpty()) { throw new IllegalArgumentException(\"Selected relationships must be specified\"); } } validateRequestConfig(requestComponentConfig); final FDFlow currentFlow = getFlowOrNotFound(flowId); final VersionedProcessGroup flowContent = currentFlow.getFlowContent(); final VersionedProcessGroup connectionGroup = ComponentUtils.getProcessGroupOrNotFound(processGroupId, flowContent); final String sourceId = sourceConnectable.getId(); final String sourceGroupId = sourceConnectable.getGroupId(); final String destId = destConnectable.getId(); final String destGroupId = destConnectable.getGroupId(); VersionedRemoteProcessGroup sourceRemoteProcessGroup = null; VersionedRemoteGroupPort newRemoteOutputPort = null; if (sourceConnectable.getType() == ConnectableComponentType.REMOTE_OUTPUT_PORT) { try { UUID.fromString(sourceId); } catch (Exception e) { throw new IllegalArgumentException(\"The ID of a remote output port must be a UUID\"); } sourceRemoteProcessGroup = connectionGroup.getRemoteProcessGroups().stream() .filter(rpg -> rpg.getIdentifier().equals(sourceGroupId)) .findFirst() .orElseThrow(() -> new IllegalArgumentException(\"Unable to find the specified remote process group for connection source\")); final Optional<VersionedRemoteGroupPort> remoteGroupPort = sourceRemoteProcessGroup.getOutputPorts().stream() .filter(p -> p.getTargetId().equals(sourceId)).findFirst(); if (!remoteGroupPort.isPresent()) { newRemoteOutputPort = new VersionedRemoteGroupPort(); newRemoteOutputPort.setIdentifier(UUID.randomUUID().toString()); newRemoteOutputPort.setGroupIdentifier(connectionGroup.getIdentifier()); newRemoteOutputPort.setRemoteGroupId(sourceRemoteProcessGroup.getIdentifier()); newRemoteOutputPort.setTargetId(sourceId); newRemoteOutputPort.setName(sourceId); newRemoteOutputPort.setComponentType(ComponentType.REMOTE_OUTPUT_PORT); } sourceConnectable.setName(sourceId); } else { final VersionedProcessGroup sourceGroup = ComponentUtils.getProcessGroupOrIllegalArgument(sourceGroupId, flowContent); final boolean sourceGroupContainsSource = containsConnectable(sourceGroup, sourceConnectable); if (!sourceGroupContainsSource) { throw new IllegalStateException(\"Cannot add connection because the source component was not found in the source group\"); } if (!processGroupId.equals(sourceGroupId)) { if (sourceConnectable.getType() != ConnectableComponentType.OUTPUT_PORT) { throw new IllegalStateException(\"Cannot add connection between \" + sourceId + \" and \" + destId + \" because they are in different process groups and the source is not an output port\"); } boolean connectionGroupContainsSourceGroup = containsChildGroup(connectionGroup, sourceGroupId); if (!connectionGroupContainsSourceGroup) { throw new IllegalStateException(\"Cannot add connection between \" + sourceId + \" and \" + destId + \" because the source group is not a child group of the connection group\"); } } } VersionedRemoteProcessGroup destRemoteProcessGroup = null; VersionedRemoteGroupPort newRemoteInputPort = null; if (destConnectable.getType() == ConnectableComponentType.REMOTE_INPUT_PORT) { try { UUID.fromString(destId); } catch (Exception e) { throw new IllegalArgumentException(\"The ID of a remote input port must be a UUID\"); } destRemoteProcessGroup = connectionGroup.getRemoteProcessGroups().stream() .filter(rpg -> rpg.getIdentifier().equals(destGroupId)) .findFirst() .orElseThrow(() -> new IllegalArgumentException(\"Unable to find the specified remote process group for connection destination\")); final Optional<VersionedRemoteGroupPort> remoteGroupPort = destRemoteProcessGroup.getInputPorts().stream() .filter(p -> p.getTargetId().equals(destId)).findFirst(); if (!remoteGroupPort.isPresent()) { newRemoteInputPort = new VersionedRemoteGroupPort(); newRemoteInputPort.setIdentifier(UUID.randomUUID().toString()); newRemoteInputPort.setGroupIdentifier(connectionGroup.getIdentifier()); newRemoteInputPort.setRemoteGroupId(destRemoteProcessGroup.getIdentifier()); newRemoteInputPort.setTargetId(destId); newRemoteInputPort.setName(destId); newRemoteInputPort.setComponentType(ComponentType.REMOTE_INPUT_PORT); } destConnectable.setName(destId); } else { final VersionedProcessGroup destGroup = ComponentUtils.getProcessGroupOrIllegalArgument(destGroupId, flowContent); final boolean destGroupContainsSource = containsConnectable(destGroup, destConnectable); if (!destGroupContainsSource) { throw new IllegalStateException(\"Cannot add connection because the destination component was not found in the destination group\"); } if (!processGroupId.equals(destGroupId)) { if (destConnectable.getType() != ConnectableComponentType.INPUT_PORT) { throw new IllegalStateException(\"Cannot add connection between \" + sourceId + \" and \" + destId + \" because they are in different process groups and the destination is not an input port\"); } boolean connectionGroupContainsDestGroup = containsChildGroup(connectionGroup, destGroupId); if (!connectionGroupContainsDestGroup) { throw new IllegalStateException(\"Cannot add connection between \" + sourceId + \" and \" + destId + \" because the destination group is not a child group of the connection group\"); } } } if (newRemoteOutputPort != null) { sourceRemoteProcessGroup.getOutputPorts().add(newRemoteOutputPort); } if (newRemoteInputPort != null) { destRemoteProcessGroup.getInputPorts().add(newRemoteInputPort); } final FDConnection created = createComponent( currentFlow, connectionGroup, null, requestComponentConfig, () -> { final VersionedConnection connectionConfig = new VersionedConnection(); connectionConfig.setSource(sourceConnectable); connectionConfig.setDestination(destConnectable); connectionConfig.setSelectedRelationships(new HashSet<>()); connectionConfig.setName(\"\"); connectionConfig.setBends(new ArrayList<>()); connectionConfig.setPrioritizers(new ArrayList<>()); connectionConfig.setzIndex(new Long(0)); connectionConfig.setLabelIndex(new Integer(1)); connectionConfig.setBackPressureDataSizeThreshold(DEFAULT_BACK_PRESSURE_DATA_SIZE_THRESHOLD); connectionConfig.setBackPressureObjectThreshold(DEFAULT_BACK_PRESSURE_OBJECT_SIZE_THRESHOLD); connectionConfig.setFlowFileExpiration(DEFAULT_FLOW_FILE_EXPIRATION); final FDConnection connection = new FDConnection(); connection.setComponentConfiguration(connectionConfig); return connection; }, VersionedProcessGroup::getConnections, null); getValidationService().clearValidationErrors(sourceConnectable.getId()); getValidationService().clearValidationErrors(destConnectable.getId()); return created; }### Assistant: @Test(expected = ResourceNotFoundException.class) public void testCreateConnectionSameGroupConnectionGroupNotFound() { final String flowId = flow.getFlowMetadata().getIdentifier(); final String groupId = \"DOES-NOT-EXIST\"; when(flowManager.getFlow(flowId)).thenReturn(Optional.empty()); connectionService.create(flowId, groupId, connectionConfig); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static TransformStamped fromMessage(Message m) { return TransformStamped.fromJsonObject(m.toJsonObject()); }### Assistant: @Test public void testFromMessage() { Message m = new Message(t1.toString()); TransformStamped p = TransformStamped.fromMessage(m); assertEquals(t1.toString(), p.toString()); assertEquals(t1.toJsonObject(), p.toJsonObject()); assertEquals(t1.getMessageType(), p.getMessageType()); assertEquals(t1.getHeader(), p.getHeader()); assertEquals(t1.getChildFrameID(), p.getChildFrameID()); assertEquals(t1.getTransform(), p.getTransform()); assertNotSame(t1, p); assertNotSame(t1.toString(), p.toString()); assertNotSame(t1.toJsonObject(), p.toJsonObject()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <V> void expire(String key, int ttl) { try { _jedisClusterClient.expire(key, ttl); } catch (Exception ex) { _logger.error(\"Exception in cache service: {} \", ex.getMessage()); } }### Assistant: @Test public void testExpireKeySet() { JedisCluster mockJedisClient = mock(JedisCluster.class); CacheRedisClient mockedCachedRedisClient = mock(CacheRedisClient.class); when(mockedCachedRedisClient.getJedisClusterClient()).thenReturn(mockJedisClient); RedisCacheService redisCacheService = new RedisCacheService(config, mockedCachedRedisClient); Set<String> keys = new HashSet<>(Arrays.asList(\"key1\", \"key2\")); redisCacheService.expire(keys, 10); verify(mockJedisClient, times(2)).expire(anyString(), anyInt()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Alert getAlert(BigInteger alertId) throws IOException, TokenExpiredException { String requestUrl = RESOURCE + \"/\" + alertId.toString(); ArgusResponse response = getClient().executeHttpRequest(ArgusHttpClient.RequestType.GET, requestUrl, null); assertValidResponse(response, requestUrl); return fromJson(response.getResult(), Alert.class); }### Assistant: @Test public void testGetAlert() throws IOException, TokenExpiredException { try(ArgusService argusService = new ArgusService(getMockedClient(\"/AlertServiceTest.json\"))) { AlertService alertService = argusService.getAlertService(); Alert result = alertService.getAlert(BigInteger.ONE); Alert expected = _constructPersistedAlert(); assertEquals(expected, result); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Observable<List<UserEntity>> listFollowers(String userName, int page) { return userApi.listFollowers(userName, page) .compose(RxJavaUtils.<List<UserEntity>>applySchedulers()); }### Assistant: @Test public void listFollowers() throws Exception { TestSubscriber<List<UserEntity>> subscriber = TestSubscriber.create(); userDataSource.listFollowers(\"TellH\", 1).subscribe(subscriber); List<List<UserEntity>> onNextEvents = subscriber.getOnNextEvents(); assertNotNull(onNextEvents); System.out.println(onNextEvents.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Expr getChild(int index) { if (index == 0) { return expr; } throw new IndexOutOfBoundsException(\"Index for UnaryExpr must be 0\"); }### Assistant: @Test(expected = IndexOutOfBoundsException.class) public void getChildBad() throws Exception { expr.getChild(1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void tick() { itsTime++; for (IStopWatchListener listener : itsListeners) listener.onTimeChange(itsTime); }### Assistant: @Test public void testTick() { int time = itsStopWatch.getTime(); itsStopWatch.tick(); assertEquals(time + 1, itsStopWatch.getTime()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Optional<ScenarioGridWidget> getSelectedScenarioGridWidget() { if (backgroundGridWidget.isSelected() && simulationGridWidget.isSelected()) { throw new IllegalStateException(\"Simulation and Background grids can not be selected at the same time\"); } if (!backgroundGridWidget.isSelected() && !simulationGridWidget.isSelected()) { return Optional.empty(); } return backgroundGridWidget.isSelected() ? Optional.of(backgroundGridWidget) : Optional.of(simulationGridWidget); }### Assistant: @Test(expected = IllegalStateException.class) public void getSelectedScenarioGridWidgetFail() { when(backgroundGridWidgetSpy.isSelected()).thenReturn(true); when(scenarioGridWidgetSpy.isSelected()).thenReturn(true); scenarioSimulationContextLocal.getSelectedScenarioGridWidget(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public org.modeshape.jcr.api.query.Query createQuery( String statement, String language ) throws InvalidQueryException, RepositoryException { CheckArg.isNotNull(statement, \"statement\"); CheckArg.isNotNull(language, \"language\"); return createQuery(statement, language, null, null); }### Assistant: @Test public void shouldBeAbleToQueryWithTooLargeOffsetOnNonJoin() throws RepositoryException { String sql = \"SELECT [jcr:path] FROM [car:Car] OFFSET 100\"; Query query = session.getWorkspace().getQueryManager().createQuery(sql, Query.JCR_SQL2); QueryResult result = query.execute(); validateQuery().rowCount(0).hasColumns(\"jcr:path\").validate(query, result); sql = \"SELECT [jcr:path] FROM [car:Car]\"; query = session.getWorkspace().getQueryManager().createQuery(sql, Query.JCR_SQL2); query.setOffset(100); result = query.execute(); validateQuery().rowCount(0).hasColumns(\"jcr:path\").validate(query, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void animateChecked(boolean isChecked) { if (this.isChecked != isChecked) { this.isChecked = isChecked; doAnimation(); } }### Assistant: @Test public void testAnimateCheckedNoAnimation() throws Exception { mPopCheckBox.animateChecked(false); verify(mMockAnimatorCheckBox, never()).start(); verify(mMockAnimatorCheckBoxFill, never()).start(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<byte[]> hMGet(byte[] key, byte[]... fields) { return helper.doInScope(RedisCommand.HMGET, key, () -> connection.hMGet(key, fields)); }### Assistant: @Test public void invokingHMGetCreatesNewSpan() { commandCreatesNewSpan(RedisCommand.HMGET, () -> getConnection().hMGet(\"key\".getBytes(), \"field\".getBytes())); verify(mockRedisConnection()).hMGet(\"key\".getBytes(), \"field\".getBytes()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Status process() throws EventDeliveryException { Status status = null; Iterator<Sink> sinkIterator = selector.createSinkIterator(); while (sinkIterator.hasNext()) { Sink sink = sinkIterator.next(); try { status = sink.process(); break; } catch (Exception ex) { selector.informSinkFailed(sink); LOGGER.warn(\"Sink failed to consume event. \" + \"Attempting next sink if available.\", ex); } } if (status == null) { throw new EventDeliveryException(\"All configured sinks have failed\"); } return status; }### Assistant: @Test public void testDefaultConfiguration() throws Exception { Channel ch = new MockChannel(); int n = 100; int numEvents = 3 * n; for (int i = 0; i < numEvents; i++) { ch.put(new MockEvent(\"test\" + i)); } MockSink s1 = new MockSink(1); s1.setChannel(ch); MockSink s2 = new MockSink(2); s2.setChannel(ch); MockSink s3 = new MockSink(3); s3.setChannel(ch); List<Sink> sinks = new ArrayList<Sink>(); sinks.add(s1); sinks.add(s2); sinks.add(s3); LoadBalancingSinkProcessor lbsp = getProcessor(sinks, new Context()); Status s = Status.READY; while (s != Status.BACKOFF) { s = lbsp.process(); } Assert.assertTrue(s1.getEvents().size() == n); Assert.assertTrue(s2.getEvents().size() == n); Assert.assertTrue(s3.getEvents().size() == n); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void updateRequest(final BrowserMobHttpRequest browserMobHttpRequest, final WilmaHttpRequest wilmaRequest) { Map<String, HttpHeaderChange> headerChangeMap = wilmaRequest.getHeaderChanges(); if (headerChangeMap != null && !headerChangeMap.isEmpty()) { for (Map.Entry<String, HttpHeaderChange> headerChangeEntry : headerChangeMap.entrySet()) { String headerKey = headerChangeEntry.getKey(); HttpHeaderChange headerChange = headerChangeEntry.getValue(); Header header = browserMobHttpRequest.getMethod().getFirstHeader(headerKey); if (headerChange instanceof HttpHeaderToBeUpdated) { if (header != null) { ((HttpHeaderToBeUpdated) headerChange).setOriginalValue(header.getValue()); } browserMobHttpRequest.getMethod().addHeader(headerKey, ((HttpHeaderToBeUpdated) headerChange).getNewValue()); headerChange.setApplied(); } else { if (header != null) { browserMobHttpRequest.getMethod().removeHeader(header); headerChange.setApplied(); } } } } byte[] newBody = wilmaRequest.getNewBody(); if (newBody != null) { if (browserMobHttpRequest.getMethod() instanceof HttpEntityEnclosingRequestBase) { HttpEntityEnclosingRequestBase enclosingRequest = (HttpEntityEnclosingRequestBase) browserMobHttpRequest.getMethod(); enclosingRequest.setEntity(new ByteArrayEntity(wilmaRequest.getNewBody())); } } browserMobHttpRequest.setResponseVolatile(wilmaRequest.isResponseVolatile()); browserMobHttpRequest.getMethod().setURI(wilmaRequest.getUri()); }### Assistant: @Test public void testUpdateRequestShouldUpdateHeadersRemovePart() throws URISyntaxException { URI uri = new URI(\"MOCK\"); given(browserMobHttpRequest.getMethod()).willReturn(requestBase); given(requestBase.getFirstHeader(\"A\")).willReturn(header); given(header.getName()).willReturn(\"A\"); given(header.getValue()).willReturn(\"B\"); given(wilmaHttpRequest.getUri()).willReturn(uri); String mockID = \"WILMA-LOG-MOCK-ID\"; Map<String, HttpHeaderChange> headerChanges = new HashMap<>(); HttpHeaderToBeRemoved headerToBeRemoved = new HttpHeaderToBeRemoved(); headerChanges.put(\"A\", headerToBeRemoved); given(wilmaHttpRequest.getHeaderChanges()).willReturn(headerChanges); given(wilmaHttpRequest.getWilmaMessageId()).willReturn(mockID); underTest.updateRequest(browserMobHttpRequest, wilmaHttpRequest); verify(requestBase).removeHeader(header); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public static <M, E> MobiusLoop.Builder<M, E, ?> beginnerLoop(final BiFunction<M, E, M> update) { return loop( new Update<M, E, Object>() { @Nonnull @Override public Next<M, Object> update(M model, E event) { return Next.next(update.apply(model, event)); } }, (Connectable<Object, E>) NOOP_CONNECTABLE); }### Assistant: @Test public void shouldInstantiateBeginnerWithMinimumParams() throws Exception { MobiusLoop<String, Integer, ?> loop = MobiusExtras.beginnerLoop(BEGINNER_UPDATE).startFrom(MY_MODEL); loop.dispatchEvent(8); await().atMost(Duration.ofSeconds(1)).until(loop::getMostRecentModel, is(\"start8\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int numBufferedStreams() { return pendingStreams.size(); }### Assistant: @Test public void receivingGoAwayFailsBufferedStreams() { encoder.writeSettingsAck(ctx, newPromise()); setMaxConcurrentStreams(5); int streamId = 3; List<ChannelFuture> futures = new ArrayList<ChannelFuture>(); for (int i = 0; i < 9; i++) { futures.add(encoderWriteHeaders(streamId, newPromise())); streamId += 2; } assertEquals(4, encoder.numBufferedStreams()); connection.goAwayReceived(11, 8, EMPTY_BUFFER); assertEquals(5, connection.numActiveStreams()); int failCount = 0; for (ChannelFuture f : futures) { if (f.cause() != null) { failCount++; } } assertEquals(9, failCount); assertEquals(0, encoder.numBufferedStreams()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<AclEntry> replaceAclEntries(List<AclEntry> existingAcl, List<AclEntry> inAclSpec) throws AclException { ValidatedAclSpec aclSpec = new ValidatedAclSpec(inAclSpec); ArrayList<AclEntry> aclBuilder = Lists.newArrayListWithCapacity(MAX_ENTRIES); EnumMap<AclEntryScope, AclEntry> providedMask = Maps.newEnumMap(AclEntryScope.class); EnumSet<AclEntryScope> maskDirty = EnumSet.noneOf(AclEntryScope.class); EnumSet<AclEntryScope> scopeDirty = EnumSet.noneOf(AclEntryScope.class); for (AclEntry aclSpecEntry: aclSpec) { scopeDirty.add(aclSpecEntry.getScope()); if (aclSpecEntry.getType() == MASK) { providedMask.put(aclSpecEntry.getScope(), aclSpecEntry); maskDirty.add(aclSpecEntry.getScope()); } else { aclBuilder.add(aclSpecEntry); } } for (AclEntry existingEntry: existingAcl) { if (!scopeDirty.contains(existingEntry.getScope())) { if (existingEntry.getType() == MASK) { providedMask.put(existingEntry.getScope(), existingEntry); } else { aclBuilder.add(existingEntry); } } } copyDefaultsIfNeeded(aclBuilder); calculateMasks(aclBuilder, providedMask, maskDirty, scopeDirty); return buildAndValidateAcl(aclBuilder); }### Assistant: @Test(expected=AclException.class) public void testReplaceAclEntriesMissingGroup() throws AclException { List<AclEntry> existing = new ImmutableList.Builder<AclEntry>() .add(aclEntry(ACCESS, USER, ALL)) .add(aclEntry(ACCESS, GROUP, READ)) .add(aclEntry(ACCESS, OTHER, NONE)) .build(); List<AclEntry> aclSpec = Lists.newArrayList( aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, \"bruce\", READ_WRITE), aclEntry(ACCESS, GROUP, \"sales\", ALL), aclEntry(ACCESS, MASK, ALL), aclEntry(ACCESS, OTHER, NONE)); replaceAclEntries(existing, aclSpec); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String escapeJavaScript(String string) { if (string == null) { return null; } StringBuilder sb = new StringBuilder(); for (int i = 0, s = string.length(); i < s; ++ i) { char c = string.charAt(i); if (0x30 <= c && c <= 0x39 || 0x41 <= c && c <= 0x5A || 0x61 <= c && c <= 0x7A) { sb.append(c); } else { String hex = Integer.toHexString(c); int hexLen = hex.length(); if (c < 256) { sb.append(\"\\\\x\").append(\"00\".substring(hexLen)); } else { sb.append(\"\\\\u\").append(\"0000\".substring(hexLen)); } sb.append(hex); } } return sb.toString(); }### Assistant: @Test public void escapeJavaScript_dquote() { assertEquals(\"abc\\\\x22def\", StringUtils.escapeJavaScript(\"abc\\\"def\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void executeDDLUpdates() throws AmbariException, SQLException { dbAccessor.alterColumn(HOST_ROLE_COMMAND_TABLE, new DBColumnInfo(HOST_ID_COL, Long.class, null, null, true)); dbAccessor.addColumn(USERS_TABLE, new DBColumnInfo(USER_TYPE_COL, String.class, null, \"LOCAL\", true)); dbAccessor.executeQuery(\"UPDATE users SET user_type='LDAP' WHERE ldap_user=1\"); dbAccessor.addUniqueConstraint(USERS_TABLE, \"UNQ_users_0\", \"user_name\", \"user_type\"); updateAdminPermissionTable(); createRoleAuthorizationTables(); }### Assistant: @Test public void testExecuteDDLUpdates() throws Exception { final DBAccessor dbAccessor = injector.getInstance(DBAccessor.class); Configuration configuration = createNiceMock(Configuration.class); expect(configuration.getDatabaseUrl()).andReturn(Configuration.JDBC_IN_MEMORY_URL).anyTimes(); Capture<DBAccessor.DBColumnInfo> columnCapture = EasyMock.newCapture(); Capture<DBAccessor.DBColumnInfo> columnCaptureUserType = EasyMock.newCapture(); Capture<DBAccessor.DBColumnInfo> columnCapturePermissionLabel = EasyMock.newCapture(); Capture<List<DBAccessor.DBColumnInfo>> columnsCaptureRoleAuthorization = EasyMock.newCapture(); Capture<List<DBAccessor.DBColumnInfo>> columnsCapturePermissionRoleAuthorization = EasyMock.newCapture(); dbAccessor.alterColumn(eq(\"host_role_command\"), capture(columnCapture)); expectLastCall(); dbAccessor.executeQuery(\"UPDATE users SET user_type='LDAP' WHERE ldap_user=1\"); expectLastCall(); dbAccessor.addUniqueConstraint(\"users\", \"UNQ_users_0\", \"user_name\", \"user_type\"); expectLastCall(); dbAccessor.addColumn(eq(\"users\"), capture(columnCaptureUserType)); expectLastCall(); dbAccessor.addColumn(eq(\"adminpermission\"), capture(columnCapturePermissionLabel)); expectLastCall(); dbAccessor.createTable(eq(\"roleauthorization\"), capture(columnsCaptureRoleAuthorization), eq(\"authorization_id\")); expectLastCall(); dbAccessor.createTable(eq(\"permission_roleauthorization\"), capture(columnsCapturePermissionRoleAuthorization), eq(\"permission_id\"), eq(\"authorization_id\")); expectLastCall(); dbAccessor.addFKConstraint(\"permission_roleauthorization\", \"FK_permission_roleauth_pid\", \"permission_id\", \"adminpermission\", \"permission_id\", false); expectLastCall(); dbAccessor.addFKConstraint(\"permission_roleauthorization\", \"FK_permission_roleauth_aid\", \"authorization_id\", \"roleauthorization\", \"authorization_id\", false); expectLastCall(); replayAll(); AbstractUpgradeCatalog upgradeCatalog = injector.getInstance(UpgradeCatalog230.class); Class<?> c = AbstractUpgradeCatalog.class; Field f = c.getDeclaredField(\"configuration\"); f.setAccessible(true); f.set(upgradeCatalog, configuration); upgradeCatalog.executeDDLUpdates(); verifyAll(); assertTrue(columnCapture.getValue().isNullable()); assertEquals(columnCaptureUserType.getValue().getName(), \"user_type\"); assertEquals(columnCaptureUserType.getValue().getType(), String.class); assertEquals(columnCaptureUserType.getValue().getLength(), null); assertEquals(columnCaptureUserType.getValue().getDefaultValue(), \"LOCAL\"); assertEquals(columnCaptureUserType.getValue().isNullable(), true); assertEquals(columnCapturePermissionLabel.getValue().getName(), \"permission_label\"); assertEquals(columnCapturePermissionLabel.getValue().getType(), String.class); assertEquals(columnCapturePermissionLabel.getValue().getLength(), Integer.valueOf(255)); assertEquals(columnCapturePermissionLabel.getValue().isNullable(), true); List<DBAccessor.DBColumnInfo> columnInfos; DBAccessor.DBColumnInfo columnInfo; columnInfos = columnsCaptureRoleAuthorization.getValue(); assertEquals(2, columnInfos.size()); columnInfo = columnInfos.get(0); assertEquals(\"authorization_id\", columnInfo.getName()); assertEquals(String.class, columnInfo.getType()); assertEquals(Integer.valueOf(100), columnInfo.getLength()); columnInfo = columnInfos.get(1); assertEquals(\"authorization_name\", columnInfo.getName()); assertEquals(String.class, columnInfo.getType()); assertEquals(Integer.valueOf(255), columnInfo.getLength()); columnInfos = columnsCapturePermissionRoleAuthorization.getValue(); assertEquals(2, columnInfos.size()); columnInfo = columnInfos.get(0); assertEquals(\"permission_id\", columnInfo.getName()); assertEquals(Long.class, columnInfo.getType()); assertEquals(null, columnInfo.getLength()); columnInfo = columnInfos.get(1); assertEquals(\"authorization_id\", columnInfo.getName()); assertEquals(String.class, columnInfo.getType()); assertEquals(Integer.valueOf(100), columnInfo.getLength()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void fatal(String message) { log(Level.FATAL, NO_THROWABLE, message); }### Assistant: @Test void testFatal6() { instance.fatal(FORMATTING_MESSAGE4, MESSAGE, MESSAGE2, MESSAGE3, MESSAGE4); assertTrue(output.contains(FORMATTING_MESSAGE_PREFIX + \"|\" + MESSAGE + \"|\" + MESSAGE2 + \"|\" + MESSAGE3 + \"|\" + MESSAGE4)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Collection<Alarm> getAllAlarms() { return seyrenRepository.getAllAlarms().getValues(); }### Assistant: @Test public void getAllAlarms() throws Exception { Collection<Alarm> allAlarms = alarmService.getAllAlarms(); assertEquals(allAlarms.size(), 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DescribeFeatureType parse( Map<String, String> kvpParams ) throws MissingParameterException, InvalidParameterValueException { Version version = Version.parseVersion( KVPUtils.getRequired( kvpParams, \"VERSION\" ) ); DescribeFeatureType result = null; if ( VERSION_100.equals( version ) ) { result = parse100( kvpParams ); } else if ( VERSION_110.equals( version ) ) { result = parse110( kvpParams ); } else if ( VERSION_200.equals( version ) ) { result = parse200( kvpParams ); } else { String msg = Messages.get( \"UNSUPPORTED_VERSION\", version, Version.getVersionsString( VERSION_100, VERSION_110, VERSION_200 ) ); throw new InvalidParameterValueException( msg ); } return result; }### Assistant: @Test public void test200Example1() throws IOException { Map<String, String> kvpParams = readFileIntoMap( this.getClass().getResource( \"wfs200/example1.kvp\" ) ); DescribeFeatureType dft = parse( kvpParams ); assertEquals( VERSION_200, dft.getVersion() ); assertEquals( null, dft.getHandle() ); assertEquals( null, dft.getOutputFormat() ); assertEquals( 1, dft.getTypeNames().length ); assertEquals( valueOf( \"{http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public IMapEntry getMapEntry(int index) { ensureNotClosed(); Preconditions.checkArgument(index >= 0, \"index (%s) must be equal to or greater than 0\", index); Preconditions.checkArgument(!isEmpty(), \"Can't get map entry since the map is empty\"); return new MMFMapEntryImpl(index, this.indexMappedByteBuffer, this.dataMappedByteBuffer); }### Assistant: @Test public void testEmtpy() throws IOException, ClassNotFoundException { long createdTime = System.nanoTime(); mapTable = new MMFMapTable(testDir, 1, createdTime, 1000, 4); assertTrue(mapTable.getLevel() == 1); assertTrue(mapTable.getCreatedTime() == createdTime); assertTrue(mapTable.getAppendedSize() == 0); assertTrue(mapTable.isEmpty()); assertFalse(mapTable.isUsable()); try { @SuppressWarnings(\"unused\") GetResult result = mapTable.get(\"empty\".getBytes()); fail(); } catch (IllegalArgumentException iae) { } try { mapTable.getMapEntry(-1); fail(); } catch (IllegalArgumentException iae) { } try { mapTable.getMapEntry(0); fail(); } catch (IllegalArgumentException iae) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void init() throws ServerException { if (status != Status.UNDEF) { throw new IllegalStateException(\"Server already initialized\"); } status = Status.BOOTING; verifyDir(homeDir); verifyDir(tempDir); Properties serverInfo = new Properties(); try { InputStream is = getResource(name + \".properties\"); serverInfo.load(is); is.close(); } catch (IOException ex) { throw new RuntimeException(\"Could not load server information file: \" + name + \".properties\"); } initLog(); log.info(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++\"); log.info(\"Server [{}] starting\", name); log.info(\" Built information:\"); log.info(\" Version : {}\", serverInfo.getProperty(name + \".version\", \"undef\")); log.info(\" Source Repository : {}\", serverInfo.getProperty(name + \".source.repository\", \"undef\")); log.info(\" Source Revision : {}\", serverInfo.getProperty(name + \".source.revision\", \"undef\")); log.info(\" Built by : {}\", serverInfo.getProperty(name + \".build.username\", \"undef\")); log.info(\" Built timestamp : {}\", serverInfo.getProperty(name + \".build.timestamp\", \"undef\")); log.info(\" Runtime information:\"); log.info(\" Home dir: {}\", homeDir); log.info(\" Config dir: {}\", (config == null) ? configDir : \"-\"); log.info(\" Log dir: {}\", logDir); log.info(\" Temp dir: {}\", tempDir); initConfig(); log.debug(\"Loading services\"); List<Service> list = loadServices(); try { log.debug(\"Initializing services\"); initServices(list); log.info(\"Services initialized\"); } catch (ServerException ex) { log.error(\"Services initialization failure, destroying initialized services\"); destroyServices(); throw ex; } Status status = Status.valueOf(getConfig().get(getPrefixedName(CONF_STARTUP_STATUS), Status.NORMAL.toString())); setStatus(status); log.info(\"Server [{}] started!, status [{}]\", name, status); }### Assistant: @Test @TestException(exception = ServerException.class, msgRegExp = \"S05.*\") @TestDir public void siteFileNotAFile() throws Exception { String homeDir = TestDirHelper.getTestDir().getAbsolutePath(); File siteFile = new File(homeDir, \"server-site.xml\"); assertTrue(siteFile.mkdir()); Server server = new Server(\"server\", homeDir, homeDir, homeDir, homeDir); server.init(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void applyPatch( RandomAccessFile oldData, OutputStream newData, InputStream patchData) throws PatchFormatException, IOException { patchData = new BufferedInputStream(patchData, PATCH_STREAM_BUFFER_SIZE); newData = new BufferedOutputStream(newData, OUTPUT_STREAM_BUFFER_SIZE); try { applyPatchInternal(oldData, newData, patchData); } finally { newData.flush(); } }### Assistant: @Test public void testApplyPatch_TruncatedSignature() throws Exception { createEmptyOldFile(10); InputStream patchIn = new ByteArrayInputStream(\"X\".getBytes(\"US-ASCII\")); ByteArrayOutputStream newData = new ByteArrayOutputStream(); try { BsPatch.applyPatch(new RandomAccessFile(oldFile, \"r\"), newData, patchIn); Assert.fail(\"Read patch with truncated signature\"); } catch (PatchFormatException expected) { String actual = expected.getMessage(); Assert.assertEquals(\"truncated signature\", actual); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public RepositoryDelegate createRepositoryDelegate( String url, Properties info, JcrContextFactory contextFactory ) throws SQLException { if (!acceptUrl(url)) { throw new SQLException(JdbcLocalI18n.invalidUrlPrefix.text(LocalJcrDriver.JNDI_URL_PREFIX)); } return create(determineProtocol(url), url, info, contextFactory); }### Assistant: @Test( expected = SQLException.class ) public void shouldNotSupportCreatingInvalidURL() throws SQLException { factory().createRepositoryDelegate(INVALID_URL, new Properties(), null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Map<String, String>> pipelinePossibleStates(NegativeBoundHiveDecimalTag action, List<Map<String, String>> possibleStateList) { return returnStates(action, possibleStateList, setParameters(action, false)); }### Assistant: @Test public void minLenAndmaxLenTest() { Map<String, String> variableDomains = new HashMap<>(); List<Map<String, String>> listOfMaps = new LinkedList<>(); listOfMaps.add(variableDomains); NegativeBoundHiveDecimal maxLenTest = new NegativeBoundHiveDecimal(); NegativeBoundHiveDecimal.NegativeBoundHiveDecimalTag tag = new NegativeBoundHiveDecimal.NegativeBoundHiveDecimalTag(); tag.setName(\"name\"); tag.setMinLen(\"5\"); tag.setMaxLen(\"9\"); List<Map<String, String>> newList = maxLenTest.pipelinePossibleStates(tag, listOfMaps); Assert.assertEquals(newList.get(0).get(\"name\").length(), 4); Assert.assertEquals(newList.get(1).get(\"name\").length(), 10); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Vector3 lerp(final ReadOnlyVector3 endVec, final double scalar, final Vector3 store) { Vector3 result = store; if (result == null) { result = new Vector3(); } final double x = (1.0 - scalar) * getX() + scalar * endVec.getX(); final double y = (1.0 - scalar) * getY() + scalar * endVec.getY(); final double z = (1.0 - scalar) * getZ() + scalar * endVec.getZ(); return result.set(x, y, z); }### Assistant: @Test public void testLerp() { final Vector3 vec1 = new Vector3(8, 3, -2); final Vector3 vec2 = new Vector3(2, 1, 0); assertEquals(new Vector3(5, 2, -1), vec1.lerp(vec2, 0.5, null)); assertEquals(new Vector3(5, 2, -1), vec1.lerp(vec2, 0.5, new Vector3())); assertEquals(new Vector3(5, 2, -1), Vector3.lerp(vec1, vec2, 0.5, null)); assertEquals(new Vector3(5, 2, -1), Vector3.lerp(vec1, vec2, 0.5, new Vector3())); vec1.set(14, 5, 4); vec1.lerpLocal(vec2, 0.25); assertEquals(new Vector3(11, 4, 3), vec1); vec1.set(15, 7, 6); final Vector3 vec3 = new Vector3(-1, -1, -1); vec3.lerpLocal(vec1, vec2, 0.5); assertEquals(new Vector3(8.5, 4.0, 3.0), vec3); assertEquals(vec1.lerp(vec1, .25, null), vec1); assertEquals(vec2.lerpLocal(vec2, .25), vec2); assertEquals(vec2.lerpLocal(vec2, vec2, .25), vec2); assertEquals(Vector3.lerp(vec1, vec1, .25, null), vec1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ViewType public int getSortedConfigItemType(int position) { @ViewType int result = VIEW_TYPE_NORMAL_ITEM; if (sortedConfigurationItems != null) { if (position == sortedConfigurationItems.indexOf(selectedConfigItem)) { result = VIEW_TYPE_SELECTED_ITEM; } if (sortedConfigurationItems.get(position).isLastEntryItem()) { result |= VIEW_TYPE_REMOVABLE_ITEM; } } return result; }### Assistant: @Test public void testGetSortedConfigItemTypeWhenSortedConfigurationItemsIsNull() throws Exception { int viewType = model.getSortedConfigItemType(0); assertEquals(FillTheFormDialogModel.VIEW_TYPE_NORMAL_ITEM, viewType); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ColumnTemplateAsync get(ColumnFamilyManagerAsync columnFamilyManager) { Objects.requireNonNull(columnFamilyManager, \"columnFamilyManager is required\"); return new ProducerColumnTemplateAsync(converter, columnFamilyManager, classMappings, converters); }### Assistant: @Test public void shouldReturn() { ColumnFamilyManagerAsync manager = Mockito.mock(ColumnFamilyManagerAsync.class); ColumnTemplateAsync columnRepository = producer.get(manager); assertNotNull(columnRepository); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getColumnManagementGroupTitle(final BaseColumn column) { String managementSectionHeader = null; if (column instanceof ActionInsertFactCol52) { managementSectionHeader = concatenateFactTypeAndBoundName(((ActionInsertFactCol52) column).getFactType(), ((ActionInsertFactCol52) column).getBoundName()); } else if (column instanceof ActionSetFieldCol52) { managementSectionHeader = concatenateFactTypeAndBoundName(null, ((ActionSetFieldCol52) column).getBoundName()); } else if (column instanceof Pattern52) { managementSectionHeader = concatenateFactTypeAndBoundName(((Pattern52) column).getFactType(), ((Pattern52) column).getBoundName()); if (((Pattern52) column).isNegated()) { managementSectionHeader = GuidedDecisionTableConstants.INSTANCE.negatedPattern() + \" \" + managementSectionHeader; } } else if (column instanceof ActionRetractFactCol52) { managementSectionHeader = GuidedDecisionTableConstants.INSTANCE.RetractActions(); } else if (column instanceof ActionWorkItemCol52) { managementSectionHeader = GuidedDecisionTableConstants.INSTANCE.ExecuteWorkItemActions(); } else if (column instanceof BRLActionColumn) { managementSectionHeader = GuidedDecisionTableConstants.INSTANCE.BrlActions(); } else if (column instanceof BRLConditionColumn) { managementSectionHeader = GuidedDecisionTableConstants.INSTANCE.BrlConditions(); } if (managementSectionHeader == null || managementSectionHeader.isEmpty()) { return column.getHeader(); } else { return managementSectionHeader; } }### Assistant: @Test public void testColumnManagementGroupTitlePatternEmpty() throws Exception { final Pattern52 column = mock(Pattern52.class); doReturn(COLUMN_HEADER).when(column).getHeader(); assertEquals(COLUMN_HEADER, DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String queryLivestatus( String nagiosQuery ) throws UnknownHostException, IOException { Socket liveStatusSocket = null; try { this.logger.fine( \"About to open a connection through Live Status...\" ); liveStatusSocket = new Socket( this.host, this.port ); this.logger.fine( \"A connection was established through Live Status.\" ); Writer osw = new OutputStreamWriter( liveStatusSocket.getOutputStream(), StandardCharsets.UTF_8 ); PrintWriter printer = new PrintWriter( osw, false ); printer.print( nagiosQuery ); printer.flush(); liveStatusSocket.shutdownOutput(); ByteArrayOutputStream os = new ByteArrayOutputStream(); Utils.copyStreamSafely( liveStatusSocket.getInputStream(), os ); String result = os.toString( \"UTF-8\" ); result = format( nagiosQuery, result ); return result; } finally { if( liveStatusSocket != null ) liveStatusSocket.close(); this.logger.fine( \"The Live Status connection was closed.\" ); } }### Assistant: @Test( expected = IOException.class ) public void testFailedConnection() throws Exception { LiveStatusClient client = new LiveStatusClient( null, -45 ); client.queryLivestatus( \"whatever\" ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public File getProcessedFile() throws IOException { _pluginDir = autoDeploy(); if ((_pluginDir == null) || !_pluginDir.exists() || !_pluginDir.isDirectory()) { return null; } File outputFile = null; try (Jar jar = new Jar(_pluginDir)) { if (jar.getBsn() == null) { outputFile = transformToOSGiBundle(jar); } } catch (Exception exception) { ReflectionUtil.throwException(exception); } if (PropsValues.MODULE_FRAMEWORK_WEB_GENERATOR_GENERATED_WABS_STORE) { writeGeneratedWab(outputFile); } return outputFile; }### Assistant: @Test public void testThatEmbeddedLibsAreHandledProperly() throws Exception { WabProcessor wabProcessor = new TestWabProcessor( getFile(\"/tck-V3URLTests.wab.war\"), Collections.singletonMap( \"Web-ContextPath\", new String[] {\"/portlet-V3-annotated-demo\"})); File processedFile = wabProcessor.getProcessedFile(); Assert.assertNotNull(processedFile); try (Jar jar = new Jar(processedFile)) { Assert.assertEquals(\"portlet-V3-annotated-demo\", jar.getBsn()); Assert.assertEquals(\"1.0.0\", jar.getVersion()); Resource beansXMLFile = jar.getResource(\"WEB-INF/beans.xml\"); Assert.assertNotNull(beansXMLFile); try (InputStream inputStream = beansXMLFile.openInputStream()) { Document document = SAXReaderUtil.read(inputStream); Node beanDiscoveryMode = document.selectSingleNode( \"/beans/@bean-discovery-mode\"); String value = beanDiscoveryMode.getStringValue(); Assert.assertNotEquals(\"none\", value); } Domain domain = Domain.domain(jar.getManifest()); Parameters requirements = domain.getRequireCapability(); Map.Entry<String, Attrs> entry = findRequirement( requirements, \"osgi.extender\", HashMapBuilder.<String, Object>put( \"osgi.extender\", \"osgi.cdi\" ).put( \"version\", new Version(1) ).build()); Assert.assertNotNull(entry); Attrs attrs = entry.getValue(); List<String> beans = attrs.getTyped(Attrs.LIST_STRING, \"beans\"); Assert.assertEquals(beans.toString(), 5, beans.size()); List<String> expectedList = Arrays.asList( \"javax.portlet.tck.portlets.URLTests_ActionURL\", \"javax.portlet.tck.portlets.URLTests_BaseURL\", \"javax.portlet.tck.portlets.URLTests_RenderURL\", \"javax.portlet.tck.portlets.URLTests_ResourceURL\", \"javax.portlet.tck.util.ModuleTestCaseDetails\"); Assert.assertEquals(expectedList.toString(), expectedList, beans); Assert.assertNotNull( findRequirement( requirements, \"osgi.cdi.extension\", Collections.singletonMap( \"osgi.cdi.extension\", \"com.liferay.bean.portlet.cdi.extension\"))); Assert.assertNotNull( findRequirement( requirements, \"osgi.cdi.extension\", Collections.singletonMap( \"osgi.cdi.extension\", \"aries.cdi.http\"))); Assert.assertNotNull( findRequirement( requirements, \"osgi.cdi.extension\", Collections.singletonMap( \"osgi.cdi.extension\", \"aries.cdi.el.jsp\"))); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> TreeSet<T> newTreeSet() { return new TreeSet<T>(); }### Assistant: @Test void testNewTreeSetComparatorOfT() { val set = _Sets.newTreeSet(Integer::compare); assertEquals(TreeSet.class, set.getClass()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isNullRuntimeException(final Object cObj, final String name) { boolean rtn = false; rtn = cObj == null; if (rtn) { throw new RuntimeException(name + \" cannot be null!\"); } return rtn; }### Assistant: @Test public void isNullRuntimeException_NotNull_ShouldReturnFalse() { Boolean b = Utils.isNullRuntimeException(\"bar\", \"foo\"); assert (b.equals(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public short removeLast() { size--; return data[size]; }### Assistant: @Test public void testRemoveLast() { list.add((short)5); list.add((short)8); list.add((short)3); assertEquals(3, list.removeLast()); assertEquals(2, list.size()); assertEquals(5, list.get(0)); assertEquals(8, list.get(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DataLength of(byte... values) { return new DataLength(values); }### Assistant: @Test public void testToString() { assertThat(DataLength.of(\"1\").toString(), containsString(\"longValue=1,\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<Type> decode( String rawInput, List<TypeReference<Type>> outputParameters) { String input = Numeric.cleanHexPrefix(rawInput); if (input.isEmpty()) { return Collections.emptyList(); } else { return build(input, outputParameters); } }### Assistant: @Test public void testMultipleResultFunctionDecode() { Function function = new Function( \"test\", Collections.<Type>emptyList(), Arrays.<TypeReference<?>>asList( new TypeReference<Uint>() { }, new TypeReference<Uint>() { }) ); assertThat(FunctionReturnDecoder.decode( \"0x0000000000000000000000000000000000000000000000000000000000000037\" + \"0000000000000000000000000000000000000000000000000000000000000007\", function.getOutputParameters()), IsEqual.<List>equalTo(Arrays.asList(new Uint(BigInteger.valueOf(55)), new Uint(BigInteger.valueOf(7))))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public static ColorRGB8 toColorRGB(@Nonnull final String colorCSS) throws IllegalArgumentException { assert colorCSS != null; final String value = colorCSS.trim().toUpperCase(); if (value.length() < COLOR_MIN_LENGTH) { throw new IllegalArgumentException(\"Expected format: #RRGGBB\"); } if (value.charAt(0) != '#') { throw new IllegalArgumentException(\"Should start with '#'\"); } if (value.length() > COLOR_MAX_LENGTH) { throw new IllegalArgumentException( \"Length should be [\" + COLOR_MIN_LENGTH + \"src/main\" + COLOR_MAX_LENGTH + ']'); } int total = 0; int factor = 1; int i = value.length() - 1; while (i >= 1) { final char ch = value.charAt(i); final int val = Character.digit(ch, 16); if (val < 0) { throw new IllegalArgumentException(\"Unrecognized hex digit: \" + ch); } total = total + (val * factor); factor = factor * 16; --i; } return new ColorRGB8(total); }### Assistant: @Test public void testToColorRGB() { LOG.info(\"testToColorRGB\"); final ColorRGB8 c1 = new ColorRGB8(1, 2, 3); Assert.assertEquals(c1, ColorConverter.toColorRGB(\"#010203\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static JsonValue newValue(final boolean value) { return value ? ImmutableJsonBoolean.TRUE : ImmutableJsonBoolean.FALSE; }### Assistant: @Test public void newValueFromDoubleReturnsExpected() { final double doubleValue = 23.7D; final JsonValue underTest = JsonFactory.newValue(doubleValue); assertThat(underTest).isNumber(); assertThat(underTest.asDouble()).isEqualTo(doubleValue); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Table create(JdbcIndex<?> index) { Table table = getTableFactory().create(index); if (exists(index)) { throw new TableExistsException(\"Table for index \" + index.getName() + \" exists\"); } String sql = String.format(\"CREATE TABLE `%s` ( %s );\", table.getName(), new TableElementCompiler(table).toSql()); LOG.info(\"Creating table for Index {}. SQL is: {}\", index.getName(), sql); jdbc().execute(sql); registry.put(index, table); return table; }### Assistant: @Test(expected = TableExistsException.class) public void create_afterCreate_throwsException() throws Exception { try { engine.create(testIndex); } catch (TableExistsException e) { fail(\"TableExistsException thrown on the wrong call\"); } engine.create(testIndex); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static KiePMMLDroolsAST getKiePMMLDroolsAST(final DataDictionary dataDictionary, final Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLDroolsType> types) { logger.trace(\"getKiePMMLDroolsAST {}\", model); return KiePMMLScorecardModelASTFactory.getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap, types); }### Assistant: @Test public void getKiePMMLDroolsAST() { final DataDictionary dataDictionary = pmml.getDataDictionary(); final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = getFieldTypeMap(pmml.getDataDictionary(), pmml.getTransformationDictionary(), scorecardModel.getLocalTransformations()); KiePMMLDroolsAST retrieved = KiePMMLScorecardModelFactory.getKiePMMLDroolsAST(dataDictionary, scorecardModel, fieldTypeMap, Collections.emptyList()); assertNotNull(retrieved); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Node chooseRandomWithStorageType(final String scope, final Collection<Node> excludedNodes, StorageType type) { netlock.readLock().lock(); try { if (scope.startsWith(\"~\")) { return chooseRandomWithStorageType( NodeBase.ROOT, scope.substring(1), excludedNodes, type); } else { return chooseRandomWithStorageType( scope, null, excludedNodes, type); } } finally { netlock.readLock().unlock(); } }### Assistant: @Test public void testChooseRandomWithStorageType() throws Exception { Node n; DatanodeDescriptor dd; Set<String> diskUnderL1 = Sets.newHashSet(\"host2\", \"host4\", \"host5\", \"host6\"); Set<String> archiveUnderL1 = Sets.newHashSet(\"host1\", \"host3\"); Set<String> ramdiskUnderL1 = Sets.newHashSet(\"host7\"); Set<String> ssdUnderL1 = Sets.newHashSet(\"host8\"); Set<String> nvdimmUnderL1 = Sets.newHashSet(\"host9\"); for (int i = 0; i < 10; i++) { n = CLUSTER.chooseRandomWithStorageType(\"/l1\", null, null, StorageType.DISK); assertTrue(n instanceof DatanodeDescriptor); dd = (DatanodeDescriptor) n; assertTrue(diskUnderL1.contains(dd.getHostName())); n = CLUSTER.chooseRandomWithStorageType(\"/l1\", null, null, StorageType.RAM_DISK); assertTrue(n instanceof DatanodeDescriptor); dd = (DatanodeDescriptor) n; assertTrue(ramdiskUnderL1.contains(dd.getHostName())); n = CLUSTER.chooseRandomWithStorageType(\"/l1\", null, null, StorageType.ARCHIVE); assertTrue(n instanceof DatanodeDescriptor); dd = (DatanodeDescriptor) n; assertTrue(archiveUnderL1.contains(dd.getHostName())); n = CLUSTER.chooseRandomWithStorageType(\"/l1\", null, null, StorageType.SSD); assertTrue(n instanceof DatanodeDescriptor); dd = (DatanodeDescriptor) n; assertTrue(ssdUnderL1.contains(dd.getHostName())); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ObjectValue toObjectValue(){ return this; }### Assistant: @Test public void toObjectValue() { ObjectValue ov = PropertyValue.createObject(\"foo\"); ov.addList(\"list\"); ObjectValue ov2 = ov.toObjectValue(); assertThat(ov == ov2).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void appendUnsignedString(final StringBuilder sb, final long nr, final int shift) { long i = nr; char[] buf = BUFF.get(); int charPos = 64; int radix = 1 << shift; long mask = radix - 1; do { buf[--charPos] = DIGITS[(int) (i & mask)]; i >>>= shift; } while (i != 0); sb.append(buf, charPos, 64 - charPos); }### Assistant: @Test public void testAppendable() { StringBuilder sb = new StringBuilder(); AppendableUtils.appendUnsignedString(sb, 13, 5); Assert.assertEquals(13, Integer.parseUnsignedInt(sb.toString(), 32)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String[] split(String str) { return split(str, null, -1); }### Assistant: @Test void testSplit() { String byteRangeSet = \"500-\"; String[] byteRangeSets = StringUtils.split(byteRangeSet, ','); System.out.println(Arrays.toString(byteRangeSets)); assertEquals(byteRangeSets.length, 1); byteRangeSet = \"500-,\"; byteRangeSets = StringUtils.split(byteRangeSet, ','); System.out.println(Arrays.toString(byteRangeSets)); assertEquals(byteRangeSets.length, 1); byteRangeSet = \",500-,\"; byteRangeSets = StringUtils.split(byteRangeSet, ','); System.out.println(Arrays.toString(byteRangeSets)); assertEquals(byteRangeSets.length, 1); byteRangeSet = \",500-,\"; byteRangeSets = StringUtils.split(byteRangeSet, \",\"); System.out.println(Arrays.toString(byteRangeSets)); assertEquals(byteRangeSets.length, 1); byteRangeSet = \",500-\"; byteRangeSets = StringUtils.split(byteRangeSet, ','); System.out.println(Arrays.toString(byteRangeSets)); assertEquals(byteRangeSets.length, 1); byteRangeSet = \"500-700,601-999,\"; byteRangeSets = StringUtils.split(byteRangeSet, ','); assertEquals(byteRangeSets.length, 2); byteRangeSet = \"500-700,,601-999,\"; byteRangeSets = StringUtils.split(byteRangeSet, ','); assertEquals(byteRangeSets.length, 2); String tmp = \"hello#$world#%test#$eee\"; String[] tmps = StringUtils.splitByWholeSeparator(tmp, \"#$\"); System.out.println(Arrays.toString(tmps)); assertEquals(tmps.length, 3); tmp = \"hello#$\"; tmps = StringUtils.splitByWholeSeparator(tmp, \"#$\"); System.out.println(Arrays.toString(tmps)); assertEquals(tmps.length, 1); tmp = \"#$hello#$\"; tmps = StringUtils.splitByWholeSeparator(tmp, \"#$\"); System.out.println(Arrays.toString(tmps)); assertEquals(tmps.length, 1); tmp = \"#$hello\"; tmps = StringUtils.splitByWholeSeparator(tmp, \"#$\"); System.out.println(Arrays.toString(tmps)); assertEquals(tmps.length, 1); tmp = \"#$hello#$world#$\"; tmps = StringUtils.splitByWholeSeparator(tmp, \"#$\"); System.out.println(Arrays.toString(tmps)); assertEquals(tmps.length, 2); tmp = \"#$hello#$#$world#$\"; tmps = StringUtils.splitByWholeSeparator(tmp, \"#$\"); System.out.println(Arrays.toString(tmps)); assertEquals(tmps.length, 2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ToggleSwitchEditor refreshAlways() { return refreshAlways; }### Assistant: @Test public void testRefreshAlways() { assertEquals(refreshAlways, presenter.refreshAlways()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String calculateId(String name) { if (name==null){ return \"\"; } String id = REGEXP.matcher(name).replaceAll(\"_\"); id= \"_\"+id.toLowerCase(); while(id.length()>1 && id.endsWith(\"_\")){ id=id.substring(0,id.length()-1); } while(id.indexOf(\"__\")!=-1){ id=id.replaceAll(\"__\", \"_\"); } return id; }### Assistant: @Test public void calculateId_more_complex_scenarios() { assertEquals(\"_alpha_centauri_is_coool\",AsciiDoctorHeadline.calculateId(\"Alpha centauri is!!!!coool!!!\")); assertEquals(\"_alpha_centauri_is_coool\",AsciiDoctorHeadline.calculateId(\"Alpha centauri is!!-----!coool!!!\")); assertEquals(\"_alpha_centauri_is_coool\",AsciiDoctorHeadline.calculateId(\"Alpha centauri is-coool!!!\")); assertEquals(\"_alpha_centauri_is_coool\",AsciiDoctorHeadline.calculateId(\"Alpha centauri is coool...\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isFormReady() { return incidentFormService.isReady(); }### Assistant: @Test public void should_return_true_when_incident_form_is_ready() throws Exception { when(incidentFormService.isReady()).thenReturn(true); assertThat(\"Should return true\", incidentPresenter.isFormReady(), is(true)); verify(incidentFormService, times(1)).isReady(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static BTreeV1Group createGroupBTree(HdfFileChannel hdfFc, long address) { ByteBuffer header = readHeaderAndValidateSignature(hdfFc, address); final byte nodeType = header.get(); if (nodeType != 0) { throw new HdfException(\"B tree type is not group. Type is: \" + nodeType); } final byte nodeLevel = header.get(); if (nodeLevel > 0) { return new BTreeV1Group.BTreeV1GroupNonLeafNode(hdfFc, address); } else { return new BTreeV1Group.BTreeV1GroupLeafNode(hdfFc, address); } }### Assistant: @Test void testCreatingBTreeOfGroupTypeWithDataThrows() { assertThrows(HdfException.class, () -> BTreeV1.createGroupBTree(hdfFc, 2104)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected boolean isMatch(String invokerId) { if (allEffective) { return true; } else { if (excludeId.size() == 0) { return effectiveId.contains(invokerId); } else { return !excludeId.contains(invokerId); } } }### Assistant: @Test public void testIsMatch() { TestCustomizeFilter testCustomizeFilter = new TestCustomizeFilter(); Assert.assertTrue(testCustomizeFilter.isMatch(\"\")); testCustomizeFilter = new TestCustomizeFilter(); testCustomizeFilter.setIdRule(\"AAA,BBB\"); AbstractInterfaceConfig configA = new ProviderConfig(); configA.setInterfaceId(Serializer.class.getName()); configA.setId(\"AAA\"); FilterInvoker filterInvokerA = new FilterInvoker(null, null, configA); Assert.assertEquals(true, testCustomizeFilter.needToLoad(filterInvokerA)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static final GeometryWrapper createPolygon(List<Coordinate> coordinates, String srsURI, String geometryDatatypeURI) { Polygon geometry = GEOMETRY_FACTORY.createPolygon(coordinates.toArray(new Coordinate[coordinates.size()])); return createGeometry(geometry, srsURI, geometryDatatypeURI); }### Assistant: @Test public void testCreatPolygon() { List<Coordinate> coordinates = Arrays.asList(new Coordinate(1, 2), new Coordinate(10, 2), new Coordinate(10, 20), new Coordinate(1, 20), new Coordinate(1, 2)); String srsURI = SRS_URI.WGS84_CRS; String geometryDatatypeURI = WKTDatatype.URI; GeometryWrapper instance = GeometryWrapperFactory.createPolygon(coordinates, srsURI, geometryDatatypeURI); String expResult = \"<http: String result = instance.asLiteral().getLexicalForm(); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean readBooleanAttribute(XMLStreamReader reader, String attr, boolean defaultValue) { String a = reader.getAttributeValue(null, attr); if (a == null || a.isEmpty()) { return defaultValue; } return Boolean.parseBoolean(a); }### Assistant: @Test public void readBooleanAttribute() throws XMLStreamException, FactoryConfigurationError, IOException { URL url = XmlHelperTest.class.getResource(\"/xml/default/kb-layout.xml\"); XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStreamReader(url.openStream()); reader.next(); reader.require(XMLStreamConstants.START_ELEMENT, null, XmlHelper.KEYBOARD); assertFalse(XmlHelper.readBooleanAttribute(reader, XmlHelper.ATTR_REPEATABLE, false)); assertFalse(XmlHelper.readBooleanAttribute(reader, \"\", false)); while (reader.hasNext()) { reader.next(); if (!reader.isStartElement() || !XmlHelper.KEY.equals(reader.getLocalName())) { continue; } if (32 == XmlHelper.readIntAttribute(reader, XmlHelper.ATTR_CODES, -1)) { assertTrue(XmlHelper.readBooleanAttribute(reader, XmlHelper.ATTR_REPEATABLE, false)); assertTrue(XmlHelper.readBooleanAttribute(reader, XmlHelper.ATTR_MOVABLE, false)); } if (-1 == XmlHelper.readIntAttribute(reader, XmlHelper.ATTR_CODES, 0)) { assertTrue(XmlHelper.readBooleanAttribute(reader, XmlHelper.ATTR_STICKY, false)); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ApiOperation(value = \"Returns a release package for the given project id. \" + \"The project id is read from planning.budget.projectID.\" + \"This will contain the OCDS package information (metadata about publisher) plus the release itself.\") @RequestMapping(value = \"/api/ocds/package/budgetProjectId/{projectId:^[a-zA-Z0-9]*$}\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public ReleasePackage packagedReleaseByProjectId(@PathVariable final String projectId) { Release release = ocdsByProjectId(projectId); return createReleasePackage(release); }### Assistant: @Test public void packagedReleaseByProjectId() throws Exception { final ReleasePackage releasePackage = ocdsController.packagedReleaseByProjectId(\"SP001\"); Assert.assertNotNull(releasePackage); final Optional<Release> release = releasePackage.getReleases().stream().findFirst(); Assert.assertEquals(true, release.isPresent()); Assert.assertEquals(\"ocds-endpoint-001-tender\", release.get().getTender().getId()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String parsePackageName(final String content) { String packageName = \"\"; if (content == null || content.trim().equals(\"\")) { return packageName; } else { final String[] lines = content.split(\"\\\\n\"); for (String line1 : lines) { String line = line1.trim(); if (line.startsWith(KEYWORD)) { line = line.substring(KEYWORD.length()).trim(); if (line.endsWith(\";\")) { line = line.substring(0, line.length() - 1); } return line; } } return packageName; } }### Assistant: @Test public void testEmptyContent() { final String content = \"\"; final String packageName = PackageNameParser.parsePackageName( content ); assertNotNull( packageName ); assertEquals( \"\", packageName ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<String, String> generateConfig(Class<?>... serviceClasses) throws ApiConfigException { return generateConfig(ServiceContext.create(), serviceClasses); }### Assistant: @Test public void testDefaultValuedPathParameterString() throws Exception { final class Test extends DefaultValuedPathParameterEndpoint<String> {} try { g.generateConfig(Test.class); fail(\"Config generation for endpoint with default-valued path parameter should have failed.\"); } catch (InvalidParameterAnnotationsException expected) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public MolecularFormula() { isotopes = new HashMap<IIsotope, Integer>(); }### Assistant: @Test public void testMolecularFormula() { IMolecularFormula mf = new MolecularFormula(); Assert.assertNotNull(mf); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NotNull @Override public Boolean get() { return myValue; }### Assistant: @Test public void testInitialization() { { BoolValueProperty boolValue = new BoolValueProperty(true); assertThat(boolValue.get()).isEqualTo(true); } { BoolValueProperty boolValue = new BoolValueProperty(); assertThat(boolValue.get()).isEqualTo(false); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getPluralName() { return \"permissions\"; }### Assistant: @Test public void testGetPluralName() throws Exception { ViewPermissionResourceDefinition ViewPermissionResourceDefinition = new ViewPermissionResourceDefinition(); Assert.assertEquals(\"permissions\", ViewPermissionResourceDefinition.getPluralName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getCHARDELIM() { return \"'\"; }### Assistant: @Test public void testGetCHARDELIM() { String actual = table.getCHARDELIM(); String expected = \"'\"; assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String doAction(@Nonnull Resource resource) throws PersistenceException { String path = resource.getPath(); if (resource.getName().equals(newName)) { return \"Resource \" + path + \" already has new name, no renaming done\"; } Session session = resourceResolver.adaptTo(Session.class); String newPath = resource.getParent().getPath() + FileSystem.SEPARATOR + newName; try { session.move(path, newPath); } catch (ItemExistsException e) { throw new PersistenceException(\"Target path already exists\", e); } catch (PathNotFoundException e) { throw new PersistenceException(\"Target path does not exist\", e); } catch (VersionException e) { throw new PersistenceException(\"Version error\", e); } catch (RepositoryException e) { throw new PersistenceException(\"Rename failed\", e); } return \"Renamed resource \" + path + \" to \" + newName; }### Assistant: @Test public void doAction() throws PersistenceException, ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, RepositoryException { RenameResource action = new RenameResource(resolver, NEW_NAME); action.doAction(resource); verify(session, times(1)).move(\"/parent/node\", \"/parent/\" + NEW_NAME); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public IAtomContainer parseSmiles(String smiles) throws InvalidSmilesException { return parseSmiles(smiles, false); }### Assistant: @Test(timeout = 1000) public void testTungsten() throws Exception { String smiles = \"[W]\"; IAtomContainer mol = sp.parseSmiles(smiles); assertAtomTypesPerceived(mol); Assert.assertEquals(1, mol.getAtomCount()); Assert.assertEquals(\"W\", mol.getAtom(0).getSymbol()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T5> get5() { return getAndCast(5); }### Assistant: @Test void get5() { assertEquals(m5, instance.get5()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected Supplier<String> getContentSupplier() { return () -> view.getContent(); }### Assistant: @Test public void testGetContentSupplier() throws Exception { final String content = \"\"; doReturn(content).when(view).getContent(); final Supplier<String> contentSupplier = drlEditor.getContentSupplier(); assertEquals(content, contentSupplier.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public AuthReport checkAllowed(Exchange exchange, Api api) { AuthReport authReport = new AuthReport(); Object keyObj = null; Map<?, ?> parameters = exchange.getProperty(ExchangeConstantKeys.E3_REQUEST_PARAMETERS.toString(), Map.class); if (parameters == null) { if(logger.isDebugEnabled()) { logger.debug(\"Request parameters not set\"); } authReport.setBadRequest(true); } else { keyObj = parameters.get(keyName); if (keyObj == null) { keyObj = exchange.getIn().getHeader(headerName, String.class); if (keyObj == null) { if(logger.isDebugEnabled()) { logger.debug(\"Unable to find url parameter or header matching the provisioned api key name\"); } authReport.setBadRequest(true); } } } if(!authReport.isBadRequest()) { String authKey = keyObj.toString(); if(logger.isDebugEnabled()) { logger.debug(\"authKey= \" + authKey); } removeHttpQueryValue(exchange, keyName+\"=\"+authKey); exchange.getIn().removeHeader(headerName); try { authReport = dataAccess.checkAllowed(api, authKey); } catch(DataAccessRuntimeException e) { logger.error(\"Data Access Issue\", e); } catch(Exception e) { logger.error(\"Data Access Issue\", e); } } return authReport; }### Assistant: @Test public void testFailBadFormat2(){ Exchange exchange = new DefaultExchange(context); Api api = new Api(); api.setId(\"1234\"); Map<String, Object> parameters = new HashMap<String, Object>(); parameters.put(appKeyName, null); exchange.setProperty(ExchangeConstantKeys.E3_REQUEST_PARAMETERS.toString(), parameters); AppKeyExecutor executor = new AppKeyExecutor(appKeyName, appHeaderName, new MockAuthDataAccess(\"asdf\", null, null)); AuthReport authReport = executor.checkAllowed(exchange, api); assertNull(\"This authentication should have failed\", authReport.getAuthIdentity()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> T newServiceInstance(String serviceId) throws ClassNotFoundException, ClassInstantiationException { Class<T> clazz = loadServiceClass(serviceId); return newInstance(clazz); }### Assistant: @Test public void newServiceInstance_ClassNameServiceId() throws Exception { assertNull(ClassLoaderUtil.newServiceInstance(null, (String) null)); try { ClassLoaderUtil.newServiceInstance(\"myservice.notexist\", \"myservice.notexist\"); fail(\"expected ServiceNotFoundException\"); } catch (ServiceNotFoundException e) { } try { ClassLoaderUtil.newServiceInstance(\"myservice.notfound\", \"myservice.notfound\"); fail(\"expected ClassNotFoundException\"); } catch (ClassNotFoundException e) { assertFalse(e instanceof ServiceNotFoundException); } try { ClassLoaderUtil.newServiceInstance(\"myservice.err\", \"myservice.err\"); fail(\"Expected ClassInstantiationException\"); } catch (ClassInstantiationException e) { } assertInstance(MyService.class, ClassLoaderUtil.newServiceInstance(\"myservice\", \"myservice\")); assertNull(ClassLoaderUtil.newServiceInstance(null, null, getClass())); assertNull(ClassLoaderUtil.newServiceInstance(null, null, (Class<?>) null)); try { ClassLoaderUtil.newServiceInstance(\"myservice.notexist\", \"myservice.notexist\", getClass()); fail(\"expected ServiceNotFoundException\"); } catch (ServiceNotFoundException e) { } try { ClassLoaderUtil.newServiceInstance(\"myservice.notfound\", \"myservice.notfound\", getClass()); fail(\"expected ClassNotFoundException\"); } catch (ClassNotFoundException e) { assertFalse(e instanceof ServiceNotFoundException); } try { ClassLoaderUtil.newServiceInstance(\"myservice.notexist\", \"myservice.notexist\", (Class<?>) null); fail(\"expected ServiceNotFoundException\"); } catch (ServiceNotFoundException e) { } try { ClassLoaderUtil.newServiceInstance(\"myservice.notfound\", \"myservice.notfound\", (Class<?>) null); fail(\"expected ClassNotFoundException\"); } catch (ClassNotFoundException e) { assertFalse(e instanceof ServiceNotFoundException); } try { ClassLoaderUtil.newServiceInstance(\"myservice.err\", \"myservice.err\", getClass()); fail(\"Expected ClassInstantiationException\"); } catch (ClassInstantiationException e) { } assertInstance(MyService.class, ClassLoaderUtil.newServiceInstance(\"myservice\", \"myservice\", getClass())); assertInstance(MyService.class, ClassLoaderUtil.newServiceInstance(\"myservice\", \"myservice\", (Class<?>) null)); assertNull(ClassLoaderUtil.newServiceInstance(null, null, getClass().getClassLoader())); assertNull(ClassLoaderUtil.newServiceInstance(null, null, (ClassLoader) null)); try { ClassLoaderUtil.newServiceInstance(\"myservice.notexist\", \"myservice.notexist\", getClass().getClassLoader()); fail(\"expected ServiceNotFoundException\"); } catch (ServiceNotFoundException e) { } try { ClassLoaderUtil.newServiceInstance(\"myservice.notfound\", \"myservice.notfound\", getClass().getClassLoader()); fail(\"expected ClassNotFoundException\"); } catch (ClassNotFoundException e) { assertFalse(e instanceof ServiceNotFoundException); } try { ClassLoaderUtil.newServiceInstance(\"myservice.notexist\", \"myservice.notexist\", (ClassLoader) null); fail(\"expected ServiceNotFoundException\"); } catch (ServiceNotFoundException e) { } try { ClassLoaderUtil.newServiceInstance(\"myservice.notfound\", \"myservice.notfound\", (ClassLoader) null); fail(\"expected ClassNotFoundException\"); } catch (ClassNotFoundException e) { assertFalse(e instanceof ServiceNotFoundException); } try { ClassLoaderUtil.newServiceInstance(\"myservice.err\", \"myservice.err\", getClass().getClassLoader()); fail(\"Expected ClassInstantiationException\"); } catch (ClassInstantiationException e) { } assertInstance(MyService.class, ClassLoaderUtil.newServiceInstance(\"myservice\", \"myservice\", getClass().getClassLoader())); assertInstance(MyService.class, ClassLoaderUtil.newServiceInstance(\"myservice\", \"myservice\", (ClassLoader) null)); assertInstance(MyService.class, ClassLoaderUtil.newServiceInstance(\"com.baidu.unbiz.common.sample.MyService\", \"com.baidu.unbiz.common.sample.MyService\", getClass().getClassLoader())); assertInstance(MyService.class, ClassLoaderUtil.newServiceInstance(\"com.baidu.unbiz.common.sample.MyService\", \"com.baidu.unbiz.common.sample.MyService\", (ClassLoader) null)); assertInstance(MyService.class, ClassLoaderUtil.newServiceInstance(\"com.baidu.unbiz.common.sample.MyService\", \"abc\")); assertInstance(MyService.class, ClassLoaderUtil.newServiceInstance(\"abc\", \"myservice\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Result compileSwf( MxmlcConfigurationHolder cfgHolder, boolean sychronize, final String compilerName ) throws Exception { final List<String> argsList = parser.getArgumentsList( cfgHolder.configuration, ICommandLineConfiguration.class ); if ( cfgHolder.sourceFile != null ) { argsList.add( cfgHolder.sourceFile.getAbsolutePath() ); } return CommandUtil.execute( new Command() { public void command() throws Exception { String[] args = argsList.toArray( new String[argsList.size()] ); logArgs( args ); try { executeMxmlcMain(compilerName, args); } catch (Throwable t) { throw new Exception(\"Exception during Mxmlc execution\", t); } } }, sychronize ); }### Assistant: @Test public void compileDummySwf() throws Exception { File output = new File( as3, \"result.swf\" ); DefaultFlexCompiler compiler = (DefaultFlexCompiler) plexus.lookup( FlexCompiler.class ); MapLogger logger = new MapLogger(); compiler.enableLogging( logger ); ICommandLineConfiguration cfg = mock( ICommandLineConfiguration.class, RETURNS_NULL ); ICompilerConfiguration compilerCfg = getBaseCompilerCfg(); when( cfg.getLoadConfig() ).thenReturn( new String[] {} ); when( cfg.getOutput() ).thenReturn( output.getAbsolutePath() ); when( cfg.getCompilerConfiguration() ).thenReturn( compilerCfg ); Assert.assertEquals( compiler.compileSwf( new MxmlcConfigurationHolder( cfg, new File( as3, \"main.as\" ) ), true, null ).getExitCode(), 0 ); Assert.assertTrue( output.exists(), logger.getLogs().toString() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void fromString(String messageData, DataDictionary dd, boolean doValidation) throws InvalidMessage { parse(messageData, dd, dd, doValidation, true); }### Assistant: @Test public void testMessageGroupCountValidation() throws Exception { final String data = \"8=FIX.4.4\\0019=222\\00135=D\\00149=SenderCompId\\00156=TargetCompId\\00134=37\\001\" + \"52=20070223-22:28:33\\00111=183339\\00122=8\\00138=1\\00140=2\\00144=12\\00148=BHP\\00154=2\\001\" + \"55=BHP\\00159=1\\00160=20060223-22:38:33\\001526=3620\\00178=0\\00179=AllocACC1\\00180=1010.1\\001\" + \"79=AllocACC2\\00180=2020.2\\001453=2\\001448=8\\001447=D\\001452=4\\001448=AAA35354\\001447=D\\001452=3\\00110=079\\001\"; final Message message = new Message(); final DataDictionary dd = DataDictionaryTest.getDictionary(); message.fromString(data, dd, true); try { dd.validate(message); fail(\"No exception thrown\"); } catch (final FieldException e) { final String emsg = e.getMessage(); assertNotNull(\"No exception message\", emsg); assertTrue(emsg.startsWith(\"Incorrect NumInGroup\")); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void deleteComment(long commentId) throws PortalException { _mbMessageLocalService.deleteDiscussionMessage(commentId); }### Assistant: @Test public void testDeleteComment() throws Exception { _mbCommentManagerImpl.deleteComment(_MBMESSAGE_ID); Mockito.verify( _mbMessageLocalService ).deleteDiscussionMessage( _MBMESSAGE_ID ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static double secondsSince1981ToSecondsSinceEpoch(double secondsSince1981) { return secondsSince1981 + (MILLIS_1981 - MILLIS_1978) / 1000.0; }### Assistant: @Test public void testSecondsSince1981ToSecondsSinceEpoch() throws Exception { final double seconds = TimeUtil.secondsSince1981ToSecondsSinceEpoch(0.0); assertEquals((3 * 365 + 1) * TimeUtil.SECONDS_PER_DAY, seconds, 0.0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getAliasByCode(byte code) { return TYPE_CODE_MAP.getKey(code); }### Assistant: @Test public void getAliasByCode() { Assert.assertEquals(\"test\", SerializerFactory.getAliasByCode((byte) 117)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public WorkflowOperationResult start(WorkflowInstance workflowInstance, JobContext context) throws WorkflowOperationException { MediaPackage mediaPackage = workflowInstance.getMediaPackage(); WorkflowOperationInstance currentOperation = workflowInstance.getCurrentOperation(); String configuredCatalog = StringUtils.trimToEmpty(currentOperation.getConfiguration(DCCATALOG_PROPERTY)); String configuredDCTerm = StringUtils.trimToEmpty(currentOperation.getConfiguration(DCTERM_PROPERTY)); String configuredDefaultValue = StringUtils.trimToNull(currentOperation.getConfiguration(DEFAULT_VALUE_PROPERTY)); String configuredMatchValue = StringUtils.trimToEmpty(currentOperation.getConfiguration(MATCH_VALUE_PROPERTY)); Catalog[] catalogs = mediaPackage .getCatalogs(new MediaPackageElementFlavor(\"dublincore\", StringUtils.lowerCase(configuredCatalog))); if (catalogs != null && catalogs.length > 0) { Boolean foundValue = false; EName dcterm = new EName(TERMS_NS_URI, configuredDCTerm); for (Catalog catalog : catalogs) { DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(workspace, catalog); List<DublinCoreValue> values = dc.get(dcterm); if (values.isEmpty()) { if (configuredDefaultValue != null) { foundValue = configuredDefaultValue.equals(configuredMatchValue); } } else { foundValue = values.contains(DublinCoreValue.mk(configuredMatchValue)); } } if (foundValue) { Map<String, String> properties = new HashMap<>(); for (String key : currentOperation.getConfigurationKeys()) { if (DCCATALOG_PROPERTY.equals(key) || DCTERM_PROPERTY.equals(key) || DEFAULT_VALUE_PROPERTY.equals(key) || MATCH_VALUE_PROPERTY.equals(key)) { continue; } String value = currentOperation.getConfiguration(key); properties.put(key, value); logger.info(\"Configuration key '{}' of workflow {} is set to value '{}'\", key, workflowInstance.getId(), value); } return createResult(mediaPackage, properties, Action.CONTINUE, 0); } } return createResult(mediaPackage, Action.CONTINUE); }### Assistant: @Test public void testMissingNoDefaultDCTerm() throws Exception { operation.setConfiguration(ConfigureByDublinCoreTermWOH.DCCATALOG_PROPERTY, \"episode\"); operation.setConfiguration(ConfigureByDublinCoreTermWOH.DCTERM_PROPERTY, \"source\"); operation.setConfiguration(ConfigureByDublinCoreTermWOH.MATCH_VALUE_PROPERTY, \"Timbuktu\"); operation.setConfiguration(ConfigureByDublinCoreTermWOH.COPY_PROPERTY, \"false\"); operation.setConfiguration(\"newConfigProperty\", \"true\"); WorkflowOperationResult result = operationHandler.start(instance, null); Map<String, String> properties = result.getProperties(); Assert.assertTrue(properties == null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int getAndIncrement(AtomicInteger i, int maxValue) { return i.getAndUpdate(prev -> { if (prev < maxValue) { return prev + 1; } else { return maxValue; } }); }### Assistant: @Test void testGetAndIncrement() { int max = 10; AtomicInteger integer = new AtomicInteger(0); for (int i = 0; i < 20; i++) { Atomics.getAndIncrement(integer, max); } assertEquals(max, integer.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected List<ReadChildrenResult> processToModel(final String query, final ModelNode nodes) { return nodes.asList().stream() .map(node -> new ReadChildrenResult(node.asString())) .filter(result -> !isNullOrEmpty(query) && (SuggestHandler.SHOW_ALL_VALUE.equals(query) || result.name.contains(query))) .sorted(Comparator.comparing(result -> result.name)) .collect(toList()); }### Assistant: @Test public void emptyQuery() throws Exception { List<ReadChildrenResult> results = resultProcessor.processToModel(\"\", nodes); assertTrue(results.isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull public static <T, F> Supplier<T> functionAsSupplier( @NonNull final Function<F, T> function, @NonNull final F from) { return new FunctionToSupplierConverter<>(function, from); }### Assistant: @Test public void shouldRunFactoryWithFromObjectAndReturnFactoryOutputForFunctionWithSupplier() { assertThat(functionAsSupplier(mockFunction, ITEM), gives(RETURN_ITEM)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<ValidationMessage> validate(final Path path) { try { final String content = ioService.readAllString(Paths.convert(path)); return validate(path, content); } catch (Exception e) { throw ExceptionUtilities.handleException(e); } }### Assistant: @Test public void testMissingCustomDataType() throws Exception { List<ValidationMessage> messages = service.validate(path, loadFile(\"missingCustomDataTypeDefinition.wid\")); assertEquals(1, messages.size()); assertTrue(\"Expected error about missing import\", messages.get(0).getText().contains(\"Error: could not resolve class: MyCustomDataType\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int run(String[] args) throws Exception { if (args.length != 2) { return usage(args); } String action = args[0]; String name = args[1]; int result; if (A_LOAD.equals(action)) { result = loadClass(name); } else if (A_CREATE.equals(action)) { result = loadClass(name); if (result == SUCCESS) { result = createClassInstance(name); } } else if (A_RESOURCE.equals(action)) { result = loadResource(name); } else if (A_PRINTRESOURCE.equals(action)) { result = dumpResource(name); } else { result = usage(args); } return result; }### Assistant: @Test public void testFindsResource() throws Throwable { run(FindClass.SUCCESS, FindClass.A_RESOURCE, \"org/apache/hadoop/util/TestFindClass.class\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void link(JmsDestination entity, Bundle bundle, Bundle targetBundle) { linkJndiStoredPassword(entity, bundle); linkDestinationStoredPassword(entity, bundle); linkInboundAssociatedService(entity, bundle); verifyPrivateKeys(entity, bundle); }### Assistant: @Test void testLinkPasswordL7C2VariableFormat() { final String jndiPassword = \"$L7C2$1,3ok3RLhLqpD3Z3QdyTpoa2iHU2dRYdAF3TgSchF2ttI=$2EqC+niJG4yw7LOJ52Rur0VcGccT/r1WpHE+4Aiqj5GcNNYXub9h7pO5CrGT7eFGhyub2ilKx5M+ULQtbU5ZTcGxgj4K+H0+y9Yq5LNbKggoHYa+3T8r9pIcUamcCx7q\\\"\"; final String destinationPassword = \"$L7C2$1,3ok3RLhLqpD3Z3QdyTpoa2iHU2dRYdAF3TgSchF2ttI=$2EqC+niJG4yw7LOJ52Rur0VcGccT/r1WpHE+4Aiqj5GcNNYXub9h7pO5CrGT7eFGhyub2ilKx5M+ULQtbU5ZTcGxgj4K+H0+y9Yq5LNbKggoHYa+3T8r9pIcUamcCx7q\\\"\"; final JmsDestination jmsDestination = createJmsDestination(jndiPassword, destinationPassword); linker.link(jmsDestination, new Bundle(), new Bundle()); assertNull(jmsDestination.getJndiPasswordRef()); assertNull(jmsDestination.getJndiPassword()); assertNull(jmsDestination.getDestinationPasswordRef()); assertNull(jmsDestination.getDestinationPassword()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setPcr(double value) { if (value < .8 || value > 1) { throw new TramoException(\"PCR should belong to [0.8, 1.0]\"); } pcr_ = value; }### Assistant: @Test(expected = TramoException.class) public void testSetUb1LowerBound() { AutoModelSpec spec = new AutoModelSpec(); spec.setPcr(.79); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void handleSend(@Nullable Resp response, @Nullable Throwable error, Span span) { if (span == null) throw new NullPointerException(\"span == null\"); if (response == null && error == null) { throw new IllegalArgumentException( \"Either the response or error parameters may be null, but not both\"); } if (response == null) { span.error(error).finish(); return; } HttpServerResponse serverResponse; if (response instanceof HttpServerResponse) { serverResponse = (HttpServerResponse) response; if (serverResponse.error() == null && error != null) { span.error(error); } } else { serverResponse = new FromResponseAdapter<>(adapter, response, error); } handleFinish(serverResponse, span); }### Assistant: @Test public void handleSend_oneOfResponseError() { brave.Span span = mock(brave.Span.class); assertThatThrownBy(() -> handler.handleSend(null, span)) .isInstanceOf(NullPointerException.class) .hasMessage(\"response == null\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ActorSystem call(final Callable<ActorSystem> mainMethodBody) { return tryToRunMainMethodBody(checkNotNull(mainMethodBody, \"Runnable to be executed\")); }### Assistant: @Test public void exceptionIsReThrownAndLoggedAppropriately() { final String exceptionMessage = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"; final RuntimeException cause = new NullPointerException(\"Foo must not be null!\"); final RuntimeException exception = new IllegalStateException(exceptionMessage, cause); final String expectedLogMessage = MessageFormat.format(LOG_MESSAGE_PATTERN, CLASS_NAME); assertThatExceptionOfType(exception.getClass()) .isThrownBy(() -> underTest.call(() -> { throw exception; })) .withMessage(exceptionMessage) .withCause(cause); Mockito.verify(logger).error(expectedLogMessage, exception); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isValid(ProcessorReferenceChainDescription chainReference, ConstraintValidatorContext context) { if (chainReference == null) return true; List<ProcessorReference> references = chainReference.getProcessors(); if (references == null || references.isEmpty()) return setAndReturnErrorMessage(context, \"processor chain cannot be empty\"); if (!specificationManager.getByName(references.get(0).getName()).getType().equals(ProcessorType.SOURCE_ADAPTER)) return setAndReturnErrorMessage(context, \"processor chain must start with \" + ProcessorType.SOURCE_ADAPTER); ProcessorReference lastReference = null; for (ProcessorReference reference : references) { if (lastReference != null) { ProcessorType lastType = specificationManager.getByName(lastReference.getName()).getType(); ProcessorType nextType = specificationManager.getByName(reference.getName()).getType(); if (!lastType.isValidNextFilter(nextType)) return setAndReturnErrorMessage(context, lastType + \" cannot be followed by \" + nextType); } if (!isValid(reference, context)) return false; lastReference = reference; } return true; }### Assistant: @Test public void testMissingSourceAdapterReference() { new Expectations() {{ Map<String, Class<?>> argTypes = new HashMap<>(); argTypes.put(\"key3\", Boolean.class); descriptionManager.getByName(FilterFactory.NAME_NOTIFICATION_FILTER); result = Deencapsulation.newInnerInstance(Specification.class, FilterFactory.NAME_NOTIFICATION_FILTER, ProcessorType.FILTER, argTypes); }}; Assert.assertFalse(validator.isValid(new ProcessorReferenceChainDescription( Arrays.asList(notificationFilter), new ExecutionInterval(2, TimeUnit.SECONDS)), context)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Set<AccessPolicy> getAccessPolicies() throws AuthorizationAccessException { final String sql = \"SELECT * FROM APP_POLICY\"; final List<DatabaseAccessPolicy> databasePolicies = jdbcTemplate.query(sql, new DatabaseAccessPolicyRowMapper()); final Map<String,Set<String>> policyToUsers = new HashMap<>(); jdbcTemplate.query(\"SELECT * FROM APP_POLICY_USER\", (rs) -> { final String policyIdentifier = rs.getString(\"POLICY_IDENTIFIER\"); final String userIdentifier = rs.getString(\"USER_IDENTIFIER\"); final Set<String> userIdentifiers = policyToUsers.computeIfAbsent(policyIdentifier, (k) -> new HashSet<>()); userIdentifiers.add(userIdentifier); }); final Map<String,Set<String>> policyToGroups = new HashMap<>(); jdbcTemplate.query(\"SELECT * FROM APP_POLICY_GROUP\", (rs) -> { final String policyIdentifier = rs.getString(\"POLICY_IDENTIFIER\"); final String groupIdentifier = rs.getString(\"GROUP_IDENTIFIER\"); final Set<String> groupIdentifiers = policyToGroups.computeIfAbsent(policyIdentifier, (k) -> new HashSet<>()); groupIdentifiers.add(groupIdentifier); }); final Set<AccessPolicy> policies = new HashSet<>(); databasePolicies.forEach(p -> { final Set<String> userIdentifiers = policyToUsers.get(p.getIdentifier()); final Set<String> groupIdentifiers = policyToGroups.get(p.getIdentifier()); policies.add(mapTopAccessPolicy(p, userIdentifiers, groupIdentifiers)); }); return policies; }### Assistant: @Test public void testOnConfiguredWhenOnlyNiFiGroupName() { assertEquals(0, getPolicyCount()); configure(null, null, NIFI_GROUP.getName()); final Set<AccessPolicy> policies = policyProvider.getAccessPolicies(); assertNotNull(policies); assertEquals(4, policies.size()); policies.forEach(p -> { assertNotNull(p.getGroups()); assertEquals(1, p.getGroups().size()); assertTrue(p.getGroups().contains(NIFI_GROUP.getIdentifier())); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TimeSeriesComponentMetric getComponentStats(TopologyLayout topology, Component component, long from, long to, String asUser) { String stormTopologyName = StormTopologyUtil.findOrGenerateTopologyName(client, topology.getId(), topology.getName(), asUser); String stormComponentName = getComponentName(component); StormMappedMetric[] stats; if (component instanceof Source) { stats = STATS_METRICS_SOURCE; } else { stats = STATS_METRICS; } Map<String, Map<Long, Double>> componentStats = ParallelStreamUtil.execute(() -> Arrays.asList(stats) .parallelStream() .collect(toMap(m -> m.name(), m -> queryComponentMetrics(stormTopologyName, stormComponentName, m, from, to))), FORK_JOIN_POOL); return buildTimeSeriesComponentMetric(component.getName(), componentStats); }### Assistant: @Test public void getSourceComponentStats() throws Exception { final TopologyLayout topology = getTopologyLayoutForTest(); final long from = 1L; final long to = 3L; final TopologyTimeSeriesMetrics.TimeSeriesComponentMetric expectedMetric = setupExpectionToSpoutComponent(source, from, to); TopologyTimeSeriesMetrics.TimeSeriesComponentMetric actual = stormTopologyTimeSeriesMetrics.getComponentStats(topology, source, from, to, null); assertEquals(expectedMetric, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Properties convertToProperties(final String entries) { final Properties params = new Properties(); if (entries == null) { return params; } try { params.load(new ByteArrayInputStream(entries.getBytes())); } catch (final Exception e) { Logger.getLogger(\"es.gob.afirma\").warning( \"Se han encontrado entradas no validas en la configuracion de la operacion: \" + e ); } return params; }### Assistant: @SuppressWarnings(\"static-method\") @Test public void testExtraParamProcessor() { final String entries = \"Clave1=valor\\n\" + \"2=valor\\n\" + \"clave3=v\\n\" + \"4=v\\n\" + \"=v\\n\" + \"5=\\n\" + \"=\\n\" + \"\\n\" + \"=valor\\n\" + \"clave6=\\n\" + \"clave7=val=or\\n\" + \"clave8=valor\\n\" + \"cla=ve9=valor\\n\" + \"clave0\\n\"; final Properties params = ExtraParamsProcessor.convertToProperties(entries); Assert.assertNotNull(params); for (final String key : params.keySet().toArray(new String[0])) { System.out.println(key + \" = \" + params.getProperty(key)); } Assert.assertEquals(11, params.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Access getAccessExt(ResourceContext ctx, String action, String resource, String trustDomain, String checkPrincipal) { final String caller = ctx.getApiName(); logPrincipal(ctx); validateRequest(ctx.request(), caller); validate(action, TYPE_COMPOUND_NAME, caller); return getAccessCheck(((RsrcCtxWrapper) ctx).principal(), action, resource, trustDomain, checkPrincipal, ctx); }### Assistant: @Test public void testGetAccessExt() { final String testDomainName = \"AccessDomExt1\"; TopLevelDomain dom1 = createTopLevelDomainObject(testDomainName, \"Test Domain1\", \"testOrg\", adminUser); zms.postTopLevelDomain(mockDomRsrcCtx, auditRef, dom1); Role role1 = createRoleObject(testDomainName, \"Role1\", null, \"user.user1\", \"user.user3\"); zms.putRole(mockDomRsrcCtx, testDomainName, \"Role1\", auditRef, role1); Role role2 = createRoleObject(testDomainName, \"Role2\", null, \"user.user2\", \"user.user3\"); zms.putRole(mockDomRsrcCtx, testDomainName, \"Role2\", auditRef, role2); Policy policy1 = createPolicyObject(testDomainName, \"Policy1\", \"Role1\", \"UPDATE\", testDomainName + \":resource1/resource2\", AssertionEffect.ALLOW); zms.putPolicy(mockDomRsrcCtx, testDomainName, \"Policy1\", auditRef, policy1); Policy policy2 = createPolicyObject(testDomainName, \"Policy2\", \"Role2\", \"CREATE\", testDomainName + \":resource2(resource3)\", AssertionEffect.ALLOW); zms.putPolicy(mockDomRsrcCtx, testDomainName, \"Policy2\", auditRef, policy2); Policy policy3 = createPolicyObject(testDomainName, \"Policy3\", \"Role2\", \"*\", testDomainName + \":resource3/*\", AssertionEffect.ALLOW); zms.putPolicy(mockDomRsrcCtx, testDomainName, \"Policy3\", auditRef, policy3); Policy policy4 = createPolicyObject(testDomainName, \"Policy4\", \"Role1\", \"READ\", testDomainName + \":resource4[*]/data1\", AssertionEffect.ALLOW); zms.putPolicy(mockDomRsrcCtx, testDomainName, \"Policy4\", auditRef, policy4); Policy policy5 = createPolicyObject(testDomainName, \"Policy5\", \"Role2\", \"access\", testDomainName + \":https: zms.putPolicy(mockDomRsrcCtx, testDomainName, \"Policy5\", auditRef, policy5); Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority(); Principal principal1 = principalAuthority.authenticate(\"v=U1;d=user;n=user1;s=signature\", \"10.11.12.13\", \"GET\", null); ResourceContext rsrcCtx1 = createResourceContext(principal1); Principal principal2 = principalAuthority.authenticate(\"v=U1;d=user;n=user2;s=signature\", \"10.11.12.13\", \"GET\", null); ResourceContext rsrcCtx2 = createResourceContext(principal2); Principal principal3 = principalAuthority.authenticate(\"v=U1;d=user;n=user3;s=signature\", \"10.11.12.13\", \"GET\", null); ResourceContext rsrcCtx3 = createResourceContext(principal3); Access access = zms.getAccessExt(rsrcCtx1, \"UPDATE\", testDomainName + \":resource1/resource2\", testDomainName, null); assertTrue(access.getGranted()); access = zms.getAccessExt(rsrcCtx1, \"UPDATE\", testDomainName + \":resource1/resource3\", testDomainName, null); assertFalse(access.getGranted()); access = zms.getAccessExt(rsrcCtx2, \"UPDATE\", testDomainName + \":resource1/resource2\", testDomainName, null); assertFalse(access.getGranted()); access = zms.getAccessExt(rsrcCtx3, \"UPDATE\", testDomainName + \":resource1/resource2\", testDomainName, null); assertTrue(access.getGranted()); access = zms.getAccessExt(rsrcCtx1, \"CREATE\", testDomainName + \":resource1/resource2\", testDomainName, null); assertFalse(access.getGranted()); access = zms.getAccessExt(rsrcCtx2, \"CREATE\", testDomainName + \":resource1/resource2\", testDomainName, null); assertFalse(access.getGranted()); access = zms.getAccessExt(rsrcCtx3, \"CREATE\", testDomainName + \":resource1/resource2\", testDomainName, null); assertFalse(access.getGranted()); access = zms.getAccessExt(rsrcCtx1, \"CREATE\", testDomainName + \":resource2(resource3)\", testDomainName, null); assertFalse(access.getGranted()); access = zms.getAccessExt(rsrcCtx2, \"CREATE\", testDomainName + \":resource2(resource3)\", testDomainName, null); assertTrue(access.getGranted()); access = zms.getAccessExt(rsrcCtx3, \"CREATE\", testDomainName + \":resource2(resource3)\", testDomainName, null); assertTrue(access.getGranted()); access = zms.getAccessExt(rsrcCtx1, \"CREATE\", testDomainName + \":resource3\", testDomainName, null); assertFalse(access.getGranted()); access = zms.getAccessExt(rsrcCtx2, \"CREATE\", testDomainName + \":resource3/test1\", testDomainName, null); assertTrue(access.getGranted()); access = zms.getAccessExt(rsrcCtx3, \"CREATE\", testDomainName + \":resource3/anothertest\", testDomainName, null); assertTrue(access.getGranted()); access = zms.getAccessExt(rsrcCtx1, \"UPDATE\", testDomainName + \":resource3\", testDomainName, null); assertFalse(access.getGranted()); access = zms.getAccessExt(rsrcCtx2, \"UPDATE\", testDomainName + \":resource3/(another value)\", testDomainName, null); assertTrue(access.getGranted()); access = zms.getAccessExt(rsrcCtx3, \"UPDATE\", testDomainName + \":resource3/a\", testDomainName, null); assertTrue(access.getGranted()); access = zms.getAccessExt(rsrcCtx1, \"read\", testDomainName + \":resource4[test1]/data1\", testDomainName, null); assertTrue(access.getGranted()); access = zms.getAccessExt(rsrcCtx2, \"read\", testDomainName + \":resource4[test1]/data1\", testDomainName, null); assertFalse(access.getGranted()); access = zms.getAccessExt(rsrcCtx3, \"read\", testDomainName + \":resource4[test another]/data1\", testDomainName, null); assertTrue(access.getGranted()); access = zms.getAccessExt(rsrcCtx1, \"access\", testDomainName + \":https: testDomainName, null); assertFalse(access.getGranted()); access = zms.getAccessExt(rsrcCtx2, \"access\", testDomainName + \":https: testDomainName, null); assertTrue(access.getGranted()); access = zms.getAccessExt(rsrcCtx2, \"access\", testDomainName + \":https: testDomainName, null); assertFalse(access.getGranted()); access = zms.getAccessExt(rsrcCtx3, \"access\", testDomainName + \":https: testDomainName, null); assertTrue(access.getGranted()); zms.deleteTopLevelDomain(mockDomRsrcCtx, testDomainName, auditRef); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<InclusionDependency> getMax(final Collection<InclusionDependency> toMinify) { final List<InclusionDependency> ind = new LinkedList<>(toMinify); ind.sort(Comparator.comparing(this::degreeOf).reversed()); final List<InclusionDependency> maxInd = new ArrayList<>(); while (!ind.isEmpty()) { final InclusionDependency current = ind.remove(0); ind.removeAll(containedOf(current, ind)); maxInd.add(current); } return maxInd; }### Assistant: @Test void maxInd_sharedColumn_contained() { final List<InclusionDependency> toCheck = asList( ind(\"wx\", \"yz\"), ind(\"w\", \"y\")); assertThat(util.getMax(toCheck)).containsOnly(ind(\"wx\", \"yz\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected Parcelable onSaveInstanceState() { Bundle outState = new Bundle(); outState.putParcelable(PARENT_STATE_KEY, super.onSaveInstanceState()); presenter().onSave(outState); return outState; }### Assistant: @Test public void testOnSaveInstanceState() throws Exception { Bundle bundle = (Bundle) layout.onSaveInstanceState(); verify(presenter).onSave(bundle); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ThingEventAdapter of(final HeaderTranslator headerTranslator) { return new ThingEventAdapter(requireNonNull(headerTranslator)); }### Assistant: @Test public void policyIdCreatedToAdaptable() { final PolicyIdCreated policyIdCreated = PolicyIdCreated.of(TestConstants.THING_ID, TestConstants.Policies.POLICY_ID, TestConstants.REVISION, setChannelHeader(TestConstants.DITTO_HEADERS_V_2)); final JsonPointer path = JsonPointer.of(\"/policyId\"); final Adaptable expected = Adaptable.newBuilder(topicPathCreated()) .withPayload(Payload.newBuilder(path) .withValue(JsonValue.of(TestConstants.Policies.POLICY_ID)) .withRevision(TestConstants.REVISION) .build()) .withHeaders(TestConstants.HEADERS_V_2) .build(); final Adaptable actual = underTest.toAdaptable(policyIdCreated, channel); assertWithExternalHeadersThat(actual).isEqualTo(expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor) throws SpreadsheetReadException { Workbook workbook; try { workbook = WorkbookFactory.create(inputStream); } catch (InvalidFormatException e) { throw new SpreadsheetReadException( \"The file does not have a compatible spreadsheet format\", e); } catch (IOException e) { throw new SpreadsheetReadException(\"The spreadsheet stream could not be read\", e); } catch (IllegalArgumentException e) { throw new SpreadsheetReadException(\"The spreadsheet stream could not be read\", e); } DataFormatter dataFormatter = new DataFormatter(); workbook.setMissingCellPolicy(Row.CREATE_NULL_AS_BLANK); Sheet sheet = workbook.getSheetAt(0); if (rowRange.getEnd() < 0) { rowRange.setEnd(sheet.getLastRowNum()); logger.debug(\"No end of row range specified, setting to \" + rowRange.getEnd()); } SortedMap<Integer, String> currentDataRow = new TreeMap<Integer, String>(); for (int rowIndex = rowRange.getStart(); rowIndex <= rowRange.getEnd(); rowIndex++) { boolean blankRow = true; if (rowRange.contains(rowIndex)) { Row row = sheet.getRow(rowIndex); for (int columnIndex = columnRange.getStart(); columnIndex <= columnRange.getEnd(); columnIndex++) { if (columnRange.contains(columnIndex)) { String value = null; if (row != null) { Cell cell = row.getCell(columnIndex); if (cell != null) { value = getCellValue(cell, dataFormatter); } } if (value != null) { blankRow = false; } currentDataRow.put(columnIndex, value); if (columnIndex == columnRange.getEnd()) { if (!ignoreBlankRows || !blankRow) { rowProcessor.processRow(rowIndex, currentDataRow); } currentDataRow = new TreeMap<Integer, String>(); } } } } } }### Assistant: @Test(expected=SpreadsheetReadException.class) public void testReadIllegalArgumentException() throws Exception { spreadsheetReader.read(getClass().getResourceAsStream(\"/test-spreadsheet.csv\"), new Range(0,1), new Range(0,1), false, new SpreadsheetRowProcessor() { public void processRow(int rowIndex, SortedMap<Integer, String> rowData) { } }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"/JSON/tModelKey/{id}\") @Produces(\"application/json\") @org.apache.cxf.jaxrs.model.wadl.Description(\"Returns the details of a tModel entity in JSON\") public org.uddi.api_v3.TModel getTModelDetailJSON(@PathParam(\"id\") String id) throws WebApplicationException { return getTModelDetail(id); }### Assistant: @Test(expected = WebApplicationException.class) public void testGetTModelDetailJSON_NULL() { System.out.println(\"getTModelDetailJSON_NULL\"); String id = UUID.randomUUID().toString(); TModel expResult = null; TModel result = instance.getTModelDetailJSON(id); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean keepAlive( final HttpRequest request, final HttpResponse response, final HttpContext context) { Args.notNull(response, \"HTTP response\"); if (request != null) { final Iterator<String> ti = new BasicTokenIterator(request.headerIterator(HttpHeaders.CONNECTION)); while (ti.hasNext()) { final String token = ti.next(); if (HeaderElements.CLOSE.equalsIgnoreCase(token)) { return false; } } } if (response.getCode() == HttpStatus.SC_NO_CONTENT) { final Header clh = response.getFirstHeader(HttpHeaders.CONTENT_LENGTH); if (clh != null) { try { final long contentLen = Long.parseLong(clh.getValue()); if (contentLen > 0) { return false; } } catch (final NumberFormatException ex) { } } if (response.containsHeader(HttpHeaders.TRANSFER_ENCODING)) { return false; } } final Header teh = response.getFirstHeader(HttpHeaders.TRANSFER_ENCODING); if (teh != null) { if (!HeaderElements.CHUNKED_ENCODING.equalsIgnoreCase(teh.getValue())) { return false; } } else { final String method = request != null ? request.getMethod() : null; if (MessageSupport.canResponseHaveBody(method, response) && response.countHeaders(HttpHeaders.CONTENT_LENGTH) != 1) { return false; } } Iterator<Header> headerIterator = response.headerIterator(HttpHeaders.CONNECTION); if (!headerIterator.hasNext()) { headerIterator = response.headerIterator(\"Proxy-Connection\"); } final ProtocolVersion ver = context.getProtocolVersion(); if (headerIterator.hasNext()) { if (ver.greaterEquals(HttpVersion.HTTP_1_1)) { final Iterator<String> it = new BasicTokenIterator(headerIterator); while (it.hasNext()) { final String token = it.next(); if (HeaderElements.CLOSE.equalsIgnoreCase(token)) { return false; } } return true; } final Iterator<String> it = new BasicTokenIterator(headerIterator); while (it.hasNext()) { final String token = it.next(); if (HeaderElements.KEEP_ALIVE.equalsIgnoreCase(token)) { return true; } } return false; } return ver.greaterEquals(HttpVersion.HTTP_1_1); }### Assistant: @Test public void testHTTP10Default() throws Exception { context.setProtocolVersion(HttpVersion.HTTP_1_0); final HttpResponse response = new BasicHttpResponse(200, \"OK\"); response.addHeader(\"Content-Length\", \"10\"); Assert.assertFalse(reuseStrategy.keepAlive(null, response, context)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public static DublinCoreCatalog read(InputStream xml) throws IOException, SAXException, ParserConfigurationException { return new DublinCoreXmlFormat().readImpl(new InputSource(xml)); }### Assistant: @Test public void readFromNode() throws Exception { final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setNamespaceAware(true); final Document doc = dbf.newDocumentBuilder().parse( IoSupport.classPathResourceAsFile(\"/matterhorn-inlined-list-records-response.xml\").get()); final NamespaceContext ctx = XmlNamespaceContext.mk( XmlNamespaceBinding.mk(\"inlined\", \"http: XmlNamespaceBinding.mk(\"mp\", \"http: XmlNamespaceBinding.mk(\"dc\", DublinCores.OC_DC_CATALOG_NS_URI)); final Node mpNode = Xpath.mk(doc, ctx).node(\" final MediaPackage mp = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder().loadFromXml(mpNode); assertNotNull(mp); assertEquals(\"10.0000/5820\", mp.getIdentifier().toString()); final Node dcNode = Xpath.mk(doc, ctx).node(\" final DublinCoreCatalog dc = DublinCoreXmlFormat.read(dcNode); assertNotNull(dc); assertEquals(\"10.0000/5820\", DublinCores.mkOpencastEpisode(dc).getDcIdentifier().get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private FunctionResolver timestamp() { return define(BuiltinFunctionName.TIMESTAMP.getName(), impl(nullMissingHandling(DateTimeFunction::exprTimestamp), TIMESTAMP, STRING), impl(nullMissingHandling(DateTimeFunction::exprTimestamp), TIMESTAMP, DATE), impl(nullMissingHandling(DateTimeFunction::exprTimestamp), TIMESTAMP, DATETIME), impl(nullMissingHandling(DateTimeFunction::exprTimestamp), TIMESTAMP, TIMESTAMP)); }### Assistant: @Test public void timestamp() { when(nullRef.type()).thenReturn(TIMESTAMP); when(missingRef.type()).thenReturn(TIMESTAMP); assertEquals(nullValue(), eval(dsl.timestamp(nullRef))); assertEquals(missingValue(), eval(dsl.timestamp(missingRef))); FunctionExpression expr = dsl.timestamp(DSL.literal(\"2020-08-17 01:01:01\")); assertEquals(TIMESTAMP, expr.type()); assertEquals(new ExprTimestampValue(\"2020-08-17 01:01:01\"), expr.valueOf(env)); assertEquals(\"timestamp(\\\"2020-08-17 01:01:01\\\")\", expr.toString()); expr = dsl.timestamp(DSL.literal(new ExprTimestampValue(\"2020-08-17 01:01:01\"))); assertEquals(TIMESTAMP, expr.type()); assertEquals(new ExprTimestampValue(\"2020-08-17 01:01:01\"), expr.valueOf(env)); assertEquals(\"timestamp(TIMESTAMP '2020-08-17 01:01:01')\", expr.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static final SchemaLocation parseURI(String uri) { try { int hashmarkIdx = uri.indexOf(\"#\"); if (hashmarkIdx > -1) { String rootDocumentURI; String rawPointer; if (hashmarkIdx == uri.length() - 1) { rootDocumentURI = uri; rawPointer = \"\"; } else { rootDocumentURI = uri.substring(0, hashmarkIdx); rawPointer = uri.substring(hashmarkIdx + 1); } URI documentURI = \"\".equals(rootDocumentURI) ? null : new URI(rootDocumentURI); return new SchemaLocation(documentURI, new JSONPointer(rawPointer).getRefTokens()); } else { return new SchemaLocation(new URI(uri), emptyList()); } } catch (URISyntaxException e) { throw new RuntimeException(e); } }### Assistant: @Test public void parseURI_multiSegmentPointer() { SchemaLocation actual = SchemaLocation.parseURI(\"http: assertEquals(new SchemaLocation(uri(\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation) throws IOException, ClassNotFoundException { logger.traceEntry(\"params: {} {} {} {} {}\", accounts, senderAddress, receiverAddress, value, nonce); Util.check(accounts != null, \"accounts!=null\"); Util.check(!(senderAddress == null || senderAddress.isEmpty()), \"senderAddress!=null\"); Util.check(!(receiverAddress == null || receiverAddress.isEmpty()), \"receiverAddress!=null\"); Util.check(value.compareTo(BigInteger.ZERO) >= 0, \"value>=0\"); Util.check(nonce.compareTo(BigInteger.ZERO) >= 0, \"nonce>=0\"); if (operation.isCheckSource()) { if (!(hasFunds(accounts, senderAddress, value) && hasCorrectNonce(accounts, senderAddress, nonce))) { IllegalArgumentException ex = new IllegalArgumentException(\"Validation of Sender Account failed!\"); logger.throwing(ex); throw ex; } } if (operation.isCheckTarget()) { AccountAddress receiver = AccountAddress.fromHexString(receiverAddress); AccountState receiverAccountState = AppServiceProvider.getAccountStateService().getOrCreateAccountState(receiver, accounts); logger.trace(\"Transfer asset > adding\"); receiverAccountState.setBalance(receiverAccountState.getBalance().add(value)); AppServiceProvider.getAccountStateService().setAccountState(receiver, receiverAccountState, accounts); } if (operation.isCheckSource()) { AccountAddress sender = AccountAddress.fromHexString(senderAddress); AccountState senderAccountState = AppServiceProvider.getAccountStateService().getOrCreateAccountState(sender, accounts); logger.trace(\"Transfer asset > substracting\"); senderAccountState.setBalance(senderAccountState.getBalance().subtract(value)); logger.trace(\"Transfer asset > increasing sender nonce\"); senderAccountState.setNonce(senderAccountState.getNonce().add(BigInteger.ONE)); logger.trace(\"Transfer asset > saving\"); AppServiceProvider.getAccountStateService().setAccountState(sender, senderAccountState, accounts); } logger.traceExit(); }### Assistant: @Test public void testTransferFundsWithNullAccountsShouldThrowException() throws IOException, ClassNotFoundException { expected(IllegalArgumentException.class, \"accounts!=null\"); accountsManager.transferFunds(null, \"Sender\", \"Receiver\", BigInteger.TEN, BigInteger.TEN, operation); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<CharSequence> unescapeCsvFields(CharSequence value) { List<CharSequence> unescaped = new ArrayList<CharSequence>(2); StringBuilder current = InternalThreadLocalMap.get().stringBuilder(); boolean quoted = false; int last = value.length() - 1; for (int i = 0; i <= last; i++) { char c = value.charAt(i); if (quoted) { switch (c) { case DOUBLE_QUOTE: if (i == last) { unescaped.add(current.toString()); return unescaped; } char next = value.charAt(++i); if (next == DOUBLE_QUOTE) { current.append(DOUBLE_QUOTE); break; } if (next == COMMA) { quoted = false; unescaped.add(current.toString()); current.setLength(0); break; } throw newInvalidEscapedCsvFieldException(value, i - 1); default: current.append(c); } } else { switch (c) { case COMMA: unescaped.add(current.toString()); current.setLength(0); break; case DOUBLE_QUOTE: if (current.length() == 0) { quoted = true; break; } case LINE_FEED: case CARRIAGE_RETURN: throw newInvalidEscapedCsvFieldException(value, i); default: current.append(c); } } } if (quoted) { throw newInvalidEscapedCsvFieldException(value, last); } unescaped.add(current.toString()); return unescaped; }### Assistant: @Test(expected = IllegalArgumentException.class) public void unescapeCsvFieldsWithCRWithoutQuote() { unescapeCsvFields(\"a,\\r\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getMinimumTimeScenarioIndex() { return getMinimumFeatureTime().scenarioIndex; }### Assistant: @Test public void getMinimumTimeScenarioIndexTest() { assertThat(times.getMinimumTimeScenarioIndex(), is(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void writeStartDocument(String encoding, String version) throws XMLStreamException { super.writeStartDocument(encoding, version); try { target.startObject(); } catch (IOException e) { throw new XMLStreamException(\"Cannot start document\", e); } getScope().getInfo().startObjectWritten = true; }### Assistant: @Test(expected = XMLStreamException.class) public void testElementMultipleRoots() throws XMLStreamException { XMLStreamWriter writer = new JsonXMLOutputFactory().createXMLStreamWriter(new StringWriter()); writer.writeStartDocument(); writer.writeStartElement(\"foo\"); writer.writeEndElement(); writer.writeStartElement(\"bar\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Future<NetConfResponse> getConfig(Device device, GetConfigRequest getConfigRequest) throws ExecutionException { if (m_ncm.isConnected(device)) { return m_ncm.executeNetconf(device, getConfigRequest); } else { throw new IllegalStateException(String.format(\"Device not connected %s\", device.getDeviceName())); } }### Assistant: @Test public void testGetConfigWhenDeviceNotConnected() throws ExecutionException { try { m_deviceInterface.getConfig(m_device, m_getConfigRequest); } catch (IllegalStateException e) { assertTrue(e.getMessage().contains(DEVICE_NOT_CONNECTED_TEST_DEVICE)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public IOException toUserPresentableException(IOException e, String action) throws IOException { throw new IOException(toUserPresentableMessage(e, action), e); }### Assistant: @Test public void toUserPresentableException_actionAsNull() { IOException exception = assertThrows( IOException.class, () -> errorExtractor.toUserPresentableException(accessDenied, null)); assertThat(exception).hasMessageThat().isEqualTo(\"Forbidden\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public float estimatePreference(long userID, long itemID) throws TasteException { double[] userFeatures = factorization.getUserFeatures(userID); double[] itemFeatures = factorization.getItemFeatures(itemID); double estimate = 0; for (int feature = 0; feature < userFeatures.length; feature++) { estimate += userFeatures[feature] * itemFeatures[feature]; } return (float) estimate; }### Assistant: @Test public void estimatePreference() throws Exception { DataModel dataModel = EasyMock.createMock(DataModel.class); Factorizer factorizer = EasyMock.createMock(Factorizer.class); Factorization factorization = EasyMock.createMock(Factorization.class); EasyMock.expect(factorizer.factorize()).andReturn(factorization); EasyMock.expect(factorization.getUserFeatures(1L)).andReturn(new double[] { 0.4, 2 }); EasyMock.expect(factorization.getItemFeatures(5L)).andReturn(new double[] { 1, 0.3 }); EasyMock.replay(dataModel, factorizer, factorization); SVDRecommender svdRecommender = new SVDRecommender(dataModel, factorizer); float estimate = svdRecommender.estimatePreference(1L, 5L); assertEquals(1, estimate, EPSILON); EasyMock.verify(dataModel, factorizer, factorization); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getNextUniqueClassName() { return String.format(\"%s.cli_%s_%d\", PREFIX_PACKAGE, uniqueId, objectCounter++); }### Assistant: @Test public void testGetNextUniqueClassName() { final String unique1 = JavassistUtils.getNextUniqueClassName(); final String unique2 = JavassistUtils.getNextUniqueClassName(); Assert.assertFalse(unique1.equals(unique2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Boolean zAdd(byte[] key, double score, byte[] value) { return helper.doInScope(RedisCommand.ZADD, key, () -> connection.zAdd(key, score, value)); }### Assistant: @Test public void invokingZAddCreatesNewSpan() { commandCreatesNewSpan(RedisCommand.ZADD, () -> getConnection().zAdd(\"key\".getBytes(), 0D, \"val\".getBytes())); verify(mockRedisConnection()).zAdd(\"key\".getBytes(), 0D, \"val\".getBytes()); commandCreatesNewSpan(RedisCommand.ZADD, () -> getConnection().zAdd(\"key\".getBytes(), null)); verify(mockRedisConnection()).zAdd(\"key\".getBytes(), null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> T instanceFor(Class<T> type) { try { return parentContext.getBean(type); } catch (NoSuchBeanDefinitionException e) { Map<String, T> beans = parentContext.getBeansOfType(type); for (Entry<String, T> def : beans.entrySet()) { BeanDefinition definition = parentContext.getBeanFactory().getBeanDefinition(def.getKey()); if (isPrimary(definition) || hasGreaterRoleThanInfrastructure(definition)) { return def.getValue(); } } throw e; } }### Assistant: @Test public void shouldSupportOtherStereotypeAnnotations() { SpecialImplementation component = container.instanceFor(SpecialImplementation.class); assertNotNull(\"can instantiate\", component); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String formatAll(Object[] parameters) { return super.formatAll(Arrays.asList(parameters)); }### Assistant: @Test public void testFormatAllShouldHandleSingleValueCorrectly() { final Object[] parameters = new Object[] { 12.45 }; String result = underTest.formatAll(parameters); assertThat(result).isEqualTo(\"12.45\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkAttributeSemantics(PerunSessionImpl sess, User user, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException { Integer uid = attribute.valueAsInteger(); String uidNamespace = attribute.getFriendlyNameParameter(); if (uid == null) { throw new WrongReferenceAttributeValueException(attribute, \"Attribute was not filled, therefore there is nothing to be checked.\"); } Attribute minUidAttribute; Attribute maxUidAttribute; try { minUidAttribute = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, uidNamespace, A_E_namespace_minUID); maxUidAttribute = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, uidNamespace, A_E_namespace_maxUID); } catch (AttributeNotExistsException e) { throw new ConsistencyErrorException(\"minUid and maxUid attributes are required\", e); } Integer min = minUidAttribute.valueAsInteger(); Integer max = maxUidAttribute.valueAsInteger(); if(min == null) { throw new WrongReferenceAttributeValueException(attribute, minUidAttribute); } if (max == null) { throw new WrongReferenceAttributeValueException(attribute, maxUidAttribute); } if (uid < min) { throw new WrongReferenceAttributeValueException(attribute, minUidAttribute, user, null, uidNamespace, null, \"UID \" + uid + \" is lesser than min \" + min); } if (uid > max) { throw new WrongReferenceAttributeValueException(attribute, maxUidAttribute, user, null, uidNamespace, null, \"UID \" + uid + \" is higher than max \" + max); } List<User> usersWithUid = sess.getPerunBl().getUsersManagerBl().getUsersByAttribute(sess, attribute); usersWithUid.remove(user); if (!usersWithUid.isEmpty()) { if(usersWithUid.size() > 1) throw new ConsistencyErrorException(\"FATAL ERROR: Duplicated UID detected.\" + attribute + \" \" + usersWithUid); throw new WrongReferenceAttributeValueException(attribute, \"UID \" + attribute.getValue() + \" is already occupied by \" + usersWithUid.get(0) + \". We can't set it for \" + user + \".\"); } }### Assistant: @Test(expected = WrongReferenceAttributeValueException.class) public void testCheckWithNullWithNullMinUid() throws Exception { System.out.println(\"testCheckWithNullWithNullMinUid()\"); minUid.setValue(null); maxUid.setValue(6); attributeToCheck.setValue(5); classInstance.checkAttributeSemantics(session, user, attributeToCheck); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Response addInstance( String applicationName, String parentInstancePath, Instance instance ) { if( parentInstancePath == null ) this.logger.fine( \"Request: add root instance \" + instance.getName() + \" in \" + applicationName + \".\" ); else this.logger.fine( \"Request: add instance \" + instance.getName() + \" under \" + parentInstancePath + \" in \" + applicationName + \".\" ); String lang = lang( this.manager ); Response response; try { ManagedApplication ma = this.manager.applicationMngr().findManagedApplicationByName( applicationName ); if( ma == null ) { response = handleError( Status.NOT_FOUND, new RestError( REST_INEXISTING, application( applicationName )), lang ).build(); } else { Graphs graphs = ma.getApplication().getTemplate().getGraphs(); String componentName = null; if( instance.getComponent() != null ) componentName = instance.getComponent().getName(); Component realComponent; if( componentName == null ) { response = handleError( Status.NOT_FOUND, new RestError( REST_MISSING_PROPERTY, value( \"component\" )), lang ).build(); } else if((realComponent = ComponentHelpers.findComponent( graphs, componentName )) == null ) { response = handleError( Status.NOT_FOUND, new RestError( REST_INEXISTING, component( componentName )), lang ).build(); } else { instance.setComponent( realComponent ); InstanceHelpers.fixOverriddenExports( instance ); Instance parentInstance = InstanceHelpers.findInstanceByPath( ma.getApplication(), parentInstancePath ); this.manager.instancesMngr().addInstance( ma, parentInstance, instance ); response = Response.ok().build(); } } } catch( ImpossibleInsertionException | IOException e ) { response = RestServicesUtils.handleError( Status.FORBIDDEN, new RestError( ErrorCode.REST_UNDETAILED_ERROR, e ), lang ).build(); } return response; }### Assistant: @Test public void testAddInstance_inexstingParentInstance() throws Exception { Instance newMysql = new Instance( \"mysql-2\" ).component( this.app.getMySql().getComponent()); Response resp = this.resource.addInstance( \"inexisting\", \"/bip/bip\", newMysql ); Assert.assertEquals( Status.NOT_FOUND.getStatusCode(), resp.getStatus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String replaceWildcards(final String input) { if (input == null) { return null; } else { return input.replace(ESCAPE, ESCAPE + ESCAPE) .replace(WILDCARD_ALL_REPLACEMENT, ESCAPE + WILDCARD_ALL_REPLACEMENT) .replace(WILDCARD_SINGLE_REPLACEMENT, ESCAPE + WILDCARD_SINGLE_REPLACEMENT) .replace(WILDCARD_ALL, WILDCARD_ALL_REPLACEMENT) .replace(WILDCARD_SINGLE, WILDCARD_SINGLE_REPLACEMENT); } }### Assistant: @Test public void convertAsteriskToPercentage() { final String input = \"TST-11*\"; assertThat(SearchUtil.replaceWildcards(input)).isEqualTo(\"TST-11%\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean filter(final Object datamodelObj) { if(datamodelObj instanceof DbArtifact){ return groupId.equals( ((DbArtifact)datamodelObj).getGroupId()); } return false; }### Assistant: @Test public void approveNull(){ GroupIdFilter filter = new GroupIdFilter(\"test\"); assertFalse(filter.filter(null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void start() throws Exception { client.start(); client.getZookeeperClient().blockUntilConnectedOrTimedOut(); leaderLatch = new LeaderLatch(client, latchpath, id); ClusterSyncManagerLeaderListener listener = new ClusterSyncManagerLeaderListener(failOverTask, getNode()); leaderLatch.addListener(listener); leaderLatch.start(); }### Assistant: @Test public void testStart() throws InterruptedException { ClusterSyncManager clusterSyncManager = new ClusterSyncManager(STREAMING.ZK_CLUSTER_MANAGER_PATH, \"id\", configurationContext, failOverTask,curatorFramework, zkUtils, clusterBarrierManager); doNothing().when(curatorFramework).start(); when(curatorFramework.getZookeeperClient().blockUntilConnectedOrTimedOut()).thenReturn(true); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getTitle() { return title; }### Assistant: @Test public void testGetDefaultTitleIfNull() { PullRequestInfo pullRequestInfo = new PullRequestInfo(null, IMAGE, TAG); assertEquals(pullRequestInfo.getTitle(), DEFAULT_TITLE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<String> getColumn(int c) { List<String> result = new ArrayList<>(getRowsCount()); for (List<String> row : data) { result.add(getOrEmpty(row, c)); } return result; }### Assistant: @Test public void getColumn() { assertThat(dt.getColumn(1), is(Arrays.asList(\"\", \"Audi\", \"Mercedes\", \"Volvo\", \"DAF\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void clear() { this.entries.clear(); this.value = null; this.dropDown.clear(); }### Assistant: @Test public void testClear() { presenter.setValue(\"entry2\"); presenter.clear(); verify(liveSearchDropDown).clear();; assertNull(presenter.getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Observable<Priority> priority() { return mPriority.asObservable(); }### Assistant: @Test public void testClickPriorityHigh() throws Exception { mPriorityPicker.priority().subscribe(mTestSubscriber); mHighPriorityView.performClick(); mTestSubscriber.assertValues(Priority.HIGH, Priority.HIGH); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Gson build() { return buildUpon().create(); }### Assistant: @Test public void convertWithExternalUseGson() throws Exception { Gson gson = AospGsonBuilder.build(); String converted = gson.toJson(new SomeEntity()); JSONObject obj = new JSONObject(converted); Assert.assertEquals(1, obj.getInt(\"id\")); Assert.assertEquals(\"hoge\", obj.getString(\"hoge\")); Assert.assertEquals(\"foo\", obj.getString(\"type\")); Assert.assertEquals(\"Android\", obj.getString(\"name\")); Assert.assertFalse(obj.has(\"should_excluded\")); Assert.assertFalse(obj.has(\"constant\")); Assert.assertFalse(obj.has(\"CONSTANT\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected int getVertexCount() { return this.molecule.getAtomCount(); }### Assistant: @Test public void getVertexCountTest() { Assert.assertEquals(mol.getAtomCount(), molSig.getVertexCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void swap(int i, int j) { swapRows(i, j); swapColumns(i, j); }### Assistant: @Test public void testSwap() { Matrix m = new DenseMatrix(10, 10); for (int i = 0; i < 10; i++) { for (int j = 0; j < 10; j++) { m.set(i, j, 10 * i + j); } } PivotedMatrix pm = new PivotedMatrix(m); pm.swap(3, 5); assertEquals(0, pm.viewDiagonal().minus( new DenseVector(new double[]{0, 11, 22, 55, 44, 33, 66, 77, 88, 99})).norm(1), 1.0e-10); pm.swap(2, 7); assertEquals(0, pm.viewDiagonal().minus( new DenseVector(new double[]{0, 11, 77, 55, 44, 33, 66, 22, 88, 99})).norm(1), 1.0e-10); pm.swap(5, 8); assertEquals(0, pm.viewColumn(4).minus( new DenseVector(new double[]{4.0,14.0,74.0,54.0,44.0,84.0,64.0,24.0,34.0,94.0})).norm(1), 1.0e-10); assertEquals(0, pm.viewDiagonal().minus( new DenseVector(new double[]{0, 11, 77, 55, 44, 88, 66, 22, 33, 99})).norm(1), 1.0e-10); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void serveMultiRangeStream(final InputStream inputStream, final OutputStream outputStream) throws IOException { int numberOfBufferReadBytes; byte[] buffer = new byte[BUFFER_SIZE]; while ((numberOfBufferReadBytes = inputStream.read(buffer)) != -1) { outputStream.write(buffer, 0, numberOfBufferReadBytes); outputStream.flush(); Statistics.addBytesSent(numberOfBufferReadBytes); } }### Assistant: @Test public void shouldServeTheSameBytesForSingeRangeGreaterThanTheBuffer() throws IOException { Range range = new Range(3, 1024); byte[] inputBytesSliced = sliceHelper.getSliceForRanges(inputBytes, Arrays.asList(range)); streamHelper.serveMultiRangeStream(inputStream, outputStream, range); byte[] out = outputStream.toByteArray(); assertThat(out.length, is(equalTo((int) rangeHelper.getTotalLength(Arrays.asList(range))))); assertThat(out, equalTo(inputBytesSliced)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ReadMode getReadMode() { return readMode; }### Assistant: @Test public void readRecords_rev2_4_2() { byte cla = (byte) 0x94; byte cmd = (byte) 0xB2; byte sfi = (byte) 0x08; byte p2 = (byte) ((byte) (sfi * 8) + 5); byte[] request2_4 = {cla, cmd, record_number, p2, 0x00}; readRecordsCmdBuilder = new ReadRecordsCmdBuild( PoClass.LEGACY, sfi, record_number, ReadRecordsCmdBuild.ReadMode.MULTIPLE_RECORD, expectedLength); apduRequest = readRecordsCmdBuilder.getApduRequest(); assertThat(apduRequest.getBytes()).isEqualTo(request2_4); assertThat(readRecordsCmdBuilder.getReadMode()) .isEqualTo(ReadRecordsCmdBuild.ReadMode.MULTIPLE_RECORD); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static DeletePolicyEntry of(final String policyId, final Label label, final DittoHeaders dittoHeaders) { return of(PolicyId.of(policyId), label, dittoHeaders); }### Assistant: @Test(expected = PolicyIdInvalidException.class) public void tryToCreateInstanceWithNullPolicyIdString() { DeletePolicyEntry.of((String) null, TestConstants.Policy.LABEL, TestConstants.EMPTY_DITTO_HEADERS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SdxL2ConnectionPoint(String name, ConnectPoint cPoint, List<VlanId> vlans, MacAddress ceMac) { this.name = name; this.cPoint = cPoint; this.vlanIds = vlans; this.ceMac = ceMac; }### Assistant: @Test public void testSdxL2ConnectionPoint9c() { exceptionname.expect(IllegalStateException.class); exceptionname.expectMessage(\"Names cannot contain some special characters\"); SdxL2ConnectionPoint.sdxl2ConnectionPoint(\"NA3,elementId=50\", CP3, VLANS3, CEMAC3); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Interval[] getIntervals() { checkTimeRepresentationInterval(); Object res = getTimeSetArray(); if (res == null) { return new Interval[0]; } return (Interval[]) res; }### Assistant: @Test public void testGetIntervals() { GraphStore store = getIntervalGraphStore(); Interval i1 = new Interval(1.0, 2.0); Interval i2 = new Interval(3.0, 4.0); NodeImpl node = new NodeImpl(\"0\", store); node.addInterval(i1); node.addInterval(i2); Assert.assertEquals(node.getIntervals(), new Interval[] { i1, i2 }); node.removeInterval(i1); Assert.assertEquals(node.getIntervals(), new Interval[] { i2 }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int hashCode() { int result = 17; result += 31 * result + _a.hashCode(); result += 31 * result + _b.hashCode(); result += 31 * result + _c.hashCode(); return result; }### Assistant: @Test public void testSimpleHash() { final Rectangle3 rect1 = new Rectangle3(Vector3.ZERO, Vector3.UNIT_Y, Vector3.UNIT_X); final Rectangle3 rect2 = new Rectangle3(Vector3.ZERO, Vector3.UNIT_Y, Vector3.UNIT_X); final Rectangle3 rect3 = new Rectangle3(Vector3.ZERO, Vector3.UNIT_Y, Vector3.UNIT_Z); assertTrue(rect1.hashCode() == rect2.hashCode()); assertTrue(rect1.hashCode() != rect3.hashCode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<FrameworkMethod> resolve(FrameworkMethod testMethod, UseDataProvider useDataProvider) { checkNotNull(testMethod, \"testMethod must not be null\"); checkNotNull(useDataProvider, \"useDataProvider must not be null\"); List<TestClass> dataProviderLocations = findDataProviderLocations(testMethod, useDataProvider.location()); return findDataProviderMethods(dataProviderLocations, testMethod.getName(), useDataProvider.value()); }### Assistant: @Test(expected = NullPointerException.class) public void testResolveShouldThrowNullPointerExceptionIfUseDataProviderIsNull() { underTest.resolve(testMethod, null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ByteBuffer borrow(final int size, boolean zeroed) { final int requiredCapacity = PowerOf2Util.align(size, Env.osPageSize()); ByteBuffer byteBuffer = bytesPool.get(); if (byteBuffer == null || requiredCapacity > byteBuffer.capacity()) { byteBuffer = direct ? ByteBuffer.allocateDirect(requiredCapacity) : ByteBuffer.allocate(requiredCapacity); } else { bytesPool.set(null); if (zeroed) { ByteUtil.zeros(byteBuffer, 0, size); } byteBuffer.clear(); } byteBuffer.limit(size); return byteBuffer; }### Assistant: @Test public void shouldBorrowOnlyBuffersOfTheCorrectType() { Assert.assertEquals(isDirect, pool.borrow(0, zeroed).isDirect()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void updateRequiredFieldsAccordingToVisibility( ActionRequest actionRequest, DDMForm ddmForm, DDMFormValues ddmFormValues, Locale locale) throws Exception { DDMFormEvaluatorEvaluateResponse ddmFormEvaluatorEvaluateResponse = evaluate(actionRequest, ddmForm, ddmFormValues, locale); Set<String> invisibleFields = getInvisibleFields( ddmFormEvaluatorEvaluateResponse); Set<String> fieldsFromDisabledPages = getFieldNamesFromDisabledPages( ddmFormEvaluatorEvaluateResponse, getDDMFormLayout(actionRequest)); invisibleFields.addAll(fieldsFromDisabledPages); removeValue(ddmFormValues, invisibleFields); removeDDMValidationExpression( ddmForm.getDDMFormFields(), invisibleFields); List<DDMFormField> requiredFields = getRequiredFields(ddmForm); if (requiredFields.isEmpty() || invisibleFields.isEmpty()) { return; } removeRequiredProperty(invisibleFields, requiredFields); }### Assistant: @Test public void testRequiredAndInvisibleField() throws Exception { mockDDMFormEvaluator( HashMapBuilder.<String, Object>put( \"visible\", false ).build()); _addRecordMVCCommandHelper.updateRequiredFieldsAccordingToVisibility( _actionRequest, _ddmForm, _ddmFormValues, LocaleUtil.US); Assert.assertFalse(_ddmFormField.isRequired()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void increment(HystrixRollingNumberEvent type) { getCurrentBucket().getAdder(type).increment(); }### Assistant: @Test public void testCreatesBuckets() { MockedTime time = new MockedTime(); try { HystrixRollingNumber counter = new HystrixRollingNumber(time, 200, 10); assertEquals(200, counter.timeInMilliseconds); assertEquals(10, counter.numberOfBuckets); assertEquals(20, counter.bucketSizeInMillseconds); assertEquals(0, counter.buckets.size()); for (int i = 0; i < counter.numberOfBuckets; i++) { counter.increment(HystrixRollingNumberEvent.SUCCESS); time.increment(counter.bucketSizeInMillseconds); } assertEquals(10, counter.buckets.size()); counter.increment(HystrixRollingNumberEvent.SUCCESS); assertEquals(10, counter.buckets.size()); } catch (Exception e) { e.printStackTrace(); fail(\"Exception: \" + e.getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static GetFeature parse( Map<String, String> kvpParams, Map<String, String> nsMap ) throws Exception { Version version = Version.parseVersion( KVPUtils.getRequired( kvpParams, \"VERSION\" ) ); GetFeature result = null; if ( VERSION_100.equals( version ) ) { result = parse100( kvpParams, nsMap ); } else if ( VERSION_110.equals( version ) ) { result = parse110( kvpParams ); } else if ( VERSION_200.equals( version ) ) { result = parse200( kvpParams ); } else { String msg = Messages.get( \"UNSUPPORTED_VERSION\", version, Version.getVersionsString( VERSION_100, VERSION_110, VERSION_200 ) ); throw new InvalidParameterValueException( msg ); } return result; }### Assistant: @Test public void test200Example10() throws Exception { GetFeature request = parse( \"wfs200/example10.kvp\" ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<String, StubDescriptor> modify(Map<String, StubDescriptor> stubDescriptors) { Map<String, StubDescriptor> updated; updated = doTheMoving(direction, groupName, stubDescriptors, request); return updated; }### Assistant: @Test public void testDoChangeShouldNotMoveTheFirstStubConfigurationToUpByOne() { String[] expectedGroupnames = normalStubDescriptors.keySet().toArray(new String[normalStubDescriptors.size()]); underTest = new ChangeOrderCommand(1, GROUPNAME_FIRST, request, urlAccessLogMessageAssembler); Map<String, StubDescriptor> result = underTest.modify(normalStubDescriptors); String[] resultGroupnames = result.keySet().toArray(new String[result.size()]); Assert.assertEquals(resultGroupnames, expectedGroupnames); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static long convertToLong(final String val) { return convertToLong(val, 0); }### Assistant: @Test public void testConvertToLongOnDefaultValue() { final Object[][] testParameters = new Object[][] {{\"1\", 0L, 1L}, {\"10\", 1L, 10L}, {\"100\", 2L, 100L}, {\"Not01\", 0L, 0L}, {\"Not02\", 1L, 1L}, {\"Not03\", 2L, 2L}}; assertEquals(0, ParsingUtils.convertToLong(null, 0)); assertEquals(1, ParsingUtils.convertToLong(null, 1)); for (final Object[] testParameter : testParameters) { long expected = (Long) testParameter[2]; String val = (String) testParameter[0]; long defaultValue = (Long) testParameter[1]; assertEquals(expected, ParsingUtils.convertToLong(val, defaultValue)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) throws Exception { List<Class<?>> groups = new ArrayList<Class<?>>(); String methodClassName = clazz.getName() + \"$\" + toUpperMethoName(methodName); Class<?> methodClass = null; try { methodClass = Class.forName(methodClassName, false, Thread.currentThread().getContextClassLoader()); groups.add(methodClass); } catch (ClassNotFoundException e) { } Set<ConstraintViolation<?>> violations = new HashSet<ConstraintViolation<?>>(); Method method = clazz.getMethod(methodName, parameterTypes); Class<?>[] methodClasses = null; if (method.isAnnotationPresent(MethodValidated.class)){ methodClasses = method.getAnnotation(MethodValidated.class).value(); groups.addAll(Arrays.asList(methodClasses)); } groups.add(0, Default.class); groups.add(1, clazz); Class<?>[] classgroups = groups.toArray(new Class[0]); Object parameterBean = getMethodParameterBean(clazz, method, arguments); if (parameterBean != null) { violations.addAll(validator.validate(parameterBean, classgroups )); } for (Object arg : arguments) { validate(violations, arg, classgroups); } if (!violations.isEmpty()) { logger.error(\"Failed to validate service: \" + clazz.getName() + \", method: \" + methodName + \", cause: \" + violations); throw new ConstraintViolationException(\"Failed to validate service: \" + clazz.getName() + \", method: \" + methodName + \", cause: \" + violations, violations); } }### Assistant: @Test(expected = NoSuchMethodException.class) public void testItWithNonExistMethod() throws Exception { URL url = URL.valueOf(\"test: JValidator jValidator = new JValidator(url); jValidator.validate(\"nonExistingMethod\", new Class<?>[]{String.class}, new Object[]{\"arg1\"}); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void mergeDefaults(PDAcroForm mergeThis, PDAcroForm intoThis) { if (!intoThis.isNeedAppearances() && mergeThis.isNeedAppearances()) { intoThis.setNeedAppearances(true); } String da = mergeThis.getDefaultAppearance(); if (isBlank(intoThis.getDefaultAppearance()) && !isBlank(da)) { intoThis.setDefaultAppearance(da); } int quadding = mergeThis.getCOSObject().getInt(COSName.Q); if ((quadding >= 0 && quadding <= 2) && !intoThis.getCOSObject().containsKey(COSName.Q)) { intoThis.setQuadding(quadding); } final COSDictionary formResources = ofNullable( intoThis.getCOSObject().getDictionaryObject(COSName.DR, COSDictionary.class)) .orElseGet(COSDictionary::new); ofNullable(mergeThis.getCOSObject().getDictionaryObject(COSName.DR, COSDictionary.class)).ifPresent(dr -> { for (COSName currentKey : dr.keySet()) { ofNullable(dr.getDictionaryObject(currentKey)).ifPresent(value -> { if (value instanceof COSDictionary) { mergeResourceDictionaryValue(formResources, (COSDictionary) value, currentKey); } else if (value instanceof COSArray) { mergeResourceArrayValue(formResources, (COSArray) value, currentKey); } else { LOG.warn(\"Unsupported resource dictionary type {}\", value); } }); } }); intoThis.getCOSObject().setItem(COSName.DR, formResources); LOG.debug(\"Merged AcroForm dictionary\"); }### Assistant: @Test public void mergeFormsWithProcSet() throws IOException { try (PDDocument anotherDoc = PDFParser.parse(SeekableSources.inMemorySeekableSourceFrom( getClass().getClassLoader().getResourceAsStream(\"pdf/forms/simple_form_proc_set.pdf\")))) { PDAcroForm destination = new PDAcroForm(new PDDocument()); AcroFormUtils.mergeDefaults(anotherDoc.getDocumentCatalog().getAcroForm(), destination); COSBase procSet = destination.getDefaultResources().getCOSObject().getItem(COSName.PROC_SET); assertNotNull(procSet); assertEquals(2, ((COSArray) procSet).size()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Iterator<Vector> iterator() { return new ARFFIterator(buff, model); }### Assistant: @Test public void testDense() throws Exception { ARFFModel model = new MapBackedARFFModel(); Iterable<Vector> iterable = new ARFFVectorIterable(SAMPLE_DENSE_ARFF, model); Vector firstVector = iterable.iterator().next(); assertEquals(1.0, firstVector.get(0), 0); assertEquals(65.0, firstVector.get(1), 0); assertEquals(1.0, firstVector.get(3), 0); assertEquals(1.0, firstVector.get(4), 0); int count = 0; for (Vector vector : iterable) { assertTrue(\"Vector is not dense\", vector instanceof DenseVector); count++; } assertEquals(5, count); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static PropertyPath fromPathString(final String propertyPath) { if (propertyPath == null || propertyPath.isEmpty()) { return EMPTY_INSTANCE; } else { return PropertyPath.fromParts(propertyPath.split(DELIMITER_REGEX)); } }### Assistant: @Test void testSerde() throws IOException { doSerdeTest(PropertyPath.fromPathString(\"stroom.node.name\"), PropertyPath.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public RequestLine parseRequestLine(final CharArrayBuffer buffer) throws ParseException { Args.notNull(buffer, \"Char array buffer\"); final ParserCursor cursor = new ParserCursor(0, buffer.length()); this.tokenizer.skipWhiteSpace(buffer, cursor); final String method = this.tokenizer.parseToken(buffer, cursor, BLANKS); if (TextUtils.isEmpty(method)) { throw new ParseException(\"Invalid request line\", buffer, cursor.getLowerBound(), cursor.getUpperBound(), cursor.getPos()); } this.tokenizer.skipWhiteSpace(buffer, cursor); final String uri = this.tokenizer.parseToken(buffer, cursor, BLANKS); if (TextUtils.isEmpty(uri)) { throw new ParseException(\"Invalid request line\", buffer, cursor.getLowerBound(), cursor.getUpperBound(), cursor.getPos()); } final ProtocolVersion ver = parseProtocolVersion(buffer, cursor); this.tokenizer.skipWhiteSpace(buffer, cursor); if (!cursor.atEnd()) { throw new ParseException(\"Invalid request line\", buffer, cursor.getLowerBound(), cursor.getUpperBound(), cursor.getPos()); } return new RequestLine(method, uri, ver); }### Assistant: @Test public void testRLParse() throws Exception { final CharArrayBuffer buf = new CharArrayBuffer(64); buf.clear(); buf.append(\"GET /stuff HTTP/1.1\"); RequestLine requestline = this.parser.parseRequestLine(buf); Assert.assertEquals(\"GET /stuff HTTP/1.1\", requestline.toString()); Assert.assertEquals(Method.GET.name(), requestline.getMethod()); Assert.assertEquals(\"/stuff\", requestline.getUri()); Assert.assertEquals(HttpVersion.HTTP_1_1, requestline.getProtocolVersion()); buf.clear(); buf.append(\" GET /stuff HTTP/1.1 \"); requestline = this.parser.parseRequestLine(buf); Assert.assertEquals(\"GET /stuff HTTP/1.1\", requestline.toString()); Assert.assertEquals(Method.GET.name(), requestline.getMethod()); Assert.assertEquals(\"/stuff\", requestline.getUri()); Assert.assertEquals(HttpVersion.HTTP_1_1, requestline.getProtocolVersion()); buf.clear(); buf.append(\"\\rGET /stuff HTTP/1.1\"); requestline = this.parser.parseRequestLine(buf); Assert.assertEquals(Method.GET.name(), requestline.getMethod()); Assert.assertEquals(\"/stuff\", requestline.getUri()); Assert.assertEquals(HttpVersion.HTTP_1_1, requestline.getProtocolVersion()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int sizeof() { return map.length; }### Assistant: @Test public void testBuilder() { assertEquals(630, Builder.onePercentError(1).sizeof()); assertEquals(630, Builder.onePercentError(99).sizeof()); assertEquals(630, Builder.onePercentError(100).sizeof()); assertEquals(630, Builder.onePercentError(101).sizeof()); assertEquals(759, Builder.onePercentError(3375).sizeof()); assertEquals(995, Builder.onePercentError(9999).sizeof()); assertEquals(995, Builder.onePercentError(10000).sizeof()); assertEquals(996, Builder.onePercentError(10001).sizeof()); assertEquals(7501, Builder.onePercentError(305028).sizeof()); assertEquals(19272, Builder.onePercentError(1000000).sizeof()); assertEquals(23027, Builder.onePercentError(1250000).sizeof()); assertEquals(74962, Builder.onePercentError(5000000).sizeof()); assertEquals(81372, Builder.onePercentError(5500000).sizeof()); assertEquals(131030, Builder.onePercentError(9500000).sizeof()); assertEquals(137073, Builder.onePercentError(10000000).sizeof()); assertEquals(137073, Builder.onePercentError(10000001).sizeof()); assertEquals(355055, Builder.onePercentError(30000000).sizeof()); assertEquals(573038, Builder.onePercentError(50000000).sizeof()); assertEquals(822207, Builder.onePercentError(75000000).sizeof()); assertEquals(1071377, Builder.onePercentError(100000000).sizeof()); assertEquals(1167722, Builder.onePercentError(110000000).sizeof()); assertEquals(1264067, Builder.onePercentError(120000000).sizeof()); assertEquals(2500000, Builder.onePercentError(240000000).sizeof()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NotNull @Override public Into into(@NotNull final String tableName) { return into(null, tableName); }### Assistant: @Test public void intoDatabaseTable_returnsNotNullValue() { InsertOrIgnoreImpl insertOrIgnore = new InsertOrIgnoreImpl(); Into result = insertOrIgnore.into(\"my_database\", \"my_table\"); assertThat(result, is(notNullValue())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NotNull static URI resolveRelativeUri(final @NotNull URI mesosUri, final String location) { final URI relativeUri = mesosUri.resolve(location); try { return new URI( relativeUri.getScheme(), relativeUri.getUserInfo(), relativeUri.getHost(), relativeUri.getPort(), mesosUri.getPath(), mesosUri.getQuery(), mesosUri.getFragment() ); } catch (URISyntaxException e) { throw new RuntimeException(e); } }### Assistant: @Test public void testResolveRelativeUri_usesSchemeHostAndPortFromLocation() throws Exception { final URI mesosUri = URI.create(\"http: final String location = \" final URI actual = MesosClient.resolveRelativeUri(mesosUri, location); assertThat(actual).isEqualTo(URI.create(\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Title getTitle() throws WikiTitleParsingException { Session session = wiki.__getHibernateSession(); session.beginTransaction(); String name = hibernatePage.getName(); session.getTransaction().commit(); Title title = new Title(name); return title; }### Assistant: @Test public void testGetTitle() throws Exception { Title t = page.getTitle(); assertNotNull(t); assertEquals(\"testing the title\", A_FAMOUS_PAGE, t.getPlainTitle()); assertEquals(\"testing the pageId\", A_FAMOUS_PAGE_ID, page.getPageId()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean removeNode(final Node node) { autoWriteLock(); try { nodeStore.checkNonNullNodeObject(node); for (EdgeStore.EdgeInOutIterator edgeIterator = edgeStore.edgeIterator((NodeImpl) node); edgeIterator .hasNext();) { edgeIterator.next(); edgeIterator.remove(); } return nodeStore.remove(node); } finally { autoWriteUnlock(); } }### Assistant: @Test public void testRemoveNode() { GraphStore graphStore = GraphGenerator.generateSmallMultiTypeGraphStore(); Node[] nodes = graphStore.getNodes().toArray(); for (Node n : nodes) { Edge[] edges = graphStore.getEdges(n).toArray(); Assert.assertTrue(graphStore.removeNode(n)); Assert.assertFalse(graphStore.contains(n)); for (Edge e : edges) { Assert.assertFalse(graphStore.contains(e)); } } Assert.assertEquals(graphStore.getNodeCount(), 0); Assert.assertEquals(graphStore.getEdgeCount(), 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setTo( final String to ) { this.to = to; }### Assistant: @Test public void testSetTo() throws Exception { sec.setTo( \"to\" ); assertEquals( \"to\", sec.getTo() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Set<Asset> visit(Container container) { Set<Asset> assets = new HashSet<>(); assets.addAll(linkAssetToComponent(container.getId())); assets.addAll(visitRows(container.getRows())); return assets; }### Assistant: @Test public void should_return_list_of_asset_needed_by_widgets_in_formcontainer() throws Exception { Component component1 = mockComponentFor(aWidget(), UUID.randomUUID().toString(), anAsset().withName(\"myfile.js\").withType(AssetType.JAVASCRIPT)); Component component2 = mockComponentFor(aWidget(), UUID.randomUUID().toString(), anAsset().withName(\"myfile.css\").withType(AssetType.CSS)); when(widgetRepository.get(\"pbFormContainer\")).thenReturn(aWidget().build()); when(widgetRepository.get(\"pbContainer\")).thenReturn(aWidget().build()); Set<Asset> assets = assetVisitor.visit(aFormContainer().with( aContainer().with(component1, component2)).build()); assertThat(assets).extracting(\"name\").containsOnly(\"myfile.js\", \"myfile.css\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void applyConfigUpdate(Config config) throws IOException { ConfigChange[] configEnhancementsPatch = configEnhancementPatch(); applyChanges(config, configEnhancementsPatch); config.save(); }### Assistant: @Test void serverConfigIsPatchedCorrectly() throws IOException, IllegalAccessException { Path config = tempDir.resolve(\"oldconfig.yml\"); Files.copy(oldConfig.toPath(), config, StandardCopyOption.REPLACE_EXISTING); PlanConfig planConfig = new PlanConfig(config.toFile(), null, null, new TestPluginLogger()); UNDER_TEST.applyConfigUpdate(planConfig); copyMissingFrom(planConfig, newConfig); Collection<Setting> settings = ConfigSettingKeyTest.getServerSettings(); ConfigSettingKeyTest.assertValidDefaultValuesForAllSettings(planConfig, settings); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void apply(TokenSequence tokenSequence) { int startIndex = 0; if (tokenSequence.isWithRoot()) startIndex += 1; boolean lowerCaseNextWord = true; int index = -1; for (Token token : tokenSequence) { index++; if (index < startIndex) continue; if (token.getText().length() == 0) continue; if (lowerCaseNextWord) { char firstChar = token.getText().charAt(0); if (Character.isUpperCase(firstChar)) { Set<String> possibleWords = TalismaneSession.get(sessionId).getDiacriticizer().diacriticize(token.getText()); if (possibleWords.size() > 0) token.setText(possibleWords.iterator().next()); } lowerCaseNextWord = false; } if (Tokeniser.getTokenSeparators(sessionId).matcher(token.getText()).matches() && !noUppercasePunctuation.matcher(token.getText()).matches()) { lowerCaseNextWord = true; } } }### Assistant: @Test public void testReplaceLongWord() throws Exception { Diacriticizer diacriticizer = mock(Diacriticizer.class); when(diacriticizer.diacriticize(\"Aujourd'hui\")).thenReturn(new HashSet<>(Arrays.asList(\"aujourd'hui\"))); when(diacriticizer.diacriticize(\"Parce que\")).thenReturn(new HashSet<>(Arrays.asList(\"parce que\"))); System.setProperty(\"config.file\", \"src/test/resources/test.conf\"); ConfigFactory.invalidateCaches(); final Config config = ConfigFactory.load(); final String sessionId = \"test\"; TalismaneSession.get(sessionId).setDiacriticizer(diacriticizer); LowercaseKnownFirstWordFilter filter = new LowercaseKnownFirstWordFilter(sessionId); String text = \"Aujourd'hui il vient. Parce que...\"; Sentence sentence = new Sentence(text, sessionId); TokenSequence tokenSequence = new TokenSequence(sentence, sessionId); tokenSequence.addToken(\"\".length(), \"Aujourd'hui\".length()); tokenSequence.addToken(\"Aujourd'hui \".length(), \"Aujourd'hui il\".length()); tokenSequence.addToken(\"Aujourd'hui il \".length(), \"Aujourd'hui il vient\".length()); tokenSequence.addToken(\"Aujourd'hui il vient\".length(), \"Aujourd'hui il vient.\".length()); tokenSequence.addToken(\"Aujourd'hui il vient. \".length(), \"Aujourd'hui il vient. Parce que\".length()); tokenSequence.addToken(\"Aujourd'hui il vient. Parce que\".length(), \"Aujourd'hui il vient. Parce que...\".length()); filter.apply(tokenSequence); System.out.println(tokenSequence); StringBuilder sb = new StringBuilder(); for (Token token : tokenSequence) { sb.append(token.getText()); sb.append('|'); } assertEquals(\"aujourd'hui|il|vient|.|parce que|...|\", sb.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected static HColumnDescriptor createLockFamily() { HColumnDescriptor desc = new HColumnDescriptor(ColumnUtil.LOCK_FAMILY_NAME); desc.setInMemory(true); desc.setMaxVersions(1); desc.setTimeToLive(HConstants.FOREVER); return desc; }### Assistant: @Test public void testCreateThemisLockFamily() throws Exception { HColumnDescriptor columnDesc = ThemisMasterObserver.createLockFamily(); checkLockFamilyDesc(columnDesc); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isValid(String value, ConstraintValidatorContext context) { if (value == null) { return allowNull; } else { return availableEnumNames.stream().anyMatch(o -> { if (ignoreCase) { return o.equalsIgnoreCase(value); } else { return o.equals(value); } }); } }### Assistant: @Test public void shouldFailForEmptyString() { EnumValidator enumValidator = createAndInitializeValidator(true, false); boolean valid = enumValidator.isValid(\"\", null); assertThat(valid, is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SendReceipt send(String emailId, Map<String, Object> recipient, Map<String, Object> emailData) throws SendWithUsException { return this.send(emailId, recipient, null, emailData); }### Assistant: @Test public void testSendWithVersionName() throws SendWithUsException { String versionName = \"\"; SendWithUsSendRequest request = new SendWithUsSendRequest() .setEmailId(EMAIL_ID).setRecipient(defaultRecipientParams) .setSender(defaultSenderParams).setEmailData(defaultDataParams) .setVersionName(versionName); SendReceipt sendReceipt = sendwithusAPI.send(request); assertSuccessfulAPIReceipt(sendReceipt); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Long create( String value ) { if (value == null) return null; try { return Long.valueOf(value.trim()); } catch (NumberFormatException err) { throw new ValueFormatException(value, getPropertyType(), GraphI18n.errorConvertingType.text(String.class.getSimpleName(), Long.class.getSimpleName(), value), err); } }### Assistant: @Test( expected = ValueFormatException.class ) public void shouldNotCreateLongFromUri() throws Exception { factory.create(new URI(\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onClose(KubernetesClientException cause) { if (cause != null) { synchronized (this.lock) { LOGGER.warn(\"Watcher stopped unexpectedly, will restart\", cause); this.watch = null; start(); } } }### Assistant: @Test public void shouldIgnoreCloseWithoutCause() { this.watcher.onClose(null); verify(this.mockWithNameResource, times(0)).watch(this.watcher); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public StubDescriptor parse(final Document document) { Element root = document.getDocumentElement(); StubDescriptorAttributes attributes = getStubDescriptorAttributes(root); List<DialogDescriptor> dialogDescriptors = getDialogDescriptors(document, root); List<InterceptorDescriptor> interceptorDescriptors = getInterceptorDescriptors(document, root); List<SequenceDescriptor> sequenceDescriptors = sequenceDescriptorParser.parse(document, root, dialogDescriptors); return new StubDescriptor(attributes, dialogDescriptors, interceptorDescriptors, sequenceDescriptors); }### Assistant: @Test public void testParseShouldReturnStubDescriptorAttributesWithDefaultActiveValue() { given(root.getAttribute(\"active\")).willReturn(\"\"); StubDescriptorAttributes expectedAttributes = new StubDescriptorAttributes(\"Default\", true); StubDescriptor actual = underTest.parse(document); assertEquals(actual.getAttributes().isActive(), expectedAttributes.isActive()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public long next() { long elapsed = getElapsedTime(); int sequence = getSequence(elapsed); log.debug(\"sequence id: {}\", sequence); if (sequence > SEQUENCE_MAX) { sleep(TimeUnit.MILLISECONDS.toMillis(2L)); elapsed = getElapsedTime(); sequence = getSequence(elapsed); if (sequence > SEQUENCE_MAX) { throw new CamflakeException(\"Failed to issue sequence id.\"); } } long id = (elapsed << 22) | (sequence << 16) | machineId; log.debug(\"unique id: {}\", id); return id; }### Assistant: @Test public void testNextWithRetryOnce() { final Instant execTime = Instant.ofEpochMilli(1L); final Instant execTime2 = Instant.ofEpochMilli(3L); new Expectations(Instant.class) { { Instant.now(); returns( execTime, execTime, execTime2 ); } }; Camflake camflake = new Camflake(new TestMachineId(), Instant.EPOCH); Deencapsulation.setField(camflake, \"counter\", new AtomicInteger(SEQUENCE_MAX)); long id = camflake.next(); assertThat(id, is(12582913L)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> T kthRecursive(final LinkedList<T> list, final int k) { if (k == 0) { return list.getFirst(); } return kthRecursive(new LinkedList<>(list.subList(1, list.size())), k - 1); }### Assistant: @Test public void shouldFindKthElementFromAListRecursive() throws Exception { LinkedList<Integer> numbers = linkedList(1, 2, 3, 4, 5); assertThat(P03.kthRecursive(numbers, 2), is(equalTo(3))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static List<LayoutToken> dehyphenize(List<LayoutToken> tokens) { return LayoutTokensUtil.dehyphenize(tokens); }### Assistant: @Test public void testDephynization_FalseTruncation_shouldReturnSameString() { assertThat(TextUtilities.dehyphenize(\"Nettop also relies on VMware Workstation for its VMM. Ultimately, since VMware is a closed-source product, it is impossible to verify this claim through open review.\"), is(\"Nettop also relies on VMware Workstation for its VMM. Ultimately, since VMware is a closed-source product, it is impossible to verify this claim through open review.\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private CAPDU parse() throws CAPDUParserException { parseMandatoryHeader(); if (capdu.length > MANDATORY_HEADER_LENGTH) { parseConditionalBody(); } if (le.length != 0) { return new CAPDU(cla, ins, p1, p2, data, Bytes.toInt(le[0])); } return new CAPDU(cla, ins, p1, p2, data); }### Assistant: @Test public void testCase2() throws CAPDUParserException { byte[] capdu = Hex.decode(\"20110101FF\"); CAPDU expected = new CAPDU(0x20, 0x11, 0x01, 0x01, 0xFF); CAPDU actual = CAPDUParser.parse(capdu); Assert.assertEquals(expected, actual); Assert.assertFalse(actual.isCase1()); Assert.assertTrue(actual.isCase2()); Assert.assertFalse(actual.isCase3()); Assert.assertFalse(actual.isCase4()); Assert.assertEquals(expected.getCla(), actual.getCla()); Assert.assertEquals(expected.getIns(), actual.getIns()); Assert.assertEquals(expected.getP1(), actual.getP1()); Assert.assertEquals(expected.getP2(), actual.getP2()); Assert.assertArrayEquals(expected.getData(), actual.getData()); Assert.assertArrayEquals(expected.getLe(), actual.getLe()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Deprecated public QueryByCriteria.Builder generateCriteria(Class<?> type, Map<String, String> formProps, boolean usePrimaryKeysOnly) { if (usePrimaryKeysOnly) { return getCollectionCriteriaFromMapUsingPrimaryKeysOnly(type, instantiateLookupDataObject(type), formProps).toQueryBuilder(); } else { return getCollectionCriteriaFromMap(type, instantiateLookupDataObject(type), formProps).toQueryBuilder(); } }### Assistant: @Test public void testGenerateCriteria_GreaterThanEqualDate() { String dateString = \"1/1/2010\"; DateTime date = DateTime.parse(dateString, formatter).withTimeAtStartOfDay(); Map<String, String> mapCriteria = new HashMap<String, String>(); mapCriteria.put(\"prop4\", SearchOperator.GREATER_THAN_EQUAL.op() + dateString); QueryByCriteria.Builder qbcBuilder = generator.generateCriteria(TestClass.class, mapCriteria, false); assertNotNull(qbcBuilder); QueryByCriteria qbc = qbcBuilder.build(); Predicate greaterThanEqual = qbc.getPredicate(); assertTrue(greaterThanEqual instanceof GreaterThanOrEqualPredicate); assertEquals(((GreaterThanOrEqualPredicate) greaterThanEqual).getValue().getValue(), date); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ResultContainer<ObjectRecord> searchObjects(FactSearchCriteria criteria) { SearchResult<ObjectDocument> searchResult = factSearchManager.searchObjects(criteria); if (searchResult.getCount() <= 0) { return ResultContainer.<ObjectRecord>builder().build(); } Iterator<UUID> idIterator = new MappingIterator<>(searchResult.getValues().iterator(), ObjectDocument::getId); Iterator<ObjectEntity> batchingIterator = new BatchingIterator<>(idIterator, objectManager::getObjects); Iterator<ObjectRecord> recordIterator = new MappingIterator<>(batchingIterator, objectRecordConverter::fromEntity); return ResultContainer.<ObjectRecord>builder() .setCount(searchResult.getCount()) .setValues(recordIterator) .build(); }### Assistant: @Test public void testSearchObjectsWithoutSearchResult() { FactSearchCriteria criteria = createFactSearchCriteria(); when(factSearchManager.searchObjects(criteria)).thenReturn(SearchResult.<ObjectDocument>builder().build()); ResultContainer<ObjectRecord> container = dao.searchObjects(criteria); assertEquals(0, container.getCount()); assertFalse(container.hasNext()); verify(factSearchManager).searchObjects(criteria); verifyNoInteractions(objectManager); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static XMLConfiguration createXmlConfiguration(final String fileName) { try { return new XMLConfiguration(IntegrityUtil.ensure(fileName, \"Must provide a file name\")); } catch (final ConfigurationException configurationException) { throw new RuntimeException(\"Trouble using file name [\" + fileName + \"]\", configurationException); } }### Assistant: @Test(expected = RuntimeException.class) public void test_createXmlConfiguration_emptyString() { XmlCredentialsUtil.createXmlConfiguration(\"\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void submitApplicationAttempt(FiCaSchedulerApp application, String userName) { submitApplicationAttempt(application, userName, false); }### Assistant: @Test public void testUserQueueAcl() throws Exception { LeafQueue d = stubLeafQueue((LeafQueue) queues.get(D)); final String user_d = \"user_d\"; final ApplicationAttemptId appAttemptId_0 = TestUtils .getMockApplicationAttemptId(0, 1); FiCaSchedulerApp app_0 = new FiCaSchedulerApp(appAttemptId_0, user_d, d, null, spyRMContext); d.submitApplicationAttempt(app_0, user_d); final ApplicationAttemptId appAttemptId_1 = TestUtils .getMockApplicationAttemptId(0, 2); FiCaSchedulerApp app_1 = new FiCaSchedulerApp(appAttemptId_1, user_d, d, null, spyRMContext); d.submitApplicationAttempt(app_1, user_d); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T9> get9() { return getAndCast(9); }### Assistant: @Test void get9() { assertEquals(m9, instance.get9()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void performQuery() { if (this.many) { if (this.options != null) { super.collection.deleteMany(this.bson, this.options); } else { super.collection.deleteMany(this.bson); } } else { if (this.options != null) { super.collection.deleteOne(this.bson, this.options); } else { super.collection.deleteOne(this.bson); } } }### Assistant: @Test void performSingleInsert() { MongoCollection<Document> collection = this.connector.getDatabase().getCollection(\"delete_query\"); collection.deleteMany(new BsonDocument()); assertEquals(0, collection.count()); Document sample = new Document(); sample.put(\"id\", 0); MongoInsertQuery insert = new MongoInsertQuery(collection, sample, null); insert.performQuery(); assertEquals(1, collection.count()); new MongoDeleteQuery(collection, new BsonDocument(), false, null).performQuery(); assertEquals(0, collection.count()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void orphanOriginalStormTemplate(String originalTemplateId, ItemManager itemMan) { if (!StringUtils.isEmpty(originalTemplateId)) { Item originalTemplate = itemMan.load(originalTemplateId); if (null == originalTemplate) { throw new EntityNotFoundException(String.format( \"Could not find template with ID '%s'. \" + \"Perhaps the template Item was deleted \" + \"between the time it was persisted and the time it was read?\", originalTemplateId)); } else { if (Type.storms.equals(originalTemplate.getType())) { boolean success = itemMan.orphan(originalTemplate); if (!success) { throw new PersistenceException( String.format( \"Could not orphan template with ID '%s'\", originalTemplateId ) ); } } } } }### Assistant: @Test(expected = PersistenceException.class) public void testThatItemManagerOrphanFailureThrowsException() { String id = \"foo\"; Item item = new Item(); item.setType(Type.storms); when(mockItemMan.load(id)).thenReturn(item); when(mockItemMan.orphan(item)).thenReturn(false); instance.orphanOriginalStormTemplate(id, mockItemMan); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Cache.Entry parseCacheHeaders(NetworkResponse response) { long now = System.currentTimeMillis(); Headers headers = response.headers; long serverDate = 0; long lastModified = 0; long serverExpires = 0; long softExpire = 0; long finalExpire = 0; long maxAge = 0; long staleWhileRevalidate = 0; boolean hasCacheControl = false; boolean mustRevalidate = false; String serverEtag = null; String headerValue; List<String> headerValues; headerValue = headers.get(\"Date\"); if (headerValue != null) { serverDate = parseDateAsEpoch(headerValue); } headerValues = headers.values(\"Cache-Control\"); if (headerValues != null && headerValues.size() > 0) { hasCacheControl = true; for (int i = 0; i < headerValues.size(); i++) { String[] tokens = headerValues.get(i).trim().split(\",\"); for (int j = 0; j < tokens.length; j++) { String token = tokens[j].trim(); if (token.equals(\"no-cache\") || token.equals(\"no-store\")) { return null; } else if (token.startsWith(\"max-age=\")) { try { maxAge = Long.parseLong(token.substring(8)); } catch (Exception e) { } } else if (token.startsWith(\"stale-while-revalidate=\")) { try { staleWhileRevalidate = Long.parseLong(token.substring(23)); } catch (Exception e) { } } else if (token.equals(\"must-revalidate\") || token.equals(\"proxy-revalidate\")) { mustRevalidate = true; } } } } headerValue = headers.get(\"Expires\"); if (headerValue != null) { serverExpires = parseDateAsEpoch(headerValue); } headerValue = headers.get(\"Last-Modified\"); if (headerValue != null) { lastModified = parseDateAsEpoch(headerValue); } serverEtag = headers.get(\"ETag\"); if (hasCacheControl) { softExpire = now + maxAge * 1000; finalExpire = mustRevalidate ? softExpire : softExpire + staleWhileRevalidate * 1000; } else if (serverDate > 0 && serverExpires >= serverDate) { softExpire = now + (serverExpires - serverDate); finalExpire = softExpire; } Cache.Entry entry = new Cache.Entry(); entry.data = response.data; entry.etag = serverEtag; entry.softTtl = softExpire; entry.ttl = finalExpire; entry.serverDate = serverDate; entry.lastModified = lastModified; entry.responseHeaders = headers; return entry; }### Assistant: @Test public void parseCacheHeaders_normalExpire() { long now = System.currentTimeMillis(); headers.put(\"Date\", rfc1123Date(now)); headers.put(\"Last-Modified\", rfc1123Date(now - ONE_DAY_MILLIS)); headers.put(\"Expires\", rfc1123Date(now + ONE_HOUR_MILLIS)); NetworkResponse response = new NetworkResponse(0, new byte[0], Headers.of(headers), 0); Cache.Entry entry = HttpHeaderParser.parseCacheHeaders(response); assertNotNull(entry); assertNull(entry.etag); assertEqualsWithin(entry.serverDate, now, ONE_MINUTE_MILLIS); assertEqualsWithin(entry.lastModified, (now - ONE_DAY_MILLIS), ONE_MINUTE_MILLIS); assertTrue(entry.softTtl >= (now + ONE_HOUR_MILLIS)); assertTrue(entry.ttl == entry.softTtl); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static PegRule<List<Object>> sequence(final PegRule<?>... rules) { return sequence(Arrays.asList(rules)); }### Assistant: @Test public void sequence() throws PegNoMatchFoundException { Assertions.assertEquals(List.of(\"hi\", \"ho\", \"ha\"), sequence.parse(\"hihoha\").getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> addGroupToServiceAccount(String token, ServiceAccountGroup serviceAccountGroup, UserDetails userDetails) { OIDCGroup oidcGroup = new OIDCGroup(); log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to Service Account\"). put(LogMessage.MESSAGE, String.format (\"Trying to add Group to Service Account\")). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); if (!userDetails.isAdmin()) { token = tokenUtils.getSelfServiceToken(); } if(!isSvcaccPermissionInputValid(serviceAccountGroup.getAccess())) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Invalid value specified for access. Valid values are read, reset, deny\\\"]}\"); } if (serviceAccountGroup.getAccess().equalsIgnoreCase(\"reset\")) { serviceAccountGroup.setAccess(TVaultConstants.WRITE_POLICY); } String groupName = serviceAccountGroup.getGroupname(); String svcAccName = serviceAccountGroup.getSvcAccName(); String access = serviceAccountGroup.getAccess(); if (TVaultConstants.USERPASS.equals(vaultAuthMethod)) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"This operation is not supported for Userpass authentication. \\\"]}\"); } groupName = (groupName !=null) ? groupName.toLowerCase() : groupName; access = (access != null) ? access.toLowerCase(): access; boolean canAddGroup = hasAddOrRemovePermission(userDetails, svcAccName, token); if(canAddGroup){ if (!ifInitialPwdReset(token, userDetails, serviceAccountGroup.getSvcAccName())) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to ServiceAccount\"). put(LogMessage.MESSAGE, \"Failed to add group permission to Service account. Initial password reset is pending for this Service Account.\"). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Failed to add group permission to Service account. Initial password reset is pending for this Service Account. Please reset the password and try again.\\\"]}\"); } String policy = TVaultConstants.EMPTY; policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(access)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to Service Account\"). put(LogMessage.MESSAGE, String.format (\"policy is [%s]\", policy)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); String r_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.READ_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String w_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.WRITE_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String d_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.DENY_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String o_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.SUDO_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to Service Account\"). put(LogMessage.MESSAGE, String.format (\"Policies are, read - [%s], write - [%s], deny -[%s], owner - [%s]\", r_policy, w_policy, d_policy, o_policy)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); Response groupResp = new Response(); if (TVaultConstants.LDAP.equals(vaultAuthMethod)) { groupResp = reqProcessor.process(\"/auth/ldap/groups\", \"{\\\"groupname\\\":\\\"\" + groupName + \"\\\"}\", token); } else if (TVaultConstants.OIDC.equals(vaultAuthMethod)) { oidcGroup = oidcUtil.getIdentityGroupDetails(groupName, token); if (oidcGroup != null) { groupResp.setHttpstatus(HttpStatus.OK); groupResp.setResponse(oidcGroup.getPolicies().toString()); } else { groupResp.setHttpstatus(HttpStatus.BAD_REQUEST); } } log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to ServiceAccount\"). put(LogMessage.MESSAGE, String.format (\"userResponse status is [%s]\", groupResp.getHttpstatus())). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); String responseJson=\"\"; List<String> policies = new ArrayList<>(); List<String> currentpolicies = new ArrayList<>(); if(HttpStatus.OK.equals(groupResp.getHttpstatus())){ responseJson = groupResp.getResponse(); try { ObjectMapper objMapper = new ObjectMapper(); if (TVaultConstants.LDAP.equals(vaultAuthMethod)) { currentpolicies = ControllerUtil.getPoliciesAsListFromJson(objMapper, responseJson); } else if (TVaultConstants.OIDC.equals(vaultAuthMethod)) { currentpolicies.addAll(oidcGroup.getPolicies()); } } catch (IOException e) { log.error(e); log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to ServiceAccount\"). put(LogMessage.MESSAGE, String.format (\"Exception while creating currentpolicies\")). put(LogMessage.STACKTRACE, Arrays.toString(e.getStackTrace())). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); } policies.addAll(currentpolicies); policies.remove(r_policy); policies.remove(w_policy); policies.remove(d_policy); policies.add(policy); }else{ policies.add(policy); } String policiesString = org.apache.commons.lang3.StringUtils.join(policies, \",\"); String currentpoliciesString = org.apache.commons.lang3.StringUtils.join(currentpolicies, \",\"); log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to ServiceAccount\"). put(LogMessage.MESSAGE, String.format (\"policies [%s] before calling configureLDAPGroup\", policies)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); Response ldapConfigresponse = new Response(); if (TVaultConstants.LDAP.equals(vaultAuthMethod)) { ldapConfigresponse = ControllerUtil.configureLDAPGroup(groupName, policiesString, token); } else if (TVaultConstants.OIDC.equals(vaultAuthMethod)) { ldapConfigresponse = oidcUtil.updateGroupPolicies(token, groupName, policies, currentpolicies, oidcGroup != null ? oidcGroup.getId() : null); oidcUtil.renewUserToken(userDetails.getClientToken()); } if(ldapConfigresponse.getHttpstatus().equals(HttpStatus.NO_CONTENT) || ldapConfigresponse.getHttpstatus().equals(HttpStatus.OK)){ String path = new StringBuffer(TVaultConstants.SVC_ACC_ROLES_PATH).append(svcAccName).toString(); Map<String,String> params = new HashMap<String,String>(); params.put(\"type\", \"groups\"); params.put(\"name\",groupName); params.put(\"path\",path); params.put(\"access\",access); Response metadataResponse = ControllerUtil.updateMetadata(params,token); if(metadataResponse !=null && (HttpStatus.NO_CONTENT.equals(metadataResponse.getHttpstatus()) || HttpStatus.OK.equals(metadataResponse.getHttpstatus()))){ log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to Service Account\"). put(LogMessage.MESSAGE, \"Group configuration Success.\"). put(LogMessage.STATUS, metadataResponse.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"Group is successfully associated with Service Account\\\"]}\"); } if (TVaultConstants.LDAP.equals(vaultAuthMethod)) { ldapConfigresponse = ControllerUtil.configureLDAPGroup(groupName, currentpoliciesString, token); } else if (TVaultConstants.OIDC.equals(vaultAuthMethod)) { ldapConfigresponse = oidcUtil.updateGroupPolicies(token, groupName, currentpolicies, currentpolicies, oidcGroup.getId()); oidcUtil.renewUserToken(userDetails.getClientToken()); } if(ldapConfigresponse.getHttpstatus().equals(HttpStatus.NO_CONTENT)){ log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to Service Account\"). put(LogMessage.MESSAGE, \"Reverting, group policy update success\"). put(LogMessage.RESPONSE, (null!=metadataResponse)?metadataResponse.getResponse():TVaultConstants.EMPTY). put(LogMessage.STATUS, (null!=metadataResponse)?metadataResponse.getHttpstatus().toString():TVaultConstants.EMPTY). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Group configuration failed. Please try again\\\"]}\"); }else{ log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to Service Account\"). put(LogMessage.MESSAGE, \"Reverting group policy update failed\"). put(LogMessage.RESPONSE, (null!=metadataResponse)?metadataResponse.getResponse():TVaultConstants.EMPTY). put(LogMessage.STATUS, (null!=metadataResponse)?metadataResponse.getHttpstatus().toString():TVaultConstants.EMPTY). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Group configuration failed. Contact Admin \\\"]}\"); } } else { return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Failed to add group to the Service Account\\\"]}\"); } }else{ return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Access denied: No permission to add groups to this service account\\\"]}\"); } }### Assistant: @Test public void test_addGroupToServiceAccount_failure_initialreset() { String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; ServiceAccountGroup serviceAccountGroup = new ServiceAccountGroup(\"svc_vault_test7\", \"group1\", \"reset\"); UserDetails userDetails = getMockUser(false); ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Failed to add group permission to Service account. Initial password reset is pending for this Service Account. Please reset the password and try again.\\\"]}\"); when(tokenUtils.getSelfServiceToken()).thenReturn(\"5PDrOhsy4ig8L3EpsJZSLAMg\"); when(reqProcessor.process(eq(\"/sdb\"),Mockito.any(),eq(token))).thenReturn(getMockResponse(HttpStatus.OK, true, \"{\\\"data\\\":{\\\"initialPasswordReset\\\":false,\\\"managedBy\\\":\\\"smohan11\\\",\\\"name\\\":\\\"svc_vault_test5\\\",\\\"users\\\":{\\\"smohan11\\\":\\\"sudo\\\"}}}\")); String[] latestPolicies = {\"o_svcacct_svc_vault_test7\"}; when(policyUtils.getCurrentPolicies(userDetails.getSelfSupportToken(), userDetails.getUsername(), userDetails)).thenReturn(latestPolicies); ResponseEntity<String> responseEntity = serviceAccountsService.addGroupToServiceAccount(token, serviceAccountGroup, userDetails); assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting public static void updateMapInternal(BiMap<Integer, String> map, String mapName, String command, String regex, Map<Integer, Integer> staticMapping) throws IOException { BufferedReader br = null; try { Process process = Runtime.getRuntime().exec( new String[] { \"bash\", \"-c\", command }); br = new BufferedReader(new InputStreamReader(process.getInputStream())); String line = null; while ((line = br.readLine()) != null) { String[] nameId = line.split(regex); if ((nameId == null) || (nameId.length != 2)) { throw new IOException(\"Can't parse \" + mapName + \" list entry:\" + line); } LOG.debug(\"add to \" + mapName + \"map:\" + nameId[0] + \" id:\" + nameId[1]); final Integer key = staticMapping.get(parseId(nameId[1])); final String value = nameId[0]; if (map.containsKey(key)) { final String prevValue = map.get(key); if (value.equals(prevValue)) { continue; } reportDuplicateEntry( \"Got multiple names associated with the same id: \", key, value, key, prevValue); continue; } if (map.containsValue(value)) { final Integer prevKey = map.inverse().get(value); reportDuplicateEntry( \"Got multiple ids associated with the same name: \", key, value, prevKey, value); continue; } map.put(key, value); } LOG.info(\"Updated \" + mapName + \" map size: \" + map.size()); } catch (IOException e) { LOG.error(\"Can't update \" + mapName + \" map\"); throw e; } finally { if (br != null) { try { br.close(); } catch (IOException e1) { LOG.error(\"Can't close BufferedReader of command result\", e1); } } } }### Assistant: @Test public void testDuplicates() throws IOException { assumeTrue(!Shell.WINDOWS); String GET_ALL_USERS_CMD = \"echo \\\"root:x:0:0:root:/root:/bin/bash\\n\" + \"hdfs:x:11501:10787:Grid Distributed File System:/home/hdfs:/bin/bash\\n\" + \"hdfs:x:11502:10788:Grid Distributed File System:/home/hdfs:/bin/bash\\n\" + \"hdfs1:x:11501:10787:Grid Distributed File System:/home/hdfs:/bin/bash\\n\" + \"hdfs2:x:11502:10787:Grid Distributed File System:/home/hdfs:/bin/bash\\n\" + \"bin:x:2:2:bin:/bin:/bin/sh\\n\" + \"bin:x:1:1:bin:/bin:/sbin/nologin\\n\" + \"daemon:x:1:1:daemon:/usr/sbin:/bin/sh\\n\" + \"daemon:x:2:2:daemon:/sbin:/sbin/nologin\\\"\" + \" | cut -d: -f1,3\"; String GET_ALL_GROUPS_CMD = \"echo \\\"hdfs:*:11501:hrt_hdfs\\n\" + \"mapred:x:497\\n\" + \"mapred2:x:497\\n\" + \"mapred:x:498\\n\" + \"mapred3:x:498\\\"\" + \" | cut -d: -f1,3\"; BiMap<Integer, String> uMap = HashBiMap.create(); BiMap<Integer, String> gMap = HashBiMap.create(); ShellBasedIdMapping.updateMapInternal(uMap, \"user\", GET_ALL_USERS_CMD, \":\", EMPTY_PASS_THROUGH_MAP); assertEquals(5, uMap.size()); assertEquals(\"root\", uMap.get(0)); assertEquals(\"hdfs\", uMap.get(11501)); assertEquals(\"hdfs2\",uMap.get(11502)); assertEquals(\"bin\", uMap.get(2)); assertEquals(\"daemon\", uMap.get(1)); ShellBasedIdMapping.updateMapInternal(gMap, \"group\", GET_ALL_GROUPS_CMD, \":\", EMPTY_PASS_THROUGH_MAP); assertTrue(gMap.size() == 3); assertEquals(\"hdfs\",gMap.get(11501)); assertEquals(\"mapred\", gMap.get(497)); assertEquals(\"mapred3\", gMap.get(498)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FEELFnResult<List<Object>> invoke(@ParameterName( \"ctx\" ) EvaluationContext ctx, @ParameterName(\"list\") List list, @ParameterName(\"precedes\") FEELFunction function) { if ( function == null ) { return invoke( list ); } else { return invoke(list, (a, b) -> { final Object result = function.invokeReflectively(ctx, new Object[]{a, b}); if (!(result instanceof Boolean) || ((Boolean) result)) { return -1; } else { return 1; } } ); } }### Assistant: @Test public void invokeListSingleItem() { FunctionTestUtil.assertResultList(sortFunction.invoke(Collections.singletonList(10)), Collections.singletonList(10)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException { filter(ch, start, length, ignorableWhitespaceOutput); }### Assistant: @Test public void testInvalidSurrogates() throws SAXException { safe.ignorableWhitespace(\"\\udb00\\ubfff\".toCharArray(), 0, 2); assertEquals(\"\\ufffd\\ubfff\", output.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean acceptTaggedScenario(final Set<String> tags) { if (acceptAll || (acceptedTags.isEmpty() && excludedTags.isEmpty())) { return true; } else if (!acceptedTags.isEmpty() && (tags == null || tags.isEmpty())) { return false; } else if (containsAny(tags, excludedTags)) { return false; } else { return tags == null || tags.containsAll(acceptedTags); } }### Assistant: @Test public void testTagAnnotations() { final List<Class<?>> stepImplsList = new ArrayList<Class<?>>(); stepImplsList.add(TestStepImplementations.class); final TagManager tagManager = new TagManager(null); final TestParameters testParams = new TestParameters(tagManager, null, \"./target/test-classes/features/tagged.feature\"); testParams.init(); List<FeatureFile> featureFileList = testParams.getFeatureFileList(); List<Scenario> scenarios = featureFileList.get(0).getScenarios(); Assert.assertThat(scenarios.size(), is(4)); for (final Scenario sc : scenarios) { if (!tagManager.acceptTaggedScenario(sc.getTags())) { Assert.fail(\"all scenarios should be runnable\"); } } final TagManager tagManager2 = new TagManager(\"@runme\"); final TestParameters testParams2 = new TestParameters(tagManager2, null, \"./target/test-classes/features/tagged.feature\"); testParams2.init(); featureFileList = testParams2.getFeatureFileList(); scenarios = featureFileList.get(0).getScenarios(); Assert.assertThat(scenarios.size(), is(4)); final Set<String> excludedTaggedScenarios = new HashSet<String>(); excludedTaggedScenarios.add(\"An excluded tagged scenario\"); excludedTaggedScenarios.add(\"An untagged scenario\"); excludedTaggedScenarios.add(\"multilined tagged scenario\"); for (final Scenario sc : scenarios) { if (tagManager2.acceptTaggedScenario(sc.getTags())) { Assert.assertThat(sc.getDescription(), is(\"A tagged scenario\")); } else { if (!excludedTaggedScenarios.contains(sc.getDescription())) { Assert.fail(\"expecting some excluded tags: \" + sc.getDescription()); } } } final Scenario scenario = featureFileList.get(0).getScenarios().get(3); Assert.assertThat(\"expecting a tag to be present\", scenario.getTags(), hasItem(\"@all\")); Assert.assertThat(\"expecting a tag to be present\", scenario.getTags(), hasItem(\"@searchcontracts\")); Assert.assertThat(\"expecting a tag to be present\", scenario.getTags(), hasItem(\"@searchcontracts_30\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = \"/projects\") public ServiceResult<List<Project>> getProjects(@RequestParam(value = \"name\", defaultValue = \"\") String name) throws SQLException { return ServiceResult.success(projectDao.getProjectsListByLikeName(name)); }### Assistant: @Test public void getProjects() throws Exception { mockMvc.perform(MockMvcRequestBuilders.post(\"/project/projects\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"name\", \"name\") .accept(MediaType.APPLICATION_JSON_UTF8)) .andExpect(MockMvcResultMatchers.status().isOk()) .andDo(MockMvcResultHandlers.print()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public HttpHeaders set(HttpHeaders headers) { if (headers instanceof DefaultHttpHeaders) { this.headers.set(((DefaultHttpHeaders) headers).headers); return this; } else { return super.set(headers); } }### Assistant: @Test public void setObjectIterable() { final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders(); headers.set(HEADER_NAME, HeaderValue.THREE.asList()); assertDefaultValues(headers, HeaderValue.THREE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ExecutionContext getClientDispatcher() { return this.dispatchers.getDispatcher(Dispatchers.DispatcherType.Client); }### Assistant: @Test public void testClientDispatcherIsNotGlobalDispatcher() { ActorSystem actorSystem = ActorSystem.create(\"with-custom-dispatchers\", ConfigFactory.load(\"application-with-custom-dispatchers.conf\")); ActorUtils actorUtils = new ActorUtils(actorSystem, mock(ActorRef.class), mock(ClusterWrapper.class), mock(Configuration.class), DatastoreContext.newBuilder().build(), new PrimaryShardInfoFutureCache()); assertNotEquals(actorSystem.dispatchers().defaultGlobalDispatcher(), actorUtils.getClientDispatcher()); actorSystem.terminate(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TxReceipt getTxReceipt(final TxHash txHash) { try { return getClient().getTransactionOperation().getTxReceipt(txHash); } catch (Exception e) { throw converter.convert(e); } }### Assistant: @Test public void testGetTxReceipt() { final TransactionOperation mockOperation = mock(TransactionOperation.class); when(mockOperation.getTxReceipt(any(TxHash.class))) .thenReturn(TxReceipt.newBuilder().build()); final AergoClient mockClient = mock(AergoClient.class); when(mockClient.getTransactionOperation()).thenReturn(mockOperation); final ClientProvider mockClientProvider = mock(ClientProvider.class); when(mockClientProvider.getClient()).thenReturn(mockClient); final QueryApi queryApi = new QueryApiImpl(mockClientProvider); final TxReceipt txReceipt = queryApi.getTxReceipt(anyTxHash); assertNotNull(txReceipt); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ConsumerBuilder shareConnections(Integer shareConnections) { this.shareconnections = shareConnections; return getThis(); }### Assistant: @Test void shareConnections() { ConsumerBuilder builder = new ConsumerBuilder(); builder.shareConnections(300); Assertions.assertEquals(300, builder.build().getShareconnections()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequiresPermission(Manifest.permission.INTERNET) public static Observable<Boolean> observeInternetConnectivity() { InternetObservingSettings settings = InternetObservingSettings.create(); return observeInternetConnectivity(settings.strategy(), settings.initialInterval(), settings.interval(), settings.host(), settings.port(), settings.timeout(), settings.httpResponse(), settings.errorHandler()); }### Assistant: @Test public void observeInternetConnectivityDefaultShouldNotBeNull() { Observable<Boolean> observable; observable = ReactiveNetwork.observeInternetConnectivity(); assertThat(observable).isNotNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void addChild(CommandNode<T> child) { Nodes.addChild(this, child, addition); }### Assistant: @Test void addChild_child_extensive() { argument.addChild(child); argument.addChild(extensive); assertEquals(3, argument.getChildren().size()); var child = (Literal<String>) argument.getChild(\"child\"); assertSame(this.extensive, child); assertEquals(2, child.getChildren().size()); assertEquals(2, child.aliases().size()); assertEquals(2, child.aliases().get(0).getChildren().size()); assertTrue(((Aliasable<String>) child.aliases().get(0)).aliases().isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Deprecated @Override public Response getDevices( @QueryParam(\"name\") String name, @QueryParam(\"type\") String type, @QueryParam(\"user\") String user, @QueryParam(\"userPattern\") String userPattern, @QueryParam(\"role\") String role, @QueryParam(\"ownership\") String ownership, @QueryParam(\"status\") String status, @QueryParam(\"groupId\") int groupId, @QueryParam(\"since\") String since, @HeaderParam(\"If-Modified-Since\") String ifModifiedSince, @QueryParam(\"offset\") int offset, @QueryParam(\"limit\") int limit) { try { if (!StringUtils.isEmpty(name) && !StringUtils.isEmpty(role)) { return Response.status(Response.Status.BAD_REQUEST).entity( new ErrorResponse.ErrorResponseBuilder().setMessage(\"Request contains both name and role \" + \"parameters. Only one is allowed \" + \"at once.\").build()).build(); } RequestValidationUtil.validatePaginationParameters(offset, limit); DeviceManagementProviderService dms = DeviceMgtAPIUtils.getDeviceManagementService(); DeviceAccessAuthorizationService deviceAccessAuthorizationService = DeviceMgtAPIUtils.getDeviceAccessAuthorizationService(); if (deviceAccessAuthorizationService == null) { return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity( new ErrorResponse.ErrorResponseBuilder().setMessage(\"Device access authorization service is \" + \"failed\").build()).build(); } PaginationRequest request = new PaginationRequest(offset, limit); PaginationResult result; DeviceList devices = new DeviceList(); if (name != null && !name.isEmpty()) { request.setDeviceName(name); } if (type != null && !type.isEmpty()) { request.setDeviceType(type); } if (ownership != null && !ownership.isEmpty()) { RequestValidationUtil.validateOwnershipType(ownership); request.setOwnership(ownership); } if (status != null && !status.isEmpty()) { RequestValidationUtil.validateStatus(status); request.setStatus(status); } if (groupId != 0) { request.setGroupId(groupId); } if (role != null && !role.isEmpty()) { request.setOwnerRole(role); } String authorizedUser = MultitenantUtils.getTenantAwareUsername(CarbonContext.getThreadLocalCarbonContext().getUsername()); if (deviceAccessAuthorizationService.isDeviceAdminUser()) { if (user != null && !user.isEmpty()) { request.setOwner(MultitenantUtils.getTenantAwareUsername(user)); } else if (userPattern != null && !userPattern.isEmpty()) { request.setOwnerPattern(userPattern); } } else { if (user != null && !user.isEmpty()) { user = MultitenantUtils.getTenantAwareUsername(user); if (user.equals(authorizedUser)) { request.setOwner(user); } else { String msg = \"User '\" + authorizedUser + \"' is not authorized to retrieve devices of '\" + user + \"' user\"; log.error(msg); return Response.status(Response.Status.UNAUTHORIZED).entity( new ErrorResponse.ErrorResponseBuilder().setCode(401l).setMessage(msg).build()).build(); } } else { request.setOwner(authorizedUser); } } if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) { Date sinceDate; SimpleDateFormat format = new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm:ss Z\"); try { sinceDate = format.parse(ifModifiedSince); } catch (ParseException e) { return Response.status(Response.Status.BAD_REQUEST).entity( new ErrorResponse.ErrorResponseBuilder().setMessage(\"Invalid date \" + \"string is provided in 'If-Modified-Since' header\").build()).build(); } request.setSince(sinceDate); result = dms.getAllDevices(request); if (result == null || result.getData() == null || result.getData().size() <= 0) { return Response.status(Response.Status.NOT_MODIFIED).entity(\"No device is modified \" + \"after the timestamp provided in 'If-Modified-Since' header\").build(); } } else if (since != null && !since.isEmpty()) { Date sinceDate; SimpleDateFormat format = new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm:ss Z\"); try { sinceDate = format.parse(since); } catch (ParseException e) { return Response.status(Response.Status.BAD_REQUEST).entity( new ErrorResponse.ErrorResponseBuilder().setMessage(\"Invalid date \" + \"string is provided in 'since' filter\").build()).build(); } request.setSince(sinceDate); result = dms.getAllDevices(request); if (result == null || result.getData() == null || result.getData().size() <= 0) { devices.setList(new ArrayList<Device>()); devices.setCount(0); return Response.status(Response.Status.OK).entity(devices).build(); } } else { result = dms.getAllDevices(request); int resultCount = result.getRecordsTotal(); if (resultCount == 0) { Response.status(Response.Status.OK).entity(devices).build(); } } devices.setList((List<Device>) result.getData()); devices.setCount(result.getRecordsTotal()); return Response.status(Response.Status.OK).entity(devices).build(); } catch (DeviceManagementException e) { String msg = \"Error occurred while fetching all enrolled devices\"; log.error(msg, e); return Response.serverError().entity( new ErrorResponse.ErrorResponseBuilder().setMessage(msg).build()).build(); } catch (DeviceAccessAuthorizationException e) { String msg = \"Error occurred while checking device access authorization\"; log.error(msg, e); return Response.serverError().entity( new ErrorResponse.ErrorResponseBuilder().setMessage(msg).build()).build(); } }### Assistant: @Test(description = \"Testing get devices when unable to check if the user is the admin user\") public void testGetDevicesServerErrorWhenCheckingAdminUser() throws DeviceAccessAuthorizationException { PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, \"getDeviceManagementService\")) .toReturn(this.deviceManagementProviderService); PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, \"getDeviceAccessAuthorizationService\")) .toReturn(this.deviceAccessAuthorizationService); PowerMockito.stub(PowerMockito.method(MultitenantUtils.class, \"getTenantAwareUsername\")) .toReturn(TENANT_AWARE_USERNAME); PowerMockito.stub(PowerMockito.method(CarbonContext.class, \"getThreadLocalCarbonContext\")) .toReturn(Mockito.mock(CarbonContext.class, Mockito.RETURNS_MOCKS)); Mockito.when(this.deviceAccessAuthorizationService.isDeviceAdminUser()) .thenThrow(new DeviceAccessAuthorizationException()); Response response = this.deviceManagementService .getDevices(null, TEST_DEVICE_TYPE, DEFAULT_USERNAME, null, DEFAULT_ROLE, DEFAULT_OWNERSHIP, DEFAULT_STATUS, 1, null, null, 10, 5); Assert.assertEquals(response.getStatus(), Response.Status.INTERNAL_SERVER_ERROR.getStatusCode()); Mockito.reset(this.deviceAccessAuthorizationService); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String normalizeId(String name) { char[] buffer = name.toCharArray(); int outix = 0; boolean whitespacerun = false; boolean firstchar = false; for (int inix = 0; inix < buffer.length; inix++) { char ch = buffer[inix]; if (ch > 0x00FF) continue; if (ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n') { if (!firstchar || whitespacerun) continue; ch = '-'; whitespacerun = true; } else whitespacerun = false; char mapsto = charmap[ch]; if (mapsto == 0 && firstchar) continue; if (mapsto == 0) buffer[outix++] = '_'; else { buffer[outix++] = mapsto; firstchar = true; } } if (whitespacerun) outix--; if (outix < 1) return null; else if (isNameStart(buffer[0])) return new String(buffer, 0, outix); else return \"_\" + new String(buffer, 0, outix); }### Assistant: @Test public void testNormalizeIdOK1() { Assert.assertEquals(\"incorrect normalization\", StringUtils.normalizeId(\"a\"), \"a\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ByteFieldComparatorImpl<ENTITY, D> reversed() { return new ByteFieldComparatorImpl<>(field, !reversed); }### Assistant: @Test void testReversed() { final FieldComparator<ByteValue> expResult = new ByteFieldComparatorImpl<>(ByteValue.BYTE, true); final FieldComparator<ByteValue> result = instance.reversed(); assertEquals(expResult, result); assertTrue(result.isReversed()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public DocumentFetchResult getXmlDocument(String urlString) { Document doc; HttpGetResult inputStreamResult; try { inputStreamResult = getHttpInputStream(urlString, HTTP_CONTENT_TYPE_TEXT_XML); if (inputStreamResult.getStatusCode() != HttpURLConnection.HTTP_OK) { String error = \"getXmlDocument failed while accessing \" + urlString + \" with status code: \" + inputStreamResult.getStatusCode(); Timber.e(error); return new DocumentFetchResult(error, inputStreamResult.getStatusCode()); } try (InputStream resultInputStream = inputStreamResult.getInputStream(); InputStreamReader streamReader = new InputStreamReader(resultInputStream, \"UTF-8\")) { doc = new Document(); KXmlParser parser = new KXmlParser(); parser.setInput(streamReader); parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, true); doc.parse(parser); } } catch (Exception e) { String error = \"Parsing failed with \" + e.getMessage() + \" while accessing \" + urlString; Timber.e(error); return new DocumentFetchResult(error, 0); } return new DocumentFetchResult(doc, inputStreamResult.isOpenRosaResponse(), inputStreamResult.getHash()); }### Assistant: @Test public void testGetXMLDocument() { DocumentFetchResult fetchResult = collectServerClient.getXmlDocument(URL_STRING); assertNull(fetchResult.errorMessage); assertEquals(fetchResult.responseCode, 0); assertTrue(fetchResult.isOpenRosaResponse); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<MwDumpFile> findAllDumps(DumpContentType dumpContentType) { List<MwDumpFile> localDumps = findDumpsLocally(dumpContentType); if (this.webResourceFetcher != null) { List<MwDumpFile> onlineDumps = findDumpsOnline(dumpContentType); return mergeDumpLists(localDumps, onlineDumps); } else { return localDumps; } }### Assistant: @Test public void getAllDailyDumpsOffline() throws IOException { setLocalDump(\"20140220\", DumpContentType.DAILY, true); setLocalDump(\"20140205\", DumpContentType.DAILY, true); WmfDumpFileManager dumpFileManager = new WmfDumpFileManager( \"wikidatawiki\", dm, null); List<? extends MwDumpFile> dumpFiles = dumpFileManager .findAllDumps(DumpContentType.DAILY); String[] dumpDates = { \"20140220\", \"20140205\" }; assertEquals(dumpFiles.size(), dumpDates.length); for (int i = 0; i < dumpFiles.size(); i++) { assertEquals(dumpFiles.get(i).getDumpContentType(), DumpContentType.DAILY); assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]); assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Class<?> getGenericClass(Class<?> clazz) { Type[] genericInterfaceTypes = clazz.getGenericInterfaces(); for (Type genericInterfaceType : genericInterfaceTypes) { if (genericInterfaceType instanceof ParameterizedType) { ParameterizedType parameterizedType = (ParameterizedType)genericInterfaceType; return (Class<?>)parameterizedType.getActualTypeArguments()[0]; } } Class<?> superClass = clazz.getSuperclass(); if (superClass != null) { return getGenericClass(superClass); } return Object.class; }### Assistant: @Test public void testGetGenericClass() { Assert.assertEquals( String.class, GenericUtil.getGenericClass(new StringParameterizedType())); Assert.assertEquals( Object.class, GenericUtil.getGenericClass(new NoParameterizedTypeImpl())); Assert.assertEquals( Object.class, GenericUtil.getGenericClass(ExtendsNoParameterizedTypeImpl.class)); Assert.assertEquals( Object.class, GenericUtil.getGenericClass(NoParameterizedTypeImpl.class)); Assert.assertEquals( String.class, GenericUtil.getGenericClass(StringParameterizedType.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void generateAuditLogHeader(CSVPrinter printer, ScenarioSimulationModel.Type modelType) throws IOException { if (ScenarioSimulationModel.Type.DMN.equals(modelType)) { printer.printRecord(DMN_AUDIT_HEADER); } else { printer.printRecord(RULE_AUDIT_HEADER); } }### Assistant: @Test public void generateAuditLogHeaderDMN() throws IOException { StringBuilder stringBuilder = new StringBuilder(); CSVPrinter printer = getCSVPrinter(stringBuilder); scenarioCsvDownloadReport.generateAuditLogHeader(printer, DMN); String retrieved = stringBuilder.toString(); commonCheckHeader(DMN_AUDIT_HEADER, retrieved); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean checkSecondFilter(SpatialArguments spatialArguments, GeometryWrapper targetGeometryWrapper) { GeometryWrapper geometryWrapper = spatialArguments.getGeometryWrapper(); try { return geometryWrapper.intersects(targetGeometryWrapper); } catch (FactoryException | MismatchedDimensionException | TransformException ex) { throw new ExprEvalException(ex.getMessage() + \": \" + targetGeometryWrapper.asLiteral() + \", \" + geometryWrapper.asLiteral(), ex); } }### Assistant: @Test public void testCheckSecondFilter() { IntersectBoxPF instance = new IntersectBoxPF(); Node predicate = NodeFactory.createURI(SpatialExtension.INTERSECT_BOX_PROP); float lat = 1; float lon = 1; float latMin = 0; float lonMin = 0; float latMax = 2; float lonMax = 2; Literal targetGeometry = ConvertLatLon.toLiteral(lat, lon); List<Node> objectNodes = Arrays.asList(NodeValue.makeFloat(latMin).asNode(), NodeValue.makeFloat(lonMin).asNode(), NodeValue.makeFloat(latMax).asNode(), NodeValue.makeFloat(lonMax).asNode()); PropFuncArg object = new PropFuncArg(objectNodes); SpatialArguments spatialArguments = instance.extractObjectArguments(predicate, object, SpatialIndexTestData.WGS_84_SRS_INFO); GeometryWrapper targetGeometryWrapper = GeometryWrapper.extract(targetGeometry); boolean expResult = true; boolean result = instance.checkSecondFilter(spatialArguments, targetGeometryWrapper); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Value valueOf(String value, Type type, Map<String, Object> options) { if (value == null || NullObjectFormatter.NULL_STRING.equals(value)) { return null; } if (value.length() >= 2 && value.startsWith(QUOTE_STRING) && value.endsWith(QUOTE_STRING)) { return type.virtualMachine().mirrorOf(StringUtils.substring(value, 1, -1)); } return type.virtualMachine().mirrorOf(value); }### Assistant: @Test public void testValueOf() throws Exception { Map<String, Object> options = formatter.getDefaultOptions(); Value string = this.getLocalValue(\"str\"); StringReference newValue = (StringReference) formatter.valueOf(\"aaa\", string.type(), options); assertNotNull(\"StringObjectFormatter should be able to create string.\", newValue); assertEquals(\"Should create a String with right value.\", \"aaa\", newValue.value()); newValue = (StringReference) formatter.valueOf(\"\\\"aaa\\\"\", string.type(), options); assertNotNull(\"StringObjectFormatter should be able to create string.\", newValue); assertEquals(\"Should create a String with right value.\", \"aaa\", newValue.value()); newValue = (StringReference) formatter.valueOf(\"\\\"aaa\", string.type(), options); assertNotNull(\"StringObjectFormatter should be able to create string.\", newValue); assertEquals(\"Should create a String with right value.\", \"\\\"aaa\", newValue.value()); assertNull(\"StringObjectFormatter should be able to create null string.\", formatter.valueOf(\"null\", string.type(), options)); assertNull(\"StringObjectFormatter should be able to create null string.\", formatter.valueOf(null, string.type(), options)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void adjustPvals(List<? extends PValue> pvals) { Collections.sort(pvals); int N=pvals.size(); for (int r=0;r<N;r++) { PValue item = pvals.get(r); double raw_p = item.getRawPValue(); item.setAdjustedPValue(raw_p * N/(r+1)); } enforcePValueMonotony(pvals); }### Assistant: @Test void testB() { MultipleTestingCorrection bonf = new BenjaminiHochberg(); bonf.adjustPvals(pvallist); double adjustedPValue = pvallist.get(1).getAdjustedPValue(); assertEquals(0.00300000,adjustedPValue,EPSILON); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static AlleleProperties mergeProperties(AlleleProperties originalProperties, AlleleProperties properties) { String updatedRsId = (originalProperties.getRsId() .isEmpty()) ? properties.getRsId() : originalProperties.getRsId(); return AlleleProperties.newBuilder() .mergeFrom(originalProperties) .mergeFrom(properties) .setRsId(updatedRsId) .build(); }### Assistant: @Test public void mergePropertiesUsesNewRsidIfOriginalAbsent() { AlleleProperties original = AlleleProperties.newBuilder() .putProperties(\"EXAC_AFR\", 0.00056f) .build(); AlleleProperties toMerge = AlleleProperties.newBuilder() .setRsId(\"rs45789\") .putProperties(\"POLYPHEN\", 1f).build(); AlleleProperties expected = AlleleProperties.newBuilder() .setRsId(\"rs45789\") .putProperties(\"EXAC_AFR\", 0.00056f) .putProperties(\"POLYPHEN\", 1f) .build(); assertThat(AlleleConverter.mergeProperties(original, toMerge), equalTo(expected)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void repairProcessingMessages() { List<Message> messages = findProcessingMessages(); LOG.debug(\"Found {} message(s) for repairing ...\", messages.size()); int batchStartIncl = 0; int batchEndExcl; while (batchStartIncl < messages.size()) { batchEndExcl = min(batchStartIncl + BATCH_SIZE, messages.size()); updateMessagesInDB(messages.subList(batchStartIncl, batchEndExcl)); batchStartIncl = batchEndExcl; } }### Assistant: @Test public void testRepairProcessingMessagesOne() throws Exception { Message message = createAndSaveMessages(1, MsgStateEnum.PROCESSING)[0]; messageService.repairProcessingMessages(); Message found = messageDao.findMessage(message.getMsgId()); assertThat(found, notNullValue()); assertThat(found.getState(), is(MsgStateEnum.PARTLY_FAILED)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = \"/api/datasets/{id}\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a data set by id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get a data set based on given id.\") @Timed public DataSet get(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id, @ApiParam(value = \"Whether output should be the full data set (true) or not (false).\") @RequestParam( value = \"fullContent\", defaultValue = \"false\") boolean fullContent, @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\", defaultValue = \"\") String filter, @ApiParam(value = \"Whether to include internal technical properties (true) or not (false).\") @RequestParam( value = \"includeTechnicalProperties\", defaultValue = \"false\") boolean includeTechnicalProperties) { if (LOG.isDebugEnabled()) { LOG.debug(\"Requesting dataset #{} (pool: {})...\", id, getConnectionStats()); } try { return datasetClient.getDataSet(id, fullContent, includeTechnicalProperties, filter); } finally { if (LOG.isDebugEnabled()) { LOG.debug(\"Request dataset #{} (pool: {}) done.\", id, getConnectionStats()); } } }### Assistant: @Test public void test_TDP_2052() throws Exception { final String datasetOriginalName = \"testDataset\"; final String dataSetId = testClient.createDataset(\"dataset/dataset.csv\", datasetOriginalName); given() .body(IOUtils.toString(PreparationAPITest.class.getResourceAsStream(\"t-shirt_100.csv\"), UTF_8)) .queryParam(\"Content-Type\", \"text/csv\") .when() .put(\"/api/datasets/\" + dataSetId) .asString(); String dataSetContent = when().get(\"/api/datasets/\" + dataSetId + \"?metadata=true\").asString(); final String expectedContent = IOUtils.toString(this.getClass().getResourceAsStream(\"t-shirt_100.csv.expected.json\"), UTF_8); assertThat(dataSetContent, sameJSONAs(expectedContent).allowingExtraUnexpectedFields()); final String jsonUpdatedMetadata = when().get(\"/api/datasets/{id}/metadata\", dataSetId).asString(); final DataSetMetadata updatedMetadata = mapper.readValue(jsonUpdatedMetadata, DataSetMetadata.class); assertEquals(datasetOriginalName, updatedMetadata.getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static DeletePolicyEntryResponse of(final String policyId, final Label label, final DittoHeaders dittoHeaders) { return new DeletePolicyEntryResponse(PolicyId.of(policyId), label, HttpStatusCode.NO_CONTENT, dittoHeaders); }### Assistant: @Test public void toJsonReturnsExpected() { final DeletePolicyEntryResponse underTest = DeletePolicyEntryResponse.of(TestConstants.Policy.POLICY_ID, TestConstants.Policy.LABEL, TestConstants.EMPTY_DITTO_HEADERS); final JsonObject actualJsonCreated = underTest.toJson(FieldType.regularOrSpecial()); assertThat(actualJsonCreated).isEqualTo(KNOWN_JSON); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> deleteApproleFromSDB(UserDetails userDetails, String userToken, SafeAppRoleAccess safeAppRoleAccess) { if (TVaultConstants.SELF_SERVICE_APPROLE_NAME.equals(safeAppRoleAccess.getRole_name())) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Access denied: no permission to delete this approle\\\"]}\"); } String jsonstr = JSONUtil.getJSON(safeAppRoleAccess); String token = userDetails.getClientToken(); if (userDetails.isAdmin()) { return safesService.removeApproleFromSafe(token, jsonstr); } else { Map<String,Object> requestMap = ControllerUtil.parseJson(jsonstr); if (ObjectUtils.isEmpty(requestMap.get(\"role_name\")) || ObjectUtils.isEmpty(requestMap.get(\"path\"))) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Invalid role name or path\\\"]}\"); } String path = requestMap.get(\"path\").toString(); ResponseEntity<String> isAuthorized = isAuthorized(userDetails, path); if (!isAuthorized.getStatusCode().equals(HttpStatus.OK)) { return isAuthorized.getStatusCode().equals(HttpStatus.BAD_REQUEST)?isAuthorized:ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Error checking user permission\\\"]}\"); } if (isAuthorized.getBody().equals(TVaultConstants.FALSE)) { return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"{\\\"errors\\\":[\\\"Access denied: no permission to remove approle from the safe\\\"]}\"); } token = userDetails.getSelfSupportToken(); return safesService.removeApproleFromSafe(token, jsonstr); } }### Assistant: @Test public void test_deleteApproleFromSDB_failure_400() { String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; UserDetails userDetails = getMockUser(false); String jsonStr = \"{\\\"role_name\\\":\\\"approle1\\\",\\\"path\\\":\\\"shared/mysafe01\\\",\\\"access\\\":\\\"write\\\"}\"; ResponseEntity<String> response = ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Invalid path specified\\\"]}\"); ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Invalid path specified\\\"]}\"); Map<String,Object> requestMap = new HashMap<>(); requestMap.put(\"path\", \"shared/mysafe01\"); requestMap.put(\"role_name\", \"aprole1\"); requestMap.put(\"access\", \"write\"); when(ControllerUtil.parseJson(jsonStr)).thenReturn(requestMap); when(ControllerUtil.areSafeAppRoleInputsValid(requestMap)).thenReturn(false); SafeAppRoleAccess safeAppRoleAccess = new SafeAppRoleAccess(\"aprole1\", \"shared/mysafe01\", \"write\"); when(JSONUtil.getJSON(Mockito.any(SafeAppRoleAccess.class))).thenReturn(jsonStr); ResponseEntity<String> responseEntity = selfSupportService.deleteApproleFromSDB(userDetails, token, safeAppRoleAccess); assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Status getStatus(ResourceContext ctx) { final String caller = ctx.getApiName(); logPrincipal(ctx); validateRequest(ctx.request(), caller, true); DomainList dlist = listDomains(null, null, null, null, 0, false); if (dlist.getNames() == null || dlist.getNames().isEmpty()) { throw ZMSUtils.notFoundError(\"Error - no domains available\", caller); } if (healthCheckFile != null && !healthCheckFile.exists()) { throw ZMSUtils.notFoundError(\"Error - no status available\", caller); } if (statusChecker != null) { try { statusChecker.check(); } catch (StatusCheckException e) { throw ZMSUtils.error(e.getCode(), e.getMsg(), caller); } } return successServerStatus; }### Assistant: @Test public void testGetStatusWithStatusFile() throws IOException { System.setProperty(ZMSConsts.ZMS_PROP_HEALTH_CHECK_PATH, \"/tmp/zms-healthcheck\"); ZMSImpl zmsImpl = zmsInit(); zmsImpl.statusPort = 0; File healthCheckFile = new File(\"/tmp/zms-healthcheck\"); healthCheckFile.delete(); try { zmsImpl.getStatus(mockDomRsrcCtx); fail(); } catch (ResourceException ex) { assertEquals(ResourceException.NOT_FOUND, ex.getCode()); } new FileOutputStream(healthCheckFile).close(); Status status = zmsImpl.getStatus(mockDomRsrcCtx); assertEquals(ResourceException.OK, status.getCode()); healthCheckFile.delete(); try { zmsImpl.getStatus(mockDomRsrcCtx); fail(); } catch (ResourceException ex) { assertEquals(ResourceException.NOT_FOUND, ex.getCode()); } System.clearProperty(ZMSConsts.ZMS_PROP_HEALTH_CHECK_PATH); zmsImpl.objectStore.clearConnections(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final boolean equals(Object o) { if (this == o) return true; if (!(o instanceof ServiceConfigVersionResponse)) return false; ServiceConfigVersionResponse that = (ServiceConfigVersionResponse) o; return new EqualsBuilder() .append(clusterName, that.clusterName) .append(serviceName, that.serviceName) .append(version, that.version) .append(createTime, that.createTime) .append(groupId, that.groupId) .append(groupName, that.groupName) .append(userName, that.userName) .append(note, that.note) .append(stackId, that.stackId) .append(isCurrent, that.isCurrent) .append(isCompatibleWithCurrentStack, that.isCompatibleWithCurrentStack) .append(configurations, that.configurations) .append(hosts, that.hosts) .isEquals(); }### Assistant: @Test public void testEquals() throws Exception { EqualsVerifier .forClass(ServiceConfigVersionResponse.class) .suppress(Warning.NONFINAL_FIELDS) .verify(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isBindable() { return tableFormat() == LIMITED_ENTRY || constraintValue() == BaseSingleFieldConstraint.TYPE_LITERAL || constraintValue() == BaseSingleFieldConstraint.TYPE_RET_VALUE; }### Assistant: @Test public void testIsBindableWhenTableIsALimitedEntry() { doReturn(GuidedDecisionTable52.TableFormat.LIMITED_ENTRY).when(model).getTableFormat(); assertTrue(plugin.isBindable()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Prompt> renderSlotPrompts(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData) { assertNotNull(intentDefinition, \"intentDefinition\"); assertNotNull(slotName, \"slotName\"); assertNotNull(slotData, \"slotData\"); List<Prompt> prompts = new ArrayList<>(); if (!slotData.getConfirmations().isEmpty()) { String promptName = getConfirmPromptName(intentDefinition, slotName, slotData); prompts.add(getPrompt(promptName, slotData.getConfirmations())); } if (!slotData.getElicitations().isEmpty()) { String promptName = getElicitPromptName(intentDefinition, slotName, slotData); prompts.add(getPrompt(promptName, slotData.getElicitations())); } return prompts; }### Assistant: @Test public void testRenderSlotPrompts_GeneratedElicitationPromptId() { when(mockSlotMetadata.getConfirmations()).thenReturn(confirmations); List<Prompt> prompts = underTest.renderSlotPrompts(mockIntentDefinition, \"slot_name\", mockSlotMetadata); assertEquals(prompts, Collections.singletonList( Prompt.builder() .withId(\"Confirm.Intent-intent_name.IntentSlot-slot_name\") .withVariations(new ArrayList<>(confirmations)) .build() )); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Config apply(final String systemVcapServices) { checkNotNull(systemVcapServices, \"system VCAP services string\"); if (systemVcapServices.isEmpty()) { return ConfigFactory.empty(); } final Config vcapServicesConfig = tryToParseString(systemVcapServices); final Set<Map.Entry<String, ConfigValue>> vcapServicesConfigEntries = vcapServicesConfig.entrySet(); final Map<String, Object> result = new HashMap<>(vcapServicesConfigEntries.size()); for (final Map.Entry<String, ConfigValue> serviceConfigEntry : vcapServicesConfigEntries) { result.put(serviceConfigEntry.getKey(), convertConfigListToConfigObject(serviceConfigEntry.getValue())); } return ConfigFactory.parseMap(result); }### Assistant: @Test public void getReturnsExpected() { final JsonObject expectedMongoDbServiceConfigJsonObject = JsonObject.newBuilder() .set(\"ditto-mongodb-staging\", JsonObject.newBuilder() .set(\"binding_name\", JsonValue.nullLiteral()) .set(\"credentials\", JsonObject.newBuilder() .set(\"readonly\", false) .set(\"replicaset\", \"stretched-0815\") .build()) .set(\"instance_name\", \"ditto-mongodb-staging\") .set(\"label\", \"MongoDB-Service\") .set(\"name\", \"ditto-mongodb-staging\") .set(\"plan\", \"Database on Dedicated Replica Set - Stretched\") .set(\"provider\", JsonValue.nullLiteral()) .set(\"syslog_drain_url\", JsonValue.nullLiteral()) .set(\"tags\", JsonArray.newBuilder() .add(\"mongodb\", \"mongo\", \"database\", \"db\", \"mongoose\") .build()) .set(\"volume_mounts\", JsonArray.empty()) .build()) .build(); final ConfigValue expectedMongoDbServiceConfig = ConfigFactory.parseString(expectedMongoDbServiceConfigJsonObject.toString()).root(); final Config actual = underTest.apply(knownSystemVcapServicesString); assertThat(actual.getValue(\"MongoDB-Service\")).isEqualTo(expectedMongoDbServiceConfig); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Page download(Request request, Task task) { if (task == null || task.getSite() == null) { throw new NullPointerException(\"task or site can not be null\"); } CloseableHttpResponse httpResponse = null; CloseableHttpClient httpClient = getHttpClient(task.getSite()); Proxy proxy = proxyProvider != null ? proxyProvider.getProxy(task) : null; HttpClientRequestContext requestContext = httpUriRequestConverter.convert(request, task.getSite(), proxy); Page page = Page.fail(); try { httpResponse = httpClient.execute(requestContext.getHttpUriRequest(), requestContext.getHttpClientContext()); page = handleResponse(request, request.getCharset() != null ? request.getCharset() : task.getSite().getCharset(), httpResponse, task); onSuccess(request); logger.info(\"downloading page success {}\", request.getUrl()); return page; } catch (IOException e) { logger.warn(\"download page {} error\", request.getUrl(), e); onError(request); return page; } finally { if (httpResponse != null) { EntityUtils.consumeQuietly(httpResponse.getEntity()); } if (proxyProvider != null && proxy != null) { proxyProvider.returnProxy(proxy, page, task); } } }### Assistant: @Test public void test_download_when_task_is_null() throws Exception { HttpServer server = httpServer(13423); server.response(\"foo\"); Runner.running(server, new Runnable() { @Override public void run() throws Exception { final HttpClientDownloader httpClientDownloader = new HttpClientDownloader(); Request request = new Request(); request.setUrl(\"http: Page page = httpClientDownloader.download(request, Site.me().toTask()); assertThat(page.getRawText()).isEqualTo(\"foo\"); } }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Generic setBoundType(BoundType type) { this.type = type; return this; }### Assistant: @Test void setBoundType() { instance().setBoundType(Generic.BoundType.SUPER); assertEquals(Generic.BoundType.SUPER, instance().getBoundType()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Notification> getNotifications() { Set<String> recipients = new HashSet<>(); if (group.getAuditEnabled() == Boolean.TRUE) { recipients.add(ZMSUtils.roleResourceName(ZMSConsts.SYS_AUTH_AUDIT_BY_DOMAIN, domain)); recipients.add(ZMSUtils.roleResourceName(ZMSConsts.SYS_AUTH_AUDIT_BY_ORG, org)); } else { final String notifyRoles = group.getNotifyRoles(); if (notifyRoles == null || notifyRoles.isEmpty()) { recipients.add(ZMSUtils.roleResourceName(domain, ZMSConsts.ADMIN_ROLE_NAME)); } else { Iterable<String> roleNames = Splitter.on(',') .omitEmptyStrings() .trimResults() .split(notifyRoles); for (String roleName : roleNames) { if (!roleName.contains(AuthorityConsts.ROLE_SEP)) { recipients.add(ZMSUtils.roleResourceName(domain, roleName)); } else { recipients.add(roleName); } } } } return Collections.singletonList(notificationCommon.createNotification( recipients, details, putGroupMembershipNotificationToEmailConverter, NOTIFICATION_TYPE)); }### Assistant: @Test public void testGenerateAndSendPostPutGroupMembershipNotificationNullOrgGroup() { DBService dbsvc = Mockito.mock(DBService.class); NotificationService mockNotificationService = Mockito.mock(NotificationService.class); NotificationServiceFactory testfact = () -> mockNotificationService; NotificationManager notificationManager = getNotificationManager(dbsvc, testfact); notificationManager.shutdown(); Map<String, String> details = new HashMap<>(); details.put(\"domain\", \"testdomain1\"); details.put(\"group\", \"group1\"); List<RoleMember> roleMembers = new ArrayList<>(); RoleMember rm = new RoleMember().setMemberName(\"user.domapprover1\").setActive(true); roleMembers.add(rm); rm = new RoleMember().setMemberName(\"user.domapprover2\").setActive(true); roleMembers.add(rm); rm = new RoleMember().setMemberName(\"dom2.testsvc1\").setActive(true); roleMembers.add(rm); Role domainRole = new Role().setName(\"sys.auth.audit.domain:role.testdomain1\").setRoleMembers(roleMembers); List<Role> roles = new ArrayList<>(); roles.add(domainRole); AthenzDomain athenzDomain = new AthenzDomain(\"sys.auth.audit.domain\"); athenzDomain.setRoles(roles); Mockito.when(dbsvc.getRolesByDomain(\"sys.auth.audit.domain\")).thenReturn(athenzDomain.getRoles()); ArgumentCaptor<Notification> captor = ArgumentCaptor.forClass(Notification.class); Group notifyGroup = new Group().setAuditEnabled(true).setSelfServe(false); List<Notification> notifications = new PutGroupMembershipNotificationTask(\"testdomain1\", \"neworg\", notifyGroup, details, dbsvc, USER_DOMAIN_PREFIX).getNotifications(); notificationManager.sendNotifications(notifications); Notification notification = new Notification(); notification .addRecipient(\"user.domapprover1\") .addRecipient(\"user.domapprover2\"); notification.addDetails(\"domain\", \"testdomain1\").addDetails(\"group\", \"group1\"); PutGroupMembershipNotificationTask.PutGroupMembershipNotificationToEmailConverter converter = new PutGroupMembershipNotificationTask.PutGroupMembershipNotificationToEmailConverter(); notification.setNotificationToEmailConverter(converter); notification.setType(\"group_membership_approval\"); Mockito.verify(mockNotificationService, atLeastOnce()).notify(captor.capture()); Notification actualNotification = captor.getValue(); assertEquals(actualNotification, notification); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onReceive(Context context, Intent intent) { if (!ACTION.equals(intent.getAction())) { return; } String cmd_performance = intent.getStringExtra(CMD_PERFORMANCE); String cmd_tracker_standard = intent.getStringExtra(CMD_TRACKER_STANDARD); String cmd_tracker_polling = intent.getStringExtra(CMD_TRACKER_POLLING); String cmd_launch = intent.getStringExtra(CMD_LAUNCH); String cmd_wx_server = intent.getStringExtra(CMD_WX_SERVER); if(!TextUtils.isEmpty(cmd_performance)) { if(CMD_ON.equals(cmd_performance)) { performStart(context,AnalyzerService.ATS, null); } else if(CMD_OFF.equals(cmd_performance)) { performStop(context); } else{ Log.d(Constants.TAG,\"illegal command. use [adb shell am broadcast -a com.taobao.weex.analyzer.LaunchService -e c on] to fetch performance data\"); } } else if(!TextUtils.isEmpty(cmd_tracker_standard)) { if(CMD_ON.equals(cmd_tracker_standard)) { VDomController.isStandardMode = true; VDomController.isPollingMode = false; PollingVDomMonitor.shouldHighlight = false; } else if(CMD_OFF.equals(cmd_tracker_standard)) { VDomController.isStandardMode = false; } else { Log.d(Constants.TAG,\"illegal command. use [adb shell am broadcast -a com.taobao.weex.analyzer.LaunchService -e d on] to start vdom tracker\"); } } else if(!TextUtils.isEmpty(cmd_tracker_polling)) { String highlightEnabled = intent.getStringExtra(\"h\"); if(CMD_ON.equals(cmd_tracker_polling)) { VDomController.isPollingMode = true; VDomController.isStandardMode = false; PollingVDomMonitor.shouldStop = false; PollingVDomMonitor.shouldHighlight = CMD_ON.equals(highlightEnabled); } else if(CMD_OFF.equals(cmd_tracker_polling)) { VDomController.isPollingMode = false; PollingVDomMonitor.shouldStop = true; PollingVDomMonitor.shouldHighlight = false; } else { Log.d(Constants.TAG,\"illegal command. use [adb shell am broadcast -a com.taobao.weex.analyzer.LaunchService -e f on] to start vdom tracker(polling mode)\"); } } else if(!TextUtils.isEmpty(cmd_launch)) { if(TRUE.equals(cmd_launch)) { String from = intent.getStringExtra(WeexDevOptions.EXTRA_FROM); String deviceId = intent.getStringExtra(WeexDevOptions.EXTRA_DEVICE_ID); String wsUrl = intent.getStringExtra(WeexDevOptions.EXTRA_WS_URL); WXLogUtils.d(Constants.TAG,\"from:\"+from+\",deviceId:\"+deviceId+\",wxurl:\"+wsUrl); Map<String,String> extras = new HashMap<>(); extras.put(WeexDevOptions.EXTRA_DEVICE_ID, deviceId); extras.put(WeexDevOptions.EXTRA_WS_URL,wsUrl); performStart(context,from,extras); } } else if(!TextUtils.isEmpty(cmd_wx_server)) { DebugTool.startRemoteDebug(cmd_wx_server); } }### Assistant: @Test public void onReceive() throws Exception { ShadowApplication application = ShadowApplication.getInstance(); Intent intent = new Intent(ACTION); boolean result = application.hasReceiverForIntent(intent); assertTrue(result); List<BroadcastReceiver> receivers = application.getReceiversForIntent(intent); assertEquals(1,receivers.size()); intent.putExtra(\"c\",\"off\"); BroadcastReceiver targetReceiver = receivers.get(0); targetReceiver.onReceive(application.getApplicationContext(),intent); Intent serviceIntent = application.getNextStoppedService(); assertEquals(serviceIntent.getComponent().getClassName(),AnalyzerService.class.getCanonicalName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void cancelSlicing(final @NonNull Predicate<Identifier> filter) { stateCache.asMap().keySet().removeIf( messageSliceIdentifier -> filter.test(messageSliceIdentifier.getClientIdentifier())); }### Assistant: @Test public void testCancelSlicing() throws IOException { doReturn(1).when(mockInputStream).read(any(byte[].class)); final MessageSlicer slicer = newMessageSlicer(\"testCloseAllSlicedMessageState\", 1); slicer.slice(SliceOptions.builder().identifier(IDENTIFIER).fileBackedOutputStream(mockFiledBackedStream) .sendTo(testProbe.ref()).replyTo(testProbe.ref()).onFailureCallback(mockOnFailureCallback).build()); final FileBackedOutputStream mockFiledBackedStream2 = mock(FileBackedOutputStream.class); setupMockFiledBackedStream(mockFiledBackedStream2); slicer.slice(SliceOptions.builder().identifier(new StringIdentifier(\"test2\")) .fileBackedOutputStream(mockFiledBackedStream2).sendTo(testProbe.ref()).replyTo(testProbe.ref()) .onFailureCallback(mockOnFailureCallback).build()); slicer.cancelSlicing(id -> id.equals(IDENTIFIER)); verify(mockFiledBackedStream).cleanup(); verify(mockFiledBackedStream2, never()).cleanup(); verifyNoMoreInteractions(mockOnFailureCallback); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Api(1.0) public static boolean isColor(String color) { try { getArgb(color); return true; } catch (Exception e) { return false; } }### Assistant: @Test public void thatIsNotAValidColor(){ assertThat(HaloUtils.isColor(\"#zzzzzz\")).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SimpleFeatureCollection parse(File file, CoordinateReferenceSystem sourceCRS, CoordinateReferenceSystem targetCRS) throws ServiceException { try { sourceCRS = CRS.decode(\"EPSG:4326\", true); } catch (FactoryException e) { throw new ServiceException(\"Failed to decode sourceCrs (EPSG:4326) for GPXParser\"); } try { SimpleFeatureCollection parsed; parsed = parse(file, GPX.trkType); if (!parsed.isEmpty()) { return new ReprojectingFeatureCollection(parsed, sourceCRS, targetCRS); } parsed = parse10(file, GPX10.trkType); if (!parsed.isEmpty()) { return new ReprojectingFeatureCollection(parsed, sourceCRS, targetCRS); } parsed = parse(file, GPX.rteType); if (!parsed.isEmpty()) { return new ReprojectingFeatureCollection(parsed, sourceCRS, targetCRS); } parsed = parse10(file, GPX10.rteType); if (!parsed.isEmpty()) { return new ReprojectingFeatureCollection(parsed, sourceCRS, targetCRS); } parsed = parse(file, GPX.wptType); if (!parsed.isEmpty()) { return new ReprojectingFeatureCollection(parsed, sourceCRS, targetCRS); } parsed = parse10(file, GPX10.wptType); if (!parsed.isEmpty()) { return new ReprojectingFeatureCollection(parsed, sourceCRS, targetCRS); } return parsed; } catch (Exception e) { throw new UserLayerException(\"Failed to parse GPX: \" + e.getMessage(), UserLayerException.ErrorType.PARSER, UserLayerException.ErrorType.INVALID_FORMAT); } }### Assistant: @Test public void testWaypoints() throws URISyntaxException, NoSuchAuthorityCodeException, ServiceException, FactoryException { File file = new File(getClass().getResource(\"waypoints.gpx\").toURI()); GPXParser parser = new GPXParser(); SimpleFeatureCollection fc = parser.parse(file, null, DefaultGeographicCRS.WGS84); assertEquals(2, fc.size()); SimpleFeatureIterator it = fc.features(); try { int i = 1; while (it.hasNext()) { SimpleFeature f = it.next(); assertEquals(\"name\" + i, f.getAttribute(\"name\")); assertEquals(\"cmt\" + i, f.getAttribute(\"cmt\")); assertEquals(\"desc\" + i, f.getAttribute(\"desc\")); assertEquals(\"src\" + i, f.getAttribute(\"src\")); assertEquals(\"http: assertEquals(\"linktext\" + i, f.getAttribute(\"linkText\")); assertEquals(\"WayPoint\", f.getAttribute(\"type\")); i++; } } finally { it.close(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = {\"/sp_dictionary/remove_SafePolicyWarning\"}, method = {RequestMethod.POST}) public void removeSafePolicyWarningDictionary(HttpServletRequest request, HttpServletResponse response) throws IOException { DictionaryUtils utils = getDictionaryUtilsInstance(); utils.removeData(request, response, safePolicyWarningDatas, SafePolicyWarning.class); }### Assistant: @Test public void testRemoveSafePolicyWarningDictionary() { jsonString = \"{\\\"userid\\\":\\\"demo\\\",\\\"data\\\":{\\\"id\\\":1,\\\"description\\\":\\\"test\\\",\\\"name\\\":\\\"Test\\\"}}\"; try (BufferedReader br = new BufferedReader(new StringReader(jsonString))) { when(request.getReader()).thenReturn(br); controller.removeSafePolicyWarningDictionary(request, response); assertTrue(response.getContentAsString() != null && response.getContentAsString().contains(\"safePolicyWarningDatas\")); } catch (Exception e) { logger.error(\"Exception\" + e); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) { if (!(msg instanceof HttpMessage || msg instanceof HttpContent)) { ctx.write(msg, promise); return; } boolean release = true; SimpleChannelPromiseAggregator promiseAggregator = new SimpleChannelPromiseAggregator(promise, ctx.channel(), ctx.executor()); try { Http2ConnectionEncoder encoder = encoder(); boolean endStream = false; if (msg instanceof HttpMessage) { final HttpMessage httpMsg = (HttpMessage) msg; currentStreamId = getStreamId(httpMsg.headers()); Http2Headers http2Headers = HttpConversionUtil.toHttp2Headers(httpMsg, validateHeaders); endStream = msg instanceof FullHttpMessage && !((FullHttpMessage) msg).content().isReadable(); writeHeaders(ctx, encoder, currentStreamId, httpMsg.headers(), http2Headers, endStream, promiseAggregator); } if (!endStream && msg instanceof HttpContent) { boolean isLastContent = false; HttpHeaders trailers = EmptyHttpHeaders.INSTANCE; Http2Headers http2Trailers = EmptyHttp2Headers.INSTANCE; if (msg instanceof LastHttpContent) { isLastContent = true; final LastHttpContent lastContent = (LastHttpContent) msg; trailers = lastContent.trailingHeaders(); http2Trailers = HttpConversionUtil.toHttp2Headers(trailers, validateHeaders); } final ByteBuf content = ((HttpContent) msg).content(); endStream = isLastContent && trailers.isEmpty(); release = false; encoder.writeData(ctx, currentStreamId, content, 0, endStream, promiseAggregator.newPromise()); if (!trailers.isEmpty()) { writeHeaders(ctx, encoder, currentStreamId, trailers, http2Trailers, true, promiseAggregator); } } } catch (Throwable t) { onError(ctx, t); promiseAggregator.setFailure(t); } finally { if (release) { ReferenceCountUtil.release(msg); } promiseAggregator.doneAllocatingPromises(); } }### Assistant: @Test public void testChunkedRequestWithBodyAndTrailingHeaders() throws Exception { final String text = \"foooooo\"; final String text2 = \"goooo\"; final List<String> receivedBuffers = Collections.synchronizedList(new ArrayList<String>()); doAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock in) throws Throwable { receivedBuffers.add(((ByteBuf) in.getArguments()[2]).toString(UTF_8)); return null; } }).when(serverListener).onDataRead(any(ChannelHandlerContext.class), eq(3), any(ByteBuf.class), eq(0), eq(false)); bootstrapEnv(4, 1, 1); final HttpRequest request = new DefaultHttpRequest(HTTP_1_1, POST, \"http: final HttpHeaders httpHeaders = request.headers(); httpHeaders.set(HttpHeaderNames.HOST, \"www.example.org:5555\"); httpHeaders.add(HttpHeaderNames.TRANSFER_ENCODING, \"chunked\"); httpHeaders.add(of(\"foo\"), of(\"goo\")); httpHeaders.add(of(\"foo\"), of(\"goo2\")); httpHeaders.add(of(\"foo2\"), of(\"goo2\")); final Http2Headers http2Headers = new DefaultHttp2Headers().method(new AsciiString(\"POST\")).path(new AsciiString(\"/example\")) .authority(new AsciiString(\"www.example.org:5555\")).scheme(new AsciiString(\"http\")) .add(new AsciiString(\"foo\"), new AsciiString(\"goo\")) .add(new AsciiString(\"foo\"), new AsciiString(\"goo2\")) .add(new AsciiString(\"foo2\"), new AsciiString(\"goo2\")); final DefaultHttpContent httpContent = new DefaultHttpContent(Unpooled.copiedBuffer(text, UTF_8)); final LastHttpContent lastHttpContent = new DefaultLastHttpContent(Unpooled.copiedBuffer(text2, UTF_8)); lastHttpContent.trailingHeaders().add(of(\"trailing\"), of(\"bar\")); final Http2Headers http2TrailingHeaders = new DefaultHttp2Headers() .add(new AsciiString(\"trailing\"), new AsciiString(\"bar\")); ChannelPromise writePromise = newPromise(); ChannelFuture writeFuture = clientChannel.write(request, writePromise); ChannelPromise contentPromise = newPromise(); ChannelFuture contentFuture = clientChannel.write(httpContent, contentPromise); ChannelPromise lastContentPromise = newPromise(); ChannelFuture lastContentFuture = clientChannel.write(lastHttpContent, lastContentPromise); clientChannel.flush(); assertTrue(writePromise.awaitUninterruptibly(WAIT_TIME_SECONDS, SECONDS)); assertTrue(writePromise.isSuccess()); assertTrue(writeFuture.awaitUninterruptibly(WAIT_TIME_SECONDS, SECONDS)); assertTrue(writeFuture.isSuccess()); assertTrue(contentPromise.awaitUninterruptibly(WAIT_TIME_SECONDS, SECONDS)); assertTrue(contentPromise.isSuccess()); assertTrue(contentFuture.awaitUninterruptibly(WAIT_TIME_SECONDS, SECONDS)); assertTrue(contentFuture.isSuccess()); assertTrue(lastContentPromise.awaitUninterruptibly(WAIT_TIME_SECONDS, SECONDS)); assertTrue(lastContentPromise.isSuccess()); assertTrue(lastContentFuture.awaitUninterruptibly(WAIT_TIME_SECONDS, SECONDS)); assertTrue(lastContentFuture.isSuccess()); awaitRequests(); verify(serverListener).onHeadersRead(any(ChannelHandlerContext.class), eq(3), eq(http2Headers), eq(0), anyShort(), anyBoolean(), eq(0), eq(false)); verify(serverListener).onDataRead(any(ChannelHandlerContext.class), eq(3), any(ByteBuf.class), eq(0), eq(false)); verify(serverListener).onHeadersRead(any(ChannelHandlerContext.class), eq(3), eq(http2TrailingHeaders), eq(0), anyShort(), anyBoolean(), eq(0), eq(true)); assertEquals(1, receivedBuffers.size()); assertEquals(text + text2, receivedBuffers.get(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Number evaluate(final EvaluationContext ec) throws CelloException { final String fmt = \"Cannot evaluate %s in scalar context.\"; throw new CelloException( String.format(fmt, BivariateLookupTableFunction.class.getSimpleName())); }### Assistant: @Test public void evaluate_MockData_ShouldBeExpectedScalar1() throws CelloException { Map<Variable, Double> args = new HashMap<>(); args.put(lut.getVariables().findCObjectByName(\"x\"), 1.5); args.put(lut.getVariables().findCObjectByName(\"bin\"), 1.5); assertEquals(lut.evaluate(args), 5.0, TOLERANCE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TypeEnvironment peek() { return environment; }### Assistant: @Test public void rootEnvironmentShouldBeThereInitially() { assertNotNull(context.peek()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SignedJWT generateUnauthToken() { try { return mobiTokenVerifier.generateToken(\"anon\", ISSUER, ANON_SCOPE, tokenDuration, null); } catch (JOSEException e) { String msg = \"Problem Creating JWT Token\"; LOG.error(msg, e); throw new MobiException(e); } }### Assistant: @Test public void generateUnauthTokenTest() throws Exception { SignedJWT result = manager.generateUnauthToken(); assertEquals(jwt, result); verify(mobiTokenVerifier).generateToken(\"anon\", SimpleTokenManager.ISSUER, SimpleTokenManager.ANON_SCOPE, 86400000, null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void setValueList(final String valueList) { editingWrapper().setValueList(valueList); }### Assistant: @Test public void testSetValueList() { final ActionWrapper actionWrapper = mock(ActionWrapper.class); final String valueList = \"valueList\"; doReturn(actionWrapper).when(plugin).editingWrapper(); plugin.setValueList(valueList); verify(actionWrapper).setValueList(valueList); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T extends Tuple> DataSource<T> tupleType(Class<T> targetType) { Preconditions.checkNotNull(targetType, \"The target type class must not be null.\"); if (!Tuple.class.isAssignableFrom(targetType)) { throw new IllegalArgumentException(\"The target type must be a subclass of \" + Tuple.class.getName()); } @SuppressWarnings(\"unchecked\") TupleTypeInfo<T> typeInfo = (TupleTypeInfo<T>) TypeExtractor.createTypeInfo(targetType); CsvInputFormat<T> inputFormat = new TupleCsvInputFormat<T>(path, this.lineDelimiter, this.fieldDelimiter, typeInfo, this.includedMask); Class<?>[] classes = new Class<?>[typeInfo.getArity()]; for (int i = 0; i < typeInfo.getArity(); i++) { classes[i] = typeInfo.getTypeAt(i).getTypeClass(); } configureInputFormat(inputFormat); return new DataSource<T>(executionContext, inputFormat, typeInfo, Utils.getCallLocationName()); }### Assistant: @Test public void testSubClass() throws Exception { CsvReader reader = getCsvReader(); DataSource<SubItem> sitems = reader.tupleType(SubItem.class); TypeInformation<?> info = sitems.getType(); Assert.assertEquals(true, info.isTupleType()); Assert.assertEquals(SubItem.class, info.getTypeClass()); @SuppressWarnings(\"unchecked\") TupleTypeInfo<SubItem> tinfo = (TupleTypeInfo<SubItem>) info; Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, tinfo.getTypeAt(0)); Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO, tinfo.getTypeAt(1)); Assert.assertEquals(BasicTypeInfo.DOUBLE_TYPE_INFO, tinfo.getTypeAt(2)); Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO, tinfo.getTypeAt(3)); CsvInputFormat<?> inputFormat = (CsvInputFormat<?>) sitems.getInputFormat(); Assert.assertArrayEquals(new Class<?>[]{Integer.class, String.class, Double.class, String.class}, inputFormat.getFieldTypes()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ReactMethod public void getTags(final Callback tagsCallback) { MainThreadHandler.runOnMainThread(new Runnable() { @Override public void run() { WritableArray tagsArray; try { ArrayList<String> tags = Instabug.getTags(); tagsArray = Arguments.createArray(); for (int i = 0; i < tags.size(); i++) { tagsArray.pushString(tags.get(i)); } tagsCallback.invoke(tagsArray); } catch (Exception e) { e.printStackTrace(); } } }); }### Assistant: @Test public void givenCallback$getTags_whenQuery_thenShouldCallNativeApiAndInvokeCallback() { PowerMockito.mockStatic(Instabug.class); PowerMockito.mockStatic(Arguments.class); Callback callback = mock(Callback.class); ArrayList<String> tags = new ArrayList<>(); tags.add(\"tag1\"); tags.add(\"tag2\"); PowerMockito.when(Instabug.getTags()).thenReturn(tags); PowerMockito.when(Arguments.createArray()).thenReturn(new JavaOnlyArray()); rnModule.getTags(callback); PowerMockito.verifyStatic(VerificationModeFactory.times(1)); Instabug.getTags(); WritableArray expectedArray = new JavaOnlyArray(); expectedArray.pushString(\"tag1\"); expectedArray.pushString(\"tag2\"); verify(callback).invoke(expectedArray); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean process(IReadDataBlock data, final int nar) { clear(); int nlags = nar == 0 ? computeDefaultLags(data.getLength()) : nar; if (nlags < 0) { return false; } switch (method_) { case Durbin: computeDurbin(data, nlags); break; case Ols: computeOls(data, nlags); } return ar != null; }### Assistant: @Test public void testOls() { AutoRegressiveSpectrum ar=new AutoRegressiveSpectrum(Method.Ols); ar.process(X, 30); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String bigIntegerToIp(BigInteger ipv4BigInteger) { try { return Inet6Address.getByAddress(ipv4BigInteger.toByteArray()).getHostAddress(); } catch (UnknownHostException e) { LOG.error(\"bigIntegerToIp\", e); return \"ERROR\"; } }### Assistant: @Test public void bigIntegerToIpTest() { BigInteger start = new BigInteger(\"42550872755692912415807417417958686721\"); Assert.assertEquals(\"longToIp Test 1: convert of 42550872755692912415807417417958686721 failed\", \"2003:0:0:0:0:0:0:1\", NeutronSubnetIpAllocationPool.bigIntegerToIp(start)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Job moveById(final String mpId, final String targetStorage) { RequireUtil.notEmpty(mpId, \"mpId\"); RequireUtil.notEmpty(targetStorage, \"targetStorage\"); List<String> args = new LinkedList<String>(); args.add(targetStorage); args.add(mpId); try { return serviceRegistry.createJob(JOB_TYPE, Operation.MoveById.toString(), args, null, true, NONTERMINAL_JOB_LOAD); } catch (ServiceRegistryException e) { throw new AssetManagerException(\"Unable to create a job\", e); } }### Assistant: @Test public void testById() throws ServiceRegistryException { String[] mp = createAndAddMediaPackagesSimple(1, 2, 2, Opt.<String>none()); createIdExpectation(mp[0]); EasyMock.replay(sr); tsamjp.moveById(mp[0], REMOTE_STORE_1_ID); EasyMock.verify(sr); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public GoogleCloudStorageItemInfo getItemInfo(StorageResourceId resourceId) throws IOException { GoogleCloudStorageItemInfo item = cache.getItem(resourceId); if (item == null && resourceId.isStorageObject()) { String bucketName = resourceId.getBucketName(); String objectName = resourceId.getObjectName(); int lastSlashIndex = objectName.lastIndexOf(PATH_DELIMITER); String directoryName = lastSlashIndex >= 0 ? objectName.substring(0, lastSlashIndex + 1) : null; listObjectInfoPage( bucketName, directoryName, ListObjectOptions.DEFAULT, null); item = cache.getItem(resourceId); } if (item == null) { item = super.getItemInfo(resourceId); cache.putItem(item); } return item; }### Assistant: @Test public void testGetItemInfoMissing() throws IOException { GoogleCloudStorageItemInfo result = gcs.getItemInfo(ITEM_A_A.getResourceId()); verify(gcsDelegate).getItemInfo(eq(ITEM_A_A.getResourceId())); assertThat(result).isEqualTo(ITEM_A_A); assertThat(cache.getItem(ITEM_A_A.getResourceId())).isEqualTo(ITEM_A_A); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static File resolveSourceFile( List<String> sourcePaths, String sourceFileName, String groupId, String artifactId ) { return resolveSourceFile( sourceFileName, PathUtil.filesList( sourcePaths ), groupId, artifactId ); }### Assistant: @Test( expectedExceptions = { IllegalArgumentException.class } ) public void notResolve() { File file = SourceFileResolver.resolveSourceFile( \"NotResolve.mxml\", getDir( \"notresolve\" ), null, null ); MatcherAssert.assertThat( file, CoreMatchers.nullValue() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validateConfigurationValues( String configuration, JSONObject valuesJSONObject) throws FragmentEntryConfigurationException { if (Validator.isNull(configuration)) { return; } InputStream configurationJSONSchemaInputStream = FragmentEntryValidatorImpl.class.getResourceAsStream( \"dependencies/configuration-json-schema.json\"); try { JSONValidator.validate( configuration, configurationJSONSchemaInputStream); JSONObject configurationJSONObject = JSONFactoryUtil.createJSONObject(configuration); JSONArray fieldSetsJSONArray = configurationJSONObject.getJSONArray( \"fieldSets\"); Set<String> fieldNames = new HashSet<>(); for (int fieldSetIndex = 0; fieldSetIndex < fieldSetsJSONArray.length(); fieldSetIndex++) { JSONObject fieldSetJSONObject = fieldSetsJSONArray.getJSONObject(fieldSetIndex); JSONArray fieldsJSONArray = fieldSetJSONObject.getJSONArray( \"fields\"); for (int fieldIndex = 0; fieldIndex < fieldsJSONArray.length(); fieldIndex++) { JSONObject fieldJSONObject = fieldsJSONArray.getJSONObject( fieldIndex); String fieldName = fieldJSONObject.getString(\"name\"); if (fieldNames.contains(fieldName)) { throw new FragmentEntryConfigurationException( \"Field names must be unique\"); } JSONObject typeOptionsJSONObject = fieldJSONObject.getJSONObject(\"typeOptions\"); if (typeOptionsJSONObject != null) { String defaultValue = fieldJSONObject.getString( \"defaultValue\"); if (!_checkValidationRules( defaultValue, typeOptionsJSONObject.getJSONObject( \"validation\"))) { throw new FragmentEntryConfigurationException( \"Invalid default configuration value for \" + \"field \" + fieldName); } if (valuesJSONObject != null) { String value = valuesJSONObject.getString( fieldName); if (!_checkValidationRules( value, typeOptionsJSONObject.getJSONObject( \"validation\"))) { throw new FragmentEntryConfigurationException( \"Invalid configuration value for field \" + fieldName); } } } fieldNames.add(fieldName); } } } catch (JSONException jsonException) { throw new FragmentEntryConfigurationException( _getMessage(jsonException.getMessage()), jsonException); } catch (JSONValidatorException jsonValidatorException) { throw new FragmentEntryConfigurationException( _getMessage(jsonValidatorException.getMessage()), jsonValidatorException); } }### Assistant: @Test public void testValidateConfigurationValuesTextFieldTypeInvalidNumberLimit() throws Exception { expectedException.expect(FragmentEntryConfigurationException.class); _fragmentEntryValidatorImpl.validateConfigurationValues( _read( \"configuration_field_text_typeoptions_validation_number.json\"), JSONUtil.put(\"numberField\", 1000)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setAttachmentContent3( final IContentItem attachmentContent3 ) { this.attachmentContent3 = attachmentContent3; }### Assistant: @Test public void testSetAttachmentContent3() throws Exception { IContentItem attachmentContent = mock( IContentItem.class ); sec.setAttachmentContent3( attachmentContent ); assertEquals( attachmentContent, sec.getAttachmentContent3() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Runnable pushEdgeStore(int nodes, double prob) { final Configuration config = new Configuration(); config.setEdgeIdType(Integer.class); config.setNodeIdType(Integer.class); final RandomGraph graph = new RandomGraph(nodes, prob, config).generate(); final EdgeStore edgeStore = graph.getStore().getEdgeStore(); final List<Node> nodeList = graph.getNodes(); final List<Edge> edgeList = graph.getEdges(); graph.getStore().addAllNodes(nodeList); Runnable runnable = new Runnable() { @Override public void run() { edgeStore.clear(); for(Edge edge : edgeList) { edgeStore.add(edge); } } }; return runnable; }### Assistant: @Test public void testPushStore() { int[] n = {100, 1000, 5000}; double[] p = {0.01, 0.1, 0.3}; for (int nodes : n) { for (double prob : p) { int edges = (int) (nodes * (nodes - 1) * prob); NanoBench.create().measurements(2).measure(\"push edge store nodes=\" + nodes + \" edges=\" + edges, new EdgeStoreBenchmark().pushEdgeStore(nodes, prob)); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object resolveMockConfiguration(String doubleName, @Nullable Field field) { return resolveDoubleConfiguration( doubleName, field, configurationParser::parseMockConfiguration); }### Assistant: @Test public void should_resolve_mock_configuration() { final Object config = new Object(); Mockito .when(configurationParser.parseMockConfiguration(doubleName, configAnnotationInstance())) .thenReturn(config); assertEquals( config, resolveMockConfiguration(doubleField())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean hasPermission(Credentials credentials, FunctionIdentity function) throws InvalidCredentialsException { SessionDescriptor descriptor = validate(credentials); return hasPermission(getSubject(descriptor), getFunctionName(function)); }### Assistant: @Test public void testHasPermissionWithDirectlyGrantedFunction() throws Exception { String content = \"\" + \"subject.1.name = subject\\n\" + \"organization.1.name = organization\\n\" + \"subject.1.permission.1 = function\" + \"\"; setup(content); assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier(\"function\"))); assertTrue(accessController.hasPermission(createCredentials(1), () -> \"function\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String toHex(final byte[] data) { return data != null ? toHex(data, data.length) : null; }### Assistant: @Test public void toHex() { assertEquals(\"0102030405060708090a0b0c\", HexArray.toHex(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12})); assertEquals(\"0102030405060708090a0b0c\", new HexArray(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}).toString()); assertEquals(\"01020304..\", HexArray.toHexShort(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, 4)); assertEquals(\"0102030405\", HexArray.toHexShort(new byte[]{1, 2, 3, 4, 5}, 5)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Type managerType() { return SimpleType.create(fullyQualifiedTypeName() + MANAGER_SUFFIX); }### Assistant: @Test void testManagerType() { assertEquals(fullName(\"UserManager\"), instance.managerType().getTypeName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean permittedTopology(DimensionInfo sourceDimensionInfo, DimensionInfo targetDimensionInfo) { return sourceDimensionInfo.isArea() && targetDimensionInfo.isArea(); }### Assistant: @Test public void testPermittedTopology_polygon_linestring() { DimensionInfo sourceDimensionInfo = DimensionInfo.XY_POLYGON; DimensionInfo targetDimensionInfo = DimensionInfo.XY_LINESTRING; RccDisconnectedFF instance = new RccDisconnectedFF(); boolean expResult = false; boolean result = instance.permittedTopology(sourceDimensionInfo, targetDimensionInfo); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String escape(String text) { for (int i = SPECIAL.length - 1; i >= 0; i--) { text = StringUtil.replace( text, SPECIAL[i], StringPool.BACK_SLASH + SPECIAL[i]); } return text; }### Assistant: @Test public void testEscapeMultipleBracket() { Assert.assertEquals(\"abc\\\\{\", KeywordsUtil.escape(\"abc{\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static JsonObject parse(InputStream input) { JSONMaker maker = new JSONMaker() ; _parse(input, maker) ; return (JsonObject)maker.jsonValue() ; }### Assistant: @Test(expected = JsonParseException.class) public void js_value_10() { JSON.parse(\"1\") ; }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Factory public static Matcher<Source> conformsTo(Schema schema) { return new ConformsToSchema(schema); }### Assistant: @Test public void anInvalidAttributeDoesNotAdhereToTheSchema() throws SAXException { String xml = \"<person private=\\\"2\\\"><name>Dave</name></person>\"; assertThat(the(xml), not(conformsTo(schema))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override void notifyEntityOwnershipListeners(final DOMEntity entity, final boolean wasOwner, final boolean isOwner, final boolean hasOwner) { listenerLock.readLock().lock(); try { Collection<DOMEntityOwnershipListener> listeners = entityTypeListenerMap.get(entity.getType()); if (!listeners.isEmpty()) { notifyListeners(entity, wasOwner, isOwner, hasOwner, listeners.stream().map(listenerActorMap::get).collect(Collectors.toList())); } } finally { listenerLock.readLock().unlock(); } }### Assistant: @Test public void testNotifyEntityOwnershipListeners() { EntityOwnershipListenerSupport support = new EntityOwnershipListenerSupport(actorContext, \"test\"); DOMEntityOwnershipListener mockListener1 = mock(DOMEntityOwnershipListener.class, \"EntityOwnershipListener1\"); DOMEntityOwnershipListener mockListener2 = mock(DOMEntityOwnershipListener.class, \"EntityOwnershipListener2\"); DOMEntityOwnershipListener mockListener12 = mock(DOMEntityOwnershipListener.class, \"EntityOwnershipListener1_2\"); String entityType1 = \"type1\"; String entityType2 = \"type2\"; final DOMEntity entity1 = new DOMEntity(entityType1, YangInstanceIdentifier.of(QName.create(\"test\", \"id1\"))); final DOMEntity entity2 = new DOMEntity(entityType2, YangInstanceIdentifier.of(QName.create(\"test\", \"id2\"))); final DOMEntity entity3 = new DOMEntity(\"noListener\", YangInstanceIdentifier.of(QName.create(\"test\", \"id5\"))); support.addEntityOwnershipListener(entityType1, mockListener1); support.addEntityOwnershipListener(entityType1, mockListener1); support.addEntityOwnershipListener(entityType1, mockListener12); support.addEntityOwnershipListener(entityType2, mockListener2); support.notifyEntityOwnershipListeners(entity1, false, true, true); verify(mockListener1, timeout(5000)).ownershipChanged(ownershipChange(entity1, false, true, true)); verify(mockListener12, timeout(5000)).ownershipChanged(ownershipChange(entity1, false, true, true)); Uninterruptibles.sleepUninterruptibly(300, TimeUnit.MILLISECONDS); verify(mockListener2, never()).ownershipChanged(any(DOMEntityOwnershipChange.class)); assertEquals(\"# of listener actors\", 2, actorContext.children().size()); reset(mockListener1, mockListener2, mockListener12); support.notifyEntityOwnershipListeners(entity2, false, true, true); verify(mockListener2, timeout(5000)).ownershipChanged(ownershipChange(entity2, false, true, true)); Uninterruptibles.sleepUninterruptibly(300, TimeUnit.MILLISECONDS); verify(mockListener1, never()).ownershipChanged(any(DOMEntityOwnershipChange.class)); verify(mockListener12, never()).ownershipChanged(any(DOMEntityOwnershipChange.class)); assertEquals(\"# of listener actors\", 3, actorContext.children().size()); reset(mockListener1, mockListener2, mockListener12); support.notifyEntityOwnershipListeners(entity3, true, false, true); Uninterruptibles.sleepUninterruptibly(300, TimeUnit.MILLISECONDS); verify(mockListener1, never()).ownershipChanged(any(DOMEntityOwnershipChange.class)); verify(mockListener2, never()).ownershipChanged(any(DOMEntityOwnershipChange.class)); verify(mockListener12, never()).ownershipChanged(any(DOMEntityOwnershipChange.class)); reset(mockListener1, mockListener2, mockListener12); Iterable<ActorRef> listenerActors = actorContext.children(); assertEquals(\"# of listener actors\", 3, listenerActors.size()); support.removeEntityOwnershipListener(entityType1, mockListener1); support.notifyEntityOwnershipListeners(entity1, true, false, true); verify(mockListener12, timeout(5000)).ownershipChanged(ownershipChange(entity1, true, false, true)); Uninterruptibles.sleepUninterruptibly(300, TimeUnit.MILLISECONDS); verify(mockListener1, never()).ownershipChanged(any(DOMEntityOwnershipChange.class)); reset(mockListener1, mockListener2, mockListener12); List<TestKit> watchers = new ArrayList<>(); for (Iterator<ActorRef> iter = listenerActors.iterator(); iter.hasNext();) { TestKit kit = new TestKit(getSystem()); kit.watch(iter.next()); watchers.add(kit); } support.removeEntityOwnershipListener(entityType1, mockListener12); support.removeEntityOwnershipListener(entityType1, mockListener12); support.removeEntityOwnershipListener(entityType2, mockListener2); Iterator<ActorRef> iter = listenerActors.iterator(); for (TestKit kit: watchers) { kit.expectTerminated(kit.duration(\"3 seconds\"), iter.next()); } assertEquals(\"# of listener actors\", 0, actorContext.children().size()); reset(mockListener1, mockListener2); support.addEntityOwnershipListener(entityType1, mockListener1); support.notifyEntityOwnershipListeners(entity1, false, false, true); verify(mockListener1, timeout(5000)).ownershipChanged(ownershipChange(entity1, false, false, true)); verify(mockListener12, never()).ownershipChanged(any(DOMEntityOwnershipChange.class)); verify(mockListener2, never()).ownershipChanged(any(DOMEntityOwnershipChange.class)); support.addEntityOwnershipListener(entityType1, mockListener2); support.removeEntityOwnershipListener(entityType1, mockListener2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String uri = request.getPathInfo(); String method = request.getMethod().toUpperCase(); log.trace(\"ApiListenerServlet dispatching uri [\"+uri+\"] and method [\"+method+\"]\"); if (uri==null) { response.setStatus(400); log.warn(\"Aborting request with status [400], empty uri\"); return; } if(uri.startsWith(\"/\")) uri = uri.substring(1); if(uri.endsWith(\"/\")) uri = uri.substring(0, uri.length()-1); if(uri.equalsIgnoreCase(\"openapi.json\")) { JsonObject jsonSchema = dispatcher.generateOpenApiJsonSchema(); returnJson(response, 200, jsonSchema); return; } if(uri.endsWith(\"/openapi.json\")) { uri = uri.substring(0, uri.length()-\"/openapi.json\".length()); List<ApiDispatchConfig> apiConfigs = dispatcher.findMatchingConfigsForUri(uri); JsonObject jsonSchema = dispatcher.generateOpenApiJsonSchema(apiConfigs); returnJson(response, 200, jsonSchema); return; } PipeLineSessionBase messageContext = new PipeLineSessionBase(); messageContext.put(IPipeLineSession.HTTP_REQUEST_KEY, request); messageContext.put(IPipeLineSession.HTTP_RESPONSE_KEY, response); messageContext.put(IPipeLineSession.SERVLET_CONTEXT_KEY, getServletContext()); messageContext.setSecurityHandler(new HttpSecurityHandler(request)); try { ApiDispatchConfig config = dispatcher.findConfigForUri(uri); if(config == null) { response.setStatus(404); if(log.isTraceEnabled()) log.trace(\"Aborting request with status [404], no ApiListener configured for [\"+uri+\"]\"); return; } String origin = request.getHeader(\"Origin\"); if(method.equals(\"OPTIONS\") || origin != null) { response.setHeader(\"Access-Control-Allow-Origin\", CorsAllowOrigin); String headers = request.getHeader(\"Access-Control-Request-Headers\"); if (headers != null) response.setHeader(\"Access-Control-Allow-Headers\", headers); response.setHeader(\"Access-Control-Expose-Headers\", CorsExposeHeaders); StringBuilder methods = new StringBuilder(); for (String mtd : config.getMethods()) { methods.append(\", \").append(mtd); } response.setHeader(\"Access-Control-Allow-Methods\", methods.toString()); if(method.equals(\"OPTIONS\")) { response.setStatus(200); if(log.isTraceEnabled()) log.trace(\"Aborting preflight request with status [200], method [\"+method+\"]\"); return; } } ApiListener listener = config.getApiListener(method); if(listener == null) { response.setStatus(405); if(log.isTraceEnabled()) log.trace(\"Aborting request with status [405], method [\"+method+\"] not allowed\"); return; } if(log.isTraceEnabled()) log.trace(\"ApiListenerServlet calling service [\"+listener.getName()+\"]\"); ApiPrincipal userPrincipal = null; if(!AuthenticationMethods.NONE.equals(listener.getAuthenticationMethod())) { String authorizationToken = null; Cookie authorizationCookie = null; switch (listener.getAuthenticationMethod()) { case COOKIE: Cookie[] cookies = request.getCookies(); if(cookies != null) { for (Cookie cookie : cookies) { if(\"authenticationToken\".equals(cookie.getName())) { authorizationToken = cookie.getValue(); authorizationCookie = cookie; authorizationCookie.setPath(\"/\"); } } } break; case HEADER: authorizationToken = request.getHeader(\"Authorization\"); break; case AUTHROLE: List<String> roles = listener.getAuthenticationRoles(); if(roles != null) { for (String role : roles) { if(request.isUserInRole(role)) { userPrincipal = new ApiPrincipal(); break; } } } break; default: break; } if(authorizationToken != null && cache.containsKey(authorizationToken)) userPrincipal = (ApiPrincipal) cache.get(authorizationToken); if(userPrincipal == null || !userPrincipal.isLoggedIn()) { cache.remove(authorizationToken); if(authorizationCookie != null) { authorizationCookie.setMaxAge(0); response.addCookie(authorizationCookie); } response.setStatus(401); if(log.isTraceEnabled()) log.trace(\"Aborting request with status [401], no (valid) credentials supplied\"); return; } if(authorizationCookie != null) { authorizationCookie.setMaxAge(authTTL); response.addCookie(authorizationCookie); } if(authorizationToken != null) { userPrincipal.updateExpiry(); userPrincipal.setToken(authorizationToken); cache.put(authorizationToken, userPrincipal, authTTL); messageContext.put(\"authorizationToken\", authorizationToken); } } messageContext.put(\"remoteAddr\", request.getRemoteAddr()); if(userPrincipal != null) messageContext.put(IPipeLineSession.API_PRINCIPAL_KEY, userPrincipal); messageContext.put(\"uri\", uri); String acceptHeader = request.getHeader(\"Accept\"); if(StringUtils.isNotEmpty(acceptHeader)) { if(!listener.accepts(acceptHeader)) { response.setStatus(406); response.getWriter().print(\"It appears you expected the MediaType [\"+acceptHeader+\"] but I only support the MediaType [\"+listener.getContentType()+\"] :)\"); if(log.isTraceEnabled()) log.trace(\"Aborting request with status [406], client expects [\"+acceptHeader+\"] got [\"+listener.getContentType()+\"] instead\"); return; } } if(request.getContentType() != null && !listener.isConsumable(request.getContentType())) { response.setStatus(415); if(log.isTraceEnabled()) log.trace(\"Aborting request with status [415], did not match consumes [\"+listener.getConsumes()+\"] got [\"+request.getContentType()+\"] instead\"); return; } String etagCacheKey = ApiCacheManager.buildCacheKey(uri); log.debug(\"Evaluating preconditions for listener[\"+listener.getName()+\"] etagKey[\"+etagCacheKey+\"]\"); if(cache.containsKey(etagCacheKey)) { String cachedEtag = (String) cache.get(etagCacheKey); log.debug(\"found etag value[\"+cachedEtag+\"] for key[\"+etagCacheKey+\"]\"); if(method.equals(\"GET\")) { String ifNoneMatch = request.getHeader(\"If-None-Match\"); if(ifNoneMatch != null && ifNoneMatch.equals(cachedEtag)) { response.setStatus(304); if(log.isTraceEnabled()) log.trace(\"Aborting request with status [304], matched if-none-match [\"+ifNoneMatch+\"]\"); return; } } else { String ifMatch = request.getHeader(\"If-Match\"); if(ifMatch != null && !ifMatch.equals(cachedEtag)) { response.setStatus(412); if(log.isTraceEnabled()) log.trace(\"Aborting request with status [412], matched if-match [\"+ifMatch+\"] method [\"+method+\"]\"); return; } } } messageContext.put(\"updateEtag\", listener.getUpdateEtag()); String patternSegments[] = listener.getUriPattern().split(\"/\"); String uriSegments[] = uri.split(\"/\"); int uriIdentifier = 0; for (int i = 0; i < patternSegments.length; i++) { String segment = patternSegments[i]; String name = null; if(\"*\".equals(segment)) { name = \"uriIdentifier_\"+uriIdentifier; } else if(segment.startsWith(\"{\") && segment.endsWith(\"}\")) { name = segment.substring(1, segment.length()-1); } if(name != null) { uriIdentifier++; if(log.isTraceEnabled()) log.trace(\"setting uriSegment [\"+name+\"] to [\"+uriSegments[i]+\"]\"); messageContext.put(name, uriSegments[i]); } } Enumeration<String> paramnames = request.getParameterNames(); while (paramnames.hasMoreElements()) { String paramname = paramnames.nextElement(); String paramvalue = request.getParameter(paramname); if(log.isTraceEnabled()) log.trace(\"setting queryParameter [\"+paramname+\"] to [\"+paramvalue+\"]\"); messageContext.put(paramname, paramvalue); } Enumeration<String> headers = request.getHeaderNames(); XmlBuilder headersXml = new XmlBuilder(\"headers\"); while (headers.hasMoreElements()) { String headerName = headers.nextElement().toLowerCase(); if(IGNORE_HEADERS.contains(headerName)) continue; String headerValue = request.getHeader(headerName); try { XmlBuilder headerXml = new XmlBuilder(\"header\"); headerXml.addAttribute(\"name\", headerName); headerXml.setValue(headerValue); headersXml.addSubElement(headerXml); } catch (Throwable t) { log.info(\"unable to convert header to xml name[\"+headerName+\"] value[\"+headerValue+\"]\"); } } messageContext.put(\"headers\", headersXml.toXML()); String body = \"\"; if (ServletFileUpload.isMultipartContent(request)) { DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory(); ServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory); List<FileItem> items = servletFileUpload.parseRequest(request); XmlBuilder attachments = new XmlBuilder(\"parts\"); int i = 0; String multipartBodyName = listener.getMultipartBodyName(); for (FileItem item : items) { String fieldName = item.getFieldName(); if((i == 0 && multipartBodyName == null) || fieldName.equalsIgnoreCase(multipartBodyName)) { body = Misc.streamToString(item.getInputStream(),\"\\n\",false); } XmlBuilder attachment = new XmlBuilder(\"part\"); attachment.addAttribute(\"name\", fieldName); if (item.isFormField()) { String fieldValue = item.getString(); if(log.isTraceEnabled()) log.trace(\"setting multipart formField [\"+fieldName+\"] to [\"+fieldValue+\"]\"); messageContext.put(fieldName, fieldValue); attachment.addAttribute(\"type\", \"text\"); attachment.addAttribute(\"value\", fieldValue); } else { String fieldNameName = fieldName + \"Name\"; String fileName = FilenameUtils.getName(item.getName()); if(log.isTraceEnabled()) log.trace(\"setting multipart formFile [\"+fieldNameName+\"] to [\"+fileName+\"]\"); messageContext.put(fieldNameName, fileName); if(log.isTraceEnabled()) log.trace(\"setting parameter [\"+fieldName+\"] to input stream of file [\"+fileName+\"]\"); messageContext.put(fieldName, item.getInputStream()); attachment.addAttribute(\"type\", \"file\"); attachment.addAttribute(\"filename\", fileName); attachment.addAttribute(\"size\", item.getSize()); attachment.addAttribute(\"sessionKey\", fieldName); String contentType = item.getContentType(); if(contentType != null) { String mimeType = contentType; int semicolon = contentType.indexOf(\";\"); if(semicolon >= 0) { mimeType = contentType.substring(0, semicolon); String mightContainCharSet = contentType.substring(semicolon+1).trim(); if(mightContainCharSet.contains(\"charset=\")) { String charSet = mightContainCharSet.substring(mightContainCharSet.indexOf(\"charset=\")+8); attachment.addAttribute(\"charSet\", charSet); } } else { mimeType = contentType; } attachment.addAttribute(\"mimeType\", mimeType); } } attachments.addSubElement(attachment); i++; } messageContext.put(\"multipartAttachments\", attachments.toXML()); } StringBuilder methods = new StringBuilder(); methods.append(\"OPTIONS, \"); for (String mtd : config.getMethods()) { methods.append(mtd + \", \"); } messageContext.put(\"allowedMethods\", methods.substring(0, methods.length()-2)); if (!ServletFileUpload.isMultipartContent(request)) { body = Misc.streamToString(request.getInputStream(),\"\\n\",false); } String messageId = null; if(StringUtils.isNotEmpty(listener.getMessageIdHeader())) { String messageIdHeader = request.getHeader(listener.getMessageIdHeader()); if(StringUtils.isNotEmpty(messageIdHeader)) { messageId = messageIdHeader; } } PipeLineSessionBase.setListenerParameters(messageContext, messageId, null, null, null); String result = listener.processRequest(null, body, messageContext); if(messageContext.get(\"updateEtag\", true)) { log.debug(\"calculating etags over processed result\"); String cleanPattern = listener.getCleanPattern(); if(result != null && method.equals(\"GET\") && cleanPattern != null) { String eTag = ApiCacheManager.buildEtag(cleanPattern, result.hashCode()); log.debug(\"adding/overwriting etag with key[\"+etagCacheKey+\"] value[\"+eTag+\"]\"); cache.put(etagCacheKey, eTag); response.addHeader(\"etag\", eTag); } else { log.debug(\"removing etag with key[\"+etagCacheKey+\"]\"); cache.remove(etagCacheKey); String key = ApiCacheManager.getParentCacheKey(listener, uri); if(key != null) { log.debug(\"removing parent etag with key[\"+key+\"]\"); cache.remove(key); } } } response.addHeader(\"Allow\", (String) messageContext.get(\"allowedMethods\")); String contentType = listener.getContentType(); if(listener.getProduces().equals(\"ANY\")) { contentType = messageContext.get(\"contentType\", contentType); } response.setHeader(\"Content-Type\", contentType); int statusCode = messageContext.get(\"exitcode\", 0); if(statusCode > 0) response.setStatus(statusCode); if(result != null) response.getWriter().print(result); if(log.isTraceEnabled()) log.trace(\"ApiListenerServlet finished with statusCode [\"+statusCode+\"] result [\"+result+\"]\"); } catch (Exception e) { log.warn(\"ApiListenerServlet caught exception, will rethrow as ServletException\", e); try { response.reset(); response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage()); } catch (IllegalStateException ex) { response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); } } }### Assistant: @Test public void getRequestWithQueryParameters() throws ServletException, IOException, ListenerException, ConfigurationException { addListener(\"queryParamTest\", Methods.GET); Map<String, String> headers = new HashMap<String, String>(); headers.put(\"Accept\", \"application/json\"); headers.put(\"content-type\", \"application/json\"); Response result = service(createRequest(\"queryParamTest?name=JOHN-DOE&GENDER=MALE\", Methods.GET, null, headers)); assertEquals(200, result.getStatus()); assertEquals(\"JOHN-DOE\", session.get(\"name\")); assertEquals(\"MALE\", session.get(\"GENDER\")); assertEquals(\"OPTIONS, GET\", result.getHeader(\"Allow\")); assertNull(result.getErrorMessage()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String campaign(long customerId, long campaignId) { return CampaignName.format(String.valueOf(customerId), String.valueOf(campaignId)); }### Assistant: @Test public void testCampaign() { String expected = \"customers/1234/campaigns/5678\"; assertEquals(expected, ResourceNames.campaign(1234L, 5678L)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(@Nullable final Object obj) { boolean eq; if (this == obj) { eq = true; } else if ((obj != null) && (obj instanceof GpsTracePoint)) { final GpsTracePoint that = (GpsTracePoint) obj; eq = that.canEqual(this); eq = eq && time.equals(that.time); eq = eq && position.equals(that.position); } else { eq = false; } return eq; }### Assistant: @Test public void testEquals() { LOG.info(\"testEquals\"); final GpsTracePoint s = y.withTime(x1).withPosition(x2); final GpsTracePoint t = x.withTime(y1).withPosition(y2); Assert.assertTrue(x.equals(s)); Assert.assertTrue(y.equals(t)); Assert.assertFalse(x.equals(t)); Assert.assertFalse(y.equals(s)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FEELFnResult<Boolean> invoke(@ParameterName( \"range\" ) Range range, @ParameterName( \"value\" ) Comparable value) { if ( value == null ) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"value\", \"cannot be null\")); } if ( range == null ) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"range\", \"cannot be null\")); } try { boolean result = ( range.getLowBoundary() == Range.RangeBoundary.CLOSED && value.compareTo( range.getLowEndPoint() ) == 0 ); return FEELFnResult.ofResult( result ); } catch( Exception e ) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"value\", \"cannot be compared to range\")); } }### Assistant: @Test public void invokeParamsCantBeCompared() { FunctionTestUtil.assertResultError( startedByFunction.invoke( new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.CLOSED ), new RangeImpl( Range.RangeBoundary.CLOSED, 1, 2, Range.RangeBoundary.CLOSED ) ), InvalidParametersEvent.class ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> List<ArrayList<T>> cartesianProduct(List<List<T>> sets) throws Exception { final BigInteger MAX_LIST_SIZE = BigInteger.valueOf(100000); BigInteger productSize = BigInteger.ONE; for (List<T> set : sets) { productSize = productSize.multiply(BigInteger.valueOf(set.size())); } if (productSize.compareTo(MAX_LIST_SIZE) == 1) { throw new Exception(\"Will not generate carthesian product for more than \" + MAX_LIST_SIZE + \" elements \" + \"(size would be \" + productSize + \"). Not proceeding.\"); } List<ArrayList<T>> cartesianProduct = new ArrayList<ArrayList<T>>(productSize.intValue()); for (int i = 0; i < productSize.intValue(); i++) { cartesianProduct.add(new ArrayList<T>(sets.size())); } if(productSize.equals(BigInteger.ZERO)) { return cartesianProduct; } int loopSize = productSize.intValue(); for (int i = 0; i < sets.size(); i++) { List<T> set = sets.get(i); loopSize /= set.size(); Iterator<T> it = set.iterator(); T e = null; for (int j = 0; j < productSize.intValue(); j++) { if ((j % loopSize) == 0) { if (it.hasNext()) { e = it.next(); } else { it = set.iterator(); e = it.next(); } } cartesianProduct.get(j).add(e); } } return cartesianProduct; }### Assistant: @Test public void testTooLarge() throws Exception { final int PRODUCT_ELEMENTS = 100; List<List<String>> l = new ArrayList<List<String>>(); for (int i=0;i<PRODUCT_ELEMENTS;++i) { List<String> s1 = new ArrayList<String>(); s1.add(\"a\"); s1.add(\"b\"); l.add(s1); } try { CartesianProduct.cartesianProduct(l); fail(\"Expected exception\"); } catch(Exception ex) { assertTrue(ex.getMessage().contains(BigInteger.valueOf(2).pow(PRODUCT_ELEMENTS).toString())); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public <T> Codec<T> codecFor(RawType cqlType) { if (cqlTypeCache.containsKey(cqlType)) { return (Codec<T>) cqlTypeCache.get(cqlType); } Codec<T> codec = (Codec<T>) createCodec(cqlType); if (codec == null) { return null; } Codec<T> previous = (Codec<T>) cqlTypeCache.putIfAbsent(cqlType, codec); return previous == null ? codec : previous; }### Assistant: @Test public void shouldHandleBigint() { Codec<Long> bigintCodec = mapper.codecFor(primitive(BIGINT)); assertThat(bigintCodec).isSameAs(mapper.bigint); encodeAndDecode(bigintCodec, 0L, \"0x0000000000000000\"); encodeAndDecode(bigintCodec, 1L, \"0x0000000000000001\"); encodeAndDecode(bigintCodec, Long.MIN_VALUE, \"0x8000000000000000\"); encodeAndDecode(bigintCodec, Long.MAX_VALUE, \"0x7fffffffffffffff\"); encodeAndDecode(bigintCodec, null, null, 0L); encodeObjectAndDecode(bigintCodec, null, null, 0L); encodeObjectAndDecode(bigintCodec, 7L, \"0x0000000000000007\", 7L); encodeObjectAndDecode(bigintCodec, 7, \"0x0000000000000007\", 7L); encodeObjectAndDecode(bigintCodec, \"7\", \"0x0000000000000007\", 7L); encodeObjectAndDecode(bigintCodec, Optional.of(12), null, 0L); try { bigintCodec.decode(Bytes.fromHexString(\"0x00ff\")); } catch (InvalidTypeException e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"/domain\") @Produces({ MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8 }) public TimelineDomains getDomains( @Context HttpServletRequest req, @Context HttpServletResponse res, @QueryParam(\"owner\") String owner) { init(res); owner = parseStr(owner); UserGroupInformation callerUGI = getUser(req); if (owner == null || owner.length() == 0) { if (callerUGI == null) { throw new BadRequestException(\"Domain owner is not specified.\"); } else { owner = callerUGI.getShortUserName(); } } try { return timelineDataManager.getDomains(owner, callerUGI); } catch (Exception e) { LOG.error(\"Error getting domains\", e); throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR); } }### Assistant: @Test public void testGetDomains() throws Exception { WebResource r = resource(); ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"timeline\") .path(\"domain\") .queryParam(\"owner\", \"owner_1\") .accept(MediaType.APPLICATION_JSON) .get(ClientResponse.class); assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString()); TimelineDomains domains = response.getEntity(TimelineDomains.class); Assert.assertEquals(2, domains.getDomains().size()); for (int i = 0; i < domains.getDomains().size(); ++i) { verifyDomain(domains.getDomains().get(i), i == 0 ? \"domain_id_4\" : \"domain_id_1\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: LinkedHashMap<String, String> loadPropertiesMap(final String propertiesFilePath) throws CluecumberPluginException { LinkedHashMap<String, String> propertiesMap; String content = fileIO.readContentFromFile(propertiesFilePath); LinkedProperties properties = new LinkedProperties(); try { properties.load(new StringReader(content)); } catch (IOException e) { throw new CluecumberPluginException(\"Could not parse properties file '\" + \"': \" + e.getMessage()); } propertiesMap = properties.entrySet().stream().collect(Collectors.toMap(propertyEntry -> (String) propertyEntry.getKey(), propertyEntry -> (String) propertyEntry.getValue(), (a, b) -> b, LinkedHashMap::new)); return propertiesMap; }### Assistant: @Test(expected = CluecumberPluginException.class) public void loadInvalidPropertiesMapTest() throws CluecumberPluginException { propertiesFileLoader.loadPropertiesMap(\"nonexistent\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable static String service(Invoker<?> invoker) { URL url = invoker.getUrl(); if (url == null) return null; String service = url.getServiceInterface(); return service != null && !service.isEmpty() ? service : null; }### Assistant: @Test public void service_malformed() { when(invoker.getUrl()).thenReturn(url); when(url.getServiceInterface()).thenReturn(\"\"); assertThat(DubboParser.service(invoker)).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Pure public Point1d getNearestPosition(Point2D<?, ?> pos) { final RoadSegment segment = this.roadSegments.getNearest(pos); if (segment == null) { return null; } return segment.getNearestPosition(pos); }### Assistant: @Test public void testGetNearestPosition() { Point1d p; p = this.network.getNearestPosition(new Point2d(-5.,0.)); assertNotNull(p); assertSame(this.segment4, p.getSegment()); assertEpsilonEquals(314.6466271867538, p.getCurvilineCoordinate()); assertEpsilonEquals(0., p.getLateralDistance()); p = this.network.getNearestPosition(new Point2d(1000.,1000.)); assertNotNull(p); assertSame(this.segment6, p.getSegment()); assertEpsilonEquals(304.5784, p.getCurvilineCoordinate()); assertEpsilonEquals(0., p.getLateralDistance()); p = this.network.getNearestPosition(new Point2d(1000.,0.)); assertNotNull(p); assertSame(this.segment6, p.getSegment()); assertEpsilonEquals(304.57839869, p.getCurvilineCoordinate()); assertEpsilonEquals(0., p.getLateralDistance()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Set<String> doUpdateForClusterCreate() throws ConfigurationTopologyException { Set<String> configTypesUpdated = new HashSet<String>(); Configuration clusterConfig = clusterTopology.getConfiguration(); Map<String, HostGroupInfo> groupInfoMap = clusterTopology.getHostGroupInfo(); doRecommendConfigurations(clusterConfig, configTypesUpdated); doFilterPriorToClusterUpdate(clusterConfig, configTypesUpdated); Map<String, Map<String, String>> clusterProps = clusterConfig.getFullProperties(); for (Map<String, Map<String, PropertyUpdater>> updaterMap : createCollectionOfUpdaters()) { for (Map.Entry<String, Map<String, PropertyUpdater>> entry : updaterMap.entrySet()) { String type = entry.getKey(); for (Map.Entry<String, PropertyUpdater> updaterEntry : entry.getValue().entrySet()) { String propertyName = updaterEntry.getKey(); PropertyUpdater updater = updaterEntry.getValue(); Map<String, String> typeMap = clusterProps.get(type); if (typeMap != null && typeMap.containsKey(propertyName) && typeMap.get(propertyName) != null) { final String originalValue = typeMap.get(propertyName); final String updatedValue = updater.updateForClusterCreate(propertyName, originalValue, clusterProps, clusterTopology); if(updatedValue == null ) { continue; } if (!updatedValue.equals(originalValue)) { configTypesUpdated.add(type); } clusterConfig.setProperty(type, propertyName, updatedValue); } for (HostGroupInfo groupInfo : groupInfoMap.values()) { Configuration hgConfig = groupInfo.getConfiguration(); Map<String, Map<String, String>> hgConfigProps = hgConfig.getFullProperties(1); Map<String, String> hgTypeMap = hgConfigProps.get(type); if (hgTypeMap != null && hgTypeMap.containsKey(propertyName)) { final String originalValue = hgTypeMap.get(propertyName); final String updatedValue = updater.updateForClusterCreate(propertyName, originalValue, hgConfigProps, clusterTopology); if (!updatedValue.equals(originalValue)) { configTypesUpdated.add(type); } hgConfig.setProperty(type, propertyName, updatedValue); } } } } } if (clusterTopology.isNameNodeHAEnabled()) { Map<String, String> hdfsSiteConfig = clusterConfig.getFullProperties().get(\"hdfs-site\"); String nameservices = hdfsSiteConfig.get(\"dfs.nameservices\"); String int_nameservices = hdfsSiteConfig.get(\"dfs.internal.nameservices\"); if(int_nameservices == null && nameservices != null) { clusterConfig.setProperty(\"hdfs-site\", \"dfs.internal.nameservices\", nameservices); } if (! isNameNodeHAInitialActiveNodeSet(clusterProps) && ! isNameNodeHAInitialStandbyNodeSet(clusterProps)) { Collection<String> nnHosts = clusterTopology.getHostAssignmentsForComponent(\"NAMENODE\"); if (nnHosts.size() != 2) { throw new ConfigurationTopologyException(\"NAMENODE HA requires exactly 2 hosts running NAMENODE but there are: \" + nnHosts.size() + \" Hosts: \" + nnHosts); } Iterator<String> nnHostIterator = nnHosts.iterator(); clusterConfig.setProperty(\"hadoop-env\", \"dfs_ha_initial_namenode_active\", nnHostIterator.next()); clusterConfig.setProperty(\"hadoop-env\", \"dfs_ha_initial_namenode_standby\", nnHostIterator.next()); configTypesUpdated.add(\"hadoop-env\"); } } setMissingConfigurations(clusterConfig, configTypesUpdated); trimProperties(clusterConfig, clusterTopology); return configTypesUpdated; }### Assistant: @Test public void testHiveWithoutAtlas() throws Exception { Map<String, Map<String, String>> properties = new HashMap<String, Map<String, String>>(); Map<String, String> hiveProperties = new HashMap<String, String>(); hiveProperties.put(\"hive.exec.post.hooks\", \"\"); properties.put(\"hive-site\", hiveProperties); Map<String, String> hiveEnv = new HashMap<String, String>(); hiveEnv.put(\"hive.atlas.hook\", \"false\"); properties.put(\"hive-env\", hiveEnv); Map<String, Map<String, String>> parentProperties = new HashMap<String, Map<String, String>>(); Configuration parentClusterConfig = new Configuration(parentProperties, Collections.<String, Map<String, Map<String, String>>>emptyMap()); Configuration clusterConfig = new Configuration(properties, Collections.<String, Map<String, Map<String, String>>>emptyMap(), parentClusterConfig); Collection<String> hgComponents1 = new HashSet<String>(); hgComponents1.add(\"HIVE_SERVER\"); TestHostGroup group1 = new TestHostGroup(\"group1\", hgComponents1, Collections.singleton(\"host1\")); Collection<TestHostGroup> hostGroups = Collections.singletonList(group1); ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups); BlueprintConfigurationProcessor configProcessor = new BlueprintConfigurationProcessor(topology); configProcessor.doUpdateForClusterCreate(); assertEquals(null, clusterConfig.getPropertyValue(\"hive-site\", \"atlas.cluster.name\")); assertEquals(null, clusterConfig.getPropertyValue(\"hive-site\", \"atlas.rest.address\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public DeactivatedDrips deactivateDrips(String customerEmailAddress) throws SendWithUsException { Map<String, Object> sendParams = new HashMap<String, Object>(); sendParams.put(\"email_address\", customerEmailAddress); String url = getURLEndpoint(\"drip_campaigns/deactivate\"); String response = makeURLRequest(url, \"POST\", sendParams); Gson gson = new Gson(); return gson.fromJson(response, DeactivatedDrips.class); }### Assistant: @Test public void testDeactivateAllDrips() throws Exception { DeactivatedDrips receipt = sendwithusAPI.deactivateDrips(TEST_RECIPIENT_ADDRESS); assertSuccessfulAPIResponse(receipt); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Future<Boolean> authorize(final HttpServerRequest request) { Future<Boolean> future = Future.future(); handleUserUriRequest(request, future); if (!future.isComplete()) { roleAuthorizer.handleIsAuthorized(request, future); } if (!future.isComplete()) { handleConfigurationUriRequest(request, future, aclUriPattern, roleAuthorizer); } if (!future.isComplete()) { handleConfigurationUriRequest(request, future, roleMapperUriPattern, roleMapper); } if (!future.isComplete()) { future.complete(Boolean.TRUE); } return future; }### Assistant: @Test public void testAuthorizeUserUriGETRequest(TestContext context) { String requestUri = \"/gateleen/server/security/v1/user\"; CaseInsensitiveHeaders headers = new CaseInsensitiveHeaders(); headers.add(\"x-rp-usr\", \"user_1234\"); headers.add(\"x-rp-grp\", \"z-gateleen-admin,z-gateleen-authenticated,z-gateleen-developer\"); DummyHttpServerResponse response = Mockito.spy(new DummyHttpServerResponse()); AuthorizerRequest req = new AuthorizerRequest(HttpMethod.GET, requestUri, headers, response); authorizer.authorize(req).setHandler(event -> { context.assertTrue(event.succeeded()); context.assertFalse(event.result()); }); Mockito.verify(response, timeout(1000).times(1)) .end(eq(\"{\\\"userId\\\":\\\"user_1234\\\",\\\"roles\\\":[\\\"authenticated\\\",\\\"everyone\\\",\\\"admin\\\",\\\"developer\\\"]}\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected boolean isTemplateRegistered(String templateName) { return autonomiccsSystemVmTemplateJdbcDao.isTemplateRegistered(templateName); }### Assistant: @Test public void isTemplateRegisteredTest() { boolean result = executeIsTemplateRegisteredTest(true); Assert.assertEquals(true, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static URI resolve(final URI baseURI, final String reference) { return URIUtils.resolve(baseURI, URI.create(reference)); }### Assistant: @Test public void testResolve34() { Assert.assertEquals(\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void handleInterfaceAnnotation(HeaderParams annotation, InterfaceConfigBuilder builder) { for(HeaderParam paramAnnotation : annotation.value()){ handler.handleInterfaceAnnotation(paramAnnotation, builder); } }### Assistant: @Test public void handleInterfaceAnnotationShouldDelegateToInnerHandlerForEachAnnotations() throws Exception { when(mockAnnotation.value()).thenReturn(mockAnnotations); toTest.handleInterfaceAnnotation(mockAnnotation, mockInterfaceConfigBuilder); verify(mockHeaderParamAnnotationHandler).handleInterfaceAnnotation(mockAnnotations[0], mockInterfaceConfigBuilder); verify(mockHeaderParamAnnotationHandler).handleInterfaceAnnotation(mockAnnotations[1], mockInterfaceConfigBuilder); verify(mockAnnotation).value(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void writeStartDocument() throws XMLStreamException { writer.writeStartDocument(); }### Assistant: @Test void testWriteStartDocumentString() throws XMLStreamException { writer.writeStartDocument(DOC_VERSION); verify(delegateMock).writeStartDocument(DOC_VERSION); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Optional<QName> getRpcQName(final XmlElement xmlElement) { Optional<String> optionalNamespace = xmlElement.getNamespaceOptionally().toJavaUtil(); String name = xmlElement.getName(); if (Strings.isNullOrEmpty(name)) { return Optional.empty(); } String revision = null; String namespace; if (optionalNamespace.isPresent() && !Strings.isNullOrEmpty(optionalNamespace.get())) { String[] split = optionalNamespace.get().split(\"\\\\?\"); if (split.length > 1 && split[1].contains(\"revision=\")) { revision = split[1].replace(\"revision=\", \"\"); } namespace = split[0]; } else { return Optional.of(QName.create(name)); } if (Strings.isNullOrEmpty(revision)) { return Optional.of(QName.create(namespace, name)); } else { return Optional.of(QName.create(namespace, revision, name)); } }### Assistant: @Test public void testGetRpcQNameFromXML_norevision() { Optional<QName> rpcQName = ConverterUtils.getRpcQName(loadResourceAsString(\"make-toast-input_norev.xml\")); Assert.assertTrue(rpcQName.isPresent()); Assert.assertTrue(MAKE_TOAST_RPC_QNAME.getLocalName().equals(rpcQName.get().getLocalName())); Assert.assertTrue(MAKE_TOAST_RPC_QNAME.getNamespace().equals(rpcQName.get().getNamespace())); Assert.assertFalse(MAKE_TOAST_RPC_QNAME.getRevision().equals(rpcQName.get().getRevision())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void dropKey(Connection conn, String tableName, String key, boolean isForeignKey) { String alter_sql_str; if (isForeignKey) { alter_sql_str = \"ALTER TABLE \" + tableName + \" DROP FOREIGN KEY \" + key; } else { alter_sql_str = \"ALTER TABLE \" + tableName + \" DROP KEY \" + key; } try(PreparedStatement pstmt = conn.prepareStatement(alter_sql_str);) { pstmt.executeUpdate(); s_logger.debug(\"Key \" + key + \" is dropped successfully from the table \" + tableName); } catch (SQLException e) { s_logger.debug(\"Ignored SQL Exception when trying to drop \" + (isForeignKey ? \"foreign \" : \"\") + \"key \" + key + \" on table \" + tableName + \" exception: \" + e.getMessage()); } }### Assistant: @Test public void testDropKeyWhenExecuteUpdateResultsInException() throws Exception { SQLException sqlException = new SQLException(); when(connectionMock.prepareStatement(contains(\"DROP KEY\"))).thenReturn(preparedStatementMock); when(preparedStatementMock.executeUpdate()).thenThrow(sqlException); Connection conn = connectionMock; String tableName = \"tableName\"; String key = \"key\"; boolean isForeignKey = false; dao.dropKey(conn, tableName, key, isForeignKey); verify(connectionMock, times(1)).prepareStatement(anyString()); verify(preparedStatementMock, times(1)).executeUpdate(); verify(preparedStatementMock, times(1)).close(); verify(loggerMock, times(1)).debug(contains(\"Exception\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static MpcScore of(float score) { return new MpcScore(score, score * 0.2f); }### Assistant: @Test void testScalingHalfWay() { MpcScore instance = MpcScore.of(2.5f); assertThat(instance.getScore(), equalTo(0.5f)); assertThat(instance.getRawScore(), equalTo(2.5f)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Long getStartHostServiceVmIdFromPod(Long podId, SystemVmType systemVmType) { try { return getJdbcTemplate().queryForObject(sqlGetStartHostServiceVmIdFromPod, Long.class, podId, systemVmType.getNamePrefix() + \"%\"); } catch (EmptyResultDataAccessException e) { logger.debug(e); return null; } }### Assistant: @Test public void getStartHostServiceVmIdFromPodTest() { Mockito.doReturn(0l).when(jdbcTemplate).queryForObject(Mockito.anyString(), Mockito.eq(Long.class), Mockito.anyLong(), Mockito.anyString()); long result = spy.getStartHostServiceVmIdFromPod(0l, SystemVmType.ClusterManagerAgent); Mockito.verify(jdbcTemplate).queryForObject(Mockito.eq(sqlGetStartHostServiceVmIdFromPod), Mockito.eq(Long.class), Mockito.anyLong(), Mockito.anyString()); Assert.assertEquals(0l, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Async(\"asyncCustomTaskExecutor\") public CompletableFuture<String> createObject(QueryContext qc) throws ValveException { ArrayList<String> uids = new ArrayList<>(); LOG.fine(ValveLogging.getLogMsg(qc.EXCHANGE_ID,\"Async create object\")); try { for (AbstractWitsmlObject witsmlObject : qc.WITSML_OBJECTS) { uids.add(this.DELEGATOR.createObject(witsmlObject, qc.USERNAME, qc.PASSWORD, qc.EXCHANGE_ID, this.CLIENT)); } } catch (ValveException e) { LOG.warning(ValveLogging.getLogMsg(qc.EXCHANGE_ID,\"Exception in DotValve createObject: \" + e.getMessage())); throw new ValveException(e.getMessage(), e.getErrorCode()); } catch (Exception e){ LOG.warning(ValveLogging.getLogMsg(qc.EXCHANGE_ID,\"Exception in DotValve createObject: \" + e.getMessage())); throw new ValveException(e.getMessage()); } return CompletableFuture.completedFuture(StringUtils.join(uids, ',')); }### Assistant: @Test public void shouldCreateTrajectory() throws Exception { ArrayList<AbstractWitsmlObject> witsmlObjects; witsmlObjects = new ArrayList<>(); ObjTrajectory traj = new ObjTrajectory(); traj.setUid(\"traj-A\"); traj.setName(\"traj-A\"); witsmlObjects.add(traj); QueryContext qc = new QueryContext( \"1.3.1.1\", \"trajectory\", null, \"\", witsmlObjects, \"goodUsername\", \"goodPassword\", \"shouldCreateTrajectory\" ); when( this.mockDelegator.createObject(traj, qc.USERNAME, qc.PASSWORD, qc.EXCHANGE_ID, this.mockClient) ).thenReturn(traj.getUid()); String expected = traj.getUid(); String actual = this.valve.createObject(qc).get(); assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean matches(IAtom atom) { if (ringNumber < 0) return invariants(atom).ringConnectivity() > 0; else if (ringNumber == 0) return invariants(atom).ringConnectivity() == 0; else return ringNumber == invariants(atom).ringNumber(); }### Assistant: @Test public void any() throws Exception { RingMembershipAtom matcher = new RingMembershipAtom(-1, mock(IChemObjectBuilder.class)); IAtom atom = mock(IAtom.class); when(atom.getProperty(SMARTSAtomInvariants.KEY)) .thenReturn( new SMARTSAtomInvariants(mock(IAtomContainer.class), 0, 5, Collections.<Integer> emptySet(), 2, 0, 0, 0)); assertTrue(matcher.matches(atom)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TimelineWriteResponse putDomain(TimelineDomain domain, UserGroupInformation callerUgi) throws IOException { LOG.debug(\"putDomain(domain={}, callerUgi={})\", domain, callerUgi); TimelineWriteResponse response; synchronized (writer) { final TimelineCollectorContext context = getTimelineEntityContext(); response = writer.write(context, domain); flushBufferedTimelineEntities(); } return response; }### Assistant: @Test public void testPutDomain() throws IOException { TimelineWriter writer = mock(TimelineWriter.class); TimelineCollector collector = new TimelineCollectorForTest(writer); TimelineDomain domain = generateDomain(\"id\", \"desc\", \"owner\", \"reader1,reader2\", \"writer\", 0L, 1L); collector.putDomain(domain, UserGroupInformation.createRemoteUser(\"owner\")); verify(writer, times(1)) .write(any(TimelineCollectorContext.class), any(TimelineDomain.class)); verify(writer, times(1)).flush(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static IntStream pseudoRandomStream(int seed) { return null; }### Assistant: @Test(timeout = 8000) public void pseudoRandomStream() throws Throwable { IntStream stream = (IntStream) TestUtils.invokeMethod(mainClass, pseudoRandomStream, 13); assertNotNull(\"Main.pseudoRandomStream(13) return null\", stream); List<Integer> actual = new ArrayList<>(); stream.limit(10).forEach(actual::add); Integer[] expected = new Integer[]{13, 16, 25, 62, 384, 745, 502, 200, 0, 0}; assertArrayEquals(\"Main.pseudoRandomStream(13).limit(10).toArray()\", expected, actual.toArray(new Integer[10])); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static List<LiteralToUniformReductionOpportunity> findOpportunities( ShaderJob shaderJob, ReducerContext context) { final List<LiteralToUniformReductionOpportunity> opportunities = new ArrayList<>(); for (TranslationUnit tu : shaderJob.getShaders()) { new StandardVisitor() { @Override public void visitArrayIndexExpr(ArrayIndexExpr arrayIndexExpr) { if (arrayIndexExpr.getArray() instanceof VariableIdentifierExpr) { String name = ((VariableIdentifierExpr) arrayIndexExpr.getArray()).getName(); if (name.equals(Constants.FLOAT_LITERAL_UNIFORM_VALUES) || name.equals(Constants.INT_LITERAL_UNIFORM_VALUES) || name.equals(Constants.UINT_LITERAL_UNIFORM_VALUES)) { return; } } super.visitArrayIndexExpr(arrayIndexExpr); } @Override public void visitArrayInfo(ArrayInfo arrayInfo) { } @Override public void visitIntConstantExpr(IntConstantExpr intConstantExpr) { super.visitIntConstantExpr(intConstantExpr); opportunities.add(new LiteralToUniformReductionOpportunity(intConstantExpr, tu, shaderJob, getVistitationDepth())); } @Override public void visitFloatConstantExpr(FloatConstantExpr floatConstantExpr) { super.visitFloatConstantExpr(floatConstantExpr); opportunities.add(new LiteralToUniformReductionOpportunity(floatConstantExpr, tu, shaderJob, getVistitationDepth())); } @Override public void visitUIntConstantExpr(UIntConstantExpr uintConstantExpr) { super.visitUIntConstantExpr(uintConstantExpr); opportunities.add(new LiteralToUniformReductionOpportunity(uintConstantExpr, tu, shaderJob, getVistitationDepth())); } }.visit(tu); } return opportunities; }### Assistant: @Test public void testReplaceSameFloat() throws Exception { final String vertexShader = \"void main() { \" + \"float a = 1.0;}\"; final String vertexShaderReplaced = \"uniform float _GLF_uniform_float_values[1];\" + \"void main()\" + \"{\" + \" float a = _GLF_uniform_float_values[0];\" + \"}\"; final String fragmentShader = \"void main() { \" + \"float a = 1.0;}\"; final String fragmentShaderReplaced = \"uniform float _GLF_uniform_float_values[1];\" + \"void main()\" + \"{\" + \" float a = _GLF_uniform_float_values[0];\" + \"}\"; final List<TranslationUnit> shaders = new ArrayList<>(); shaders.add(ParseHelper.parse(vertexShader, ShaderKind.VERTEX)); shaders.add(ParseHelper.parse(fragmentShader, ShaderKind.FRAGMENT)); final PipelineInfo pipelineInfo = new PipelineInfo(); final ShaderJob shaderJob = new GlslShaderJob(Optional.empty(), pipelineInfo, shaders); assertEquals(0, pipelineInfo.getNumUniforms()); final List<LiteralToUniformReductionOpportunity> ops = LiteralToUniformReductionOpportunities .findOpportunities(shaderJob, new ReducerContext(false, ShadingLanguageVersion.ESSL_100, new RandomWrapper(0), new IdGenerator())); assertEquals(\"There should be two opportunities\", 2, ops.size()); assertEquals(0, pipelineInfo.getNumUniforms()); ops.forEach(AbstractReductionOpportunity::applyReduction); CompareAsts.assertEqualAsts(fragmentShaderReplaced, shaderJob.getFragmentShader().get()); CompareAsts.assertEqualAsts(vertexShaderReplaced, shaderJob.getVertexShader().get()); assertTrue(shaderJob.getPipelineInfo().hasUniform(Constants.FLOAT_LITERAL_UNIFORM_VALUES)); final List<LiteralToUniformReductionOpportunity> ops2 = LiteralToUniformReductionOpportunities .findOpportunities(shaderJob, new ReducerContext(false, ShadingLanguageVersion.ESSL_100, new RandomWrapper(0), new IdGenerator())); assertEquals(\"There should be no opportunities\", 0, ops2.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting Completable doAgentScaling() { return Completable.defer(() -> { if (!configuration.isAutoScalingAgentsEnabled()) { logger.debug(\"Auto scaling agents is not enabled\"); return Completable.complete(); } List<Completable> actions = new ArrayList<>(); Map<String, Job> allJobs = getAllJobs(); Map<String, Task> allTasks = getAllTasks(); List<AgentInstanceGroup> activeInstanceGroups = getActiveInstanceGroups(); Map<AgentInstanceGroup, List<AgentInstance>> instancesForActiveInstanceGroups = getInstancesForInstanceGroups(activeInstanceGroups); Map<String, List<AgentInstance>> instancesForActiveInstanceGroupsById = instancesForActiveInstanceGroups.entrySet().stream() .collect(Collectors.toMap(e -> e.getKey().getId(), Map.Entry::getValue)); Map<String, Long> numberOfTasksOnAgents = getNumberOfTasksOnAgents(allTasks.values()); Map<Tier, Set<String>> failedTaskIdsByTier = getFailedTaskIdsByTier( schedulingService.getLastTaskPlacementFailures(), FailureKind.NEVER_TRIGGER_AUTOSCALING ); long now = clock.wallTime(); for (Tier tier : Tier.values()) { logger.info(\"Starting scaling actions for tier: {}\", tier); TierAutoScalingConfiguration tierConfiguration = ClusterOperationFunctions.getTierConfiguration(tier, configuration); TierAutoScalerExecution tierAutoScalerExecution = tierTierAutoScalerExecutions.computeIfAbsent( tier, k -> new TierAutoScalerExecution(tier, titusRuntime.getRegistry()) ); String primaryInstanceType = tierConfiguration.getPrimaryInstanceType(); ResourceDimension tierResourceDimension = agentManagementService.getResourceLimits(primaryInstanceType); List<AgentInstanceGroup> activeScalableInstanceGroupsForTier = activeInstanceGroups.stream() .filter(ig -> ig.getTier() == tier && ig.getInstanceType().equals(primaryInstanceType)) .collect(Collectors.toList()); logger.info(\"{} active instance groups({}): {}\", tier, activeScalableInstanceGroupsForTier.size(), activeScalableInstanceGroupsForTier); List<AgentInstance> idleInstancesForTier = getIdleInstancesForTier(tier, primaryInstanceType, instancesForActiveInstanceGroups, numberOfTasksOnAgents, now, tierConfiguration.getIdleInstanceGracePeriodMs()); tierAutoScalerExecution.getTotalIdleInstancesGauge().set(idleInstancesForTier.size()); logger.info(\"{} idle instances({}): {}\", tier, idleInstancesForTier.size(), idleInstancesForTier); Set<String> failedTaskIds = failedTaskIdsByTier.getOrDefault(tier, Collections.emptySet()); tierAutoScalerExecution.getTotalFailedTasksGauge().set(failedTaskIds.size()); logger.info(\"{} failed tasks({}): {}\", tier, failedTaskIds.size(), failedTaskIds); int agentCountToScaleUp = 0; Set<String> potentialTaskIdsForScaleUp = new HashSet<>(); boolean usedScaleUpCooldown = false; if (hasTimeElapsed(tierAutoScalerExecution.getLastScaleUp().get(), now, tierConfiguration.getScaleUpCoolDownMs())) { int minIdleForTier = tierConfiguration.getMinIdle(); if (idleInstancesForTier.size() < minIdleForTier) { int instancesNeededForMinIdle = minIdleForTier - idleInstancesForTier.size(); logger.info(\"{} needs {} instances to satisfy min idle {}\", tier, instancesNeededForMinIdle, minIdleForTier); agentCountToScaleUp += instancesNeededForMinIdle; } Set<String> placementFailureTaskIds = getFailedTaskIdsByTier( schedulingService.getLastTaskPlacementFailures(), IGNORED_FAILURE_KINDS_WITH_LAUNCHGUARD ).getOrDefault(tier, Collections.emptySet()); logger.info(\"{} had the placement excluding launch guard failures({}): {}\", tier, placementFailureTaskIds.size(), placementFailureTaskIds); Set<String> scalablePlacementFailureTaskIds = filterOutTaskIdsForScaling(placementFailureTaskIds, allJobs, allTasks, tierResourceDimension); logger.info(\"{} had the scalable placement failures({}): {}\", tier, scalablePlacementFailureTaskIds.size(), scalablePlacementFailureTaskIds); potentialTaskIdsForScaleUp.addAll(scalablePlacementFailureTaskIds); if (agentCountToScaleUp > 0 || !scalablePlacementFailureTaskIds.isEmpty()) { usedScaleUpCooldown = true; } } Set<String> tasksPastSlo = getTasksPastSlo(failedTaskIds, allTasks, now, tierConfiguration.getTaskSloMs()); Set<String> scalableTasksPastSlo = filterOutTaskIdsForScaling(tasksPastSlo, allJobs, allTasks, tierResourceDimension); tierAutoScalerExecution.getTotalTasksPastSloGauge().set(scalableTasksPastSlo.size()); logger.info(\"{} had tasks past slo({}): {}\", tier, scalableTasksPastSlo.size(), scalableTasksPastSlo); potentialTaskIdsForScaleUp.addAll(scalableTasksPastSlo); Set<String> taskIdsForScaleUp = new HashSet<>(); for (String taskId : potentialTaskIdsForScaleUp) { boolean previouslyScaledFor = taskIdsForPreviousScaleUps.getIfPresent(taskId) != null; if (!previouslyScaledFor) { taskIdsForScaleUp.add(taskId); taskIdsForPreviousScaleUps.put(taskId, taskId); } } tierAutoScalerExecution.getTotalTasksForScaleUpGauge().set(taskIdsForScaleUp.size()); logger.info(\"{} had tasks to scale up({}): {}\", tier, taskIdsForScaleUp.size(), taskIdsForScaleUp); int agentScaleUpCountByDominantResource = calculateAgentScaleUpCountByDominantResource(taskIdsForScaleUp, allJobs, allTasks, tierResourceDimension); logger.info(\"{} needs {} instances based on dominant resource\", tier, agentScaleUpCountByDominantResource); agentCountToScaleUp += agentScaleUpCountByDominantResource; logger.info(\"{} needs {} instances\", tier, agentCountToScaleUp); tierAutoScalerExecution.getTotalAgentsToScaleUpGauge().set(agentCountToScaleUp); boolean scalingUp = false; if (agentCountToScaleUp > 0) { long maxTokensToTake = Math.min(SCALE_UP_TOKEN_BUCKET_CAPACITY, agentCountToScaleUp); Optional<Pair<Long, ImmutableTokenBucket>> takeOpt = tierAutoScalerExecution.getLastScaleUpTokenBucket().tryTake(1, maxTokensToTake); if (takeOpt.isPresent()) { Pair<Long, ImmutableTokenBucket> takePair = takeOpt.get(); tierAutoScalerExecution.setLastScaleUpTokenBucket(takePair.getRight()); long tokensAvailable = takePair.getLeft(); Pair<Integer, Completable> scaleUpPair = createScaleUpCompletable(activeScalableInstanceGroupsForTier, (int) tokensAvailable); Integer agentCountBeingScaled = scaleUpPair.getLeft(); tierAutoScalerExecution.getTotalAgentsBeingScaledUpGauge().set(agentCountBeingScaled); if (agentCountBeingScaled > 0) { actions.add(scaleUpPair.getRight()); logger.info(\"Attempting to scale up {} tier by {} agent instances\", tier, agentCountBeingScaled); scalingUp = true; if (usedScaleUpCooldown) { tierAutoScalerExecution.getLastScaleUp().set(clock.wallTime()); } } } } if (!scalingUp && hasTimeElapsed(tierAutoScalerExecution.getLastScaleDown().get(), now, tierConfiguration.getScaleDownCoolDownMs())) { int agentCountToScaleDown = 0; int maxIdleForTier = tierConfiguration.getMaxIdle(); if (idleInstancesForTier.size() > maxIdleForTier) { int instancesNotNeededForMaxIdle = idleInstancesForTier.size() - maxIdleForTier; logger.info(\"{} can remove {} instances to satisfy max idle {}\", tier, instancesNotNeededForMaxIdle, maxIdleForTier); agentCountToScaleDown += instancesNotNeededForMaxIdle; } tierAutoScalerExecution.getTotalAgentsToScaleDownGauge().set(agentCountToScaleDown); if (agentCountToScaleDown > 0) { long maxTokensToTake = Math.min(SCALE_DOWN_TOKEN_BUCKET_CAPACITY, agentCountToScaleDown); Optional<Pair<Long, ImmutableTokenBucket>> takeOpt = tierAutoScalerExecution.getLastScaleDownTokenBucket().tryTake(1, maxTokensToTake); if (takeOpt.isPresent()) { Pair<Long, ImmutableTokenBucket> takePair = takeOpt.get(); tierAutoScalerExecution.setLastScaleDownTokenBucket(takePair.getRight()); long tokensAvailable = takePair.getLeft(); Pair<Integer, Completable> scaleDownPair = createSetRemovableOverrideStatusesCompletable(idleInstancesForTier, activeScalableInstanceGroupsForTier, instancesForActiveInstanceGroupsById, (int) tokensAvailable); Integer agentCountBeingScaledDown = scaleDownPair.getLeft(); tierAutoScalerExecution.getTotalAgentsBeingScaledDownGauge().set(agentCountBeingScaledDown); if (agentCountBeingScaledDown > 0) { actions.add(scaleDownPair.getRight()); logger.info(\"Attempting to scale down {} tier by {} agent instances\", tier, agentCountBeingScaledDown); tierAutoScalerExecution.getLastScaleDown().set(clock.wallTime()); } } } } logger.info(\"Finishing scaling actions for tier: {}\", tier); } List<AgentInstance> removableInstancesPastElapsedTime = getRemovableInstancesPastElapsedTime(instancesForActiveInstanceGroups, now, configuration.getAgentInstanceRemovableTimeoutMs()); logger.info(\"Removable instances past elapsed time({}): {}\", removableInstancesPastElapsedTime.size(), removableInstancesPastElapsedTime); if (!removableInstancesPastElapsedTime.isEmpty()) { actions.add(createResetOverrideStatusesCompletable(removableInstancesPastElapsedTime)); logger.info(\"Resetting agent instances({}): {}\", removableInstancesPastElapsedTime.size(), removableInstancesPastElapsedTime); } return actions.isEmpty() ? Completable.complete() : Completable.concat(actions); }).doOnCompleted(() -> logger.debug(\"Completed scaling agents\")) .timeout(CLUSTER_AGENT_AUTO_SCALE_COMPLETABLE_TIMEOUT_MS, TimeUnit.MILLISECONDS); }### Assistant: @Test public void testScaleDownForIdleAgents() { when(configuration.getFlexMinIdle()).thenReturn(0); when(configuration.getFlexMaxIdle()).thenReturn(0); AgentInstanceGroup instanceGroup = createPartition(\"instanceGroup1\", InstanceGroupLifecycleState.Active, \"r4.16xlarge\", 0, 20, 20); when(agentManagementService.getInstanceGroups()).thenReturn(singletonList(instanceGroup)); List<AgentInstance> agentInstances = createAgents(20, \"instanceGroup1\", false); when(agentManagementService.getAgentInstances(\"instanceGroup1\")).thenReturn(agentInstances); List<Task> tasks = createTasks(17, \"jobId\"); for (int i = 0; i < tasks.size(); i++) { Task task = tasks.get(i); when(task.getTaskContext()).thenReturn(singletonMap(TaskAttributes.TASK_ATTRIBUTES_AGENT_INSTANCE_ID, \"instanceGroup1\" + i)); } when(v3JobOperations.getTasks()).thenReturn(tasks); testScheduler.advanceTimeBy(11, TimeUnit.MINUTES); ClusterAgentAutoScaler clusterAgentAutoScaler = new ClusterAgentAutoScaler(titusRuntime, configuration, agentManagementService, v3JobOperations, schedulingService, testScheduler); clusterAgentAutoScaler.doAgentScaling().await(); verify(agentManagementService, times(3)).updateAgentInstanceAttributes(any(), any()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static BindingFunction onTouch(@Nullable View.OnTouchListener listener) { return view -> view.setOnTouchListener(listener); }### Assistant: @Test public void onTouch() throws Exception { View.OnTouchListener listener = mock(View.OnTouchListener.class); BlueTapeDsl .onTouch(listener) .bind(view); verify(view).setOnTouchListener(listener); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public abstract int interpret();### Assistant: @Test public void testInterpret() { final E expression = this.factory.apply(this.first, this.second); assertNotNull(expression); assertEquals(this.result, expression.interpret()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void setPublished(int metadataId, final boolean published) throws IOException { final Path metadataDir = Lib.resource.getMetadataDir(getBaseCacheDir().resolve(PRIVATE), String.valueOf(metadataId)); if (Files.exists(metadataDir)) { Files.walkFileTree(metadataDir, new SimpleFileVisitor<Path>() { @Override public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException { if (dir.getFileName().toString().equals(FULL_MD_NAME)) { return FileVisitResult.SKIP_SUBTREE; } return super.preVisitDirectory(dir, attrs); } @Override public FileVisitResult visitFile(Path privatePath, BasicFileAttributes attrs) throws IOException { final Path publicPath = toPublicPath(privatePath); if (published) { if (!Files.exists(publicPath)) { if (!Files.exists(publicPath.getParent())) { Files.createDirectories(publicPath.getParent()); } Files.createLink(publicPath, privatePath); } } else { Files.deleteIfExists(publicPath); } return super.visitFile(privatePath, attrs); } }); } }### Assistant: @Test public void testSetPublished() throws Exception { StoreInfoAndData data = new StoreInfoAndData(\"result\", 10000, true); Key key1 = new Key(1, \"eng\", FormatType.html, \"full_view\", true, FormatterWidth._100); Key key2 = new Key(1, \"fre\", FormatType.html, \"full_view\", true, FormatterWidth._100); Key key3 = new Key(1, \"fre\", FormatType.xml, \"full_view\", true, FormatterWidth._100); Key key4 = new Key(1, \"fre\", FormatType.html, \"xml_view\", true, FormatterWidth._100); Key key5 = new Key(1, \"fre\", FormatType.html, \"xml_view\", true, FormatterWidth._100); store.put(key1, data); store.put(key2, data); store.put(key3, data); store.put(key4, data); store.put(key5, data); assertPublished(key1, key2, key3, key4, key5); store.setPublished(1, true); assertPublished(key1, key2, key3, key4, key5); store.setPublished(1, false); assertUnpublished(key1, key2, key3, key4, key5); store.setPublished(1, false); assertUnpublished(key1, key2, key3, key4, key5); store.setPublished(1, true); assertPublished(key1, key2, key3, key4, key5); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void doCleanupAfterCompletion(Object transaction) { delegate.doCleanupAfterCompletion(transaction); }### Assistant: @Test public void testDoCleanupAfterCompletion() throws Exception { DirContextHolder expectedContextHolder = new DirContextHolder(null, contextMock); TransactionSynchronizationManager.bindResource(contextSourceMock, expectedContextHolder); tested.doCleanupAfterCompletion(new CompensatingTransactionObject(expectedContextHolder)); assertThat(TransactionSynchronizationManager.getResource(contextSourceMock)).isNull(); assertThat(expectedContextHolder.getTransactionOperationManager()).isNull(); verify(contextMock).close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <A, B> Pair<A, B> tuple(A a, B b) { return pair(a, b); }### Assistant: @Test public void testTuple5() { Tuple5<String, Integer, Integer, Integer, Integer> tuple = Tuples.tuple(\"1234\", 1, 2, 3, 4); assertEquals(\"(1234, 1, 2, 3, 4)\", tuple.toString()); assertEquals(\"1234\", tuple.a); assertEquals(1, tuple.b.intValue()); assertEquals(2, tuple.c.intValue()); assertEquals(3, tuple.d.intValue()); assertEquals(4, tuple.e.intValue()); ObjectTester.assertEqual(tuple, tuple, Tuples.tuple(\"1234\", 1, 2, 3, 4)); ObjectTester.assertNotEqual(tuple, Tuples.tuple(\"21\", 1, 2, 3, 4), Tuples.tuple(\"1234\", 2, 2, 3, 4), Tuples.tuple(\"1234\", 1, 1, 3, 4), Tuples.tuple(\"1234\", 1, 2, 2, 4), Tuples.tuple(\"1234\", 1, 2, 3, 3), \"abc\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Set<Timeout> stop() { if (Thread.currentThread() == workerThread) { throw new IllegalStateException( HashedWheelTimer.class.getSimpleName() + \".stop() cannot be called from \" + TimerTask.class.getSimpleName()); } if (!WORKER_STATE_UPDATER.compareAndSet(this, WORKER_STATE_STARTED, WORKER_STATE_SHUTDOWN)) { if (WORKER_STATE_UPDATER.getAndSet(this, WORKER_STATE_SHUTDOWN) != WORKER_STATE_SHUTDOWN) { INSTANCE_COUNTER.decrementAndGet(); } return Collections.emptySet(); } try { boolean interrupted = false; while (workerThread.isAlive()) { workerThread.interrupt(); try { workerThread.join(100); } catch (InterruptedException ignored) { interrupted = true; } } if (interrupted) { Thread.currentThread().interrupt(); } } finally { INSTANCE_COUNTER.decrementAndGet(); } return worker.unprocessedTimeouts(); }### Assistant: @Test public void stop() throws InterruptedException { final Timer timer = newTimer(); for (int i = 0; i < 10; i++) { timer.newTimeout(new PrintTask(), 5, TimeUnit.SECONDS); Thread.sleep(100); } timer.stop(); try { timer.newTimeout(new PrintTask(), 5, TimeUnit.SECONDS); } catch (Exception e) { e.printStackTrace(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public JSON parse(String json) { try { return JSONSerializer.toJSON(json); } catch (JSONException e) { LOGGER.warn(\"Tried to parse invalid JSON [{}]. Root error: [{}]\", StringUtils.abbreviate(json, 32), ExceptionUtils.getRootCauseMessage(e)); return null; } }### Assistant: @Test void parseMap() { JSONObject json = (JSONObject) this.tool.parse(\"{\\\"a\\\" : 1, \\\"b\\\": [1], \\\"c\\\": true}\"); assertFalse(json.isArray()); assertFalse(json.isEmpty()); assertEquals(3, json.size()); assertTrue(json.getBoolean(\"c\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Map<String, String>> getUsersSubjects() { String url = getAttributes().get(UsersManager.USERS_QUERY); return getUsersOrGroupSubjects(url); }### Assistant: @Test public void getUsersSubjects() { X509CertificateHolder certificateHolder = mock(X509CertificateHolder.class, RETURNS_DEEP_STUBS); when(certificateHolder.getSubject().toString()).thenReturn(\"certificate\"); Map<String, Pair<X509CertificateHolder, String>> validCertificatesForLogin = new HashMap<>(); validCertificatesForLogin.put(\"123456\", new Pair<>(certificateHolder, \"value\")); doReturn(validCertificatesForLogin).when(extSourceTCS).prepareStructureOfValidCertificates(\"url\"); Map<String, String> mapOfAttributes = new HashMap<>(); mapOfAttributes.put(\"usersQuery\", \"url\"); mapOfAttributes.put(\"googleMapping\", \"userID={userID},\\ndomainName={domainName},\\ngroupName={groupName}\"); doReturn(mapOfAttributes).when(extSourceTCS).getAttributes(); List<Map<String, String>> expectedSubjects = new ArrayList<>(); Map<String, String> subject = new HashMap<>(); subject.put(\"login\", \"123456\"); subject.put(\"additionalues_1\", \"https: subject.put(\"urn:perun:user:attribute-def:def:userCertificates\", \"certificate:value,\"); expectedSubjects.add(subject); List<Map<String, String>> actualSubjects = extSourceTCS.getUsersSubjects(); assertEquals(\"subjects should be same\", expectedSubjects, actualSubjects); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException { x509ExtendedTrustManager.checkClientTrusted(chain, authType, socket); if (clientHostnameVerificationEnabled) { performHostVerification(socket.getInetAddress(), chain[0]); } }### Assistant: @Test public void testClientHostnameVerificationWithClientHostnameVerificationDisabled() throws Exception { ZKTrustManager zkTrustManager = new ZKTrustManager(mockX509ExtendedTrustManager, true, false); X509Certificate[] certificateChain = createSelfSignedCertifcateChain(null, HOSTNAME); zkTrustManager.checkClientTrusted(certificateChain, null, mockSocket); verify(mockInetAddress, times(0)).getHostAddress(); verify(mockInetAddress, times(0)).getHostName(); verify(mockX509ExtendedTrustManager, times(1)).checkClientTrusted(certificateChain, null, mockSocket); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TrustManager[] getClientTrustManagers() { TrustManager[] trustManagers = null; TrustManagerFactory trustManagerFactory; try { trustManagerFactory = TrustManagerFactory.getInstance( TrustManagerFactory.getDefaultAlgorithm() ); trustManagerFactory.init( trustStore ); trustManagers = trustManagerFactory.getTrustManagers(); trustStoreData.getPassword(); } catch ( Exception e ) { LOGGER.error( \"Error getting array of trust managers: {}\", e.getMessage() ); } return trustManagers; }### Assistant: @Test public void testGetClientTrustManagers() throws Exception { sslManager.getClientTrustManagers(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static MqttPublishTarget of(final String topic) { return new MqttPublishTarget(topic); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testEmpty() { MqttPublishTarget.of(\"\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void eval(EvaluationContext<T> ctx) { evalLambda.accept(ctx); }### Assistant: @Test public void eval() { function.eval(mock(EvaluationContext.class)); assertTrue(evalCalled); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean isMatchWithRegExp(final File file) { return file.getName().matches(FILE_NAME_EXP); }### Assistant: @Test public void testIsMatchWithRegExpShouldReturnFalseWhenSuffixDoesNotMatch() { String fileName = \"20130701132107.0025asd.txt\"; given(file.getName()).willReturn(fileName); boolean result = underTest.isMatchWithRegExp(file); assertFalse(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isUserAllowed(UserGroupInformation ugi) { return isUserInList(ugi); }### Assistant: @Test public void testIsUserAllowed() { AccessControlList acl; UserGroupInformation drwho = UserGroupInformation.createUserForTesting(\"drwho@EXAMPLE.COM\", new String[] { \"aliens\", \"humanoids\", \"timelord\" }); UserGroupInformation susan = UserGroupInformation.createUserForTesting(\"susan@EXAMPLE.COM\", new String[] { \"aliens\", \"humanoids\", \"timelord\" }); UserGroupInformation barbara = UserGroupInformation.createUserForTesting(\"barbara@EXAMPLE.COM\", new String[] { \"humans\", \"teachers\" }); UserGroupInformation ian = UserGroupInformation.createUserForTesting(\"ian@EXAMPLE.COM\", new String[] { \"humans\", \"teachers\" }); acl = new AccessControlList(\"drwho humanoids\"); assertUserAllowed(drwho, acl); assertUserAllowed(susan, acl); assertUserNotAllowed(barbara, acl); assertUserNotAllowed(ian, acl); acl = new AccessControlList(\"drwho\"); assertUserAllowed(drwho, acl); assertUserNotAllowed(susan, acl); assertUserNotAllowed(barbara, acl); assertUserNotAllowed(ian, acl); acl = new AccessControlList(\"drwho \"); assertUserAllowed(drwho, acl); assertUserNotAllowed(susan, acl); assertUserNotAllowed(barbara, acl); assertUserNotAllowed(ian, acl); acl = new AccessControlList(\" humanoids\"); assertUserAllowed(drwho, acl); assertUserAllowed(susan, acl); assertUserNotAllowed(barbara, acl); assertUserNotAllowed(ian, acl); acl = new AccessControlList(\"drwho,ian aliens,teachers\"); assertUserAllowed(drwho, acl); assertUserAllowed(susan, acl); assertUserAllowed(barbara, acl); assertUserAllowed(ian, acl); acl = new AccessControlList(\"\"); UserGroupInformation spyUser = spy(drwho); acl.isUserAllowed(spyUser); verify(spyUser, never()).getGroupNames(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String suffix(String s, int count) { if (s == null) { return null; } if (s.length() < count) { return s; } return s.substring(s.length() - count); }### Assistant: @Test public void testSuffixes() { String word = \"Grobid\"; assertEquals(\"\", TextUtilities.suffix(word, 0)); assertEquals(\"d\", TextUtilities.suffix(word, 1)); assertEquals(\"id\", TextUtilities.suffix(word, 2)); assertEquals(\"bid\", TextUtilities.suffix(word, 3)); assertEquals(\"obid\", TextUtilities.suffix(word, 4)); assertEquals(\"Grobid\", TextUtilities.suffix(word, 6)); assertEquals(\"Grobid\", TextUtilities.suffix(word, 100)); assertEquals(null, TextUtilities.suffix(null, 0)); assertEquals(null, TextUtilities.suffix(null, 1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TimelineDomain getDomain(String domainId) throws IOException { try (DBIterator iterator = domaindb.iterator()) { byte[] prefix = KeyBuilder.newInstance().add(domainId) .getBytesForLookup(); iterator.seek(prefix); return getTimelineDomain(iterator, domainId, prefix); } }### Assistant: @Test public void testGetDomain() throws IOException { super.testGetDomain(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static AdLoadTask fromHttpResponse(HttpResponse response, AdViewController adViewController) throws IOException { return new TaskExtractor(response, adViewController).extract(); }### Assistant: @Test public void fromHttpResponse_whenNoCustomEventName_shouldCreateLegacyCustomEventAdLoadTaskWithAHeader() throws Exception { String expectedCustomData = \"Custom data\"; String expectedHeaderValue = \"some stuff\"; response.addHeader(AD_TYPE.getKey(), \"custom\"); response.addHeader(CUSTOM_EVENT_DATA.getKey(), expectedCustomData); response.addHeader(CUSTOM_SELECTOR.getKey(), expectedHeaderValue); AdLoadTask.LegacyCustomEventAdLoadTask customEventTask = (AdLoadTask.LegacyCustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController); Header taskHeader = customEventTask.getHeader(); assertThat(taskHeader).isNotNull(); assertThat(taskHeader.getName()).isEqualTo(CUSTOM_SELECTOR.getKey()); assertThat(taskHeader.getValue()).isEqualTo(expectedHeaderValue); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SingleThreadJsonFactory copy() { _checkInvalidCopy(SingleThreadJsonFactory.class); return new SingleThreadJsonFactory(this, null); }### Assistant: @Test public void copyDoesNotUseSourceSharedComponents() { SingleThreadJsonFactory factory1 = new SingleThreadJsonFactory(); factory1.dataOutputDelegate.setDelegate(mock(DataOutput.class)); SingleThreadJsonFactory factory2 = factory1.copy(); assertNotSame(factory1.outputStreamDelegate, factory2.outputStreamDelegate); assertNotSame(factory1.outputStreamDelegate.getDelegate(), factory2.outputStreamDelegate.getDelegate()); assertNotSame(factory1.dataOutputDelegate, factory2.dataOutputDelegate); assertNotSame(factory1.dataOutputDelegate.getDelegate(), factory2.dataOutputDelegate.getDelegate()); assertNotSame(factory1.ioContext, factory2.ioContext); assertNotSame(factory1.ioContext.getSourceReference(), factory2.ioContext.getSourceReference()); assertNotSame(factory1.jsonGenerator, factory2.jsonGenerator); assertNotSame(factory1.writeCtxAccessor, factory2.writeCtxAccessor); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean supportsLinking(File sourceLocation, File targetLocation) { final Path sourcePath = requireNonNull(sourceLocation).toPath(); final Path targetPath = requireNonNull(targetLocation).toPath(); if (!exists(sourcePath)) throw new IllegalArgumentException(format(\"Source %s does not exist\", sourcePath)); logger.debug(\"Creating hard link from {} to {}\", sourcePath, targetPath); try { deleteIfExists(targetPath); createLink(targetPath, sourcePath); } catch (Exception e) { logger.debug(\"Unable to create a link from {} to {}: {}\", sourcePath, targetPath, e); return false; } return true; }### Assistant: @Test public void supportsLinkingReturnsTrueOnAppropriateFile() { assertTrue(FileSupport.supportsLinking(fileToLink, linkLocation)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Move think(int color, int level) { if (game.boards.get(color).pieces.isEmpty()) { Log.d(tag, \"no more pieces for player : \" + color); game.boards.get(color).over = true; return null; } Log.d(tag, \"--------------------------------------------------------------------------------\"); level = Math.min(level, adaptedLevel); if (level>1 && color!=1 ) level--; Log.d(tag, \"thinking for player : \" + color + \", upto # moves : \" + maxMoves[level]); List<Move> moves = thinkUpToNMoves(color, level); Log.d(tag, \"# moves : \" + moves.size()); if (moves.size()==0) { game.boards.get(color).over = true; return null; } Collections.sort(moves); Collections.reverse(moves); Move move = moves.get( 0); Log.d(tag, \"best move actually is : \" + move); if (moves.size()>20) { for (int k=moves.size()-1; k>=2; k--) { if (moves.get(k).piece.count<=2) moves.remove(k); } if (moves.size()> 10) { move = moves.get( random.nextInt(3)); } else { Log.d(tag, \"keeping best move!\"); } } move.piece.reset(move.ghost); return move; }### Assistant: @Test public void testThinkEmptyBoard() { pieces.add( L4); assertNotNull( ai.think(0,0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> Document beanToDocument(T bean) throws IllegalArgumentException, IllegalAccessException { if (bean == null) { return null; } Document document = new Document(); Field[] fields = bean.getClass().getDeclaredFields(); for (Field field : fields) { String varName = field.getName(); boolean accessFlag = field.isAccessible(); if (!accessFlag) { field.setAccessible(true); } Object param = field.get(bean); if (param == null || \"serialVersionUID\".equals(field.getName()) || field.getName().contains(\"bitField\")) { continue; } else if (param instanceof Integer) { int value = ((Integer) param).intValue(); document.put(varName, value); } else if (param.getClass() == int.class) { int value = (int) param; document.put(varName, value); } else if (param instanceof String) { String value = (String) param; document.put(varName, value); } else if (param instanceof Double) { double value = ((Double) param).doubleValue(); document.put(varName, value); } else if (param.getClass() == double.class) { double value = (double) param; document.put(varName, value); } else if (param instanceof Float) { float value = ((Float) param).floatValue(); document.put(varName, value); } else if (param.getClass() == float.class) { float value = (float) param; document.put(varName, value); } else if (param instanceof Long) { long value = ((Long) param).longValue(); document.put(varName, value); } else if (param.getClass() == long.class) { long value = (long) param; document.put(varName, value); } else if (param instanceof Boolean) { boolean value = ((Boolean) param).booleanValue(); document.put(varName, value); } else if (param.getClass() == boolean.class) { boolean value = (boolean) param; document.put(varName, value); } else if (param instanceof Date) { Date value = (Date) param; document.put(varName, value.getTime()); } else if (param instanceof LocalDateTime) { LocalDateTime dataTimeValue = (LocalDateTime) param; document.put(varName, CommonUtils.localDateTimeToMills(dataTimeValue)); } field.setAccessible(accessFlag); } return document; }### Assistant: @Test public void testBeanToDocument() { String data = \"\u6d4b\u8bd5\u6570\u636e\"; String msg = \"\u6210\u529f\u4e86\"; Integer code = Integer.valueOf(10); Document doc = new Document(); doc.put(\"data\", data); doc.put(\"msg\", msg); doc.put(\"rtnCode\", code); ResultBean<String> resultBean = new ResultBean(1, \"\"); try { resultBean = MongoDBUtils.documentToBean(doc, resultBean); assertEquals(resultBean.getData(), data); assertEquals(resultBean.getMsg(), msg); assertEquals(Integer.valueOf(resultBean.getRtnCode()), code); } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) { e.printStackTrace(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean parseNext(ByteBuffer buffer) { if (DEBUG) LOG.debug(\"parseNext s={} {}\", state, BufferUtils.toDetailString(buffer)); try { if (state == State.START) { version = null; method = null; methodString = null; endOfContent = EndOfContent.UNKNOWN_CONTENT; header = null; if (quickStart(buffer)) return true; } if (state.ordinal() >= State.START.ordinal() && state.ordinal() < State.HEADER.ordinal()) { if (parseLine(buffer)) return true; } if (state == State.HEADER) { if (parseFields(buffer)) return true; } if (state.ordinal() >= State.CONTENT.ordinal() && state.ordinal() < State.TRAILER.ordinal()) { if (responseStatus > 0 && headResponse) { setState(State.END); return handleContentMessage(); } else { if (parseContent(buffer)) return true; } } if (state == State.TRAILER) { if (parseFields(buffer)) return true; } if (state == State.END) { while (buffer.remaining() > 0 && buffer.get(buffer.position()) <= HttpTokens.SPACE) buffer.get(); } else if (isClose() || isClosed()) { BufferUtils.clear(buffer); } if (eof && !buffer.hasRemaining()) { switch (state) { case CLOSED: break; case START: setState(State.CLOSED); handler.earlyEOF(); break; case END: case CLOSE: setState(State.CLOSED); break; case EOF_CONTENT: case TRAILER: if (fieldState == FieldState.FIELD) { setState(State.CLOSED); return handleContentMessage(); } setState(State.CLOSED); handler.earlyEOF(); break; case CONTENT: case CHUNKED_CONTENT: case CHUNK_SIZE: case CHUNK_PARAMS: case CHUNK: setState(State.CLOSED); handler.earlyEOF(); break; default: if (DEBUG) LOG.debug(\"{} EOF in {}\", this, state); setState(State.CLOSED); handler.badMessage(new BadMessageException(HttpStatus.BAD_REQUEST_400)); break; } } } catch (BadMessageException x) { BufferUtils.clear(buffer); badMessage(x); } catch (Throwable x) { BufferUtils.clear(buffer); badMessage(new BadMessageException(HttpStatus.BAD_REQUEST_400, requestHandler != null ? \"Bad Request\" : \"Bad Response\", x)); } return false; }### Assistant: @Test void testParseRequest() { ByteBuffer buffer = BufferUtils.toBuffer( \"GET / HTTP/1.1\\r\\n\" + \"Host: localhost\\r\\n\" + \"Header1: value1\\r\\n\" + \"Connection: close\\r\\n\" + \"Accept-Encoding: gzip, deflated\\r\\n\" + \"Accept: unknown\\r\\n\" + \"\\r\\n\"); HttpParser.RequestHandler handler = new Handler(); HttpParser parser = new HttpParser(handler); parser.parseNext(buffer); assertEquals(\"GET\", methodOrVersion); assertEquals(\"/\", uriOrStatus); assertEquals(\"HTTP/1.1\", versionOrReason); assertEquals(\"Host\", hdr[0]); assertEquals(\"localhost\", val[0]); assertEquals(\"Connection\", hdr[2]); assertEquals(\"close\", val[2]); assertEquals(\"Accept-Encoding\", hdr[3]); assertEquals(\"gzip, deflated\", val[3]); assertEquals(\"Accept\", hdr[4]); assertEquals(\"unknown\", val[4]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean relate(GeometryWrapper sourceGeometry, GeometryWrapper targetGeometry) throws FactoryException, MismatchedDimensionException, TransformException { return sourceGeometry.equalsTopo(targetGeometry); }### Assistant: @Test public void testRelate_polygon_point_false() throws FactoryException, MismatchedDimensionException, TransformException { GeometryWrapper subjectGeometryWrapper = GeometryWrapper.extract(ResourceFactory.createTypedLiteral(\"<http: GeometryWrapper objectGeometryWrapper = GeometryWrapper.extract(ResourceFactory.createTypedLiteral(\"<http: EqualsFF instance = new EqualsFF(); Boolean expResult = false; Boolean result = instance.relate(subjectGeometryWrapper, objectGeometryWrapper); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public HttpResponse request(HttpRequest httpRequest) throws IOException { URL url = new URL(httpRequest.getUrl()); HttpRequestMethod method = httpRequest.getHttpRequestMethod(); String encoding = httpRequest.getEncoding(); httpURLConnection = newHttpURLConnection(url, method, encoding); String content = httpRequest.getContent(); if (content == null) { content = HttpParameter.encodeParameters(httpRequest.getParameters(), encoding); } if (method == HttpRequestMethod.POST) { httpURLConnection.setRequestProperty(HttpHeaders.CONTENT_LENGTH, String.valueOf(content.length())); } return request(content, encoding); }### Assistant: @Test public void request() throws IOException { { String responseContent = \"Response\"; String requestContent = \"Request\"; ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); ByteArrayInputStream inputStream = new ByteArrayInputStream(responseContent.getBytes(\"utf-8\")); HttpURLConnection httpURLConnection = mock(HttpURLConnection.class); when(httpURLConnection.getOutputStream()).thenReturn(outputStream); when(httpURLConnection.getResponseCode()).thenReturn(-1); when(httpURLConnection.getContentLength()).thenReturn(responseContent.length()); when(httpURLConnection.getInputStream()).thenReturn(inputStream); HttpClient httpClient = new HttpClient(); httpClient.httpURLConnection = httpURLConnection; HttpResponse response = httpClient.request(requestContent, \"utf-8\"); assertThat(response, is(not(nullValue()))); assertThat(response.getStatusCode(), is(-1)); assertThat(response.getContent(), is(\"Response\")); } { String responseContent = \"\"; ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); ByteArrayInputStream inputStream = new ByteArrayInputStream(responseContent.getBytes(\"utf-8\")); HttpURLConnection httpURLConnection = mock(HttpURLConnection.class); when(httpURLConnection.getDoOutput()).thenReturn(false); when(httpURLConnection.getOutputStream()).thenReturn(outputStream); when(httpURLConnection.getResponseCode()).thenReturn(-1); when(httpURLConnection.getContentLength()).thenReturn(responseContent.length()); when(httpURLConnection.getInputStream()).thenReturn(inputStream); HttpClient httpClient = new HttpClient(); httpClient.httpURLConnection = httpURLConnection; httpClient.request(\"something\", \"utf-8\"); assertThat(outputStream.size(), is(0)); } { String responseContent = \"\"; ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); ByteArrayInputStream inputStream = new ByteArrayInputStream(responseContent.getBytes(\"utf-8\")); HttpURLConnection httpURLConnection = mock(HttpURLConnection.class); when(httpURLConnection.getDoOutput()).thenReturn(true); when(httpURLConnection.getOutputStream()).thenReturn(outputStream); when(httpURLConnection.getResponseCode()).thenReturn(-1); when(httpURLConnection.getContentLength()).thenReturn(responseContent.length()); when(httpURLConnection.getInputStream()).thenReturn(inputStream); HttpClient httpClient = new HttpClient(); httpClient.httpURLConnection = httpURLConnection; httpClient.request(\"key=value&key2=value2\", \"utf-8\"); String expectedString = \"key=value&key2=value2\"; assertThat(outputStream.size(), is(expectedString.length())); assertThat(outputStream.toByteArray(), is(expectedString.getBytes(\"utf-8\"))); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting static File checkHadoopHomeInner(String home) throws FileNotFoundException { if (home == null) { throw new FileNotFoundException(E_HADOOP_PROPS_UNSET); } while (home.startsWith(\"\\\"\")) { home = home.substring(1); } while (home.endsWith(\"\\\"\")) { home = home.substring(0, home.length() - 1); } if (home.isEmpty()) { throw new FileNotFoundException(E_HADOOP_PROPS_EMPTY); } File homedir = new File(home); if (!homedir.isAbsolute()) { throw new FileNotFoundException(\"Hadoop home directory \" + homedir + \" \" + E_IS_RELATIVE); } if (!homedir.exists()) { throw new FileNotFoundException(\"Hadoop home directory \" + homedir + \" \" + E_DOES_NOT_EXIST); } if (!homedir.isDirectory()) { throw new FileNotFoundException(\"Hadoop home directory \" + homedir + \" \"+ E_NOT_DIRECTORY); } return homedir; }### Assistant: @Test public void testHadoopHomeValid() throws Throwable { File f = checkHadoopHomeInner(rootTestDir.getCanonicalPath()); assertEquals(rootTestDir, f); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T> Future<T> submit(Callable<T> task) { submitted.mark(); return delegate.submit(new InstrumentedCallable<>(task)); }### Assistant: @Test public void testSubmitCallable() throws Exception { assertThat(submitted.getCount()).isZero(); assertThat(running.getCount()).isZero(); assertThat(completed.getCount()).isZero(); assertThat(duration.getCount()).isZero(); assertThat(scheduledOnce.getCount()).isZero(); assertThat(scheduledRepetitively.getCount()).isZero(); assertThat(scheduledOverrun.getCount()).isZero(); assertThat(percentOfPeriod.getCount()).isZero(); final Object obj = new Object(); Future<Object> theFuture = instrumentedScheduledExecutor.submit(() -> { assertThat(submitted.getCount()).isEqualTo(1); assertThat(running.getCount()).isEqualTo(1); assertThat(completed.getCount()).isZero(); assertThat(duration.getCount()).isZero(); assertThat(scheduledOnce.getCount()).isZero(); assertThat(scheduledRepetitively.getCount()).isZero(); assertThat(scheduledOverrun.getCount()).isZero(); assertThat(percentOfPeriod.getCount()).isZero(); return obj; }); assertThat(theFuture.get()).isEqualTo(obj); assertThat(submitted.getCount()).isEqualTo(1); assertThat(running.getCount()).isZero(); assertThat(completed.getCount()).isEqualTo(1); assertThat(duration.getCount()).isEqualTo(1); assertThat(duration.getSnapshot().size()).isEqualTo(1); assertThat(scheduledOnce.getCount()).isZero(); assertThat(scheduledRepetitively.getCount()).isZero(); assertThat(scheduledOverrun.getCount()).isZero(); assertThat(percentOfPeriod.getCount()).isZero(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private static String toString(final Object o1, final Object o2) { return o1 + \", \" + o2; }### Assistant: @Test public void testByThrownAndInterruptedIoSub() { LogRecord r1 = new LogRecord(Level.INFO, Level.INFO.toString()); LogRecord r2 = new LogRecord(Level.INFO, Level.INFO.toString()); swapSeq(r1, r2); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); r1.setThrown(headSubIioeChain(null)); r2.setThrown(new Error()); assertRecordLessThan(r1, r2); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); r1.setThrown(headSubIioeChain(null)); r2.setThrown(new RuntimeException()); assertRecordLessThan(r1, r2); assertTrue(r1.getSequenceNumber() > r2.getSequenceNumber()); r1.setThrown(headSubIioeChain(null)); r2.setThrown(new Exception()); assertRecordLessThan(r1, r2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <V> Class<V> fromGenericType(Class<?> subclass, Class<?> superclass) { return fromGenericType(subclass, null, superclass, 0); }### Assistant: @Test public void stringSubclass() { assertThat(GenericsUtil.fromGenericType(StringSubclass.class, GenericSuperclass.class, 0)).isEqualTo(String.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DeviceCredentials findByCredentialsId(String credentialsId) { return DaoUtil.getData(deviceCredentialsRepository.findByCredentialsId(credentialsId)); }### Assistant: @Test @DatabaseSetup(\"classpath:dbunit/device_credentials.xml\") public void findByCredentialsId() { String credentialsId = \"ID_2\"; DeviceCredentials deviceCredentials = deviceCredentialsDao.findByCredentialsId(credentialsId); assertNotNull(deviceCredentials); assertEquals(\"958e3c74-3215-11e7-93ae-92361f002671\", deviceCredentials.getId().getId().toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean arrayStartsWith(final byte[] array, final byte[] str) { boolean result = false; if (array.length >= str.length) { result = true; int index = str.length; while (--index >= 0) { if (array[index] != str[index]) { result = false; break; } } } return result; }### Assistant: @Test public void testArrayStartsWith_EmptyStart() { assertTrue(JBBPUtils.arrayStartsWith(new byte[0], new byte[0])); assertTrue(JBBPUtils.arrayStartsWith(new byte[111], new byte[0])); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Table read(FixedWidthReadOptions options) throws IOException { return read(options, false); }### Assistant: @Test public void testWithColumnSKIPWithoutHeader() throws Exception { Table table = Table.read() .usingOptions( FixedWidthReadOptions.builder(\"../data/fixed_width_cars_no_header_test.txt\") .header(false) .columnTypes(car_types_with_SKIP) .columnSpecs(car_fields_specs) .padding('_') .systemLineEnding() .skipTrailingCharsUntilNewline(true) .build()); assertEquals(4, table.columnCount()); String[] expected = new String[]{\"C0\", \"C1\", \"C2\", \"C4\"}; assertArrayEquals(expected, table.columnNames().toArray()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void incrementReseedCounter(long increment) { if (increment < 0) { throw new IllegalArgumentException(\"Negative increment.\"); } if (reseedCounter + increment > RESEED_LIMIT) { throw new IllegalStateException( \"Exceeded limit on generation requests. A DRBG with a fresh seed should be used.\"); } reseedCounter += increment; }### Assistant: @Test(expected = IllegalArgumentException.class) public void testIncrementReseedNegativeIncrement() { AesCtrDrbg drbg = new AesCtrDrbg(new byte[32]); drbg.incrementReseedCounter(-1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Props props() { return Props.create(DataTreeNotificationListenerRegistrationActor.class); }### Assistant: @Test public void testOnReceiveCloseListenerRegistrationBeforeSetRegistration() { final ActorRef subject = getSystem().actorOf(DataTreeNotificationListenerRegistrationActor.props(), \"testOnReceiveSetRegistrationAfterPriorClose\"); kit.watch(subject); subject.tell(CloseDataTreeNotificationListenerRegistration.getInstance(), kit.getRef()); kit.expectMsgClass(Duration.ofSeconds(5), CloseDataTreeNotificationListenerRegistrationReply.class); subject.tell(new DataTreeNotificationListenerRegistrationActor.SetRegistration(mockListenerReg, mockOnClose), ActorRef.noSender()); verify(mockListenerReg, timeout(5000)).close(); verify(mockOnClose, timeout(5000)).run(); kit.expectTerminated(Duration.ofSeconds(5), subject); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public BaseVectorSummary toSummary() { DenseVectorSummary summary = new DenseVectorSummary(); summary.count = count; summary.sum = sum; summary.squareSum = squareSum; summary.normL1 = normL1; summary.min = min; summary.max = max; return summary; }### Assistant: @Test public void toSummary() { DenseVectorSummary summary = (DenseVectorSummary) summarizer().toSummary(); assertEquals(5, summary.count); assertArrayEquals(new double[]{15.0, -15.0, 15.0}, summary.sum.getData(), 10e-6); assertArrayEquals(new double[]{55.0, 55.0, 45.0}, summary.squareSum.getData(), 10e-6); assertArrayEquals(new double[]{1.0, -5.0, 3.0}, summary.min.getData(), 10e-6); assertArrayEquals(new double[]{5.0, -1.0, 3.0}, summary.max.getData(), 10e-6); assertArrayEquals(new double[]{15.0, 15.0, 15.0}, summary.normL1.getData(), 10e-6); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute() throws MojoFailureException { var graph = new ClassGraph().enableClassInfo().enableAnnotationInfo().addClassLoader(Processor.loader(classpaths)); var environment = new MavenEnvironment(project()); try (var processor = new MavenProcessor(environment, graph)) { processor.run(); if (valid(environment)) { var yaml = YAML.fromFile(\"Scribe Maven Plugin\", new File(folder, \"plugin.yml\")); yaml.write(environment.mappings); } else { throw new MojoFailureException(\"Could not resolve annotations\"); } } }### Assistant: @Test void execute() throws MojoFailureException { doReturn(true).when(mojo).valid(any()); mojo.execute(); assertTrue(file.exists()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static JobExecution map(final org.springframework.batch.core.JobExecution jobExecution) { final JobExecution response = new JobExecution(); response.setId(jobExecution.getId()); response.setCreateTime(jobExecution.getCreateTime()); response.setEndTime(jobExecution.getEndTime()); response.setExitStatus(map(jobExecution.getExitStatus())); response.setFailureExceptions(jobExecution.getFailureExceptions()); response.setJobConfigurationName(jobExecution.getJobConfigurationName()); response.setJobInstance(map(jobExecution.getJobInstance())); response.setJobParameters(map(jobExecution.getJobParameters())); response.setLastUpdated(jobExecution.getLastUpdated()); response.setStartTime(jobExecution.getStartTime()); response.setStatus(map(jobExecution.getStatus())); response.setStepExecutions(mapStepExecutions(jobExecution.getStepExecutions())); response.setVersion(jobExecution.getVersion()); return response; }### Assistant: @Test public void tesMapJobInstance() { final org.springframework.batch.core.JobInstance jobInstance = DomainTestHelper.createJobInstance(1L, \"testJob\"); final JobInstance result = BatchToResourceMapper.map(jobInstance); this.assertJobInstance(result, jobInstance); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void registerSchema(final XmlSchemaDTO schema) { if (schema == null) { throw new IllegalArgumentException(\"DTO must not be null.\"); } if (schemaDTOs.add(schema)) { view.addToList(schema); } }### Assistant: @Test public void testRegisterSchema() { final XmlSchemaDTO dto = new XmlSchemaDTO(SAMPLE_OTHER_LOCATION); mockView.addToList(same(dto)); expectLastCall(); EasyMockUnitils.replay(); presenter.registerSchema(dto); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Type list(Type searchFor, String... roots) { return new CompositeType(new ListTypeImpl(searchFor), roots); }### Assistant: @Test(expected = JsonDataException.class) public void listObjectWithoutRoot() throws Exception { Type type = Converter.list(TestData.class); fromJson(type, \"{\\n\" + \" \\\"content\\\": []\\n\" + '}'); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public DataTypePattern parse(int jdbcType, String dataTypeDefn) throws ParsingException { TokenStream stream = new TokenStream(dataTypeDefn, tokenizer, false); stream.start(); Pattern pattern = parseMultiple(stream); return pattern != null ? new DataTypePattern(pattern, jdbcType) : null; }### Assistant: @Test public void shouldNotFindMatchingDataTypeIfInvalidOrIncomplete() { pattern = parser.parse(TYPE, \"DECIMAL(3)\"); assertThat(pattern).isNotNull(); type = pattern.match(text(\"DECIMAL(3\")); assertThat(type).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Span nextSpan(TraceContextOrSamplingFlags extracted) { if (extracted == null) throw new NullPointerException(\"extracted == null\"); TraceContext context = extracted.context(); if (context != null) return newChild(context); TraceIdContext traceIdContext = extracted.traceIdContext(); if (traceIdContext != null) { return _toSpan(null, decorateContext( InternalPropagation.instance.flags(extracted.traceIdContext()), traceIdContext.traceIdHigh(), traceIdContext.traceId(), 0L, 0L, 0L, extracted.extra() )); } SamplingFlags samplingFlags = extracted.samplingFlags(); List<Object> extra = extracted.extra(); TraceContext parent = currentTraceContext.get(); int flags; long traceIdHigh = 0L, traceId = 0L, localRootId = 0L, spanId = 0L; if (parent != null) { flags = InternalPropagation.instance.flags(parent); traceIdHigh = parent.traceIdHigh(); traceId = parent.traceId(); localRootId = parent.localRootId(); spanId = parent.spanId(); extra = concat(extra, parent.extra()); } else { flags = InternalPropagation.instance.flags(samplingFlags); } return _toSpan(parent, decorateContext(flags, traceIdHigh, traceId, localRootId, spanId, 0L, extra)); }### Assistant: @Test public void localRootId_nextSpan_sampled() { TraceContext context1 = TraceContext.newBuilder().traceId(1).spanId(2).sampled(true).build(); TraceContext context2 = TraceContext.newBuilder().traceId(1).spanId(3).sampled(true).build(); localRootId(context1, context2, ctx -> tracer.nextSpan(ctx)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: String[] filterOptionsForConstraintTypeLiteral(final String[] options) { final List<String> operatorOptions = new ArrayList<>(); Collections.addAll(operatorOptions, options); if (getConstraintValueType() != BaseSingleFieldConstraint.TYPE_LITERAL) { operatorOptions.remove(\"in\"); operatorOptions.remove(\"not in\"); } return operatorOptions.toArray(new String[operatorOptions.size()]); }### Assistant: @Test public void testFilterOptionsForConstraintTypeLiteralWhenConstraintValueIsPredicate() { when(plugin.constraintValue()).thenReturn(BaseSingleFieldConstraint.TYPE_PREDICATE); final String[] result = page.filterOptionsForConstraintTypeLiteral(OperatorsOracle.EXPLICIT_LIST_OPERATORS); final List<String> operators = Arrays.asList(result); assertEquals(0, operators.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String unquoteIdentifierPart(String identifierPart) { if (identifierPart == null || identifierPart.length() < 2) { return identifierPart; } Character quotingChar = deriveQuotingChar(identifierPart); if (quotingChar != null) { identifierPart = identifierPart.substring(1, identifierPart.length() - 1); identifierPart = identifierPart.replace(quotingChar.toString() + quotingChar.toString(), quotingChar.toString()); } return identifierPart; }### Assistant: @Test public void unquoteIdentifierPartShouldReturnEmptyStringForEmptyQuotedString() { assertThat(Strings.unquoteIdentifierPart(\"''\")).isEqualTo(\"\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @POST @Path(TagRESTConstants.RESOURCES_RESOURCE) @Produces({ \"application/json\", \"application/xml\" }) @PreAuthorize(\"hasRole('ROLE_SYS_ADMIN')\") public RangerServiceResource createServiceResource(RangerServiceResource resource, @DefaultValue(\"true\") @QueryParam(\"updateIfExists\") boolean updateIfExists) { if(LOG.isDebugEnabled()) { LOG.debug(\"==> TagREST.createServiceResource(\" + resource + \", \" + updateIfExists + \")\"); } RangerServiceResource ret; try { RangerServiceResource exist = validator.preCreateServiceResource(resource); if (exist == null) { ret = tagStore.createServiceResource(resource); } else if (updateIfExists) { ret = updateServiceResource(exist.getId(), resource); } else { throw new Exception(\"resource with Id \" + exist.getId() + \" already exists\"); } } catch(Exception excp) { LOG.error(\"createServiceResource(\" + resource + \") failed\", excp); throw restErrorUtil.createRESTException(HttpServletResponse.SC_BAD_REQUEST, excp.getMessage(), true); } if(LOG.isDebugEnabled()) { LOG.debug(\"<== TagREST.createServiceResource(\" + resource + \", \" + updateIfExists + \"): \" + ret); } return ret; }### Assistant: @Test public void test27createServiceResource() { RangerServiceResource oldRSR = null; RangerServiceResource newRSR = new RangerServiceResource(); newRSR.setId(id); newRSR.setGuid(gId); try { Mockito.when(validator.preCreateServiceResource(oldRSR)).thenReturn(oldRSR); } catch (Exception e) { } try { Mockito.when(tagStore.createServiceResource(oldRSR)).thenReturn(newRSR); } catch (Exception e) { } RangerServiceResource rangerServiceResource = tagREST.createServiceResource(oldRSR, false); Assert.assertNotNull(rangerServiceResource.getId()); Assert.assertEquals(rangerServiceResource.getId(), newRSR.getId()); Assert.assertEquals(rangerServiceResource.getGuid(), newRSR.getGuid()); try { Mockito.verify(validator).preCreateServiceResource(oldRSR); } catch (Exception e) { } try { Mockito.verify(tagStore).createServiceResource(oldRSR); } catch (Exception e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void process(Exchange exchange) throws Exception { Message in = exchange.getIn(); Object body = in.getBody(); PlcWriteRequest.Builder builder = plcConnection.writeRequestBuilder(); if (body instanceof Map) { Map<String, Map<String, Object>> tags = (Map<String, Map<String, Object>>) body; for (Map.Entry<String, Map<String, Object>> entry : tags.entrySet()) { String name = entry.getKey(); String query = entry.getValue().keySet().iterator().next(); Object value = entry.getValue().get(query); builder.addItem(name,query,value); } } else { throw new PlcInvalidFieldException(\"The body must contain a Map<String,Map<String,Object>\"); } CompletableFuture<? extends PlcWriteResponse> completableFuture = builder.build().execute(); int currentlyOpenRequests = openRequests.incrementAndGet(); try { log.debug(\"Currently open requests including {}:{}\", exchange, currentlyOpenRequests); Object plcWriteResponse = completableFuture.get(); if (exchange.getPattern().isOutCapable()) { Message out = exchange.getOut(); out.copyFrom(exchange.getIn()); out.setBody(plcWriteResponse); } else { in.setBody(plcWriteResponse); } } finally { int openRequestsAfterFinish = openRequests.decrementAndGet(); log.trace(\"Open Requests after {}:{}\", exchange, openRequestsAfterFinish); } }### Assistant: @Test public void process() throws Exception { when(testExchange.getPattern()).thenReturn(ExchangePattern.InOnly); SUT.process(testExchange); when(testExchange.getPattern()).thenReturn(ExchangePattern.InOut); SUT.process(testExchange); when(testExchange.getIn().getBody()).thenReturn(2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static MVMap<AlleleKey, AlleleProperties> openAlleleMVMap(MVStore mvStore) { Objects.requireNonNull(mvStore); if (!mvStore.hasMap(ALLELE_MAP_NAME)) { logger.warn(\"MVStore does not contain map '{}' - creating new map instance.\", ALLELE_MAP_NAME); } MVMap<AlleleKey, AlleleProperties> map = mvStore.openMap(ALLELE_MAP_NAME, MvStoreUtil.alleleMapBuilder()); if (!map.isEmpty()) { logger.debug(\"MVMap '{}' opened with {} entries\", ALLELE_MAP_NAME, map.size()); } return map; }### Assistant: @Test public void openAlleleMVMap() { MVStore mvStore = new MVStore.Builder().open(); MVMap<AlleleKey, AlleleProperties> map = MvStoreUtil.openAlleleMVMap(mvStore); assertThat(map.isEmpty(), is(true)); assertThat(mvStore.hasMap(\"alleles\"), is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onSubscribe(@NonNull Disposable s) { if (DisposableHelper.validate(this.s, s)) { this.s = s; try { actual.onSubscribe(this); } catch (Throwable e) { Exceptions.throwIfFatal(e); done = true; try { s.dispose(); } catch (Throwable e1) { Exceptions.throwIfFatal(e1); RxJavaPlugins.onError(new CompositeException(e, e1)); return; } RxJavaPlugins.onError(e); } } }### Assistant: @Test public void onSubscribeAndDisposeCrashes() { List<Throwable> list = TestHelper.trackPluginErrors(); try { CrashDummy cd = new CrashDummy(true, 1, false, false, true); SafeObserver<Object> so = cd.toSafe(); so.onSubscribe(cd); TestHelper.assertError(list, 0, CompositeException.class); List<Throwable> ce = TestHelper.compositeList(list.get(0)); TestHelper.assertError(ce, 0, TestException.class, \"onSubscribe()\"); TestHelper.assertError(ce, 1, TestException.class, \"dispose()\"); } finally { RxJavaPlugins.reset(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public Span next(TraceContextOrSamplingFlags extracted) { Tracer tracer = tracer(); if (tracer == null) return null; Span next = tracer.nextSpan(extracted); SpanAndScope spanAndScope = new SpanAndScope(next, tracer.withSpanInScope(next)); getCurrentSpanInScopeStack().addFirst(spanAndScope); return next; }### Assistant: @Test public void next() { assertThat(threadLocalSpan.next()) .isEqualTo(threadLocalSpan.remove()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String justifyCenter(String str, final int width, char padWithChar) { str = str != null ? str.trim() : \"\"; int addChars = width - str.length(); if (addChars < 0) { return str.subSequence(0, width).toString(); } int prependNumber = addChars / 2; int appendNumber = prependNumber; if ((prependNumber + appendNumber) != addChars) { ++prependNumber; } final StringBuilder sb = new StringBuilder(); while (prependNumber > 0) { sb.append(padWithChar); --prependNumber; } sb.append(str); while (appendNumber > 0) { sb.append(padWithChar); --appendNumber; } return sb.toString(); }### Assistant: @Test public void justifyCenterShouldTruncateStringsThatAreTooLong() { assertEquals(\"This is the st\", Strings.justifyCenter(\"This is the string\", 14, ' ')); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static File getSessionDirectory(String sessionId) { String dirBase = PropertyUtil.getProperty(SESSION_DIR_BASE_KEY); if (dirBase == null || \"\".equals(dirBase)) { dirBase = File.separator + \"temp\"; } String dirName = getSessionDirectoryName(sessionId); return new File(dirBase + File.separator + dirName); }### Assistant: @Test public void testGetSessionDirectory02() throws Exception { String input = null; try { FileUtil.getSessionDirectory(input); fail(); } catch (NullPointerException e) { return; } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void flush(ChannelHandlerContext ctx) throws Exception { if (readInProgress) { if (++flushPendingCount == explicitFlushAfterFlushes) { flushNow(ctx); } } else if (consolidateWhenNoReadInProgress) { if (++flushPendingCount == explicitFlushAfterFlushes) { flushNow(ctx); } else { scheduleFlush(ctx); } } else { flushNow(ctx); } }### Assistant: @Test public void testFlushViaReadComplete() { final AtomicInteger flushCount = new AtomicInteger(); EmbeddedChannel channel = newChannel(flushCount, false); channel.flush(); channel.runPendingTasks(); assertEquals(1, flushCount.get()); channel.pipeline().fireChannelRead(1L); assertEquals(1, flushCount.get()); channel.pipeline().fireChannelRead(2L); assertEquals(1, flushCount.get()); assertNull(channel.readOutbound()); channel.pipeline().fireChannelReadComplete(); assertEquals(2, flushCount.get()); channel.flush(); channel.runPendingTasks(); assertEquals(3, flushCount.get()); assertEquals(1L, channel.readOutbound()); assertEquals(2L, channel.readOutbound()); assertNull(channel.readOutbound()); assertFalse(channel.finish()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void report(long systemTimeMillis, Table<String, Map<String, String>, Object> collectedData) { if (!enabled) { return; } clientExecutorService.submit(() -> reportClient.report(systemTimeMillis, collectedData)); }### Assistant: @Test public void testSubmit() { ReportQueue reportQueue = new ReportQueue(new ReportClientConfig().setEnabled(true), clientExecutorService, reportClient); reportQueue.report(100, TESTING_METRIC_DATA); verify(clientExecutorService).submit(any(Runnable.class)); verify(reportClient).report(100, TESTING_METRIC_DATA); verifyNoMoreInteractions(reportClient); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TextLayoutBuilder setAlignment(Alignment alignment) { if (mParams.alignment != alignment) { mParams.alignment = alignment; mSavedLayout = null; } return this; }### Assistant: @Test public void testSetAlignment() { mLayout = mBuilder.setAlignment(Layout.Alignment.ALIGN_CENTER).build(); assertEquals(mBuilder.getAlignment(), Layout.Alignment.ALIGN_CENTER); assertEquals(mLayout.getAlignment(), Layout.Alignment.ALIGN_CENTER); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SaveSessionServletOutputStream getOutputStream() throws IOException { if (writer != null) { throw new IllegalStateException(\"Only one of getWriter()/getOutputStream() can be called, and writer is already used.\"); } if (outputStream == null) { outputStream = wrapOutputStream(super.getOutputStream()); } return outputStream; }### Assistant: @Test public void testTwiceStream() throws IOException { SaveSessionServletOutputStream stream1 = responseWrapper.getOutputStream(); SaveSessionServletOutputStream stream2 = responseWrapper.getOutputStream(); assertSame(stream1, stream2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected FluentFuture<? extends CommitInfo> commit(final DOMDataTreeWriteTransaction transaction, final Collection<DOMStoreThreePhaseCommitCohort> cohorts) { checkArgument(transaction != null, \"Transaction must not be null.\"); checkArgument(cohorts != null, \"Cohorts must not be null.\"); LOG.debug(\"Tx: {} is submitted for execution.\", transaction.getIdentifier()); if (cohorts.isEmpty()) { return CommitInfo.emptyFluentFuture(); } final AsyncNotifyingSettableFuture clientSubmitFuture = new AsyncNotifyingSettableFuture(clientFutureCallbackExecutor); doCanCommit(clientSubmitFuture, transaction, cohorts); return FluentFuture.from(clientSubmitFuture).transform(ignored -> CommitInfo.empty(), MoreExecutors.directExecutor()); }### Assistant: @Test public void testSubmitWithOnlyTwoSubTransactions() throws InterruptedException { DOMStore configDomStore = mock(DOMStore.class); DOMStore operationalDomStore = mock(DOMStore.class); DOMStoreReadWriteTransaction operationalTransaction = mock(DOMStoreReadWriteTransaction.class); DOMStoreReadWriteTransaction configTransaction = mock(DOMStoreReadWriteTransaction.class); DOMStoreThreePhaseCommitCohort mockCohortOperational = mock(DOMStoreThreePhaseCommitCohort.class); DOMStoreThreePhaseCommitCohort mockCohortConfig = mock(DOMStoreThreePhaseCommitCohort.class); doReturn(operationalTransaction).when(operationalDomStore).newReadWriteTransaction(); doReturn(configTransaction).when(configDomStore).newReadWriteTransaction(); doReturn(mockCohortOperational).when(operationalTransaction).ready(); doReturn(immediateFalseFluentFuture()).when(mockCohortOperational).canCommit(); doReturn(immediateNullFluentFuture()).when(mockCohortOperational).abort(); doReturn(mockCohortConfig).when(configTransaction).ready(); doReturn(immediateFalseFluentFuture()).when(mockCohortConfig).canCommit(); doReturn(immediateNullFluentFuture()).when(mockCohortConfig).abort(); final CountDownLatch latch = new CountDownLatch(1); final List<DOMStoreThreePhaseCommitCohort> commitCohorts = new ArrayList<>(); try (ConcurrentDOMDataBroker dataBroker = new ConcurrentDOMDataBroker(ImmutableMap.of( LogicalDatastoreType.OPERATIONAL, operationalDomStore, LogicalDatastoreType.CONFIGURATION, configDomStore), futureExecutor) { @Override @SuppressWarnings(\"checkstyle:hiddenField\") public FluentFuture<? extends CommitInfo> commit(DOMDataTreeWriteTransaction writeTx, Collection<DOMStoreThreePhaseCommitCohort> cohorts) { commitCohorts.addAll(cohorts); latch.countDown(); return super.commit(writeTx, cohorts); } }) { DOMDataTreeReadWriteTransaction domDataReadWriteTransaction = dataBroker.newReadWriteTransaction(); domDataReadWriteTransaction.put(LogicalDatastoreType.OPERATIONAL, YangInstanceIdentifier.empty(), mock(NormalizedNode.class)); domDataReadWriteTransaction.merge(LogicalDatastoreType.CONFIGURATION, YangInstanceIdentifier.empty(), mock(NormalizedNode.class)); domDataReadWriteTransaction.commit(); assertTrue(latch.await(10, TimeUnit.SECONDS)); assertTrue(commitCohorts.size() == 2); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void afterJob(JobExecution jobExecution) { List<StepExecution> failedStepExecutions = jobExecution.getStepExecutions() .stream() .filter(stepExecution -> stepExecution.getExitStatus().getExitCode().equals(ExitStatus.FAILED.getExitCode())) .collect(Collectors.toList()); if (failedStepExecutions.size() > 0) { jobExecution.setStatus(BatchStatus.FAILED); jobExecution.setExitStatus(new ExitStatus(\"FAILED-BECAUSE-OF-SKIPS\")); } }### Assistant: @Test public void testAfterJobJobExecutionHasBatchStatusUnchangedWhenAllStepsCompleted() throws Exception { JobExecution jobExecution = new JobExecution(1L); StepExecution completedStepExecution = createStepExecution(jobExecution, COMPLETED); StepExecution anotherStepExecution = createStepExecution(jobExecution, COMPLETED); jobExecution.addStepExecutions(asList(completedStepExecution, anotherStepExecution)); BatchStatus jobExecutionStatus = jobExecution.getStatus(); changeStatusOnFailedStepsJobExecListener.afterJob(jobExecution); assertThat(jobExecution.getStatus()).isEqualTo(jobExecutionStatus); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static URL[] constructUrlsFromClasspath(String classpath) throws MalformedURLException { List<URL> urls = new ArrayList<URL>(); for (String element : classpath.split(File.pathSeparator)) { if (element.endsWith(\"/*\")) { List<Path> jars = FileUtil.getJarsInDirectory(element); if (!jars.isEmpty()) { for (Path jar: jars) { urls.add(jar.toUri().toURL()); } } } else { File file = new File(element); if (file.exists()) { urls.add(new File(element).toURI().toURL()); } } } return urls.toArray(new URL[urls.size()]); }### Assistant: @Test public void testConstructUrlsFromClasspath() throws Exception { File file = new File(testDir, \"file\"); assertTrue(\"Create file\", file.createNewFile()); File dir = new File(testDir, \"dir\"); assertTrue(\"Make dir\", dir.mkdir()); File jarsDir = new File(testDir, \"jarsdir\"); assertTrue(\"Make jarsDir\", jarsDir.mkdir()); File nonJarFile = new File(jarsDir, \"nonjar\"); assertTrue(\"Create non-jar file\", nonJarFile.createNewFile()); File jarFile = new File(jarsDir, \"a.jar\"); assertTrue(\"Create jar file\", jarFile.createNewFile()); File nofile = new File(testDir, \"nofile\"); StringBuilder cp = new StringBuilder(); cp.append(file.getAbsolutePath()).append(File.pathSeparator) .append(dir.getAbsolutePath()).append(File.pathSeparator) .append(jarsDir.getAbsolutePath() + \"/*\").append(File.pathSeparator) .append(nofile.getAbsolutePath()).append(File.pathSeparator) .append(nofile.getAbsolutePath() + \"/*\").append(File.pathSeparator); URL[] urls = constructUrlsFromClasspath(cp.toString()); assertEquals(3, urls.length); assertEquals(file.toURI().toURL(), urls[0]); assertEquals(dir.toURI().toURL(), urls[1]); assertEquals(jarFile.toURI().toURL(), urls[2]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DescriptorValue calculate(IAtom atom, IAtomContainer atomContainer) { IAtomContainer clone; IAtom localAtom; try { clone = (IAtomContainer) atomContainer.clone(); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(clone); if (lpeChecker) { LonePairElectronChecker lpcheck = new LonePairElectronChecker(); lpcheck.saturate(atomContainer); } localAtom = clone.getAtom(atomContainer.indexOf(atom)); } catch (CloneNotSupportedException e) { return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult( Double.NaN), NAMES, null); } catch (CDKException e) { return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult( Double.NaN), NAMES, null); } if (maxIterations != -1 && maxIterations != 0) electronegativity.setMaxIterations(maxIterations); if (maxResonStruc != -1 && maxResonStruc != 0) electronegativity.setMaxResonStruc(maxResonStruc); double result = electronegativity.calculatePiElectronegativity(clone, localAtom); return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(result), NAMES); }### Assistant: @Test public void testPiElectronegativityDescriptor_Fluoroethylene() throws ClassNotFoundException, CDKException, java.lang.Exception { double[] testResult = {4.7796, 5.9414, 5.0507, 0.0, 0.0, 0.0}; IAtomicDescriptor descriptor = new PiElectronegativityDescriptor(); SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer mol = sp.parseSmiles(\"F-C=C\"); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol); addExplicitHydrogens(mol); LonePairElectronChecker lpcheck = new LonePairElectronChecker(); lpcheck.saturate(mol); for (int i = 0; i < 3; i++) { double result = ((DoubleResult) descriptor.calculate(mol.getAtom(i), mol).getValue()).doubleValue(); if (result == 0.0) Assert.assertEquals(testResult[i], result, 0.0001); else { Assert.assertTrue(result != 0.0); Assert.assertEquals(testResult[i], result, 0.7); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int compare(@NotNull File file1, @NotNull File file2) { int c = -Boolean.compare(myDirectories.contains(file1), myDirectories.contains(file2)); if (c != 0) { return c; } String path1 = file1.getAbsolutePath(); String path2 = file2.getAbsolutePath(); Density density1 = pathToDensity(path1 + File.separator); Density density2 = pathToDensity(path2 + File.separator); c = Boolean.compare(density1 != null, density2 != null); if (c != 0) { return c; } if (density1 != null && density2 != null && density1 != density2) { return Integer.compare(density2.getDpiValue(), density1.getDpiValue()); } return path1.compareTo(path2); }### Assistant: @Test public void testContract() { Comparator<File> comparator = new DensityAwareFileComparator(Collections.emptySet()); List<File> files = Arrays.asList( new File(\"/res/mipmap-mdpi\"), new File(\"/res/drawable-hdpi\"), new File(\"/res/mipmap\") ); files.sort(comparator); assertThat(comparator.compare(files.get(0), files.get(1))).isLessThan(0); assertThat(comparator.compare(files.get(1), files.get(2))).isLessThan(0); assertThat(comparator.compare(files.get(0), files.get(2))).isLessThan(0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String convertSql(String orig) { String converted = orig.replaceAll(\"`\", \"\\\"\"); if (!configurer.skipHandleDefault()) { String escapedDefault = SqlDialect.CALCITE .quoteIdentifier(configurer.useUppercaseDefault() ? \"DEFAULT\" : \"default\"); converted = converted.replaceAll(\"(?i)default\\\\.\", escapedDefault + \".\"); converted = converted.replaceAll(\"\\\"(?i)default\\\"\\\\.\", escapedDefault + \".\"); } if (!configurer.skipDefaultConvert()) { try { SqlNode sqlNode = SqlParser.create(converted).parseQuery(); sqlNode = sqlNode.accept(sqlNodeConverter); converted = sqlWriter.format(sqlNode); } catch (Throwable e) { logger.error(\"Failed to default convert sql, will use the input: {}\", orig, e); } finally { sqlWriter.reset(); } } converted = configurer.fixAfterDefaultConvert(converted); return converted; }### Assistant: @Test public void testConvertSqlWithEscape() throws SQLException, SqlParseException { DataSourceDefProvider provider = DataSourceDefProvider.getInstance(); ConvMaster master = new ConvMaster(provider.getDefault(), provider.getById(TEST_TARGET)); SqlConverter converter = new SqlConverter(new SqlConverter.IConfigurer() { @Override public boolean skipDefaultConvert() { return false; } @Override public boolean skipHandleDefault() { return false; } @Override public boolean useUppercaseDefault() { return true; } @Override public String fixAfterDefaultConvert(String orig) { return orig; } @Override public SqlDialect getSqlDialect() { return SqlDialect.CALCITE; } @Override public boolean allowNoOffset() { return true; } @Override public boolean allowFetchNoRows() { return true; } @Override public boolean allowNoOrderByWithFetch() { return true; } @Override public String getPagingType() { return \"AUTO\"; } @Override public boolean isCaseSensitive() { return false; } @Override public boolean enableCache() { return true; } @Override public boolean enableQuote() { return true; } @Override public String fixIdentifierCaseSensitve(String orig) { return orig; } @Override public String getTransactionIsolationLevel() { return null; } }, master); Assert.assertEquals(\"SELECT 1\", converter.convertSql(\"select 1\")); Assert.assertEquals(\"SELECT *\\nFROM \\\"FACT\\\"\", converter.convertSql(\"select * from FACT\")); Assert.assertEquals(\"SELECT 1\\nFETCH NEXT 1 ROWS ONLY\", converter.convertSql(\"SELECT 1 LIMIT 1\")); Assert.assertEquals(\"SELECT 1\\nFETCH NEXT 0 ROWS ONLY\", converter.convertSql(\"SELECT 1 LIMIT 0\")); Assert.assertEquals(\"SELECT 1\\nOFFSET 1 ROWS\\nFETCH NEXT 1 ROWS ONLY\", converter.convertSql(\"SELECT 1 LIMIT 1 OFFSET 1\")); Assert.assertEquals(\"SELECT *\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select * from DEFAULT.FACT\")); Assert.assertEquals(\"SELECT *\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select * from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals(\"SELECT *\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select * from \\\"Default\\\".FACT\")); Assert.assertEquals(\"SELECT *\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select * from \\\"default\\\".FACT\")); Assert.assertEquals(\"SELECT EXTRACT(DOY FROM \\\"PART_DT\\\")\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select DAYOFYEAR(PART_DT) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals( \"SELECT 12 * (EXTRACT(YEAR FROM \\\"DT1\\\") - EXTRACT(YEAR FROM \\\"DT2\\\")) + EXTRACT(MONTH FROM \\\"DT1\\\") - EXTRACT(MONTH FROM \\\"DT2\\\") - \" + \"CASE WHEN EXTRACT(DAY FROM \\\"DT2\\\") > EXTRACT(DAY FROM \\\"DT1\\\") THEN 1 ELSE 0 END\\n\" + \"FROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select TIMESTAMPDIFF(month,DT2, DT1) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals(\"SELECT TRUNC(\\\"ID\\\")\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select cast(ID as INT) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals(\"SELECT 1\\nFROM \\\"A\\\"\\nWHERE 1 BETWEEN ASYMMETRIC 0 AND 2\", converter.convertSql(\"select 1 from a where 1 BETWEEN 0 and 2\")); Assert.assertEquals(\"SELECT \\\"CURRENT_DATE\\\", TEST_CURR_TIME()\", converter.convertSql(\"select CURRENT_DATE, CURRENT_TIME\")); Assert.assertEquals( \"SELECT EXP(AVG(LN(EXTRACT(DOY FROM CAST('2018-03-20' AS DATE)))))\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql( \"select exp(avg(ln(dayofyear(cast('2018-03-20' as date))))) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals( \"SELECT STDDEVP(\\\"C1\\\") OVER (ORDER BY \\\"C1\\\")\\nFROM \\\"TEST_SUITE\\\"\\nFETCH NEXT 1 ROWS ONLY\", converter.convertSql(\"select stddev_pop(c1) over(order by c1) from test_suite limit 1\")); Assert.assertEquals(\"SELECT CAST(\\\"PRICE\\\" AS DOUBLE PRECISION)\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select cast(PRICE as DOUBLE) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals(\"SELECT CAST(\\\"PRICE\\\" AS DECIMAL(19, 4))\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select cast(PRICE as DECIMAL(19,4)) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals(\"SELECT CAST(\\\"PRICE\\\" AS DECIMAL(19))\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select cast(PRICE as DECIMAL(19)) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals(\"SELECT CAST(\\\"BYTE\\\" AS BIT(8))\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select cast(BYTE as BYTE) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals(\"SELECT CAST(\\\"BYTE\\\" AS VARCHAR(1024))\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select cast(BYTE as VARCHAR(1024)) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals(\"SELECT \\\"CURRENT_DATE_1\\\", \\\"CURRENT_TIME_1\\\"\", converter.convertSql(\"select CURRENT_DATE_1, CURRENT_TIME_1\")); Assert.assertEquals(\"SELECT \\\"CURRENT_DATE_1\\\", TEST_CURR_TIME(), \\\"CURRENT_DATE\\\"\", converter.convertSql(\"select CURRENT_DATE_1, CURRENT_TIME, CURRENT_DATE\")); Assert.assertEquals(\"SELECT CAST(\\\"BYTE\\\" AS VAR(1024))\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select cast(BYTE as VAR(1024)) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals(\"SELECT CAST(\\\"PRICE\\\" AS DDD)\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select cast(PRICE as DDD) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals(\"SELECT A(), B(\\\"A\\\"), CAST(\\\"PRICE\\\" AS DDD)\\nFROM \\\"DEFAULT\\\".\\\"FACT\\\"\", converter.convertSql(\"select A(), B(A), cast(PRICE as DDD) from \\\"DEFAULT\\\".\\\"FACT\\\"\")); Assert.assertEquals(\"SELECT ONLY_DEFAULT(1)\", converter.convertSql(\"SELECT ONLY_DEFAULT(1)\")); Assert.assertEquals(\"create table test(id int, price double, name string, value byte)\", converter.convertSql(\"create table test(id int, price double, name string, value byte)\")); Assert.assertEquals(\"select cast(BYTE as VARCHAR(1000000000000)) from \\\"DEFAULT\\\".FACT\", converter.convertSql(\"select cast(BYTE as VARCHAR(1000000000000)) from \\\"DEFAULT\\\".FACT\")); Assert.assertEquals(\"I am not a SQL\", converter.convertSql(\"I am not a SQL\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int nextInt() { return insecureRandom.nextInt(); }### Assistant: @Test @DisplayName(\"Test bounded integer generation\") void nextInt_1() { for (int[] range : new int[][] { { -2, 10 }, { -1, 1 }, { 1, 100 }, { -100, -1 }, { 0, 1 } }) { int min = range[0]; int max = range[1]; for (int i = 0; i < 1000; i++) { int rand = RandUtil.nextInt(min, max); assertTrue(rand >= min); assertTrue(rand <= max); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] publicKeyFromPrivate(BigInteger privKey, boolean compressed) { ECPoint point = CURVE.getG().multiply(privKey); return point.getEncoded(compressed); }### Assistant: @Test public void testPublicKeyFromPrivateCompressed() { byte[] pubFromPriv = ECKey.publicKeyFromPrivate(privateKey, true); assertArrayEquals(compressedPubKey, pubFromPriv); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; JsonApiDocument that = (JsonApiDocument) o; return Objects.equals(links, that.links) && Objects.equals(uriInfo, that.uriInfo) && Objects.equals(data, that.data); }### Assistant: @Test public void testEquals() { setUpUriInfo(); JsonApiDocument result1 = new JsonApiDocument(dummyObj01, uriInfoMock); JsonApiDocument result2 = new JsonApiDocument(dummyObj01, uriInfoMock); JsonApiDocument resultOther = new JsonApiDocument(dummyObj42, uriInfoMock); Assert.assertEquals(result1, result2); Assert.assertNotEquals(resultOther, result1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Coordinate that = (Coordinate) o; return Double.compare(that.latitude, latitude) == 0 && Double.compare(that.longitude, longitude) == 0; }### Assistant: @Test public void testEquals() { Coordinate other = new Coordinate(49.592410, 11.004174); Assert.assertEquals(erlangen, other); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CommandReport execute(ConcurrentMap<String, Object> requestSharedDataContext) throws AmbariException, InterruptedException { String clusterName = getExecutionCommand().getClusterName(); Cluster cluster = m_clusters.getCluster(clusterName); String errMsg = \"\"; String sucessMsg = \"\"; Config rangerAdminconfig = cluster.getDesiredConfigByType(RANGER_ADMIN_SITE_CONFIG_TYPE); if (null == rangerAdminconfig) { return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", MessageFormat.format(\"The {0} configuration was not found; unable to set Ranger configuration properties\", RANGER_ADMIN_SITE_CONFIG_TYPE), \"\"); } Map<String, String> targetValues = rangerAdminconfig.getProperties(); Config hadoopConfig = cluster.getDesiredConfigByType(HADOOP_ENV_CONFIG_TYPE); if (null != hadoopConfig) { String hadoopUser = hadoopConfig.getProperties().get(\"hdfs_user\"); if (null != hadoopUser) { targetValues.put(RANGER_PLUGINS_HDFS_SERVICE_USER, hadoopUser); rangerAdminconfig.setProperties(targetValues); rangerAdminconfig.save(); sucessMsg = sucessMsg + MessageFormat.format(\"{0}\\n\", RANGER_PLUGINS_HDFS_SERVICE_USER); } else { errMsg = errMsg + MessageFormat.format(\"{0} not found in {1}\\n\", \"hdfs_user\", HADOOP_ENV_CONFIG_TYPE); } } else { errMsg = errMsg + MessageFormat.format(\"{0} not found\\n\", HADOOP_ENV_CONFIG_TYPE); } Config hiveConfig = cluster.getDesiredConfigByType(HIVE_ENV_CONFIG_TYPE); if (null != hiveConfig) { String hiveUser = hiveConfig.getProperties().get(\"hive_user\"); if (null != hiveUser) { targetValues.put(RANGER_PLUGINS_HIVE_SERVICE_USER, hiveUser); rangerAdminconfig.setProperties(targetValues); rangerAdminconfig.save(); sucessMsg = sucessMsg + MessageFormat.format(\"{0}\\n\", RANGER_PLUGINS_HIVE_SERVICE_USER); } else { errMsg = errMsg + MessageFormat.format(\"{0} not found in {1}\\n\", \"hive_user\", HIVE_ENV_CONFIG_TYPE); } } else { errMsg = errMsg + MessageFormat.format(\"{0} not found\\n\", HIVE_ENV_CONFIG_TYPE); } Config yarnConfig = cluster.getDesiredConfigByType(YARN_ENV_CONFIG_TYPE); if (null != yarnConfig) { String yarnUser = yarnConfig.getProperties().get(\"yarn_user\"); if (null != yarnUser) { targetValues.put(RANGER_PLUGINS_YARN_SERVICE_USER, yarnUser); rangerAdminconfig.setProperties(targetValues); rangerAdminconfig.save(); sucessMsg = sucessMsg + MessageFormat.format(\"{0}\\n\", RANGER_PLUGINS_YARN_SERVICE_USER); } else { errMsg = errMsg + MessageFormat.format(\"{0} not found in {1}\\n\", \"yarn_user\", YARN_ENV_CONFIG_TYPE); } } else { errMsg = errMsg + MessageFormat.format(\"{0} not found\\n\", YARN_ENV_CONFIG_TYPE); } Config hbaseConfig = cluster.getDesiredConfigByType(HBASE_ENV_CONFIG_TYPE); if (null != hbaseConfig) { String hbaseUser = hbaseConfig.getProperties().get(\"hbase_user\"); if (null != hbaseUser) { targetValues.put(RANGER_PLUGINS_HBASE_SERVICE_USER, hbaseUser); rangerAdminconfig.setProperties(targetValues); rangerAdminconfig.save(); sucessMsg = sucessMsg + MessageFormat.format(\"{0}\\n\", RANGER_PLUGINS_HBASE_SERVICE_USER); } else { errMsg = errMsg + MessageFormat.format(\"{0} not found in {1}\\n\", \"hbase_user\", HBASE_ENV_CONFIG_TYPE); } } else { errMsg = errMsg + MessageFormat.format(\"{0} not found\\n\", HBASE_ENV_CONFIG_TYPE); } Config knoxConfig = cluster.getDesiredConfigByType(KNOX_ENV_CONFIG_TYPE); if (null != knoxConfig) { String knoxUser = knoxConfig.getProperties().get(\"knox_user\"); if (null != knoxUser) { targetValues.put(RANGER_PLUGINS_KNOX_SERVICE_USER, knoxUser); rangerAdminconfig.setProperties(targetValues); rangerAdminconfig.save(); sucessMsg = sucessMsg + MessageFormat.format(\"{0}\\n\", RANGER_PLUGINS_KNOX_SERVICE_USER); } else { errMsg = errMsg + MessageFormat.format(\"{0} not found in {1}\\n\", \"knox_user\", KNOX_ENV_CONFIG_TYPE); } } else { errMsg = errMsg + MessageFormat.format(\"{0} not found\\n\", KNOX_ENV_CONFIG_TYPE); } Config stormConfig = cluster.getDesiredConfigByType(STORM_ENV_CONFIG_TYPE); if (null != stormConfig) { String stormValue = null; String stormUser = stormConfig.getProperties().get(\"storm_user\"); if (cluster.getSecurityType() == SecurityType.KERBEROS) { String stormPrincipal = stormConfig.getProperties().get(\"storm_principal_name\"); if (null != stormPrincipal) { String[] stormPrincipalParts = stormPrincipal.split(\"@\"); if(null != stormPrincipalParts && stormPrincipalParts.length > 1) { String stormPrincipalBareName = stormPrincipalParts[0]; stormValue = stormPrincipalBareName; } } } if (null != stormUser) { if(!StringUtils.isBlank(stormValue)) { stormValue = stormValue + \",\" + stormUser; } else { stormValue = stormUser; } targetValues.put(RANGER_PLUGINS_STORM_SERVICE_USER, stormValue); rangerAdminconfig.setProperties(targetValues); rangerAdminconfig.save(); sucessMsg = sucessMsg + MessageFormat.format(\"{0}\\n\", RANGER_PLUGINS_STORM_SERVICE_USER); } else { errMsg = errMsg + MessageFormat.format(\"{0} not found in {1}\\n\", \"storm_user\", STORM_ENV_CONFIG_TYPE); } } else { errMsg = errMsg + MessageFormat.format(\"{0} not found\\n\", STORM_ENV_CONFIG_TYPE); } Config kafkaConfig = cluster.getDesiredConfigByType(KAFKA_ENV_CONFIG_TYPE); if (null != kafkaConfig) { String kafkaUser = kafkaConfig.getProperties().get(\"kafka_user\"); if (null != kafkaUser) { targetValues.put(RANGER_PLUGINS_KAFKA_SERVICE_USER, kafkaUser); rangerAdminconfig.setProperties(targetValues); rangerAdminconfig.save(); sucessMsg = sucessMsg + MessageFormat.format(\"{0}\\n\", RANGER_PLUGINS_KAFKA_SERVICE_USER); } else { errMsg = errMsg + MessageFormat.format(\"{0} not found in {1}\\n\", \"kafka_user\", KAFKA_ENV_CONFIG_TYPE); } } else { errMsg = errMsg + MessageFormat.format(\"{0} not found\\n\", KAFKA_ENV_CONFIG_TYPE); } Config rangerKmsConfig = cluster.getDesiredConfigByType(RANGER_KMS_ENV_CONFIG_TYPE); if (null != rangerKmsConfig) { String rangerKmsUser = rangerKmsConfig.getProperties().get(\"kms_user\"); if (null != rangerKmsUser) { targetValues.put(RANGER_PLUGINS_KMS_SERVICE_USER, rangerKmsUser); rangerAdminconfig.setProperties(targetValues); rangerAdminconfig.save(); sucessMsg = sucessMsg + MessageFormat.format(\"{0}\\n\", RANGER_PLUGINS_KMS_SERVICE_USER); } else { errMsg = errMsg + MessageFormat.format(\"{0} not found in {1}\\n\", \"kms_user\", RANGER_KMS_ENV_CONFIG_TYPE); } } else { errMsg = errMsg + MessageFormat.format(\"{0} not found\\n\", RANGER_KMS_ENV_CONFIG_TYPE); } if (cluster.getSecurityType() == SecurityType.KERBEROS) { Config hdfsSiteConfig = cluster.getDesiredConfigByType(HDFS_SITE_CONFIG_TYPE); if (null != hdfsSiteConfig) { String spnegoKeytab = hdfsSiteConfig.getProperties().get(\"dfs.web.authentication.kerberos.keytab\"); if (null != spnegoKeytab) { targetValues.put(RANGER_SPNEGO_KEYTAB, spnegoKeytab); rangerAdminconfig.setProperties(targetValues); rangerAdminconfig.save(); sucessMsg = sucessMsg + MessageFormat.format(\"{0}\\n\", RANGER_SPNEGO_KEYTAB); } else { errMsg = errMsg + MessageFormat.format(\"{0} not found in {1}\\n\", \"dfs.web.authentication.kerberos.keytab\", HDFS_SITE_CONFIG_TYPE); } } else { errMsg = errMsg + MessageFormat.format(\"{0} not found \\n\", HDFS_SITE_CONFIG_TYPE); } } String outputMsg = MessageFormat.format(\"Successfully set {0} properties in {1}\", sucessMsg, RANGER_ADMIN_SITE_CONFIG_TYPE); if(!errMsg.equalsIgnoreCase(\"\")) { outputMsg = outputMsg + MessageFormat.format(\"\\n {0}\", errMsg, RANGER_ADMIN_SITE_CONFIG_TYPE); } return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", outputMsg, \"\"); }### Assistant: @Test public void testAction() throws Exception { Map<String, String> commandParams = new HashMap<String, String>(); commandParams.put(\"clusterName\", \"c1\"); ExecutionCommand executionCommand = new ExecutionCommand(); executionCommand.setCommandParams(commandParams); executionCommand.setClusterName(\"c1\"); HostRoleCommand hrc = EasyMock.createMock(HostRoleCommand.class); expect(hrc.getRequestId()).andReturn(1L).anyTimes(); expect(hrc.getStageId()).andReturn(2L).anyTimes(); expect(hrc.getExecutionCommandWrapper()).andReturn(new ExecutionCommandWrapper(executionCommand)).anyTimes(); replay(hrc); RangerKerberosConfigCalculation action = new RangerKerberosConfigCalculation(); m_clusterField.set(action, m_clusters); action.setExecutionCommand(executionCommand); action.setHostRoleCommand(hrc); CommandReport report = action.execute(null); assertNotNull(report); Cluster c = m_clusters.getCluster(\"c1\"); Config config = c.getDesiredConfigByType(\"ranger-admin-site\"); Map<String, String> map = config.getProperties(); assertTrue(map.containsKey(\"ranger.plugins.hdfs.serviceuser\")); assertTrue(map.containsKey(\"ranger.plugins.hive.serviceuser\")); assertTrue(map.containsKey(\"ranger.plugins.yarn.serviceuser\")); assertTrue(map.containsKey(\"ranger.plugins.hbase.serviceuser\")); assertTrue(map.containsKey(\"ranger.plugins.knox.serviceuser\")); assertTrue(map.containsKey(\"ranger.plugins.storm.serviceuser\")); assertTrue(map.containsKey(\"ranger.plugins.kafka.serviceuser\")); assertTrue(map.containsKey(\"ranger.plugins.kms.serviceuser\")); assertTrue(map.containsKey(\"ranger.spnego.kerberos.keytab\")); assertEquals(\"hdfs\", map.get(\"ranger.plugins.hdfs.serviceuser\")); assertEquals(\"hive\", map.get(\"ranger.plugins.hive.serviceuser\")); assertEquals(\"yarn\", map.get(\"ranger.plugins.yarn.serviceuser\")); assertEquals(\"hbase\", map.get(\"ranger.plugins.hbase.serviceuser\")); assertEquals(\"knox\", map.get(\"ranger.plugins.knox.serviceuser\")); assertEquals(\"storm-c1,storm\", map.get(\"ranger.plugins.storm.serviceuser\")); assertEquals(\"kafka\", map.get(\"ranger.plugins.kafka.serviceuser\")); assertEquals(\"kms\", map.get(\"ranger.plugins.kms.serviceuser\")); assertEquals(\"/etc/security/keytabs/spnego.kytab\", map.get(\"ranger.spnego.kerberos.keytab\")); report = action.execute(null); assertNotNull(report); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Object doHandleRequest(MBeanServerConnection server, JmxWriteRequest request) throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException, IOException { try { return setAttribute(request, server); } catch (IntrospectionException exp) { throw new IllegalArgumentException(\"Cannot get info for MBean \" + request.getObjectName() + \": \" +exp,exp); } catch (InvalidAttributeValueException e) { throw new IllegalArgumentException(\"Invalid value \" + request.getValue() + \" for attribute \" + request.getAttributeName() + \", MBean \" + request.getObjectNameAsString(),e); } catch (IllegalAccessException e) { throw new IllegalArgumentException(\"Cannot set value \" + request.getValue() + \" for attribute \" + request.getAttributeName() + \", MBean \" + request.getObjectNameAsString(),e); } catch (InvocationTargetException e) { throw new IllegalArgumentException(\"Cannot set value \" + request.getValue() + \" for attribute \" + request.getAttributeName() + \", MBean \" + request.getObjectNameAsString(),e); } }### Assistant: @Test public void invalidValue() throws Exception { JmxWriteRequest req = new JmxRequestBuilder(WRITE,oName).attribute(\"Boolean\").value(10).build(); handler.doHandleRequest(getMBeanServer(),req); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public long toUnixTimestamp(final UUID uuid) { return (uuid.timestamp() / 10000L) + EPOCH_MILLIS; }### Assistant: @Test public void testTimestamps() throws Exception { final UUID uuid = Generators.timeBasedGenerator().generate(); final long unixTimestamp = uuidUtils.toUnixTimestamp(uuid); final long nowTime = System.currentTimeMillis(); LOG.info(\"UnixMsFromUUID=\" + unixTimestamp + \", nowMs=\" + nowTime + \", delta=\" + (nowTime - unixTimestamp)); final long deltaNowEvent1 = Math.abs(nowTime - unixTimestamp); assertTrue(deltaNowEvent1 <= 5); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static URIBuilder getAMSUriBuilder(String hostname, int port, boolean httpsEnabled) { URIBuilder uriBuilder = new URIBuilder(); uriBuilder.setScheme(httpsEnabled ? \"https\" : \"http\"); uriBuilder.setHost(hostname); uriBuilder.setPort(port); uriBuilder.setPath(\"/ws/v1/timeline/metrics\"); return uriBuilder; }### Assistant: @Test public void testPopulateResourcesForSingleHostMetricPointInTime() throws Exception { setUpCommonMocks(); TestStreamProvider streamProvider = new TestStreamProvider(SINGLE_HOST_METRICS_FILE_PATH); injectCacheEntryFactoryWithStreamProvider(streamProvider); TestMetricHostProvider metricHostProvider = new TestMetricHostProvider(); ComponentSSLConfiguration sslConfiguration = mock(ComponentSSLConfiguration.class); Map<String, Map<String, PropertyInfo>> propertyIds = PropertyHelper.getMetricPropertyIds(Resource.Type.Host); TimelineMetricCacheProvider cacheProviderMock = EasyMock.createMock(TimelineMetricCacheProvider.class); TimelineMetricCache cacheMock = EasyMock.createMock(TimelineMetricCache.class); expect(cacheProviderMock.getTimelineMetricsCache()).andReturn(cacheMock).anyTimes(); AMSPropertyProvider propertyProvider = new AMSHostPropertyProvider( propertyIds, streamProvider, sslConfiguration, cacheProviderMock, metricHostProvider, CLUSTER_NAME_PROPERTY_ID, HOST_NAME_PROPERTY_ID ); Resource resource = new ResourceImpl(Resource.Type.Host); resource.setProperty(CLUSTER_NAME_PROPERTY_ID, \"c1\"); resource.setProperty(HOST_NAME_PROPERTY_ID, \"h1\"); Map<String, TemporalInfo> temporalInfoMap = Collections.emptyMap(); Request request = PropertyHelper.getReadRequest(Collections.singleton(PROPERTY_ID1), temporalInfoMap); Set<Resource> resources = propertyProvider.populateResources(Collections.singleton(resource), request, null); Assert.assertEquals(1, resources.size()); Resource res = resources.iterator().next(); Map<String, Object> properties = PropertyHelper.getProperties(res); Assert.assertNotNull(properties); URIBuilder uriBuilder = AMSPropertyProvider.getAMSUriBuilder(\"localhost\", 6188, false); uriBuilder.addParameter(\"metricNames\", \"cpu_user\"); uriBuilder.addParameter(\"hostname\", \"h1\"); uriBuilder.addParameter(\"appId\", \"HOST\"); Assert.assertEquals(uriBuilder.toString(), streamProvider.getLastSpec()); Double val = (Double) res.getPropertyValue(PROPERTY_ID1); Assert.assertEquals(41.088, val, 0.001); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public JsonValue convertChild(final @NotNull PlexusConfiguration child, final ExpressionEvaluator evaluator) throws ComponentConfigurationException { final Object value = fromExpression(child, evaluator); final String hint = child.getAttribute(\"hint\"); if (hint != null) { switch (hint.toLowerCase()) { case HINT_MAP: return readJsonObjectFromConfig(child, evaluator); case HINT_LIST: return readJsonArrayFromConfig(child, evaluator); case HINT_STRING: return JavaxJson.wrap(String.valueOf(value)); case HINT_NUMBER: return JavaxJson.wrap(readNumberFromValue(child.getName(), value)); case HINT_BOOLEAN: return JavaxJson.wrap(readBooleanFromValue(child.getName(), value)); case HINT_VALUE_LITERAL: return readJsonValueFromValue(child.getName(), value); case HINT_OBJECT_LITERAL: return readJsonObjectFromValue(child.getName(), value); case HINT_ARRAY_LITERAL: return readJsonArrayFromValue(child.getName(), value); default: throw new ComponentConfigurationException(\"Unsupported JSON config hint type for key: \" + child.getName() + \", hint=\" + hint); } } else if (child.getChildCount() > 0) { if (mightBeList(child)) { return readJsonArrayFromConfig(child, evaluator); } else { return readJsonObjectFromConfig(child, evaluator); } } if (value instanceof String) { return JavaxJson.val(stringToValue((String) value)).get(); } return JavaxJson.val(value).get(); }### Assistant: @Test public void testConvertChild_objectLiteral() throws Exception { ExpressionEvaluator eval = mock(ExpressionEvaluator.class); when(eval.evaluate(anyString())).thenAnswer(call -> call.getArgument(0, String.class)); assertEquals(\"json object as object\", key(\"key\", \"value\").get(), converter().convertChild(xml(\"fooObject.xml\", \"jsonobject\"), eval)); assertEquals(\"json object as string\", wrap(\"{\\\"key\\\": \\\"value\\\"}\"), converter().convertChild(xml(\"fooObject.xml\"), eval)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"deprecation\") public void process(final HttpRequest request, final HttpContext context) throws HttpException, IOException { if (request == null) { throw new IllegalArgumentException(\"HTTP request may not be null\"); } if (context == null) { throw new IllegalArgumentException(\"HTTP context may not be null\"); } String method = request.getRequestLine().getMethod(); if (method.equalsIgnoreCase(\"CONNECT\")) { return; } if (request.containsHeader(AUTH.WWW_AUTH_RESP)) { return; } AuthState authState = (AuthState) context.getAttribute( ClientContext.TARGET_AUTH_STATE); if (authState == null) { this.log.debug(\"Target auth state not set in the context\"); return; } AuthScheme authScheme = authState.getAuthScheme(); if (authScheme == null) { return; } Credentials creds = authState.getCredentials(); if (creds == null) { this.log.debug(\"User credentials not available\"); return; } if (authState.getAuthScope() != null || !authScheme.isConnectionBased()) { try { Header header; if (authScheme instanceof ContextAwareAuthScheme) { header = ((ContextAwareAuthScheme) authScheme).authenticate( creds, request, context); } else { header = authScheme.authenticate(creds, request); } request.addHeader(header); } catch (AuthenticationException ex) { if (this.log.isErrorEnabled()) { this.log.error(\"Authentication error: \" + ex.getMessage()); } } } }### Assistant: @Test public void testConnectionBasedAuthOnlyIfChallenged() throws Exception { HttpRequest request = new BasicHttpRequest(\"GET\", \"/\"); HttpContext context = new BasicHttpContext(); AuthState authstate = new AuthState(); BasicScheme authscheme = new BasicScheme() { @Override public boolean isConnectionBased() { return true; } }; BasicHeader challenge = new BasicHeader(AUTH.WWW_AUTH, \"BASIC realm=auth-realm\"); authscheme.processChallenge(challenge); Credentials creds = new UsernamePasswordCredentials(\"user\", \"secret\"); authstate.setAuthScheme(authscheme); authstate.setCredentials(creds); authstate.setAuthScope(null); context.setAttribute(ClientContext.TARGET_AUTH_STATE, authstate); HttpRequestInterceptor interceptor = new RequestTargetAuthentication(); interceptor.process(request, context); Header header = request.getFirstHeader(AUTH.WWW_AUTH_RESP); Assert.assertNull(header); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean release(final List<String> keys, final String storeId, final String token) { final var keysWithStoreIdPrefix = keys.stream().map(key -> storeId + \":\" + key).collect(Collectors.toList()); final var released = stringRedisTemplate.execute(lockReleaseScript, keysWithStoreIdPrefix, token); if (released) { log.debug(\"Release script deleted the record for keys {} with token {} in store {}\", keys, token, storeId); } else { log.error(\"Release script failed for keys {} with token {} in store {}\", keys, token, storeId); } return released; }### Assistant: @Test public void shouldNotReleaseWhenTokenDoesNotFullyMatch() { redisTemplate.opsForValue().set(\"locks:1\", \"def\"); redisTemplate.opsForValue().set(\"locks:2\", \"ghi\"); lock.release(Arrays.asList(\"1\", \"2\"), \"locks\", \"abc\"); assertThat(redisTemplate.opsForValue().get(\"locks:1\")).isEqualTo(\"def\"); assertThat(redisTemplate.opsForValue().get(\"locks:2\")).isEqualTo(\"ghi\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void resetTransientValues(Object zeObject) { if (zeObject != null) { Field[] fields = zeObject.getClass().getDeclaredFields(); for (Field field : fields) { if (Modifier.isTransient(field.getModifiers()) && !field.getName().endsWith(\"jacocoData\")) { Object defaultValue = Defaults.defaultValue(field.getType()); field.setAccessible(true); try { field.set(zeObject, defaultValue); } catch (IllegalArgumentException | IllegalAccessException e) { LOG.error(\"failed to reset the transient field [\" + field + \"] before storage\", e); } } } } }### Assistant: @Test public void testResetTransiantOnDatasetMatadataFavorites() { TransientTestObject obj = new TransientTestObject(); inMemoryDataSetMetadataRepository.resetTransientValues(obj); assertTrue(Defaults.defaultValue(boolean.class).equals(obj.zeBoolean)); assertTrue(Defaults.defaultValue(char.class).equals(obj.zeChar)); assertTrue(Defaults.defaultValue(byte.class).equals(obj.zeByte)); assertTrue(Defaults.defaultValue(short.class).equals(obj.zeShort)); assertTrue(Defaults.defaultValue(int.class).equals(obj.zeInt)); assertTrue(Defaults.defaultValue(float.class).equals(obj.zeFloat)); assertTrue(Defaults.defaultValue(double.class).equals(obj.zeDouble)); assertTrue(obj.zeObject == Defaults.defaultValue(Object.class)); assertTrue(Defaults.defaultValue(boolean.class).equals(TransientTestObject.zeStaticBoolean)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean updateServiceIdentity(String domainName, ServiceIdentity service) { int affectedRows; final String caller = \"updateServiceIdentity\"; String serviceName = ZMSUtils.extractServiceName(domainName, service.getName()); if (serviceName == null) { throw requestError(caller, \"domain name mismatch: \" + domainName + \" update service name: \" + service.getName()); } int domainId = getDomainId(domainName); if (domainId == 0) { throw notFoundError(caller, ZMSConsts.OBJECT_DOMAIN, domainName); } int serviceId = getServiceId(domainId, serviceName); if (serviceId == 0) { throw notFoundError(caller, ZMSConsts.OBJECT_SERVICE, ZMSUtils.serviceResourceName(domainName, serviceName)); } try (PreparedStatement ps = con.prepareStatement(SQL_UPDATE_SERVICE)) { ps.setString(1, processInsertValue(service.getDescription())); ps.setString(2, processInsertValue(service.getProviderEndpoint())); ps.setString(3, processInsertValue(service.getExecutable())); ps.setString(4, processInsertValue(service.getUser())); ps.setString(5, processInsertValue(service.getGroup())); ps.setInt(6, serviceId); affectedRows = executeUpdate(ps, caller); } catch (SQLException ex) { throw sqlError(ex, caller); } return (affectedRows > 0); }### Assistant: @Test public void testUpdateServiceIdentity() throws Exception { JDBCConnection jdbcConn = new JDBCConnection(mockConn, true); ServiceIdentity service = new ServiceIdentity().setName(\"my-domain.service1\"); Mockito.doReturn(1).when(mockPrepStmt).executeUpdate(); Mockito.when(mockResultSet.next()).thenReturn(true); Mockito.when(mockResultSet.getInt(1)).thenReturn(5) .thenReturn(4); boolean requestSuccess = jdbcConn.updateServiceIdentity(\"my-domain\", service); assertTrue(requestSuccess); Mockito.verify(mockPrepStmt, times(1)).setString(1, \"my-domain\"); Mockito.verify(mockPrepStmt, times(1)).setInt(1, 5); Mockito.verify(mockPrepStmt, times(1)).setString(2, \"service1\"); Mockito.verify(mockPrepStmt, times(1)).setString(1, \"\"); Mockito.verify(mockPrepStmt, times(1)).setString(2, \"\"); Mockito.verify(mockPrepStmt, times(1)).setString(3, \"\"); Mockito.verify(mockPrepStmt, times(1)).setString(4, \"\"); Mockito.verify(mockPrepStmt, times(1)).setString(5, \"\"); Mockito.verify(mockPrepStmt, times(1)).setInt(6, 4); jdbcConn.close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String compile(final DataProvider dataProvider, final String template) { final InputStream templateStream = this.getClass().getResourceAsStream(template); return compile(dataProvider, templateStream); }### Assistant: @Test public void testCompilerObjs() throws Exception { Collection<Object> objs = new ArrayList<Object>(); final ObjectDataCompiler converter = new ObjectDataCompiler(); final InputStream templateStream = this.getClass().getResourceAsStream(\"/templates/rule_template_1.drl\"); for (String[] row : rows) { OBJ obj = new OBJ(row); objs.add(obj); } final String drl = converter.compile(objs, templateStream); Assertions.assertThat(EXPECTED_RULES.toString()).isEqualToIgnoringWhitespace(drl); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void uncacheData(T data) { lock.writeLock().lock(); try { if (entries.remove(createEntry(data))) { dataRemovedFromCache(data.getByteSize()); } } finally { lock.writeLock().unlock(); } }### Assistant: @Test public void testUncacheData() { AbstractCacheWrapper uut = new AbstractCacheWrapper(entries, storageAll, 20000, predicate -> true); uut.uncacheData(c0); assertFalse(uut.dataIsInCache(c0.getId())); uut.cacheData(c0); uut.cacheData(c1); uut.cacheData(c2); uut.cacheData(c3); assertTrue(uut.dataIsInCache(c0.getId())); assertTrue(uut.dataIsInCache(c1.getId())); assertTrue(uut.dataIsInCache(c2.getId())); assertTrue(uut.dataIsInCache(c3.getId())); uut.uncacheData(c2); assertTrue(uut.dataIsInCache(c0.getId())); assertTrue(uut.dataIsInCache(c1.getId())); assertFalse(uut.dataIsInCache(c2.getId())); assertTrue(uut.dataIsInCache(c3.getId())); uut.uncacheData(c2); assertTrue(uut.dataIsInCache(c0.getId())); assertTrue(uut.dataIsInCache(c1.getId())); assertFalse(uut.dataIsInCache(c2.getId())); assertTrue(uut.dataIsInCache(c3.getId())); uut.uncacheData(c3); assertTrue(uut.dataIsInCache(c0.getId())); assertTrue(uut.dataIsInCache(c1.getId())); assertFalse(uut.dataIsInCache(c2.getId())); assertFalse(uut.dataIsInCache(c3.getId())); entries.clear(); uut = new AbstractCacheWrapper(entries, storageAll, 2000, predicate -> true); uut.cacheData(c4); uut.uncacheData(c4); assertEquals(0, uut.getCurrentCacheSize()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public RootNode parse(final String input) { return PARSER.parse(input); }### Assistant: @Test(expected = ParserException.class) public void testComparisonLikeWithNumberValue() throws ParserException { parser.parse(\"like(width,123*)\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void cancel() { try { eventSender.send(new Cancel()); } catch (Exception e) { log.error(\"Erroring cancelling\", e); onError(e); } }### Assistant: @Test public void cancel() throws Exception { underTest.cancel(); verify(eventSender).send(new Cancel()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DEREncoder getEncoder() { if (filterComponents.size() == 0) { return new NullType(new ContextDERTag(Type.OR.ordinal(), true)); } else { return new ConstructedDEREncoder( new ContextDERTag(Type.OR.ordinal(), true), filterComponents.stream().map(Filter::getEncoder).toArray(DEREncoder[]::new)); } }### Assistant: @Test(dataProvider = \"component\") public void encode(final OrFilter filter, final byte[] berValue) throws Exception { Assert.assertEquals(filter.getEncoder().encode(), berValue); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public WalletApi create(final hera.keystore.KeyStore keyStore) { return create(keyStore, DEFAULT_TRY_COUNT_AND_INTERVAL); }### Assistant: @Test public void testCreate() { final KeyStore keyStore = new InMemoryKeyStore(); final WalletApiFactory walletApiFactory = new WalletApiFactory(); assertNotNull(walletApiFactory.create(keyStore)); assertNotNull(walletApiFactory.create(keyStore, 3, 100L)); assertNotNull(walletApiFactory.create(keyStore, TryCountAndInterval.of(3, Time.of(100L)))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public StringNode expectStringNode(String errorMessage) { return this; }### Assistant: @Test public void expectStringNodeReturnsStringNode() { Node node = Node.from(\"\"); assertThat(node.expectStringNode(), instanceOf(StringNode.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NamespacePermission(fields = \"#businessObjectDataKey.namespace\", permissions = NamespacePermissionEnum.WRITE) @Override public BusinessObjectData updateBusinessObjectDataRetentionInformation(BusinessObjectDataKey businessObjectDataKey, BusinessObjectDataRetentionInformationUpdateRequest businessObjectDataRetentionInformationUpdateRequest) { businessObjectDataHelper.validateBusinessObjectDataKey(businessObjectDataKey, true, true); Assert.notNull(businessObjectDataRetentionInformationUpdateRequest, \"A business object data retention information update request must be specified.\"); BusinessObjectDataEntity businessObjectDataEntity = businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey); BusinessObjectFormatKey businessObjectFormatKey = new BusinessObjectFormatKey(businessObjectDataKey.getNamespace(), businessObjectDataKey.getBusinessObjectDefinitionName(), businessObjectDataKey.getBusinessObjectFormatUsage(), businessObjectDataKey.getBusinessObjectFormatFileType(), null); BusinessObjectFormatEntity businessObjectFormatEntity = businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(businessObjectFormatKey); if (businessObjectFormatEntity.getRetentionType() == null || !businessObjectFormatEntity.getRetentionType().getCode().equals(RetentionTypeEntity.BDATA_RETENTION_DATE)) { throw new IllegalArgumentException(String .format(\"Retention information with %s retention type must be configured for business object format. Business object format: {%s}\", RetentionTypeEntity.BDATA_RETENTION_DATE, businessObjectFormatHelper.businessObjectFormatKeyToString(businessObjectFormatKey))); } businessObjectDataEntity.setRetentionExpiration(businessObjectDataRetentionInformationUpdateRequest.getRetentionExpirationDate() != null ? new Timestamp(businessObjectDataRetentionInformationUpdateRequest.getRetentionExpirationDate().toGregorianCalendar().getTimeInMillis()) : null); businessObjectDataEntity = businessObjectDataDao.saveAndRefresh(businessObjectDataEntity); return businessObjectDataHelper.createBusinessObjectDataFromEntity(businessObjectDataEntity); }### Assistant: @Test public void testUpdateBusinessObjectDataRetentionInformationBusinessObjectFormatHasInvalidRetentionType() { BusinessObjectDataKey businessObjectDataKey = new BusinessObjectDataKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, SUBPARTITION_VALUES, DATA_VERSION); BusinessObjectDataRetentionInformationUpdateRequest businessObjectDataRetentionInformationUpdateRequest = new BusinessObjectDataRetentionInformationUpdateRequest(RETENTION_EXPIRATION_DATE); BusinessObjectDataEntity businessObjectDataEntity = new BusinessObjectDataEntity(); BusinessObjectFormatKey businessObjectFormatKey = new BusinessObjectFormatKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, NO_FORMAT_VERSION); RetentionTypeEntity retentionTypeEntity = new RetentionTypeEntity(); retentionTypeEntity.setCode(INVALID_VALUE); BusinessObjectFormatEntity businessObjectFormatEntity = new BusinessObjectFormatEntity(); businessObjectFormatEntity.setRetentionType(retentionTypeEntity); when(businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey)).thenReturn(businessObjectDataEntity); when(businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(businessObjectFormatKey)).thenReturn(businessObjectFormatEntity); when(businessObjectFormatHelper.businessObjectFormatKeyToString(businessObjectFormatKey)).thenReturn(BUSINESS_OBJECT_FORMAT_KEY_AS_STRING); try { businessObjectDataServiceImpl .updateBusinessObjectDataRetentionInformation(businessObjectDataKey, businessObjectDataRetentionInformationUpdateRequest); fail(); } catch (IllegalArgumentException e) { assertEquals(String .format(\"Retention information with %s retention type must be configured for business object format. Business object format: {%s}\", RetentionTypeEntity.BDATA_RETENTION_DATE, BUSINESS_OBJECT_FORMAT_KEY_AS_STRING), e.getMessage()); } verify(businessObjectDataHelper).validateBusinessObjectDataKey(businessObjectDataKey, true, true); verify(businessObjectDataDaoHelper).getBusinessObjectDataEntity(businessObjectDataKey); verify(businessObjectFormatDaoHelper).getBusinessObjectFormatEntity(businessObjectFormatKey); verify(businessObjectFormatHelper).businessObjectFormatKeyToString(businessObjectFormatKey); verifyNoMoreInteractionsHelper(); assertNull(businessObjectDataEntity.getRetentionExpiration()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <P> Optional<P> retreive(String eventId, Class<P> target){ Optional<P> payload = Optional.empty(); Optional<BubbleMessage> bubbleMessage = (bubbleCache.getBubble(eventId)); if (bubbleMessage.isPresent()){ AbstractCommand c = commandRepository.findOne(bubbleMessage.get().getCommandId()); try { payload = Optional.of(mapper.readValue(c.getPayload(), target)); } catch (Exception e) { throw new CommandUnmarchelingException(e.getMessage()); } } return payload; }### Assistant: @Test public void testRetreiveWhenCommandExistInDbAndBubbleMessage() throws IOException { final String eventId = \"1234\"; final TestData someData = new TestData(\"test user\", \"20\"); final AbstractCommand command = mock(AbstractCommand.class); String payload = \"{\\\"name\\\":\\\"test user\\\", \\\"age\\\":\\\"20\\\"}\"; BubbleMessage message = mock(BubbleMessage.class); when(command.getPayload()).thenReturn(payload); when(mockBubbleCache.getBubble(eventId)).thenReturn(Optional.of(message)); when(mockCommandRepository.findOne(anyString())).thenReturn(command); when(mockMapper.readValue(payload, TestData.class)).thenReturn(someData); final Optional<TestData> result = commandOrchestratorImplUnderTest.retreive(eventId, TestData.class); assertEquals( Optional.of(someData), result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public boolean hasReadPermission(FactEntity fact) { try { checkReadPermission(fact); return true; } catch (AccessDeniedException | AuthenticationFailedException ignored) { return false; } }### Assistant: @Test public void testHasReadPermissionForObjectRecordReturnsFalseOnNoAccess() throws Exception { ObjectRecord object = mockCheckPermissionForObjectRecord(false); assertFalse(context.hasReadPermission(object)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public E remove(int index) { if (index >= mSize || index + mSize < 0) { throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + mSize); } E ret = mElements.remove(index < 0 ? index + mSize : index); mSize--; return ret; }### Assistant: @Test public void testIllegalRemove() throws Exception { Assertions.assertThrows(IndexOutOfBoundsException.class, () -> { Stack<String> stack = new Stack<String>(); stack.remove(1); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SystemInfoResult getSystemInfo() { try { Tuple2<Optional<Instant>, Optional<Instant>> lastAccessedTimeRange = processingInfoDb.getLastAccessedTimeRange(); SystemInfoResult.Builder builder = SystemInfoResult.builder(getSystemInfoName()) .withDetail(\"Path\", dbDir.toAbsolutePath().toString()) .withDetail(\"Environment max size\", maxSize) .withDetail(\"Environment current size\", ModelStringUtil.formatIECByteSizeString(getEnvironmentDiskUsage())) .withDetail(\"Purge age\", referenceDataConfig.getPurgeAge()) .withDetail(\"Purge cut off\", TimeUtils.durationToThreshold(referenceDataConfig.getPurgeAge()).toString()) .withDetail(\"Max readers\", maxReaders) .withDetail(\"Read-ahead enabled\", referenceDataConfig.isReadAheadEnabled()) .withDetail(\"Current buffer pool size\", byteBufferPool.getCurrentPoolSize()) .withDetail(\"Earliest lastAccessedTime\", lastAccessedTimeRange._1() .map(Instant::toString) .orElse(null)) .withDetail(\"Latest lastAccessedTime\", lastAccessedTimeRange._2() .map(Instant::toString) .orElse(null)); LmdbUtils.doWithReadTxn(lmdbEnvironment, txn -> { builder.withDetail(\"Database entry counts\", databaseMap.entrySet().stream() .collect(HasHealthCheck.buildTreeMapCollector( Map.Entry::getKey, entry -> entry.getValue().getEntryCount(txn)))); }); return builder.build(); } catch (RuntimeException e) { return SystemInfoResult.builder(getSystemInfoName()) .withError(e) .build(); } }### Assistant: @Test void testLoadAndConcurrentGets() { try { Thread.sleep(0); } catch (InterruptedException e) { e.printStackTrace(); } int entryCount = 5; int threads = 6; doBigLoadGetAndPurgeForPerfTesting(entryCount, true, false, false, true); final ExecutorService executorService = Executors.newFixedThreadPool(threads); final List<CompletableFuture<Void>> futures = IntStream.rangeClosed(1, threads) .boxed() .map(i -> { LOGGER.info(\"Creating future {}\", i); return CompletableFuture.runAsync(() -> { LOGGER.info(\"Running load {} on thread {}\", i, Thread.currentThread().getName()); doBigLoadGetAndPurgeForPerfTesting( entryCount, false, true, false, true); }, executorService); }) .collect(Collectors.toList()); futures .forEach(cf -> { try { cf.get(); } catch (InterruptedException | ExecutionException e) { throw new RuntimeException(e); } }); final SystemInfoResult systemInfo = byteBufferPool.getSystemInfo(); LOGGER.info(systemInfo.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean authenticate(HttpServletRequest request) { if (EnvUtil.isRunningOnAppEngine()) { return APPENGINE_PEER.equals(request.getHeader(HEADER_APPENGINE_PEER)); } if (localHostAddresses.contains(request.getRemoteAddr())) { logger.atFine().log(\"Skip endpoints peer verication from localhost.\"); return true; } GoogleIdToken idToken = jwtAuthenticator.verifyToken(request.getHeader(HEADER_PEER_AUTHORIZATION)); if (idToken == null || !SIGNER.equals(idToken.getPayload().getEmail()) || !matchHostAndPort(idToken, request)) { return false; } return true; }### Assistant: @Test public void testAuthenticate_invalidEmail() { payload.setEmail(\"invalid@gmail.com\"); request.addHeader(EndpointsPeerAuthenticator.HEADER_PEER_AUTHORIZATION, FAKE_TOKEN); when(jwtAuthenticator.verifyToken(FAKE_TOKEN)).thenReturn(token); when(token.getPayload()).thenReturn(payload); assertFalse(authenticator.authenticate(request)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ThingModifyCommandAdapter of(final HeaderTranslator headerTranslator) { return new ThingModifyCommandAdapter(requireNonNull(headerTranslator)); }### Assistant: @Test public void deleteAttributeToAdaptable() { final TopicPath topicPath = topicPath(TopicPath.Action.DELETE); final JsonPointer path = JsonPointer.of(\"/attributes\" + TestConstants.ATTRIBUTE_POINTER); final Adaptable expected = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path) .build()) .withHeaders(TestConstants.HEADERS_V_2) .build(); final DeleteAttribute deleteAttribute = DeleteAttribute.of(TestConstants.THING_ID, TestConstants.ATTRIBUTE_POINTER, TestConstants.HEADERS_V_2_NO_CONTENT_TYPE); final Adaptable actual = underTest.toAdaptable(deleteAttribute, channel); assertWithExternalHeadersThat(actual).isEqualTo(expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String printHexBinary(final byte[] deviceMessage) { if (deviceMessage == null) { return null; } final StringBuilder sb = new StringBuilder(deviceMessage.length * 2); for (byte byteValue : deviceMessage) { final int intValue = Byte.toUnsignedInt(byteValue); sb.append(HEX_CODE[intValue >>> 4]); sb.append(HEX_CODE[intValue & 0xf]); } return sb.toString(); }### Assistant: @Test public void printHexBinaryForNull() throws Exception { String result = BeaconContentUtil.printHexBinary(null); assertThat(result).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<Album> getAlbumsWithAtMostThreeTracks(List<Album> input) { return input.stream() .filter(album -> album.getTrackList().size() <= 3) .collect(toList()); }### Assistant: @Test public void findsShortAlbums() { List<Album> input = asList(manyTrackAlbum, sampleShortAlbum, aLoveSupreme); List<Album> result = Question1.getAlbumsWithAtMostThreeTracks(input); assertEquals(asList(sampleShortAlbum, aLoveSupreme), result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Result findInsertionPointAt(@NotNull Point location, @NotNull List<NlComponent> dragged) { return findInsertionPointAt(location, dragged, false); }### Assistant: @Test public void testInsertInEmptyViewGroup() { NlDropInsertionPicker.Result result = myPicker.findInsertionPointAt(new Point(15, 85), myDragged); assertEquals(ourRoot.getChild(3).getChild(1), result.receiver); assertNull(result.nextComponent); assertEquals(1, result.depth); assertEquals(8, result.row); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public String write(@Nullable final Feature feature) { if (feature == null) { return null; } final StringWriter writer = new StringWriter(); try { write(writer, feature); } catch (IOException ioe) { Log.w(TAG, ioe.getMessage()); return null; } return writer.toString(); }### Assistant: @Test public void testWriteFeatureAsPoint() throws Exception { final Feature feature = mock(Feature.class); doReturn(\"id1\").when(feature) .getId(); doReturn(\"Feature\").when(feature) .getType(); doReturn(createPoint(gf, 47.2256258d, -1.5545135d)).when(feature) .getGeometry(); doReturn(new Bundle()).when(feature) .getProperties(); final StringWriter writer = new StringWriter(); geoJsonWriter.write(writer, feature); assertNotNull(writer.toString()); assertEquals(TestHelper.getFixture(\"feature_point.json\"), writer.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: Node createMuteSwitchButton(final Slider volumeSlider) { final Button muteButton = createButton(\"mute\", SPEAKER_ICON, \"mute\", ICON_SIZE / 2d); final Button unmuteButton = createButton(\"unmute\", MUTE_ICON, \"unmute\", ICON_SIZE / 2d); setUpSwitchButton(muteButton); setUpSwitchButton(unmuteButton); final boolean muted = volumeSlider.getValue() == 0; muteButton.setVisible(!muted); unmuteButton.setVisible(muted); if (muted) { beforeMutedValue = Configuration.DEFAULT_VALUE_MUSIC_VOLUME; } else { beforeMutedValue = volumeSlider.getValue(); } muteButton.setOnAction((event) -> { beforeMutedValue = volumeSlider.getValue(); volumeSlider.setValue(0); }); unmuteButton.setOnAction((event) -> volumeSlider.setValue(beforeMutedValue)); volumeSlider.valueProperty().addListener((observable, oldValue, newValue) -> { final boolean localMuted = newValue.doubleValue() == 0; muteButton.setVisible(!localMuted); unmuteButton.setVisible(localMuted); }); return new StackPane(muteButton, unmuteButton); }### Assistant: @Test void shouldShowMuteButtonWhenVolumeIsIncreased() { mockVolumeSlider.setValue(0); StackPane result = (StackPane) musicControl.createMuteSwitchButton(mockVolumeSlider); Button mute = (Button) result.getChildren().get(0); Button unmute = (Button) result.getChildren().get(1); mockVolumeSlider.setValue(0.5); assertFalse(unmute.isVisible()); assertTrue(mute.isVisible()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void reorderByKey(final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset) { Require.nonNull(fileMatcher); Require.nonNull(attachCommentsTo); Require.nonNull(charset); final Reformatter reformatter= new Reformatter( ReformatOptions.create() .with(charset) .with(attachCommentsTo)); final Set<File> propertyFiles= fileMatcher.findMatchingFiles(); LOGGER.log(Level.INFO, \"Reordering entries in the following files: {}\", propertyFiles); propertyFiles.stream().forEach(_f -> { final PropertyFile pf= PropertyFile.from(_f, charset); reformatter.reorderByKey(pf); pf.overwrite(_f, APRON_OPTIONS.with(charset)); }); }### Assistant: @Test public void testReorder_attachCommentToLine() throws IOException { final Path propertiesRootDirectory= this.tmpFolder.getRoot().toPath(); final File f1= createI18nBundle(propertiesRootDirectory, \"\" + \"# Comment 1\\n\" + \"key_F = F\\n\" + \"key_L = L\\n\" + \"\\n\" + \"# Comment 2\\n\" + \"key_B = B\\n\" + \"# Comment 3\\n\" + \"key_A = A\\n\" ); final FileMatcher fileMatcher= new FileMatcher(propertiesRootDirectory, new String[]{\"**/*.properties\"}, new String[]{\"\"}); new KiltReformatter() .reorderByKey(fileMatcher, AttachCommentsTo.ORIG_LINE, UTF_8); assertThat(contentOf(f1)).isEqualTo(\"\" + \"# Comment 1\\n\" + \"key_A = A\\n\" + \"key_B = B\\n\" + \"\\n\" + \"# Comment 2\\n\" + \"key_F = F\\n\" + \"# Comment 3\\n\" + \"key_L = L\\n\" ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public QuantityType<T> subtract(QuantityType<T> state) { return new QuantityType<T>(this.quantity.subtract(state.quantity)); }### Assistant: @Test public void testSubtract() { QuantityType<?> result = new QuantityType<>(\"20 m\").subtract(new QuantityType<>(\"20cm\")); assertThat(result, is(new QuantityType<>(\"19.80 m\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static HttpGet initializeHttpGet(final String url, final Context context) { final HttpGet httpGet = new HttpGet(url); if (getWebViewUserAgent() == null && context != null) { setWebViewUserAgent(new WebView(context).getSettings().getUserAgentString()); } final String webViewUserAgent = getWebViewUserAgent(); if (webViewUserAgent != null) { httpGet.addHeader(USER_AGENT.getKey(), webViewUserAgent); } return httpGet; }### Assistant: @Test public void initializeHttpGet_withNullContext_shouldNotPopulateUserAgentHeader() throws Exception { HttpGet httpGet = initializeHttpGet(url, null); assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url); assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey())).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SafeHtml getSafeHtml( final AuditLogEntry event ) { if ( event instanceof UpdateColumnAuditLogEntry ) { return getSafeHtml( (UpdateColumnAuditLogEntry) event ); } else if ( event instanceof InsertColumnAuditLogEntry ) { return getSafeHtml( (InsertColumnAuditLogEntry) event ); } else if ( event instanceof DeleteColumnAuditLogEntry ) { return getSafeHtml( (DeleteColumnAuditLogEntry) event ); } else if ( event instanceof InsertRowAuditLogEntry ) { return getSafeHtml( (InsertRowAuditLogEntry) event ); } else if ( event instanceof DeleteRowAuditLogEntry ) { return getSafeHtml( (DeleteRowAuditLogEntry) event ); } throw new IllegalArgumentException( \"Unrecognised AuditLogEntry type.\" ); }### Assistant: @Test public void getSafeHtml_Metadata() { MetadataCol52 originalColumn = new MetadataCol52(); originalColumn.setHideColumn(true); originalColumn.setDefaultValue(new DTCellValue52(\"def1\")); originalColumn.setMetadata(\"meta\"); originalColumn.setHeader(\"meta\"); MetadataCol52 newColumn = new MetadataCol52(); newColumn.setHideColumn(false); newColumn.setDefaultValue(new DTCellValue52(\"def2\")); newColumn.setMetadata(\"meta\"); newColumn.setHeader(\"meta\"); List<BaseColumnFieldDiff> diffs = originalColumn.diff(newColumn); SafeHtml result = helper.getSafeHtml(new UpdateColumnAuditLogEntry(\"mock user\", originalColumn, newColumn, diffs)); assertEquals(getHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static ResourceCreated of(final String policyId, final Label label, final Resource resource, final long revision, final DittoHeaders dittoHeaders) { return of(PolicyId.of(policyId), label, resource, revision, dittoHeaders); }### Assistant: @Test(expected = NullPointerException.class) public void tryToCreateInstanceWithNullPolicyId() { ResourceCreated.of((PolicyId) null, TestConstants.Policy.LABEL, TestConstants.Policy.RESOURCE, TestConstants.Policy.REVISION_NUMBER, TestConstants.EMPTY_DITTO_HEADERS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<String> split(final String string, final String delimiter) { if (null == string || null == delimiter) { return null; } final ArrayList<String> words = new ArrayList<String>(); int from = 0; int to = 0; int wordLength = delimiter.length(); while (0 <= (to = string.indexOf(delimiter, from))) { words.add(string.substring(from, to)); from = to + wordLength; } if (from < string.length()) { words.add(string.substring(from)); } return words; }### Assistant: @Test public void testSplitOnString() { final Object[][] testParameters = new Object[][] {{\"2018-06-12\", \"-\", 0, \"2018\"}, {\"2019.07.14\", \".\", 1, \"07\"}, {\"2020/08/16\", \"/\", 2, \"16\"}}; assertNull(StringUtils.split(null, null, -1)); assertNull(StringUtils.split(null, null, 0)); assertNull(StringUtils.split(null, null, 3)); assertNull(StringUtils.split(\"2021_09_18\", null, -1)); assertNull(StringUtils.split(\"2021_09_18\", null, 0)); assertNull(StringUtils.split(\"2021_09_18\", null, 3)); assertNull(StringUtils.split(null, \"_\", -1)); assertNull(StringUtils.split(null, \"_\", 0)); assertNull(StringUtils.split(null, \"_\", 3)); assertNull(StringUtils.split(\"2021_09_18\", \"_\", -1)); assertNull(StringUtils.split(\"2021_09_18\", \"_\", 3)); for (final Object[] testParameter : testParameters) { String expected = (String) testParameter[3]; String string = (String) testParameter[0]; String delimiter = (String) testParameter[1]; int index = (Integer) testParameter[2]; assertEquals(expected, StringUtils.split(string, delimiter, index)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Set<String> doUpdateForClusterCreate() throws ConfigurationTopologyException { Set<String> configTypesUpdated = new HashSet<String>(); Configuration clusterConfig = clusterTopology.getConfiguration(); Map<String, HostGroupInfo> groupInfoMap = clusterTopology.getHostGroupInfo(); doRecommendConfigurations(clusterConfig, configTypesUpdated); doFilterPriorToClusterUpdate(clusterConfig, configTypesUpdated); Map<String, Map<String, String>> clusterProps = clusterConfig.getFullProperties(); for (Map<String, Map<String, PropertyUpdater>> updaterMap : createCollectionOfUpdaters()) { for (Map.Entry<String, Map<String, PropertyUpdater>> entry : updaterMap.entrySet()) { String type = entry.getKey(); for (Map.Entry<String, PropertyUpdater> updaterEntry : entry.getValue().entrySet()) { String propertyName = updaterEntry.getKey(); PropertyUpdater updater = updaterEntry.getValue(); Map<String, String> typeMap = clusterProps.get(type); if (typeMap != null && typeMap.containsKey(propertyName) && typeMap.get(propertyName) != null) { final String originalValue = typeMap.get(propertyName); final String updatedValue = updater.updateForClusterCreate(propertyName, originalValue, clusterProps, clusterTopology); if(updatedValue == null ) { continue; } if (!updatedValue.equals(originalValue)) { configTypesUpdated.add(type); } clusterConfig.setProperty(type, propertyName, updatedValue); } for (HostGroupInfo groupInfo : groupInfoMap.values()) { Configuration hgConfig = groupInfo.getConfiguration(); Map<String, Map<String, String>> hgConfigProps = hgConfig.getFullProperties(1); Map<String, String> hgTypeMap = hgConfigProps.get(type); if (hgTypeMap != null && hgTypeMap.containsKey(propertyName)) { final String originalValue = hgTypeMap.get(propertyName); final String updatedValue = updater.updateForClusterCreate(propertyName, originalValue, hgConfigProps, clusterTopology); if (!updatedValue.equals(originalValue)) { configTypesUpdated.add(type); } hgConfig.setProperty(type, propertyName, updatedValue); } } } } } if (clusterTopology.isNameNodeHAEnabled()) { Map<String, String> hdfsSiteConfig = clusterConfig.getFullProperties().get(\"hdfs-site\"); String nameservices = hdfsSiteConfig.get(\"dfs.nameservices\"); String int_nameservices = hdfsSiteConfig.get(\"dfs.internal.nameservices\"); if(int_nameservices == null && nameservices != null) { clusterConfig.setProperty(\"hdfs-site\", \"dfs.internal.nameservices\", nameservices); } if (! isNameNodeHAInitialActiveNodeSet(clusterProps) && ! isNameNodeHAInitialStandbyNodeSet(clusterProps)) { Collection<String> nnHosts = clusterTopology.getHostAssignmentsForComponent(\"NAMENODE\"); if (nnHosts.size() != 2) { throw new ConfigurationTopologyException(\"NAMENODE HA requires exactly 2 hosts running NAMENODE but there are: \" + nnHosts.size() + \" Hosts: \" + nnHosts); } Iterator<String> nnHostIterator = nnHosts.iterator(); clusterConfig.setProperty(\"hadoop-env\", \"dfs_ha_initial_namenode_active\", nnHostIterator.next()); clusterConfig.setProperty(\"hadoop-env\", \"dfs_ha_initial_namenode_standby\", nnHostIterator.next()); configTypesUpdated.add(\"hadoop-env\"); } } setMissingConfigurations(clusterConfig, configTypesUpdated); trimProperties(clusterConfig, clusterTopology); return configTypesUpdated; }### Assistant: @Test public void testDoUpdateForClusterWithNameNodeHAEnabledSpecifyingHostNamesDirectly() throws Exception { final String expectedNameService = \"mynameservice\"; final String expectedHostName = \"c6401.apache.ambari.org\"; final String expectedHostNameTwo = \"server-two\"; final String expectedPortNum = \"808080\"; final String expectedNodeOne = \"nn1\"; final String expectedNodeTwo = \"nn2\"; final String expectedHostGroupName = \"host_group_1\"; Map<String, Map<String, String>> configProperties = new HashMap<String, Map<String, String>>(); Map<String, String> hdfsSiteProperties = new HashMap<String, String>(); Map<String, String> hbaseSiteProperties = new HashMap<String, String>(); Map<String, String> hadoopEnvProperties = new HashMap<String, String>(); Map<String, String> coreSiteProperties = new HashMap<String, String>(); Map<String, String> accumuloSiteProperties = new HashMap<String, String>(); configProperties.put(\"hdfs-site\", hdfsSiteProperties); configProperties.put(\"hadoop-env\", hadoopEnvProperties); configProperties.put(\"core-site\", coreSiteProperties); configProperties.put(\"hbase-site\", hbaseSiteProperties); configProperties.put(\"accumulo-site\", accumuloSiteProperties); hdfsSiteProperties.put(\"dfs.nameservices\", expectedNameService); hdfsSiteProperties.put(\"dfs.ha.namenodes.mynameservice\", expectedNodeOne + \", \" + expectedNodeTwo); hdfsSiteProperties.put(\"dfs.namenode.https-address.\" + expectedNameService + \".\" + expectedNodeOne, createHostAddress(expectedHostName, expectedPortNum)); hdfsSiteProperties.put(\"dfs.namenode.https-address.\" + expectedNameService + \".\" + expectedNodeTwo, createHostAddress(expectedHostNameTwo, expectedPortNum)); hdfsSiteProperties.put(\"dfs.namenode.http-address.\" + expectedNameService + \".\" + expectedNodeOne, createHostAddress(expectedHostName, expectedPortNum)); hdfsSiteProperties.put(\"dfs.namenode.http-address.\" + expectedNameService + \".\" + expectedNodeTwo, createHostAddress(expectedHostNameTwo, expectedPortNum)); hdfsSiteProperties.put(\"dfs.namenode.rpc-address.\" + expectedNameService + \".\" + expectedNodeOne, createHostAddress(expectedHostName, expectedPortNum)); hdfsSiteProperties.put(\"dfs.namenode.rpc-address.\" + expectedNameService + \".\" + expectedNodeTwo, createHostAddress(expectedHostNameTwo, expectedPortNum)); hdfsSiteProperties.put(\"dfs.secondary.http.address\", \"localhost:8080\"); hdfsSiteProperties.put(\"dfs.namenode.secondary.http-address\", \"localhost:8080\"); coreSiteProperties.put(\"fs.defaultFS\", \"hdfs: hbaseSiteProperties.put(\"hbase.rootdir\", \"hdfs: accumuloSiteProperties.put(\"instance.volumes\", \"hdfs: Configuration clusterConfig = new Configuration(configProperties, Collections.<String, Map<String, Map<String, String>>>emptyMap()); Collection<String> hgComponents = new HashSet<String>(); hgComponents.add(\"NAMENODE\"); TestHostGroup group1 = new TestHostGroup(expectedHostGroupName, hgComponents, Collections.singleton(expectedHostName)); Collection<String> hgComponents2 = new HashSet<String>(); hgComponents2.add(\"NAMENODE\"); TestHostGroup group2 = new TestHostGroup(\"host-group-2\", hgComponents2, Collections.singleton(expectedHostNameTwo)); Collection<TestHostGroup> hostGroups = new HashSet<TestHostGroup>(); hostGroups.add(group1); hostGroups.add(group2); expect(stack.getCardinality(\"NAMENODE\")).andReturn(new Cardinality(\"1-2\")).anyTimes(); expect(stack.getCardinality(\"SECONDARY_NAMENODE\")).andReturn(new Cardinality(\"1\")).anyTimes(); ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups); BlueprintConfigurationProcessor updater = new BlueprintConfigurationProcessor(topology); updater.doUpdateForClusterCreate(); assertEquals(\"dfs.internal.nameservices wasn't added\", expectedNameService, hdfsSiteProperties.get(\"dfs.internal.nameservices\")); assertEquals(\"HTTPS address HA property not properly exported\", expectedHostName + \":\" + expectedPortNum, hdfsSiteProperties.get(\"dfs.namenode.https-address.\" + expectedNameService + \".\" + expectedNodeOne)); assertEquals(\"HTTPS address HA property not properly exported\", expectedHostNameTwo + \":\" + expectedPortNum, hdfsSiteProperties.get(\"dfs.namenode.https-address.\" + expectedNameService + \".\" + expectedNodeTwo)); assertEquals(\"HTTPS address HA property not properly exported\", expectedHostName + \":\" + expectedPortNum, hdfsSiteProperties.get(\"dfs.namenode.http-address.\" + expectedNameService + \".\" + expectedNodeOne)); assertEquals(\"HTTPS address HA property not properly exported\", expectedHostNameTwo + \":\" + expectedPortNum, hdfsSiteProperties.get(\"dfs.namenode.http-address.\" + expectedNameService + \".\" + expectedNodeTwo)); assertEquals(\"HTTPS address HA property not properly exported\", expectedHostName + \":\" + expectedPortNum, hdfsSiteProperties.get(\"dfs.namenode.rpc-address.\" + expectedNameService + \".\" + expectedNodeOne)); assertEquals(\"HTTPS address HA property not properly exported\", expectedHostNameTwo + \":\" + expectedPortNum, hdfsSiteProperties.get(\"dfs.namenode.rpc-address.\" + expectedNameService + \".\" + expectedNodeTwo)); String activeHost = hadoopEnvProperties.get(\"dfs_ha_initial_namenode_active\"); if (activeHost.equals(expectedHostName)) { assertEquals(\"Standby Namenode hostname was not set correctly\", expectedHostNameTwo, hadoopEnvProperties.get(\"dfs_ha_initial_namenode_standby\")); } else if (activeHost.equals(expectedHostNameTwo)) { assertEquals(\"Standby Namenode hostname was not set correctly\", expectedHostName, hadoopEnvProperties.get(\"dfs_ha_initial_namenode_standby\")); } else { fail(\"Active Namenode hostname was not set correctly: \" + activeHost); } assertEquals(\"fs.defaultFS should not be modified by cluster update when NameNode HA is enabled.\", \"hdfs: assertEquals(\"hbase.rootdir should not be modified by cluster update when NameNode HA is enabled.\", \"hdfs: assertEquals(\"instance.volumes should not be modified by cluster update when NameNode HA is enabled.\", \"hdfs: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: IntersectionType intersects(C from, C to) { return intersects(new RangeBoundary<C>(from), new RangeBoundary<C>(to)); }### Assistant: @Test public void shouldReturnBEFOREIntersectionTypeWhenSegmentsIntersectAndOtherSegmentStartsBeforeSegment() { ContinuousSpaceSegment<Integer, String> segment = new ContinuousSpaceSegment<Integer, String>(10, 20, \"A\"); ContinuousSpaceSegment.IntersectionType intersection = segment.intersects(5, 15); assertThat(intersection).isSameAs(ContinuousSpaceSegment.IntersectionType.BEFORE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ImmutableFeatureDefinitionIdentifier ofParsed(final CharSequence featureDefinitionIdentifier) { checkNotNull(featureDefinitionIdentifier, \"CharSequence-representation of the identifier\"); if (featureDefinitionIdentifier instanceof ImmutableFeatureDefinitionIdentifier) { return (ImmutableFeatureDefinitionIdentifier) featureDefinitionIdentifier; } return new ImmutableFeatureDefinitionIdentifier( ImmutableDefinitionIdentifier.ofParsed(featureDefinitionIdentifier) ); }### Assistant: @Test public void tryToParseIdentifierStringWithEmptyNameSegment() { final String invalidString = NAMESPACE + \"::\" + VERSION; assertThatExceptionOfType(DefinitionIdentifierInvalidException.class) .isThrownBy(() -> ImmutableFeatureDefinitionIdentifier.ofParsed(invalidString)) .withMessage(\"Definition identifier <%s> is invalid!\", invalidString) .withNoCause(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException { doGet(req, resp); }### Assistant: @Test public void testDoPostShouldCallDoGet() throws ServletException, IOException { given(urlAccessLogMessageAssembler.assembleMessage(req, MESSAGE)).willReturn(\"something\"); underTest.doPost(req, resp); verify(sequenceHandlingToggle).switchOff(); verify(urlAccessLogMessageAssembler).assembleMessage(req, MESSAGE); verify(logger).info(\"something\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public synchronized LocalEnvironment update( LocalEnvironment environment ) { if ( environment instanceof BazaarEnvironment ) { return environment; } environment = environmentService.merge( environment ); setTransientFields( Sets.<Environment>newHashSet( environment ) ); boolean uploaded = environmentAdapter.uploadEnvironment( environment ); if ( !uploaded ) { environment.markAsNotUploaded(); environment = environmentService.merge( environment ); setTransientFields( Sets.<Environment>newHashSet( environment ) ); } return environment; }### Assistant: @Test public void testUpdate() throws Exception { doReturn( environment ).when( environmentService ).merge( environment ); environmentManager.update( environment ); verify( environmentService, atLeastOnce() ).merge( environment ); BazaarEnvironment bzrEnvironment = mock( BazaarEnvironment.class ); reset( environmentService ); environmentManager.update( bzrEnvironment ); verify( environmentService, never() ).merge( environment ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException { response.setContentType(\"text/html\"); PrintWriter out = response.getWriter(); boolean isMultipartContent = ServletFileUpload.isMultipartContent(request); if (!isMultipartContent) { out.println(\"You are not trying to upload\"); } else { try { List<FileItem> fields = servletFileUpload.parseRequest(request); String msg = multiPartFileParser.parseMultiPartFiles(fields); LOGGER.info(urlAccessLogMessageAssembler.assembleMessage(request, msg)); out.write(msg); } catch (Exception e) { response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); out.write(\"File uploading failed! cause: \" + e.getMessage()); LOGGER.info(urlAccessLogMessageAssembler.assembleMessage(request, e.getMessage()), e); } } }### Assistant: @Test public void testDoGetShouldWriteResopnseWhenGotNotMultiPartRequest() throws ServletException, IOException { given(request.getContentType()).willReturn(\"GET\"); underTest.doGet(request, response); verify(response).setContentType(\"text/html\"); verify(printWriter).println(\"You are not trying to upload\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Iterator<Vector> iterator() { return new ARFFIterator(buff, model); }### Assistant: @Test public void testDense() throws Exception { Iterable<Vector> iterable = readModelFromResource(\"sample-dense.arff\"); Vector firstVector = iterable.iterator().next(); assertEquals(1.0, firstVector.get(0), 0); assertEquals(65.0, firstVector.get(1), 0); assertEquals(1.0, firstVector.get(3), 0); assertEquals(1.0, firstVector.get(4), 0); int count = 0; for (Vector vector : iterable) { assertTrue(\"Vector is not dense\", vector instanceof DenseVector); count++; } assertEquals(5, count); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SecurityFunction createSecurityFunction(SecurityFunctionCreateRequest request) { validateSecurityFunctionCreateRequest(request); SecurityFunctionEntity securityFunctionEntity = securityFunctionDao.getSecurityFunctionByName(request.getSecurityFunctionName()); if (securityFunctionEntity != null) { throw new AlreadyExistsException( String.format(\"Unable to create security function \\\"%s\\\" because it already exists.\", request.getSecurityFunctionName())); } securityFunctionEntity = createSecurityFunctionEntity(request); securityFunctionEntity = securityFunctionDao.saveAndRefresh(securityFunctionEntity); return createSecurityFunctionFromEntity(securityFunctionEntity); }### Assistant: @Test public void testCreateSecurityFunctionAlreadyExists() { expectedException.expect(AlreadyExistsException.class); expectedException.expectMessage(String.format(\"Unable to create security function \\\"%s\\\" because it already exists.\", SECURITY_FUNCTION)); when(securityFunctionDao.getSecurityFunctionByName(SECURITY_FUNCTION)).thenReturn(SECURITY_FUNCTION_ENTITY); when(alternateKeyHelper.validateStringParameter(anyString(), anyString())).thenReturn(SECURITY_FUNCTION); securityFunctionService.createSecurityFunction(SECURITY_FUNCTION_CREATE_REQUEST); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected ControllerServiceDTO updateStateByIdWithRetries(@Nonnull final String id, @Nonnull final String state, final int retries, final int timeout, @Nonnull final TimeUnit timeUnit) { ControllerServiceDTO controllerService = new ControllerServiceDTO(); controllerService.setId(id); controllerService.setState(state); controllerService = update(controllerService); for (int count = 0; isPendingState(controllerService.getState(), state) && count < retries; ++count) { log.debug(\"Waiting for controller service {} to exit pending state {}. Try {} of {}.\", id, controllerService.getState(), count + 1, retries); Uninterruptibles.sleepUninterruptibly(timeout, timeUnit); controllerService = findById(id).orElseThrow(() -> new NifiComponentNotFoundException(id, NifiConstants.NIFI_COMPONENT_TYPE.CONTROLLER_SERVICE, null)); } if (state.equals(controllerService.getState())) { return controllerService; } else { String msg = id; try { final List<BulletinDTO> bulletins = getClient().getBulletins(id); if (!bulletins.isEmpty()) { msg = bulletins.get(0).getMessage(); } } catch (final ClientErrorException e) { } throw new NifiClientRuntimeException(\"Timeout waiting for controller service to be \" + state + \": \" + msg); } }### Assistant: @Test public void updateStateByIdWithRetries() { final ControllerServiceDTO response1 = new ControllerServiceDTO(); response1.setState(\"ENABLING\"); final ControllerServiceDTO response2 = new ControllerServiceDTO(); response2.setState(\"ENABLED\"); final AbstractNiFiControllerServicesRestClient client = Mockito.mock(AbstractNiFiControllerServicesRestClient.class, Mockito.CALLS_REAL_METHODS); Mockito.when(client.update(Mockito.any())).thenReturn(response1); Mockito.when(client.findById(Mockito.anyString())).thenReturn(Optional.of(response2)); Assert.assertEquals(response2, client.updateStateByIdWithRetries(\"MYID\", \"ENABLED\", 1, 0, TimeUnit.NANOSECONDS)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public QueryResponse execute(Query parameter) throws QueryStoreException { parameter.setTable(ElasticsearchUtils.getValidTableName(parameter.getTable())); if (null == parameter.getFilters() || parameter.getFilters().isEmpty()) { parameter.setFilters(Lists.<Filter>newArrayList(new AnyFilter(parameter.getTable()))); } if (null == parameter.getSort()) { ResultSort resultSort = new ResultSort(); resultSort.setField(\"_timestamp\"); resultSort.setOrder(ResultSort.Order.desc); parameter.setSort(resultSort); } SearchRequestBuilder search = null; SearchResponse response; try { search = getConnection().getClient().prepareSearch(ElasticsearchUtils.getIndices(parameter.getTable(), parameter)) .setTypes(ElasticsearchUtils.TYPE_NAME) .setQuery(new ElasticSearchQueryGenerator(FilterCombinerType.and).genFilter(parameter.getFilters())) .setSearchType(SearchType.QUERY_THEN_FETCH) .setFrom(parameter.getFrom()) .setSize(parameter.getLimit()); search.addSort(parameter.getSort().getField(), ResultSort.Order.desc == parameter.getSort().getOrder() ? SortOrder.DESC : SortOrder.ASC); response = search.execute().actionGet(); Vector<String> ids = new Vector<String>(); for (SearchHit searchHit : response.getHits()) { ids.add(searchHit.getId()); } if (ids.isEmpty()) { return new QueryResponse(Collections.<Document>emptyList()); } return new QueryResponse(getQueryStore().get(parameter.getTable(), ids)); } catch (Exception e) { if (null != search) { logger.error(\"Error running generated query: \" + search, e); } else { logger.error(\"Query generation error: \", e); } throw new QueryStoreException(QueryStoreException.ErrorCode.QUERY_EXECUTION_ERROR, \"Error running query: \" + parameter.toString()); } }### Assistant: @Test public void testQueryMultipleFiltersEmptyResult() throws QueryStoreException, JsonProcessingException { Query query = new Query(); query.setTable(TestUtils.TEST_TABLE_NAME); EqualsFilter equalsFilter = new EqualsFilter(); equalsFilter.setField(\"os\"); equalsFilter.setValue(\"android\"); GreaterEqualFilter greaterEqualFilter = new GreaterEqualFilter(); greaterEqualFilter.setField(\"battery\"); greaterEqualFilter.setValue(100); List<Filter> filters = new Vector<Filter>(); filters.add(equalsFilter); filters.add(greaterEqualFilter); query.setFilters(filters); List<Document> documents = new ArrayList<Document>(); QueryResponse actualResponse = QueryResponse.class.cast(queryExecutor.execute(query)); compare(documents, actualResponse.getDocuments()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String toString() { if (!parsed) parseRLP(); toStringBuff.setLength(0); toStringBuff.append(Hex.toHexString(this.rlpEncoded)).append(\"\\n\"); toStringBuff.append(\"BlockData [\\n\"); toStringBuff.append(\"hash=\" + ByteUtil.toHexString(this.getHash())).append(\"\\n\"); toStringBuff.append(header.toString()); for (TransactionReceipt txReceipt : getTxReceiptList()) { toStringBuff.append(\"\\n\"); toStringBuff.append(txReceipt.toString()); } toStringBuff.append(\"\\n]\"); return toStringBuff.toString(); }### Assistant: @Test public void testSingleBalanceTransfer() { byte[] payload = Hex.decode(block_17); Block blockData = new Block(payload); System.out.println(blockData.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean encode(long[] current, long[] next) { int p = permutation.parity(current); if (p != 0) { int q = geometric.parity() * p; if (q > 0) { for (int i : centres) { next[i] = current[i] * ANTICLOCKWISE; } } else if (q < 0) { for (int i : centres) { next[i] = current[i] * CLOCKWISE; } } return true; } return false; }### Assistant: @Test public void testEncode_Anticlockwise_Two() throws Exception { PermutationParity permutation = mock(PermutationParity.class); GeometricParity geometric = mock(GeometricParity.class); when(permutation.parity(any(long[].class))).thenReturn(+1); when(geometric.parity()).thenReturn(+1); StereoEncoder encoder = new GeometryEncoder(new int[]{1, 3}, permutation, geometric); long[] prev = new long[6]; long[] result = new long[6]; Arrays.fill(prev, 1); Arrays.fill(result, 1); assertTrue(encoder.encode(prev, result)); assertThat(result, is(new long[]{1, 15521419, 1, 15521419, 1, 1})); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Prefix prefix(String prefix) { return new Prefix(requireNonNull(prefix)); }### Assistant: @Test public void prefix_toString() { assertThat(prefix(\"foo\").toString()).isEqualTo(\"foo\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidInstanceofChecksInCatchClause\"}) public void doHandle(HttpExchange pExchange) throws IOException { if (requestHandler == null) { throw new IllegalStateException(\"Handler not yet started\"); } JSONAware json = null; URI uri = pExchange.getRequestURI(); ParsedUri parsedUri = new ParsedUri(uri, context); try { InetSocketAddress address = pExchange.getRemoteAddress(); requestHandler.checkAccess(getHostName(address), address.getAddress().getHostAddress(), extractOriginOrReferer(pExchange)); String method = pExchange.getRequestMethod(); validateCallbackIfGiven(parsedUri); if (\"GET\".equalsIgnoreCase(method)) { setHeaders(pExchange); json = executeGetRequest(parsedUri); } else if (\"POST\".equalsIgnoreCase(method)) { setHeaders(pExchange); json = executePostRequest(pExchange, parsedUri); } else if (\"OPTIONS\".equalsIgnoreCase(method)) { performCorsPreflightCheck(pExchange); } else { throw new IllegalArgumentException(\"HTTP Method \" + method + \" is not supported.\"); } } catch (Throwable exp) { json = requestHandler.handleThrowable( exp instanceof RuntimeMBeanException ? ((RuntimeMBeanException) exp).getTargetException() : exp); } finally { sendResponse(pExchange, parsedUri, json); } }### Assistant: @Test(expectedExceptions = IllegalStateException.class,expectedExceptionsMessageRegExp = \".*not.*started.*\") public void handlerNotStarted() throws URISyntaxException, IOException { JolokiaHttpHandler newHandler = new JolokiaHttpHandler(getConfig()); newHandler.doHandle(prepareExchange(\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<String> mergeValues(Class<?> type, String cfg, List<String> def) { List<String> defaults = new ArrayList<String>(); if (def != null) { for (String name : def) { if (ExtensionLoader.getExtensionLoader(type).hasExtension(name)) { defaults.add(name); } } } List<String> names = new ArrayList<String>(); String[] configs = (cfg == null || cfg.trim().length() == 0) ? new String[0] : Constants.COMMA_SPLIT_PATTERN.split(cfg); for (String config : configs) { if (config != null && config.trim().length() > 0) { names.add(config); } } if (!names.contains(Constants.REMOVE_VALUE_PREFIX + Constants.DEFAULT_KEY)) { int i = names.indexOf(Constants.DEFAULT_KEY); if (i > 0) { names.addAll(i, defaults); } else { names.addAll(0, defaults); } names.remove(Constants.DEFAULT_KEY); } else { names.remove(Constants.DEFAULT_KEY); } for (String name : new ArrayList<String>(names)) { if (name.startsWith(Constants.REMOVE_VALUE_PREFIX)) { names.remove(name); names.remove(name.substring(1)); } } return names; }### Assistant: @Test public void testMergeValuesDeleteDefault() { List<String> merged = ConfigUtils.mergeValues(ThreadPool.class, \"-default\", asList(\"fixed\", \"default.limited\", \"cached\")); assertEquals(asList(), merged); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getSelfServiceTokenWithAppRole() { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"getSelfServiceTokenWithAppRole\"). put(LogMessage.MESSAGE, String.format (\"Trying to generate SelfServiceTokenWithAppRole\")). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); String selfServiceToken = null; String role_id = new String(Base64.getDecoder().decode(selfserviceUsername)); String secret_id = new String(Base64.getDecoder().decode(selfservicePassword)); if (ControllerUtil.getSscred() != null) { role_id = new String(Base64.getDecoder().decode(ControllerUtil.getSsUsername())); secret_id = new String(Base64.getDecoder().decode(ControllerUtil.getSsPassword())); } AppRoleIdSecretId approleLogin = new AppRoleIdSecretId(); approleLogin.setRole_id(role_id); approleLogin.setSecret_id(secret_id); String jsonStr = JSONUtil.getJSON(approleLogin); Response response = reqProcessor.process(\"/auth/approle/login\",jsonStr,\"\"); if(HttpStatus.OK.equals(response.getHttpstatus())){ log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"getSelfServiceTokenWithAppRole\"). put(LogMessage.MESSAGE, String.format (\"SelfService token successfully created using AppRole\")). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); String res = response.getResponse(); if (!StringUtils.isEmpty(res)) { LinkedHashMap<String, Object> responseMap = (LinkedHashMap<String, Object>)ControllerUtil.parseJson(response.getResponse()); if (responseMap.get(\"auth\") != null) { selfServiceToken = (String)((LinkedHashMap<String, Object>) responseMap.get(\"auth\")).get(\"client_token\"); } } }else{ log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"getSelfServiceTokenWithAppRole\"). put(LogMessage.MESSAGE, String.format (\"SelfService token failed\")). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); } return selfServiceToken; }### Assistant: @Test public void test_getSelfServiceTokenWithAppRole_sscred_success() throws Exception { String jsonStr = \"{\\\"role_id\\\":\\\"testroleid\\\",\\\"secret_id\\\":\\\"testsecretid\\\"}\"; ReflectionTestUtils.setField(tokenUtils, \"selfserviceUsername\", \"dGVzdGFkbWlu\"); ReflectionTestUtils.setField(tokenUtils, \"selfservicePassword\", \"dGVzdGFkbWlu\"); ReflectionTestUtils.setField(tokenUtils, \"vaultAuthMethod\", \"userpass\"); SSCred sscred = new SSCred(); sscred.setUsername(\"dGVzdGFkbWlu\"); sscred.setPassword(\"dGVzdGFkbWlu\"); ReflectionTestUtils.setField(ControllerUtil.class,\"sscred\", sscred); ReflectionTestUtils.setField(ControllerUtil.class,\"ssUsername\", sscred.getUsername()); ReflectionTestUtils.setField(ControllerUtil.class,\"ssPassword\", sscred.getPassword()); when(JSONUtil.getJSON(Mockito.any())).thenReturn(jsonStr); Response response = getMockResponse(HttpStatus.OK, true, \"{\\n\" + \" \\\"auth\\\": {\\n\" + \" \\\"client_token\\\": \\\"s.6tdd9QSp50YwJwjXViRXGnMQT4\\\",\\n\" + \" \\\"accessor\\\": \\\"7M3bp7PTaOHeB4u2J9zVfE9g\\\",\\n\" + \" \\\"policies\\\": [\\n\" + \" \\\"default\\\",\\n\" + \" \\\"string\\\"\\n\" + \" ],\\n\" + \" \\\"token_policies\\\": [\\n\" + \" \\\"default\\\",\\n\" + \" \\\"string\\\"\\n\" + \" ],\\n\" + \" \\\"metadata\\\": {\\n\" + \" \\\"role_name\\\": \\\"approle\\\"\\n\" + \" },\\n\" + \" \\\"lease_duration\\\": 2764800,\\n\" + \" \\\"renewable\\\": true,\\n\" + \" \\\"entity_id\\\": \\\"5e191de5-7b96-b9cc-71d5-d254b636308b\\\",\\n\" + \" \\\"token_type\\\": \\\"service\\\"\\n\" + \" },\\n\" + \" \\\"data\\\": null,\\n\" + \" \\\"lease_duration\\\": 0,\\n\" + \" \\\"lease_id\\\": \\\"\\\"\\n\" + \"}\"); when(reqProcessor.process(\"/auth/approle/login\",jsonStr,\"\")).thenReturn(response); String token = tokenUtils.getSelfServiceTokenWithAppRole(); assertEquals(\"s.6tdd9QSp50YwJwjXViRXGnMQT4\", token); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String create() { return div(labelProvider.getTitle(analysisResult, !analysisResult.getErrorMessages().isEmpty()), createDescription()) .withId(labelProvider.getId() + \"-summary\") .renderFormatted(); }### Assistant: @Test void shouldHaveCorrectIDsForDivs() { AnalysisResult analysisResult = createAnalysisResult(EMPTY_ORIGINS, 0, 0, EMPTY_ERRORS, 0); String createdHtml = createSummary(analysisResult).create(); assertThat(createdHtml).contains(\"<div id=\\\"test-summary\\\">\"); assertThat(createdHtml).contains(\"id=\\\"test-title\\\"\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public OverloadResult<V> get(String name, List<? extends TPreptimeValue> inputs) { Iterable<? extends ScalarsGroup<V>> scalarsGroup = overloadsRegistry.get(name); if (scalarsGroup == null) { throw new NoSuchFunctionException(name); } return inputBasedResolution(name, inputs, scalarsGroup); }### Assistant: @Test(expected=WrongExpressionArityException.class) public void knownOverloadTooFewParams() { new Initializer().overloads(MUL_INTS).init(); registry.getScalarsResolver().get(MUL_NAME, prepVals(TINT)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Node serialize(Object object) { return serialize(object, Collections.newSetFromMap(new IdentityHashMap<>())); }### Assistant: @Test public void doesNotSerializeTransientValues() { NodeMapper mapper = new NodeMapper(); HasTransient hasTransient = new HasTransient(); hasTransient.setFoo(\"foo\"); hasTransient.setHi(\"hi\"); ObjectNode result = mapper.serialize(hasTransient).expectObjectNode(); Node.assertEquals(result, Node.parse(\"{\\\"hi\\\": \\\"hi\\\"}\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getCode() { return code; }### Assistant: @Test public void testSystemExceptionStringStringThrowable() { SystemException ex = new SystemException(code, msg, cause); assertThat(ex.getCode(), is(code)); assertThat(ex.getMessage(), is(msg)); assertThat(ex.getCause(), is(cause)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void calculateChunkedSumsByteArray(int bytesPerSum, int checksumType, byte[] sums, int sumsOffset, byte[] data, int dataOffset, int dataLength) { nativeComputeChunkedSumsByteArray(bytesPerSum, checksumType, sums, sumsOffset, data, dataOffset, dataLength, \"\", 0, false); }### Assistant: @Test public void testCalculateChunkedSumsByteArrayFail() throws ChecksumException { allocateArrayByteBuffers(); fillDataAndInvalidChecksums(); NativeCrc32.calculateChunkedSumsByteArray(bytesPerChecksum, checksumType.id, checksums.array(), checksums.position(), data.array(), data.position(), data.remaining()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String getSupportedImageFormat(HypervisorType hypervisor) { ImageFormat supportedImageFormat = Hypervisor.HypervisorType.getSupportedImageFormat(hypervisor); if (supportedImageFormat != null) { return supportedImageFormat.name(); } throw new CloudRuntimeException(String.format(\"Could not find a supported image format for hypervisor [%s]\", hypervisor)); }### Assistant: @Test public void getSupportedImageFormatTest() { String result = spy.getSupportedImageFormat(HypervisorType.XenServer); Assert.assertEquals(\"VHD\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean supportsDriver(final String driverClass) { return \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".equals(driverClass); }### Assistant: @Test public void testDriverClassSupport() { assertTrue(FACTORY.supportsDriver(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = STORAGE_UNIT_NOTIFICATIONS_URI_PREFIX, method = RequestMethod.GET) @Secured(SecurityFunctions.FN_STORAGE_UNIT_NOTIFICATION_REGISTRATIONS_BY_NOTIFICATION_FILTER_GET) public StorageUnitNotificationRegistrationKeys getStorageUnitNotificationRegistrationsByNotificationFilter( @RequestParam(value = \"businessObjectDefinitionNamespace\", required = true) String businessObjectDefinitionNamespace, @RequestParam(value = \"businessObjectDefinitionName\", required = true) String businessObjectDefinitionName, @RequestParam(value = \"businessObjectFormatUsage\", required = false) String businessObjectFormatUsage, @RequestParam(value = \"businessObjectFormatFileType\", required = false) String businessObjectFormatFileType, ServletRequest servletRequest) { validateNoDuplicateQueryStringParams(servletRequest.getParameterMap(), \"businessObjectDefinitionNamespace\", \"businessObjectDefinitionName\", \"businessObjectFormatUsage\", \"businessObjectFormatFileType\"); return storageUnitNotificationRegistrationService.getStorageUnitNotificationRegistrationsByNotificationFilter( new StorageUnitNotificationFilter(businessObjectDefinitionNamespace, businessObjectDefinitionName, businessObjectFormatUsage, businessObjectFormatFileType, null, null, null, null)); }### Assistant: @Test public void testGetStorageUnitNotificationRegistrationsByNotificationFilterMissingOptionalParameters() { NotificationRegistrationKey notificationRegistrationKey = new NotificationRegistrationKey(NAMESPACE, NOTIFICATION_NAME); StorageUnitNotificationRegistrationKeys storageUnitNotificationRegistrationKeys = new StorageUnitNotificationRegistrationKeys(Arrays.asList(notificationRegistrationKey)); StorageUnitNotificationFilter storageUnitNotificationFilter = new StorageUnitNotificationFilter(BDEF_NAMESPACE, BDEF_NAME, NO_FORMAT_USAGE_CODE, NO_FORMAT_FILE_TYPE_CODE, null, null, null, null); when(storageUnitNotificationRegistrationService.getStorageUnitNotificationRegistrationsByNotificationFilter(storageUnitNotificationFilter)) .thenReturn(storageUnitNotificationRegistrationKeys); StorageUnitNotificationRegistrationKeys resultStorageUnitNotificationRegistrationKeys = storageUnitNotificationRegistrationRestController .getStorageUnitNotificationRegistrationsByNotificationFilter(BDEF_NAMESPACE, BDEF_NAME, NO_FORMAT_USAGE_CODE, NO_FORMAT_FILE_TYPE_CODE, getServletRequestWithNotificationFilterParameters()); verify(storageUnitNotificationRegistrationService).getStorageUnitNotificationRegistrationsByNotificationFilter(storageUnitNotificationFilter); verifyNoMoreInteractions(storageUnitNotificationRegistrationService); assertEquals(storageUnitNotificationRegistrationKeys, resultStorageUnitNotificationRegistrationKeys); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String getClassNameSection(String className, int section) { int sectionSize = getClassNameSectionSize(className); if (className == null || section <= 0 || section >= sectionSize) { return className; } int index = 0; while (section > 0) { index++; if ('.' == className.charAt(index)) { section--; } } return className.substring(0, index); }### Assistant: @Test public void testGetClassNameSection() { assertThat(XLogUtils.getClassNameSection(\"\", 0), is(\"\")); assertThat(XLogUtils.getClassNameSection(null, 0), nullValue()); assertThat(XLogUtils.getClassNameSection(\"com\", -1), is(\"com\")); assertThat(XLogUtils.getClassNameSection(\"com\", 2), is(\"com\")); assertThat(XLogUtils.getClassNameSection(\"com.promegu\", 1), is(\"com\")); assertThat(XLogUtils.getClassNameSection(\"com.promegu\", 2), is(\"com.promegu\")); assertThat(XLogUtils.getClassNameSection(\"com.promegu.xlog.base\", 2), is(\"com.promegu\")); assertThat(XLogUtils.getClassNameSection(\"com.promegu.xlog.base\", 4), is(\"com.promegu.xlog.base\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public long skip(long n) throws IOException { int bufSize = (int) Math.min(n, SKIP_SIZE); byte[] buf = new byte[bufSize]; long bytesSkipped = 0; int bytesRead = 0; while(bytesSkipped < n && bytesRead != -1) { int len = (int) Math.min(bufSize, n - bytesSkipped); bytesRead = read(buf, 0, len); if(bytesRead != -1) { bytesSkipped += bytesRead; } } return (bytesRead < 0 && bytesSkipped == 0) ? -1 : bytesSkipped; }### Assistant: @Test public void testSkipReadEnd() throws IOException { final int count = 128; TailStream stream = new TailStream(generateStream(0, count), 2 * count); readStream(stream); assertEquals(\"Wrong result\", -1, stream.skip(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void processWatchEvent(WatchEvent<?> event, Kind<?> kind, Path path) { if (kind == ENTRY_CREATE || kind == ENTRY_MODIFY) { File f = path.toFile(); if (!f.isHidden() && f.getName().endsWith(\".cfg\")) { configDispatcher.processConfigFile(f); } } else if (kind == ENTRY_DELETE) { File configFile = path.toFile(); if (configFile.isHidden() || configFile.isDirectory() || !configFile.getName().endsWith(\".cfg\")) { return; } configDispatcher.fileRemoved(configFile.getAbsolutePath()); } }### Assistant: @Test public void nonConfigurationFileModified() { String path = \"myPath\"; configDispatcherFileWatcher.processWatchEvent(null, StandardWatchEventKinds.ENTRY_MODIFY, new File(path).toPath()); verifyNoInteractions(configDispatcher); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<String, Object> toMap() throws IllegalStateException { LinkedHashMap<String, Object> m = new LinkedHashMap<String, Object>(); m.put(\"meta\", meta); m.put(\"notes\", notes); m.put(\"mediaPackage\", mediaPackage); m.put(\"workflow\", workflow); m.put(\"workflowConfig\", workflowConfig); m.put(\"catalogs\", catalogs); m.put(\"failedOperation\", failed); m.put(\"incident\", incidents); return m; }### Assistant: @Test public void testToMap() throws Exception { EmailData emailData = new EmailData(\"data1\", workflowInstance, catalogs, failedOperation, incidents); Map<String, Object> map = emailData.toMap(); Object catalogs = map.get(\"catalogs\"); Assert.assertNotNull(catalogs); Assert.assertTrue(catalogs instanceof HashMap); Object catalogHash = ((HashMap) catalogs).get(\"episode\"); Assert.assertNotNull(catalogHash); Assert.assertTrue(catalogHash instanceof HashMap); Assert.assertEquals(\"Test Media Package\", ((HashMap) catalogHash).get(\"title\")); catalogHash = ((HashMap) catalogs).get(\"series\"); Assert.assertNotNull(catalogHash); Assert.assertTrue(catalogHash instanceof HashMap); Assert.assertEquals(\"20140119997\", ((HashMap) catalogHash).get(\"identifier\")); Object mp = map.get(\"mediaPackage\"); Assert.assertNotNull(mp); Assert.assertTrue(mp instanceof MediaPackage); Assert.assertEquals(\"Test Media Package\", ((MediaPackage) mp).getTitle()); Object wf = map.get(\"workflow\"); Assert.assertNotNull(wf); Assert.assertTrue(wf instanceof WorkflowInstance); Assert.assertEquals(1, ((WorkflowInstance) wf).getId()); Object wfConf = map.get(\"workflowConfig\"); Assert.assertNotNull(wfConf); Assert.assertTrue(wfConf instanceof Map); Assert.assertEquals(\"user@domain.com\", ((Map) wfConf).get(\"emailAddress\")); Object op = map.get(\"failedOperation\"); Assert.assertNotNull(op); Assert.assertTrue(op instanceof WorkflowOperationInstance); Assert.assertEquals(\"operation1\", ((WorkflowOperationInstance) op).getTemplate()); Object inc = map.get(\"incident\"); Assert.assertNotNull(inc); Assert.assertTrue(inc instanceof List); Assert.assertEquals(2, ((List) inc).size()); Assert.assertTrue(((List) inc).contains(incident1)); Assert.assertTrue(((List) inc).contains(incident2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isDisposed() { return get() == DisposableHelper.DISPOSED; }### Assistant: @Test public void onCompleteThrows() { List<Throwable> errors = TestHelper.trackPluginErrors(); try { final List<Object> received = new ArrayList<Object>(); LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() { @Override public void accept(Object v) throws Exception { received.add(v); } }, new Consumer<Throwable>() { @Override public void accept(Throwable e) throws Exception { received.add(e); } }, new Action() { @Override public void run() throws Exception { throw new TestException(); } }, new Consumer<Disposable>() { @Override public void accept(Disposable s) throws Exception { } }); assertFalse(o.isDisposed()); Observable.<Integer>empty().subscribe(o); assertTrue(received.toString(), received.isEmpty()); assertTrue(o.isDisposed()); TestHelper.assertUndeliverable(errors, 0, TestException.class); } finally { RxJavaPlugins.reset(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FilterSupportStatus isFilterSupported(FilterAdapterContext context, FilterList filter) { List<FilterSupportStatus> unsupportedSubfilters = new ArrayList<>(); try (ContextCloseable ignored = context.beginFilterList(filter)) { collectUnsupportedStatuses(context, filter, unsupportedSubfilters); } if (unsupportedSubfilters.isEmpty()) { return FilterSupportStatus.SUPPORTED; } else { return FilterSupportStatus.newCompositeNotSupported(unsupportedSubfilters); } }### Assistant: @Test public void collectUnsupportedStatusesStartsANewContext() { FilterListAdapter filterListAdapter = new FilterListAdapter( new FilterAdapter() { @Override public void collectUnsupportedStatuses( FilterAdapterContext context, Filter filter, List<FilterSupportStatus> statuses) { Assert.assertEquals( \"FilterListDepth should be incremented in isFilterSupported.\", 1, context.getFilterListDepth()); statuses.add(FilterSupportStatus.newNotSupported(\"Test\")); } }); Assert.assertEquals(\"Initial depth should be 0.\", 0, emptyScanContext.getFilterListDepth()); FilterList filterList = makeFilterList(Operator.MUST_PASS_ALL); FilterSupportStatus status = filterListAdapter.isFilterSupported(emptyScanContext, filterList); Assert.assertFalse( \"collectUnsupportedStatuses should have been invoked returning unsupported statuses.\", status.isSupported()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Bundle> getBundles() { return bundles; }### Assistant: @Test public void testRemoveLicensesAuth() throws Exception { new NonStrictExpectations(authorizeService.getClass()) {{ authorizeService.authorizeAction((Context) any, (Item) any, Constants.ADD); result = null; authorizeService.authorizeAction((Context) any, (Item) any, Constants.REMOVE); result = null; authorizeService.authorizeAction((Context) any, (Item) any, Constants.WRITE); result = null; authorizeService.authorizeAction(context, (Bitstream) any, Constants.DELETE); result = null; }}; String name = \"LICENSE\"; Bundle created = bundleService.create(context, it, name); created.setName(context, name); String bsname = \"License\"; File f = new File(testProps.get(\"test.bitstream\").toString()); Bitstream result = itemService.createSingleBitstream(context, new FileInputStream(f), it, bsname); bitstreamService.setFormat(context, result, bitstreamFormatService.findByShortDescription(context, bsname)); bundleService.addBitstream(context, created, result); itemService.removeLicenses(context, it); assertThat(\"testRemoveLicensesAuth 0\", itemService.getBundles(it, name), notNullValue()); assertTrue(\"testRemoveLicensesAuth 1\", itemService.getBundles(it, name).size() == 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected static String[] extractTargetVars(String command, String valueName) { String[] targetVars = new String[] {}; int valueIndex = command.indexOf(valueName); if (valueIndex > -1) { String subCmd = command.substring(0, valueIndex).toLowerCase(); int valuesIndex = subCmd.lastIndexOf(VALUES_KEYWORD); int openBracesIndex = subCmd.lastIndexOf(\"{\"); int closeBracesIndex = subCmd.lastIndexOf(\"}\"); if (valuesIndex > -1 && valuesIndex < openBracesIndex && closeBracesIndex < valuesIndex) { String vars = command.substring(valuesIndex + VALUES_KEYWORD.length(), openBracesIndex); targetVars = vars.replaceAll(\"[(?$)]\", \"\").trim().split(\" \"); } } return targetVars; }### Assistant: @Test public void test_extract_target_vars_missing_target() { String cmd = \"SELECT * WHERE { VALUES ?o {} ?s ?p ?o }\"; String valueName = \"objs\"; String[] res = ParameterizedSparqlString.extractTargetVars(cmd, valueName); String[] exp = new String[]{}; Assert.assertArrayEquals(exp, res); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String toMethodInfo(String confirmMethod, String cancelMethod) { return \"confirm=\" + confirmMethod + \",cancel=\" + cancelMethod; }### Assistant: @Test public void getMethodInfo() { assertThat(EventConverter.toMethodInfo(\"test1\", \"test2\"), is(\"confirm=test1,cancel=test2\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static int determineSectionSize(int indexOfRowDimension, Variable variable) { int size = 1; for (int i = indexOfRowDimension; i < variable.getDimensions().size(); i++) { size *= variable.getDimension(i).getLength(); } return size; }### Assistant: @Test public void testDetermineSectionSize() throws IOException, URISyntaxException { final File f1_BT_io_file = getSecondNcFile(\"F1_BT_io.nc\"); final NetcdfFile f1_BT_io_netcdfFile = NetcdfFileOpener.open(f1_BT_io_file); assertNotNull(f1_BT_io_netcdfFile); final Variable f1_BT_io_variable = f1_BT_io_netcdfFile.getVariables().get(0); assertEquals(1800000, NcFileStitcher.determineSectionSize(0, f1_BT_io_variable)); final File met_tx_file = getFirstNcFile(\"met_tx.nc\"); final NetcdfFile met_tx_netcdfFile = NetcdfFileOpener.open(met_tx_file); assertNotNull(met_tx_netcdfFile); final Variable u_wind_tx_variable = met_tx_netcdfFile.getVariables().get(11); assertEquals(260000, NcFileStitcher.determineSectionSize(2, u_wind_tx_variable)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean accepts(Class<? extends IChemObject> classObject) { if (IAtomContainer.class.equals(classObject)) return true; Class<?>[] interfaces = classObject.getInterfaces(); for (Class<?> anInterface : interfaces) { if (IAtomContainer.class.equals(anInterface)) return true; } Class superClass = classObject.getSuperclass(); if (superClass != null) return this.accepts(superClass); return false; }### Assistant: @Test public void testAccepts() throws Exception { Mol2Writer writer = new Mol2Writer(); Assert.assertTrue(writer.accepts(AtomContainer.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ByteArrayValueMapper getMapper(String mapperType) { if (\"int\".equals(mapperType)) { return INT_MAPPER; } else if (\"long\".equals(mapperType)) { return LONG_MAPPER; } else if (\"string\".equals(mapperType)) { return STRING_MAPPER; } else if (\"boolean\".equals(mapperType)) { return BOOLEAN_MAPPER; } else if (\"float\".equals(mapperType)) { return FLOAT_MAPPER; } else if (\"double\".equals(mapperType)) { return DOUBLE_MAPPER; } else if (\"short\".equals(mapperType)) { return SHORT_MAPPER; } else if (\"bigdecimal\".equals(mapperType)) { return BIG_DECIMAL_MAPPER; } else { return instantiateCustomMapper(mapperType); } }### Assistant: @Test public void testGetValueMapper_Float() { ByteArrayValueMapper mapper = ByteArrayValueMappers.getMapper(\"float\"); assertEquals(Lists.newArrayList(4.2f), mapper.map(Bytes.toBytes(4.2f))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String and(String... subqueries) { return junction(SolrOperator.AND, subqueries); }### Assistant: @Test public void and_one() { String q1 = \"test this\"; assertEquals(q1, translator.and(q1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void checkArgument(boolean expression, String errorMessageTemplate, Object... errorMessageArgs) { if (!expression) { throw new IllegalArgumentException( format(errorMessageTemplate, errorMessageArgs)); } }### Assistant: @Test public void checkArgumentInputFalseNotNullNullOutputIllegalArgumentException() { final boolean expression = false; final String errorMessageTemplate = \"\"; final Object[] errorMessageArgs = null; thrown.expect(IllegalArgumentException.class); Util.checkArgument(expression, errorMessageTemplate, errorMessageArgs); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void lock() { final Vpc vpcLock = vpcDao.acquireInLockTable(vpc.getId()); if (vpcLock == null) { throw new ConcurrentOperationException(\"Unable to lock vpc \" + vpc.getId()); } tableLockId = vpcLock.getId(); }### Assistant: @Test public void testLock() { when(mockVpcDao.acquireInLockTable(VPC_ID)).thenReturn(mockVpc); deployment.lock(); verify(mockVpcDao, times(1)).acquireInLockTable(VPC_ID); assertNotNull(LOCK_NOT_CORRECTLY_GOT, deployment.tableLockId); assertEquals(LOCK_NOT_CORRECTLY_GOT, VPC_ID, deployment.tableLockId.longValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void replace(char[] input) { validateInput(input); char[] result = new char[input.length]; for (int i = 0, j = 0; i < input.length && j < input.length; i++, j++) { if (input[i] == ' ') { result[j++] = '%'; result[j++] = '2'; result[j] = '0'; } else { result[j] = input[i]; } } copyArray(result, input); }### Assistant: @Test public void shouldReplaceAllTheContentIfTheArrayIsFullOfSpaces() { char[] input = new char[6]; input[0] = ' '; input[1] = ' '; replaceSpaces.replace(input); assertArrayEquals(new char[] { '%', '2', '0', '%', '2', '0' }, input); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void merge( final DocumentProperty existing, final Document proposed, final DocumentConstructor constructor) { requireNonNull(existing); requireNonNull(proposed); requireNonNull(constructor); proposed.getData().entrySet() .forEach(entry -> handleEntry(existing, proposed, constructor, entry)); }### Assistant: @Test void testMergeSimple() { Project newProject = createFromJson( \"{\\\"config\\\":{\" + \"\\\"name\\\":\\\"TestProject\\\",\" + \"\\\"dbmses\\\":[{\" + \"\\\"name\\\":\\\"TestDbms\\\",\" + \"\\\"schemas\\\":[{\" + \"\\\"name\\\":\\\"TestSchema\\\",\" + \"\\\"alias\\\":\\\"NewTestSchema\\\",\" + \"\\\"tables\\\":[{\" + \"\\\"name\\\":\\\"TestTable1\\\",\" + \"\\\"columns\\\":[{\" + \"\\\"name\\\":\\\"TestTable1Column3\\\",\" + \"\\\"databaseType\\\":\\\"double\\\"\" + \"}]\" + \"}]\" + \"}]\" + \"}]\" + \"}}\" ); DocumentPropertyComponent docProps = new DocumentPropertyComponentImpl(); project.merge(docProps, newProject); assertEquals(\"TestProject\", project.getName()); assertEquals(\"TestDbms\", dbms.getName()); assertEquals(\"TestSchema\", schema.getName()); assertEquals(\"NewTestSchema\", schema.getAlias().orElse(schema.getName())); assertEquals(\"TestTable1\", table1.getName()); assertEquals(\"TestTable1Column1\", table1Column1.getName()); assertEquals(\"TestTable1Column2\", table1Column2.getName()); assertEquals(\"TestTable1Column3\", table1Column3.getName()); assertEquals(\"int\", table1Column1.getDatabaseType()); assertEquals(\"java.lang.String\", table1Column2.getDatabaseType()); assertEquals(\"double\", table1Column3.getDatabaseType()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @SuppressWarnings(\"rawtypes\") public Key resolveSigningKey(JwsHeader header, Claims claims) { String keyId = header.getKeyId(); if (keyId == null || keyId.isEmpty()) { if (LOG.isDebugEnabled()) { LOG.debug(\"KeyStoreJwkKeyResolver:resolveSigningKey: invalid key ID \" + keyId); } return null; } String issuer = claims.getIssuer(); if (this.keyStore != null && issuer != null && !issuer.isEmpty()) { String[] ds = AthenzUtils.splitPrincipalName(issuer); if (ds == null) { if (LOG.isDebugEnabled()) { LOG.debug(\"KeyStoreJwkKeyResolver:resolveSigningKey: skip using KeyStore, invalid issuer \" + issuer); } } else { String domain = ds[0]; String service = ds[1]; if (!SYS_AUTH_DOMAIN.equals(domain)) { LOG.debug(\"KeyStoreJwkKeyResolver:resolveSigningKey: skip using KeyStore, invalid domain \" + domain); } else { String publicKey = this.keyStore.getPublicKey(domain, service, keyId); if (publicKey != null && !publicKey.isEmpty()) { try { if (LOG.isDebugEnabled()) { LOG.debug(\"KeyStoreJwkKeyResolver:resolveSigningKey: will use public key from key store: ({}, {}, {})\", domain, service, keyId); } return Crypto.loadPublicKey(publicKey); } catch (Throwable t) { LOG.warn(\"KeyStoreJwkKeyResolver:resolveSigningKey: invalid public key format\", t); } } } } } if (LOG.isDebugEnabled()) { LOG.debug(\"KeyStoreJwkKeyResolver:resolveSigningKey: will use public key from JWKS: ({})\", keyId); } return this.jwksResolver.resolveSigningKey(header, claims); }### Assistant: @Test public void testResolveSigningKey() throws Exception { KeyStore keyStoreMock = Mockito.spy(baseKeyStore); SigningKeyResolver jwksResolverMock = Mockito.spy(basejwksResolver); KeyStoreJwkKeyResolver resolver = new KeyStoreJwkKeyResolver(null, \"file: Field keyStoreField = resolver.getClass().getDeclaredField(\"keyStore\"); keyStoreField.setAccessible(true); Field providerField = resolver.getClass().getDeclaredField(\"jwksResolver\"); providerField.setAccessible(true); providerField.set(resolver, jwksResolverMock); DefaultJwsHeader jwsHeader = new DefaultJwsHeader(); DefaultClaims claims = new DefaultClaims(); PublicKey pk11 = Mockito.spy(basePublicKey); Mockito.when(jwksResolverMock.resolveSigningKey(jwsHeader, claims)).thenReturn(pk11); jwsHeader.setKeyId(\"11\"); claims.setIssuer(null); assertSame(resolver.resolveSigningKey(jwsHeader, claims), pk11); keyStoreField.set(resolver, keyStoreMock); PublicKey pk21 = Mockito.spy(basePublicKey); Mockito.when(jwksResolverMock.resolveSigningKey(jwsHeader, claims)).thenReturn(pk21); jwsHeader.setKeyId(\"21\"); claims.setIssuer(null); assertSame(resolver.resolveSigningKey(jwsHeader, claims), pk21); PublicKey pk22 = Mockito.spy(basePublicKey); Mockito.when(jwksResolverMock.resolveSigningKey(jwsHeader, claims)).thenReturn(pk22); jwsHeader.setKeyId(\"22\"); claims.setIssuer(\"\"); assertSame(resolver.resolveSigningKey(jwsHeader, claims), pk22); PublicKey pk23 = Mockito.spy(basePublicKey); Mockito.when(jwksResolverMock.resolveSigningKey(jwsHeader, claims)).thenReturn(pk23); jwsHeader.setKeyId(\"23\"); claims.setIssuer(\"domain23-----service23\"); assertSame(resolver.resolveSigningKey(jwsHeader, claims), pk23); PublicKey pk24 = Mockito.spy(basePublicKey); Mockito.when(jwksResolverMock.resolveSigningKey(jwsHeader, claims)).thenReturn(pk24); jwsHeader.setKeyId(\"24\"); claims.setIssuer(\"domain24.service24\"); assertSame(resolver.resolveSigningKey(jwsHeader, claims), pk24); PublicKey pk31 = null; try (PemReader reader = new PemReader(new FileReader(this.classLoader.getResource(\"jwt_public.key\").getFile()))) { pk31 = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(reader.readPemObject().getContent())); } Mockito.when(jwksResolverMock.resolveSigningKey(jwsHeader, claims)).thenReturn(pk31); Mockito.when(keyStoreMock.getPublicKey(\"sys.auth\", \"service31\", \"31\")).thenReturn(\"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAy3c3TEePZZPaxqNU2xV4\\nortsXrw1EXTNQj2QUgL8UOPaQS0lbHJtD1cbcCFnzfXRXTOGqh8l+XWTRIOlt4yU\\n+mEhgR0/JKILTPwmS0fj3D1PT6IjZShuNyd4USVdcjfCRBRb9ExIptJyeTTUu0Uu\\njWNEcGOWAkUZcsonmiEz7bIMVkGy5uYnWGbsKP51Zf/PFMb96RcHeE0ZUitIB4YK\\n1bgHLyAEBJIka5mRC/jWq/mlq3jiP5RaVWbzQiJbrjuYWd1Vps/xnrABx6/4Ft/M\\n0AnSQN0SYjc/nWT1yGPpCwtWmWUU5NNHd+w6TdgOjdu00wownwblovtEYED+rncb\\n913qfBM98kNHyj357BSzlvhiwEH5Ayo9DTnx1j9HuJGZXzymVypuQXLu/tkHMEt+\\nc4kytKJNi6MLiauy9xtXGLXgOvZUM8V0Z27Z6CTfCzWZ0nwnEWDdH+NJyusL6pJg\\nEGUBh6E9fdJInV7YOCF+P9/19imPHrZ0blTXK1TDfKS/pCLOXO/OmmH+p+UxQ77O\\npeP5wlt5Jem0ErSisl/Qxhh1OtJcLwFdA7uC7rOTMrSEGLO++5+CatsXj7BEK2l+\\n3As8fJEkoWXd1+4KOUMfV/fnT/z6U8+bcsYn0nvWPl8XuMbwNWjqHYgqhl1RLA7M\\n17HCydWCF50HI2XojtGgRN0CAwEAAQ==\\n-----END PUBLIC KEY-----\\n\"); jwsHeader.setKeyId(\"31\"); claims.setIssuer(\"sys.auth.service31\"); assertEquals(resolver.resolveSigningKey(jwsHeader, claims), pk31); PublicKey pk32 = Mockito.spy(basePublicKey); Mockito.when(jwksResolverMock.resolveSigningKey(jwsHeader, claims)).thenReturn(pk32); Mockito.when(keyStoreMock.getPublicKey(\"sys.auth\", \"service32\", \"32\")).thenReturn(null); jwsHeader.setKeyId(\"32\"); claims.setIssuer(\"sys.auth.service32\"); assertSame(resolver.resolveSigningKey(jwsHeader, claims), pk32); PublicKey pk33 = Mockito.spy(basePublicKey); Mockito.when(jwksResolverMock.resolveSigningKey(jwsHeader, claims)).thenReturn(pk33); Mockito.when(keyStoreMock.getPublicKey(\"sys.auth\", \"service33\", \"33\")).thenReturn(\"\"); jwsHeader.setKeyId(\"33\"); claims.setIssuer(\"sys.auth.service33\"); assertSame(resolver.resolveSigningKey(jwsHeader, claims), pk33); PublicKey pk34 = Mockito.spy(basePublicKey); Mockito.when(jwksResolverMock.resolveSigningKey(jwsHeader, claims)).thenReturn(pk34); Mockito.when(keyStoreMock.getPublicKey(\"sys.auth\", \"service34\", \"34\")).thenReturn(\"-----BEGIN PUBLIC KEY-----\\ninvalid\\n-----END PUBLIC KEY-----\\n\"); jwsHeader.setKeyId(\"34\"); claims.setIssuer(\"sys.auth.service34\"); assertSame(resolver.resolveSigningKey(jwsHeader, claims), pk34); jwsHeader.setKeyId(\"41\"); claims.setIssuer(\"sys.auth.service41\"); Mockito.when(jwksResolverMock.resolveSigningKey(jwsHeader, claims)).thenReturn(null); Mockito.when(keyStoreMock.getPublicKey(\"sys.auth\", \"service41\", \"41\")).thenReturn(null); assertNull(resolver.resolveSigningKey(jwsHeader, claims)); jwsHeader.setKeyId(null); claims.setIssuer(null); assertNull(resolver.resolveSigningKey(jwsHeader, claims)); jwsHeader.setKeyId(\"\"); claims.setIssuer(null); assertNull(resolver.resolveSigningKey(jwsHeader, claims)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public static <U> CompletableFuture<Boolean> majorityResponse(@Nonnull List<? extends CompletableFuture<U>> responses, @Nonnull Predicate<U> isSuccess) { CompletableFuture<Boolean> future = new CompletableFuture<>(); MajorityCollector<U> collector = new MajorityCollector<>(responses.size(), isSuccess, future); for (CompletableFuture<U> response : responses) { response.handle(collector); } if (responses.isEmpty()) { collector.checkComplete(); } return future; }### Assistant: @Test public void testFireOnceMajoritySuccess() { CompletableFuture<Boolean> f1 = new CompletableFuture<>(); CompletableFuture<Boolean> f2 = new CompletableFuture<>(); CompletableFuture<Boolean> f3 = new CompletableFuture<>(); List<CompletableFuture<Boolean>> responses = Lists.newArrayList( f1, f2, f3 ); CompletableFuture<Boolean> collector = majorityResponse(responses, input -> input); f1.complete(Boolean.TRUE); assertFalse(collector.isDone()); f2.complete(Boolean.TRUE); assertTrue(collector.isDone()); assertTrue(Futures.getUnchecked(collector)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"/JSON/endpointsByService/{id}\") @Produces(\"application/json\") @org.apache.cxf.jaxrs.model.wadl.Description(\"Returns the service access points of a given service in JSON\") public UriContainer geEndpointsByServiceJSON(@PathParam(\"id\") String id) throws WebApplicationException { return getEndpointsByService(id); }### Assistant: @Test public void testGeEndpointsByServiceJSON() { System.out.println(\"geEndpointsByServiceJSON\"); String id = UUID.randomUUID().toString(); UriContainer expResult = null; UriContainer result = instance.geEndpointsByServiceJSON(JUDDI_SVC); Assert.assertNotNull(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static void mainToOutput(String[] args, PrintWriter output) throws Exception { if (parseArgs(args)) { double logPEstimate = 0; int samples = 0; CsvRecordFactory csv = lmp.getCsvRecordFactory(); OnlineLogisticRegression lr = lmp.createRegression(); for (int pass = 0; pass < passes; pass++) { BufferedReader in = open(inputFile); try { csv.firstLine(in.readLine()); String line = in.readLine(); while (line != null) { Vector input = new RandomAccessSparseVector(lmp.getNumFeatures()); int targetValue = csv.processLine(line, input); double logP = lr.logLikelihood(targetValue, input); if (!Double.isInfinite(logP)) { if (samples < 20) { logPEstimate = (samples * logPEstimate + logP) / (samples + 1); } else { logPEstimate = 0.95 * logPEstimate + 0.05 * logP; } samples++; } double p = lr.classifyScalar(input); if (scores) { output.printf(Locale.ENGLISH, \"%10d %2d %10.2f %2.4f %10.4f %10.4f%n\", samples, targetValue, lr.currentLearningRate(), p, logP, logPEstimate); } lr.train(targetValue, input); line = in.readLine(); } } finally { Closeables.closeQuietly(in); } } OutputStream modelOutput = new FileOutputStream(outputFile); try { lmp.saveTo(modelOutput); } finally { Closeables.closeQuietly(modelOutput); } output.println(lmp.getNumFeatures()); output.println(lmp.getTargetVariable() + \" ~ \"); String sep = \"\"; for (String v : csv.getTraceDictionary().keySet()) { double weight = predictorWeight(lr, 0, csv, v); if (weight != 0) { output.printf(Locale.ENGLISH, \"%s%.3f*%s\", sep, weight, v); sep = \" + \"; } } output.printf(\"%n\"); model = lr; for (int row = 0; row < lr.getBeta().numRows(); row++) { for (String key : csv.getTraceDictionary().keySet()) { double weight = predictorWeight(lr, row, csv, key); if (weight != 0) { output.printf(Locale.ENGLISH, \"%20s %.5f%n\", key, weight); } } for (int column = 0; column < lr.getBeta().numCols(); column++) { output.printf(Locale.ENGLISH, \"%15.9f \", lr.getBeta().get(row, column)); } output.println(); } } }### Assistant: @Test public void example132() throws Exception { String outputFile = getTestTempFile(\"model\").getAbsolutePath(); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw, true); TrainLogistic.mainToOutput(new String[]{ \"--input\", \"donut.csv\", \"--output\", outputFile, \"--target\", \"color\", \"--categories\", \"2\", \"--predictors\", \"x\", \"y\", \"a\", \"b\", \"c\", \"--types\", \"numeric\", \"--features\", \"20\", \"--passes\", \"100\", \"--rate\", \"50\" }, pw); String trainOut = sw.toString(); assertTrue(trainOut.contains(\"a 0.\")); assertTrue(trainOut.contains(\"b -1.\")); assertTrue(trainOut.contains(\"c -25.\")); sw = new StringWriter(); pw = new PrintWriter(sw, true); RunLogistic.mainToOutput(new String[]{ \"--input\", \"donut.csv\", \"--model\", outputFile, \"--auc\", \"--confusion\" }, pw); trainOut = sw.toString(); assertTrue(trainOut.contains(\"AUC = 1.00\")); sw = new StringWriter(); pw = new PrintWriter(sw, true); RunLogistic.mainToOutput(new String[]{ \"--input\", \"donut-test.csv\", \"--model\", outputFile, \"--auc\", \"--confusion\" }, pw); trainOut = sw.toString(); assertTrue(trainOut.contains(\"AUC = 0.9\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public RequestStatusResponse provisionCluster(final ProvisionClusterRequest request) throws InvalidTopologyException, AmbariException { ensureInitialized(); final ClusterTopology topology = new ClusterTopologyImpl(ambariContext, request); final String clusterName = request.getClusterName(); final Stack stack = topology.getBlueprint().getStack(); final String repoVersion = request.getRepositoryVersion(); final Long provisionId = ambariContext.getNextRequestId(); boolean configureSecurity = false; SecurityConfiguration securityConfiguration = processSecurityConfiguration(request); if (securityConfiguration != null && securityConfiguration.getType() == SecurityType.KERBEROS) { configureSecurity = true; addKerberosClient(topology); topology.getBlueprint().getConfiguration().setParentConfiguration(stack.getConfiguration(topology.getBlueprint ().getServices())); ambariContext.createAmbariResources(topology, clusterName, SecurityType.KERBEROS, repoVersion); if (securityConfiguration.getDescriptor() != null) { submitKerberosDescriptorAsArtifact(clusterName, securityConfiguration.getDescriptor()); } Credential credential = request.getCredentialsMap().get(KDC_ADMIN_CREDENTIAL); if (credential == null) { throw new InvalidTopologyException(KDC_ADMIN_CREDENTIAL + \" is missing from request.\"); } submitCredential(clusterName, credential); } else { ambariContext.createAmbariResources(topology, clusterName, null, repoVersion); } long clusterId = ambariContext.getClusterId(clusterName); topology.setClusterId(clusterId); request.setClusterId(clusterId); topology.setConfigRecommendationStrategy(request.getConfigRecommendationStrategy()); topology.setProvisionAction(request.getProvisionAction()); LogicalRequest logicalRequest = RetryHelper.executeWithRetry(new Callable<LogicalRequest>() { @Override public LogicalRequest call() throws Exception { LogicalRequest logicalRequest = processAndPersistProvisionClusterTopologyRequest(request, topology, provisionId); return logicalRequest; } } ); clusterTopologyMap.put(clusterId, topology); addClusterConfigRequest(topology, new ClusterConfigurationRequest( ambariContext, topology, true, stackAdvisorBlueprintProcessor, configureSecurity)); executor.submit(new Callable<Boolean>() { @Override public Boolean call() throws Exception { ambariEventPublisher.publish(new ClusterConfigFinishedEvent(clusterName)); return Boolean.TRUE; } }); processRequest(request, topology, logicalRequest); ambariContext.persistInstallStateForUI(clusterName, stack.getName(), stack.getVersion()); clusterProvisionWithBlueprintCreateRequests.put(clusterId, logicalRequest); return getRequestStatus(logicalRequest.getRequestId()); }### Assistant: @Test public void testProvisionCluster_QuickLinkProfileIsSavedTheFirstTime() throws Exception { expect(persistedState.getAllRequests()).andReturn(Collections.<ClusterTopology, List<LogicalRequest>>emptyMap()).anyTimes(); expect(request.getQuickLinksProfileJson()).andReturn(SAMPLE_QUICKLINKS_PROFILE_1).anyTimes(); expect(settingDAO.findByName(QuickLinksProfile.SETTING_NAME_QUICKLINKS_PROFILE)).andReturn(null); final long timeStamp = System.currentTimeMillis(); mockStatic(System.class); expect(System.currentTimeMillis()).andReturn(timeStamp); PowerMock.replay(System.class); final SettingEntity quickLinksProfile = createQuickLinksSettingEntity(SAMPLE_QUICKLINKS_PROFILE_1, timeStamp); settingDAO.create(eq(quickLinksProfile)); replayAll(); topologyManager.provisionCluster(request); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Span currentSpan() { return tracer.getCurrentSpan(); }### Assistant: @Test public void testCurrentSpan() { final Span span = mock(Span.class); when(mockTracer.getCurrentSpan()).thenReturn(span); final Span result = kermossTracerUnderTest.currentSpan(); verify(mockTracer).getCurrentSpan(); assertEquals(span, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public byte[] process(final HttpServletRequest req, final HttpServletResponse resp, final byte[] responseBody) { byte[] result = responseBody; if (isGzipCompressionNeeded(req, resp)) { resp.addHeader(HEADER_KEY_CONTENT_ENCODING, HEADER_VALUE_GZIP); result = compressResponseStreamWithGzip(inputStreamFactory.createByteArrayInputStream(responseBody)); } return result; }### Assistant: @Test public void testProcessShouldDoNothingWhenGzipCompressionIsNotNeeded() { given(req.getHeader(HEADER_KEY_ACCEPT_ENCODING)).willReturn(\"nothing\"); underTest.process(req, resp, responseBody); verify(resp, times(0)).addHeader(HEADER_KEY_CONTENT_ENCODING, HEADER_VALUE_GZIP); verify(gzipCompressor, times(0)).compress(any(ByteArrayInputStream.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static LineChart<String, Number> buildLineChart(Stats stats, final Region root) { final CategoryAxis xAxis = new CategoryAxis(); final NumberAxis yAxis = new NumberAxis(); LineChart<String, Number> lineChart = new LineChart<>(xAxis, yAxis); Series<String, Number> series = new Series<>(); Series<String, Number> average = new Series<>(); Series<String, Number> sdp = new Series<>(); Series<String, Number> sdm = new Series<>(); final List<Long> shots; if (stats instanceof ShootGamesStats) { shots = stats.getSortedDurationsBetweenGoals(); } else { shots = stats.getOriginalDurationsBetweenGoals(); } double sd = stats.computeRoundsDurationStandardDeviation(); String xValue = \"0\"; average.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration())); sdp.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() + sd)); sdm.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() - sd)); int i = 1; for (Long duration : shots) { xValue = Integer.toString(i); series.getData().add(new Data<>(xValue, duration)); average.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration())); sdp.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() + sd)); sdm.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() - sd)); i++; } xValue = Integer.toString(i); average.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration())); sdp.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() + sd)); sdm.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() - sd)); lineChart.setCreateSymbols(false); lineChart.getData().add(average); lineChart.getData().add(sdp); lineChart.getData().add(sdm); lineChart.getData().add(series); series.getNode().setStyle(\"-fx-stroke-width: 3; -fx-stroke: red; -fx-stroke-dash-offset:5;\"); average.getNode().setStyle(\"-fx-stroke-width: 1; -fx-stroke: lightgreen;\"); sdp.getNode().setStyle(\"-fx-stroke-width: 1; -fx-stroke: grey;\"); sdm.getNode().setStyle(\"-fx-stroke-width: 1; -fx-stroke: grey;\"); EventHandler<Event> openLineChartEvent = createZoomInLineChartEventHandler(lineChart, root); lineChart.addEventHandler(MouseEvent.MOUSE_CLICKED, openLineChartEvent); lineChart.setLegendVisible(false); root.widthProperty().addListener((observable, oldValue, newValue) -> lineChart.setMaxWidth(newValue.doubleValue() * 0.4)); root.heightProperty().addListener((observable, oldValue, newValue) -> lineChart.setMaxHeight(newValue.doubleValue() * 0.4)); lineChart.setMaxWidth(root.getWidth() * 0.4); lineChart.setMaxHeight(root.getHeight() * 0.4); return lineChart; }### Assistant: @Test void shouldZoomInToLineChart() { final List<Long> mockShots = new ArrayList<>(List.of(1L, 2L, 3L)); when(mockStats.getOriginalDurationsBetweenGoals()).thenReturn(mockShots); when(mockStats.computeRoundsDurationStandardDeviation()).thenReturn(0d); when(mockStats.computeRoundsDurationAverageDuration()).thenReturn(2L); final LineChart<String, Number> lineChart = StatDisplayUtils.buildLineChart(mockStats, mockRegion); final VBox parent = new VBox(); parent.getChildren().add(lineChart); lineChart.fireEvent(mouseClickEvent(lineChart)); assertEquals(0, lineChart.getTranslateX()); assertEquals(0, lineChart.getTranslateY()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TokenBalanceState reduce(TokenBalanceState state, Particle p) { if (p instanceof TransferrableTokensParticle) { return TokenBalanceState.merge(state, (TransferrableTokensParticle) p); } return state; }### Assistant: @Test public void testSimpleBalance() { TransferrableTokensParticle minted = mock(TransferrableTokensParticle.class); Hash hash = mock(Hash.class); when(minted.getAmount()).thenReturn(UInt256.TEN); when(minted.getGranularity()).thenReturn(UInt256.ONE); when(minted.getHash()).thenReturn(hash); RRI token = mock(RRI.class); when(minted.getTokenDefinitionReference()).thenReturn(token); TokenBalanceReducer reducer = new TokenBalanceReducer(); TokenBalanceState tokenBalance = reducer.reduce(new TokenBalanceState(), minted); BigDecimal tenSubunits = TokenUnitConversions.subunitsToUnits(UInt256.TEN); assertThat(tokenBalance.getBalance().get(token).compareTo(tenSubunits)).isEqualTo(0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public LinkedList<FieldPostProcessor> getLowPriorityFieldPostProcessors() { LinkedList<FieldPostProcessor> result = new LinkedList<FieldPostProcessor>(); result.addAll(sortAndGetNegativePostProcessors(toList(priorityCustomFieldPostProcessors))); return result; }### Assistant: @Test public void getLowPriorityFieldPostProcessors_noCustomProcessors_returnsEmptyList() throws Exception { noProcessors(); LinkedList<FieldPostProcessor> actualResult = testedObject.getLowPriorityFieldPostProcessors(); assertThat(actualResult).isEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static void initializePluginsInOrder(Collection<String> disabledPlugins, Iterable<StagemonitorPlugin> plugins) { Set<Class<? extends StagemonitorPlugin>> alreadyInitialized = new HashSet<Class<? extends StagemonitorPlugin>>(); Set<StagemonitorPlugin> notYetInitialized = getPluginsToInit(disabledPlugins, plugins); while (!notYetInitialized.isEmpty()) { int countNotYetInitialized = notYetInitialized.size(); for (Iterator<StagemonitorPlugin> iterator = notYetInitialized.iterator(); iterator.hasNext(); ) { StagemonitorPlugin stagemonitorPlugin = iterator.next(); { final List<Class<? extends StagemonitorPlugin>> dependencies = stagemonitorPlugin.dependsOn(); if (dependencies.isEmpty() || alreadyInitialized.containsAll(dependencies)) { initializePlugin(stagemonitorPlugin); iterator.remove(); alreadyInitialized.add(stagemonitorPlugin.getClass()); } } } if (countNotYetInitialized == notYetInitialized.size()) { throw new IllegalStateException(\"Cyclic dependencies detected: \" + notYetInitialized); } } }### Assistant: @Test public void testInitPlugins_SimpleDependency() { final PluginNoDependency pluginNoDependency = new PluginNoDependency(); final PluginSimpleDependency pluginSimpleDependency = new PluginSimpleDependency(); Stagemonitor.initializePluginsInOrder(Collections.emptyList(), Arrays.asList(pluginNoDependency, pluginSimpleDependency)); assertThat(pluginNoDependency.isInitialized()).isTrue(); assertThat(pluginSimpleDependency.isInitialized()).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public org.modeshape.jcr.api.query.Query createQuery( String statement, String language ) throws InvalidQueryException, RepositoryException { CheckArg.isNotNull(statement, \"statement\"); CheckArg.isNotNull(language, \"language\"); return createQuery(statement, language, null, null); }### Assistant: @FixFor( \"MODE-1110\" ) @Test public void shouldExecuteQueryWithThreeInnerJoinsAndCriteriaOnDifferentSelectors() throws Exception { String sql = \"SELECT * from [nt:base] as car INNER JOIN [nt:base] as categories ON ISDESCENDANTNODE(car, categories) \" + \" INNER JOIN [nt:base] as carsNode ON ISDESCENDANTNODE (categories, carsNode) \" + \" WHERE PATH(carsNode) = '/Cars' AND ISDESCENDANTNODE( categories, '/Cars') OR car.[jcr:primaryType] IS NOT NULL\"; Query query = session.getWorkspace().getQueryManager().createQuery(sql, Query.JCR_SQL2); QueryResult result = query.execute(); String[] columnNames = allOf(allColumnNames(\"car\"), allColumnNames(\"categories\"), allColumnNames(\"carsNode\")); validateQuery().rowCount(13).hasColumns(columnNames).validate(query, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Type getOmaResourceType(String uriPath) throws InvalidResourceURIException { try { String[] path = uriPath.split(\"/\"); if (path.length < 4) { throw new InvalidResourceURIException(uriPath + \" does not match /{object-id}/{object-instance-id}/{resource-id}\"); } ObjectModel object = getObjectModel(path[1]); ResourceModel resource = object.getResourceModel(path[3]); return resource.getType(); } catch (NotFoundException exception) { return null; } }### Assistant: @Test public void getTypeOfUnknownResourceOfKnownObject() throws Exception { assertNull(registry.getOmaResourceType(\"/0/0/unknown\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String string(Object o) { if (o instanceof Object[]) { return \"[\" + Joiner.on(\",\").join( Lists.transform(Arrays.asList((Object[])o), toString) ) + \"]\"; } else if (o instanceof String) { return \"\\\"\" + ((String)o).replace(\"\\\"\", \"\\\\\\\"\") + \"\\\"\"; } else if (o instanceof Character) { return \"'\" + (o.toString().replace(\"'\", \"\\\\'\")) + \"'\"; } else if (o instanceof Date) { return string(dateFormat.format((Date)o)); } return o.toString(); }### Assistant: @Test public void string_Date() { Calendar c = Calendar.getInstance(); c.set(Calendar.YEAR, 2012); c.set(Calendar.MONTH, 2 - 1); c.set(Calendar.DATE, 21); c.set(Calendar.HOUR_OF_DAY, 14); c.set(Calendar.MINUTE, 34); c.set(Calendar.SECOND, 25); assertEquals(\"\\\"2012-02-21 14:34:25\\\"\", translator.string(c.getTime())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static TranslationUnit transform(TranslationUnit tu) { return new StandardVisitor() { @Override public void visitIfStmt(IfStmt ifStmt) { super.visitIfStmt(ifStmt); if (!isBlock(ifStmt.getThenStmt())) { ifStmt.setThenStmt(makeBlock(ifStmt.getThenStmt())); } if (ifStmt.hasElseStmt() && !isBlock(ifStmt.getElseStmt())) { ifStmt.setElseStmt(makeBlock(ifStmt.getElseStmt())); } } @Override public void visitForStmt(ForStmt forStmt) { super.visitForStmt(forStmt); handleLoopStmt(forStmt); } @Override public void visitWhileStmt(WhileStmt whileStmt) { super.visitWhileStmt(whileStmt); handleLoopStmt(whileStmt); } @Override public void visitDoStmt(DoStmt doStmt) { super.visitDoStmt(doStmt); handleLoopStmt(doStmt); } private boolean isBlock(Stmt stmt) { return stmt instanceof BlockStmt; } private Stmt makeBlock(Stmt stmt) { return new BlockStmt(Arrays.asList(stmt), true); } private void handleLoopStmt(LoopStmt loopStmt) { if (!isBlock(loopStmt.getBody())) { loopStmt.setBody(makeBlock(loopStmt.getBody())); } } public TranslationUnit addBraces(TranslationUnit tu) { visit(tu); return tu; } }.addBraces(tu.clone()); }### Assistant: @Test public void danglingElse() throws Exception { String program = \"void main() { if (a) if (b) s1; else s2; }\"; TranslationUnit tu = ParseHelper.parse(program); TranslationUnit transformed = AddBraces.transform(tu); assertNotEquals(tu, transformed); String programAfter = \"void main() { if (a) { if (b) { s1; } } else { s2; } }\"; assertEquals(PrettyPrinterVisitor.prettyPrintAsString( ParseHelper.parse(programAfter)), PrettyPrinterVisitor.prettyPrintAsString(transformed)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void open() throws IOException { this.writer.append(\"<html><body>\"); }### Assistant: @Test public void testOpenTag() throws IOException { assertThat(of().open(DIV).writer.toString()).isEqualTo(\"<div>\"); assertThat(of().open(DIV, NO_CLASS).writer.toString()).isEqualTo(\"<div>\"); assertThat(of().open(DIV, HELLO_CLASS).writer.toString()).isEqualTo(\"<div class=\\\"hello\\\">\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull public ContentValues write(@NonNull SyncState syncState) { return write(syncState, false); }### Assistant: @Test public void write() throws Exception { final ContentValues contentValues = mSyncStateAdapter.write(mSyncState); assertEquals(IDENTIFIER_STRING, contentValues.getAsString(\"drive_sync_id\")); assertEquals(DRIVE_IS_SYNCED, contentValues.getAsBoolean(\"drive_is_synced\")); assertEquals(DRIVE_IS_MARKED, contentValues.getAsBoolean(\"drive_marked_for_deletion\")); assertEquals(LAST_LOCAL_MODIFICATION_TIME, (long) contentValues.getAsLong(\"last_local_modification_time\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable WebsterPlan.FixtureProvider getFixtureProvider() { if (websterOakRunArgs != null && !websterOakRunArgs.trim().isEmpty()) { getLog().info(\"Using webster.oakRunArgsString to configure NodeStore: \" + websterOakRunArgs); return () -> JcrFactory.getNodeStoreFixture(true, CliArgParser.parse(websterOakRunArgs)); } else if (websterRepositoryHome != null && websterRepositoryHome.isDirectory()) { getLog().info(\"Using webster.repositoryHome to configure NodeStore: \" + websterRepositoryHome.getAbsolutePath()); final File segmentStore = new File(websterRepositoryHome, \"segmentstore\"); if (!(new File(segmentStore, \"journal.log\")).isFile()) { getLog().info(\"segmentstore/journal.log file not found in configured webster.repositoryHome.\"); return null; } return () -> JcrFactory.getReadOnlyFixture(segmentStore); } return null; }### Assistant: @Test public void testGetFixtureProvider_withHome() throws Exception { final File testOutDir = new File(testOutBaseDir, \"testGetFixtureProvider_withHome\"); FileUtils.deleteDirectory(testOutDir); testOutDir.mkdirs(); WebsterMojo mojo = newMojo(); mojo.websterOakRunArgs = null; final File repositoryHome = new File(testOutDir, \"websterRepositoryHome\"); repositoryHome.mkdirs(); mojo.websterRepositoryHome = repositoryHome; MockMojoLog log = logFor(mojo); log.entries.clear(); assertNull(\"home fixture provider is null without journal.log\", mojo.getFixtureProvider()); log.printAll(); assertTrue(\"log contains correct message\", log.any(entry -> entry.message.startsWith(\"segmentstore/journal.log\"))); prepareRepo(new File(repositoryHome, \"segmentstore\"), session -> { session.getRootNode().addNode(\"foo\"); session.save(); }); WebsterPlan.FixtureProvider homeProvider = mojo.getFixtureProvider(); assertNotNull(\"home fixture provider not null\", homeProvider); final CompletableFuture<Boolean> homePerformed = new CompletableFuture<>(); final WebsterPlan.Builder homeBuilder = new WebsterPlan.Builder(); withMockTarget(homeBuilder, session -> homePerformed.complete(true)); homeBuilder.withFixtureProvider(homeProvider); homeBuilder.build().perform(); assertTrue(\"should be performed with home\", homePerformed.getNow(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void grantAccessOnly(ID feedId, Principal principal, Principal... more) { revokeAllAccess(feedId); grantAccess(feedId, principal, more); }### Assistant: @Test public void testGrantAccessOnly() { metadata.commit(() -> { this.opsAccessProvider.grantAccess(FEED_ID1, USER1, USER2); }, MetadataAccess.SERVICE); metadata.commit(() -> { this.opsAccessProvider.grantAccessOnly(FEED_ID1, USER3); }, MetadataAccess.SERVICE); Set<Principal> set1 = metadata.read(() -> { return this.opsAccessProvider.getPrincipals(FEED_ID1); }, MetadataAccess.SERVICE); assertThat(set1) .hasSize(1) .containsOnly(USER3); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getMessage(String code, Object[] args) { return getMessageSourceAccessor().getMessage(code, args); }### Assistant: @Test public void testGetMessage08() throws Exception { ValidationTargetDummyBean validationTargetDummy = new ValidationTargetDummyBean(); validationTargetDummy.setHoge(null); Errors errors = new BindException(validationTargetDummy, \"dummy\"); ValidationUtils.rejectIfEmpty(errors, \"hoge\", \"errors.required\", new Object[] { \"\u30c6\u30b9\u30c8\" }, \"\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u3059\"); List<FieldError> fieldErrors = errors.getFieldErrors(); assertEquals(1, fieldErrors.size()); String result = messageAccessor.getMessage(fieldErrors.get(0)); assertEquals(\"\u30c6\u30b9\u30c8\u306f\u5165\u529b\u5fc5\u9808\u9805\u76ee\u3067\u3059.\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @GetMapping(\"/{page:[0-9]+}/{size:[0-9]+}\") @ApiOperation(\"\u5206\u9875\u67e5\u8be2\u8868\u4fe1\u606f\u5217\u8868\") @PreAuthorize(\"hasAnyAuthority('\" + QUERY_PERM + \"')\") public Result<QueryResult<TableInfo>> query(@ApiParam(value = \"\u9875\u7801\", required = true) @PathVariable(\"page\") int page, @ApiParam(value = \"\u6bcf\u9875\u6570\u636e\u6761\u6570\", required = true) @PathVariable(\"size\") int size, TableInfo model) { return super.query(page, size, model); }### Assistant: @Test public void testQuery() throws Exception { int page = 1; int size = 10; TableInfo tableInfo = new TableInfo(); String content = objectMapper.writeValueAsString(tableInfo); String result = mockMvc.perform(get(\"/tool/tableInfo/\"+ page + \"/\" + size) .header(HttpHeaders.AUTHORIZATION, String.join(\" \", accessToken.getTokenType(), accessToken.getValue())) .content(content) .contentType(MediaType.APPLICATION_JSON_UTF8) .accept(MediaType.APPLICATION_JSON_UTF8)) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.data.total\").isNumber()) .andReturn().getResponse().getContentAsString(); log.info(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void close() { if (config.getBoolean(REPORTER_ENABLED)) { executor.submit(this); } executor.shutdown(); try { if (executor.awaitTermination(20, TimeUnit.SECONDS)) { log.debug(\"Executor was shut down successfully.\"); } else { log.error(\"Timed out before executor was shut down! It's possible some metrics data were not sent out!\"); } } catch (InterruptedException e) { log.error(\"Unable to shutdown executor gracefully\", e); } }### Assistant: @Test public void testClose() throws InterruptedException { Map<String, Object> configs = initializeConfigWithReporter(); graphiteReporter.configure(configs); ScheduledExecutorService mockExecutor = mock(ScheduledExecutorService.class); Future mockFuture = mock(Future.class); when(mockExecutor.submit(graphiteReporter)).thenReturn(mockFuture); when(mockExecutor.awaitTermination(20, TimeUnit.SECONDS)).thenReturn(true); Whitebox.setInternalState(graphiteReporter, \"executor\", mockExecutor); graphiteReporter.close(); verify(mockExecutor).shutdown(); verify(mockExecutor).submit(graphiteReporter); verify(mockExecutor).awaitTermination(20, TimeUnit.SECONDS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Type type() { return type; }### Assistant: @Test void type() { assertEquals(Type.PERSIST, persistOperation.type()); assertEquals(Type.UPDATE, updateOperation.type()); assertEquals(Type.REMOVE, removeOperation.type()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void gatherConfig(Revapi revapi, AnalysisContext.Builder ctxBld) throws MojoExecutionException { if (analysisConfigurationFiles != null && analysisConfigurationFiles.length > 0) { for (Object pathOrConfigFile : analysisConfigurationFiles) { ConfigurationFile configFile; if (pathOrConfigFile instanceof String) { configFile = new ConfigurationFile(); configFile.setPath((String) pathOrConfigFile); } else { configFile = (ConfigurationFile) pathOrConfigFile; } String path = configFile.getPath(); String resource = configFile.getResource(); if (path == null && resource == null) { throw new MojoExecutionException( \"Either 'path' or 'resource' has to be specified in a configurationFile definition.\"); } else if (path != null && resource != null) { throw new MojoExecutionException( \"Either 'path' or 'resource' has to be specified in a configurationFile definition but\" + \" not both.\"); } String readErrorMessage = \"Error while processing the configuration file on \" + (path == null ? \"classpath \" + resource : \"path \" + path); Supplier<Iterator<InputStream>> configFileContents; if (path != null) { File f = new File(path); if (!f.isAbsolute()) { f = new File(relativePathBaseDir, path); } if (!f.isFile() || !f.canRead()) { String message = \"Could not locate analysis configuration file '\" + f.getAbsolutePath() + \"'.\"; if (failOnMissingConfigurationFiles) { throw new MojoExecutionException(message); } else { log.debug(message); continue; } } final File ff = f; configFileContents = () -> { try { return Collections.<InputStream>singletonList(new FileInputStream(ff)).iterator(); } catch (FileNotFoundException e) { throw new IllegalArgumentException(\"Failed to read the configuration file '\" + ff.getAbsolutePath() + \"'.\", e); } }; } else { configFileContents = () -> { try { return Collections.list(getClass().getClassLoader().getResources(resource)) .stream() .map(url -> { try { return url.openStream(); } catch (IOException e) { throw new IllegalArgumentException( \"Failed to read the classpath resource '\" + url + \"'.\"); } }).iterator(); } catch (IOException e) { throw new IllegalArgumentException( \"Failed to locate classpath resources on path '\" + resource + \"'.\"); } }; } Iterator<InputStream> it = configFileContents.get(); List<Integer> nonJsonIndexes = new ArrayList<>(4); int idx = 0; while (it.hasNext()) { ModelNode config; try (InputStream in = it.next()) { config = readJson(in); } catch (IllegalArgumentException | IOException e) { throw new MojoExecutionException(readErrorMessage, e.getCause()); } if (config == null) { nonJsonIndexes.add(idx); continue; } expandVariables(config); mergeJsonConfigFile(ctxBld, configFile, config); idx++; } if (!nonJsonIndexes.isEmpty()) { idx = 0; it = configFileContents.get(); while (it.hasNext()) { try (Reader rdr = new InputStreamReader(it.next())) { if (nonJsonIndexes.contains(idx)) { mergeXmlConfigFile(revapi, ctxBld, configFile, rdr); } } catch (IllegalArgumentException | IOException | XmlPullParserException e) { throw new MojoExecutionException(readErrorMessage, e.getCause()); } idx++; } } } } if (analysisConfiguration != null) { String text = analysisConfiguration.getValue(); if (text == null || text.isEmpty()) { convertNewStyleConfigFromXml(ctxBld, revapi); } else { ctxBld.mergeConfiguration(expandVariables(ModelNode.fromJSONString(JSONUtil.stripComments(text)))); } } }### Assistant: @Test public void testPropertyExpansionInXml() throws Exception { ConfigurationFile configurationFile = new ConfigurationFile(); configurationFile.setResource(\"prop-expansion-config.xml\"); Properties props = new Properties(); props.put(\"prop\", \"yes\"); AnalysisConfigurationGatherer gatherer = new AnalysisConfigurationGatherer(null, new Object[] { configurationFile }, false, true, new PropertyValueInterpolator(props), null, null); Revapi revapi = Revapi.builder() .withFilters(TestExtension.class) .build(); AnalysisContext.Builder ctxBld = AnalysisContext.builder(); gatherer.gatherConfig(revapi, ctxBld); AnalysisContext ctx = ctxBld.build(); ModelNode cfg = ctx.getConfiguration(); String json = \"[{\\\"extension\\\": \\\"test\\\", \\\"configuration\\\": \\\"yes\\\"}]\"; ModelNode expected = ModelNode.fromJSONString(json); assertEquals(expected, cfg); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int compute(final float[][] in, final int getNumNodesInput, final float[][] out, final int getNumNodesOutput, final int width, final int[] mask, final int errmask, final float[] a) { final int rcheck[]; final int nodes_input = 18; final int nodes_output = 1; final int nodes_input_bias = 1; final int nodes_input_pca = 1; final int nodes_hidden = 80; final int nodes_hidden_bias = 1; final double nodes_hidden_temperature = 1.000000; final double t_input = nodes_hidden_temperature / (double) (nodes_input); final double t_hidden = nodes_hidden_temperature / (double) (nodes_hidden); final double[] vt; final double[] vt1; if (getNumNodesInput <= 0) { return (nodes_input); } if (getNumNodesOutput <= 0) { return (nodes_output); } if (getNumNodesInput != nodes_input) { return (-1); } if (getNumNodesOutput != nodes_output) { return (-2); } vt = new double[nodes_input + nodes_input_bias]; vt1 = new double[nodes_hidden + nodes_hidden_bias]; rcheck = new int[width]; for (int x = 0; x < width; x++) { rcheck[x] = 0; if (a[x] < 0.0f) { rcheck[x] = 1; } a[x] = 1.0f; } for (int x = 0; x < width; x++) { if (mask[x] == 0) { if (rcheck[x] != 0) { for (int i = 0; i < nodes_input && a[x] > 0.0f; i++) { if ((in[i][x] < (float) NN_General.NODES_INPUT_SCALE_LIMITS[i][0]) || (in[i][x] > (float) NN_General.NODES_INPUT_SCALE_LIMITS[i][1])) { a[x] -= 3.0f; } } if (a[x] < 0.0f) { mask[x] |= errmask; } } for (int i = 0; i < nodes_input; i++) { if (NN_General.NODES_INPUT_SCALE_FLAG[i] == -1) { in[i][x] = (float) Math.log((double) in[i][x]); } if (NN_General.NODES_INPUT_SCALE_FLAG[i] == -2) { in[i][x] = (float) Math.exp((double) in[i][x]); } } for (int i = 0; i < nodes_input; i++) { in[i][x] = (float) NN_General.NODES_INPUT_SCALE_OFF[i] + (in[i][x] - (float) nodes_input_scale_run39[i][0]) / (float) nodes_input_scale_run39[i][1]; } if (nodes_input_pca != 0) { for (int i = 0; i < nodes_input; i++) { vt[i] = (double) in[i][x]; if (NN_General.NODES_INPUT_SCALE_FLAG[i] == 1) { vt[i] = 0.0; for (int j = 0; j < nodes_input; j++) { if (NN_General.NODES_INPUT_SCALE_FLAG[j] == 1) { vt[i] += (double) in[j][x] * nodes_input_pca_evec_run39[j][i]; } } } } for (int i = 0; i < nodes_input; i++) { in[i][x] = (float) vt[i]; } } for (int i = 0; i < nodes_input; i++) { vt[i] = (double) in[i][x]; } for (int i = nodes_input; i < nodes_input + nodes_input_bias; i++) { vt[i] = 1.0; } for (int i = 0; i < nodes_hidden; i++) { vt1[i] = 0.0; for (int j = 0; j < nodes_input + nodes_input_bias; j++) { vt1[i] += vt[j] * nodes_hidden_weights_run39[j][i]; } } for (int i = 0; i < nodes_hidden; i++) { vt1[i] = 1.0 / (1.0 + Math.exp(-t_input * vt1[i])); } for (int i = nodes_hidden; i < nodes_hidden + nodes_hidden_bias; i++) { vt1[i] = 1.0f; } for (int i = 0; i < nodes_output; i++) { out[i][x] = 0.0f; for (int j = 0; j < nodes_hidden + nodes_hidden_bias; j++) { out[i][x] += (float) (vt1[j] * nodes_output_weights_run39[j][i]); } } for (int i = 0; i < nodes_output; i++) { out[i][x] = (float) (1.0 / (1.0 + Math.exp(-t_hidden * out[i][x]))); } for (int i = 0; i < nodes_output; i++) { out[i][x] = (float) nodes_output_scale_run39[i][0] + (out[i][x] - (float) nodes_output_scale_off_run39[i]) * (float) nodes_output_scale_run39[i][1]; } for (int i = 0; i < nodes_output; i++) { if (nodes_output_scale_flag_run39[i] == -1) { out[i][x] = (float) Math.log((double) out[i][x]); } if (nodes_output_scale_flag_run39[i] == -2) { out[i][x] = (float) Math.exp((double) out[i][x]); } } if (rcheck[x] != 0) { for (int i = 0; i < nodes_output && a[x] >= -2.0f; i++) { if ((out[i][x] < (float) nodes_output_scale_limits_run39[i][0]) || (out[i][x] > (float) nodes_output_scale_limits_run39[i][1])) { a[x] -= 20.0f; } } if (a[x] < 0.0f) { mask[x] |= errmask; } } } } return 0; }### Assistant: @Test public void testNN_AtmCorrCompute() throws Exception { final float[][] input = new float[][]{ {0.05943133f}, {0.05067047f}, {0.041214053f}, {0.037428323f}, {0.030080993f}, {0.024526045f}, {0.023756435f}, {0.022254849f}, {0.021630857f}, {0.021160515f}, {0.019966979f}, {0.019658221f}, {11.66836f}, {1023.05f}, {0.7145359f}, {-0.385183f}, {-0.385695f}, {0.83837545f}}; float[][] exOutput = new float[][]{{-0.7276454f}}; final int compute = NN_TSM.compute(input, 18, out, 1, width, mask, 0, a); assertEquals(0, compute); assertArrayEquals(exOutput, out); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static long elapsed(long started, long finished) { return Times.elapsed(started, finished, true); }### Assistant: @Test public void testNegativeStartandFinishTimes() { long elapsed = Times.elapsed(-5, -10, false); Assert.assertEquals(\"Elapsed time is not -1\", -1, elapsed); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Future<Void> removeQueueRequest(String queue) { Future<Void> future = Future.future(); if(StringUtils.isEmpty(queue)){ future.fail(\"Queue is not allowed to be empty\"); return future; } redisClient.hdel(QUEUE_REQUESTS, queue, reply -> { if(reply.failed()){ String message = \"Failed to remove request for queue '\"+queue+\"'. Cause: \" + logCause(reply); log.error(message); future.fail(message); } else { future.complete(); } }); return future; }### Assistant: @Test public void testRemoveQueueRequest(TestContext context){ Async async = context.async(); context.assertFalse(jedis.exists(QUEUE_REQUESTS)); jedis.hset(QUEUE_REQUESTS, \"some_other_queue\", new JsonObject().encode()); jedis.hset(QUEUE_REQUESTS, \"queue_1\", new JsonObject().encode()); context.assertTrue(jedis.hexists(QUEUE_REQUESTS, \"queue_1\")); storage.removeQueueRequest(\"queue_1\").setHandler(event -> { context.assertTrue(event.succeeded()); context.assertTrue(jedis.exists(QUEUE_REQUESTS)); context.assertTrue(jedis.hexists(QUEUE_REQUESTS, \"some_other_queue\")); context.assertFalse(jedis.hexists(QUEUE_REQUESTS, \"queue_1\")); async.complete(); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute(final ImmutableMultimap<String, String> args, final PrintWriter printer) throws AuthenticationException, UnknownHostException { printer.println(\"Removing role...\"); final String user = args.get(ServerAPI.USER_PARAM).asList().get(0); final String roleParam = args.get(ServerAPI.USER_ROLE_PARAM).asList().get(0); final AvailableRoles role = DbCredential.getRole(roleParam); if(user == null || role == null){ printer.println(\"ERROR: Bad request! The provided credential are unhealthy or incomplete.\"); return; } repoHandler.removeUserRole(user, role); printer.println(\"Task performed successfully.\"); }### Assistant: @Test public void testRemoveRole(){ final RepositoryHandler repositoryHandler = mock(RepositoryHandler.class); final RemoveRoleTask task = new RemoveRoleTask(repositoryHandler); final ImmutableMultimap.Builder<String, String> builder = new ImmutableMultimap.Builder<String, String>(); builder.put(ServerAPI.USER_PARAM, \"user\"); builder.put(ServerAPI.USER_ROLE_PARAM, \"data_updater\"); Exception exception = null; try { task.execute(builder.build(), mock(PrintWriter.class)); } catch (Exception e) { exception = e; } assertNull(exception); verify(repositoryHandler, times(1)).removeUserRole(\"user\", AvailableRoles.DATA_UPDATER); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ConfigurationBuilder highestPriority(PropertySource propertySource) { checkBuilderState(); int index = propertySources.indexOf(propertySource); if(index<0){ throw new IllegalArgumentException(\"No such PropertySource: \" + propertySource); } if(index<(propertySources.size()-1)){ propertySources.remove(propertySource); propertySources.add(propertySource); } return this; }### Assistant: @Test public void highestPriority() { DefaultConfigurationBuilder b = new DefaultConfigurationBuilder(); MockedPropertySource[] propertySources = new MockedPropertySource[10]; for (int i = 0; i < propertySources.length; i++) { propertySources[i] = new MockedPropertySource(\"ps\" + i, i); } b.addPropertySources(propertySources); b.highestPriority(propertySources[propertySources.length - 1]); for (int i = 0; i < propertySources.length; i++) { assertThat(b.getPropertySources().get(i)).isEqualTo(propertySources[i]); } b.highestPriority(propertySources[propertySources.length - 2]); for (int i = 0; i < propertySources.length - 2; i++) { assertThat(b.getPropertySources().get(i)).isEqualTo(propertySources[i]); } assertThat(b.getPropertySources().get(propertySources.length - 1)).isEqualTo(propertySources[propertySources.length - 2]); assertThat(b.getPropertySources().get(propertySources.length - 2)).isEqualTo(propertySources[propertySources.length - 1]); b.highestPriority(propertySources[5]).build(); assertThat(b.getPropertySources().get(propertySources.length - 1)).isEqualTo(propertySources[5]); boolean caughtAlreadyBuilt = false; try { b.highestPriority(propertySources[5]); } catch (IllegalStateException e) { caughtAlreadyBuilt = true; } assertThat(caughtAlreadyBuilt).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T, E extends Exception> T runInTransactionWithRetries(TransactionFunction<T, E> f) throws IOException, E { var retrySettings = datastore.getOptions().getRetrySettings(); var backoff = new ExponentialBackOff.Builder() .setInitialIntervalMillis((int) retrySettings.getInitialRetryDelay().toMillis()) .setMaxIntervalMillis((int) retrySettings.getMaxRetryDelay().toMillis()) .setMultiplier(retrySettings.getRetryDelayMultiplier()) .setMaxElapsedTimeMillis((int) retrySettings.getTotalTimeout().toMillis()) .build(); for (int attempt = 1; ; attempt++) { try { return runInTransaction(f); } catch (DatastoreIOException e) { if (!isRetryableTransactionException(e.getCause())) { throw e; } if (retrySettings.getMaxAttempts() > 0 && attempt >= retrySettings.getMaxAttempts()) { throw e; } var sleepMillis = backoff.nextBackOffMillis(); if (sleepMillis == STOP) { throw e; } log.debug(\"datastore transaction exception, attempt #{}, retrying in {}ms\", attempt, sleepMillis, e); sleepMillis(sleepMillis); } } }### Assistant: @Test public void runInTransactionWithRetriesShouldCallFunctionAndRollbackOnCommitFailure() throws Exception { var commitException = new DatastoreIOException(new DatastoreException(1, \"\", \"\")); var transaction = spy(datastore.newTransaction()); doReturn(transaction).when(datastore).newTransaction(); when(transactionFunction.apply(any())).thenReturn(\"\"); doThrow(commitException).when(transaction).commit(); try { storage.runInTransactionWithRetries(transactionFunction); fail(\"Expected exception!\"); } catch (DatastoreIOException e) { assertThat(e, is(commitException)); } verify(transactionFunction).apply(any()); verify(transaction).rollback(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setMachineName(String machineName) throws ConfigException { if (machineName == null || !VectorClock.MACHINE_PATTERN.matcher(machineName).matches()) { throw new ConfigException(\"Machine name cannot be empty and must be only characters (A-Z).\"); } this.machineName = machineName; }### Assistant: @Test public void testConfigMachineNameInvalidChars() throws Exception { File localDir = new File(\"/some/folder\"); ConfigTO configTO = new ConfigTO(); RepoTO repoTO = new RepoTO(); configTO.setMachineName(\"invalid machine name\"); try { new Config(localDir, configTO, repoTO); fail(\"Machine name should not have been accepted.\"); } catch (ConfigException e) { TestAssertUtil.assertErrorStackTraceContains(\"Machine name\", e); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected abstract void handle(IOException e);### Assistant: @Test void handle() throws IOException { doThrow(IOException.class).when(yaml).writer(); yaml.write(Map.of()); verify(yaml).handle(any(IOException.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void removeForeignKey( final UnitOfWork transaction, final String foreignKeyToRemove ) throws KException { ArgCheck.isNotNull( transaction, \"transaction\" ); ArgCheck.isTrue( ( transaction.getState() == State.NOT_STARTED ), \"transaction state is not NOT_STARTED\" ); ArgCheck.isNotEmpty( foreignKeyToRemove, \"foreignKeyToRemove\" ); final ForeignKey[] foreignKeys = getForeignKeys( transaction, foreignKeyToRemove ); if ( foreignKeys.length == 0 ) { throw new KException( Messages.getString( Relational.CONSTRAINT_NOT_FOUND_TO_REMOVE, foreignKeyToRemove, ForeignKey.CONSTRAINT_TYPE.toString() ) ); } foreignKeys[ 0 ].remove( transaction ); }### Assistant: @Test( expected = IllegalArgumentException.class ) public void shouldFailTryingToRemoveEmptyForeignKeyName() throws Exception { this.table.removeForeignKey( getTransaction(), StringConstants.EMPTY_STRING ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void init(Configuration conf, CommonNodeLabelsManager mgr) throws Exception { StoreSchema schema = new StoreSchema(EDITLOG_FILENAME, MIRROR_FILENAME); initStore(conf, new Path( conf.get(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR, getDefaultFSNodeLabelsRootDir())), schema, mgr); }### Assistant: @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Test(timeout = 10000) public void testRecoverWithMirror() throws Exception { mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet(\"p1\", \"p2\", \"p3\")); mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet(\"p4\")); mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet(\"p5\", \"p6\")); mgr.replaceLabelsOnNode((Map) ImmutableMap.of(toNodeId(\"n1\"), toSet(\"p1\"), toNodeId(\"n2\"), toSet(\"p2\"))); mgr.replaceLabelsOnNode((Map) ImmutableMap.of(toNodeId(\"n3\"), toSet(\"p3\"), toNodeId(\"n4\"), toSet(\"p4\"), toNodeId(\"n5\"), toSet(\"p5\"), toNodeId(\"n6\"), toSet(\"p6\"), toNodeId(\"n7\"), toSet(\"p6\"))); mgr.removeFromClusterNodeLabels(toSet(\"p1\")); mgr.removeFromClusterNodeLabels(Arrays.asList(\"p3\", \"p5\")); mgr.stop(); mgr = new MockNodeLabelManager(); mgr.init(conf); mgr.start(); Assert.assertEquals(3, mgr.getClusterNodeLabelNames().size()); Assert.assertTrue(mgr.getClusterNodeLabelNames().containsAll( Arrays.asList(\"p2\", \"p4\", \"p6\"))); assertMapContains(mgr.getNodeLabels(), ImmutableMap.of(toNodeId(\"n2\"), toSet(\"p2\"), toNodeId(\"n4\"), toSet(\"p4\"), toNodeId(\"n6\"), toSet(\"p6\"), toNodeId(\"n7\"), toSet(\"p6\"))); assertLabelsToNodesEquals(mgr.getLabelsToNodes(), ImmutableMap.of( \"p6\", toSet(toNodeId(\"n6\"), toNodeId(\"n7\")), \"p4\", toSet(toNodeId(\"n4\")), \"p2\", toSet(toNodeId(\"n2\")))); mgr.stop(); mgr = new MockNodeLabelManager(); mgr.init(conf); mgr.start(); Assert.assertEquals(3, mgr.getClusterNodeLabelNames().size()); Assert.assertTrue(mgr.getClusterNodeLabelNames().containsAll( Arrays.asList(\"p2\", \"p4\", \"p6\"))); assertMapContains(mgr.getNodeLabels(), ImmutableMap.of(toNodeId(\"n2\"), toSet(\"p2\"), toNodeId(\"n4\"), toSet(\"p4\"), toNodeId(\"n6\"), toSet(\"p6\"), toNodeId(\"n7\"), toSet(\"p6\"))); assertLabelsToNodesEquals(mgr.getLabelsToNodes(), ImmutableMap.of( \"p6\", toSet(toNodeId(\"n6\"), toNodeId(\"n7\")), \"p4\", toSet(toNodeId(\"n4\")), \"p2\", toSet(toNodeId(\"n2\")))); mgr.stop(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting static Optional<S3Account> parseS3AccessPointArn(String s3AccessPointArn) { String trimmed = StringExt.safeTrim(s3AccessPointArn); if (trimmed.isEmpty()) { return Optional.empty(); } Matcher matcher = S3_ACCESS_POINT_ARN_RE.matcher(s3AccessPointArn); if (!matcher.matches()) { return Optional.empty(); } return Optional.of(new S3Account(matcher.group(2), matcher.group(1))); }### Assistant: @Test public void testParseS3AccessPointArn() { assertThat(LogStorageInfos.parseS3AccessPointArn(\"myBucket\")).isEmpty(); assertThat(LogStorageInfos.parseS3AccessPointArn(\"arn:aws:s3:us-west-2:123456789012:accesspoint/test\")).contains( new S3Account(\"123456789012\", \"us-west-2\") ); assertThat(LogStorageInfos.parseS3AccessPointArn(\"arn:aws:ec2:us-west-2:123456789012:accesspoint/test\")).isEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<TrustedCert> filter(String folderPath, FilterConfiguration filterConfiguration, Bundle bundle, Bundle filteredBundle) { List<TrustedCert> certificates = DependencyUtils.filterDependencies(TrustedCert.class, bundle, filteredBundle, e -> filterConfiguration.getRequiredEntityNames(ENTITY_NAME).contains(e.getName())); DependencyUtils.validateEntitiesInList(certificates, filterConfiguration.getRequiredEntityNames(ENTITY_NAME), \"Certificate(s)\"); return certificates; }### Assistant: @Test void filter() { TrustedCertificateFilter filter = new TrustedCertificateFilter(); Bundle filteredBundle = new Bundle(); filteredBundle.addEntity(TestUtils.createPolicy(\"my-policy\", \"1\", \"\", \"\", null, \"\")); Bundle bundle = FilterTestUtils.getBundle(); bundle.setDependencyMap( ImmutableMap.of( new Dependency(\"1\", Policy.class, \"my-policy\", EntityTypes.POLICY_TYPE), Arrays.asList(new Dependency(\"2\", TrustedCert.class, \"cert2\", EntityTypes.TRUSTED_CERT_TYPE), new Dependency(\"3\", TrustedCert.class, \"cert3\", EntityTypes.TRUSTED_CERT_TYPE)), new Dependency(\"2\", Policy.class, \"my-policy2\", EntityTypes.POLICY_TYPE), Collections.singletonList(new Dependency(\"4\", TrustedCert.class, \"cert4\", EntityTypes.TRUSTED_CERT_TYPE)))); bundle.addEntity(new TrustedCert.Builder().name(\"cert1\").id(\"1\").build()); bundle.addEntity(new TrustedCert.Builder().name(\"cert2\").id(\"2\").build()); bundle.addEntity(new TrustedCert.Builder().name(\"cert3\").id(\"3\").build()); bundle.addEntity(new TrustedCert.Builder().name(\"cert4\").id(\"4\").build()); FilterConfiguration filterConfiguration = new FilterConfiguration(); List<TrustedCert> filteredEntities = filter.filter(\"/my/folder/path\", filterConfiguration, bundle, filteredBundle); assertEquals(2, filteredEntities.size()); assertTrue(filteredEntities.stream().anyMatch(c -> \"cert2\".equals(c.getName()))); assertTrue(filteredEntities.stream().anyMatch(c -> \"cert3\".equals(c.getName()))); filterConfiguration.getEntityFilters().put(filter.getFilterableEntityName(), new HashSet<>()); filterConfiguration.getEntityFilters().get(filter.getFilterableEntityName()).add(\"cert1\"); filteredEntities = filter.filter(\"/my/folder/path\", filterConfiguration, bundle, filteredBundle); assertEquals(3, filteredEntities.size()); assertTrue(filteredEntities.stream().anyMatch(c -> \"cert2\".equals(c.getName()))); assertTrue(filteredEntities.stream().anyMatch(c -> \"cert3\".equals(c.getName()))); assertTrue(filteredEntities.stream().anyMatch(c -> \"cert1\".equals(c.getName()))); filterConfiguration.getEntityFilters().get(filter.getFilterableEntityName()).add(\"non-existing-entity\"); EntityFilterException entityFilterException = assertThrows(EntityFilterException.class, () -> filter.filter(\"/my/folder/path\", filterConfiguration, bundle, filteredBundle)); assertTrue(entityFilterException.getMessage().contains(\"non-existing-entity\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void putPolicy(ResourceContext ctx, String domainName, String policyName, String auditRef, Policy policy) { final String caller = ctx.getApiName(); logPrincipal(ctx); if (readOnlyMode) { throw ZMSUtils.requestError(SERVER_READ_ONLY_MESSAGE, caller); } validateRequest(ctx.request(), caller); validate(domainName, TYPE_DOMAIN_NAME, caller); validate(policyName, TYPE_COMPOUND_NAME, caller); validate(policy, TYPE_POLICY, caller); verifyAuthorizedServiceOperation(((RsrcCtxWrapper) ctx).principal().getAuthorizedService(), caller); domainName = domainName.toLowerCase(); setRequestDomain(ctx, domainName); policyName = policyName.toLowerCase(); AthenzObject.POLICY.convertToLowerCase(policy); if (policyName.equalsIgnoreCase(ADMIN_POLICY_NAME)) { throw ZMSUtils.requestError(\"putPolicy: admin policy cannot be modified\", caller); } if (!isConsistentPolicyName(domainName, policyName, policy)) { throw ZMSUtils.requestError(\"putPolicy: Inconsistent policy names - expected: \" + ZMSUtils.policyResourceName(domainName, policyName) + \", actual: \" + policy.getName(), caller); } validatePolicyAssertions(policy.getAssertions(), caller); dbService.executePutPolicy(ctx, domainName, policyName, policy, auditRef, caller); }### Assistant: @Test public void testPutPolicyLoopbackXFFMultipleValues() { HttpServletRequest servletRequest = Mockito.mock(HttpServletRequest.class); Mockito.when(servletRequest.getRemoteAddr()).thenReturn(\"127.0.0.1\"); Mockito.when(servletRequest.getHeader(\"X-Forwarded-For\")).thenReturn(\"10.10.10.11, 10.11.11.11, 10.12.12.12\"); Mockito.when(servletRequest.isSecure()).thenReturn(true); TestAuditLogger alogger = new TestAuditLogger(); ZMSImpl zmsObj = getZmsImpl(alogger); String userId = \"user\"; Principal principal = SimplePrincipal.create(\"user\", userId, \"v=U1;d=user;n=user;s=signature\", 0, null); ResourceContext context = createResourceContext(principal, servletRequest); String domainName = \"DomainName\"; String policyName = \"PolicyName\"; try { Policy policy = createPolicyObject(domainName, policyName); zmsObj.putPolicy(context, domainName, \"Bad\" + policyName, auditRef, policy); fail(\"requesterror not thrown.\"); } catch (ResourceException e) { assertEquals(e.getCode(), 400); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Organization resolveCurrentUserAffiliation(Credentials credentials) throws InvalidCredentialsException { SessionDescriptor descriptor = validate(credentials); UUID id = IdMapper.toGlobalID(getSubject(descriptor).getAffiliation()); return ObjectUtils.ifNull(resolveOrganization(id), createOrganization(id, NOT_AVAILABLE_NAME)); }### Assistant: @Test public void testResolveCurrentUserAffiliation() throws Exception { String content = \"\" + \"subject.1.name = subject\\n\" + \"subject.1.affiliation = 1\\n\" + \"organization.1.name = organization\\n\" + \"\"; setup(content); Organization organization = accessController.resolveCurrentUserAffiliation(createCredentials(1)); assertEquals(UUID.fromString(\"00000000-0000-0000-0000-000000000001\"), organization.getId()); assertEquals(\"organization\", organization.getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @NonNull public static <T> RPLayout<T, DBRPMain<T>> dataBindingRepositoryPresenterOf( @Nullable final Class<T> type) { return new DataBindingRepositoryPresenterCompiler(); }### Assistant: @Test public void shouldReturnStableIdForRepositoryPresenterOfItem() { final RepositoryPresenter<String> resultRepositoryPresenter = dataBindingRepositoryPresenterOf(String.class) .layout(LAYOUT_ID) .itemId(ITEM_ID) .stableIdForItem(Functions.<String, Long>staticFunction(STABLE_ID)) .forItem(); assertThat(resultRepositoryPresenter.getItemId(STRING, 0), is(STABLE_ID)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setStream(final InputStream is) { this.getDocument(is); }### Assistant: @Test(expected = FileNotFoundException.class) public void shouldTestMissingDocument() throws Exception { this.reader = new DummyReader(); this.reader.setStream(new FileInputStream(new File(\"src/test/resources/missing.xml\"))); Assert.fail(\"This code should not have been reached\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static NamenodeRole convert(NamenodeRoleProto role) { switch (role) { case NAMENODE: return NamenodeRole.NAMENODE; case BACKUP: return NamenodeRole.BACKUP; case CHECKPOINT: return NamenodeRole.CHECKPOINT; } return null; }### Assistant: @Test public void testConvertBlockToken() { Token<BlockTokenIdentifier> token = new Token<BlockTokenIdentifier>( \"identifier\".getBytes(), \"password\".getBytes(), new Text(\"kind\"), new Text(\"service\")); TokenProto tokenProto = PBHelper.convert(token); Token<BlockTokenIdentifier> token2 = PBHelper.convert(tokenProto); compare(token, token2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setAudiencesIfSpecified(String[] audiences) { if (!AnnotationUtil.isUnspecified(audiences)) { config.setAudiences(Arrays.asList(audiences)); } }### Assistant: @Test public void testSetAudiencesIfSpecified() throws Exception { String[] audiences = {\"foo\", \"bar\"}; annotationConfig.setAudiencesIfSpecified(audiences); Mockito.verify(config).setAudiences(Arrays.asList(audiences)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void handleNewInstructionEvent() { handleManeuverEvent(); }### Assistant: @Test public void testHandleNewInstructionEvent() { final Maneuver maneuver = MockUtils.mockManeuver(); GuidanceStreetLabelListener listener = mock(GuidanceStreetLabelListener.class); mGuidanceStreetLabelPresenter.addListener(listener); when(mNavigationManager.getNextManeuver()).thenReturn(maneuver); when(mNavigationManager.getNextManeuverDistance()).thenReturn(200L); mGuidanceStreetLabelPresenter.handleNewInstructionEvent(); verify(listener, times(2)).onDataChanged(any()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void add(User user){ this.storage.add(user); }### Assistant: @Test public void whenAddUserInStorageShouldSaveIt() throws Exception { User user = new User(); MemoryStorageImpl memoryStorage = new MemoryStorageImpl(); UserStorage userStorage = new UserStorage(memoryStorage); userStorage.add(user); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void showMessage( final ClientRuntimeError error) { StringBuilder result = new StringBuilder(DataSetExplorerConstants.INSTANCE.error()); if (error != null) { final String message = error.getMessage(); Throwable t = error.getRootCause(); String localizedMessage = t != null ? t.getLocalizedMessage() : null; result = new StringBuilder(message); if (localizedMessage != null) { result.append(\" \").append(DataSetExplorerConstants.INSTANCE.cause()). append(\": \").append(localizedMessage); } } showMessage(result.toString()); }### Assistant: @Test public void testShowMessage() throws Exception { final ClientRuntimeError error = mock(ClientRuntimeError.class); final String message = \"message\"; final Throwable cause = mock(Throwable.class); final String localizedMessage = \"localizedMessage\"; when(cause.getLocalizedMessage()).thenReturn(localizedMessage); when(error.getMessage()).thenReturn(message); when(error.getRootCause()).thenReturn(cause); presenter.showMessage(error); verify(view, times(1)).showMessage(anyString(), any(Command.class), any(Command.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static double interpolateAngles(double y2, double y1, double y3, double n) { final double a = DoubleUtil.unwindAngle(y2 - y1); final double b = DoubleUtil.unwindAngle(y3 - y2); final double c = b - a; return y2 + ((n/2) * (a + b + (n * c))); }### Assistant: @Test public void testAngleInterpolation() { final double i1 = Astronomical.interpolateAngles( 1, -1, 3, 0.6); assertThat(i1).isWithin(0.000001).of(2.2); final double i2 = Astronomical.interpolateAngles( 1, 359, 3, 0.6); assertThat(i2).isWithin(0.000001).of(2.2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setDataProvider(PlantUMLDataProvider provider) { this.provider=provider; }### Assistant: @Test public void data_provider_gives_PNG_so_outputformat_png() { ContentTransformerData data = new ContentTransformerData(); data.filename=\"filename\"; data.origin=\"origin\"; transformerToTest.setDataProvider(new PlantUMLDataProvider() { @Override public PlantUMLOutputFormat getOutputFormat() { return PlantUMLOutputFormat.PNG; } }); String result = transformerToTest.transform(data); assertEquals(\"[plantuml,filename,png]\\n\" + \"----\\n\" + \"origin\\n\" + \"----\\n\" + \"\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Permission getParent( final UnitOfWork transaction ) throws KException { ArgCheck.isNotNull( transaction, \"transaction\" ); ArgCheck.isTrue( ( transaction.getState() == State.NOT_STARTED ), \"transaction state must be NOT_STARTED\" ); final KomodoObject grouping = super.getParent( transaction ); final Permission result = Permission.RESOLVER.resolve( transaction, grouping.getParent( transaction ) ); return result; }### Assistant: @Test public void shouldHaveParentPermission() throws Exception { assertThat( this.condition.getParent( getTransaction() ), is( instanceOf( Permission.class ) ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void acquire(Handler<AsyncResult<Connection>> waiter) { if (context != null) { context.emit(waiter, this::doAcquire); } else { doAcquire(waiter); } }### Assistant: @Test public void testMaxQueueSize1() { ConnectionQueue queue = new ConnectionQueue(); ConnectionPool pool = new ConnectionPool(queue, 1, 0); SimpleHolder holder1 = new SimpleHolder(); pool.acquire(holder1); SimpleConnection conn = new SimpleConnection(); queue.connect(conn); holder1.init(); SimpleHolder holder2 = new SimpleHolder(); pool.acquire(holder2); assertTrue(holder2.isFailed()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Boolean getValue() { return value; }### Assistant: @Test public void shouldBeAbleToSetValue() { shutdownOnPowerDisconnect.update(false); assertFalse(shutdownOnPowerDisconnect.getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<User> getHotUsers(String category) throws WeiboException{ return User.constructUsers(get(getBaseURL()+\"users/hot.json\",\"category\", category, true)); }### Assistant: @Test public void testGetHotUsers() throws WeiboException { String category=\"ent\"; assertNotNull(weibo.getHotUsers(category)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> void process(final String collectionName, final Function<List<String>, String> batchQueryFn, final Collection<String> primaryEntries, final Class<T> resultClass, final Consumer<T> consumer) { List<String> asList = new ArrayList<>(); asList.addAll(primaryEntries); final List<List<String>> batches = splitList(this.batchSize, asList); batches.forEach(batch -> { final List<T> dbEntry = repoHandler.getListByQuery(collectionName, batchQueryFn.apply(batch), resultClass); if(dbEntry.size() < batch.size()) { LOG.warn(String.format(\"Got fewer results %s < %s\", dbEntry.size(), batch.size())); LOG.warn(\"There are referred dependencies not related to known artifacts\"); } dbEntry.forEach(consumer); }); }### Assistant: @Test public void consumerIsUsedOnAllReturnedEntities() { List<String> fullList = generateList(4); List<String> batch = generateList(1); final BatchProcessor sut = makeSut(batch, 1); Consumer<String> consumerMock = mock(Consumer.class); sut.process(\"Some collection\", b -> \"\", fullList, String.class, consumerMock); verify(consumerMock, times(fullList.size())).accept(anyString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AmazonItem[] updateAmazonItems() { if (this.mAmazonItems == null) { return getAmazonItems(); } Float[] prices = getPrices(this.mDocuments); for (int i = 0; i < this.mAmazonItems.length; i++) { if (this.mDocuments[i] == null) { this.mAmazonItems[i] = null; } else { this.mAmazonItems[i] = this.mAmazonItems[i].updateItem(prices[i]); } } return this.mAmazonItems; }### Assistant: @Test public void updateAmazonItemsTest() { AmazonItem[] items = new AmazonItemLookUp(itemsExamples).getAmazonItems(); AmazonItemLookUp itemLookUp = new AmazonItemLookUp(items, 500); AmazonItem[] updatedItems = itemLookUp.updateAmazonItems(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) { return type == Reader.class; }### Assistant: @Test public void isReadableForReader() throws Exception { assertTrue(readerEntityProvider.isReadable(Reader.class, null, null, null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setTarget(IAtomContainer aTarget) { target = aTarget; }### Assistant: @Test public void testSetTarget() { IAtomContainer expResult = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class); handler.setTarget(expResult); IAtomContainer result = handler.getTarget(); Assert.assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Child> getRecordsForFirstPage() throws JSONException { List<Child> children = repository.getFirstPageOfChildrenMatchingString(searchKey); return filterChildrenWithRegularExpression(children, highlightedFields); }### Assistant: @Test public void shouldMatchOfSearchTermInCorrectOrder() throws JSONException, IOException { Child child1 = new Child(\"id1\", \"user1\", \"{ 'name' : 'first second', 'test2' : 0, 'test3' : [ '1', 2, '3' ] }\"); Child child2 = new Child(\"id2\", \"user1\", \"{ 'name' : 'john smith', 'test2' : 0, 'test3' : [ '1', 2, '3' ] }\"); repository.createOrUpdate(child1); repository.createOrUpdate(child2); childSearch = new ChildSearch(\"first second\", repository, highlightedFormFields); List<Child> children = childSearch.getRecordsForFirstPage(); assertEquals(1, children.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static public JobConf createJob(String[] argv) throws IOException { StreamJob job = new StreamJob(); job.argv_ = argv; job.init(); job.preProcessArgs(); job.parseArgv(); job.postProcessArgs(); job.setJobConf(); return job.jobConf_; }### Assistant: @Test public void testCreateJob() throws IOException { JobConf job; ArrayList<String> dummyArgs = new ArrayList<String>(); dummyArgs.add(\"-input\"); dummyArgs.add(\"dummy\"); dummyArgs.add(\"-output\"); dummyArgs.add(\"dummy\"); dummyArgs.add(\"-mapper\"); dummyArgs.add(\"dummy\"); dummyArgs.add(\"-reducer\"); dummyArgs.add(\"dummy\"); ArrayList<String> args; args = new ArrayList<String>(dummyArgs); args.add(\"-inputformat\"); args.add(\"org.apache.hadoop.mapred.KeyValueTextInputFormat\"); job = StreamJob.createJob(args.toArray(new String[] {})); assertEquals(KeyValueTextInputFormat.class, job.getInputFormat().getClass()); args = new ArrayList<String>(dummyArgs); args.add(\"-inputformat\"); args.add(\"org.apache.hadoop.mapred.SequenceFileInputFormat\"); job = StreamJob.createJob(args.toArray(new String[] {})); assertEquals(SequenceFileInputFormat.class, job.getInputFormat().getClass()); args = new ArrayList<String>(dummyArgs); args.add(\"-inputformat\"); args.add(\"org.apache.hadoop.mapred.KeyValueTextInputFormat\"); args.add(\"-inputreader\"); args.add(\"StreamXmlRecordReader,begin=<doc>,end=</doc>\"); job = StreamJob.createJob(args.toArray(new String[] {})); assertEquals(StreamInputFormat.class, job.getInputFormat().getClass()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String encodePathSegment(@Nonnull String pathSegment) { if (pathSegment.isEmpty()) { throw new IllegalArgumentException(\"Cannot provide empty path segment\"); } return urlPathSegmentEscaper().escape(pathSegment); }### Assistant: @Test public void encodePathSegment_uuid() { UUID uuid = UUID.randomUUID(); assertEquals(uuid.toString(), HttpUtils.encodePathSegment(uuid)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validateJobId(String jobId) throws LoadBalancerException, JobManagerException { Job job = v3JobOperations.getJob(jobId).orElseThrow(() -> JobManagerException.v3JobNotFound(jobId)); JobState state = job.getStatus().getState(); if (state != JobState.Accepted) { throw JobManagerException.unexpectedJobState(job, JobState.Accepted); } JobDescriptor.JobDescriptorExt extensions = job.getJobDescriptor().getExtensions(); if (!(extensions instanceof ServiceJobExt)) { throw JobManagerException.notServiceJob(jobId); } int maxLoadBalancers = loadBalancerValidationConfiguration.getMaxLoadBalancersPerJob(); int numLoadBalancers = loadBalancerStore.getNumLoadBalancersForJob(jobId); if (numLoadBalancers > maxLoadBalancers) { throw LoadBalancerException.jobMaxLoadBalancers(jobId, numLoadBalancers, maxLoadBalancers); } }### Assistant: @Test public void testValidateJobIsService() throws Exception { when(jobOperations.getJob(JOB_ID)).thenReturn(Optional.of(Job.<BatchJobExt>newBuilder() .withId(JOB_ID) .withStatus(JobStatus.newBuilder() .withState(JobState.Accepted) .build()) .withJobDescriptor(JobDescriptor.<BatchJobExt>newBuilder() .build()) .build())); Throwable thrown = catchThrowable(() -> loadBalancerValidator.validateJobId(JOB_ID)); assertThat(thrown).isInstanceOf(JobManagerException.class); assertThat(((JobManagerException) thrown).getErrorCode()).isEqualTo(JobManagerException.ErrorCode.NotServiceJob); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void mimicMethods(CtClass src, CtClass dst, MimicMode defaultMimicMode, MimicMethod[] mimicMethods) throws MimicException, CannotCompileException, NotFoundException { HashMap<String, MimicMode> mapNameToMimicMode = buildMimicModeMethodMap(mimicMethods); HashMap<String, String> mapNameToInsertionMethod = buildInsertionMethodMap(mimicMethods); for (final CtMethod method : src.getDeclaredMethods()) { log.fine(\"Mimic method \" + method.getName()); boolean destHasSameMethod = false; for (CtMethod methodInDest : dst.getDeclaredMethods()) { String signature = method.getSignature() + method.getName(); String signatureInDest = methodInDest.getSignature() + methodInDest.getName(); if (signatureInDest.equals(signature)) { destHasSameMethod = true; log.fine(\"Forwarding \" + method.getName()); String key = this.key == null ? \"\" : (this.key + \"_\"); final String copiedMethodName = \"_copy_\" + key + method.getName(); dst.addMethod(CtNewMethod.copy(method, copiedMethodName, dst, null)); CtMethod insertionMethod = null; MimicMode mimicMode = defaultMimicMode; if (mapNameToMimicMode.containsKey(method.getName())) { mimicMode = mapNameToMimicMode.get(method.getName()); String insertionMethodName = mapNameToInsertionMethod.get(method.getName()); insertionMethod = findMethod(dst, insertionMethod, insertionMethodName); } log.fine(\"Mimic mode \" + mimicMode); switch (mimicMode) { case AT_BEGINNING: methodInDest.insertBefore(createInvocation(methodInDest, copiedMethodName)); break; case BEFORE_RETURN: String returnString = method.getReturnType() == null ? \"\" : \"return \"; methodInDest.insertAfter(returnString + createInvocation(methodInDest, copiedMethodName)); break; case BEFORE: case AFTER: ReplaceExprEditor editor = new ReplaceExprEditor(copiedMethodName, method, insertionMethod, mimicMode); methodInDest.instrument(editor); if (!editor.isSuccessful()) { throw new MimicException(\"No replacement for method:\" + method.getName() + \" with insertion AFTER \" + (insertionMethod == null ? \"insertion method is null\" : insertionMethod.getName())); } break; case BEFORE_SUPER: case AFTER_SUPER: case REPLACE_SUPER: ReplaceExprEditor editor2 = new ReplaceExprEditor(copiedMethodName, method, mimicMode); methodInDest.instrument(editor2); if (!editor2.isSuccessful()) { throw new MimicException(\"No replacement for method:\" + method.getName() + \" with insertion REPLACE_SUPER \"); } break; default: break; } } } if (!destHasSameMethod) { log.fine(\"Copying \" + method.getName()); dst.addMethod(CtNewMethod.copy(method, dst, null)); } } }### Assistant: @Test(expected=MimicException.class) public void testMimicMethods_with_same_methods_with_before_super_but_not_calling_super() throws Exception { src.addField(new CtField(CtClass.intType, \"foo\", src)); src.addMethod(CtNewMethod.make(\"public boolean foo() { foo = 2; return false ; }\", src)); CtClass dstAncestor = ClassPool.getDefault().makeClass(\"DstAncestor\" + TestCounter.testCounter); CtField field = new CtField(CtClass.intType, \"foo\", dstAncestor); field.setModifiers(Modifier.PUBLIC); dstAncestor.addField(field); dstAncestor.addMethod(CtNewMethod.make(\"public boolean foo(int a) { foo *= 2; return true; }\", dstAncestor)); dstAncestor.addConstructor(CtNewConstructor.make(\"public \" + dstAncestor.getName() + \"() {}\", dstAncestor)); dst.setSuperclass(dstAncestor); dst.addMethod(CtNewMethod.make(\"public boolean foo() { foo = 1; return foo(1);}\", dst)); dstAncestor.toClass(); mimicCreator.mimicMethods(src, dst, MimicMode.BEFORE_SUPER, new MimicMethod[0]); Class<?> dstClass = dst.toClass(); assertHasFooField(dst); Object dstInstance = dstClass.newInstance(); invokeFoo(dstInstance); assertHasFooField(dstInstance, 2); assertHasFooMethod(dst, dstClass); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <A, R> Func0<R> apply(final Func1<A, R> func1, final A first) { return new Func0<R>() { @Override public R call() { return func1.call(first); } }; }### Assistant: @Test public void apply() throws Exception { List<Class<?>> classes = Observable .from(RxPartialFunc.apply(ACTION_6, 1, 2, 3).getClass().getInterfaces()) .filter(TestHelpers.classCompare(Func3.class)).toList().toBlocking().first(); Assert.assertEquals(1, classes.size()); classes = Observable .from(RxPartialFunc.apply(ACTION_9, 1, 2, 3, 4, 5, 6, 7, 8, 9).getClass() .getInterfaces()) .filter(TestHelpers.classCompare(Func0.class)).toList().toBlocking().first(); Assert.assertEquals(1, classes.size()); classes = Observable .from(RxPartialFunc.apply(ACTION_N, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3).getClass() .getInterfaces()).filter(TestHelpers.classCompare(Func0.class)).toList() .toBlocking().first(); Assert.assertEquals(1, classes.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public PreparedStatement prepareStatement( String sql ) throws SQLException { throw new SQLFeatureNotSupportedException(); }### Assistant: @Test( expected = SQLFeatureNotSupportedException.class ) public void featureNotSupportedCallingPrepareStatement() throws SQLException { conn.prepareStatement(\"sql\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final static String readLargeFile(File file) throws IOException { FileChannel channel = new FileInputStream(file).getChannel(); ByteBuffer buffer = ByteBuffer.allocate((int) channel.size()); channel.read(buffer); channel.close(); return new String(buffer.array()); }### Assistant: @Test(invocationCount = 4) public void testReadLargeFile() throws Exception { Random random = new Random(9999); int iterations = 20; long before = System.nanoTime(); URL testFile = FileUtilTest.class.getResource(\"/text1k.txt\"); File textFile = new File(testFile.toURI()); for (int i = 0; i < iterations; i++) { textFile = uncacheFile(random, textFile); FileUtil.readLargeFile(textFile); } System.out.println(\"1k: \" + ((System.nanoTime() - before) / 1000L / 1000L) + \"ms\"); textFile.renameTo(new File(testFile.toURI())); testFile = FileUtilTest.class.getResource(\"/text8k.txt\"); textFile = new File(testFile.toURI()); for (int i = 0; i < iterations; i++) { textFile = uncacheFile(random, textFile); FileUtil.readLargeFile(textFile); } System.out.println(\"8k: \" + ((System.nanoTime() - before) / 1000L / 1000L) + \"ms\"); textFile.renameTo(new File(testFile.toURI())); testFile = FileUtilTest.class.getResource(\"/text96k.txt\"); textFile = new File(testFile.toURI()); for (int i = 0; i < iterations; i++) { textFile = uncacheFile(random, textFile); FileUtil.readLargeFile(textFile); } System.out.println(\"96k: \" + ((System.nanoTime() - before) / 1000L / 1000L) + \"ms\"); textFile.renameTo(new File(testFile.toURI())); testFile = FileUtilTest.class.getResource(\"/text1m.txt\"); textFile = new File(testFile.toURI()); for (int i = 0; i < iterations; i++) { textFile = uncacheFile(random, textFile); FileUtil.readLargeFile(textFile); } System.out.println(\"1m: \" + ((System.nanoTime() - before) / 1000L / 1000L) + \"ms\"); textFile.renameTo(new File(testFile.toURI())); testFile = FileUtilTest.class.getResource(\"/text10m.txt\"); textFile = new File(testFile.toURI()); for (int i = 0; i < iterations; i++) { textFile = uncacheFile(random, textFile); FileUtil.readLargeFile(textFile); } System.out.println(\"10m: \" + ((System.nanoTime() - before) / 1000L / 1000L) + \"ms\"); textFile.renameTo(new File(testFile.toURI())); System.out.println(\"End testReadLargeFile\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String asJsonString(final Object _object) { return JacksonUtil.asJsonString(_object, null, null); }### Assistant: @Test public void testAppAsJsonStringWithView() { final Application app = new Application(\"com.acme\", \"foo\", \"0.1\"); final Library lib = new Library(\"digest-123\"); lib.setDigestAlgorithm(DigestAlgorithm.SHA256); final Set<Property> props = new HashSet<Property>(); props.add(new Property(PropertySource.JAVA_MANIFEST, \"foo-prop\", \"bar-prop\")); lib.setProperties(props); final Set<ConstructId> cons = new HashSet<ConstructId>(); cons.add(new ConstructId(ProgrammingLanguage.JAVA, ConstructType.METH, \"com.foo.Bar\")); lib.setConstructs(cons); app.addDependency(new Dependency(app, lib, Scope.COMPILE, false, \"fo0-lib.jar\", \"/tmp/\")); final String json_no_view = JacksonUtil.asJsonString(app, null, null); final String json_default_view = JacksonUtil.asJsonString(app, null, Views.Default.class); final String json_lib_view = JacksonUtil.asJsonString(app, null, Views.LibDetails.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected final Boolean queryRewrite(Graph graph, Node subject, Node predicate, Node object, QueryRewriteIndex queryRewriteIndex) { if (graph.contains(subject, predicate, object)) { return true; } if (!queryRewriteIndex.isIndexActive()) { return false; } SpatialObjectGeometryLiteral subjectSpatialLiteral = SpatialObjectGeometryLiteral.retrieve(graph, subject); if (!subjectSpatialLiteral.isValid()) { return false; } SpatialObjectGeometryLiteral objectSpatialLiteral = SpatialObjectGeometryLiteral.retrieve(graph, object); if (!objectSpatialLiteral.isValid()) { return false; } Property predicateProp = ResourceFactory.createProperty(predicate.getURI()); Boolean isPositive = queryRewriteIndex.test(subjectSpatialLiteral.getGeometryLiteral(), predicateProp, objectSpatialLiteral.getGeometryLiteral(), this); return isPositive; }### Assistant: @Test public void testQueryRewrite_feature_feature_disjoint_false() { Graph graph = model.getGraph(); Node subject = FEATURE_A.asNode(); Node predicate = Geo.SF_DISJOINT_NODE; Node object = FEATURE_B.asNode(); GenericPropertyFunction instance = new SfDisjointPF(); QueryRewriteIndex queryRewriteIndex = QueryRewriteIndex.createDefault(); Boolean expResult = false; Boolean result = instance.queryRewrite(graph, subject, predicate, object, queryRewriteIndex); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DefaultMetadataHeaderKey of(final JsonPointer path) { final DefaultMetadataHeaderKey result = new DefaultMetadataHeaderKey(checkNotNull(path, \"path\")); result.validate(); return result; }### Assistant: @Test public void wildcardPathHasTooManyLevels() { assertThatIllegalArgumentException() .isThrownBy(() -> DefaultMetadataHeaderKey.of(JsonPointer.of(\"/*/foo/meta\"))) .withMessage(\"A wildcard path of a metadata header key must have exactly two levels but it had <3>!\") .withNoCause(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ThingModifyCommandResponseAdapter of(final HeaderTranslator headerTranslator) { return new ThingModifyCommandResponseAdapter(requireNonNull(headerTranslator)); }### Assistant: @Test public void modifyFeaturePropertiesResponseToAdaptable() { final TopicPath topicPath = topicPath(TopicPath.Action.MODIFY); final JsonPointer path = JsonPointer.of(\"/features/\" + TestConstants.FEATURE_ID + \"/properties\"); final Adaptable expectedCreated = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path) .withStatus(HttpStatusCode.CREATED) .withValue(TestConstants.FEATURE_PROPERTIES) .build()) .withHeaders(TestConstants.HEADERS_V_2) .build(); final ModifyFeaturePropertiesResponse modifyFeaturePropertiesResponseCreated = ModifyFeaturePropertiesResponse .created(TestConstants.THING_ID, TestConstants.FEATURE_ID, TestConstants.FEATURE_PROPERTIES, TestConstants.DITTO_HEADERS_V_2); final Adaptable actualCreated = underTest.toAdaptable(modifyFeaturePropertiesResponseCreated, channel); assertWithExternalHeadersThat(actualCreated).isEqualTo(expectedCreated); final Adaptable expectedModified = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path) .withStatus(HttpStatusCode.NO_CONTENT) .build()) .withHeaders(TestConstants.HEADERS_V_2) .build(); final ModifyFeaturePropertiesResponse modifyFeaturePropertiesResponseModified = ModifyFeaturePropertiesResponse.modified(TestConstants.THING_ID, TestConstants.FEATURE_ID, TestConstants.HEADERS_V_2_NO_CONTENT_TYPE); final Adaptable actualModified = underTest.toAdaptable(modifyFeaturePropertiesResponseModified, channel); assertWithExternalHeadersThat(actualModified).isEqualTo(expectedModified); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String telnet(Channel channel, String message) { if (message.length() > 0) { return \"Unsupported parameter \" + message + \" for pwd.\"; } String service = (String) channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY); StringBuilder buf = new StringBuilder(); if (service == null || service.length() == 0) { buf.append(\"/\"); } else { buf.append(service); } return buf.toString(); }### Assistant: @Test public void testMessageError() throws RemotingException { mockChannel = mock(Channel.class); given(mockChannel.getAttribute(\"telnet.service\")).willReturn(null); String result = count.telnet(mockChannel, \"test\"); assertEquals(\"Unsupported parameter test for pwd.\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static UserNotification create(String message, String type, long timestamp) { UserNotification userNotification = new UserNotification(); userNotification.timestamp = timestamp; userNotification.message = message; switch (type) { case \"bg_alert\": userNotification.bg_alert = true; break; case \"calibration_alert\": userNotification.calibration_alert = true; break; case \"double_calibration_alert\": userNotification.double_calibration_alert = true; break; case \"extra_calibration_alert\": userNotification.extra_calibration_alert = true; break; case \"bg_unclear_readings_alert\": userNotification.bg_unclear_readings_alert = true; break; case \"bg_missed_alerts\": userNotification.bg_missed_alerts = true; break; case \"bg_rise_alert\": userNotification.bg_rise_alert = true; break; case \"bg_fall_alert\": userNotification.bg_fall_alert = true; break; default: Log.d(TAG, \"Saving workaround for: \" + type + \" \" + message); PersistentStore.setString(\"UserNotification:timestamp:\" + type, String.format(Locale.US, \"%d\", (long) timestamp)); PersistentStore.setString(\"UserNotification:message:\" + type, message); return null; } userNotification.save(); return userNotification; }### Assistant: @Test public void createBgRiseAlertNotification() { long timestamp = System.currentTimeMillis(); String message = \"testMessage\"; UserNotification userNotification = UserNotification .create(message, \"bg_rise_alert\", timestamp); assertThat(userNotification).isNotNull(); assertThat(userNotification.timestamp).isWithin(0).of(timestamp); assertThat(userNotification.bg_rise_alert).isTrue(); assertThat(userNotification.message).isEqualTo(message); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected boolean isBetterLocation(Location location, Location currentBestLocation) { if (currentBestLocation == null) { return true; } long timeDelta = location.getTime() - currentBestLocation.getTime(); boolean isSignificantlyNewer = timeDelta > TWO_MINUTES; boolean isSignificantlyOlder = timeDelta < -TWO_MINUTES; boolean isNewer = timeDelta > 0; if (isSignificantlyNewer) { return true; } else if (isSignificantlyOlder) { return false; } int accuracyDelta = (int)(location.getAccuracy() - currentBestLocation.getAccuracy()); boolean isLessAccurate = accuracyDelta > 0; boolean isMoreAccurate = accuracyDelta < 0; boolean isSignificantlyLessAccurate = accuracyDelta > 200; boolean isFromSameProvider = isSameProvider(location.getProvider(), currentBestLocation.getProvider()); if (isMoreAccurate) { return true; } else if (isNewer && !isLessAccurate) { return true; } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) { return true; } return false; }### Assistant: @Test public void setIsBetterLocationWhenGivenMoreAccurateLocationShouldReturnTrue() { int olderTime = 30 * 1000; long timeNow = System.currentTimeMillis(); Location currentLocation = generateLocation(12, timeNow - olderTime); Location newLocation = generateLocation(3, timeNow); assertTrue(testLocationClient.isBetterLocation(newLocation, currentLocation)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @PostMapping(\"/commands\") public ResponseEntity<?> createCommand(@RequestBody final TransporterCommand command) { if(commandOrchestrator.isInboundCommandExist(command.getRefId())){ return new ResponseEntity<>(HttpStatus.CONFLICT); } this.commandOrchestrator.receive(commandMapper.transform(command)); return new ResponseEntity<>( HttpStatus.ACCEPTED ); }### Assistant: @Test public void testCreateCommandWhenInboundCommandNotExist() { final TransporterCommand command = mock(TransporterCommand.class); when(mockCommandOrchestrator.isInboundCommandExist(command.getRefId())).thenReturn(false); final ResponseEntity<?> result = commandControllerUnderTest.createCommand(command); assertEquals(result.getStatusCode(), HttpStatus.ACCEPTED); verify(mockCommandOrchestrator).receive(any(InboundCommand.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String reverse(String sentence) { if (sentence == null) { throw new IllegalArgumentException(\"Input param can't be null.\"); } StringBuilder stringBuilder = new StringBuilder(); String[] words = sentence.split(WORD_SEPARATOR); for (int i = words.length - 1; i >= 0; i--) { stringBuilder.append(words[i]); if (i != 0) { stringBuilder.append(\" \"); } } return stringBuilder.toString(); }### Assistant: @Test public void shouldReverseSentenceWithMoreThanOneWord() { String input = \"pedro vicente g\u00f3mez\"; String result = reverseSentence.reverse(input); assertEquals(\"g\u00f3mez vicente pedro\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AmplNetworkReader readHvdcLines() throws IOException { read(\"_hvdc\", 4, this::readHvdcLine); return this; }### Assistant: @Test public void readHvdcLines() throws IOException { Network network = HvdcTestNetwork.createLcc(); StringToIntMapper<AmplSubset> mapper = AmplUtil.createMapper(network); ReadOnlyDataSource dataSource = new ResourceDataSource(\"lcc-test\", new ResourceSet(\"/outputs/\", \"lcc-test_hvdc.txt\", \"lcc-test_shunts.txt\", \"lcc-test_lcc_converter_stations.txt\")); AmplNetworkReader reader = new AmplNetworkReader(dataSource, network, mapper); testHvdc(network, reader); testShunts(network, reader); testLcc(network, reader); Network network2 = HvdcTestNetwork.createVsc(); StringToIntMapper<AmplSubset> mapper2 = AmplUtil.createMapper(network2); ReadOnlyDataSource dataSource2 = new ResourceDataSource(\"vsc-test\", new ResourceSet(\"/outputs/\", \"vsc-test_vsc_converter_stations.txt\")); AmplNetworkReader reader2 = new AmplNetworkReader(dataSource2, network2, mapper2); testVsc(network2, reader2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean updateDBInfo(DataBaseInfo dataBaseInfo) throws SQLException { dataBaseInfo.setDb_password(DasEnv.encdecConfiguration.encrypt(dataBaseInfo.getDb_password())); return dataBaseDao.updateDataBaseInfo(dataBaseInfo) > 0; }### Assistant: @Test public void updateGroupDBTest() throws SQLException { DataBaseInfo groupDb = DataBaseInfo.builder().group_name(\"name\").build(); Assert.assertTrue(databaseService.updateDBInfo(groupDb)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SSHRecordStoreConnection getConnection() { try { return new DynamoDBSSHRecordStoreConnection(dynamoDB, tableName); } catch (Exception ex) { LOGGER.error(\"getConnection: {}\", ex.getMessage()); throw new ResourceException(ResourceException.SERVICE_UNAVAILABLE, ex.getMessage()); } }### Assistant: @Test public void testGetConnection() { DynamoDBSSHRecordStore store = new DynamoDBSSHRecordStore(dbClient, \"Athenz-ZTS-Table\", null); SSHRecordStoreConnection dbConn = store.getConnection(); assertNotNull(dbConn); store.setOperationTimeout(10); store.clearConnections(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Meta meta() { return getMeta(this); }### Assistant: @Test public void testNonFinalProperty() throws Exception { NonFinalProperty propoid = new NonFinalProperty(); try { propoid.property.meta(); fail(); } catch (Exception expected) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting boolean equivalent(QuantileDigest other) { return (getNodeCount() == other.getNodeCount() && min == other.min && max == other.max && weightedCount == other.weightedCount && alpha == other.alpha); }### Assistant: @Test public void testEquivalenceComplex() { QuantileDigest a = new QuantileDigest(0.01); QuantileDigest b = new QuantileDigest(0.01); addAll(a, asList(0, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7)); addAll(b, asList(0, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7)); assertTrue(a.equivalent(b)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public RulesProfile createProfile(ValidationMessages messages) { AnnotationBasedProfileBuilder annotationBasedProfileBuilder = new AnnotationBasedProfileBuilder(ruleFinder); return annotationBasedProfileBuilder.build( CheckList.SCSS_REPOSITORY_KEY, SONARQUBE_WAY_PROFILE_NAME, ScssLanguage.KEY, CheckList.getScssChecks(), messages); }### Assistant: @Test public void should_create_sonarqube_way_profile() { ValidationMessages validation = ValidationMessages.create(); ScssProfile definition = new ScssProfile(universalRuleFinder()); RulesProfile profile = definition.createProfile(validation); assertThat(profile.getName()).isEqualTo(\"SonarQube Way\"); assertThat(profile.getLanguage()).isEqualTo(\"scss\"); assertThat(profile.getActiveRulesByRepository(\"scss\")).hasSize(83); assertThat(validation.hasErrors()).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<String> arguments(Pattern pattern, String state) { final List<String> argumentsValues = new ArrayList<>(); Matcher matcher = pattern.matcher(state); if (matcher.lookingAt()) { for (int i = 1; i <= matcher.groupCount(); i++) { int startIndex = matcher.start(i); if (startIndex == -1) { argumentsValues.add(\"\"); } else { argumentsValues.add(matcher.group(i)); } } } return argumentsValues; }### Assistant: @Test public void should_extract_arguments_if_list() { List<String> arguments = ArgumentPatternMatcher.arguments(Pattern.compile(\"The following animals: (.*)\"), \"The following animals: dog, cat, mouse\"); assertThat(arguments).containsExactly(\"dog, cat, mouse\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T3> get3() { return getAndCast(3); }### Assistant: @Test void get3() { assertEquals(m3, instance.get3()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void cancelConnection() { if (bluetoothGatt == null) { Timber.w(\"cannot cancel connection because no connection attempt is made yet\"); return; } if (state == BluetoothProfile.STATE_DISCONNECTED || state == BluetoothProfile.STATE_DISCONNECTING) { return; } cancelConnectionTimer(); if (state == BluetoothProfile.STATE_CONNECTING) { disconnect(); mainHandler.postDelayed(new Runnable() { @Override public void run() { bluetoothGattCallback.onConnectionStateChange(bluetoothGatt, GATT_SUCCESS, BluetoothProfile.STATE_DISCONNECTED); } }, 50); } else { disconnect(); } }### Assistant: @Test public void cancelConnectionTest() throws Exception { peripheral.connect(); ShadowLooper.runUiThreadTasksIncludingDelayedTasks(); ArgumentCaptor<BluetoothGattCallback> captor = ArgumentCaptor.forClass(BluetoothGattCallback.class); verify(device).connectGatt(any(Context.class), anyBoolean(), captor.capture(), anyInt()); BluetoothGattCallback callback = captor.getValue(); callback.onConnectionStateChange(gatt, GATT_SUCCESS, STATE_CONNECTED); peripheral.cancelConnection(); verify(gatt).disconnect(); assertEquals(STATE_DISCONNECTING, peripheral.getState()); callback.onConnectionStateChange(gatt, GATT_SUCCESS, STATE_DISCONNECTED); verify(gatt).close(); assertEquals(STATE_DISCONNECTED, peripheral.getState()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Stream<Long> fibonacci() { return new Fibonacci().from(0L, 1L).iterate(); }### Assistant: @Test public void fibonacciStream() { assertThat(fibonacci().limit(7)) .containsExactly(0L, 1L, 1L, 2L, 3L, 5L, 8L) .inOrder(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure @Inline(value = \"$3.formatHex($1, $2)\", imported = {StringEscaper.class}) public static String formatHex(int amount, int digits) { return StringEscaper.formatHex(amount, digits); }### Assistant: @Test public void formatHex_02() { assertEquals(\"4f\", TextUtil.formatHex(0x4F, 2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public Optional<T4> get4() { return Optional.ofNullable((T4) values[4]); }### Assistant: @Test void get4Test() { assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { try { Method reflectionMethod = method.getMethod(); Object[] parameters = this.info.getParameters(); log.debug(\"Invoking {}\", Stringnifier.simpleNameFor(reflectionMethod)); Object result = reflectionMethod.invoke(resourceInstance, parameters); if (validator.hasErrors()) { if (log.isDebugEnabled()) { try { validator.onErrorUse(nothing()); } catch (ValidationException e) { log.debug(\"Some validation errors occured: {}\", e.getErrors()); } } throw new InterceptionException( \"There are validation errors and you forgot to specify where to go. Please add in your method \" + \"something like:\\n\" + \"validator.onErrorUse(page()).of(AnyController.class).anyMethod();\\n\" + \"or any view that you like.\\n\" + \"If you didn't add any validation error, it is possible that a conversion error had happened.\"); } if (reflectionMethod.getReturnType().equals(Void.TYPE)) { this.info.setResult(\"ok\"); } else { this.info.setResult(result); } stack.next(method, resourceInstance); } catch (IllegalArgumentException e) { throw new InterceptionException(e); } catch (IllegalAccessException e) { throw new InterceptionException(e); } catch (InvocationTargetException e) { Throwable cause = e.getCause(); if (cause instanceof ValidationException) { log.trace(\"swallowing {}\", cause); } else { throw new ApplicationLogicException(\"your controller raised an exception\", cause); } } }### Assistant: @Test public void shouldUseTheProvidedArguments() throws SecurityException, NoSuchMethodException, InterceptionException, IOException { ResourceMethod method = new DefaultResourceMethod(null, DogAlike.class.getMethod(\"bark\", int.class)); DogAlike auau = mock(DogAlike.class); when(info.getParameters()).thenReturn(new Object[] { 3 }); interceptor.intercept(stack, method, auau); verify(auau).bark(3); verify(stack).next(method, auau); verify(info).setResult(\"ok\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Scheduled(fixedDelay = 60000) public void controlStoragePolicyProcessorJmsMessageListener() { try { Boolean jmsMessageListenerEnabled = Boolean.valueOf(configurationHelper.getProperty(ConfigurationValue.STORAGE_POLICY_PROCESSOR_JMS_LISTENER_ENABLED)); JmsListenerEndpointRegistry registry = ApplicationContextHolder.getApplicationContext() .getBean(\"org.springframework.jms.config.internalJmsListenerEndpointRegistry\", JmsListenerEndpointRegistry.class); MessageListenerContainer jmsMessageListenerContainer = registry.getListenerContainer(HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE); LOGGER.debug(\"controlStoragePolicyProcessorJmsMessageListener(): {}={} jmsMessageListenerContainer.isRunning()={}\", ConfigurationValue.STORAGE_POLICY_PROCESSOR_JMS_LISTENER_ENABLED.getKey(), jmsMessageListenerEnabled, jmsMessageListenerContainer.isRunning()); if (!jmsMessageListenerEnabled && jmsMessageListenerContainer.isRunning()) { LOGGER.info(\"controlStoragePolicyProcessorJmsMessageListener(): Stopping the storage policy processor JMS message listener ...\"); jmsMessageListenerContainer.stop(); LOGGER.info(\"controlStoragePolicyProcessorJmsMessageListener(): Done\"); } else if (jmsMessageListenerEnabled && !jmsMessageListenerContainer.isRunning()) { LOGGER.info(\"controlStoragePolicyProcessorJmsMessageListener(): Starting the storage policy processor JMS message listener ...\"); jmsMessageListenerContainer.start(); LOGGER.info(\"controlStoragePolicyProcessorJmsMessageListener(): Done\"); } } catch (Exception e) { LOGGER.error(\"controlStoragePolicyProcessorJmsMessageListener(): Failed to control the storage policy processor Jms message listener service.\", e); } }### Assistant: @Test public void testControlListener() { configurationHelper = Mockito.mock(ConfigurationHelper.class); ReflectionTestUtils.setField(storagePolicyProcessorJmsMessageListener, \"configurationHelper\", configurationHelper); MessageListenerContainer mockMessageListenerContainer = Mockito.mock(MessageListenerContainer.class); when(configurationHelper.getProperty(ConfigurationValue.STORAGE_POLICY_PROCESSOR_JMS_LISTENER_ENABLED)).thenReturn(\"false\"); JmsListenerEndpointRegistry registry = ApplicationContextHolder.getApplicationContext() .getBean(\"org.springframework.jms.config.internalJmsListenerEndpointRegistry\", JmsListenerEndpointRegistry.class); when(registry.getListenerContainer(HerdJmsDestinationResolver.SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE)) .thenReturn(mockMessageListenerContainer); when(mockMessageListenerContainer.isRunning()).thenReturn(false); storagePolicyProcessorJmsMessageListener.controlStoragePolicyProcessorJmsMessageListener(); verify(mockMessageListenerContainer, Mockito.times(0)).stop(); verify(mockMessageListenerContainer, Mockito.times(0)).start(); when(mockMessageListenerContainer.isRunning()).thenReturn(true); storagePolicyProcessorJmsMessageListener.controlStoragePolicyProcessorJmsMessageListener(); verify(mockMessageListenerContainer).stop(); when(configurationHelper.getProperty(ConfigurationValue.STORAGE_POLICY_PROCESSOR_JMS_LISTENER_ENABLED)).thenReturn(\"true\"); when(mockMessageListenerContainer.isRunning()).thenReturn(true); storagePolicyProcessorJmsMessageListener.controlStoragePolicyProcessorJmsMessageListener(); verify(mockMessageListenerContainer, Mockito.times(0)).start(); when(mockMessageListenerContainer.isRunning()).thenReturn(false); storagePolicyProcessorJmsMessageListener.controlStoragePolicyProcessorJmsMessageListener(); verify(mockMessageListenerContainer).start(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void prioritizeGenes(List<String> hpoIds, List<Gene> genes) { for (Gene gene : genes) { OmimPriorityResult result = prioritiseGene().apply(gene); gene.addPriorityResult(result); } }### Assistant: @Test public void prioritizeGenesMultipleModesCompatible() { Gene gene = new Gene(\"ROR2\", 4920); gene.setCompatibleInheritanceModes(EnumSet.of(ModeOfInheritance.AUTOSOMAL_DOMINANT, ModeOfInheritance.AUTOSOMAL_RECESSIVE)); List<Gene> genes = Lists.newArrayList(gene); instance.prioritizeGenes(Collections.emptyList(), genes); OmimPriorityResult result = (OmimPriorityResult) gene.getPriorityResult(PriorityType.OMIM_PRIORITY); Map<ModeOfInheritance, Double> scores = new EnumMap<>(ModeOfInheritance.class); scores.put(ModeOfInheritance.AUTOSOMAL_DOMINANT, 1.0); scores.put(ModeOfInheritance.AUTOSOMAL_RECESSIVE, 1.0); scores.put(ModeOfInheritance.X_RECESSIVE, 0.5); scores.put(ModeOfInheritance.X_DOMINANT, 0.5); scores.put(ModeOfInheritance.MITOCHONDRIAL, 0.5); OmimPriorityResult expected = omimResultForGene(gene, 1.0, scores); assertThat(result, equalTo(expected)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private TrackMe onTrack(TrackMe trackMe) { for (Iterator<CustomDimension> it = mOneTimeDimensions.iterator(); it.hasNext(); ) { CustomDimension dim = it.next(); String existing = CustomDimension.getDimension(trackMe, dim.getId()); if (existing != null) { Timber.tag(TAG).d(\"Setting dimension %s to slot %d would overwrite %s, skipping!\", dim.getValue(), dim.getId(), existing); } else { CustomDimension.setDimension(trackMe, dim); it.remove(); } } return trackMe; }### Assistant: @Test public void testEmpty() { new DimensionQueue(mTracker); verify(mTracker).addTrackingCallback(mCaptor.capture()); TrackMe pre = new TrackMe(); TrackMe post = mCaptor.getValue().onTrack(pre); assertThat(post, notNullValue()); assertThat(pre, is(post)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GetMapping(\"/hello/{name}\") public @ResponseBody String helloName(@PathVariable String name) { return \"hello \" + name; }### Assistant: @Test public void helloNameTest() throws Exception { String name = \"siyoon\"; mockMvc.perform(get(\"/hello/{name}\", name).accept(MediaType.TEXT_HTML)) .andExpect(status().isOk()) .andDo(print()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void search(String term) { checkViewAttached(); getView().showLoading(); addSubscription(userRepository.searchUsers(term).subscribeOn(ioScheduler).observeOn(mainScheduler) .subscribe(new Subscriber<List<User>>() { @Override public void onCompleted() { } @Override public void onError(Throwable e) { getView().hideLoading(); getView().showError( e.getMessage()); } @Override public void onNext(List<User> users) { getView().hideLoading(); getView().showSearchResults(users); } })); }### Assistant: @Test public void search_ValidSearchTerm_ReturnsResults() { UsersList userList = getDummyUserList(); when(userRepository.searchUsers(anyString())).thenReturn(Observable.<List<User>>just(userList.getItems())); userSearchPresenter.search(\"riggaroo\"); verify(view).showLoading(); verify(view).hideLoading(); verify(view).showSearchResults(userList.getItems()); verify(view, never()).showError(anyString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(\"renderAccountingData.ftl\") public final ModelAndView showAccountingDataFor(@RequestParam(value = FROM_DATE) String paramFromDate, @RequestParam(value = TO_DATE) String paramToDate) { DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyyy-MM-dd\"); LocalDate fromDate = fmt.parseDateTime(paramFromDate).toLocalDate(); LocalDate toDate = fmt.parseDateTime(paramToDate).toLocalDate(); Boolean hasAlreadyRanQuery = Boolean.FALSE; String fileName = null; List<AccountingDto> accountingData = new ArrayList<AccountingDto>(); try { fileName = accountingService.getExportOutputFileName(fromDate, toDate).replace(\".xml\", \"\"); hasAlreadyRanQuery = accountingService.hasAlreadyRanQuery(fromDate, toDate); accountingData = accountingService.getExportDetails(fromDate, toDate); } catch (Exception e) { LOGGER.error(e.getMessage(), e); } ModelAndView mav = new ModelAndView(\"renderAccountingData\"); List<BreadCrumbsLinks> breadcrumbs = new AdminBreadcrumbBuilder() .withLink(\"accounting.viewaccountingexports\", \"renderAccountingDataCacheInfo.ftl\") .withLink(fileName, \"\").build(); mav.addObject(\"breadcrumbs\", breadcrumbs); mav.addObject(\"accountingData\", accountingData); mav.addObject(\"hasAlreadyRanQuery\", hasAlreadyRanQuery); mav.addObject(\"fileName\", fileName); mav.addObject(\"fromDate\", fromDate); mav.addObject(\"toDate\", toDate); return mav; }### Assistant: @Test public void testShowAccountingDataFor() { when(accountingService.hasAlreadyRanQuery(any(LocalDate.class), any(LocalDate.class))).thenReturn(true); when(accountingService.getExportOutputFileName(any(LocalDate.class), any(LocalDate.class))).thenReturn( \"dummyfile\"); when(accountingService.getExportDetails(any(LocalDate.class), any(LocalDate.class))).thenReturn(null); accountingDataController.showAccountingDataFor(\"2010-05-10\", \"2010-05-10\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void afterTaskNominatedEvent(TaskEvent event) { String userId = event.getTaskContext().getUserId(); Task ti = event.getTask(); TaskEventImpl taskEvent = new TaskEventImpl(ti.getId(), org.kie.internal.task.api.model.TaskEvent.TaskEventType.NOMINATED, userId, new Date()); AuditTaskImpl auditTaskImpl = createAuditTask(ti, event.getEventDate()); auditTaskImpl.setDescription(ti.getDescription()); auditTaskImpl.setName(ti.getName()); auditTaskImpl.setActivationTime(ti.getTaskData().getActivationTime()); auditTaskImpl.setPriority(ti.getPriority()); auditTaskImpl.setDueDate(ti.getTaskData().getExpirationTime()); auditTaskImpl.setStatus(ti.getTaskData().getStatus().name()); auditTaskImpl.setActualOwner(getActualOwner(ti)); auditTaskImpl.setLastModificationDate(event.getEventDate()); sendMessage(new AuditTaskData(auditTaskImpl, taskEvent), 4); }### Assistant: @Test public void testAfterTaskNominated() throws JMSException { logProducer.afterTaskNominatedEvent(event); assertMessage(\"<type>NOMINATED</type>\", 4); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CompoundButton onCheck(final int id, final OnCheckedChangeListener listener) { CompoundButton checkable = find(id); checkable.setOnCheckedChangeListener(listener); return checkable; }### Assistant: @Test public void onCheckRunnableWithMultipleIds() { Activity activity = new Activity(); FrameLayout root = new FrameLayout(activity); CheckBox checkbox1 = new CheckBox(activity); checkbox1.setId(android.R.id.button1); root.addView(checkbox1); CheckBox checkbox2 = new CheckBox(activity); checkbox2.setId(android.R.id.button2); root.addView(checkbox2); ViewFinder finder = new ViewFinder(root); final AtomicInteger run = new AtomicInteger(0); finder.onCheck(new Runnable() { public void run() { run.incrementAndGet(); } }, android.R.id.button1, android.R.id.button2); checkbox1.performClick(); assertEquals(1, run.get()); checkbox2.performClick(); assertEquals(2, run.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean evaluate(String input) { validateInput(input); Set<Integer> charsCounter = new HashSet<Integer>(); for (char c : input.toCharArray()) { if (charsCounter.contains((int) c)) { return false; } else { charsCounter.add((int) c); } } return true; }### Assistant: @Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullStringsAsInput() { uniqueChars.evaluate(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String validate(String roadName) throws InvalidRoadNameException { if (roadName == null || !ROAD_NAME_PATTERN.matcher(roadName).matches()) { throw new InvalidRoadNameException(ERROR_MESSAGE); } return roadName; }### Assistant: @Test(expected = InvalidRoadNameException.class) public void capittalLettersInTheMiddle() { underTest.validate(\"wideRoad\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Set<String> doUpdateForClusterCreate() throws ConfigurationTopologyException { Set<String> configTypesUpdated = new HashSet<String>(); Configuration clusterConfig = clusterTopology.getConfiguration(); Map<String, HostGroupInfo> groupInfoMap = clusterTopology.getHostGroupInfo(); doRecommendConfigurations(clusterConfig, configTypesUpdated); doFilterPriorToClusterUpdate(clusterConfig, configTypesUpdated); Map<String, Map<String, String>> clusterProps = clusterConfig.getFullProperties(); for (Map<String, Map<String, PropertyUpdater>> updaterMap : createCollectionOfUpdaters()) { for (Map.Entry<String, Map<String, PropertyUpdater>> entry : updaterMap.entrySet()) { String type = entry.getKey(); for (Map.Entry<String, PropertyUpdater> updaterEntry : entry.getValue().entrySet()) { String propertyName = updaterEntry.getKey(); PropertyUpdater updater = updaterEntry.getValue(); Map<String, String> typeMap = clusterProps.get(type); if (typeMap != null && typeMap.containsKey(propertyName) && typeMap.get(propertyName) != null) { final String originalValue = typeMap.get(propertyName); final String updatedValue = updater.updateForClusterCreate(propertyName, originalValue, clusterProps, clusterTopology); if(updatedValue == null ) { continue; } if (!updatedValue.equals(originalValue)) { configTypesUpdated.add(type); } clusterConfig.setProperty(type, propertyName, updatedValue); } for (HostGroupInfo groupInfo : groupInfoMap.values()) { Configuration hgConfig = groupInfo.getConfiguration(); Map<String, Map<String, String>> hgConfigProps = hgConfig.getFullProperties(1); Map<String, String> hgTypeMap = hgConfigProps.get(type); if (hgTypeMap != null && hgTypeMap.containsKey(propertyName)) { final String originalValue = hgTypeMap.get(propertyName); final String updatedValue = updater.updateForClusterCreate(propertyName, originalValue, hgConfigProps, clusterTopology); if (!updatedValue.equals(originalValue)) { configTypesUpdated.add(type); } hgConfig.setProperty(type, propertyName, updatedValue); } } } } } if (clusterTopology.isNameNodeHAEnabled()) { Map<String, String> hdfsSiteConfig = clusterConfig.getFullProperties().get(\"hdfs-site\"); String nameservices = hdfsSiteConfig.get(\"dfs.nameservices\"); String int_nameservices = hdfsSiteConfig.get(\"dfs.internal.nameservices\"); if(int_nameservices == null && nameservices != null) { clusterConfig.setProperty(\"hdfs-site\", \"dfs.internal.nameservices\", nameservices); } if (! isNameNodeHAInitialActiveNodeSet(clusterProps) && ! isNameNodeHAInitialStandbyNodeSet(clusterProps)) { Collection<String> nnHosts = clusterTopology.getHostAssignmentsForComponent(\"NAMENODE\"); if (nnHosts.size() != 2) { throw new ConfigurationTopologyException(\"NAMENODE HA requires exactly 2 hosts running NAMENODE but there are: \" + nnHosts.size() + \" Hosts: \" + nnHosts); } Iterator<String> nnHostIterator = nnHosts.iterator(); clusterConfig.setProperty(\"hadoop-env\", \"dfs_ha_initial_namenode_active\", nnHostIterator.next()); clusterConfig.setProperty(\"hadoop-env\", \"dfs_ha_initial_namenode_standby\", nnHostIterator.next()); configTypesUpdated.add(\"hadoop-env\"); } } setMissingConfigurations(clusterConfig, configTypesUpdated); trimProperties(clusterConfig, clusterTopology); return configTypesUpdated; }### Assistant: @Test public void testDoUpdateForClusterCreate_MultiHostProperty__defaultValues___YAML() throws Exception { Map<String, Map<String, String>> properties = new HashMap<String, Map<String, String>>(); Map<String, String> typeProps = new HashMap<String, String>(); typeProps.put(\"storm.zookeeper.servers\", \"['localhost']\"); properties.put(\"storm-site\", typeProps); Configuration clusterConfig = new Configuration(properties, Collections.<String, Map<String, Map<String, String>>>emptyMap()); Collection<String> hgComponents = new HashSet<String>(); hgComponents.add(\"NAMENODE\"); hgComponents.add(\"SECONDARY_NAMENODE\"); hgComponents.add(\"ZOOKEEPER_SERVER\"); TestHostGroup group1 = new TestHostGroup(\"group1\", hgComponents, Collections.singleton(\"testhost\")); Collection<String> hgComponents2 = new HashSet<String>(); hgComponents2.add(\"DATANODE\"); hgComponents2.add(\"HDFS_CLIENT\"); hgComponents2.add(\"ZOOKEEPER_SERVER\"); Set<String> hosts2 = new HashSet<String>(); hosts2.add(\"testhost2\"); hosts2.add(\"testhost2a\"); hosts2.add(\"testhost2b\"); TestHostGroup group2 = new TestHostGroup(\"group2\", hgComponents2, hosts2); Collection<String> hgComponents3 = new HashSet<String>(); hgComponents2.add(\"HDFS_CLIENT\"); hgComponents2.add(\"ZOOKEEPER_CLIENT\"); Set<String> hosts3 = new HashSet<String>(); hosts3.add(\"testhost3\"); hosts3.add(\"testhost3a\"); TestHostGroup group3 = new TestHostGroup(\"group3\", hgComponents3, hosts3); Collection<TestHostGroup> hostGroups = new HashSet<TestHostGroup>(); hostGroups.add(group1); hostGroups.add(group2); hostGroups.add(group3); ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups); BlueprintConfigurationProcessor updater = new BlueprintConfigurationProcessor(topology); updater.doUpdateForClusterCreate(); String updatedVal = topology.getConfiguration().getFullProperties().get(\"storm-site\").get(\"storm.zookeeper.servers\"); assertTrue(updatedVal.startsWith(\"[\")); assertTrue(updatedVal.endsWith(\"]\")); updatedVal = updatedVal.replaceAll(\"[\\\\[\\\\]]\", \"\"); String[] hosts = updatedVal.split(\",\"); Collection<String> expectedHosts = new HashSet<String>(); expectedHosts.add(\"'testhost'\"); expectedHosts.add(\"'testhost2'\"); expectedHosts.add(\"'testhost2a'\"); expectedHosts.add(\"'testhost2b'\"); assertEquals(4, hosts.length); for (String host : hosts) { assertTrue(expectedHosts.contains(host)); expectedHosts.remove(host); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ObjectRecord resolveObject(String object) throws InvalidArgumentException { if (StringUtils.isBlank(object)) return null; if (StringUtils.isUUID(object)) { return objectFactDao.getObject(UUID.fromString(object)); } Matcher matcher = TYPE_VALUE_PATTERN.matcher(object); if (!matcher.matches()) { return null; } String type = matcher.group(1); String value = matcher.group(2); ObjectTypeEntity typeEntity = fetchObjectType(type); ObjectRecord objectRecord = objectFactDao.getObject(type, value); if (objectRecord == null) { objectRecord = createObject(typeEntity, value); } return objectRecord; }### Assistant: @Test public void testCreateMissingObject() throws Exception { String value = \"ObjectValue\"; ObjectTypeEntity type = mockFetchObjectType(); mockValidator(true); when(objectFactDao.storeObject(any())).thenAnswer(i -> i.getArgument(0)); ObjectRecord resolvedObject = resolver.resolveObject(String.format(\"%s/%s\", type.getName(), value)); assertObjectRecord(resolvedObject, type.getId(), value); verify(objectFactDao).storeObject(argThat(record -> assertObjectRecord(record, type.getId(), value))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"{accountId}\") public List<Transaction> payments(@PathParam(\"accountId\") int accountId) { return ukelonn.getPayments(accountId); }### Assistant: @Test public void testGetPayments() { Account account = getJadAccount(); Payments resource = new Payments(); UkelonnService ukelonn = mock(UkelonnService.class); when(ukelonn.getPayments(anyInt())).thenReturn(getJadPayments()); resource.ukelonn = ukelonn; List<Transaction> jobs = resource.payments(account.getAccountId()); assertEquals(10, jobs.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Optional<AbstractScesimGridModel> getSelectedScenarioGridModel() { return getSelectedScenarioGridLayer().map(ScenarioGridLayer::getScenarioGrid).map(ScenarioGrid::getModel); }### Assistant: @Test public void getSelectedScenarioGridModelNone() { when(backgroundGridWidgetSpy.isSelected()).thenReturn(false); when(scenarioGridWidgetSpy.isSelected()).thenReturn(false); assertEquals(Optional.empty(), scenarioSimulationContextLocal.getSelectedScenarioGridModel()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T, TClosing> OnSubscribeFunc<Observable<T>> window(final Observable<? extends T> source, final Func0<? extends Observable<? extends TClosing>> windowClosingSelector) { return new OnSubscribeFunc<Observable<T>>() { @Override public Subscription onSubscribe(final Observer<? super Observable<T>> observer) { NonOverlappingChunks<T, Observable<T>> windows = new NonOverlappingChunks<T, Observable<T>>(observer, OperationWindow.<T> windowMaker()); ChunkCreator creator = new ObservableBasedSingleChunkCreator<T, Observable<T>, TClosing>(windows, windowClosingSelector); return source.subscribe(new ChunkObserver<T, Observable<T>>(windows, observer, creator)); } }; }### Assistant: @Test public void testSkipAndCountGaplessEindows() { Observable<String> subject = Observable.from(\"one\", \"two\", \"three\", \"four\", \"five\"); Observable<Observable<String>> windowed = Observable.create(window(subject, 3, 3)); List<List<String>> windows = toLists(windowed); assertEquals(2, windows.size()); assertEquals(list(\"one\", \"two\", \"three\"), windows.get(0)); assertEquals(list(\"four\", \"five\"), windows.get(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public long getPreferredBlockSize() { return HeaderFormat.getPreferredBlockSize(header); }### Assistant: @Test public void testPreferredBlockSizeUpperBound () { replication = 3; preferredBlockSize = BLKSIZE_MAXVALUE; INodeFile inf = createINodeFile(replication, preferredBlockSize); assertEquals(\"True has to be returned in this case\", BLKSIZE_MAXVALUE, inf.getPreferredBlockSize()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ArtifactMetadata resolveArtifactMetadata( Artifact artifact ) { initArtifactMap(); return artifactMap.get( artifact ); }### Assistant: @Test public void testCompatExactVersion() throws Exception { List<String> pathList = Collections.singletonList( \"src/test/resources/metadata1.xml\" ); MetadataResolver resolver = new MetadataResolver( pathList ); Artifact artifact = new DefaultArtifact( \"gid\", \"aid\", \"ext\", \"cla\", \"1.2-beta3\" ); ArtifactMetadata am = resolver.resolveArtifactMetadata( artifact ); assertNotNull( am ); assertEquals( \"/foo/bar\", am.getPath() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int columnCount() { return tableSlice.columnCount(); }### Assistant: @Test public void testColumnCount() throws IOException { Table table = Table.read().csv(\"../data/bush.csv\"); Row row = new Row(table); assertEquals(table.columnCount(), row.columnCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int compareTo(final Day o) { return Integer.compare(day_, o.day_); }### Assistant: @Test public void testCompareTo() { assertTrue(D_2001_01_03.compareTo(D_2001_01_03) == 0); assertTrue(D_2001_03_03.compareTo(D_2001_01_03) > 0); assertTrue(D_2001_01_03.compareTo(D_2001_03_03) < 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TikaDocumentSource extract(final TikaDocument rootDocument, final String embeddedDocumentDigest) throws SAXException, TikaException, IOException { ParseContext context = new ParseContext(); ContentHandler handler = new BodyContentHandler(-1); context.set(Parser.class, parser); DigestEmbeddedDocumentExtractor extractor = new DigestEmbeddedDocumentExtractor(rootDocument, embeddedDocumentDigest, context, digester, algorithm); context.set(org.apache.tika.extractor.EmbeddedDocumentExtractor.class, extractor); parser.parse(new FileInputStream(rootDocument.getPath().toFile()), handler, rootDocument.getMetadata(), context); return extractor.getDocument(); }### Assistant: @Test public void test_embedded_file_extraction_level_1() throws Exception { TikaDocumentSource emfImage = new EmbeddedDocumentMemoryExtractor(new UpdatableDigester(\"prj\", \"SHA-256\")). extract(tikaDocument, \"1eeb334ca60c61baca50b9df851b60c52b856c727932d0d1cae4e56a34190e7e\"); assertThat(emfImage).isNotNull(); assertThat(emfImage.content).hasSize(4992); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public <T> T getUpdateData(final AnnotationData data, final Method method, final Object[] args, final Object returnValue) throws Exception { return data.isReturnDataIndex() ? (T) returnValue : (T) Utils.getMethodArg(data.getDataIndex(), args, method.toString()); }### Assistant: @Test public void getUpdateData() throws Exception { AnnotationData annotationData = new AnnotationData(); annotationData.setDataIndex(-1); Object entity = new Object(); Object result = cut.getUpdateData(annotationData, null, null, entity); assertSame(entity, result); annotationData = new AnnotationData(); annotationData.setReturnDataIndex(true); result = cut.getUpdateData(annotationData, null, null, entity); assertSame(entity, result); annotationData = new AnnotationData(); annotationData.setDataIndex(1); Method method = UpdateData.class.getMethod(\"update\", new Class[] { int.class, Object.class }); result = cut.getUpdateData(annotationData, method, new Object[] { 144, entity }, entity); assertSame(entity, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NotNull public static Common.Event getTraceStatusEventFromId(@NotNull StudioProfilers profilers, long traceId) { if (!profilers.getIdeServices().getFeatureConfig().isUnifiedPipelineEnabled()) { return Common.Event.getDefaultInstance(); } Transport.GetEventGroupsResponse response = profilers.getClient().getTransportClient().getEventGroups( Transport.GetEventGroupsRequest.newBuilder() .setStreamId(profilers.getSession().getStreamId()) .setKind(Common.Event.Kind.CPU_TRACE_STATUS) .setGroupId(traceId) .build()); if (response.getGroupsCount() == 0) { return Common.Event.getDefaultInstance(); } return response.getGroups(0).getEvents(response.getGroups(0).getEventsCount() - 1); }### Assistant: @Test public void testGetTraceStatusEventFromId() { Assume.assumeTrue(myUnifiedPipeline); Common.Session session = myProfilers.getSession(); int TRACE_ID = 123; Cpu.CpuTraceStatusData status1 = Cpu.CpuTraceStatusData.newBuilder() .setTraceStartStatus(Cpu.TraceStartStatus.newBuilder().setStatus(Cpu.TraceStartStatus.Status.SUCCESS)) .build(); Common.Event event1 = Common.Event.newBuilder().setGroupId(TRACE_ID).setPid(session.getPid()).setKind(Common.Event.Kind.CPU_TRACE_STATUS).setTimestamp(1) .setCpuTraceStatus(status1).build(); myTransportService.addEventToStream(session.getStreamId(), event1); Common.Event event = CpuProfiler.getTraceStatusEventFromId(myProfilers, TRACE_ID); assertThat(event).isEqualTo(event1); Cpu.CpuTraceStatusData status2 = Cpu.CpuTraceStatusData.newBuilder() .setTraceStopStatus(Cpu.TraceStopStatus.newBuilder().setStatus(Cpu.TraceStopStatus.Status.WAIT_TIMEOUT).setErrorMessage(\"error\")) .build(); Common.Event event2 = Common.Event.newBuilder().setGroupId(TRACE_ID).setPid(session.getPid()).setKind(Common.Event.Kind.CPU_TRACE_STATUS).setTimestamp(5) .setCpuTraceStatus(status2).build(); myTransportService.addEventToStream(session.getStreamId(), event2); Common.Event event3 = event2.toBuilder().setGroupId(TRACE_ID + 100).build(); myTransportService.addEventToStream(session.getStreamId(), event3); event = CpuProfiler.getTraceStatusEventFromId(myProfilers, TRACE_ID); assertThat(event).isEqualTo(event2); assertThat(event).isNotEqualTo(event3); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String format(final LoggingEvent event) { if (event.getMessage() instanceof String) { return super.format(appendStackTraceToEvent(event)); } return super.format(event); }### Assistant: @Test public void testNewLine() { final LoggingEvent event = createMessageEvent(\"This message contains \\n new lines\"); assertTrue(this.layout.format(event).equals(\"This message contains \\\\n new lines\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static long getVirtualSize(InputStream inputStream) throws IOException { byte[] bytes = new byte[VIRTUALSIZE_HEADER_LENGTH]; if (inputStream.skip(VIRTUALSIZE_HEADER_LOCATION) != VIRTUALSIZE_HEADER_LOCATION) { throw new IOException(\"Unable to skip to the virtual size header\"); } if (inputStream.read(bytes) != VIRTUALSIZE_HEADER_LENGTH) { throw new IOException(\"Unable to properly read the size\"); } return NumbersUtil.bytesToLong(bytes); }### Assistant: @Test public void getVirtualSizeTest() throws IOException { assertEquals(virtualSize.longValue(), QCOW2Utils.getVirtualSize(inputStream)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public byte[] getProgram() { try { if (program != null) return Arrays.copyOf(program, program.length); ByteArrayOutputStream bos = new ByteArrayOutputStream(); for (ScriptChunk chunk : chunks) { chunk.write(bos); } program = bos.toByteArray(); return program; } catch (IOException e) { throw new RuntimeException(e); } }### Assistant: @Test public void numberBuilderNegative() { final ScriptBuilder builder = new ScriptBuilder(); builder.number(-5); assertArrayEquals(new byte[] { 0x01, ((byte) 133) }, builder.build().getProgram()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Set<String> addServletMapping(String servletName, String... urlPatterns) { if (isEmpty(urlPatterns)) { throw new IllegalArgumentException(\"Mappings for \" + servletName + \" cannot be empty\"); } Set<String> mappedToOtherServlet = stream(urlPatterns) .filter(servletMappings::containsKey) .filter(urlPattern -> !servletMappings.get(urlPattern).equals(servletName)) .collect(toSet()); if (!mappedToOtherServlet.isEmpty()) { return mappedToOtherServlet; } for (String urlPattern : urlPatterns) { servletMappings.put(urlPattern, servletName); } return emptySet(); }### Assistant: @Test void testFindPrefixServletMatch3() throws Exception { DefaultWebApplicationRequestMapper webAppRequestMapper = new DefaultWebApplicationRequestMapper(); DefaultWebApplication webApp = new DefaultWebApplication(); webApp.setWebApplicationRequestMapper(webAppRequestMapper); webApp.addServlet(\"echo\", new TestEcho1Servlet()); webApp.addServletMapping(\"echo\", \"/echo/*\"); webApp.initialize(); webApp.start(); TestWebApplicationRequest request = new TestWebApplicationRequest(); request.setServletPath(\"/echo2/test.echo\"); TestWebApplicationResponse response = new TestWebApplicationResponse(); response.setBodyOnly(true); webApp.service(request, response); assertEquals(404, response.getStatus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public State createState(final String oidcRequestIdentifier) { if (!isOidcEnabled()) { throw new IllegalStateException(OidcIdentityProvider.OPEN_ID_CONNECT_SUPPORT_IS_NOT_CONFIGURED); } final CacheKey oidcRequestIdentifierKey = new CacheKey(oidcRequestIdentifier); final State state = new State(generateStateValue()); try { synchronized (stateLookupForPendingRequests) { final State cachedState = stateLookupForPendingRequests.get(oidcRequestIdentifierKey, () -> state); if (!timeConstantEqualityCheck(state.getValue(), cachedState.getValue())) { throw new IllegalStateException(\"An existing login request is already in progress.\"); } } } catch (ExecutionException e) { throw new IllegalStateException(\"Unable to store the login request state.\"); } return state; }### Assistant: @Test(expected = IllegalStateException.class) public void testOidcNotEnabledCreateState() throws Exception { final OidcService service = getServiceWithNoOidcSupport(); service.createState(TEST_REQUEST_IDENTIFIER); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void removeInstance() { removeInstance(AppConstants.class.getClassLoader()); }### Assistant: @Test(expected=IllegalStateException.class) public void callRemoveInstanceWithoutClassLoader() { AppConstants.removeInstance(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder builder() { return new Builder(); }### Assistant: @Test public void thenSubschemaSuccessElseSubschemaFailure() { ConditionalSchema.builder().thenSchema(MAX_LENGTH_STRING_SCHEMA).elseSchema(PATTERN_STRING_SCHEMA).build().validate(\"bar\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String toString() { return format(this); }### Assistant: @Test public void testToString() throws Exception { final URIAuthority host1 = new URIAuthority(\"somehost\"); Assert.assertEquals(\"somehost\", host1.toString()); final URIAuthority host2 = new URIAuthority(\"somehost\", -1); Assert.assertEquals(\"somehost\", host2.toString()); final URIAuthority host3 = new URIAuthority(\"somehost\", 8888); Assert.assertEquals(\"somehost:8888\", host3.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Schema load(final JSONObject schemaJson) { return SchemaLoader.load(schemaJson, new DefaultSchemaClient()); }### Assistant: @Test public void tupleSchema() { ArraySchema actual = (ArraySchema) SchemaLoader.load(get(\"tupleSchema\")); assertFalse(actual.permitsAdditionalItems()); assertNull(actual.getAllItemSchema()); assertEquals(2, actual.getItemSchemas().size()); assertEquals(BooleanSchema.INSTANCE, actual.getItemSchemas().get(0)); assertEquals(NullSchema.INSTANCE, actual.getItemSchemas().get(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public GridWidget getGridWidget() { return GridWidget.BACKGROUND; }### Assistant: @Test public void getGridWidget() { assertEquals(GridWidget.BACKGROUND, backgroundGridModelSpy.getGridWidget()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<Node, Patch<?>> diff(Node left, Node right, XMLDiffConfiguration config) throws DiffException { Map<Node, Patch<?>> patches = new LinkedHashMap<>(); Patch<Node> rootPatch = new DefaultPatch<>(); if (areSimilar(left, right)) { if (left != null) { patches.putAll(diffSimilarNodes(left, right, config)); } } else if (left == null) { rootPatch.add(new InsertDelta<>(new DefaultChunk<>(-1, Collections.<Node>emptyList()), new DefaultChunk<>(XMLDiffUtils.getNodeIndex(right), Collections.singletonList(right)))); } else if (right == null) { rootPatch.add( new DeleteDelta<>(new DefaultChunk<>(XMLDiffUtils.getNodeIndex(left), Collections.singletonList(left)), new DefaultChunk<>(-1, Collections.<Node>emptyList()))); } else { rootPatch.add( new ChangeDelta<>(new DefaultChunk<>(XMLDiffUtils.getNodeIndex(left), Collections.singletonList(left)), new DefaultChunk<>(XMLDiffUtils.getNodeIndex(right), Collections.singletonList(right)))); } if (!rootPatch.isEmpty()) { patches.put(null, rootPatch); } return patches; }### Assistant: @Test void nonSimilarNodeDelete() throws Exception { Node text = this.document.getDocumentElement().getLastChild(); Map<Node, Patch<?>> patches = this.defaultXMLDiff.diff(text, null, this.config); assertEquals(1, patches.size()); Patch<?> patch = patches.get(null); assertEquals(1, patch.size()); Delta<?> delta = patch.get(0); assertEquals(Delta.Type.DELETE, delta.getType()); assertEquals(Collections.singletonList(text), delta.getPrevious().getElements()); assertEquals(Collections.emptyList(), delta.getNext().getElements()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Optional<Object> parse(Type type, String serialized) { return Optional.ofNullable(PARSER_MAP.get(type)) .map(m -> m.apply(serialized)); }### Assistant: @Test void parseCharLarge() { assertThrows(IllegalArgumentException.class, () -> ReflectionUtil.parse(Character.class, \"AB\").orElseThrow(NoSuchElementException::new)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public RangerAccessTypeDef populateXXToRangerAccessTypeDef(XXAccessTypeDef xObj) { RangerAccessTypeDef vObj = new RangerAccessTypeDef(); vObj.setItemId(xObj.getItemId()); vObj.setName(xObj.getName()); vObj.setLabel(xObj.getLabel()); vObj.setRbKeyLabel(xObj.getRbkeylabel()); List<String> impliedGrants = daoMgr.getXXAccessTypeDefGrants().findImpliedGrantsByATDId(xObj.getId()); vObj.setImpliedGrants(impliedGrants); return vObj; }### Assistant: @Test public void test9populateXXToRangerAccessTypeDef() { XXAccessTypeDefGrantsDao xAccessTypeDefGrantsDao = Mockito .mock(XXAccessTypeDefGrantsDao.class); List<String> lists = new ArrayList<String>(); XXAccessTypeDef accessTypeDefObj = new XXAccessTypeDef(); accessTypeDefObj.setAddedByUserId(Id); accessTypeDefObj.setCreateTime(new Date()); accessTypeDefObj.setDefid(Id); accessTypeDefObj.setId(Id); accessTypeDefObj.setLabel(\"Read\"); accessTypeDefObj.setName(\"read\"); accessTypeDefObj.setOrder(null); accessTypeDefObj.setRbkeylabel(null); accessTypeDefObj.setUpdatedByUserId(Id); accessTypeDefObj.setUpdateTime(new Date()); Mockito.when(daoManager.getXXAccessTypeDefGrants()).thenReturn( xAccessTypeDefGrantsDao); Mockito.when( xAccessTypeDefGrantsDao .findImpliedGrantsByATDId(accessTypeDefObj.getId())) .thenReturn(lists); RangerAccessTypeDef dbRangerAccessTypeDef = rangerServiceDefService .populateXXToRangerAccessTypeDef(accessTypeDefObj); Assert.assertNotNull(dbRangerAccessTypeDef); Assert.assertEquals(dbRangerAccessTypeDef.getName(), accessTypeDefObj.getName()); Assert.assertEquals(dbRangerAccessTypeDef.getLabel(), accessTypeDefObj.getLabel()); Assert.assertEquals(dbRangerAccessTypeDef.getRbKeyLabel(), accessTypeDefObj.getRbkeylabel()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static void populateGetProbabilityMapMethod(final RegressionModel.NormalizationMethod normalizationMethod, final ClassOrInterfaceDeclaration tableTemplate) { try { String methodName = String.format(\"get%sProbabilityMap\", normalizationMethod.name()); templateEvaluate = getFromFileName(KIE_PMML_GET_PROBABILITY_MAP_METHOD_TEMPLATE_JAVA); cloneEvaluate = templateEvaluate.clone(); ClassOrInterfaceDeclaration evaluateTemplateClass = cloneEvaluate.getClassByName(KIE_PMML_GET_PROBABILITY_MAP_METHOD_TEMPLATE) .orElseThrow(() -> new RuntimeException(MAIN_CLASS_NOT_FOUND)); final MethodDeclaration toReturn = evaluateTemplateClass.getMethodsByName(methodName).get(0); addMethod(toReturn, tableTemplate, \"getProbabilityMap\"); } catch (Exception e) { throw new KiePMMLInternalException(e.getMessage()); } }### Assistant: @Test public void populateGetProbabilityMapMethodSupported() { SUPPORTED_NORMALIZATION_METHODS.forEach(normalizationMethod -> { KiePMMLRegressionTableClassificationFactory.populateGetProbabilityMapMethod(normalizationMethod, modelTemplate); MethodDeclaration methodDeclaration = modelTemplate.getMethodsByName(\"getProbabilityMap\").get(0); BlockStmt body = methodDeclaration.getBody().get(); assertNotNull(body.getStatements()); assertFalse(body.getStatements().isEmpty()); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int getPortNumber(String property, int defaultValue) { String propValue = System.getProperty(property); if (propValue == null) { return defaultValue; } int port; try { port = Integer.parseInt(propValue); if (port < 0 || port > 65535) { throw new NumberFormatException(); } } catch (NumberFormatException ex) { LOGGER.info(\"invalid port: {}. Using default port: {}\", propValue, defaultValue); port = defaultValue; } return port; }### Assistant: @Test public void testGetPortNumberDefault() { assertEquals(ConfigProperties.getPortNumber(\"NotExistantProperty\", 4080), 4080); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isSucceed(final byte[] pByte) { return contains(pByte, SwEnum.SW_9000); }### Assistant: @Test public void testResponseIsSucceed() { Assertions.assertThat(ResponseUtils.isSucceed(new byte[] { (byte) 0x90, 0 })).isEqualTo(true); Assertions.assertThat(ResponseUtils.isSucceed(new byte[] { 0, (byte) 0x90, 0 })).isEqualTo(true); Assertions.assertThat(ResponseUtils.isSucceed(new byte[] { (byte) 0x00, 0 })).isEqualTo(false); Assertions.assertThat(ResponseUtils.isSucceed(null)).isEqualTo(false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public JSONObject parseJsonObjectFromUrl(String url) { try { Proxy proxy; String httpProxyHost = configurationHelper.getProperty(ConfigurationValue.HTTP_PROXY_HOST); Integer httpProxyPort = configurationHelper.getProperty(ConfigurationValue.HTTP_PROXY_PORT, Integer.class); if (StringUtils.isNotBlank(httpProxyHost) && httpProxyPort != null) { proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(httpProxyHost, httpProxyPort)); } else { proxy = Proxy.NO_PROXY; } InputStream inputStream = urlOperations.openStream(new URL(url), proxy); try { JSONParser jsonParser = new JSONParser(); return (JSONObject) jsonParser.parse(new InputStreamReader(inputStream, StandardCharsets.UTF_8)); } catch (ParseException e) { throw new IllegalArgumentException(String.format(\"Failed to parse JSON object from the URL: url=\\\"%s\\\"\", url), e); } finally { inputStream.close(); } } catch (IOException e) { throw new IllegalArgumentException(String.format(\"Failed to read JSON from the URL: url=\\\"%s\\\"\", url), e); } }### Assistant: @Test public void testParseJsonObjectFromUrlJsonParseException() { try { urlHelper.parseJsonObjectFromUrl(MockUrlOperationsImpl.MOCK_URL_JSON_PARSE_EXCEPTION); } catch (IllegalArgumentException e) { assertEquals(String.format(\"Failed to parse JSON object from the URL: url=\\\"%s\\\"\", MockUrlOperationsImpl.MOCK_URL_JSON_PARSE_EXCEPTION), e.getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull @Override public Single<File> process(@NonNull final Uri uri) { return Single.create(emitter -> { InputStream inputStream = null; try { inputStream = mContentResolver.openInputStream(uri); if (inputStream != null) { final int scale = getImageScaleFactor(uri); final BitmapFactory.Options smallerOpts = new BitmapFactory.Options(); smallerOpts.inSampleSize = scale; Bitmap bitmap = BitmapFactory.decodeStream(inputStream, null, smallerOpts); if (smallerOpts.outHeight <= 0 && smallerOpts.outWidth <= 0) { emitter.onError(new InvalidImageException(\"Looks like selected file is not an image\")); return; } if (mPreferences.get(UserPreference.Camera.SaveImagesInGrayScale)) { bitmap = ImageUtils.convertToGrayScale(bitmap); } if (mPreferences.get(UserPreference.Camera.AutomaticallyRotateImages)) { Logger.debug(ImageImportProcessor.this, \"Configured for auto-rotation. Attempting to determine the orientation\"); int orientation = getOrientationFromMediaStore(uri); if (orientation == ExifInterface.ORIENTATION_UNDEFINED) { Logger.warn(ImageImportProcessor.this, \"Failed to fetch orientation information from the content store. Trying from Exif.\"); InputStream exifInputStream = null; try { exifInputStream = mContentResolver.openInputStream(uri); if (exifInputStream != null) { final ExifInterface exif = new ExifInterface(exifInputStream); orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED); Logger.info(ImageImportProcessor.this, \"Read exif orientation as {}\", orientation); } } catch (IOException e) { Logger.error(ImageImportProcessor.this, \"An Exif parsing exception occurred\", e); } finally { StorageManager.closeQuietly(exifInputStream); } } if (orientation != ExifInterface.ORIENTATION_UNDEFINED) { Logger.info(ImageImportProcessor.this, \"Image orientation determined as {}. Rotating...\", orientation); bitmap = ImageUtils.rotateBitmap(bitmap, orientation); } else { Logger.warn(ImageImportProcessor.this, \"Indeterminate orientation. Skipping rotation\"); } } else { Logger.info(ImageImportProcessor.this, \"Image import rotation is disabled. Ignoring...\"); } if (bitmap != null) { final File destination = mStorageManner.getFile(mTrip.getDirectory(), System.currentTimeMillis() + \".jpg\"); final Bitmap.CompressFormat compressFormat = Bitmap.CompressFormat.JPEG; if (!mStorageManner.writeBitmap(Uri.fromFile(destination), bitmap, compressFormat, COMPRESSION_QUALITY)) { Logger.error(ImageImportProcessor.this, \"Failed to write the image data. Aborting\"); emitter.onError(new IOException(\"Failed to write the image data. Aborting\")); } else { Logger.info(ImageImportProcessor.this, \"Successfully saved the image to {}.\", destination); emitter.onSuccess(destination); } } } else { emitter.onError(new FileNotFoundException()); } } catch (IOException e) { emitter.onError(e); } finally { StorageManager.closeQuietly(inputStream); } }); }### Assistant: @Test public void importExifUriWithRotateOn() throws Exception { final Uri uri = Uri.fromFile(destination); configureUriForStream(uri, SAMPLE_JPG_WITH_EXIF); when(preferences.get(UserPreference.Camera.AutomaticallyRotateImages)).thenReturn(true); when(storageManager.writeBitmap(any(Uri.class), bitmapCaptor.capture(), eq(Bitmap.CompressFormat.JPEG), eq(ImageImportProcessor.COMPRESSION_QUALITY))).thenReturn(true); importProcessor.process(uri) .test() .assertValue(destination) .assertComplete(); final Bitmap bitmap = bitmapCaptor.getValue(); assertNotNull(bitmap); final ShadowBitmap shadowBitmap = Shadows.shadowOf(bitmap); final ShadowMatrix shadowMatrix = Shadows.shadowOf(shadowBitmap.getCreatedFromMatrix()); assertEquals(shadowMatrix.getSetOperations().get(ShadowMatrix.ROTATE), \"90.0\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting public int getAppsFailedKilled() { return numAppsFailedKilled.value(); }### Assistant: @Test public void testAppsFailedKilled() { long totalBadbefore = metrics.getAppsFailedKilled(); badSubCluster.forceKillApplication(); Assert.assertEquals(totalBadbefore + 1, metrics.getAppsFailedKilled()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void main(String[] args) { Cookie c = new Cookie(\"Chips Delight\", \"Chocolate Chip\", 12, \"flour\", \"sugar\", \"dark chocolate chips\", \"butter\", \"baking soda\", \"salt\"); System.out.println(\"Cookie\"); System.out.println(c.toString()); System.out.println(\"\\tc cost: \" + c.price() + \"\\n\"); Cookie cITest = new Cookie(\"Chips Delight\", \"Chocolate Chip\", 12, \"flour\", \"sugar\", \"dark chocolate chips\", \"butter\", \"baking soda\", \"salt\", \"flour\", \"sugar\", \"dark chocolate chips\", \"butter\", \"baking soda\", \"salt\"); System.out.println(cITest.toString()); Pie p1 = new Pie(\"Weekly Special\", \"Apple\", 1, 0, \"flour\", \"sugar\", \"apples\", \"cinnamon\", \"butter\", \"baking soda\", \"salt\"); Pie p2 = new Pie(\"Summer Special\", \"Key Lime\", 1, 2.0, \"flour\", \"sugar\", \"lime juice\", \"lemon juice\", \"graham crackers\", \"butter\", \"baking soda\", \"salt\"); System.out.println(\"Pie\"); System.out.println(p1.toString()); System.out.println(\"\\tp1 price: $\" + p1.price()); System.out.print(\"\\tp1 crust cost: \" + p1.getCrustCost() + \" --> \"); p1.setCrustCost(3); System.out.println(p1.getCrustCost()); System.out.println(\"\\tp1 price: $\" + p1.price() + \"\\n\"); System.out.println(p2.toString()); System.out.println(\"\\tp2 price: $\" + p2.price()); System.out.print(\"\\tp2 crust cost: \" + p2.getCrustCost() + \" --> \"); p2.setCrustCost(1); System.out.println(p2.getCrustCost()); System.out.println(\"\\tp2 price: $\" + p2.price() + \"\\n\"); Cake c1 = new Cake(\"Birthday\", \"Chocolate\", 1, 1, \"flour\", \"sugar\", \"cocoa powder\", \"vanilla\", \"eggs\", \"butter\", \"baking soda\", \"baking powder\", \"salt\"); Cake c2 = new Cake(\"2-Layer\", \"Red Velvet\", 1, 2, \"flour\", \"sugar\", \"cocoa powder\", \"food coloring\", \"eggs\", \"butter\", \"baking soda\", \"baking powder\", \"salt\"); System.out.println(\"Cake\"); System.out.println(c1.toString()); System.out.println(\"\\tc1 price: $\" + c1.price()); System.out.print(\"\\tc1 layers: \" + c1.getLayers() + \" --> \"); c1.setLayers(3); System.out.println(c1.getLayers()); System.out.println(\"\\tc1 price: $\" + c1.price() + \"\\n\"); System.out.println(c2.toString()); System.out.println(\"\\tc2 price: $\" + c2.price()); System.out.print(\"\\tc2 layers: \" + c2.getLayers() + \" --> \"); c2.setLayers(6); System.out.println(c2.getLayers()); System.out.println(\"\\tc2 price: $\" + c2.price() + \"\\n\"); WeddingCake c3 = new WeddingCake(\"3-Layer/3-Tier\", \"Vanilla\", 1, 3, 3, \"flour\", \"sugar\", \"buttermilk\", \"coffee\", \"eggs\", \"butter\", \"baking soda\", \"baking powder\", \"salt\"); System.out.println(\"Wedding Cake\"); System.out.println(c3.toString()); System.out.println(\"\\tc3 price: $\" + c3.price()); System.out.print(\"\\tc3 Tiers: \" + c3.getTiers() + \" --> \"); c3.setTiers(1); System.out.println(c3.getTiers()); System.out.println(\"\\tc3 price: $\" + c3.price()); }### Assistant: @Test public void mainTest() { BakeryPart1 bp1 = new BakeryPart1(); BakedItem.resetCount(); BakeryPart1.main(null); Assert.assertEquals(\"\", 7, BakedItem.getCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void handleFoundAdvertisement(Advertisement advertisement) { final Id id = Id.fromAdId(advertisement.getId()); if (mRejects.contains(id)) { return; } final T item = mConverter.make(advertisement); if (item == null) { return; } mHandler.post( new Runnable() { @Override public void run() { push(item); } }); }### Assistant: @Test public void handleSelfFound() throws Exception { mList.setObserver(mObserver); when(mRejects.contains(ID0)).thenReturn(true); mList.handleFoundAdvertisement(mAdvertisement); verifyZeroInteractions(mHandler); verifyZeroInteractions(mObserver); assertEquals(0, mList.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> T queryObject(SqlBuilder builder) throws SQLException { final Hints hint = checkHints(builder.hints()); return internalExecute(hint, ()->{return delegate.queryObject(builder);}); }### Assistant: @Test public void testQueryAll() throws Exception { SqlBuilder builder = selectAll().from(p).where(p.PeopleID.eq(1)).into(Person.class); Person p = dao.queryObject(builder); assertNotNull(p); assertEquals(\"test\", p.getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static IFilter createFilter(String where) { if (StringUtils.isEmpty(where)) { return null; } MySqlExprVisitor visitor = MySqlExprVisitor.parser(where); Object value = visitor.getColumnOrValue(); if (value instanceof IFilter) { return (IFilter) value; } else if (value instanceof ISelectable) { throw new IllegalArgumentException(\"illegal filter:\" + where); } else { return visitor.buildConstanctFilter(value); } }### Assistant: @Test public void testCreateFilter() { String where = \"id > 1 and id <= 10\"; IFilter filter = FilterUtils.createFilter(where); System.out.println(filter); where = \"name = 'hello' and id in ('1','2')\"; filter = FilterUtils.createFilter(where); System.out.println(filter); where = \"gmt_create = '2013-11-11 11:11:11'\"; filter = FilterUtils.createFilter(where); System.out.println(filter); where = \"1+1\"; filter = FilterUtils.createFilter(where); System.out.println(filter); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setFieldIntoObject(Object object, String fieldName, Object value) { Field declaredField = getDeclaredField(object, fieldName); if (declaredField == null) { throw new CloudRuntimeException(String.format(\"Field [fieldName=%s] does not exists into object [%s].\", fieldName, object)); } declaredField.setAccessible(true); try { declaredField.set(object, value); } catch (IllegalArgumentException | IllegalAccessException e) { throw new CloudRuntimeException(String.format(\"Fail to set field [fieldName=%s] into object [%s] with the value [%s].\", fieldName, object, value), e); } }### Assistant: @Test public void setFieldIntoObjectTest() throws Exception { HostResources host = new HostResources(); String expectedName = \"name\"; spy.setFieldIntoObject(host, \"hostName\", expectedName); Mockito.verify(spy).getDeclaredField(Mockito.any(), Mockito.anyString()); Assert.assertEquals(expectedName, host.getHostName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void agentmain(String agentArgs, Instrumentation inst) { premain(agentArgs, inst); }### Assistant: @Test public void invalidArgs() throws Exception { TelemetryAgent.agentmain(\"woo\", instrumentation); verifyZeroInteractions(instrumentation); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SymbolInfo add(String code, String provider) throws IOException { Stopwatch sw = Stopwatch.createStarted(); Pair pair = pairService.getForCodeAndProvider(code, provider); if (pair != null) { throw PairException.alreadyExists(pair.getSymbol(), provider); } LookupDetails details = lookupService.getDetails(code, provider); String source = details.getSource(); String currency = details.getCurrency(); String name = details.getName(); String exchange = details.getExchange(); if (!symbolService.getForCodeWithNoCurrency(currency).isPresent()) { throw PairException.currencyNotFound(currency); } Optional<Symbol> sourceSymbol = symbolService.getForCode(source); if(sourceSymbol.isPresent()) { if(sourceSymbol.get().getCurrency() == null) { throw AdminException.currencyAlreadyExists(source); } } else { symbolService.addSymbol(source, name, null, currency); } pair = pairService.create(code, name, source, currency, exchange, provider); final LatestRateProvider rProvider = rateProviderService.getLatestProvider(ProviderType.STOCK); Quote latestQuote = rProvider.getLatestRate(code); if (latestQuote == null) { throw SymbolException.UNAVAILABLE(code); } latestQuote.setCode(source); latestQuote.setCurrency(currency); List<Quote> historicalQuotes = new ArrayList<>(); final HistoricalRateProvider hRProvider = rateProviderService.getHistoricalProvider(ProviderType.STOCK); try { historicalQuotes.addAll(hRProvider.getHistoricalRates(code)); } catch (IOException | RuntimeException e) { log.warn(\"Cannot get historical data for: {} (provider: {})\", code, provider); } for (Quote q : historicalQuotes) { q.setCode(source); q.setCurrency(currency); } historicalQuotes.removeIf(q -> q.getTime().compareTo(latestQuote.getTime()) == 0); historicalQuotes.add(latestQuote); rateService.addHistoricalRates(historicalQuotes); rateService.addLatestRate(latestQuote); log.info(\"{} created in: {}\", pair, sw); return new SymbolInfo(pair.getSymbol(), pair.getName(), !historicalQuotes.isEmpty(), latestQuote); }### Assistant: @Sql(\"/sql/insert_data.sql\") @Test public void testAdd_pairAlreadyExists() throws Exception { String symbol = \"UBI.PA\"; String provider = \"YAHOO\"; assertThatThrownBy(() -> adminService.add(symbol, provider)) .isInstanceOf(PairException.class) .hasMessage(\"pair.error.already_exists: [UBI.PA, YAHOO]\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T extends XXDBBase> T populateAuditFieldsForCreate(T xObj) { xObj.setCreateTime(DateUtil.getUTCDate()); xObj.setUpdateTime(DateUtil.getUTCDate()); xObj.setAddedByUserId(ContextUtil.getCurrentUserId()); xObj.setUpdatedByUserId(ContextUtil.getCurrentUserId()); return xObj; }### Assistant: @Test public void test2PopulateAuditFieldsForCreate() { rangerAuditFields.populateAuditFieldsForCreate(XXDBBase); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Instant addWorkingDaysToInstant(Instant instant, Duration workingDays) { long days = convertWorkingDaysToDays(instant, workingDays.toDays(), ZeroDirection.ADD_DAYS); return instant.plus(Duration.ofDays(days)); }### Assistant: @Test void testConvertWorkingDaysToDaysForKarFreitag() { Instant gruenDonnerstag2018 = Instant.parse(\"2018-03-29T01:00:00.000Z\"); Instant days = converter.addWorkingDaysToInstant(gruenDonnerstag2018, Duration.ofDays(0)); assertThat(days).isEqualTo(gruenDonnerstag2018.plus(0, ChronoUnit.DAYS)); days = converter.addWorkingDaysToInstant(gruenDonnerstag2018, Duration.ofDays(1)); assertThat(days).isEqualTo(gruenDonnerstag2018.plus(5, ChronoUnit.DAYS)); days = converter.addWorkingDaysToInstant(gruenDonnerstag2018, Duration.ofDays(2)); assertThat(days).isEqualTo(gruenDonnerstag2018.plus(6, ChronoUnit.DAYS)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void processMessage(final ObjectMessage message) throws JMSException { final MessageMetadata metadata = MessageMetadata.fromMessage(message); LOGGER.info(\"Received message of messageType: {} organisationIdentification: {} deviceIdentification: {}\", messageType, metadata.getOrganisationIdentification(), metadata.getDeviceIdentification()); final RequestMessage requestMessage = (RequestMessage) message.getObject(); final Object dataObject = requestMessage.getRequest(); try { final Device device = getDevice(metadata.getDeviceIdentification()); final PushNotificationAlarmDto pushNotificationAlarm = (PushNotificationAlarmDto) dataObject; this.storeAlarmAsEvent(pushNotificationAlarm); final String ownerIdentification = this.getOrganisationIdentificationOfOwner(device); LOGGER.info(\"Matching owner {} with device {} handling {} from {}\", ownerIdentification, metadata.getDeviceIdentification(), messageType, requestMessage.getIpAddress()); final RequestMessage requestWithUpdatedOrganization = new RequestMessage(requestMessage.getCorrelationUid(), ownerIdentification, requestMessage.getDeviceIdentification(), requestMessage.getIpAddress(), pushNotificationAlarm); Optional<DomainInfo> smartMeteringDomain = getDomainInfo(); if (smartMeteringDomain.isPresent()) { this.domainRequestService.send(requestWithUpdatedOrganization, DeviceFunction.PUSH_NOTIFICATION_ALARM.name(), smartMeteringDomain.get()); device.updateConnectionDetailsToSuccess(); deviceRepository.save(device); } else { LOGGER.error( \"No DomainInfo found for SMART_METERING 1.0, unable to send message of message type: {} to \" + \"domain adapter. RequestMessage for {} dropped.\", messageType, pushNotificationAlarm); } } catch (OsgpException e) { String errorMessage = String.format(\"%s occurred, reason: %s\", e.getClass().getName(), e.getMessage()); LOGGER.error(errorMessage, e); throw new JMSException(errorMessage); } }### Assistant: @Test public void testProcessMessageSuccess() throws JMSException { assertThat(this.device.getLastSuccessfulConnectionTimestamp()).isNull(); this.pushNotificationAlarmMessageProcessor.processMessage(this.message); assertThat(this.device.getLastSuccessfulConnectionTimestamp()).isNotNull(); verify(this.deviceRepository).save(this.device); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object getColumnIdentifierAt(int columnIndex) { if ((columnIndex < 0) || (columnIndex >= getColumnCount())) { throw new ArrayIndexOutOfBoundsException(\"invalid column index: \" + columnIndex); } return DEFAULT_COLUMN_IDENTIFIER; }### Assistant: @Test public void testColumnIdentifierAt() { JXTableT table = new JXTableT(new AncientSwingTeam()); ComponentAdapter adapter = table.getComponentAdapter(0, 0); Object id = new Integer(50); table.getColumn(0).setIdentifier(id); assertEquals(table.getColumn(0).getIdentifier(), adapter.getColumnIdentifierAt(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ParamInfo<String> dynamicParamKey(String key) { return ParamInfoFactory.createParamInfo(key, String.class) .setDescription(\"DbKey: \" + key) .build(); }### Assistant: @Test public void testDynamicParamKey() { ParamInfo<String> param = AnnotationUtils.dynamicParamKey(\"key\"); Assert.assertEquals(\"DbKey: key\", param.getDescription()); Assert.assertEquals(\"key\", param.getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object get(Object key) { int hash = hash(key); synchronized (locks[hash % N_LOCKS]) { for (Node m = buckets[hash]; m != null; m = m.next) if (m.key.equals(key)) return m.value; } return null; }### Assistant: @Test public void showDefect() throws Exception { DefectedStripedMap map = new DefectedStripedMap(100); map.get(key); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public long getAsLong() { return this.getAsInt(); }### Assistant: @Test public void testgetAsLong() { assertEquals(12L, new JBBPFieldByte(new JBBPNamedFieldInfo(\"test.field\", \"field\", 123), (byte) 12).getAsLong()); assertEquals(-12L, new JBBPFieldByte(new JBBPNamedFieldInfo(\"test.field\", \"field\", 123), (byte) -12).getAsLong()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static HistoricItem previousState(Item item) { return previousState(item, false); }### Assistant: @Test public void testPreviousStateSkip() { item.setState(new DecimalType(2012)); HistoricItem prevStateItem = PersistenceExtensions.previousState(item, true, TestPersistenceService.ID); assertNotNull(prevStateItem); assertEquals(\"2011\", prevStateItem.getState().toString()); prevStateItem = PersistenceExtensions.previousState(item, true); assertNull(prevStateItem); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String get(String key) { return get(key, false); }### Assistant: @Test public void testByteGet() { byte[] testBytes = JedisManager.get(key.getBytes()); assertTrue(\"Should get 'lollol'\", Arrays.equals(testBytes, value.getBytes())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void destroy() { commandResponseListener.dispose(); localIpSetter.shutdown(); }### Assistant: @Test public void testDestroy() throws Exception { peerManager.destroy(); verify( commandResponseListener ).dispose(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void utf8Fixup(final HttpServletRequest req, final Map<String, Object[]> params) { if (req.getQueryString() == null) { return; } final String[] paramsInQueryString = req.getQueryString().split(\"&\"); if (paramsInQueryString != null) { for (final String param : paramsInQueryString) { final String[] paramTokens = param.split(\"=\", 2); if (paramTokens.length == 2) { String name = decodeUtf8(paramTokens[0]); String value = decodeUtf8(paramTokens[1]); params.put(name, new String[] {value}); } else { s_logger.debug(\"Invalid parameter in URL found. param: \" + param); } } } }### Assistant: @Test public void utf8FixupUtf() throws UnsupportedEncodingException { Mockito.when(request.getQueryString()).thenReturn( URLEncoder.encode(\"\u9632\u6c34\u955c\u94bb\u5b54\u673a\", \"UTF-8\") + \"=\" + URLEncoder.encode(\"\u00e1rv\u00edzt\u0171r\u0151t\u00fck\u00f6rf\u00far\u00f3\", \"UTF-8\")); HashMap<String, Object[]> params = new HashMap<String, Object[]>(); servlet.utf8Fixup(request, params); Assert.assertEquals(\"\u00e1rv\u00edzt\u0171r\u0151t\u00fck\u00f6rf\u00far\u00f3\", params.get(\"\u9632\u6c34\u955c\u94bb\u5b54\u673a\")[0]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static FileSystem get(URI uri) throws IOException { return FileSystemSafetyNet.wrapWithSafetyNetWhenActivated(getUnguardedFileSystem(uri)); }### Assistant: @Test public void testGet() throws URISyntaxException, IOException { String scheme = \"file\"; assertTrue(WrappingProxyUtil.stripProxy(FileSystem.get(new URI(scheme + \": try { FileSystem.get(new URI(scheme + \": } catch (IOException ioe) { assertTrue(ioe.getMessage().startsWith(\"Found local file path with authority '\")); } assertTrue(WrappingProxyUtil.stripProxy(FileSystem.get(new URI(scheme + \":/test/test\"))) instanceof LocalFileSystem); assertTrue(WrappingProxyUtil.stripProxy(FileSystem.get(new URI(scheme + \":test/test\"))) instanceof LocalFileSystem); assertTrue(WrappingProxyUtil.stripProxy(FileSystem.get(new URI(\"/test/test\"))) instanceof LocalFileSystem); assertTrue(WrappingProxyUtil.stripProxy(FileSystem.get(new URI(\"test/test\"))) instanceof LocalFileSystem); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"/queues/providers\") @ApiOperation(\"Get registered queue providers\") public List<String> getEventQueueProviders() { return eventService.getEventQueueProviders(); }### Assistant: @Test public void getEventQueueProviders() { List<String> queuesList = new ArrayList<>(); when(mockEventService.getEventQueueProviders()).thenReturn(queuesList); assertEquals(queuesList, eventResource.getEventQueueProviders()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CompletableFuture<AccessExecutionGraph> getExecutionGraph(JobID jobId, RestfulGateway restfulGateway) { Preconditions.checkState(running, \"ExecutionGraphCache is no longer running\"); while (true) { final ExecutionGraphEntry oldEntry = cachedExecutionGraphs.get(jobId); final long currentTime = System.currentTimeMillis(); if (oldEntry != null) { if (currentTime < oldEntry.getTTL()) { if (oldEntry.getExecutionGraphFuture().isDone() && !oldEntry.getExecutionGraphFuture().isCompletedExceptionally()) { try { if (oldEntry.getExecutionGraphFuture().get().getState() != JobStatus.SUSPENDED) { return oldEntry.getExecutionGraphFuture(); } } catch (InterruptedException | ExecutionException e) { throw new RuntimeException(\"Could not retrieve ExecutionGraph from the orderly completed future. This should never happen.\", e); } } else if (!oldEntry.getExecutionGraphFuture().isDone()) { return oldEntry.getExecutionGraphFuture(); } } } final ExecutionGraphEntry newEntry = new ExecutionGraphEntry(currentTime + timeToLive.toMilliseconds()); final boolean successfulUpdate; if (oldEntry == null) { successfulUpdate = cachedExecutionGraphs.putIfAbsent(jobId, newEntry) == null; } else { successfulUpdate = cachedExecutionGraphs.replace(jobId, oldEntry, newEntry); oldEntry.getExecutionGraphFuture().cancel(false); } if (successfulUpdate) { final CompletableFuture<AccessExecutionGraph> executionGraphFuture = restfulGateway.requestJob(jobId, timeout); executionGraphFuture.whenComplete( (AccessExecutionGraph executionGraph, Throwable throwable) -> { if (throwable != null) { newEntry.getExecutionGraphFuture().completeExceptionally(throwable); cachedExecutionGraphs.remove(jobId, newEntry); } else { newEntry.getExecutionGraphFuture().complete(executionGraph); if (executionGraph.getState() == JobStatus.SUSPENDED) { cachedExecutionGraphs.remove(jobId, newEntry); } } }); if (!running) { cachedExecutionGraphs.remove(jobId, newEntry); } return newEntry.getExecutionGraphFuture(); } } }### Assistant: @Test public void testCacheInvalidationIfSwitchToSuspended() throws Exception { final Time timeout = Time.milliseconds(100L); final Time timeToLive = Time.hours(1L); final JobID jobId = new JobID(); final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class); final SuspendableAccessExecutionGraph toBeSuspendedExecutionGraph = new SuspendableAccessExecutionGraph(jobId); final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class); when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn( CompletableFuture.completedFuture(toBeSuspendedExecutionGraph), CompletableFuture.completedFuture(accessExecutionGraph)); try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) { CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway); assertEquals(toBeSuspendedExecutionGraph, executionGraphFuture.get()); toBeSuspendedExecutionGraph.setJobStatus(JobStatus.SUSPENDED); CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway); assertEquals(accessExecutionGraph, executionGraphFuture2.get()); CompletableFuture<AccessExecutionGraph> executionGraphFuture3 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway); assertEquals(accessExecutionGraph, executionGraphFuture3.get()); verify(jobManagerGateway, times(2)).requestJob(eq(jobId), any(Time.class)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ClassDescriptor findSumType(Collection<ClassDescriptor> classes) throws MetaDataException { return findCommonClasses(classes).get(0); }### Assistant: @Test public void testNull() throws MetaDataException { classes = null; try { DescriptorUtils.findSumType(classes); fail(\"No exception thrown\"); } catch (IllegalArgumentException e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ServiceIdentityList getServiceIdentityList(ResourceContext ctx, String domainName) { final String caller = ctx.getApiName(); final String principalDomain = logPrincipalAndGetDomain(ctx); validateRequest(ctx.request(), principalDomain, caller); validate(domainName, TYPE_DOMAIN_NAME, principalDomain, caller); domainName = domainName.toLowerCase(); setRequestDomain(ctx, domainName); DomainData domainData = dataStore.getDomainData(domainName); if (domainData == null) { setRequestDomain(ctx, ZTSConsts.ZTS_UNKNOWN_DOMAIN); throw notFoundError(\"Domain not found: '\" + domainName + \"'\", caller, ZTSConsts.ZTS_UNKNOWN_DOMAIN, principalDomain); } return generateServiceIdentityList(domainName, domainData.getServices()); }### Assistant: @Test public void testGetServiceIdentityList() { SignedDomain signedDomain = createSignedDomain(\"coretech\", \"weather\", \"storage\", true); store.processDomain(signedDomain, false); SimplePrincipal principal = (SimplePrincipal) SimplePrincipal.create(\"hockey\", \"kings\", \"v=S1,d=hockey;n=kings;s=sig\", 0, new PrincipalAuthority()); ResourceContext context = createResourceContext(principal); com.yahoo.athenz.zts.ServiceIdentityList svcList = zts.getServiceIdentityList(context, \"coretech\"); assertEquals(svcList.getNames().size(), 2); assertTrue(svcList.getNames().contains(\"storage\")); assertTrue(svcList.getNames().contains(\"backup\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<RangerPolicy> getPolicies(SearchFilter filter) throws Exception { if(LOG.isDebugEnabled()) { LOG.debug(\"==> ServiceDBStore.getPolicies()\"); } Boolean fetchTagPolicies = Boolean.valueOf(filter.getParam(SearchFilter.FETCH_TAG_POLICIES)); Boolean fetchAllZonePolicies = Boolean.valueOf(filter.getParam(SearchFilter.FETCH_ZONE_UNZONE_POLICIES)); String zoneName = filter.getParam(SearchFilter.ZONE_NAME); List<RangerPolicy> ret = new ArrayList<RangerPolicy>(); RangerPolicyList policyList = searchRangerPolicies(filter); List<RangerPolicy> resourcePolicies = policyList.getPolicies(); List<RangerPolicy> tagPolicies = new ArrayList<RangerPolicy>(); if(fetchTagPolicies) { tagPolicies = searchRangerTagPoliciesOnBasisOfServiceName(resourcePolicies); Iterator<RangerPolicy> itr = tagPolicies.iterator(); while (itr.hasNext()) { RangerPolicy pol = (RangerPolicy) itr.next(); if(!fetchAllZonePolicies) { if(StringUtils.isNotEmpty(zoneName)) { if(!zoneName.equals(pol.getZoneName())){ itr.remove(); } } else { if(StringUtils.isNotEmpty(pol.getZoneName())) { itr.remove(); } } } } } if(LOG.isDebugEnabled()) { LOG.debug(\"<== ServiceDBStore.getPolicies()\"); } ret.addAll(resourcePolicies); ret.addAll(tagPolicies); return ret; }### Assistant: @Test public void test30getPolicies() throws Exception { SearchFilter filter = new SearchFilter(); filter.setParam(SearchFilter.POLICY_NAME, \"policyName\"); filter.setParam(SearchFilter.SERVICE_NAME, \"serviceName\"); List<RangerPolicy> rangerPolicyLists = new ArrayList<RangerPolicy>(); RangerPolicy rangerPolicy = rangerPolicy(); rangerPolicyLists.add(rangerPolicy); RangerPolicyList policyListObj = new RangerPolicyList(); policyListObj.setPageSize(0); policyListObj.setResultSize(1); policyListObj.setSortBy(\"asc\"); policyListObj.setSortType(\"1\"); policyListObj.setStartIndex(0); policyListObj.setTotalCount(10); List<RangerPolicy> dbRangerPolicy = serviceDBStore.getPolicies(filter); Assert.assertNotNull(dbRangerPolicy); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Spliterator<T> spliterator() { checkConsumed(); return new SingletonSpliterator<>(element); }### Assistant: @Test void spliteratorTrySplit() { assertNull(instance.spliterator().trySplit()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute(Zipper zipper, T page) throws IOException { Path widgetsRepositoryPath = pathResolver.getWidgetsRepositoryPath(); zipper.addDirectoryToZip( widgetsRepositoryPath, new IncludeChildDirectoryPredicate(widgetsRepositoryPath, widgetIdVisitor.visit(page)), ALL_FILES, RESOURCES + \"/widgets\"); List<Path> files = directiveFileGenerator.getWidgetsFilesUsedInPage(page); byte[] content = directiveFileGenerator.concatenate(files); content = Minifier.minify(content); zipper.addToZip(content, RESOURCES + \"/js/widgets-\" + DigestUtils.sha1Hex(content) + \".min.js\"); }### Assistant: @Test public void should_add_page_widgets_to_zip() throws Exception { repository.addWidget(aWidget().id(\"widget1\")); repository.addWidget(aWidget().id(\"widget2\")); Page page = aPage().with( aComponent(\"widget1\"), aComponent(\"widget2\")) .build(); String content = \"Mon content to minify\"; byte[] expected = Minifier.minify(content.getBytes()); when(directiveFileGenerator.getWidgetsFilesUsedInPage(page)).thenReturn(Arrays.asList(Paths.get(\"widget1\"),Paths .get(\"widget2\"))); when(directiveFileGenerator.concatenate(Arrays.asList(Paths.get(\"widget1\"),Paths .get(\"widget2\")))).thenReturn(content.getBytes()); step.execute(zipper, page); verify(zipper).addToZip(repository.resolveWidgetJson(\"widget1\"), \"resources/widgets/widget1/widget1.json\"); verify(zipper).addToZip(repository.resolveWidgetJson(\"widget2\"), \"resources/widgets/widget2/widget2.json\"); verify(zipper).addToZip(expected, \"resources/js/widgets-\" + DigestUtils.sha1Hex(expected) + \".min.js\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getCurveName(EcCurve curve) { return CURVE_TO_NAME_MAP.get(curve); }### Assistant: @Test public void testGetSecp521r1Name() { Assert.assertEquals(\"secp521r1\", CurveLookupMap.getCurveName(EcCurve.secp521r1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void execute() throws PeerException { Set<Peer> peers = environment.getPeers(); if ( peers.isEmpty() ) { return; } for ( final Peer peer : peers ) { cleanupUtil.addPeerTask( new PeerUtil.PeerTask<>( peer, new Callable<Object>() { @Override public Object call() throws Exception { peer.cleanupEnvironment( environment.getEnvironmentId() ); return null; } } ) ); } PeerUtil.PeerTaskResults<Object> cleanupResults = cleanupUtil.executeParallel(); for ( PeerUtil.PeerTaskResult cleanupResult : cleanupResults.getResults() ) { if ( cleanupResult.hasSucceeded() ) { trackerOperation.addLog( String.format( \"Environment cleanup succeeded on peer %s\", cleanupResult.getPeer().getName() ) ); } else { trackerOperation.addLog( String.format( \"Environment cleanup failed on peer %s. Reason: %s\", cleanupResult.getPeer().getName(), cleanupResult.getFailureReason() ) ); } } }### Assistant: @Test public void testExecute() throws Exception { doReturn( true ).when( peerTaskResult ).hasSucceeded(); step.execute(); verify( trackerOperation ).addLog( anyString() ); doReturn( false ).when( peerTaskResult ).hasSucceeded(); step.execute(); verify( trackerOperation, times( 2 ) ).addLog( anyString() ); doReturn( Sets.newHashSet() ).when( environment ).getPeers(); reset( trackerOperation ); step.execute(); verify( trackerOperation, never() ).addLog( anyString() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"/permission\") @Produces({ \"application/xml\", \"application/json\" }) @PreAuthorize(\"@rangerPreAuthSecurityHandler.isAPIAccessible(\\\"\" + RangerAPIList.SEARCH_X_MODULE_DEF + \"\\\")\") public VXModuleDefList searchXModuleDef(@Context HttpServletRequest request) { SearchCriteria searchCriteria = searchUtil.extractCommonCriterias( request, xModuleDefService.sortFields); searchUtil.extractString(request, searchCriteria, \"module\", \"modulename\", null); searchUtil.extractString(request, searchCriteria, \"moduleDefList\", \"id\", null); searchUtil.extractString(request, searchCriteria, \"userName\", \"userName\", null); searchUtil.extractString(request, searchCriteria, \"groupName\", \"groupName\", null); return xUserMgr.searchXModuleDef(searchCriteria); }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void test80searchXModuleDef() { VXModuleDefList testVXModuleDefList= new VXModuleDefList() ; VXModuleDef vXModuleDef=createVXModuleDef(); List<VXModuleDef> VXModuleDefs= new ArrayList<VXModuleDef>(); VXModuleDefs.add(vXModuleDef); testVXModuleDefList.setvXModuleDef(VXModuleDefs); testVXModuleDefList.setTotalCount(1); testVXModuleDefList.setStartIndex(1); HttpServletRequest request = Mockito.mock(HttpServletRequest.class); SearchCriteria testSearchCriteria=createsearchCriteria(); Mockito.when(searchUtil.extractCommonCriterias((HttpServletRequest)Mockito.any() ,(List<SortField>)Mockito.any())).thenReturn(testSearchCriteria); Mockito.when(searchUtil.extractString(request, testSearchCriteria, \"module\",\"modulename\", null)).thenReturn(\"\"); Mockito.when(searchUtil.extractString(request, testSearchCriteria, \"moduleDefList\",\"id\", null)).thenReturn(\"\"); Mockito.when(searchUtil.extractString(request, testSearchCriteria, \"userName\",\"userName\", null)).thenReturn(\"\"); Mockito.when(searchUtil.extractString(request, testSearchCriteria, \"groupName\",\"groupName\", null)).thenReturn(\"\"); Mockito.when(xUserMgr.searchXModuleDef(testSearchCriteria)).thenReturn(testVXModuleDefList); VXModuleDefList outputVXModuleDefList=xUserRest.searchXModuleDef(request); assertNotNull(outputVXModuleDefList); assertEquals(outputVXModuleDefList.getTotalCount(),testVXModuleDefList.getTotalCount()); assertEquals(outputVXModuleDefList.getStartIndex(),testVXModuleDefList.getStartIndex()); Mockito.verify(xUserMgr).searchXModuleDef(testSearchCriteria); Mockito.verify(searchUtil).extractCommonCriterias((HttpServletRequest)Mockito.any() ,(List<SortField>)Mockito.any()); Mockito.verify(searchUtil).extractString(request, testSearchCriteria, \"module\",\"modulename\", null); Mockito.verify(searchUtil).extractString(request, testSearchCriteria, \"moduleDefList\",\"id\", null); Mockito.verify(searchUtil).extractString(request, testSearchCriteria, \"userName\",\"userName\", null); Mockito.verify(searchUtil).extractString(request, testSearchCriteria, \"groupName\",\"groupName\", null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Measure findMeasure(String artifactId, String measureKey) throws SonarMeasureNotFoundException { Preconditions.checkArgument(!Strings.isNullOrEmpty(artifactId), \"artifactId is a mandatory parameter\"); Preconditions.checkNotNull(measureKey, \"measureKey is a mandatory parameter\"); return findMeasureFromSonar(artifactId, measureKey); }### Assistant: @Test(expected = SonarMeasureNotFoundException.class) public void should_throw_exception_when_resource_is_not_fond() throws SonarMeasureNotFoundException { when(sonar.find(Mockito.any(ResourceQuery.class))).thenReturn(null); sonarClient.findMeasure(\"artifactId\", \"measureKey\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public <T> T registerServiceClass(String name, Class<T> type) { if (name == null || type == null) { throw new IllegalArgumentException(\"name and type must not be null for service registration\"); } T service; try { service = (T) applicationContext.getBeanFactory().autowire(type, AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true); registerBean(name, service); } catch (BeansException e) { throw new IllegalArgumentException(\"Invalid service class (\"+type+\") with name (\"+name+\") registration: \" + e.getMessage(), e); } return service; }### Assistant: @Test public void testRegisterServiceClass() { ssm.startup(); SampleAnnotationBean sab = ssm.registerServiceClass(\"newAnnote\", SampleAnnotationBean.class); assertNotNull(sab); sab = null; List<SampleAnnotationBean> l = ssm.getServicesByType(SampleAnnotationBean.class); assertNotNull(l); assertEquals(2, l.size()); l = null; try { ssm.registerService(\"fakey\", (Class<?>)null); fail(\"should have thrown exception\"); } catch (IllegalArgumentException e) { assertNotNull(e.getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int getResultSetType() throws SQLException { notClosed(); return ResultSet.TYPE_SCROLL_INSENSITIVE; }### Assistant: @Test public void shouldReturnResultSetType() throws SQLException { assertThat(stmt.getResultSetType(), is(ResultSet.TYPE_SCROLL_INSENSITIVE)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean supports(Object endpoint) { return endpoint instanceof MessageEndpoint; }### Assistant: @Test public void testSupports() throws Exception { Assert.assertTrue(\"MessageEndpointAdapter does not support MessageEndpoint\", adapter.supports(endpointMock)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getLimitString(String sql, int offset,String offsetPlaceholder, int limit, String limitPlaceholder) { if (offset > 0) { return sql + \" limit \"+offsetPlaceholder+\",\"+limitPlaceholder; } else { return sql + \" limit \"+limitPlaceholder; } }### Assistant: @Test public void getLimitStringWithPlaceHolader3() { assertEquals(\"select * from user limit #{limit}\", dialect.getLimitString(\"select * from user\", 0,\"#{offset}\", 0,\"#{limit}\")); assertEquals(\"select * from user limit #{offset},#{limit}\", dialect.getLimitString(\"select * from user\", 12, \"#{offset}\",0,\"#{limit}\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isValidNcNameStart( int c ) { return c < NUMBER_OF_CHARACTERS && (MASKS[c] & NCNAME_START_CHARACTER) != 0; }### Assistant: @Test public void shouldNotAllowColonInNcName() { assertThat(XmlCharacters.isValidNcNameStart(':'), is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validate(AkibanInformationSchema ais, AISValidationOutput output) { for (Join join : ais.getJoins().values()) { if (join.getParent().getPrimaryKey() == null) { output.reportFailure(new AISValidationFailure( new JoinParentNoExplicitPK (join.getParent().getName()))); continue; } TableIndex parentPK= join.getParent().getPrimaryKey().getIndex(); if (parentPK.getKeyColumns().size() != join.getJoinColumns().size()) { output.reportFailure(new AISValidationFailure( new JoinColumnMismatchException (join.getJoinColumns().size(), join.getChild().getName(), join.getParent().getName(), parentPK.getKeyColumns().size()))); continue; } Iterator<JoinColumn> joinColumns = join.getJoinColumns().iterator(); for (IndexColumn parentPKColumn : parentPK.getKeyColumns()) { JoinColumn joinColumn = joinColumns.next(); if (parentPKColumn.getColumn() != joinColumn.getParent()) { output.reportFailure(new AISValidationFailure ( new JoinToWrongColumnsException ( join.getChild().getName(), joinColumn.getParent().getName(), parentPK.getTable().getName(), parentPKColumn.getColumn().getName()))); } } } }### Assistant: @Test public void joinTwoToOneMismatch() { builder.table(\"j5\").colInt(\"c1\").colString(\"c2\", 10).joinTo(\"t1\").on(\"c1\",\"c1\").and(\"c2\", \"c2\"); Collection<AISValidationFailure> failures = builder.unvalidatedAIS().validate(validations).failures(); Assert.assertEquals(1, failures.size()); AISValidationFailure fail = failures.iterator().next(); Assert.assertEquals(ErrorCode.JOIN_COLUMN_MISMATCH, fail.errorCode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<List<Edge>> components() { return Collections.unmodifiableList(components); }### Assistant: @Test public void exocyclic() throws Exception { Graph g = Graph.fromSmiles(\"[AsH]=C1C=CC=CC=C1\"); BiconnectedComponents bc = new BiconnectedComponents(g); assertThat(bc.components().size(), is(1)); assertThat(bc.components().get(0).size(), is(7)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <ReqT, RespT> ClientCall<ReqT, RespT> newCall( MethodDescriptor<ReqT, RespT> methodDescriptor, CallOptions callOptions) { lock.readLock().lock(); try { return delegate.newCall(methodDescriptor, callOptions); } finally { lock.readLock().unlock(); } }### Assistant: @Test public void channelRefreshShouldSwapChannels() throws IOException { ManagedChannel underlyingChannel1 = Mockito.mock(ManagedChannel.class); ManagedChannel underlyingChannel2 = Mockito.mock(ManagedChannel.class); ScheduledExecutorService scheduledExecutorService = Mockito.mock(ScheduledExecutorService.class); final List<Runnable> channelRefreshers = new ArrayList<>(); Answer extractChannelRefresher = new Answer() { public Object answer(InvocationOnMock invocation) { channelRefreshers.add((Runnable) invocation.getArgument(0)); return null; } }; Mockito.doAnswer(extractChannelRefresher) .when(scheduledExecutorService) .schedule( Mockito.any(Runnable.class), Mockito.anyLong(), Mockito.eq(TimeUnit.MILLISECONDS)); FakeChannelFactory channelFactory = new FakeChannelFactory(Arrays.asList(underlyingChannel1, underlyingChannel2)); ManagedChannel refreshingManagedChannel = new RefreshingManagedChannel(channelFactory, scheduledExecutorService); refreshingManagedChannel.newCall( FakeMethodDescriptor.<String, Integer>create(), CallOptions.DEFAULT); Mockito.verify(underlyingChannel1, Mockito.only()) .newCall(Mockito.<MethodDescriptor<String, Integer>>any(), Mockito.any(CallOptions.class)); channelRefreshers.get(0).run(); refreshingManagedChannel.newCall( FakeMethodDescriptor.<String, Integer>create(), CallOptions.DEFAULT); Mockito.verify(underlyingChannel2, Mockito.only()) .newCall(Mockito.<MethodDescriptor<String, Integer>>any(), Mockito.any(CallOptions.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void bang() { if (!seq.isEmpty()) { fixIndexBounds(); if (count >= duration) { if (duration == INDEX_SET_BEFORE_SEQ) { index(index); } else if (duration > 0) { if (!arpeggiating()) { index(index + step); } else { setDuration(); } } } if (count == 0) { output(); int startIndex = index; while (duration == 0 && duration != INFINITY) { if (!arpeggiating()) { index(index + step); if (index == startIndex) { duration = INDEX_SET_BEFORE_SEQ; break; } } else { setDuration(); } output(); } } } count++; }### Assistant: @Test public void testInterleavedZero() throws Exception { if (DEBUG) { out.println(\"\\n*** START testInterleavedZero ***\"); } rStub s = makeSeq(2, 0, 2, 0); s.bang(); assertEquals(2, s.valueSinceBang()); s.bang(); assertNull(s.valueSinceBang()); s.bang(); assertEquals(2, s.valueSinceBang()); s.bang(); assertNull(s.valueSinceBang()); s.bang(); assertEquals(2, s.valueSinceBang()); assertEquals(s.getValueOutputs(), 2, 0, 2, 0, 2); if (DEBUG) { out.println(\"*** END testInterleavedZero ***\\n\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String toEbXML(Recipient recipient) { if (recipient == null) { return null; } String person = Hl7v2Based.render(recipient.getPerson()); String organization = Hl7v2Based.render(recipient.getOrganization()); String telecom = Hl7v2Based.render(recipient.getTelecom()); if ((person == null) && (organization == null) && (telecom == null)) { return null; } StringBuilder sb = new StringBuilder(); if (organization != null) { sb.append(organization); } if ((person != null) || (telecom != null)) { sb.append('|'); if (person != null) { sb.append(person); } if (telecom != null) { sb.append('|').append(telecom); } } return sb.toString(); }### Assistant: @Test public void testToEbXMLNoOrganization() { recipient.setOrganization(null); String ebXML = transformer.toEbXML(recipient); assertNotNull(ebXML); assertEquals(\"|personId^familyName^givenName^second^suffix^prefix^degree^^&uni2&uniType2|^^Fidonet^2:465/193.8\", ebXML); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void rebuildMandatoryContent() { for (final SiteMapConfiguration config : siteMapConfigurationsContainer.getAll()) { for (final String path : config.getMandatoryCachedPaths()) { rebuildImpl(path); } } }### Assistant: @Test public void rebuildMandatoryContent() { final HashSet<String> mandatoryPaths = new HashSet<>(Arrays.asList(page.getPath())); when(siteMapConfiguration.getMandatoryCachedPaths()).thenReturn(mandatoryPaths); model.rebuildAll(); assertOnCacheRefreshedMapContains(page); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public NoSuchPreparerException() { super(); }### Assistant: @Test public void testNoSuchPreparerException() { NoSuchPreparerException exception = new NoSuchPreparerException(); assertNull(exception.getMessage()); assertNull(exception.getCause()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: LoggingEvent asLoggingEvent() { String fqnOfCategoryClass = null; String nestedDiagnosticContext = \"\"; Map<String, String> mdcProperties = Collections.emptyMap(); return new LoggingEvent( fqnOfCategoryClass, logger, TimeUnit.NANOSECONDS.toMillis(logData.getTimestampNanos()), level, message, Thread.currentThread().getName(), thrown != null ? new ThrowableInformation(thrown) : null, nestedDiagnosticContext, getLocationInfo(), mdcProperties); }### Assistant: @Test public void testWithThrown() { Throwable cause = new Throwable(\"Goodbye World\"); LogData data = FakeLogData.withPrintfStyle(\"Hello World\").addMetadata(LogContext.Key.LOG_CAUSE, cause); SimpleLogEvent logEvent = newSimpleLogEvent(data); assertThat(logEvent.asLoggingEvent().getThrowableInformation().getThrowable()) .isSameInstanceAs(cause); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ValueBoxEditor<String> name() { return nameEditor; }### Assistant: @Test public void testName() { assertEquals(nameEditor, presenter.name()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public List<WebElement> findElements(WebDriver driver) { if (parentSelector == null) { return type.findElements(driver, value); } WebElement frameElement = parentSelector.findElement(driver); return type.findElements(frameElement, value); }### Assistant: @Test public void findElements_element_nested_notFound() throws Exception { DomSelector selector = new DomSelector(SelectorType.CLASS_NAME, \"none\", new DomSelector(SelectorType.ID, \"main\")); assertThat(selector.findElements(defaultContentElement), is(Collections.<WebElement> emptyList())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public JsonObject getDefaultOptions() { return delegate.getDefaultOptions(); }### Assistant: @Test public void getDefaultOptions() { Assertions.assertThat(underTest.getDefaultOptions()).isEqualTo(DEFAULT_OPTIONS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Collection<File> wipeOldFiles(File directory, Long cutoffTime, boolean deleteDirectory) { if (directory == null || !directory.exists()) { return new ArrayList<File>(); } Collection<File> result = new ArrayList<File>(); Collection<File> oldFiles = FileHelper.getFilesOlderThan(directory, cutoffTime, Boolean.TRUE); for (File file : oldFiles) { String logString = \"Deleting File: \\\"\" + file.toString() + \"\\\" ... \"; if (file.canWrite() && file.delete()) { logString += \"done. \"; result.add(file); if (file.getParentFile().isDirectory()) { if (file.getParentFile() != directory && file.getParentFile().delete()) { log.info(\"Deleting Directory: \\\"\" + file.getParent() + \"\\\" ... done\"); } else if (file.getParentFile() == directory && deleteDirectory) { log.info(\"Deleting Directory: \\\"\" + file.getParent() + \"\\\" ... done\"); } } } else { logString += \"FAILED!\"; } log.info(logString); } return result; }### Assistant: @Test @Ignore public void testWipeOldFilesWithAnAlreadyOpenFile() throws FileNotFoundException, IOException { Collection<File> result = new ArrayList<File>(); File openFile = new File(FileHelperTest.sampleDir); InputStream is = null; try { is = new FileInputStream(openFile); result = FileHelper.wipeOldFiles(openFile, 3600000l, false); } finally { if (is != null) { is.close(); } } assertTrue(result.isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void dropColumn(Connection conn, String tableName, String columnName) { try (PreparedStatement pstmt = conn.prepareStatement(\"ALTER TABLE \" + tableName + \" DROP COLUMN \" + columnName);){ pstmt.executeUpdate(); s_logger.debug(\"Column \" + columnName + \" is dropped successfully from the table \" + tableName); } catch (SQLException e) { s_logger.warn(\"Unable to drop column \" + columnName + \" due to exception\", e); } }### Assistant: @Test public void testDropColumnWhenPrepareStatementResultsInException() throws Exception { SQLException sqlException = new SQLException(); when(connectionMock.prepareStatement(anyString())).thenThrow(sqlException); Connection conn = connectionMock; String tableName = \"tableName\"; String columnName = \"columnName\"; dao.dropColumn(conn, tableName, columnName); verify(connectionMock, times(1)).prepareStatement(anyString()); verify(preparedStatementMock, times(0)).executeUpdate(); verify(preparedStatementMock, times(0)).close(); verify(loggerMock, times(0)).debug(anyString()); verify(loggerMock, times(1)).warn(anyString(), eq(sqlException)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Pure public int getNotNullChildCount() { return this.notNullChildCount; }### Assistant: @Test public void getNotNullChildCount() { assertEquals(2, this.root.getNotNullChildCount()); assertEquals(1, this.child1.getNotNullChildCount()); assertEquals(0, this.child2.getNotNullChildCount()); assertEquals(0, this.node.getNotNullChildCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String toString() { String versionString = componentVersion; if (this.wineryVersion > 0) { versionString += (StringUtils.isEmpty(versionString) ? \"\" : WINERY_VERSION_SEPARATOR) + WINERY_VERSION_PREFIX + wineryVersion; if (this.workInProgressVersion > 0) { versionString += WINERY_VERSION_SEPARATOR + WINERY_WIP_VERSION_PREFIX + this.workInProgressVersion; } } return versionString; }### Assistant: @Test public void testToStringWithoutWineryVersion() { String componentVersion = \"funnyVersionIdentifier\"; int wineryVersion = 0; int wipVersion = 0; WineryVersion v = new WineryVersion(componentVersion, wineryVersion, wipVersion); assertEquals(componentVersion, v.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Integer zeroValue() { return 0; }### Assistant: @Test public void testZero() { IntegerLSBCodec codec = new IntegerLSBCodec(); Assert.assertEquals(0, codec.zeroValue(), 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void runInternal() throws IOException, BackoffException { LOG.info(\"Starting to listen for events for {}\", eventNames); JsonInput jsonInput = openJsonInput(); int errorCount = 0; while (true) { try { final JsonParser jsonParser = jsonInput.getJsonParser(); if (Thread.currentThread().isInterrupted()) { throw new InterruptedIOException(\"Interrupted\"); } readBatch(jsonParser); errorCount = 0; } catch (IOException e) { final boolean wasInterrupted = Thread.currentThread().isInterrupted(); metricsCollector.markErrorWhileConsuming(); if (errorCount > 0) { LOG.warn(\"Got [{}] [{}] while reading events for {} after [{}] retries\", e.getClass().getSimpleName(), e.getMessage(), eventNames, errorCount, e); } else { LOG.info(\"Got [{}] [{}] while reading events for {}\", e.getClass().getSimpleName(), e.getMessage(), eventNames, e); } jsonInput.close(); if (wasInterrupted || Thread.currentThread().isInterrupted()) { LOG.warn(\"Thread was interrupted\"); break; } try { LOG.debug(\"Reconnecting after [{}] errors\", errorCount); jsonInput = backoffStrategy.call(errorCount, e, this::openJsonInput); LOG.info(\"Reconnected after [{}] errors\", errorCount); metricsCollector.markReconnection(); } catch (InterruptedException interruptedException) { LOG.warn(\"Interrupted during reconnection\", interruptedException); Thread.currentThread().interrupt(); return; } errorCount++; } catch (Throwable e) { LOG.warn(\"Got [{}] [{}] while reading events for {}\", e.getClass().getSimpleName(), e.getMessage(), eventNames, e); try { jsonInput.close(); } catch (Throwable suppressed) { e.addSuppressed(e); } throw e; } } }### Assistant: @Test public void shouldHandleBrokenInputInEvents() throws IOException, InterruptedException, BackoffException { final Response response = mock(Response.class); final ByteArrayInputStream initialInputStream = new ByteArrayInputStream(\"{\\\"cursor\\\":{\\\"partition\\\":\\\"123\\\",\\\"offset\\\":\\\"456\\\"},\\\"events\\\":[{\\\"id\\\":\".getBytes(\"utf-8\")); when(response.getBody()).thenReturn(initialInputStream); final Request request = mock(Request.class); when(request.execute()).thenReturn(response); when(RequestFactory.createRequest(uri, \"GET\")).thenReturn(request); final NoBackoffStrategy backoffStrategy = new NoBackoffStrategy(); final NakadiReader<SomeEvent> nakadiReader = new NakadiReader<>(uri, RequestFactory, backoffStrategy, cursorManager, objectMapper, Collections.singleton(EVENT_NAME), Optional.empty(), Optional.empty(), SomeEvent.class, listener); expectedException.expect(BackoffException.class); expectedException.expect(ComposeMatchers.hasFeature(BackoffException::getRetries, equalTo(0))); expectedException.expectCause(instanceOf(JsonProcessingException.class)); expectedException.expectCause(ComposeMatchers.hasFeature(\"message\", Exception::getMessage, Matchers.containsString(\"Unexpected end-of-input\"))); nakadiReader.runInternal(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isProcessStopped() { return !myProgressIndicator.isRunning(); }### Assistant: @Test public void isProcessStoppedWithNotRunningProgressIndicator() throws Exception { when(myProgressIndicator.isRunning()).thenReturn(false); assertTrue(myController.isProcessStopped()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Date getDateAdded(){ return dateAdded; }### Assistant: @Test public void testGetDateAdded() { assertEquals(\"2010-01-31\", review.getDateAdded().toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String requireString() { return requireString(identity()); }### Assistant: @Test public void requireStringFailure() { exc.expect(SchemaException.class); exc.expectMessage(\"#: expected type: String, found: Boolean\"); TRU.requireString(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private void init(boolean enableEventRecording) { setupWsClient(); setupRecording(enableEventRecording); setupStringCodecs(); try { Path file = new Path(this.vars.appPath); URI uri = file.toUri(); Configuration config = new YarnConfiguration(); fileContext = uri.getScheme() == null ? FileContext.getFileContext(config) : FileContext.getFileContext(uri, config); saveMetaInfo(); String fileName = String.format(CONTAINERS_INFO_FILENAME_FORMAT, plan.getLogicalPlan().getValue(LogicalPlan.APPLICATION_ATTEMPT_ID)); this.containerFile = new FSJsonLineFile(fileContext, new Path(this.vars.appPath, fileName), FsPermission.getDefault()); this.containerFile.append(getAppMasterContainerInfo()); fileName = String.format(OPERATORS_INFO_FILENAME_FORMAT, plan.getLogicalPlan().getValue(LogicalPlan.APPLICATION_ATTEMPT_ID)); this.operatorFile = new FSJsonLineFile(fileContext, new Path(this.vars.appPath, fileName), FsPermission.getDefault()); } catch (IOException ex) { throw Throwables.propagate(ex); } }### Assistant: @Test public void testCustomMetricsTransport() throws Exception { TestGeneratorInputOperator o1 = dag.addOperator(\"o1\", TestGeneratorInputOperator.class); GenericTestOperator o2 = dag.addOperator(\"o2\", GenericTestOperator.class); dag.addStream(\"o1.outport\", o1.outport, o2.inport1); dag.setAttribute(LogicalPlan.METRICS_TRANSPORT, new TestMetricTransport(\"xyz\")); StramLocalCluster lc = new StramLocalCluster(dag); StreamingContainerManager dnmgr = lc.dnmgr; StramAppContext appContext = new StramTestSupport.TestAppContext(dag.getAttributes()); AppDataPushAgent pushAgent = new AppDataPushAgent(dnmgr, appContext); pushAgent.init(); pushAgent.pushData(); Assert.assertTrue(TestMetricTransport.messages.size() > 0); pushAgent.close(); String msg = TestMetricTransport.messages.get(0); Assert.assertTrue(msg.startsWith(\"xyz:\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public JDBCOutputFormat() { }### Assistant: @Test public void testJDBCOutputFormat() throws IOException { String sourceTable = \"books\"; String targetTable = \"newbooks\"; String driverPath = \"org.apache.derby.jdbc.EmbeddedDriver\"; String dbUrl = \"jdbc:derby:memory:ebookshop\"; jdbcOutputFormat = JDBCOutputFormat.buildJDBCOutputFormat() .setDBUrl(dbUrl) .setDrivername(driverPath) .setQuery(\"insert into \" + targetTable + \" (id, title, author, price, qty) values (?,?,?,?,?)\") .finish(); jdbcOutputFormat.open(0, 1); jdbcInputFormat = JDBCInputFormat.buildJDBCInputFormat() .setDrivername(driverPath) .setDBUrl(dbUrl) .setQuery(\"select * from \" + sourceTable) .setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE) .finish(); jdbcInputFormat.open(null); Tuple5 tuple = new Tuple5(); while (!jdbcInputFormat.reachedEnd()) { jdbcInputFormat.nextRecord(tuple); jdbcOutputFormat.writeRecord(tuple); } jdbcOutputFormat.close(); jdbcInputFormat.close(); jdbcInputFormat = JDBCInputFormat.buildJDBCInputFormat() .setDrivername(driverPath) .setDBUrl(dbUrl) .setQuery(\"select * from \" + targetTable) .setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE) .finish(); jdbcInputFormat.open(null); int recordCount = 0; while (!jdbcInputFormat.reachedEnd()) { jdbcInputFormat.nextRecord(tuple); Assert.assertEquals(\"Field 0 should be int\", Integer.class, tuple.getField(0).getClass()); Assert.assertEquals(\"Field 1 should be String\", String.class, tuple.getField(1).getClass()); Assert.assertEquals(\"Field 2 should be String\", String.class, tuple.getField(2).getClass()); Assert.assertEquals(\"Field 3 should be float\", Double.class, tuple.getField(3).getClass()); Assert.assertEquals(\"Field 4 should be int\", Integer.class, tuple.getField(4).getClass()); for (int x = 0; x < 5; x++) { Assert.assertEquals(dbData[recordCount][x], tuple.getField(x)); } recordCount++; } Assert.assertEquals(5, recordCount); jdbcInputFormat.close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isAncestorOf(@NonNull CubeId input) { if (!haveSameDimensions(this, input) || getLevel() >= input.getLevel()) { return false; } for (int i = getLevel() - 1; i >= 0; i--) { if (!input.getDimensionValue(i).equals(getDimensionValue(i))) { return false; } } return true; }### Assistant: @Test @SuppressWarnings(\"null\") public void testIsAncestorOf() { assertThatThrownBy(() -> EMPTY.isAncestorOf(null)).isInstanceOf(NullPointerException.class); assertThat(EMPTY.isAncestorOf(EMPTY)).isFalse(); assertThat(SECTOR_REGION.isAncestorOf(SECTOR_REGION)).isFalse(); assertThat(SECTOR_REGION.isAncestorOf(INDUSTRY)).isTrue(); assertThat(INDUSTRY.isAncestorOf(SECTOR_REGION)).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static QueryTreeNode optimize(QueryTreeNode qtn, boolean typeConvert, Map<String, Object> extraCmd) { qtn = preProcess(qtn, typeConvert, extraCmd); return qtn; }### Assistant: @Test public void test_\u8def\u5f84\u77ed\u5316_\u6c38\u771f_\u591a\u8def() { TableNode table = new TableNode(\"TABLE1\"); table.query(\"(ID = 1 AND NAME = 'HELLO') OR (1) \"); table.build(); FilterPreProcessor.optimize(table, true, null); Assert.assertEquals(table.getWhereFilter().toString(), \"1\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final int deserialize (final ByteBuffer src, final int len) { resizeBuffer(src.remaining(), false); dataBuffer.rewind(); transferBytes(src, dataBuffer, len); return dataBuffer.limit(); }### Assistant: @Test public final void testSerializeBuffer () { final BinaryDataSegment dataSegment = new BinaryDataSegment(CHUNK_SIZE); assertNotNull(dataSegment); assertEquals(0, dataSegment.getLength()); final ByteBuffer testBuffer = ByteBuffer.wrap(TEST_CASE_1_ARRAY); dataSegment.deserialize(testBuffer, TEST_CASE_1_ARRAY.length); assertEquals(TEST_CASE_1_ARRAY.length, dataSegment.getLength()); final ByteBuffer expectedResult = ByteBuffer.wrap(TEST_CASE_1_ARRAY_LONG); dataSegment.dataBuffer.rewind(); final ByteBuffer exportedDataSegment = ByteBuffer.allocate(AbstractDataSegment.getTotalLength(dataSegment.getLength())); dataSegment.serialize(exportedDataSegment, 0); exportedDataSegment.rewind(); assertTrue(expectedResult.equals(exportedDataSegment)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected Object toAttribute(nu.xom.Element eAttribute) throws IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException { String parameter = eAttribute.getAttributeValue(\"parameter\"); String type = eAttribute.getAttributeValue(\"type\"); String value = eAttribute.getValue(); if (type == null) { throw new IllegalArgumentException(\"no type given for attribute \" + eAttribute); } if (parameter != null) { if (parameter.equals(\"RANGE\")) { return getRange(value); } else if (parameter.equals(\"DISCRETERANGE\")) { return getRangeInt(value); } else if (parameter.equals(\"SELECT\")) { return getSelectRefList(type, value); } else if (parameter.equals(\"UID\")) { return getUniqueID(value); } else { throw new IllegalArgumentException(\"Unknown parameter type: \" + parameter); } } else { Class<?> clazz = null; try { clazz = getClass(type); } catch (ClassNotFoundException e) { System.err.println(\"Class \" + type + \" not found. Ignoring attribute value \" + value); return null; } if (Collection.class.isAssignableFrom(clazz)) { return toAttributeCollection(eAttribute, clazz); } else { return toAttributeObject(value, clazz); } } }### Assistant: @Test public void attributeToInt() throws IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException { nu.xom.Element eAttr = new nu.xom.Element(\"attribute\", SpecificationWriter.NS); eAttr.addAttribute(new nu.xom.Attribute(\"name\", \"test\")); int i = 10; eAttr.addAttribute(new nu.xom.Attribute(\"type\", getType(Integer.class))); eAttr.appendChild(\"10\"); SpecificationReader reader = new SpecificationReader(); Assert.assertEquals(i, reader.toAttribute(eAttr)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @GetMapping(\"/{id:^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+$}\") @ApiOperation(\"\u6839\u636eID\u67e5\u8be2\u65b9\u6cd5\u65e5\u5fd7\") @PreAuthorize(\"hasAnyAuthority('\" + QUERY_PERM + \"')\") public Result<MethodLog> findById(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id) { return super.findById(id); }### Assistant: @Test public void testFindById() throws Exception { String id = \"{}\"; String result = mockMvc.perform(get(\"/monitor/methodLog/\"+ id) .header(HttpHeaders.AUTHORIZATION, String.join(\" \", accessToken.getTokenType(), accessToken.getValue())) .contentType(MediaType.APPLICATION_JSON_UTF8) .accept(MediaType.APPLICATION_JSON_UTF8)) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.data.id\").value(id)) .andReturn().getResponse().getContentAsString(); log.info(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public LoggerTail createLoggerTail(List<String> jobId, boolean readonly) { if (jobId != null) { try { return createLoggerTail(getJobLogBaseFile(jobId), readonly); } catch (Exception e) { this.logger.error(\"Failed to create a logger tail for job [{}]\", jobId, e); } } return new LogQueue(); }### Assistant: @Test void createLoggerTailWithNullId() { assertNotNull(this.store.createLoggerTail(null, true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<WorkflowTaskAssignee> get() { List<KaleoTaskAssignmentInstance> kaleoTaskAssignmentInstances = _kaleoTaskInstanceToken.getKaleoTaskAssignmentInstances(); List<WorkflowTaskAssignee> workflowTaskAssignees = new ArrayList<>( kaleoTaskAssignmentInstances.size()); for (KaleoTaskAssignmentInstance kaleoTaskAssignmentInstance : kaleoTaskAssignmentInstances) { WorkflowTaskAssignee workflowTaskAssignee = new WorkflowTaskAssignee( kaleoTaskAssignmentInstance.getAssigneeClassName(), kaleoTaskAssignmentInstance.getAssigneeClassPK()); workflowTaskAssignees.add(workflowTaskAssignee); } return workflowTaskAssignees; }### Assistant: @Test public void testGetWhenKaleoTaskAssignmentsIsNotEmpty() { KaleoTaskInstanceToken kaleoTaskInstanceToken = KaleoRuntimeTestUtil.mockKaleoTaskInstanceToken( new KaleoTaskAssignmentInstance[] { KaleoRuntimeTestUtil.mockKaleoTaskAssignmentInstance( Role.class.getName(), 1), KaleoRuntimeTestUtil.mockKaleoTaskAssignmentInstance( User.class.getName(), 2) }); WorkflowTaskAssigneesSupplier workflowTaskAssigneesSupplier = new WorkflowTaskAssigneesSupplier(kaleoTaskInstanceToken); List<WorkflowTaskAssignee> workflowTaskAssignees = workflowTaskAssigneesSupplier.get(); int actualSize = workflowTaskAssignees.size(); Assert.assertEquals(2, actualSize); KaleoRuntimeTestUtil.assertWorkflowTaskAssignee( Role.class.getName(), 1, workflowTaskAssignees.get(0)); KaleoRuntimeTestUtil.assertWorkflowTaskAssignee( User.class.getName(), 2, workflowTaskAssignees.get(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static CharSequence escapeCsv(CharSequence value) { return escapeCsv(value, false); }### Assistant: @Test public void escapeCsvWithQuote() { CharSequence value = \"s\\\"\"; CharSequence expected = \"\\\"s\\\"\\\"\\\"\"; escapeCsv(value, expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public AddDocumentRequestSummary addProject(Project project, User user) throws TException { assertNotNull(project); assertIdUnset(project.getId()); assertUser(user); return handler.addProject(project, user); }### Assistant: @Test public void testAddProject() throws Exception { Project project4 = new Project(); project4.setName(\"Project4\").setBusinessUnit(\"AB CD FE\"); String id = handler.addProject(project4, user2).getId(); Project projectActual = handler.getProjectById(id, user2); assertEquals(\"Project4\", projectActual.getName()); assertEquals(\"user2\", projectActual.getCreatedBy()); assertEquals(SW360Utils.getCreatedOn(), projectActual.getCreatedOn()); assertEquals(\"AB CD FE\", projectActual.getBusinessUnit()); assertEquals(2, handler.getMyProjects(user1.getEmail()).size()); assertEquals(2, handler.getMyProjects(user2.getEmail()).size()); assertEquals(1, handler.getMyProjects(user3.getEmail()).size()); assertEquals(3, handler.getAccessibleProjectsSummary(user1).size()); assertEquals(2, handler.getAccessibleProjectsSummary(user2).size()); assertEquals(2, handler.getAccessibleProjectsSummary(user3).size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void addInProgressCommit(Resource catalogId, Resource versionedRDFRecordId, InProgressCommit inProgressCommit) { try (RepositoryConnection conn = configProvider.getRepository().getConnection()) { Resource userIRI = (Resource) inProgressCommit.getProperty(vf.createIRI(Activity.wasAssociatedWith_IRI)) .orElseThrow(() -> new IllegalArgumentException(\"User not set on InProgressCommit \" + inProgressCommit.getResource())); if (utils.getInProgressCommitIRI(versionedRDFRecordId, userIRI, conn).isPresent()) { throw new IllegalStateException(\"User \" + userIRI + \" already has an InProgressCommit for Record \" + versionedRDFRecordId); } VersionedRDFRecord record = utils.getRecord(catalogId, versionedRDFRecordId, versionedRDFRecordFactory, conn); if (conn.containsContext(inProgressCommit.getResource())) { throw utils.throwAlreadyExists(inProgressCommit.getResource(), inProgressCommitFactory); } inProgressCommit.setOnVersionedRDFRecord(record); utils.addObject(inProgressCommit, conn); } }### Assistant: @Test public void testAddInProgressCommitWithNoUser() { InProgressCommit commit = inProgressCommitFactory.createNew(NEW_IRI); thrown.expect(IllegalArgumentException.class); thrown.expectMessage(\"User not set on InProgressCommit \" + commit.getResource()); manager.addInProgressCommit(distributedCatalogId, VERSIONED_RDF_RECORD_IRI, commit); verify(utilsService, times(0)).addObject(eq(commit), any(RepositoryConnection.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void accept(StepLocalTxVisitor visitor){ visitor.visit(this); }### Assistant: @Test public void testAccept() { final StepLocalTxVisitor visitor = mock(StepLocalTxVisitor.class); localTransactionStepDefinitionUnderTest.accept(visitor); verify(visitor).visit(any()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ILigand[] getLigandLigands(ILigand ligand) { if (ligand instanceof TerminalLigand) return new ILigand[0]; IAtomContainer container = ligand.getAtomContainer(); IAtom ligandAtom = ligand.getLigandAtom(); IAtom centralAtom = ligand.getCentralAtom(); VisitedAtoms visitedAtoms = ligand.getVisitedAtoms(); List<IBond> bonds = container.getConnectedBondsList(ligandAtom); List<ILigand> ligands = new ArrayList<ILigand>(); for (IBond bond : bonds) { if (bond.contains(centralAtom)) { if (Order.SINGLE == bond.getOrder()) continue; int duplication = getDuplication(bond.getOrder()) - 1; if (duplication > 0) { for (int i = 1; i <= duplication; i++) { ligands.add(new TerminalLigand(container, visitedAtoms, ligandAtom, centralAtom)); } } } else { int duplication = getDuplication(bond.getOrder()); IAtom connectedAtom = bond.getOther(ligandAtom); if (visitedAtoms.isVisited(connectedAtom)) { ligands.add(new TerminalLigand(container, visitedAtoms, ligandAtom, connectedAtom)); } else { ligands.add(new Ligand(container, visitedAtoms, ligandAtom, connectedAtom)); } for (int i = 2; i <= duplication; i++) { ligands.add(new TerminalLigand(container, visitedAtoms, ligandAtom, connectedAtom)); } } } return ligands.toArray(new ILigand[0]); }### Assistant: @Test public void testGetLigandLigands() throws Exception { IAtomContainer molecule = smiles.parseSmiles(\"CC(C)C(CC)(C(C)(C)C)[H]\"); ILigand ligand = CIPTool.defineLigand(molecule, new VisitedAtoms(), 3, 1); ILigand[] sideChains = CIPTool.getLigandLigands(ligand); Assert.assertEquals(2, sideChains.length); ligand = CIPTool.defineLigand(molecule, new VisitedAtoms(), 3, 4); sideChains = CIPTool.getLigandLigands(ligand); Assert.assertEquals(1, sideChains.length); ligand = CIPTool.defineLigand(molecule, new VisitedAtoms(), 3, 6); sideChains = CIPTool.getLigandLigands(ligand); Assert.assertEquals(3, sideChains.length); ligand = CIPTool.defineLigand(molecule, new VisitedAtoms(), 3, 10); sideChains = CIPTool.getLigandLigands(ligand); Assert.assertEquals(0, sideChains.length); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void checkIfArgumentsMatchParameterTypes(Object[] arguments, Class<?>[] parameterTypes) { checkNotNull(arguments, \"'arguments' must not be null\"); checkNotNull(parameterTypes, \"'testMethod' must not be null\"); checkArgument(parameterTypes.length == arguments.length, \"Expected %d arguments for test method but got %d.\", parameterTypes.length, arguments.length); super.checkIfArgumentsMatchParameterTypes(arguments, parameterTypes); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testCheckIfArgumentsMatchParameterTypesShouldThrowIllegalArgumentExceptionIfLengthOfArgumentsAndParameterTypesDoesNotMatch() { Object[] arguments = new Object[0]; Class<?>[] parameterTypes = new Class<?>[] { int.class, String.class, boolean.class }; underTest.checkIfArgumentsMatchParameterTypes(arguments, parameterTypes); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isFormReady() { return caseFormService.isReady(); }### Assistant: @Test public void should_return_true_if_case_form_is_ready() throws Exception { when(caseFormService.isReady()).thenReturn(true); assertThat(\"Should return true if case form is ready\", caseListPresenter.isFormReady(), is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getState() { int state = 0; state = setBit(STATE_EXPLODED, state, isExploded); state = setBit(STATE_FLAGGED, state, isFlagged); state = setBit(STATE_OPEN, state, isOpen); state = setBit(STATE_BOMB, state, isBomb); state = setBit(STATE_TOUCHED, state, isTouched); return state; }### Assistant: @Test public void testDefaultState() { assertEquals(0, itsField.getState()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String key(String... subKeys) { if (subKeys.length == 0) { throw new IllegalArgumentException(\"cannot form cake key; no keys supplied\"); } Arrays.asList(subKeys).forEach(Cake::validateKey); return StringUtils.join(subKeys, Cake.SEPARATOR); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testKey_throwsOnNoInputs() { Cake.key(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isDisconnected() { return false; }### Assistant: @Test public void testIsDisconnected() { RccPartiallyOverlappingFF instance = new RccPartiallyOverlappingFF(); boolean expResult = false; boolean result = instance.isDisconnected(); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder newBuilder() { AutoValue_GoogleAdsClient.Builder clientBuilder = new AutoValue_GoogleAdsClient.Builder(); clientBuilder.setEnableGeneratedCatalog(true); InstantiatingGrpcChannelProvider transportChannelProvider = InstantiatingGrpcChannelProvider.newBuilder() .setInterceptorProvider( () -> ImmutableList.of( new LoggingInterceptor( new RequestLogger(), clientBuilder.getHeaders(), clientBuilder.getEndpoint()))) .setMaxInboundMetadataSize(16 * 1024 * 1024) .setMaxInboundMessageSize(64 * 1024 * 1024) .build(); clientBuilder .setEndpoint(DEFAULT_ENDPOINT) .setTransportChannelProvider(transportChannelProvider); return clientBuilder; }### Assistant: @Test public void x_goog_api_client_header_isSent() { GoogleAdsClient client = GoogleAdsClient.newBuilder() .setCredentials(fakeCredentials) .setDeveloperToken(DEVELOPER_TOKEN) .setLoginCustomerId(LOGIN_CUSTOMER_ID) .setEnableGeneratedCatalog(enabledGeneratedCatalog) .setTransportChannelProvider(localChannelProvider) .setEndpoint(\"fake-address\") .build(); mockService.addResponse(SearchGoogleAdsResponse.newBuilder().build()); try (GoogleAdsServiceClient googleAdsClient = client.getLatestVersion().createGoogleAdsServiceClient()) { googleAdsClient.search(\"123\", \"select blah\"); } assertTrue( \"GAX/GRPC/Java platform headers missing\", localChannelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static IAtomContainer apply(IAtomContainer container) { int n = container.getAtomCount(); int[] valences = new int[n]; Map<IAtom, Integer> atomToIndex = Maps.newHashMapWithExpectedSize(n); for (IAtom atom : container.atoms()) atomToIndex.put(atom, atomToIndex.size()); for (IBond bond : container.bonds()) { int u = atomToIndex.get(bond.getBegin()); int v = atomToIndex.get(bond.getEnd()); int bondOrder = bond.getOrder().numeric(); valences[u] += bondOrder; valences[v] += bondOrder; } for (int i = 0; i < n; i++) { IAtom atom = container.getAtom(i); Integer charge = atom.getFormalCharge(); Integer element = atom.getAtomicNumber(); if (element == null) continue; charge = charge == null ? 0 : charge; int explicit = valences[i]; if (atom.getValency() != null) { atom.setImplicitHydrogenCount(atom.getValency() - explicit); } else { int implicit = implicitValence(element, charge, valences[i]); atom.setImplicitHydrogenCount(implicit - explicit); atom.setValency(implicit); } } return container; }### Assistant: @Test public void carbon_cation_doubleBonded() { IAtomContainer container = new AtomContainer(); IAtom c1 = new Atom(\"C\"); IAtom c2 = new Atom(\"C\"); c1.setFormalCharge(-1); container.addAtom(c1); container.addAtom(c2); container.addBond(0, 1, IBond.Order.DOUBLE); MDLValence.apply(container); assertThat(c1.getValency(), is(3)); assertThat(c1.getImplicitHydrogenCount(), is(1)); assertThat(c2.getValency(), is(4)); assertThat(c2.getImplicitHydrogenCount(), is(2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void destroy() { lifecycleStrategy.invokeDestroyMethods(component); }### Assistant: @Test public void invokesDestroyMethodWithDefaultLifecycleMethodStrategy() throws Exception { Resource instance = new Resource(); LifecycleComponent lifecycleComponent = new LifecycleComponent(instance); lifecycleComponent.destroy(); assertEquals(1, instance.destroyVisitsCounter.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String asAlphaNumericLower(int i) { return asAlphaNumeric(i).toLowerCase(Locale.ROOT); }### Assistant: @Test public void testAlphaLower() { assertEquals(\"a\", AutoPageNumberUtils.asAlphaNumericLower(1)); assertEquals(\"z\", AutoPageNumberUtils.asAlphaNumericLower(26)); assertEquals(\"aa\", AutoPageNumberUtils.asAlphaNumericLower(27)); assertEquals(\"zz\", AutoPageNumberUtils.asAlphaNumericLower(52)); assertEquals(\"aaa\", AutoPageNumberUtils.asAlphaNumericLower(53)); assertEquals(\"zzz\", AutoPageNumberUtils.asAlphaNumericLower(78)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SearchResult search(CrescentSearchRequestWrapper csrw) throws IOException { SearchResult searchResult = new SearchResult(); int totalHitsCount = 0; String errorMessage = \"SUCCESS\"; int errorCode = 0; int numOfHits = csrw.getDefaultHitsPage() * csrw.getHitsForPage(); IndexSearcher indexSearcher = null; SearcherManager searcherManager = crescentSearcherManager.getSearcherManager(csrw.getCollectionName()); try { indexSearcher = searcherManager.acquire(); Query query = csrw.getQuery(); Filter filter = csrw.getFilter(); Sort sort = csrw.getSort(); logger.debug(\"query : {}\" , query); logger.debug(\"filter : {}\" , filter); logger.debug(\"sort : {}\" , sort); long startTime = System.currentTimeMillis(); TopDocs topDocs = null; if(sort == null) { topDocs = indexSearcher.search(query, filter, numOfHits); } else { topDocs = indexSearcher.search(query, filter, numOfHits, sort); } long endTime = System.currentTimeMillis(); totalHitsCount = topDocs.totalHits; LogInfo logInfo = new LogInfo(); logInfo.setCollectionName(csrw.getCollectionName()); logInfo.setElaspedTimeMil(endTime - startTime); logInfo.setKeyword(csrw.getKeyword()); logInfo.setPageNum(csrw.getPageNum()); logInfo.setPcid(csrw.getPcId()); logInfo.setQuery(query); logInfo.setSort(csrw.getSort()); logInfo.setTotalCount(totalHitsCount); logInfo.setUserId(csrw.getUserId()); logInfo.setUserIp(csrw.getUserIp()); logInfo.setFilter(csrw.getFilter()); CrescentLogger.logging(logInfo); logger.debug(\"Total Hits Count : {} \", totalHitsCount); ScoreDoc[] hits = topDocs.scoreDocs; int endOffset = Math.min(totalHitsCount, csrw.getStartOffSet() + csrw.getHitsForPage()); if(endOffset > hits.length) { logger.debug(\"\uae30\ubcf8 \uc124\uc815\ub41c \uac80\uc0c9\uac74\uc218\ubcf4\ub2e4 \ub354 \uac80\uc0c9\uc744 \uc6d0\ud558\ubbc0\ub85c, \uc804\uccb4\ub97c \ub300\uc0c1\uc73c\ub85c \uac80\uc0c9\ud569\ub2c8\ub2e4.\"); if(sort == null) { topDocs = indexSearcher.search(query, filter, totalHitsCount); } else { topDocs = indexSearcher.search(query, filter, totalHitsCount, sort); } hits = topDocs.scoreDocs; } int startOffset = csrw.getStartOffSet(); endOffset = Math.min(hits.length, startOffset + csrw.getHitsForPage()); logger.debug(\"start offset : [{}], end offset : [{}], total : [{}], numOfHits :[{}]\" ,new Object[]{csrw.getStartOffSet(), endOffset, totalHitsCount, numOfHits}); logger.debug(\"hits count : [{}]\", hits.length); logger.debug(\"startOffset + hitsPerPage : [{}]\", csrw.getStartOffSet() + csrw.getHitsForPage()); if(totalHitsCount > 0) { List<Map<String, String>> resultList = new ArrayList<Map<String, String>>(); Map<String, Object> result = new HashMap<String, Object>(); CrescentFastVectorHighlighter highlighter = new CrescentFastVectorHighlighter(); CrescentCollectionHandler collectionHandler = SpringApplicationContext.getBean(\"crescentCollectionHandler\", CrescentCollectionHandler.class); CrescentCollection collection = collectionHandler.getCrescentCollections().getCrescentCollection(csrw.getCollectionName()); for(int i = startOffset; i < endOffset; i++) { Map<String,String> resultMap = new HashMap<String, String>(); for(CrescentCollectionField field : collection.getFields()) { String value = null; if(field.isStore() && !field.isNumeric()) { value = highlighter.getBestFragment(indexSearcher.getIndexReader(), hits[i].doc, query, field.getName()); } if(value == null || value.length() == 0) { Document doc = indexSearcher.doc(hits[i].doc); value = doc.get(field.getName()); } resultMap.put(field.getName(), value); } resultList.add(resultMap); } result.put(\"total_count\", totalHitsCount); result.put(\"result_list\", resultList); result.put(\"error_code\", errorCode); result.put(\"error_msg\", errorMessage); logger.debug(\"result list {}\", resultList); searchResult.setResultList(resultList); searchResult.setTotalHitsCount(totalHitsCount); searchResult.setSearchResult(result); } else { Map<String, Object> result = new HashMap<String, Object>(); List<Map<String, String>> resultList = new ArrayList<Map<String, String>>(); result.put(\"total_count\", totalHitsCount); result.put(\"result_list\", resultList); result.put(\"error_code\", errorCode); result.put(\"error_msg\", errorMessage); logger.debug(\"result list {}\", resultList); searchResult.setResultList(resultList); searchResult.setTotalHitsCount(0); searchResult.setSearchResult(result); } } catch (Exception e) { logger.error(\"error in CrescentDefaultDocSearcher : \", e); Map<String, Object> result = new HashMap<String, Object>(); List<Map<String, String>> resultList = new ArrayList<Map<String, String>>(); result.put(\"total_count\", totalHitsCount); result.put(\"result_list\", resultList); result.put(\"error_code\", errorCode); result.put(\"error_msg\", errorMessage); logger.error(\"\uac80\uc0c9 \uc911 \uc5d0\ub7ec \ubc1c\uc0dd\ud568. {}\", e); searchResult.setErrorCode(errorCode); searchResult.setErrorMsg(errorMessage); searchResult.setSearchResult(result); searchResult.setResultList(resultList); return searchResult; } finally { searcherManager.release(indexSearcher); indexSearcher = null; } return searchResult; }### Assistant: @Test public void search() throws IOException { SearchRequest searchRequest = new SearchRequest(); searchRequest.setKeyword(\"1\"); searchRequest.setCollectionName(\"sample\"); CrescentSearchRequestWrapper csrw = new CrescentSearchRequestWrapper(searchRequest); SearchResult searchResult = crescentDocSearcher.search(csrw); Assert.assertTrue(searchResult.getResultList().size() > 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Location setY(double y) { return new Location(extent, this.withY(y), yaw, pitch); }### Assistant: @Test public void testSetY() throws Exception { World world = mock(World.class); Location location1 = new Location(world, Vector3.ZERO); Location location2 = location1.setY(TEST_VALUE); assertEquals(0, location1.getY(), EPSILON); assertEquals(0, location2.getX(), EPSILON); assertEquals(TEST_VALUE, location2.getY(), EPSILON); assertEquals(0, location2.getZ(), EPSILON); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String join(double[] array, char separator) { return join(array, separator, 0, array.length - 1); }### Assistant: @Test public void testJoinIntArray() { final int[] array = {1, -8, -7, -7, -7, -7, -7, -253968, -7, -24, -24, -2147475464, 4088, -2147483647, 9, 33505273, 1, -8}; Assert.assertNull(TaskHelper.join((int[]) null, '1', 2, 3)); Assert.assertEquals(\"\", TaskHelper.join(new int[0], '\\u0000', 24, 5)); Assert.assertEquals(\"\", TaskHelper.join(new int[0], '\\u0000')); Assert.assertEquals(\"1\\u0000-8\", TaskHelper.join(array, '\\u0000', 16, 17)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ElementProperty isAfterSibling(Path... paths) { return new RelationBetweenMultiElement(\"preceding-sibling\", Arrays.asList(paths)) { @Override public String toString() { return asString(\"is after sibling\"); } }; }### Assistant: @Test public void isAfterSiblingAtLeastN() { Path el = BasicPath.element.that(isAfterSibling(atLeast(1).occurrencesOf(div))); String xpath = el.getXPath().get(); NodeList nodes = findAllByXpath(\"<div>a</div><div class='b'><div>a.a</div><div>a.b</div><div>a.c</div></div><div>c</div>\", el); assertThat(nodes.getLength(), is(4)); assertThat(getCssClass(nodes.item(0)), equalTo(\"b\")); assertThat(getText(nodes.item(1)), equalTo(\"a.b\")); assertThat(getText(nodes.item(2)), equalTo(\"a.c\")); assertThat(getText(nodes.item(3)), equalTo(\"c\")); assertThat(el.toString(), is(equalTo(\"any element, that is after at least 1 siblings of type: div\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int hashCode() { return (((this.mIconId * 31 + (int) (this.mDistance ^ this.mDistance >>> 32)) * 31 + (this.mInfo1 == null ? 0 : this.mInfo1.hashCode())) * 31 + (this.mInfo2 == null ? 0 : this.mInfo2.hashCode())) * 31 + (this.mNextRoadIcon == null ? 0 : this.mNextRoadIcon.hashCode()) * 31; }### Assistant: @Test public void testEquality() { GuidanceManeuverData data = new GuidanceManeuverData(ICON_ID, DISTANCE, INFO1, INFO2); assertThat(mManeuverData, is(data)); GuidanceManeuverData data1 = new GuidanceManeuverData(0, DISTANCE, INFO1, INFO2); assertThat(mManeuverData, is(not(data1))); assertThat(null, is(not(mManeuverData))); assertThat(mManeuverData.hashCode(), is(data.hashCode())); GuidanceManeuverData data2 = new GuidanceManeuverData(ICON_ID, DISTANCE, INFO1, INFO2, NEXT_ROAD_ICON); assertThat(data2, is(mManeuverDataWithNextRoadIcon)); assertThat(mManeuverDataWithNextRoadIcon.hashCode(), is(data2.hashCode())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String expandWithVariable(String requestPath,String matchingPatternPath,String variableName,String value){ Map<String, String> map = extractUriTemplateVariables(requestPath, matchingPatternPath); map.put(variableName, value); return expand(matchingPatternPath, map); }### Assistant: @Test public void testExpandWithVariable2(){ String matchingPatternPath = \"/s/c{categoryCode}-m{material}-c{color}-s{size}-k{kind}-s{style}-o{order}.htm\"; String variableName = \"color\"; String value = \"100\"; LOGGER.debug(UriTemplateUtil.expandWithVariable(matchingPatternPath, variableName, value)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Transactional( readOnly = true ) public Grid getVisualizationGridByUser( final String uid, final Date relativePeriodDate, final String organisationUnitUid, final User user ) { Visualization visualization = loadVisualization( uid ); final boolean hasPermission = visualization != null; if ( hasPermission ) { I18nFormat format = i18nManager.getI18nFormat(); OrganisationUnit organisationUnit = organisationUnitService.getOrganisationUnit( organisationUnitUid ); List<OrganisationUnit> atLevels = new ArrayList<>(); List<OrganisationUnit> inGroups = new ArrayList<>(); if ( visualization.hasOrganisationUnitLevels() ) { atLevels.addAll( organisationUnitService.getOrganisationUnitsAtLevels( visualization.getOrganisationUnitLevels(), visualization.getOrganisationUnits() ) ); } if ( visualization.hasItemOrganisationUnitGroups() ) { inGroups.addAll( organisationUnitService.getOrganisationUnits( visualization.getItemOrganisationUnitGroups(), visualization.getOrganisationUnits() ) ); } visualization.init( user, relativePeriodDate, organisationUnit, atLevels, inGroups, format ); Map<String, Object> valueMap = analyticsService.getAggregatedDataValueMapping( visualization ); Grid visualizationGrid = visualization.getGrid( new ListGrid(), valueMap, SHORTNAME, true ); visualization.clearTransientState(); return visualizationGrid; } else { return new ListGrid(); } }### Assistant: @Test public void getVisualizationGridByUserWhenItHasItemOrganisationUnitGroups() { final String anyVisualizationUid = \"adbet5RTs\"; final Date anyRelativePeriodDate = new Date(); final String anyOrganisationUnitUid = \"ouiRzW5e\"; final User userStub = userStub(); final List<OrganisationUnit> orgUnits = asList( new OrganisationUnit() ); final List<OrganisationUnitGroup> orgUnitGroups = asList( new OrganisationUnitGroup() ); final Map<String, Object> valueMap = valueMapStub(); final Visualization visualizationStub = visualizationStub( \"abc123xy\" ); visualizationStub.setOrganisationUnits( orgUnits ); visualizationStub.setItemOrganisationUnitGroups( orgUnitGroups ); final Visualization visualizationSpy = spy( visualizationStub ); when( visualizationStore.getByUid( anyVisualizationUid ) ).thenReturn( visualizationSpy ); when( analyticsService.getAggregatedDataValueMapping( visualizationSpy ) ).thenReturn( valueMap ); final Grid expectedGrid = defaultVisualizationService.getVisualizationGridByUser( anyVisualizationUid, anyRelativePeriodDate, anyOrganisationUnitUid, userStub ); assertThat( expectedGrid.getRows(), hasSize( 1 ) ); assertThat( expectedGrid.getRows().get( 0 ), hasSize( 7 ) ); assertThat( expectedGrid.getRows().get( 0 ), hasItem( \"abc123xy\" ) ); assertThat( expectedGrid.getHeaders(), hasSize( 7 ) ); assertThat( expectedGrid.getMetaColumnIndexes(), hasSize( 7 ) ); assertThatHeadersAreTheExpectedOnes( expectedGrid ); verify( organisationUnitService, times( 1 ) ).getOrganisationUnits( orgUnitGroups, orgUnits ); verify( visualizationSpy, times( 1 ) ).clearTransientState(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public RepositoryPath resolve(Path other) { if (other == null) { return this; } other = unwrap(other); validatePathRelativized(other); return wrap(getTarget().resolve(other)); }### Assistant: @Test public void repositoryPathShouldNotResolvePathAbsolutePaths() { assertThatExceptionOfType(RepositoryRelativePathConstructionException.class) .isThrownBy(() -> { RepositoryPath path = new RepositoryPath(REPOSITORY_BASEDIR, repositoryFileSystem); path.resolve(Paths.get(\"/absolute\")); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Average updateAverage(long executionTime) { removeFirstItem(); addLastItem(executionTime); return getAverage(); }### Assistant: @Test public void shouldReturnAverageIgnoringInfinitiesAndIncludingItemsBeforeCrash() { SqlTimeHistory calculator; long l1 = 10L; long l2 = 20L; long l3 = 30L; long l4 = 40L; Average avg1; Average avg2; Average avg3; Average avg4; Average avg5; calculator = new SqlTimeHistory(3, true, false); calculator.updateAverage(10L); calculator.updateAverage(20L); calculator.updateAverage(30L); calculator.updateAverage(Long.MAX_VALUE); calculator.updateAverage(Long.MAX_VALUE); avg1 = calculator.updateAverage(l1); avg2 = calculator.updateAverage(Long.MAX_VALUE); avg3 = calculator.updateAverage(l2); avg4 = calculator.updateAverage(l3); avg5 = calculator.updateAverage(l4); assertEquals(l1, avg1.getValue()); assertEquals(Long.MAX_VALUE, avg2.getValue()); assertEquals((int)(l1 + l2)/2, avg3.getValue()); assertEquals((int)(l2 + l3)/2, avg4.getValue()); assertEquals((int)(l2 + l3 + l4)/3, avg5.getValue()); assertEquals(1, avg1.getItemsCountIncludedInAverage()); assertEquals(3, avg2.getItemsCountIncludedInAverage()); assertEquals(2, avg3.getItemsCountIncludedInAverage()); assertEquals(2, avg4.getItemsCountIncludedInAverage()); assertEquals(3, avg5.getItemsCountIncludedInAverage()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setMaxDate(@Nullable LocalDate maxDate) { mMaxDate = maxDate; }### Assistant: @Test public void testSetMaxDate() throws Exception { LocalDate max = LocalDate.now().plusMonths(1); mCalendarManager.setMaxDate(max); assertEquals(max, mCalendarManager.getMaxDate()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean hasReference(Class<?> boClass, String referenceName) { return selectAdapter(boClass).hasReference(boClass, referenceName); }### Assistant: @Test public void testHasReference_Legacy() throws Exception { enableLegacy(); lda.hasReference(Legacy.class, \"blah\"); verify(knsLegacyDataAdapter).hasReference(eq(Legacy.class), eq(\"blah\")); verifyZeroInteractions(kradLegacyDataAdapter); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String lookup(final RefDataLookupRequest refDataLookupRequest) { return referenceDataServiceProvider.get() .lookup(refDataLookupRequest); }### Assistant: @Test void lookup() { LOGGER.info(\"Running test\"); final RefDataLookupRequest request = new RefDataLookupRequest( \"MyMap\", \"jblogss\", null, List.of( new ReferenceLoader( new DocRef.Builder() .name(\"LoaderPipeline\") .type(PipelineDoc.DOCUMENT_TYPE) .uuid(UUID.randomUUID().toString()) .build(), new DocRef.Builder() .name(\"RefFeed\") .type(StreamTypeNames.REFERENCE) .uuid(UUID.randomUUID().toString()) .build() ) ) ); Mockito.when(referenceDataService.lookup(Mockito.any(RefDataLookupRequest.class))) .thenReturn(\"GBR\"); doPostTest( ReferenceDataResource.LOOKUP_SUB_PATH, request, String.class, \"GBR\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public QueryResponse getSqlQuery(PartialRequest partialRequest) { try { String sqlStatements = opaClientService.getExecutableSqlStatements(convertToOpaPartialRequest(partialRequest)); QueryResponse queryResponse = new QueryResponse(); queryResponse.setResult(sqlStatements); return queryResponse; } catch (OpaClientException e) { throw new OpaClientException(e.getMessage()); } }### Assistant: @Test void shouldReturnSqlQuery() { opa.datafilter.core.ast.db.query.model.request.PartialRequest opaPartialRequest = new opa.datafilter.core.ast.db.query.model.request.PartialRequest(); when(opaClientService.getExecutableSqlStatements(opaPartialRequest)).thenReturn(\"SELECT * from pets WHERE pets.name == 'fluffy'\"); QueryResponse result = target.getSqlQuery(new PartialRequest()); assertThat(result, is(notNullValue())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ImmutableEffectedSubjectIds of(final Collection<String> grantedSubjectIds, final Collection<String> revokedSubjectIds) { return new ImmutableEffectedSubjectIds(grantedSubjectIds, revokedSubjectIds); }### Assistant: @Test(expected = NullPointerException.class) public void createNewInstanceWithNullRevokedSubjectIds() { ImmutableEffectedSubjectIds.of(Collections.emptySet(), null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AutomationClient provide(ContainerRequest containerRequest, HttpServletRequest httpServletRequest) { Client client = super.provide(containerRequest, httpServletRequest); return Optional.ofNullable(AutomationClient.of(client)) .orElseThrow(() -> new ForbiddenException( format(\"Client %s not authorized as a AutomationClient\", client.getName()))); }### Assistant: @Test(expected = ForbiddenException.class) public void automationClientRejectsClientsWithoutAutomation() { Client clientWithoutAutomation = new Client(3423, \"clientWithoutAutomation\", null, null, null, null, null, null, null, null, true, false ); when(securityContext.getUserPrincipal()).thenReturn( SimplePrincipal.of(\"CN=clientWithoutAutomation\")); when(clientDAO.getClientByName(\"clientWithoutAutomation\")) .thenReturn(Optional.of(clientWithoutAutomation)); factory.provide(request, httpServletRequest); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void initialize(final List<String> everyPathAsString) { for (String resourcePath : everyPathAsString) { addClassNamesFromFolder(resourcePath); } }### Assistant: @Test public void testInitializeWithInvalidClassListShouldThrowClassFormatException() throws IOException { List<String> list = new ArrayList<>(); list.add(FOLDER_NAME); Collection<File> filesInFolder = new ArrayList<>(); File invalidClass = new File(\"InvalidClass.class\"); filesInFolder.add(invalidClass); given(fileUtils.listFiles(FOLDER)).willReturn(filesInFolder); given(javaClassFactory.createJavaClass(invalidClass)).willThrow(new ClassFormatException()); Whitebox.setInternalState(underTest, \"logger\", logger); underTest.initialize(list); verify(logger).info(Mockito.anyString(), Mockito.any(ClassFormatException.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected Button createButton(ViewGroup parent) { if (mButton == null) { Context context = parent.getContext(); if (mTheme != 0) { context = new ContextThemeWrapper(context, mTheme); } mButton = createButton(context); mButton.setOnClickListener(this); } else { if (mButton.getParent() instanceof ViewGroup) { ((ViewGroup) mButton.getParent()).removeView(mButton); } } mButton.setEnabled(mEnabled); mButton.setText(mText); mButton.setId(getViewId()); return mButton; }### Assistant: @Test public void testButtonItemSetsItsId() { TestButtonItem item = new TestButtonItem(); final int id = 12345; item.setId(id); assertEquals(\"Button's id should be set\", item.createButton(mParent).getId(), id); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DateTime parseEmbedded(String string0) throws IllegalArgumentException { return parseEmbedded(string0, \"yyyy-MM-dd\", DateTimeZone.UTC); }### Assistant: @Test public void parseEmbedded() throws Exception { DateTime dt0 = DateTimeUtil.parseEmbedded(\"app-2009-06-24.log.gz\", \"yyyy-MM-dd\", DateTimeZone.UTC); logger.debug(\"dt = \" + dt0); Assert.assertEquals(new DateTime(2009,6,24,0,0,0,0,DateTimeZone.UTC), dt0); dt0 = DateTimeUtil.parseEmbedded(\"app-2009-06-24-051112.log.gz\", \"yyyy-MM-dd-hhmmss\", DateTimeZone.UTC); logger.debug(\"dt = \" + dt0); Assert.assertEquals(new DateTime(2009,6,24,5,11,12,0,DateTimeZone.UTC), dt0); dt0 = DateTimeUtil.parseEmbedded(\"app-20090624-051112.log.gz\", \"yyyyMMdd-hhmmss\", DateTimeZone.UTC); logger.debug(\"dt = \" + dt0); Assert.assertEquals(new DateTime(2009,6,24,5,11,12,0,DateTimeZone.UTC), dt0); dt0 = DateTimeUtil.parseEmbedded(\"app-200906.log.gz\", \"yyyyMM\", DateTimeZone.UTC); logger.debug(\"dt = \" + dt0); Assert.assertEquals(new DateTime(2009,6,1,0,0,0,0,DateTimeZone.UTC), dt0); try { dt0 = DateTimeUtil.parseEmbedded(\"app-200906.log.gz\", \"yyyyMMdd\", DateTimeZone.UTC); Assert.fail(\"parse should have failed\"); } catch (IllegalArgumentException e) { } try { dt0 = DateTimeUtil.parseEmbedded(\"app-20090631.log.gz\", \"yyyyMMdd\", DateTimeZone.UTC); Assert.fail(\"parse should have failed\"); } catch (IllegalArgumentException e) { } try { dt0 = DateTimeUtil.parseEmbedded(\"app-20090631.log.gz\", \"yyyyMMtt\", DateTimeZone.UTC); Assert.fail(\"parse should have failed\"); } catch (IllegalArgumentException e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void addEdgeToGraph(DirectedGraphBuilder<String> builder, String str) { String[] edge = str.split(WHITE_SPACE); if (edge.length != 2) { throw new IllegalArgumentException(\"@@@NoEdgeTarget: \" + str); } internAndAddEdge(builder, edge); }### Assistant: @Test public void addMultipleEdgesToGraph() throws Exception { String [] edgesToAdd = {\"x y\", \"u v\"}; edges = addEdgeToGraph(edgesToAdd); edge = new Edge<String>(\"x\", \"y\"); assertTrue(edges.contains(edge)); edge = new Edge<String>(\"u\", \"v\"); assertTrue(edges.contains(edge)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public InputStream serialize(InputStream rawContent, DataSetMetadata metadata, long limit) { try { PipedInputStream pipe = new PipedInputStream(); PipedOutputStream jsonOutput = new PipedOutputStream(pipe); Runnable r = () -> { final Map<String, String> parameters = metadata.getContent().getParameters(); final String separator = parameters.get(CSVFormatFamily.SEPARATOR_PARAMETER); final char actualSeparator = separator.charAt(0); final char textEnclosureChar = getFromParameters(parameters, TEXT_ENCLOSURE_CHAR, defaultTextEnclosure); final char escapeChar = getFromParameters(parameters, CSVFormatFamily.ESCAPE_CHAR, defaultEscapeChar); try (InputStreamReader input = new InputStreamReader(rawContent, metadata.getEncoding()); CSVReader reader = new CSVReader(input, actualSeparator, textEnclosureChar, escapeChar)) { JsonGenerator generator = new JsonFactory().createGenerator(jsonOutput); int i = 0; while (i++ < metadata.getContent().getNbLinesInHeader()) { reader.readNext(); } generator.writeStartArray(); writeLineContent(reader, metadata, generator, separator, limit); generator.writeEndArray(); generator.flush(); } catch (Exception e) { LOGGER.debug(\"Unable to continue serialization for {}. Skipping remaining content.\", metadata.getId(), e); } finally { try { jsonOutput.close(); } catch (IOException e) { LOGGER.error(\"Unable to close output\", e); } } }; executor.execute(r); return pipe; } catch (IOException e) { throw new TDPException(CommonErrorCodes.UNABLE_TO_SERIALIZE_TO_JSON, e); } }### Assistant: @Test public void should_use_custom_import_parameters_double_quote() throws Exception { InputStream inputStream = this.getClass().getResourceAsStream(\"test_4579_doublequote_import.csv\"); DataSetMetadata datasetMetadata = getSimpleDataSetMetadata(\"City\", \"code\", \"Description\"); datasetMetadata.getContent().addParameter(SEPARATOR_PARAMETER, \",\"); datasetMetadata.getContent().addParameter(ESCAPE_CHAR, \"\"); datasetMetadata.getContent().addParameter(TEXT_ENCLOSURE_CHAR, \"\"); InputStream input = serializer.serialize(inputStream, datasetMetadata, -1); String actual = IOUtils.toString(input, UTF_8); final String expected = IOUtils.toString(this.getClass().getResourceAsStream(\"test_4579_doublequote_import.json\"), UTF_8); JSONAssert.assertEquals(expected, actual, false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean satisfiesConstraints( Value value, JcrSession session ) { if (value == null) return false; if (valueConstraints == null || valueConstraints.length == 0) { return true; } int type = requiredType == PropertyType.UNDEFINED ? value.getType() : requiredType; ConstraintChecker checker = this.checker; if (checker == null || checker.getType() != type) { checker = createChecker(context, type, valueConstraints); this.checker = checker; } try { return checker.matches(value, session); } catch (ValueFormatException vfe) { return false; } }### Assistant: @Test public void shouldAllowValidLongValue() throws Exception { NodeType constrainedType = validateTypeDefinition(); JcrPropertyDefinition prop = propertyDefinitionFor(constrainedType, TestLexicon.CONSTRAINED_LONG); assertThat(prop.satisfiesConstraints(valueFor(Long.MIN_VALUE, PropertyType.LONG), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor(0, PropertyType.LONG), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor(0.1, PropertyType.LONG), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor(4.99, PropertyType.LONG), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor(10, PropertyType.LONG), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor(10.100, PropertyType.LONG), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor(19, PropertyType.LONG), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor(31, PropertyType.LONG), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor(40, PropertyType.LONG), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor(50, PropertyType.LONG), session), is(true)); assertThat(prop.satisfiesConstraints(valueFor(Long.MAX_VALUE, PropertyType.LONG), session), is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int read() { if (_index < _capacity) { return _buffer[_index++] & 0xff; } return -1; }### Assistant: @Test public void testRead() { UnsyncByteArrayInputStream unsyncByteArrayInputStream = new UnsyncByteArrayInputStream(_BUFFER); for (int i = 0; i < _SIZE; i++) { Assert.assertEquals(i, unsyncByteArrayInputStream.read()); } Assert.assertEquals(-1, unsyncByteArrayInputStream.read()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setString(int columnIndex, String value) { setString(columnNames[columnIndex], value); }### Assistant: @Test public void testSetString() throws IOException { Table table = Table.read().csv(\"../data/bush.csv\"); Row row = new Row(table); while (row.hasNext()) { row.next(); String rowVal = table.stringColumn(2).get(row.getRowNumber()); String updateVal1 = rowVal.concat(\"2\"); String updateVal2 = rowVal.concat(\"3\"); row.setString(2, updateVal1); assertEquals(updateVal1, row.getString(2)); row.setString(\"who\", updateVal2); assertEquals(updateVal2, row.getString(\"who\")); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isDisplayZeros() { throw new UnsupportedOperationException(); }### Assistant: @Test(expected = UnsupportedOperationException.class) public void isDisplayZeros() throws Exception { streamingSheet.isDisplayZeros(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<DetectedRelation<T>> solve(PrintCollector printCollector) { List<DetectedRelation<T>> detectedRelations = Lists.newArrayList(); pruneGraph(printCollector); ConnectivityInspector<T, Edge> connectivityInspector = new ConnectivityInspector<>(graph); List<Set<T>> connectedComponents = connectivityInspector.connectedSets(); final UndirectedGraph<T, Edge> restored = new Multigraph<>(Edge.class); Graphs.addGraph(restored, graph); printCollector.print(String.format(\"Graph has %2d components\", connectedComponents.size())); for (Set<T> connectedComponent : connectedComponents) { printCollector.print(String.format(\"Solving connected component with %d vertices\", connectedComponent.size())); HashSet<T> difference = Sets.newHashSet(Sets.difference(graph.vertexSet(), connectedComponent)); graph.removeAllVertices(difference); detectedRelations.addAll(solveConnectedComponent(printCollector, connectedComponent)); Graphs.addGraph(graph, restored); } return detectedRelations; }### Assistant: @Test public void testSolve() throws Exception { ConstraintSolver.ConstraintSolverBuilder<String> solverBuilder = new ConstraintSolver.ConstraintSolverBuilder<>(); solverBuilder.add(\"E1\", \"E2\", \"x -> y\", \"1\", \"A\", \"D\", 1, 1, 1); solverBuilder.add(\"E1\", \"E2\", \"x -> y\", \"2\", \"A#\", \"D\", 3, 1, 1); solverBuilder.add(\"E2\", \"E3\", \"x -> y\", \"3\", \"D\", \"B\", 1, 1, 1); solverBuilder.add(\"E1\", \"E3\", \"x -> y\", \"4\", \"A\", \"B\", 1, 1, 1); solverBuilder.add(\"E3\", \"E4\", \"x -> y\", \"5\", \"B\", \"C\", 1, 1, 1); PrintCollector printCollector = new PrintCollector(true); final List<DetectedRelation<String>> solve = solverBuilder.build().solve(printCollector); assertNotNull(solve); assertThat(solve.size(), is(4)); assertThat(solve.get(0).getEdge(), is(new Edge(1, \"1\", \"x -> y\", \"A\", \"D\", 1, 1, 1, false))); assertThat(solve.get(1).getEdge(), is(new Edge(4, \"4\", \"x -> y\", \"A\", \"B\", 1, 1, 1, false))); assertThat(solve.get(2).getEdge(), is(new Edge(3, \"3\", \"x -> y\", \"D\", \"B\", 1, 1, 1, false))); assertThat(solve.get(3).getEdge(), is(new Edge(5, \"5\", \"x -> y\", \"B\", \"C\", 1, 1, 1, false))); printCollector.print(Joiner.on(\"\\n\").join(solve)); printCollector.print(Graph.transform(solve).toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public KeyVersion createKey(final String name, final byte[] material, final Options options) throws IOException { return doOp(new ProviderCallable<KeyVersion>() { @Override public KeyVersion call(KMSClientProvider provider) throws IOException { return provider.createKey(name, material, options); } }, nextIdx(), false); }### Assistant: @Test public void testClientRetriesSpecifiedNumberOfTimes() throws Exception { Configuration conf = new Configuration(); conf.setInt( CommonConfigurationKeysPublic.KMS_CLIENT_FAILOVER_MAX_RETRIES_KEY, 10); KMSClientProvider p1 = mock(KMSClientProvider.class); when(p1.createKey(Mockito.anyString(), Mockito.any(Options.class))) .thenThrow(new ConnectTimeoutException(\"p1\")); KMSClientProvider p2 = mock(KMSClientProvider.class); when(p2.createKey(Mockito.anyString(), Mockito.any(Options.class))) .thenThrow(new ConnectTimeoutException(\"p2\")); when(p1.getKMSUrl()).thenReturn(\"p1\"); when(p2.getKMSUrl()).thenReturn(\"p2\"); LoadBalancingKMSClientProvider kp = new LoadBalancingKMSClientProvider( new KMSClientProvider[] {p1, p2}, 0, conf); try { kp.createKey(\"test3\", new Options(conf)); fail(\"Should fail\"); } catch (Exception e) { assert (e instanceof ConnectTimeoutException); } verify(p1, Mockito.times(6)).createKey(Mockito.eq(\"test3\"), Mockito.any(Options.class)); verify(p2, Mockito.times(5)).createKey(Mockito.eq(\"test3\"), Mockito.any(Options.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void clusterAddSlots(RedisClusterNode node, int... slots) { helper.doInScope(CLUSTER_ADDSLOTS, () -> connection.clusterAddSlots(node, slots)); }### Assistant: @Test public void invokingClusterAddSlots() { commandCreatesNewSpan(RedisCommand.CLUSTER_ADDSLOTS, () -> getConnection().clusterAddSlots(mockRedisClusterNode, 0)); verify(mockRedisClusterConnection).clusterAddSlots(mockRedisClusterNode, 0); RedisClusterNode.SlotRange range = new RedisClusterNode.SlotRange(0, 1); commandCreatesNewSpan(RedisCommand.CLUSTER_ADDSLOTS, () -> getConnection().clusterAddSlots(mockRedisClusterNode, range)); verify(mockRedisConnection()).clusterAddSlots(mockRedisClusterNode, range); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static B2PartSizes from(B2AccountAuthorization auth) { return new B2PartSizes( auth.getAbsoluteMinimumPartSize(), auth.getRecommendedPartSize() ); }### Assistant: @Test public void testFrom() { assertEquals(accountAuth.getAbsoluteMinimumPartSize(), partSizes.getMinimumPartSize()); assertEquals(accountAuth.getRecommendedPartSize(), partSizes.getRecommendedPartSize()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder newBuilder() { return new Builder(); }### Assistant: @Test public void copy() { final DittoRuntimeException copy = DittoRuntimeException.newBuilder(MISSING_THING_IDS_EXCEPTION).build(); assertThat(copy).isEqualTo(MISSING_THING_IDS_EXCEPTION); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TargetLocator switchTo() { return new TargetLocator(); }### Assistant: @Test public void checkSwitchToDefaultContentReturnsCorrectCode() { assertThat(driver.switchTo().defaultContent(), is(equalTo(\"driver.switchTo().defaultContent()\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void doProcess(SxmpProcessor processor, InputStream in, PrintWriter out, String uri, String method, String contentType) throws IOException, HttpStatusCodeException { int posOfVersion = uri.lastIndexOf('/'); if (posOfVersion < 0 || posOfVersion+1 >= uri.length()) { throw new HttpStatusCodeException(HttpServletResponse.SC_NOT_FOUND, \"Bad URL used, could not extract version or no data for version\"); } String version = uri.substring(posOfVersion+1); if (!version.equals(SxmpParser.VERSION_1_0) && !version.equals(SxmpParser.VERSION_1_1)) { throw new HttpStatusCodeException(HttpServletResponse.SC_BAD_REQUEST, \"Unsupported API version in URL\"); } if (!method.equalsIgnoreCase(\"POST\")) { throw new HttpStatusCodeException(HttpServletResponse.SC_METHOD_NOT_ALLOWED, \"Only HTTP POST methods are acceptable\"); } if (contentType == null || !contentType.toLowerCase().startsWith(\"text/xml\")) { throw new HttpStatusCodeException(HttpServletResponse.SC_BAD_REQUEST, \"Unsupported Content-Type HTTP Header - Must Be text/xml\"); } SxmpSession session = new SxmpSession(processor, version); Response response = null; try { response = session.process(in); } catch (Exception e) { throw new HttpStatusCodeException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage()); } if (response == null) { logger.error(fatal, \"The response from SxmpSession.process() was null -- should be impossible\"); throw new HttpStatusCodeException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Response was empty\"); } try { SxmpWriter.write(out, response); } catch (SxmpErrorException e) { logger.error(\"Error while writing response\", e); throw new HttpStatusCodeException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Unable to cleanly write response to OutputStream\"); } }### Assistant: @Test public void doProcessSubmitWithSxmpErrorThrown() throws Exception { StringBuilder string0 = new StringBuilder(200) .append(\"<?xml version=\\\"1.0\\\"?>\\n\") .append(\"<operation type=\\\"submit\\\">\\n\") .append(\" <account username=\\\"customer1\\\" password=\\\"test1\\\"/>\\n\") .append(\" <submitRequest referenceId=\\\"MYREF102020022\\\">\\n\") .append(\" <operatorId>10</operatorId>\\n\") .append(\" <deliveryReport>true</deliveryReport>\\n\") .append(\" <sourceAddress type=\\\"network\\\">40404</sourceAddress>\\n\") .append(\" <destinationAddress type=\\\"international\\\">+12065551212</destinationAddress>\\n\") .append(\" <text encoding=\\\"ISO-8859-1\\\">48656c6c6f20576f726c64</text>\\n\") .append(\" </submitRequest>\\n\") .append(\"</operation>\\n\") .append(\"\"); ByteArrayInputStream is = new ByteArrayInputStream(string0.toString().getBytes()); StringWriter sw = new StringWriter(); SxmpProcessor requestProcessor = new SxmpProcessor() { public boolean authenticate(Account account) throws SxmpErrorException { return true; } public SubmitResponse submit(Account account, SubmitRequest submitReq) throws SxmpErrorException { throw new SxmpErrorException(SxmpErrorCode.INVALID_VALUE, \"Short code not allowed\"); } public DeliverResponse deliver(Account account, DeliverRequest deliverRequest) throws SxmpErrorException { throw new UnsupportedOperationException(\"Not supported yet.\"); } public DeliveryReportResponse deliveryReport(Account account, DeliveryReportRequest deliveryRequest) throws SxmpErrorException { throw new UnsupportedOperationException(\"Not supported yet.\"); } }; SxmpServletProcessor processor = new SxmpServletProcessor(); processor.doProcess(requestProcessor, is, new PrintWriter(sw), \"/1.0\", \"POST\", \"text/xml; charset=ISO-8859-1\"); logger.debug(sw.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Iterable<AlignmentPair> global(final Sequence query, final Sequence subject) { return global(ImmutableList.of(query), ImmutableList.of(subject), DEFAULT_GLOBAL_GAP_PENALTIES); }### Assistant: @Test(expected=NullPointerException.class) public void testGlobalNullGapPenalties() { align.global(query, subject, null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isIgnoreBlankRows() { return ignoreBlankRows; }### Assistant: @Test public void testIsIgnoreBlankRows() { assertEquals(false, configuration.isIgnoreBlankRows()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void main(String[] args) { createKingdom(new ElfKingdomFactory()); createKingdom(new OrcKingdomFactory()); }### Assistant: @Test public void test() { String[] args = {}; App.main(args); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String reverseRecursive(String input) { validateInput(input); return reverseRecursiveInner(input, input.length() - 1, new StringBuilder()); }### Assistant: @Test public void shouldReturnTheSameStringIfTheInputStringContainsJustOneCharRecursive() { String result = reverseString.reverseRecursive(\"a\"); assertEquals(\"a\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @When(\"^start (service|process) \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public InstanceFailureStepDefinitions startProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts) { List<EC2InstanceTO> instances = executionStateCache.getInstances(); if (instances == null || instances.isEmpty()) { throw new RuntimeException(\"No Instances are available\"); } executionStateCache.addProcessName(processName); if (numHosts > instances.size()) { numHosts = instances.size(); } IntStream.range(0, numHosts) .parallel() .forEach( i -> { String ip = instances.get(i).getPrivateIpAddress(); String id = instances.get(i).getInstanceId(); logger.info(\"starting process on: \" + id + \" @ \" + ip); scriptExecutor.executeStartProcess(ip, processName); }); return this; }### Assistant: @Test public void testStartProcessOnHealthyInstances() throws Exception { PowerMockito.when(ec2Raider.getInstancesByName(\"test\")).thenReturn(createInstances()); instanceFailureStepDefinitions.givenEC2InstanceName(\"test\"); Assert.assertEquals(executionStateCache.getEc2Tag(), \"test\"); Assert.assertTrue(executionStateCache.getInstances().size()>0); instanceFailureStepDefinitions.startProcessOnHealthyInstances(\"process\",\"nginx\",1); Assert.assertEquals(executionStateCache.getUnhealthyInstances().size(), 0); Assert.assertTrue(executionStateCache.getProcessNames().contains(\"nginx\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Path parse(String path, boolean resolveJsonPointerEscapes) { path = Strings.trim(path, (c) -> c < ' ' || c == '/'); if (path.length() == 0) { return RootPath.INSTANCE; } String[] segments = PATH_SEPARATOR_PATTERN.split(path); if (segments.length == 1) { return new SingleSegmentPath(parseSegment(segments[0], resolveJsonPointerEscapes)); } if (resolveJsonPointerEscapes) { for (int i = 0; i != segments.length; ++i) { segments[i] = parseSegment(segments[i], true); } } return new MultiSegmentPath(segments); }### Assistant: @Test public void shouldParseMultiAbsolutePath() { path = parse(\"/a/b/c/d/e\"); assertThat(path.isRoot()).isFalse(); assertThat(path.isSingle()).isFalse(); assertThat(path.size()).isEqualTo(5); assertThat(path.segment(0)).isEqualTo(\"a\"); assertThat(path.segment(1)).isEqualTo(\"b\"); assertThat(path.segment(2)).isEqualTo(\"c\"); assertThat(path.segment(3)).isEqualTo(\"d\"); assertThat(path.segment(4)).isEqualTo(\"e\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected List<Repository> load(Path filePath, Logger logger) throws LifecycleExecutionException { try { List<Repository> repositoryList = new ArrayList<>(); Yaml yaml = new Yaml(); HashMap<String, List<Map<String, Object>>> root = yaml.load(new StringReader(new String(Files.readAllBytes(filePath), StandardCharsets.UTF_8))); if (root.containsKey(\"repositories\")) { for (Map<String, Object> model : root.get(\"repositories\")) { Repository repository = new Repository(); repository.setId(Objects.toString(model.get(\"id\"))); repository.setName(Objects.toString(model.getOrDefault(\"name\", repository.getId()))); repository.setUrl(Objects.toString(model.get(\"url\"))); repository.setLayout(Objects.toString(model.getOrDefault(\"layout\", \"default\"))); if (model.containsKey(\"releases\")) { repository.setReleases(getRepositoryPolicy((Map<String, Object>) model.get(\"releases\"))); } if (model.containsKey(\"snapshots\")) { repository.setReleases(getRepositoryPolicy((Map<String, Object>) model.get(\"snapshots\"))); } logger.info(String.format(\"Add Repository %s=%s\", repository.getId(), repository.getUrl())); repositoryList.add(repository); } } return repositoryList; } catch (IOException e) { throw new LifecycleExecutionException(\"Failed to read repository configuration file\", e); } }### Assistant: @Test public void shouldLoadFromYaml() throws LifecycleExecutionException, URISyntaxException { List<Repository> repositoryList = loader.load(TestHelper.getClasspathResource(\"yaks.settings.yaml\"), logger); TestHelper.verifyRepositories(repositoryList); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Activate @SuppressWarnings(\"unchecked\") public void activate(ComponentContext context) throws URISyntaxException { Dictionary<String, Object> config = context.getProperties(); activate(config); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testEmptyURI() throws URISyntaxException { RestAppender appender = new RestAppender(); Dictionary<String, Object> config = new Hashtable<>(); appender.activate(config); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> Consumer<T> toConsumer(UnsafeConsumer<T> unsafeConsumer, Logger logger) { return t -> { try { unsafeConsumer.accept(t); } catch (Exception e) { throw logger.throwing(new RuntimeException(e)); } }; }### Assistant: @Test public void canUseConsumerThatThrowsCheckedExceptionInLambda() { Stream.of(false).forEach(toConsumer(this::consumerMethodWithChecked, logger)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Multimap<String, Object> jsonToJava(String json) { try (JsonReader reader = new JsonReader(new StringReader(json))) { reader.setLenient(true); return jsonToJava(reader); } catch (IOException e) { throw CheckedExceptions.wrapAsRuntimeException(e); } }### Assistant: @Test public void testConvertJsonArrayDupesAreFilteredOut() { String json = \"{\\\"key\\\": [3, 3]}\"; Multimap<String, Object> data = Convert.jsonToJava(json); Assert.assertEquals(1, data.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String readLine() { StringBuilder currentLineStringBuilder = new StringBuilder(); char currentChar = Character.MIN_VALUE; char lineFeedChar1 = lineFeedChar.charAt(0); int chr = 0; try { while ((chr = reader.read()) != -1) { currentChar = (char) chr; if (currentChar == lineFeedChar1) { break; } currentLineStringBuilder.append(currentChar); } } catch (IOException e) { throw new FileException(\"Reader control operation was failed.\", e); } return currentLineStringBuilder.toString(); }### Assistant: @Test public void testReadLine06() throws Exception { String str = \"\\\"aaa\\\",\\\"aaa\\\",\\\"aa\\ra\\\"\\r\"; StringReader stringReader = new StringReader(str); BufferedReader bufReader = new BufferedReader(stringReader); String tempLineFeedChar = \"\\r\"; LineFeed1LineReader lineFeed1LineReader = new LineFeed1LineReader(bufReader, tempLineFeedChar); String result = lineFeed1LineReader.readLine(); assertEquals(\"\\\"aaa\\\",\\\"aaa\\\",\\\"aa\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<StringCriteria> convertStringList(List<String> strings) { List<StringCriteria> criteriaList = new ArrayList<>(); if (strings != null) { for (String string : strings) { criteriaList.add(new StringCriteria(string)); } } return criteriaList; }### Assistant: @Test void testConvertStringList() { List<String> strings = new ArrayList<>(); strings.add(\"abcdef\"); strings.add(\"ABCDEF\"); List<StringCriteria> criteriaList = StringCriteria.convertStringList(strings); for (int i = 0; i < strings.size(); i++) { assertThat(criteriaList.get(i).toString()).isEqualTo(strings.get(i).toString()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public double nextDouble() { return nextDouble(alpha, rate); }### Assistant: @Test public void testNextDouble() { double[] z = new double[100000]; Random gen = RandomUtils.getRandom(); for (double alpha : new double[]{1, 2, 10, 0.1, 0.01, 100}) { Gamma g = new Gamma(alpha, 1, gen); for (int i = 0; i < z.length; i++) { z[i] = g.nextDouble(); } Arrays.sort(z); for (double q : seq(0.01, 1, 0.01)) { double p = z[(int) (q * z.length)]; assertEquals(q, g.cdf(p), 0.01); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void appendColumn(final AttributeCol52 column) { doAppendColumn(column, () -> synchronizer.appendColumn(column), () -> refreshAttributesPanelEvent.fire(new RefreshAttributesPanelEvent(this, model.getAttributeCols()))); }### Assistant: @Test public void appendPatternAndConditionColumn() throws VetoException { reset(modellerPresenter); final Pattern52 pattern = new Pattern52(); pattern.setFactType(\"FactType\"); final ConditionCol52 condition = new ConditionCol52(); condition.setFactField(\"field\"); condition.setHeader(\"header\"); dtPresenter.appendColumn(pattern, condition); verify(synchronizer, times(1)).appendColumn(eq(pattern), eq(condition)); verify(refreshConditionsPanelEvent, times(1)).fire(any(RefreshConditionsPanelEvent.class)); verify(modellerPresenter, times(1)).updateLinks(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void load() throws PluginException { try { IBootstrapItem<String> item = new BootstrapItem(\"CreateAsyncOperationActorPlugin\"); item .process(() -> { try { IKey createAsyncOpKey = Keys.getOrAdd(CreateAsyncOperationActor.class.getCanonicalName()); IOC.register(createAsyncOpKey, new CreateNewInstanceStrategy( (args) -> { try { return new CreateAsyncOperationActor((IObject) args[0]); } catch (Exception e) { throw new RuntimeException(e); } })); } catch (ResolutionException e) { throw new ActionExecuteException(\"CreateAsyncOperationActor plugin can't load: can't get CreateAsyncOperationActor key\", e); } catch (InvalidArgumentException e) { throw new ActionExecuteException(\"CreateAsyncOperationActor plugin can't load: can't create strategy\", e); } catch (RegistrationException e) { throw new ActionExecuteException(\"CreateAsyncOperationActor plugin can't load: can't register new strategy\", e); } }); bootstrap.add(item); } catch (Exception e) { throw new PluginException(\"Can't load CreateAsyncOperationActor plugin\", e); } }### Assistant: @Test public void MustCorrectLoadPlugin() throws Exception { BootstrapItem bootstrapItem = mock(BootstrapItem.class); whenNew(BootstrapItem.class).withArguments(\"CreateAsyncOperationActorPlugin\").thenReturn(bootstrapItem); when(bootstrapItem.after(anyString())).thenReturn(bootstrapItem); when(bootstrapItem.before(anyString())).thenReturn(bootstrapItem); plugin.load(); verifyNew(BootstrapItem.class).withArguments(\"CreateAsyncOperationActorPlugin\"); ArgumentCaptor<IPoorAction> actionArgumentCaptor = ArgumentCaptor.forClass(IPoorAction.class); verify(bootstrapItem).process(actionArgumentCaptor.capture()); verify(bootstrap).add(bootstrapItem); IKey createAsyncOpKey = mock(IKey.class); when(Keys.getOrAdd(CreateAsyncOperationActor.class.getCanonicalName())).thenReturn(createAsyncOpKey); actionArgumentCaptor.getValue().execute(); verifyStatic(); Keys.getOrAdd(CreateAsyncOperationActor.class.getCanonicalName()); ArgumentCaptor<CreateNewInstanceStrategy> createNewInstanceStrategyArgumentCaptor = ArgumentCaptor.forClass(CreateNewInstanceStrategy.class); verifyStatic(); IOC.register(eq(createAsyncOpKey), createNewInstanceStrategyArgumentCaptor.capture()); IObject arg = mock(IObject.class); CreateAsyncOperationActor actor = mock(CreateAsyncOperationActor.class); whenNew(CreateAsyncOperationActor.class).withArguments(arg).thenReturn(actor); assertTrue(\"Objects must return correct object\", createNewInstanceStrategyArgumentCaptor.getValue().resolve(arg) == actor); verifyNew(CreateAsyncOperationActor.class).withArguments(arg); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void backupAndSave(String springResourcePath){ try { initByApplication(springResourcePath); doBackUpAndSave(); } catch (ParserConfigurationException e) { logger.error(\"MySQL\u6570\u636e\u5e93\u8fdb\u884c\u5907\u4efd\uff0cXML\u89e3\u6790\u5668\u521b\u5efa\u5931\u8d25\uff01\"); } catch (SAXException e) { logger.error(\"MySQL\u6570\u636e\u5e93\u8fdb\u884c\u5907\u4efd\uff0cXML\u89e3\u6790\u9519\u8bef\uff01\"); } catch (IOException e) { logger.error(\"MySQL\u6570\u636e\u5e93\u8fdb\u884c\u5907\u4efd\uff0cXML\u6587\u4ef6\u4e0d\u5b58\u5728\uff01\"); } }### Assistant: @Test public void test(){ MySQLBackup.backupAndSave(\"context-dao.xml\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public XXPortalUser createUser(VXPortalUser userProfile, int userStatus, Collection<String> userRoleList) { XXPortalUser user = mapVXPortalUserToXXPortalUser(userProfile); checkAdminAccess(); rangerBizUtil.blockAuditorRoleUser(); List<String> userRolesList = new ArrayList<String>(userRoleList); xUserMgr.checkAccessRoles(userRolesList); user = createUser(user, userStatus, userRoleList); return user; }### Assistant: @Test public void test02CreateUser() { setup(); XXPortalUserDao userDao = Mockito.mock(XXPortalUserDao.class); XXPortalUserRoleDao roleDao = Mockito.mock(XXPortalUserRoleDao.class); VXPortalUser userProfile = userProfile(); Collection<String> userRoleList = new ArrayList<String>(); userRoleList.add(\"ROLE_USER\"); userProfile.setUserRoleList(userRoleList); XXPortalUser user = new XXPortalUser(); user.setEmailAddress(userProfile.getEmailAddress()); user.setFirstName(userProfile.getFirstName()); user.setLastName(userProfile.getLastName()); user.setLoginId(userProfile.getLoginId()); user.setPassword(userProfile.getPassword()); user.setUserSource(userProfile.getUserSource()); user.setPublicScreenName(userProfile.getPublicScreenName()); user.setId(userProfile.getId()); XXPortalUserRole XXPortalUserRole = new XXPortalUserRole(); XXPortalUserRole.setId(user.getId()); XXPortalUserRole.setUserRole(\"ROLE_USER\"); List<XXPortalUserRole> list = new ArrayList<XXPortalUserRole>(); list.add(XXPortalUserRole); Mockito.when(daoManager.getXXPortalUser()).thenReturn(userDao); Mockito.when(userDao.create((XXPortalUser) Mockito.any())).thenReturn(user); Mockito.when(daoManager.getXXPortalUserRole()).thenReturn(roleDao); Mockito.when(roleDao.findByUserId(userId)).thenReturn(list); Mockito.doNothing().when(rangerBizUtil).blockAuditorRoleUser(); XXPortalUser dbxxPortalUser = userMgr.createUser(userProfile, 1); userId = dbxxPortalUser.getId(); Assert.assertNotNull(dbxxPortalUser); Assert.assertEquals(userId, dbxxPortalUser.getId()); Assert.assertEquals(userProfile.getFirstName(),dbxxPortalUser.getFirstName()); Assert.assertEquals(userProfile.getFirstName(),dbxxPortalUser.getFirstName()); Assert.assertEquals(userProfile.getLastName(),dbxxPortalUser.getLastName()); Assert.assertEquals(userProfile.getLoginId(),dbxxPortalUser.getLoginId()); Assert.assertEquals(userProfile.getEmailAddress(),dbxxPortalUser.getEmailAddress()); Assert.assertEquals(userProfile.getPassword(),dbxxPortalUser.getPassword()); Mockito.verify(daoManager).getXXPortalUser(); Mockito.verify(daoManager).getXXPortalUserRole(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: TextOutline positionChargeLabel(int hydrogens, HydrogenPosition position, TextOutline charge, TextOutline element, TextOutline hydrogen) { final Rectangle2D chargeBounds = charge.getBounds(); Rectangle2D referenceBounds = element.getBounds(); if (hydrogens > 0 && (position == Left || position == Right)) referenceBounds = hydrogen.getBounds(); if (position == Left) return charge.translate((referenceBounds.getMinX() - padding) - chargeBounds.getMaxX(), (referenceBounds.getMinY() - (chargeBounds.getHeight() / 2)) - chargeBounds.getMinY()); else return charge.translate((referenceBounds.getMaxX() + padding) - chargeBounds.getMinX(), (referenceBounds.getMinY() - (chargeBounds.getHeight() / 2)) - chargeBounds.getMinY()); }### Assistant: @Test public void positionOfChargeWhenHydrogensAreBelow() { TextOutline charge = new TextOutline(\"+\", font); TextOutline positioned = atomGenerator.positionChargeLabel(1, HydrogenPosition.Below, charge, element, hydrogen.translate(0, 5)); Rectangle2D elementBounds = element.getBounds(); Rectangle2D chargeBounds = positioned.getBounds(); assertThat(chargeBounds.getMinX(), greaterThan(elementBounds.getMinX())); assertThat(chargeBounds.getCenterY(), closeTo(elementBounds.getMinY(), 0.01)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void main(String[] args) { Options options = getOptions(); CommandLineParser parser = new DefaultParser(); try (BasicDataSource ds = new BasicDataSource()) { CommandLine line = parser.parse(options, args); ds.setDriverClassName(line.getOptionValue(\"driver\")); ds.setUrl(line.getOptionValue(\"url\")); ds.setUsername(line.getOptionValue(\"user\")); ds.setPassword(line.getOptionValue(\"password\")); ds.setDefaultReadOnly(true); ds.getConnection().close(); DataSetService dataSetService = new DataSetServiceImpl(() -> ds); XESExportServiceImpl service = new XESExportServiceImpl(); service.setDataSetService(dataSetService); final XESProcessFilter.Builder filter = XESProcessFilter.builder(); filter.withProcessId(line.getOptionValue(\"process\")); if (line.hasOption(\"version\")) { filter.withProcessVersion(line.getOptionValue(\"version\")); } if (line.hasOption(\"status\")) { List<Integer> status = new ArrayList<>(); for (String statusLine : line.getOptionValues(\"status\")) { try { final Integer pStatus = Integer.valueOf(statusLine); if (pStatus >= 0 && pStatus <= 4) { status.add(pStatus); } } catch (NumberFormatException ex) { System.err.println(\"Invalid process status number for input: \" + statusLine + \", valid status are number between 0 and 4.\"); } } if (status.isEmpty() == false) { filter.withStatus(status); } } if (line.hasOption(\"logtype\")) { filter.withNodeInstanceLogType(Integer.valueOf(line.getOptionValue(\"logtype\"))); } if (line.hasOption(\"nodetypes\")) { filter.withAllNodeTypes(); } final String xml = service.export(filter.build()); if (line.hasOption(\"file\")) { FileUtils.write(new File(line.getOptionValue(\"file\")), xml, \"UTF-8\"); } else { System.out.println(xml); } } catch (ParseException exp) { System.err.println(\"Parsing options failed. Reason: \" + exp.getMessage()); HelpFormatter formatter = new HelpFormatter(); formatter.printHelp(\"xes\", options, true); System.exit(-1); } catch (Exception ex) { System.err.println(\"Failed to execute export due to: \" + ex.getMessage()); ex.printStackTrace(); System.exit(-1); } }### Assistant: @Test public void testHelloProcessFilteringStatusCompletedOnlyExitEvents() throws Exception { XESExportMain.main(new String[] {\"-user\", user, \"-password\", password, \"-url\", url, \"-driver\", driver, \"-process\", PROCESS, \"-status\", \"2\", \"-file\" , COMPLETED_XES_FILE, \"-logtype\", \"1\"}); assertTrue(validateXML(COMPLETED_XES_FILE)); LogType log = assertTraceNodeInstances(COMPLETED_XES_FILE, 1); assertEquals(2, log.getTrace().get(0).getEvent().size()); assertStatus(log, \"completed\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ConnectClientFailure toRequestFailure(final RequestException cause) { return new ConnectClientFailure(getTarget(), getSequence(), cause); }### Assistant: @Test public void toRequestFailureTest() { final RequestException exception = new DeadTransactionException(ImmutableRangeSet.of()); final ConnectClientFailure failure = OBJECT.toRequestFailure(exception); Assert.assertNotNull(failure); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @MessageMapping(\"/location/{id}/delete\") void removeLocation(@DestinationVariable long id) { locationService.removeLocation(id); }### Assistant: @Test void removeLocation() { webSocketController.removeLocation(9L); verify(locationService).removeLocation(9); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = {\"/fw_dictionary/save_protocolList\"}, method = {RequestMethod.POST}) public ModelAndView saveProtocolListDictionary(HttpServletRequest request, HttpServletResponse response) throws IOException { DictionaryUtils utils = getDictionaryUtilsInstance(); try { boolean fromAPI = utils.isRequestFromAPI(request); ObjectMapper mapper = new ObjectMapper(); mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); JsonNode root = mapper.readTree(request.getReader()); ProtocolList protocolList; if (fromAPI) { protocolList = mapper.readValue(root.get(dictionaryFields).toString(), ProtocolList.class); } else { protocolList = mapper.readValue(root.get(\"protocolListDictionaryData\").toString(), ProtocolList.class); } List<Object> duplicateData = commonClassDao.checkDuplicateEntry(protocolList.getProtocolName(), protocolName, ProtocolList.class); boolean duplicateflag = false; if (!duplicateData.isEmpty()) { ProtocolList data = (ProtocolList) duplicateData.get(0); if (request.getParameter(operation) != null && \"update\".equals(request.getParameter(operation))) { protocolList.setId(data.getId()); } else if ((request.getParameter(operation) != null && !\"update\".equals(request.getParameter(operation))) || (request.getParameter(operation) == null && (data.getId() != protocolList.getId()))) { duplicateflag = true; } } String responseString = null; if (!duplicateflag) { if (protocolList.getId() == 0) { commonClassDao.save(protocolList); } else { commonClassDao.update(protocolList); } responseString = mapper.writeValueAsString(commonClassDao.getData(ProtocolList.class)); } else { responseString = duplicateResponseString; } if (fromAPI) { return utils.getResultForApi(responseString); } else { utils.setResponseData(response, protocolListDatas, responseString); } } catch (Exception e) { utils.setErrorResponseData(response, e); } return null; }### Assistant: @Test public void testUpdateProtocolListDictionary() { jsonString = \"{\\\"userid\\\":\\\"demo\\\",\\\"protocolListDictionaryData\\\":{\\\"id\\\":1,\\\"description\\\":\" + \"\\\"test\\\",\\\"protocolName\\\":\\\"Test\\\"}}\"; testUpdate(ProtocolList.class, \"protocolListDictionaryDatas\", \"protocolName\", () -> controller.saveProtocolListDictionary(request, response)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public T decompress(byte[] compressed) throws IOException { try (ByteArrayInputStream inputStream = new ByteArrayInputStream(compressed); BZip2CompressorInputStream bzip2Input = new BZip2CompressorInputStream(inputStream)) { return inputStreamConverter.readStream(bzip2Input); } }### Assistant: @Test public void shouldDecompressBZip2Stream() throws IOException { BZip2Decompressor<String> decompressor = new BZip2Decompressor<>( inputStream -> { BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)); String output = reader.readLine(); reader.close(); return output; }); String originalString = \"abc\"; ByteArrayOutputStream compressedStream = new ByteArrayOutputStream(); try (BZip2CompressorOutputStream bzip2Output = new BZip2CompressorOutputStream(compressedStream)) { bzip2Output.write(originalString.getBytes()); } String decompressedString = decompressor.decompress(compressedStream.toByteArray()); assertEquals(originalString, decompressedString); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ForeignKey addForeignKey( final UnitOfWork transaction, final String foreignKeyName, final Table referencedTable ) throws KException { return RelationalModelFactory.createForeignKey( transaction, getRepository(), this, foreignKeyName, referencedTable ); }### Assistant: @Test( expected = IllegalArgumentException.class ) public void shouldFailAddingNullForeignKeyName() throws Exception { this.table.addForeignKey( getTransaction(), null, mock( Table.class ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public List<BigInteger> listFlights() { ObjectFactory factory = new ObjectFactory(); TListFlights tListFlights = factory.createTListFlights(); JAXBElement<TListFlights> request = factory.createListFlightsRequest(tListFlights); JAXBElement<TFlightsResponse> response = (JAXBElement<TFlightsResponse>) webServiceTemplate.marshalSendAndReceive(request, new SoapActionCallback(\"http: return response.getValue().getFlightNumber(); }### Assistant: @Test public void testListFlights() { Source requestPayload = new StringSource(\"<ns3:listFlightsRequest xmlns:ns3=\\\"http: + \"</ns3:listFlightsRequest>\"); Source responsePayload = new StringSource(\"<v1:listFlightsResponse xmlns:v1=\\\"http: + \"<flightNumber>101</flightNumber>\" + \"</v1:listFlightsResponse>\"); mockWebServiceServer.expect(new SoapActionMatcher(\"http: .andExpect(payload(requestPayload)).andRespond(withPayload(responsePayload)); List<BigInteger> flights = ticketAgentClient.listFlights(); assertThat(flights.get(0)).isEqualTo(BigInteger.valueOf(101)); mockWebServiceServer.verify(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int hashCode() { return Objects.hash( username, getPasswordValue(), getAddress().get(), getNonProxyHostsValue(), httpHeaders.get(), getType(), connectTimeoutMillis); }### Assistant: @Test public void differentAuthHeaders() { assertNotEquals(createHeaderProxy(ADDRESS_1, HEADER_1), createHeaderProxy(ADDRESS_1, HEADER_2)); assertNotEquals(createHeaderProxy(ADDRESS_1, HEADER_1).hashCode(), createHeaderProxy(ADDRESS_1, HEADER_2).hashCode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static public boolean isInvalid(DataField dataField, Object value){ if(value == null){ return false; } return !isValid(dataField, value); }### Assistant: @Test public void isInvalid(){ assertFalse(ArgumentUtil.isInvalid(null, null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void dispatch(GenericContainerRequest request, GenericContainerResponse response) { ApplicationContext context = ApplicationContext.getCurrent(); String requestPath = getRequestPathWithoutMatrixParameters(context); List<String> parameterValues = context.getParameterValues(); ObjectFactory<ResourceDescriptor> resourceFactory = getRootResource(parameterValues, requestPath); if (resourceFactory == null) { LOG.debug(\"Root resource not found for {}\", requestPath); response.setResponse(Response.status(NOT_FOUND) .entity(String.format(\"There is no any resources matched to request path %s\", requestPath)) .type(TEXT_PLAIN) .build()); return; } String newRequestPath = getPathTail(parameterValues); context.addMatchedURI(requestPath.substring(0, requestPath.lastIndexOf(newRequestPath))); context.setParameterNames(resourceFactory.getObjectModel().getUriPattern().getParameterNames()); Object resource = resourceFactory.getInstance(context); dispatch(request, response, context, resourceFactory.getObjectModel(), resource, newRequestPath); }### Assistant: @Test public void returnsResponseWithStatus_NOT_ACCEPTABLE_WhenSubResourceMethodDoesNotProduceContentAcceptableByCaller() throws Exception { when(applicationContext.getPathSegments(false)).thenReturn(createPathSegments(\"a\", \"b\", \"c\", \"d;x=y\")); when(request.getAcceptMediaTypeList()).thenReturn(newArrayList(new AcceptMediaType(TEXT_PLAIN_TYPE))); Resource resource = new Resource(); SubResourceMethodDescriptor subResourceMethod = mockSubResourceMethod(Resource.class.getMethod(\"echo\", String.class), \"c/d\", \"POST\", newArrayList(WILDCARD_TYPE), newArrayList(TEXT_XML_TYPE, APPLICATION_XML_TYPE)); ObjectFactory resourceFactory = mockResourceFactory(resource, newArrayList(), newArrayList(subResourceMethod), newArrayList()); matchRequestPath(\"c/d\"); when(resources.getMatchedResource(eq(\"/a/b/c/d\"), anyList())).thenReturn(resourceFactory); requestDispatcher.dispatch(request, response); ArgumentCaptor<Response> argumentCaptor = ArgumentCaptor.forClass(Response.class); verify(response, atLeastOnce()).setResponse(argumentCaptor.capture()); assertEquals(NOT_ACCEPTABLE, argumentCaptor.getValue().getStatusInfo()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isActivated() { String color = System.getProperty(\"maven.color\"); if (color != null) { return Boolean.valueOf(color); } String activation = System.getProperty(\"style.color\"); if (\"always\".equals(activation)) { return true; } if (\"never\".equals(activation)) { return false; } Set<String> args = split(System.getenv(\"MAVEN_CMD_LINE_ARGS\")); return !isBatchMode(args) && !isLogFile(args) && !isDumbTerminal(); }### Assistant: @Test public void should_be_activated_when_arguments_could_have_been_misinterpreted_as_log_file_option() { env.set(\"MAVEN_CMD_LINE_ARGS\", \"dependency:tree -Dincludes=\\\"commons-logging\\\"\"); assertThat(ColorActivation.isActivated()).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String pathFor(ResourceMethod method) { String format = resolver.getAcceptFormat(); String suffix = \"\"; if (format != null && !format.equals(\"html\")) { suffix = '.' + format; } String name = method.getResource().getType().getSimpleName(); String folderName = extractControllerFromName(name); return getPrefix() + folderName + '/' + method.getMethod().getName() + suffix + '.' +getExtension(); }### Assistant: @Test public void shouldUseResourceTypeAndMethodNameToResolveJsp(){ when(formatResolver.getAcceptFormat()).thenReturn(null); String result = resolver.pathFor(method); assertThat(result, is(\"/WEB-INF/jsp/dog/bark.jsp\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Connection connectionFromJsonWithMigration(@Nonnull final JsonObject connectionJsonObject) { final UnaryOperator<JsonObject> migrateSourceFilters = new MigrateSourceFilters(); final UnaryOperator<JsonObject> migrateTopicActionSubjectFilters = new MigrateTopicActionSubjectFilters(); final UnaryOperator<JsonObject> migrateAuthorizationContexts = new MigrateAuthorizationContexts(); return ConnectivityModelFactory.connectionFromJson( migrateAuthorizationContexts .andThen(migrateSourceFilters) .andThen(migrateTopicActionSubjectFilters) .apply(connectionJsonObject)); }### Assistant: @Test public void migratePlaceholderTopicActionSubject() { final Connection migratedConnection = ConnectionMigrationUtil.connectionFromJsonWithMigration(KNOWN_CONNECTION_JSON); assertThat(migratedConnection.getSources().get(1).getHeaderMapping()).isPresent(); final HeaderMapping sourceHeaderMapping = migratedConnection.getSources().get(1).getHeaderMapping().get(); assertThat(sourceHeaderMapping.getMapping().get(\"source-action\")) .isEqualTo(\"source/{{ topic:action }}\"); assertThat(sourceHeaderMapping.getMapping().get(\"source-subject\")) .isEqualTo(\"source/{{topic:action-subject }}\"); assertThat(sourceHeaderMapping.getMapping().get(\"source-subject-next-gen\")) .isEqualTo(\"source/{{ topic:action-subject }}\"); assertThat(sourceHeaderMapping.getMapping().get(\"source-some-header\")) .isEqualTo(\"source/{{ topic:full | fn:substring-before('/') }}\"); assertThat(migratedConnection.getTargets().get(1).getHeaderMapping()).isPresent(); final HeaderMapping targetHeaderMapping = migratedConnection.getTargets().get(1).getHeaderMapping().get(); assertThat(targetHeaderMapping.getMapping().get(\"target-action\")) .isEqualTo(\"target/{{ topic:action }}\"); assertThat(targetHeaderMapping.getMapping().get(\"target-subject\")) .isEqualTo(\"target/{{topic:action-subject }}\"); assertThat(targetHeaderMapping.getMapping().get(\"target-subject-next-gen\")) .isEqualTo(\"target/{{ topic:action-subject }}\"); assertThat(targetHeaderMapping.getMapping().get(\"target-some-header\")) .isEqualTo(\"target/{{ topic:full | fn:substring-before('/') }}\"); assertThat(migratedConnection.getTargets().get(2).getAddress()) .isEqualTo(\"amqp/target3/{{topic:action-subject}}\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Tuple0OfNullables ofNullables() { return Tuple0OfNullablesImpl.EMPTY_TUPLE; }### Assistant: @Test void ofNullables5() { assertTuple(TuplesOfNullables.ofNullables(0, 1, 2, 3, 4), 5); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final RawLocationReference decodeData(final LocationReference lr) throws PhysicalFormatException { Object data = lr.getLocationReferenceData(); if (!(data instanceof OpenLR)) { throw new OpenLRXMLException(XMLErrorType.DATA_ERROR, \"incorrect data class\"); } OpenLR xmlData = (OpenLR) data; String id = xmlData.getLocationID(); XMLLocationReference xmlLoc = xmlData.getXMLLocationReference(); if (xmlLoc == null) { throw new OpenLRXMLException(XMLErrorType.BINARY_DATA_ONLY, \"cannot decode binary string using xml package\"); } LineLocationReference lineLoc = xmlLoc.getLineLocationReference(); PointLocationReference pointLoc = xmlLoc.getPointLocationReference(); AreaLocationReference areaLoc = xmlLoc.getAreaLocationReference(); if (lineLoc == null && pointLoc == null && areaLoc == null) { throw new OpenLRXMLException(XMLErrorType.DATA_ERROR, \"no location reference\"); } RawLocationReference rawLocRef = null; if (lineLoc != null) { LineDecoder decoder = new LineDecoder(); rawLocRef = decoder.decodeData(id, lineLoc); } else if (pointLoc != null) { GeoCoordinate gCoord = pointLoc.getGeoCoordinate(); PointAlongLine pal = pointLoc.getPointAlongLine(); PoiWithAccessPoint palwap = pointLoc.getPoiWithAccessPoint(); if (gCoord == null && pal == null && palwap == null) { throw new OpenLRXMLException(XMLErrorType.DATA_ERROR, \"no point location found\"); } if (gCoord != null) { GeoCoordDecoder decoder = new GeoCoordDecoder(); rawLocRef = decoder.decodeData(id, gCoord); } else if (pal != null) { PointAlongDecoder decoder = new PointAlongDecoder(); rawLocRef = decoder.decodeData(id, pal); } else if (palwap != null) { PoiAccessDecoder decoder = new PoiAccessDecoder(); rawLocRef = decoder.decodeData(id, palwap); } } else if (areaLoc != null) { CircleLocationReference circleLoc = areaLoc .getCircleLocationReference(); RectangleLocationReference rectangleLoc = areaLoc .getRectangleLocationReference(); GridLocationReference gridLoc = areaLoc.getGridLocationReference(); PolygonLocationReference polygonLoc = areaLoc .getPolygonLocationReference(); ClosedLineLocationReference closedLineLoc = areaLoc .getClosedLineLocationReference(); if (circleLoc == null && polygonLoc == null && rectangleLoc == null && gridLoc == null && closedLineLoc == null) { throw new OpenLRXMLException(XMLErrorType.DATA_ERROR, \"no area location found\"); } if (circleLoc != null) { CircleDecoder circleDecoder = new CircleDecoder(); rawLocRef = circleDecoder.decodeData(id, circleLoc); } else if (rectangleLoc != null) { RectangleDecoder rectangleDecoder = new RectangleDecoder(); rawLocRef = rectangleDecoder.decodeData(id, rectangleLoc); } else if (gridLoc != null) { GridDecoder gridDecoder = new GridDecoder(); rawLocRef = gridDecoder.decodeData(id, gridLoc); } else if (polygonLoc != null) { PolygonDecoder polygonDecoder = new PolygonDecoder(); rawLocRef = polygonDecoder.decodeData(id, polygonLoc); } else if (closedLineLoc != null) { ClosedLineDecoder closedLineDecoder = new ClosedLineDecoder(); rawLocRef = closedLineDecoder.decodeData(id, closedLineLoc); } } return rawLocRef; }### Assistant: @Test public final void testWrongDataClassDecoding() { OpenLR wpPaperLineLocation = Utils.readLocationFromFile( \"whitePointAlongLocation.xml\", true); try { new LineDecoder().decodeData(\"\", wpPaperLineLocation); fail(\"Exception expected!\"); } catch (PhysicalFormatException e) { assertSame(e.getErrorCode(), XMLErrorType.DATA_ERROR); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull @Override public Single<Receipt> postUpdate(@NonNull final Receipt oldReceipt, @Nullable final Receipt newReceipt) { return Single.fromCallable(() -> { if (newReceipt == null) { throw new Exception(\"Post update failed due to a null receipt\"); } if (oldReceipt.getFile() != null) { if (newReceipt.getFile() == null || !newReceipt.getFile().equals(oldReceipt.getFile())) { picasso.get().invalidate(oldReceipt.getFile()); storageManager.delete(oldReceipt.getFile()); } } return newReceipt; }); }### Assistant: @Test public void postUpdateSuccessWithSameFile() throws Exception { final Receipt updatedReceipt = mock(Receipt.class); final File file = new File(\"abc\"); when(receipt.getFile()).thenReturn(file); when(updatedReceipt.getFile()).thenReturn(file); receiptTableActionAlterations.postUpdate(receipt, updatedReceipt) .test() .assertValue(updatedReceipt) .assertComplete() .assertNoErrors(); verify(storageManager, never()).delete(file); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object other) { if (!(other instanceof ZObjectProperty)) { return false; } ZObjectProperty that = (ZObjectProperty) other; boolean equal = this.objectProperty.equals(that.objectProperty); if (this.objectPropertyType != null && that.objectPropertyType != null) { equal = equal && this.objectPropertyType.equals(that.objectPropertyType); } if (this.objectPropertyCardinality != null && that.objectPropertyCardinality != null) { equal = equal && this.objectPropertyCardinality.equals(that.objectPropertyCardinality); } equal = equal && (this.isOverridable() == that.isOverridable()); return equal; }### Assistant: @Test public void testEquals() throws NoSuchFieldException, IllegalAccessException { String iriStr = \"http: IRI iri = IRI.create(iriStr); ZObjectProperty zojectProperty1 = new ZObjectProperty(iri); ZObjectProperty zojectProperty2 = new ZObjectProperty(iri); zojectProperty1.setObjectPropertyCardinality(\"1\"); zojectProperty1.setObjectPropertyType(\"String\"); zojectProperty2.setObjectPropertyCardinality(\"2\"); zojectProperty2.setObjectPropertyType(\"String\"); boolean test = zojectProperty1.equals(zojectProperty2); assertFalse(test); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<MetricName, Metric> getMetrics() { final Map<MetricName, Metric> gauges = new HashMap<MetricName, Metric>(); gauges.put(MetricName.build(\"total.init\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getHeapMemoryUsage().getInit() + mxBean.getNonHeapMemoryUsage().getInit(); } }); gauges.put(MetricName.build(\"total.used\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getHeapMemoryUsage().getUsed() + mxBean.getNonHeapMemoryUsage().getUsed(); } }); gauges.put(MetricName.build(\"total.max\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getHeapMemoryUsage().getMax() + mxBean.getNonHeapMemoryUsage().getMax(); } }); gauges.put(MetricName.build(\"total.committed\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getHeapMemoryUsage().getCommitted() + mxBean.getNonHeapMemoryUsage().getCommitted(); } }); gauges.put(MetricName.build(\"heap.init\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getHeapMemoryUsage().getInit(); } }); gauges.put(MetricName.build(\"heap.used\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getHeapMemoryUsage().getUsed(); } }); gauges.put(MetricName.build(\"heap.max\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getHeapMemoryUsage().getMax(); } }); gauges.put(MetricName.build(\"heap.committed\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getHeapMemoryUsage().getCommitted(); } }); gauges.put(MetricName.build(\"heap.usage\"), new RatioGauge() { @Override protected Ratio getRatio() { final MemoryUsage usage = mxBean.getHeapMemoryUsage(); return Ratio.of(usage.getUsed(), usage.getMax() == -1 ? usage.getCommitted() : usage.getMax()); } }); gauges.put(MetricName.build(\"non_heap.init\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getNonHeapMemoryUsage().getInit(); } }); gauges.put(MetricName.build(\"non_heap.used\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getNonHeapMemoryUsage().getUsed(); } }); gauges.put(MetricName.build(\"non_heap.max\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getNonHeapMemoryUsage().getMax(); } }); gauges.put(MetricName.build(\"non_heap.committed\"), new PersistentGauge<Long>() { @Override public Long getValue() { return mxBean.getNonHeapMemoryUsage().getCommitted(); } }); gauges.put(MetricName.build(\"non_heap.usage\"), new RatioGauge() { @Override protected Ratio getRatio() { final MemoryUsage usage = mxBean.getNonHeapMemoryUsage(); return Ratio.of(usage.getUsed(), usage.getMax() == -1 ? usage.getCommitted() : usage.getMax()); } }); for (final MemoryPoolMXBean pool : memoryPools) { final MetricName poolName = MetricRegistry.name(\"pools\", WHITESPACE.matcher(pool.getName()).replaceAll(\"_\").toLowerCase()); gauges.put(poolName.resolve(\"usage\"), new RatioGauge() { @Override protected Ratio getRatio() { MemoryUsage usage = pool.getUsage(); return Ratio.of(usage.getUsed(), usage.getMax() == -1 ? usage.getCommitted() : usage.getMax()); } }); gauges.put(poolName.resolve(\"max\"),new PersistentGauge<Long>() { @Override public Long getValue() { return pool.getUsage().getMax(); } }); gauges.put(poolName.resolve(\"used\"),new PersistentGauge<Long>() { @Override public Long getValue() { return pool.getUsage().getUsed(); } }); gauges.put(poolName.resolve(\"committed\"),new PersistentGauge<Long>() { @Override public Long getValue() { return pool.getUsage().getCommitted(); } }); if (pool.getCollectionUsage() != null) { gauges.put(poolName.resolve(\"used_after_gc\"),new PersistentGauge<Long>() { @Override public Long getValue() { return pool.getCollectionUsage().getUsed(); } }); } gauges.put(poolName.resolve(\"init\"),new PersistentGauge<Long>() { @Override public Long getValue() { return pool.getUsage().getInit(); } }); } return Collections.unmodifiableMap(gauges); }### Assistant: @Test public void hasAGaugeForWeirdCollectionPoolUsed() throws Exception { final Gauge gauge = (Gauge) gauges.getMetrics().get(WEIRD_POOL.resolve(\"used_after_gc\")); assertThat(gauge.getValue()) .isEqualTo(290L); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int[][] getThresholdedPredictionMatrix(final double threshold) { int[][] predictionMatrix = new int[this.batch.size()][]; IntStream.range(0, this.batch.size()).forEach(x -> predictionMatrix[x] = this.batch.get(x).getPrediction(threshold)); return predictionMatrix; }### Assistant: @Test public void testGetLabelWiseThresholdedLabelRelevanceVector() { int[][] pred = classification.getThresholdedPredictionMatrix(THRESHOLD_VECTOR); assertEquals(\"Prediction vector and ground truth value vector are not of the same length\", EXPECTED_THRESHOLDED_VECTOR.length, pred.length); for (int i = 0; i < EXPECTED_THRESHOLDED_VECTOR.length; i++) { for (int j = 0; j < EXPECTED_THRESHOLDED_SINGLE[i].length; j++) { assertEquals(\"Prediction vector is not as expected for index \" + i + \":\" + j + \".\", EXPECTED_THRESHOLDED_VECTOR[i][j], pred[i][j], DOUBLE_DELTA); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isBeanDefinitionPresent(BeanDefinitionRegistry registry, String beanName, Class<?> targetBeanClass) { String[] beanNames = BeanUtils.getBeanNames((ListableBeanFactory) registry, targetBeanClass); return ArrayUtils.contains(beanNames, beanName); }### Assistant: @Test public void testIsBeanDefinitionPresent() { BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory; Assert.assertTrue(isBeanDefinitionPresent(registry, GLOBAL_NACOS_PROPERTIES_BEAN_NAME, Properties.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @PostMapping(path = \"/toggleDetector\") @ResponseStatus(HttpStatus.OK) public void toggleDetector(@RequestParam String uuid, @RequestParam Boolean enabled) { Assert.notNull(uuid, \"uuid can't be null\"); Assert.notNull(enabled, \"enabled can't be null\"); service.toggleDetector(uuid, enabled); }### Assistant: @Test public void testToggleDetector() { controllerUnderTest.toggleDetector(someUuid.toString(), true); verify(detectorService, times(1)).toggleDetector(someUuid.toString(), true); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void updateHost( ResourceHostInfo resourceHostInfo ) { WebClient webClient = null; Response response = null; try { webClient = getWebClient( resourceHostInfo.getAddress(), \"ping\" ); response = webClient.get(); if ( response.getStatus() == Response.Status.OK.getStatusCode() ) { if ( resourceHostInfo instanceof ResourceHost ) { try { getResourceHostInfoById( resourceHostInfo.getId() ); } catch ( HostDisconnectedException e ) { requestHeartbeat( resourceHostInfo ); } } else { updateResourceHostEntryTimestamp( resourceHostInfo.getId() ); } } } catch ( Exception e ) { LOG.error( \"Error checking host {}: {}\", resourceHostInfo, e.getMessage() ); } finally { RestUtil.close( response, webClient ); } }### Assistant: @Test public void testUpdateHost() throws Exception { WebClient webClient = mock( WebClient.class ); doReturn( webClient ).when( registry ).getWebClient( anyString(), anyString() ); Response response = mock( Response.class ); doReturn( response ).when( webClient ).get(); doReturn( Response.Status.OK.getStatusCode() ).when( response ).getStatus(); registry.updateHost( resourceHostInfo ); verify( registry ).updateResourceHostEntryTimestamp( HOST_ID ); ResourceHost resourceHost = mock( ResourceHost.class ); doReturn( HOST_ID ).when( resourceHost ).getId(); registry.updateHost( resourceHost ); verify( registry ).getResourceHostInfoById( HOST_ID ); doThrow( new HostDisconnectedException( null ) ).when( registry ).getResourceHostInfoById( HOST_ID ); registry.updateHost( resourceHost ); verify( registry ).requestHeartbeat( resourceHost ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Double convert(String value, Class<? extends Double> type, ResourceBundle bundle) { if (isNullOrEmpty(value)) { return 0d; } try { final Locale locale = localization.getLocale(); DecimalFormat fmt = (DecimalFormat) DecimalFormat.getInstance(locale); return fmt.parse(value).doubleValue(); } catch (ParseException e) { throw new ConversionError(MessageFormat.format(bundle.getString(\"is_not_a_valid_number\"), value)); } }### Assistant: @Test public void shouldThrowExceptionWhenUnableToParse() { when(request.getAttribute(\"javax.servlet.jsp.jstl.fmt.locale.request\")).thenReturn(\"pt_br\"); try { converter.convert(\"vr3.9\", double.class, bundle); fail(\"Should throw exception\"); } catch (ConversionError e) { assertThat(e.getMessage(), is(equalTo(\"vr3.9 is not a valid number.\"))); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static @PolyNull String normalizeLanguageCode(@PolyNull String language) { if (language == null) { return null; } String normalizedTag = language.replace('_', '-'); if (normalizedTag.isEmpty() || \"und\".equals(normalizedTag)) { normalizedTag = language; } normalizedTag = Util.toLowerInvariant(normalizedTag); String mainLanguage = Util.splitAtFirst(normalizedTag, \"-\")[0]; if (languageTagReplacementMap == null) { languageTagReplacementMap = createIsoLanguageReplacementMap(); } @Nullable String replacedLanguage = languageTagReplacementMap.get(mainLanguage); if (replacedLanguage != null) { normalizedTag = replacedLanguage + normalizedTag.substring( mainLanguage.length()); mainLanguage = replacedLanguage; } if (\"no\".equals(mainLanguage) || \"i\".equals(mainLanguage) || \"zh\".equals(mainLanguage)) { normalizedTag = maybeReplaceGrandfatheredLanguageTags(normalizedTag); } return normalizedTag; }### Assistant: @Test @Config(sdk = Config.ALL_SDKS) public void normalizeLanguageCode_keepsUndefinedTagsUnchanged() { assertThat(Util.normalizeLanguageCode(null)).isNull(); assertThat(Util.normalizeLanguageCode(\"\")).isEmpty(); assertThat(Util.normalizeLanguageCode(\"und\")).isEqualTo(\"und\"); assertThat(Util.normalizeLanguageCode(\"DoesNotExist\")).isEqualTo(\"doesnotexist\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public double distance(final double[] a, final double[] b) { double[] derivateA = this.derivate.transform(a); double[] derivateB = this.derivate.transform(b); return this.getA() * this.timeSeriesDistance.distance(a, b) + this.getB() * this.baseDerivateDistance.distance(derivateA, derivateB); }### Assistant: @Test public void testCorrectnessForDistanceCalculation2() { double[] timeSeries1 = { 1, 1, 2, 2, 3, 5 }; double[] timeSeries2 = { 1, 2, 3, 5, 5, 6 }; double alpha = 0.5; IDistanceMetric timeSeriesDistance = new DynamicTimeWarping(); IDistanceMetric derivateDistance = new EuclideanDistance(); double expectation = Math.cos(alpha) * 1 + Math.sin(alpha) * Math.sqrt(7); DerivateDistance dtd = new DerivateDistance(alpha, timeSeriesDistance, derivateDistance); double distance = dtd.distance(timeSeries1, timeSeries2); assertEquals(expectation, distance, 1.0E-5); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void tokenize( CharacterStream input, Tokens tokens ) throws ParsingException { while (input.hasNext()) { char c = input.next(); switch (c) { case ' ': case '\\t': case '\\n': case '\\r': break; case '[': case ']': case '<': case '>': case '=': case '-': case '+': case '(': case ')': case ',': tokens.addToken(input.position(input.index()), input.index(), input.index() + 1, SYMBOL); break; case '{': int startIndex = input.index(); Position startingPosition = input.position(startIndex); boolean foundClosingBrace = false; while (input.hasNext()) { c = input.next(); if (c == '\\\\' && input.isNext('}')) { c = input.next(); } else if (c == '}') { foundClosingBrace = true; break; } } if (!foundClosingBrace) { String msg = CndI18n.vendorBlockWasNotClosed.text(startingPosition.getLine(), startingPosition.getColumn()); throw new ParsingException(startingPosition, msg); } int endIndex = input.index() + 1; if (useVendorExtensions) { tokens.addToken(startingPosition, startIndex, endIndex, VENDOR_EXTENSION); } break; case '\\\"': startIndex = input.index(); startingPosition = input.position(startIndex); boolean foundClosingQuote = false; while (input.hasNext()) { c = input.next(); if (c == '\\\\' && input.isNext('\"')) { c = input.next(); } else if (c == '\"') { foundClosingQuote = true; break; } } if (!foundClosingQuote) { String msg = CommonI18n.noMatchingDoubleQuoteFound.text(startingPosition.getLine(), startingPosition.getColumn()); throw new ParsingException(startingPosition, msg); } endIndex = input.index() + 1; tokens.addToken(startingPosition, startIndex, endIndex, DOUBLE_QUOTED_STRING); break; case '\\'': startIndex = input.index(); startingPosition = input.position(startIndex); foundClosingQuote = false; while (input.hasNext()) { c = input.next(); if (c == '\\\\' && input.isNext('\\'')) { c = input.next(); } else if (c == '\\'') { foundClosingQuote = true; break; } } if (!foundClosingQuote) { String msg = CommonI18n.noMatchingSingleQuoteFound.text(startingPosition.getLine(), startingPosition.getColumn()); throw new ParsingException(startingPosition, msg); } endIndex = input.index() + 1; tokens.addToken(startingPosition, startIndex, endIndex, SINGLE_QUOTED_STRING); break; case '/': startIndex = input.index(); startingPosition = input.position(startIndex); if (input.isNext('/')) { boolean foundLineTerminator = false; while (input.hasNext()) { c = input.next(); if (c == '\\n' || c == '\\r') { foundLineTerminator = true; break; } } endIndex = input.index(); if (!foundLineTerminator) ++endIndex; if (c == '\\r' && input.isNext('\\n')) input.next(); if (useComments) { tokens.addToken(startingPosition, startIndex, endIndex, COMMENT); } } else if (input.isNext('*')) { while (input.hasNext() && !input.isNext('*', '/')) { c = input.next(); } if (input.hasNext()) input.next(); if (input.hasNext()) input.next(); if (useComments) { endIndex = input.index() + 1; tokens.addToken(startingPosition, startIndex, endIndex, COMMENT); } } else { continue; } break; default: startIndex = input.index(); startingPosition = input.position(startIndex); while (input.hasNext() && !(input.isNextWhitespace() || input.isNextAnyOf(\"[]<>=-+(),\\\"'/{*|\"))) { c = input.next(); } endIndex = input.index() + 1; tokens.addToken(startingPosition, startIndex, endIndex, WORD); } } }### Assistant: @Test( expected = ParsingException.class ) public void shouldCreateTokenForDoubleQuotedStringWithoutClosingQuote() { String content = \"--\\\"this is a double-quoted \\n string\"; tokenize(content); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public Optional<T11> get11() { return Optional.ofNullable((T11) values[11]); }### Assistant: @Test void get11Test() { assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> BatchJob<T> startJob(BatchProcessor<T> task, T batchSizes, Duration startDelay, Duration interBatchDelay) { BatchJob<T> job = new BatchJob<>(task, batchSizes, interBatchDelay); job.scheduleNextBatch(startDelay); return job; }### Assistant: @Test public void testExceptionsDontPreventFutureBatches() { ScheduledFuture<?> future = Mockito.mock(ScheduledFuture.class); AtomicReference<Runnable> runnableToInvoke = new AtomicReference<>(); when(scheduledExecutor.schedule(isA(Runnable.class), anyLong(), any())).then((invoc) -> { runnableToInvoke.set(((Runnable) invoc.getArgument(0))); return future; }); Duration delay = Duration.ofMillis(10); AtomicLong counter = new AtomicLong(); batchExecutor.startJob((batchSize) -> { switch ((int) counter.incrementAndGet()) { case 3: return true; default: throw new Error(); } }, 42, delay, delay); verify(scheduledExecutor, times(1)).schedule(isA(Runnable.class), eq(delay.toNanos()), eq(TimeUnit.NANOSECONDS)); runnableToInvoke.get().run(); verify(scheduledExecutor, times(2)).schedule(isA(Runnable.class), eq(delay.toNanos()), eq(TimeUnit.NANOSECONDS)); runnableToInvoke.get().run(); verify(scheduledExecutor, times(3)).schedule(isA(Runnable.class), eq(delay.toNanos()), eq(TimeUnit.NANOSECONDS)); runnableToInvoke.get().run(); verify(scheduledExecutor, times(3)).schedule(isA(Runnable.class), eq(delay.toNanos()), eq(TimeUnit.NANOSECONDS)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static byte[] numberToBytes(String number, int length, boolean bigEndian) { BigInteger bi = new BigInteger(number); byte[] bytes = bi.toByteArray(); int remaining = length - bytes.length; if (remaining < 0) { bytes = Arrays.copyOfRange(bytes, -remaining, bytes.length); } else { byte[] fill = new byte[remaining]; bytes = addAll(fill, bytes); } if (!bigEndian) { reverse(bytes); } return bytes; }### Assistant: @Test public void testLargeNumberToBytesLittleEndian() throws Exception { byte[] result = LdapUtils.numberToBytes(\"2127521184\", 4, false); assertThat(result.length).isEqualTo(4); assertThat(result[0]).isEqualTo((byte)-96); assertThat(result[1]).isEqualTo((byte)101); assertThat(result[2]).isEqualTo((byte)-49); assertThat(result[3]).isEqualTo((byte)126); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static HandshakeResponse loadFromPacket(byte[] packet) { HandshakeResponse obj = new HandshakeResponse(); Proto proto = new Proto(packet, 3); obj.sequenceId = proto.get_fixed_int(1); obj.capabilityFlags = proto.get_fixed_int(2); proto.offset -= 2; if (obj.hasCapabilityFlag(Flags.CLIENT_PROTOCOL_41)) { obj.capabilityFlags = proto.get_fixed_int(4); obj.maxPacketSize = proto.get_fixed_int(4); obj.characterSet = proto.get_fixed_int(1); proto.get_filler(23); obj.username = proto.get_null_str(); if (obj.hasCapabilityFlag(Flags.CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA)) { obj.authResponseLen = proto.get_lenenc_int(); obj.authResponse = proto.get_fixed_str(obj.authResponseLen, true); } else { if (obj.hasCapabilityFlag(Flags.CLIENT_SECURE_CONNECTION)) { obj.authResponseLen = proto.get_fixed_int(1); obj.authResponse = proto.get_fixed_str(obj.authResponseLen, true); } else { obj.authResponse = proto.get_null_str(); } } if (obj.hasCapabilityFlag(Flags.CLIENT_CONNECT_WITH_DB)) obj.schema = proto.get_null_str(); if (obj.hasCapabilityFlag(Flags.CLIENT_PLUGIN_AUTH)) obj.pluginName = proto.get_null_str(); if (obj.hasCapabilityFlag(Flags.CLIENT_CONNECT_ATTRS)) { obj.clientAttributesLen = proto.get_lenenc_int(); obj.clientAttributes = proto.get_eop_str(); } } else { obj.capabilityFlags = proto.get_fixed_int(2); obj.maxPacketSize = proto.get_fixed_int(3); obj.username = proto.get_null_str(); if (obj.hasCapabilityFlag(Flags.CLIENT_CONNECT_WITH_DB)) { obj.authResponse = proto.get_null_str(); obj.schema = proto.get_null_str(); } else obj.authResponse = proto.get_eop_str(); } return obj; }### Assistant: @Test public void test_5_6_6() { byte[] packet = new byte[] { (byte)0xb2, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x85, (byte)0xa2, (byte)0x1e, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x40, (byte)0x08, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x72, (byte)0x6f, (byte)0x6f, (byte)0x74, (byte)0x00, (byte)0x14, (byte)0x22, (byte)0x50, (byte)0x79, (byte)0xa2, (byte)0x12, (byte)0xd4, (byte)0xe8, (byte)0x82, (byte)0xe5, (byte)0xb3, (byte)0xf4, (byte)0x1a, (byte)0x97, (byte)0x75, (byte)0x6b, (byte)0xc8, (byte)0xbe, (byte)0xdb, (byte)0x9f, (byte)0x80, (byte)0x6d, (byte)0x79, (byte)0x73, (byte)0x71, (byte)0x6c, (byte)0x5f, (byte)0x6e, (byte)0x61, (byte)0x74, (byte)0x69, (byte)0x76, (byte)0x65, (byte)0x5f, (byte)0x70, (byte)0x61, (byte)0x73, (byte)0x73, (byte)0x77, (byte)0x6f, (byte)0x72, (byte)0x64, (byte)0x00, (byte)0x61, (byte)0x03, (byte)0x5f, (byte)0x6f, (byte)0x73, (byte)0x09, (byte)0x64, (byte)0x65, (byte)0x62, (byte)0x69, (byte)0x61, (byte)0x6e, (byte)0x36, (byte)0x2e, (byte)0x30, (byte)0x0c, (byte)0x5f, (byte)0x63, (byte)0x6c, (byte)0x69, (byte)0x65, (byte)0x6e, (byte)0x74, (byte)0x5f, (byte)0x6e, (byte)0x61, (byte)0x6d, (byte)0x65, (byte)0x08, (byte)0x6c, (byte)0x69, (byte)0x62, (byte)0x6d, (byte)0x79, (byte)0x73, (byte)0x71, (byte)0x6c, (byte)0x04, (byte)0x5f, (byte)0x70, (byte)0x69, (byte)0x64, (byte)0x05, (byte)0x32, (byte)0x32, (byte)0x33, (byte)0x34, (byte)0x34, (byte)0x0f, (byte)0x5f, (byte)0x63, (byte)0x6c, (byte)0x69, (byte)0x65, (byte)0x6e, (byte)0x74, (byte)0x5f, (byte)0x76, (byte)0x65, (byte)0x72, (byte)0x73, (byte)0x69, (byte)0x6f, (byte)0x6e, (byte)0x08, (byte)0x35, (byte)0x2e, (byte)0x36, (byte)0x2e, (byte)0x36, (byte)0x2d, (byte)0x6d, (byte)0x39, (byte)0x09, (byte)0x5f, (byte)0x70, (byte)0x6c, (byte)0x61, (byte)0x74, (byte)0x66, (byte)0x6f, (byte)0x72, (byte)0x6d, (byte)0x06, (byte)0x78, (byte)0x38, (byte)0x36, (byte)0x5f, (byte)0x36, (byte)0x34, (byte)0x03, (byte)0x66, (byte)0x6f, (byte)0x6f, (byte)0x03, (byte)0x62, (byte)0x61, (byte)0x72 }; assertArrayEquals(packet, HandshakeResponse.loadFromPacket(packet).toPacket()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected Locale getLocale( HttpServletRequest httpServletRequest, DDMForm ddmForm) { Locale locale = LocaleUtil.fromLanguageId( LanguageUtil.getLanguageId(httpServletRequest)); if (ddmForm == null) { return locale; } Set<Locale> availableLocales = ddmForm.getAvailableLocales(); if (availableLocales.contains(locale)) { return locale; } return ddmForm.getDefaultLocale(); }### Assistant: @Test public void testGetLocaleFromRequestWhenDDMFormIsNull() { Locale locale = _ddmFormRendererTag.getLocale( _httpServletRequest, null); Assert.assertEquals(LocaleUtil.US, locale); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SOAPElement build(Map inputMap) throws WSDLException, ParserConfigurationException, SOAPException, IOException, SAXException, UnknownOperationException { SOAPElement body = super.build(inputMap); if (getStyle() == Style.DOCUMENT) { fixTypeAttributes(body); } return body; }### Assistant: @Test public void testQualifiedUnwrapped() throws Exception { BodyBuilder builder = createBuilder(wsdlResourcePath(\"TestServices-unwrapped.wsdl\"), \"countString\"); assertTrue(\"Is is the wrong type, it should be LiteralBodyBuilder\",builder instanceof LiteralBodyBuilder); Map<String,Object>inputMap = new HashMap<String, Object>(); inputMap.put(\"str\", \"bob\"); SOAPElement body = builder.build(inputMap); assertEquals(\"Wrong localName\",\"str\", body.getLocalName()); assertEquals(\"XML should containe qualifed namespace for str\",\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void setNullable( final UnitOfWork uow, final Nullable newNullable ) throws KException { setObjectProperty( uow, \"setNullable\", StandardDdlLexicon.NULLABLE, ( newNullable == null ) ? Nullable.DEFAULT_VALUE.toValue() : newNullable.toValue() ); }### Assistant: @Test public void shouldAllowNullNullable() throws Exception { this.parameter.setNullable( getTransaction(), null ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void init(ExecutionContext context) { super.init(context); functionExecutionService = context.get(FunctionExecutionService.class); functionAccessor = context.get(FunctionAccessor.class); functionRouter = context.get(FunctionRouter.class); reportNodeAttachmentManager = new ReportNodeAttachmentManager(context); dynamicJsonObjectResolver = new DynamicJsonObjectResolver(new DynamicJsonValueResolver(context.getExpressionHandler())); this.selectorHelper = new SelectorHelper(dynamicJsonObjectResolver); this.functionLocator = new FunctionLocator(functionAccessor, selectorHelper, context); }### Assistant: @Test public void testSimulation() { ExecutionContext executionContext = buildExecutionContext(); executionContext.getExecutionParameters().setMode(ExecutionMode.SIMULATION); Function function = newFunction(FUNCTION_ID_SUCCESS); ((InMemoryFunctionAccessorImpl)executionContext.get(FunctionAccessor.class)).save(function); CallFunctionHandler handler = new CallFunctionHandler(); handler.init(executionContext); CallFunction callFunction = new CallFunction(); callFunction.setFunctionId(function.getId().toString()); CallFunctionReportNode node = (CallFunctionReportNode) execute(callFunction); Assert.assertEquals(ReportNodeStatus.PASSED, node.getStatus()); Assert.assertEquals(\"{}\", node.getOutput()); Assert.assertNull(node.getError()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String generateEmail(Notification notification) { Assert.notNull(notification); return notification.getDetails(); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testGenerateEmail_Throws_Exception_Given_Null_Notification(){ NotificationEmailGenerator sut = new NotificationEmailGenerator(); sut.generateEmail(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void classify(Data data, double[][] predictions) { Preconditions.checkArgument(data.size() == predictions.length, \"predictions.length must be equal to data.size()\"); if (data.isEmpty()) { return; } int treeId = 0; for (Node tree : trees) { for (int index = 0; index < data.size(); index++) { if (predictions[index] == null) { predictions[index] = new double[trees.size()]; } predictions[index][treeId] = tree.classify(data.get(index)); } treeId++; } }### Assistant: @Test public void testClassifyData() throws DescriptorException { Data[] datas = generateTrainingDataA(); DecisionForest forest = buildForest(datas); Dataset dataset = datas[0].getDataset(); Data testData = DataLoader.loadData(dataset, TEST_DATA); double[][] predictions = new double[testData.size()][]; forest.classify(testData, predictions); double noValue = dataset.valueOf(4, \"no\"); double yesValue = dataset.valueOf(4, \"yes\"); assertArrayEquals(new double[][]{{noValue, Double.NaN, Double.NaN}, {noValue, yesValue, Double.NaN}, {noValue, noValue, Double.NaN}}, predictions); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private static void populateFirstClassEntities(Map<String, String> eventDescription){ CallContext context = CallContext.current(); Map<Object, Object> contextMap = context.getContextParameters(); for(Map.Entry<Object, Object> entry : contextMap.entrySet()){ try{ Class<?> clz = (Class<?>)entry.getKey(); if(clz != null && Identity.class.isAssignableFrom(clz)){ String uuid = getEntityUuid(clz, entry.getValue()); eventDescription.put(ReflectUtil.getEntityName(clz), uuid); } } catch (Exception e){ s_logger.trace(\"Caught exception while populating first class entities for event bus, moving on\"); } } }### Assistant: @Test public void testPopulateFirstClassEntities() { AccountVO account = new AccountVO(\"testaccount\", 1L, \"networkdomain\", (short) 0, \"uuid\"); account.setId(ACCOUNT_ID); UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN); Mockito.when(accountDao.findById(ACCOUNT_ID)).thenReturn(account); Mockito.when(userDao.findById(USER_ID)).thenReturn(user); CallContext.register(user, account); String instanceUuid = UUID.randomUUID().toString(); String ipUuid = UUID.randomUUID().toString(); CallContext.current().putContextParameter(VirtualMachine.class, instanceUuid); CallContext.current().putContextParameter(IpAddress.class, ipUuid); ActionEventUtils.onActionEvent(USER_ID, ACCOUNT_ID, account.getDomainId(), \"StaticNat\", \"Test event\"); Assert.assertNotEquals(publishedEvents.size(), 0); Assert.assertEquals(publishedEvents.size(), 1); Event event = publishedEvents.get(0); Assert.assertNotNull(event.getDescription()); JsonObject json = new JsonParser().parse(event.getDescription()).getAsJsonObject(); Assert.assertTrue(json.has(\"VirtualMachine\")); Assert.assertTrue(json.has(\"IpAddress\")); Assert.assertEquals(json.get(\"VirtualMachine\").getAsString(), instanceUuid); Assert.assertEquals(json.get(\"IpAddress\").getAsString(), ipUuid); CallContext.unregister(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ECKey generateECKey(SecureRandom secureRandom) { ECKeyPairGenerator generator = new ECKeyPairGenerator(); ECKeyGenerationParameters keygenParams = new ECKeyGenerationParameters(CURVE, secureRandom); generator.init(keygenParams); AsymmetricCipherKeyPair keypair = generator.generateKeyPair(); ECPrivateKeyParameters privParams = (ECPrivateKeyParameters) keypair.getPrivate(); ECPublicKeyParameters pubParams = (ECPublicKeyParameters) keypair.getPublic(); BigInteger priv = privParams.getD(); boolean compressed = true; ECKey ecKey = new ECKey(priv, pubParams.getQ().getEncoded(compressed)); ecKey.setCreationTimeSeconds(Utils.currentTimeSeconds()); return ecKey; }### Assistant: @Test public void testGenerateECKeyWithRandom() { ECKey.generateECKey(new TestRandom()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static SampleIdentifier createProbandIdentifier(String probandSampleName, List<String> sampleNames) { logger.debug(\"Creating sample identifier for proband '{}'\", probandSampleName); int numSamples = sampleNames.size(); if (probandSampleName.isEmpty() && numSamples > 1) { String message = String.format(\"Proband sample name not specified. Expected single sample VCF but got %d sample names - %s. Please check your sample and analysis files match.\", numSamples, sampleNames); logger.error(message); throw new SampleMismatchException(message); } if (probandSampleName.isEmpty() && numSamples == 1) { String vcfSampleName = sampleNames.get(0); logger.info(\"Proband sample name not specified - using sample name '{}' from VCF\", vcfSampleName); return SampleIdentifier.of(vcfSampleName, 0); } if (probandSampleName.isEmpty() && numSamples == 0) { SampleIdentifier defaultSampleIdentifier = SampleIdentifier.defaultSample(); logger.info(\"Proband sample name not specified and none found in sample names - using default sample name '{}'\", defaultSampleIdentifier .getId()); return defaultSampleIdentifier; } return getMultiSampleProbandSampleIdentifier(probandSampleName, sampleNames); }### Assistant: @Test public void testGetProbandSampleIdWithEmptyProbandNameAndEmptySampleNames() { SampleIdentifier sampleId = SampleIdentifierUtil.createProbandIdentifier(\"\", Collections.emptyList()); assertThat(sampleId, equalTo(SampleIdentifier.defaultSample())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Map<Wire, SpecificValue> signals() { Circuit that = this; return circuit.stream() .collect(toMap(Instruction::getWire, i -> i.getSignalCarrier().resolve(that).get())); }### Assistant: @Test public void should_read_two_instructions() { Circuit circuit = new Circuit( \"123 -> x\\n\" + \"456 -> y\"); Map<Wire, SpecificValue> signals = circuit.signals(); assertThat(signals).containsExactly( entry(new Wire(\"x\"), new SpecificValue(123)), entry(new Wire(\"y\"), new SpecificValue(456))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getContent() throws IOException { int contentLength = httpURLConnection.getContentLength(); if (contentLength == 0) { return \"\"; } if (Strings.isNullOrEmpty(content)) { content = CharStreams.toString(new InputStreamReader(getInputStream())); } return content; }### Assistant: @Test public void getContentReturnsErrorMessageWhenHttpURLConnectionReturnsErrorStream() throws Exception { String expected = \"Hello, World! This is error message.\"; byte[] actual = expected.getBytes(); HttpURLConnection connection = mock(HttpURLConnection.class); when(connection.getContentLength()).thenReturn(actual.length); when(connection.getErrorStream()).thenReturn(new ByteArrayInputStream(actual)); HttpResponse httpResponse = new HttpResponse(connection); assertThat(httpResponse.getContent(), is(expected)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void checkHandlerMethodIsValid(final Method handlerMethod, final Object instance) { checkMethodPublic(handlerMethod, instance); checkMethodParameter(handlerMethod, instance); }### Assistant: @Test public void shouldFailIfMethodHasNoParameters() throws Exception { final TestCommandHandler testCommandHandler = new TestCommandHandler(); final Method invalidMissingParameterHandlerMethod = getMethod(\"invalidMissingParameterHandlerMethod\", testCommandHandler.getClass()); try { handlerMethodValidator.checkHandlerMethodIsValid(invalidMissingParameterHandlerMethod, testCommandHandler); fail(); } catch (final InvalidHandlerMethodException expected) { assertThat(expected.getMessage(), is(\"Invalid handler method 'invalidMissingParameterHandlerMethod' on class 'uk.gov.justice.services.jmx.command.TestCommandHandler'. Method should have 2 parameters. First of type 'uk.gov.justice.services.jmx.api.command.SystemCommand' and second of type 'java.util.UUID'.\")); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Collection<Partition<T>> definePartitions(Collection<Partition<T>> partitions, PartitioningContext context) { final int newPartitionCount = DefaultPartition.getRequiredPartitionCount(context, this.partitionCount); logger.debug(\"define partitions, partitionCount current {} requested {}\", partitions.size(), newPartitionCount); DefaultPartition<T> partition = (DefaultPartition<T>)partitions.iterator().next(); Collection<Partition<T>> newPartitions; if (partitions.iterator().next().getStats() == null) { newPartitions = Lists.newArrayList(); for (int partitionCounter = 0; partitionCounter < newPartitionCount; partitionCounter++) { newPartitions.add(new DefaultPartition<>(partition.getPartitionedInstance())); } List<InputPort<?>> inputPortList = context.getInputPorts(); if (inputPortList != null && !inputPortList.isEmpty()) { DefaultPartition.assignPartitionKeys(newPartitions, inputPortList.iterator().next()); } } else { if (context.getParallelPartitionCount() != 0) { newPartitions = repartitionParallel(partitions, context); } else if (partition.getPartitionKeys().isEmpty()) { newPartitions = repartitionInputOperator(partitions); } else { newPartitions = repartition(partitions); } } logger.debug(\"new partition size {}\", newPartitions.size()); return newPartitions; }### Assistant: @Test public void testParallelPartitionScaleDown() { DummyOperator dummyOperator = new DummyOperator(5); StatelessPartitioner<DummyOperator> statelessPartitioner = new StatelessPartitioner<>(); Collection<Partition<DummyOperator>> partitions = Lists.newArrayList(); for (int i = 5; i-- > 0; ) { partitions.add(new DefaultPartition<>(dummyOperator)); } Collection<Partition<DummyOperator>> newPartitions = statelessPartitioner.definePartitions(partitions, new PartitioningContextImpl(null, 1)); Assert.assertEquals(\"after partition\", 1, newPartitions.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String formatSegment(final Segment segment) { int errorRate = segment.isError() ? 1 : 0; int faultRate = segment.isFault() ? 1 : 0; int throttleRate = segment.isThrottle() ? 1 : 0; int okRate = (errorRate + faultRate + throttleRate) > 0 ? 0 : 1; double duration = (segment.getEndTime() - segment.getStartTime()) * 1000; long endTimeMillis = (long) (segment.getEndTime() * 1000); String json = String.format(EMF_FORMAT, endTimeMillis, duration, errorRate, faultRate, throttleRate, okRate, segment.getTraceId().toString(), segment.getOrigin(), segment.getName()); if (logger.isDebugEnabled()) { logger.debug(\"Formatted segment \" + segment.getName() + \" as EMF: \" + json); } return json; }### Assistant: @Test void jsonContainsNoNewlines() { String json = formatter.formatSegment(testSegment); Assertions.assertFalse(json.contains(\"\\n\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getAssetAsAddress() { return asset.toAddress(); }### Assistant: @Test public void getAssetAsAddress() { assertThat(new NeoURI(neow3j) .asset(\"b1e8f1ce80c81dc125e7d0e75e5ce3f7f4d4d36c\") .getAssetAsAddress(), is(\"ARhJPYxmizqheBQA2dSQAHWfQQsbTSba2S\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(method = RequestMethod.GET) public @ResponseBody EhrNumOneDto get() { EhrNumOneDto dto = new EhrNumOneDto(); return dto; }### Assistant: @Test public void testGet() { String c32XmlMock = \"c32XmlMock\"; String patientIdMock = \"patientIdMock\"; when(c32GetterMock.getC32(patientIdMock)).thenReturn(c32XmlMock); String actualRet = sut.getC32(patientIdMock); assertEquals(c32XmlMock, actualRet); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull @Override public ContentValues write(@NonNull Distance distance, @NonNull DatabaseOperationMetadata databaseOperationMetadata) { final ContentValues values = new ContentValues(); values.put(DistanceTable.COLUMN_PARENT_TRIP_ID, distance.getTrip().getId()); values.put(DistanceTable.COLUMN_LOCATION, distance.getLocation().trim()); values.put(DistanceTable.COLUMN_DISTANCE, distance.getDistance().doubleValue()); values.put(DistanceTable.COLUMN_TIMEZONE, distance.getTimeZone().getID()); values.put(DistanceTable.COLUMN_DATE, distance.getDate().getTime()); values.put(DistanceTable.COLUMN_RATE, distance.getRate().doubleValue()); values.put(DistanceTable.COLUMN_RATE_CURRENCY, distance.getPrice().getCurrencyCode()); values.put(DistanceTable.COLUMN_COMMENT, distance.getComment().trim()); values.put(DistanceTable.COLUMN_UUID, distance.getUuid().toString()); values.put(DistanceTable.COLUMN_PAYMENT_METHOD_ID, distance.getPaymentMethod().getId()); values.put(DistanceTable.COLUMN_LOCATION_HIDDEN_AUTO_COMPLETE, distance.getAutoCompleteMetadata().isLocationHiddenFromAutoComplete()); values.put(DistanceTable.COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE, distance.getAutoCompleteMetadata().isCommentHiddenFromAutoComplete()); if (databaseOperationMetadata.getOperationFamilyType() == OperationFamilyType.Sync) { values.putAll(mSyncStateAdapter.write(distance.getSyncState())); } else { values.putAll(mSyncStateAdapter.writeUnsynced(distance.getSyncState())); } return values; }### Assistant: @Test public void write() throws Exception { final String sync = \"sync\"; final ContentValues syncValues = new ContentValues(); syncValues.put(sync, sync); when(mSyncStateAdapter.write(mSyncState)).thenReturn(syncValues); final ContentValues contentValues = mDistanceDatabaseAdapter.write(mDistance, new DatabaseOperationMetadata(OperationFamilyType.Sync)); assertTrue(PARENT_ID == contentValues.getAsInteger(DistanceTable.COLUMN_PARENT_TRIP_ID)); assertEquals(DISTANCE, contentValues.getAsDouble(DistanceTable.COLUMN_DISTANCE), 0.0001d); assertEquals(LOCATION, contentValues.getAsString(DistanceTable.COLUMN_LOCATION)); assertEquals(DATE, (long) contentValues.getAsLong(DistanceTable.COLUMN_DATE)); assertEquals(TIMEZONE, contentValues.getAsString(DistanceTable.COLUMN_TIMEZONE)); assertEquals(COMMENT, contentValues.getAsString(DistanceTable.COLUMN_COMMENT)); assertEquals(RATE, contentValues.getAsDouble(DistanceTable.COLUMN_RATE), 0.0001d); assertEquals(CURRENCY_CODE, contentValues.getAsString(DistanceTable.COLUMN_RATE_CURRENCY)); assertEquals(DIST_UUID.toString(), contentValues.getAsString(DistanceTable.COLUMN_UUID)); assertEquals(sync, contentValues.getAsString(sync)); assertEquals(PAYMENT_METHOD_ID, (int) contentValues.getAsInteger(DistanceTable.COLUMN_PAYMENT_METHOD_ID)); assertEquals(LOCATION_HIDDEN_FROM_AUTO_COMPLETE, contentValues.getAsBoolean(DistanceTable.COLUMN_LOCATION_HIDDEN_AUTO_COMPLETE)); assertEquals(COMMENT_HIDDEN_FROM_AUTO_COMPLETE, contentValues.getAsBoolean(DistanceTable.COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE)); assertFalse(contentValues.containsKey(DistanceTable.COLUMN_ID)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void write(OutputStream out) throws IOException { writeContentDisposition(out); writeName(out); writeExtraHeaderIfNotNull(out); writeCRLF(out); writeContentTypeIfNotNull(out); writeCRLF(out); writeContent(out); writeCRLF(out); }### Assistant: @Test public void shouldCloseInputStream() throws IOException { final TestInputStream in = new TestInputStream(); AbstractPart mock = createPartWithInputStream(name, in); OutputStream out = mock(OutputStream.class); Part part = new TestPart(name, mock); part.write(out); assertThat(in.isClosed(), is(Boolean.TRUE)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static IHmsTask getTask( TaskType taskType, HmsNode node ) { IHmsTask task = null; switch ( taskType ) { default: return task; } }### Assistant: @Test public void testGetTask_PowerStatusSwitch_TaskResponse() { logger.info(\"[TS] : testGetTask_ValidateServerOS_TaskResponse\"); TaskType taskType = TaskType.PowerStatusSwitch; TaskResponse TR = new TaskResponse(new ServerNode(\"2\",\"10.28.197.202\",\"ADMIN\",\"ADMIN\")); IHmsTask result = TaskFactory.getTask(taskType, TR); logger.info(\"[TS] : Expected Result : Not Null , Actual Result : \"+result); assertNull(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void rule(RuleType rule) { String id = \"-\"; if (rule.getRuleId() != null) { id = extractLastIdentifier(rule.getRuleId(), \":\"); } htmlOut.println(\"<li><b>Rule ID</b>: <i>\" + id + \"</i></li>\"); htmlOut.println(\"<dl>\"); htmlOut.print(\"<p>\"); htmlOut.print(rule.getEffect().value()); if (rule.getTarget() == null || rule.getTarget().getAnyOf() == null || rule.getTarget().getAnyOf().isEmpty()) { htmlOut.print(\" for all requests\"); } else { htmlOut.print(\" for requests with attributes \"); target(rule.getTarget().getAnyOf()); } if (rule.getCondition() != null) { htmlOut.print(\" when \"); htmlOut.println(this.stringifyCondition(rule.getCondition()) + \" \"); } else { htmlOut.print(\" with no conditions \"); } if (rule.getAdviceExpressions() != null) { advice(rule.getAdviceExpressions()); if (rule.getObligationExpressions() != null) { htmlOut.println(\" and \"); } } if (rule.getObligationExpressions() != null) { obligation(rule.getObligationExpressions()); } htmlOut.println(\"</p>\"); }### Assistant: @Test public void testHtmlProcessorRuleNonNullObjects() { PolicySetType mockPolicySetType = Mockito.mock(PolicySetType.class); RuleType mockRuleType = Mockito.mock(RuleType.class); TargetType mockTargetType = Mockito.mock(TargetType.class); AdviceExpressionsType mockAdvice = Mockito.mock(AdviceExpressionsType.class); ObligationExpressionsType mockObEx = Mockito.mock(ObligationExpressionsType.class); AdviceExpressionType adviceExpTypeMock = Mockito.mock(AdviceExpressionType.class); ObligationExpressionType mockObExType = Mockito.mock(ObligationExpressionType.class); EffectType effectTypePermit = EffectType.PERMIT; processor = new HtmlProcessor(temp, mockPolicySetType); List<AnyOfType> anyOfList = new ArrayList<AnyOfType>(); anyOfList.add(new AnyOfType()); List<AdviceExpressionType> adviceList = new ArrayList<AdviceExpressionType>(); adviceList.add(adviceExpTypeMock); List<AttributeAssignmentExpressionType> attrList = new ArrayList<AttributeAssignmentExpressionType>(); List<ObligationExpressionType> obExList = new ArrayList<ObligationExpressionType>(); obExList.add(mockObExType); List<Object> contentList = new ArrayList<>(); contentList.add(new Object()); when(mockRuleType.getRuleId()).thenReturn(\"\"); when(mockRuleType.getTarget()).thenReturn(mockTargetType); when(mockRuleType.getEffect()).thenReturn(effectTypePermit); when(mockTargetType.getAnyOf()).thenReturn(anyOfList); when(mockRuleType.getAdviceExpressions()).thenReturn(mockAdvice); when(mockAdvice.getAdviceExpression()).thenReturn(adviceList); when(mockRuleType.getObligationExpressions()).thenReturn(mockObEx); when(mockObEx.getObligationExpression()).thenReturn(obExList); when(mockObExType.getAttributeAssignmentExpression()).thenReturn(null); when(mockObExType.getFulfillOn()).thenReturn(effectTypePermit); when(adviceExpTypeMock.getAdviceId()).thenReturn(\"\"); when(adviceExpTypeMock.getAppliesTo()).thenReturn(effectTypePermit); when(adviceExpTypeMock.getAttributeAssignmentExpression()).thenReturn(attrList); processor.rule(mockRuleType); verify(mockRuleType, atLeast(1)).getRuleId(); verify(mockRuleType, atLeast(1)).getTarget(); verify(mockRuleType, atLeast(1)).getEffect(); verify(mockRuleType, atLeast(1)).getAdviceExpressions(); verify(mockRuleType, atLeast(1)).getObligationExpressions(); verify(mockTargetType, atLeast(1)).getAnyOf(); verify(mockObEx, atLeast(1)).getObligationExpression(); verify(mockObExType, atLeast(1)).getAttributeAssignmentExpression(); verify(mockObExType, atLeast(1)).getFulfillOn(); verify(mockAdvice, atLeast(1)).getAdviceExpression(); verify(adviceExpTypeMock, atLeast(1)).getAdviceId(); verify(adviceExpTypeMock, atLeast(1)).getAppliesTo(); verify(adviceExpTypeMock, atLeast(1)).getAttributeAssignmentExpression(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Object transform(final long value) { final int posz = 'z'; final int posA = 'A'; final int offset = (int) value % (posz - posA + 1); return Character.toString((char) (posA + offset)); }### Assistant: @Test public void shouldBeB() { assertThat((String) templateValue.transform(1), is(\"B\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static <A extends Annotation> A findAnnotation(final Class<A> targetAnnotation, final Class<?> annotatedType) { A foundAnnotation = annotatedType.getAnnotation(targetAnnotation); if (foundAnnotation == null) { for (Annotation annotation : annotatedType.getAnnotations()) { Class<? extends Annotation> annotationType = annotation.annotationType(); if (annotationType.isAnnotationPresent(targetAnnotation)) { foundAnnotation = annotationType.getAnnotation(targetAnnotation); break; } } } return foundAnnotation; }### Assistant: @Test public void findAnnotationWithClassWhereAnnotationIsNotPresent() { Annotation foo = Utils.findAnnotation(Foo.class, Object.class); assertNull(foo); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void postHandle(final HttpServletRequest request, final HttpServletResponse response, final Object handler, final ModelAndView modelAndView) { logger.trace(\"postHandle\"); if (!(handler instanceof HandlerMethod)) { return; } TransactionTokenContextImpl tokenContext = (TransactionTokenContextImpl) request .getAttribute(TOKEN_CONTEXT_REQUEST_ATTRIBUTE_NAME); switch (tokenContext.getReserveCommand()) { case CREATE_TOKEN: createToken(request, request.getSession(true), tokenContext .getTokenInfo(), generator, tokenStore); break; case UPDATE_TOKEN: updateToken(request, request.getSession(true), tokenContext .getReceivedToken(), tokenContext.getTokenInfo(), generator, tokenStore); break; case REMOVE_TOKEN: removeToken(tokenContext.getReceivedToken()); break; case KEEP_TOKEN: keepToken(request, tokenContext.getReceivedToken(), tokenContext .getTokenInfo(), tokenStore); break; default: break; } }### Assistant: @Test public void testPostHandleWithNoneOperation() throws Exception { TransactionTokenContextImpl context = mock( TransactionTokenContextImpl.class); request.setAttribute( TransactionTokenInterceptor.TOKEN_CONTEXT_REQUEST_ATTRIBUTE_NAME, context); when(context.getReserveCommand()).thenReturn( TransactionTokenContextImpl.ReserveCommand.NONE); try { interceptor.postHandle(request, response, new HandlerMethod(new TransactionTokenSampleController(), TransactionTokenSampleController.class .getDeclaredMethod(\"third\", SampleForm.class, Model.class)), null); } catch (Exception e) { fail(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> void subscribe(Subscriber<? super T> s, Iterator<? extends T> it) { boolean hasNext; try { hasNext = it.hasNext(); } catch (Throwable e) { Exceptions.throwIfFatal(e); EmptySubscription.error(e, s); return; } if (!hasNext) { EmptySubscription.complete(s); return; } if (s instanceof ConditionalSubscriber) { s.onSubscribe(new IteratorConditionalSubscription<T>( (ConditionalSubscriber<? super T>)s, it)); } else { s.onSubscribe(new IteratorSubscription<T>(s, it)); } }### Assistant: @Test public void requestRaceConditional() { for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) { final TestSubscriber<Integer> ts = new TestSubscriber<Integer>(0L); Runnable r = new Runnable() { @Override public void run() { ts.request(1); } }; Flowable.fromIterable(Arrays.asList(1, 2, 3, 4)) .filter(Functions.alwaysTrue()) .subscribe(ts); TestHelper.race(r, r); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public RaftActorBehavior handleMessage(final ActorRef sender, final Object originalMessage) { requireNonNull(sender, \"sender should not be null\"); if (ISOLATED_LEADER_CHECK.equals(originalMessage)) { if (isLeaderIsolated()) { log.warn(\"{}: At least {} followers need to be active, Switching {} from Leader to IsolatedLeader\", context.getId(), getMinIsolatedLeaderPeerCount(), getLeaderId()); return internalSwitchBehavior(new IsolatedLeader(context, this)); } else { return this; } } else { return super.handleMessage(sender, originalMessage); } }### Assistant: @Test public void testHandleAppendEntriesReplyFailureWithFollowersLogEmpty() { logStart(\"testHandleAppendEntriesReplyFailureWithFollowersLogEmpty\"); MockRaftActorContext leaderActorContext = createActorContextWithFollower(); ((DefaultConfigParamsImpl)leaderActorContext.getConfigParams()).setHeartBeatInterval( new FiniteDuration(1000, TimeUnit.SECONDS)); leaderActorContext.setReplicatedLog( new MockRaftActorContext.MockReplicatedLogBuilder().createEntries(0, 2, 1).build()); long leaderCommitIndex = 1; leaderActorContext.setCommitIndex(leaderCommitIndex); leaderActorContext.setLastApplied(leaderCommitIndex); final ReplicatedLogEntry leadersFirstLogEntry = leaderActorContext.getReplicatedLog().get(0); final ReplicatedLogEntry leadersSecondLogEntry = leaderActorContext.getReplicatedLog().get(1); MockRaftActorContext followerActorContext = createFollowerActorContextWithLeader(); followerActorContext.setReplicatedLog(new MockRaftActorContext.MockReplicatedLogBuilder().build()); followerActorContext.setCommitIndex(-1); followerActorContext.setLastApplied(-1); Follower follower = new Follower(followerActorContext); followerActor.underlyingActor().setBehavior(follower); followerActorContext.setCurrentBehavior(follower); leader = new Leader(leaderActorContext); AppendEntries appendEntries = MessageCollectorActor.expectFirstMatching(followerActor, AppendEntries.class); final AppendEntriesReply appendEntriesReply = MessageCollectorActor.expectFirstMatching(leaderActor, AppendEntriesReply.class); MessageCollectorActor.clearMessages(followerActor); MessageCollectorActor.clearMessages(leaderActor); assertEquals(\"getLeaderCommit\", -1, appendEntries.getLeaderCommit()); assertEquals(\"Log entries size\", 0, appendEntries.getEntries().size()); assertEquals(\"getPrevLogIndex\", 0, appendEntries.getPrevLogIndex()); leaderActor.underlyingActor().setBehavior(leader); leaderActorContext.setCurrentBehavior(leader); leader.handleMessage(followerActor, appendEntriesReply); MessageCollectorActor.expectMatching(leaderActor, AppendEntriesReply.class, 1); appendEntries = MessageCollectorActor.expectFirstMatching(followerActor, AppendEntries.class); assertEquals(\"getLeaderCommit\", leaderCommitIndex, appendEntries.getLeaderCommit()); assertEquals(\"getPrevLogIndex\", -1, appendEntries.getPrevLogIndex()); assertEquals(\"Log entries size\", 2, appendEntries.getEntries().size()); assertEquals(\"First entry index\", 0, appendEntries.getEntries().get(0).getIndex()); assertEquals(\"First entry data\", leadersFirstLogEntry.getData(), appendEntries.getEntries().get(0).getData()); assertEquals(\"Second entry index\", 1, appendEntries.getEntries().get(1).getIndex()); assertEquals(\"Second entry data\", leadersSecondLogEntry.getData(), appendEntries.getEntries().get(1).getData()); FollowerLogInformation followerInfo = leader.getFollower(FOLLOWER_ID); assertEquals(\"getNextIndex\", 2, followerInfo.getNextIndex()); List<ApplyState> applyStateList = MessageCollectorActor.expectMatching(followerActor, ApplyState.class, 2); ApplyState applyState = applyStateList.get(0); assertEquals(\"Follower's first ApplyState index\", 0, applyState.getReplicatedLogEntry().getIndex()); assertEquals(\"Follower's first ApplyState term\", 1, applyState.getReplicatedLogEntry().getTerm()); assertEquals(\"Follower's first ApplyState data\", leadersFirstLogEntry.getData(), applyState.getReplicatedLogEntry().getData()); applyState = applyStateList.get(1); assertEquals(\"Follower's second ApplyState index\", 1, applyState.getReplicatedLogEntry().getIndex()); assertEquals(\"Follower's second ApplyState term\", 1, applyState.getReplicatedLogEntry().getTerm()); assertEquals(\"Follower's second ApplyState data\", leadersSecondLogEntry.getData(), applyState.getReplicatedLogEntry().getData()); assertEquals(\"Follower's commit index\", 1, followerActorContext.getCommitIndex()); assertEquals(\"Follower's lastIndex\", 1, followerActorContext.getReplicatedLog().lastIndex()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public JsonNode apply(JsonNode document, List<PatchOperation> patchOperations) throws PatchApplicationException { try { JsonNode patch = mapper.convertValue(patchOperations, JsonNode.class); JsonPatch jsonPatch = JsonPatch.fromJson(patch); return jsonPatch.apply(document); } catch (IOException | JsonPatchException e) { String message = String.format(\"Unable to apply patch to document. document: %s, patch: %s\", document, patchOperations); throw new PatchApplicationException(message, e); } }### Assistant: @Test(expected = PatchApplicationException.class) public void throwsPatchApplicationExceptionWhenNotAValidPatch() throws Exception { JsonNode road = mapper.readTree(\"{\\\"description\\\":\\\"description1\\\"}\"); List<PatchOperation> operations = singletonList(PatchOperation.replace(\"/description\", \"description2\")); JsonNode jsonNodePatch = mapper.readTree(\"{}\"); ObjectMapper mockObjectMapper = mock(ObjectMapper.class); when(mockObjectMapper.convertValue(any(), eq(JsonNode.class))).thenReturn(jsonNodePatch); underTest = new JsonPatchApplier(mockObjectMapper); underTest.apply(road, operations); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final long getItemId(final int position) { resolveIndices(position); return parts[resolvedPartIndex].getItemId(resolvedItemIndex, staticItemCount); }### Assistant: @Test public void shouldReturnItemIdForStaticItems() { for (int i = 4; i <= 9; i++) { assertThat(repositoryAdapter.getItemId(i), is(i - 4L)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean matches(MetricName name, Metric metric) { for (String nameToMatch: metricNames) { boolean success; if (metric instanceof Counter) { success = matchInternal(nameToMatch, name, counterSuffixSet, false); } else if (metric instanceof Meter) { success = matchInternal(nameToMatch, name, meterSuffixSet, false); } else if (metric instanceof Histogram) { success = matchInternal(nameToMatch, name, histogramSuffixSet, false); } else if (metric instanceof Timer) { success = matchInternal(nameToMatch, name, timerSuffixSet, false); } else if (metric instanceof Compass) { success = matchInternal(nameToMatch, name, compassSuffixSet, true); if (!success) { success = matchCompassAddon(nameToMatch, name, (Compass)metric); } } else if (metric instanceof Gauge) { success = matchInternal(nameToMatch, name, gaugeSuffixSet, false); } else if (metric instanceof FastCompass) { success = matchInternal(nameToMatch, name, fastCompassSuffixSet, true); } else if (metric instanceof ClusterHistogram) { success = matchInternal(nameToMatch, name, clusterHistogramSuffixSet, false); } else if (metric == null) { if (nameToMatch.equals(name.getKey())) { success = true; } else { int lastIndexOfDot = name.getKey().lastIndexOf(\".\"); if (lastIndexOfDot < 0) { success = false; } else { success = name.getKey().startsWith(nameToMatch) && nameToMatch.length() == lastIndexOfDot; } } } else { success = nameToMatch.equals(name.getKey()); } if (success) return true; } return false; }### Assistant: @Test public void testMetricNameKeyMatch() { Set<String> names = new HashSet<String>(); names.add(\"middleware.product.provider.qps\"); names.add(\"shared.carts.my_cart\"); names.add(\"shared.carts.my_cart1\"); names.add(\"shared.carts.my_cart2\"); MetricNameSetFilter filter = new MetricNameSetFilter(names); MetricName mn = MetricName.build(\"shared.carts.my_cart\"); MetricName mn1 = MetricName.build(\"shared.carts.my_cart1\"); MetricName mn2 = MetricName.build(\"shared.carts.my_cart2\"); Meter meter = MetricManager.getMeter(\"carts\", mn); Histogram histogram = MetricManager.getHistogram(\"carts\", mn1); Compass compass = MetricManager.getCompass(\"carts\", mn2); Assert.assertTrue(filter.matches(mn, meter)); Assert.assertTrue(filter.matches(mn1, histogram)); Assert.assertTrue(filter.matches(mn2, compass)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Instant offsetInstant(Instant origin, Schedule schedule, int offset) { Preconditions.checkArgument(isAligned(origin, schedule), \"unaligned origin\"); return schedule.wellKnown().unit() .map(unit -> { try { return origin.plus(offset, unit); } catch (UnsupportedTemporalTypeException ignored) { return null; } }) .orElseGet(() -> { final ExecutionTime executionTime = ExecutionTime.forCron(cron(schedule)); ZonedDateTime time = origin.atZone(UTC); for (int i = 0; i < Math.abs(offset); i++) { final Optional<ZonedDateTime> execution = offset <= 0 ? executionTime.lastExecution(time) : executionTime.nextExecution(time); time = execution .orElseThrow(AssertionError::new); } return time.toInstant(); }); }### Assistant: @Test public void shouldGetCorrectInstantWithNegativeOffsetForCronSchedule() { assertThat(offsetInstant(parse(\"2018-01-19T09:00:00.00Z\"), EVERY_5_MINUTES, -2), is(parse(\"2018-01-19T08:50:00.00Z\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ActionResponse execute(MultiTimeQueryRequest parameter) { MultiTimeQueryResponse multiTimeQueryResponse = new MultiTimeQueryResponse(); multiTimeQueryResponse.setResponses(((MultiQueryResponse)action.execute(multiQueryRequest)).getResponses()); return multiTimeQueryResponse; }### Assistant: @Test public void testQueryNoFilterAscending() throws FoxtrotException, JsonProcessingException { Query query = new Query(); query.setTable(TestUtils.TEST_TABLE_NAME); ResultSort resultSort = new ResultSort(); resultSort.setOrder(ResultSort.Order.asc); resultSort.setField(\"_timestamp\"); query.setSort(resultSort); BetweenFilter betweenFilter = new BetweenFilter(\"_timestamp\", 1397658117000L, 1397658118005L, false); query.setFilters(Arrays.asList(betweenFilter)); Duration duration = Duration.days(1); MultiTimeQueryRequest multiTimeQueryRequest = new MultiTimeQueryRequest(1, duration, query); List<Document> documents = new ArrayList<>(); documents.add( TestUtils.getDocument(\"W\", 1397658117001L, new Object[]{\"os\", \"android\", \"device\", \"nexus\", \"battery\", 99}, getMapper())); documents.add( TestUtils.getDocument(\"X\", 1397658117002L, new Object[]{\"os\", \"android\", \"device\", \"nexus\", \"battery\", 74}, getMapper())); documents.add( TestUtils.getDocument(\"Y\", 1397658117003L, new Object[]{\"os\", \"android\", \"device\", \"nexus\", \"battery\", 48}, getMapper())); documents.add( TestUtils.getDocument(\"Z\", 1397658117004L, new Object[]{\"os\", \"android\", \"device\", \"nexus\", \"battery\", 24}, getMapper())); documents.add( TestUtils.getDocument(\"A\", 1397658118000L, new Object[]{\"os\", \"android\", \"version\", 1, \"device\", \"nexus\"}, getMapper())); documents.add( TestUtils.getDocument(\"B\", 1397658118001L, new Object[]{\"os\", \"android\", \"version\", 1, \"device\", \"galaxy\"}, getMapper())); documents.add( TestUtils.getDocument(\"C\", 1397658118002L, new Object[]{\"os\", \"android\", \"version\", 2, \"device\", \"nexus\"}, getMapper())); documents.add(TestUtils.getDocument(\"D\", 1397658118003L, new Object[]{\"os\", \"ios\", \"version\", 1, \"device\", \"iphone\"}, getMapper())); documents.add(TestUtils.getDocument(\"E\", 1397658118004L, new Object[]{\"os\", \"ios\", \"version\", 2, \"device\", \"ipad\"}, getMapper())); MultiTimeQueryResponse multiTimeQueryResponse = MultiTimeQueryResponse.class.cast( getQueryExecutor().execute(multiTimeQueryRequest)); for(String key : multiTimeQueryResponse.getResponses() .keySet()) { compare(documents, ((QueryResponse)multiTimeQueryResponse.getResponses() .get(key)).getDocuments()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int index() { return ind; }### Assistant: @Test public void testIndex() { assertEquals(1, new Token(1, 2, null).index()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String diff(IChemObject first, IChemObject second) { IDifference difference = difference(first, second); if (difference == null) { return \"\"; } else { return difference.toString(); } }### Assistant: @Test public void testDiff() { IAtomType element1 = mock(IAtomType.class); IAtomType element2 = mock(IAtomType.class); when(element1.getHybridization()).thenReturn(PLANAR3); when(element2.getHybridization()).thenReturn(SP3); String result = AtomTypeDiff.diff(element1, element2); Assert.assertNotNull(result); Assert.assertNotSame(0, result.length()); assertContains(result, \"AtomTypeDiff\"); assertContains(result, \"PLANAR3/SP3\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public EditorFileConfig getEditorConfig(final String path) { final List<OutPair> properties; try { properties = editorConfig.getProperties(path); } catch (final EditorConfigException e) { throw new RuntimeException(e); } final SortedSet<ConfigProperty> configProperties = new TreeSet<ConfigProperty>(CONFIG_PROPERTY_TYPE_COMPARATOR); for (final OutPair outPair : properties) { final ConfigProperty configProperty = createConfigProperty(outPair); if (configProperty != null) { configProperties.add(configProperty); } } return new EditorFileConfig(path, Collections.unmodifiableSet(configProperties)); }### Assistant: @Test public void getFileConfigShouldTreatUnknownTrimTrailingWhitespaceValueAsFalse() throws Exception { when(mockEditorConfig.getProperties(\"path\")).thenReturn(Arrays.asList( new OutPair(\"trim_trailing_whitespace\", \"unknown_val\") )); final EditorFileConfig fileConfig = editorConfigService.getEditorConfig(\"path\"); assertThat(fileConfig.getConfigProperties(), contains(configProperty(TRIM_TRAILING_WHITESPACE, false))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getClassKey(CrawlURI cauri) { log.debug(\"Finding classKey for cauri: \" + cauri); String key = null; if (treatDnsLikeHttp || !isDns(cauri)) { key = getKeyFromSeed(cauri); } if (key == null) { key = getKeyFromUriHostname(cauri); } if (key == null) { key = DEFAULT_CLASS_KEY; } return key; }### Assistant: @Test public void getClassKeyTestChain() throws Exception { SeedUriDomainnameQueueAssignmentPolicy policy = new SeedUriDomainnameQueueAssignmentPolicy(); String url1 = \"http: UURI uuri1 = UURIFactory.getInstance(url1); UURI uuri2 = UURIFactory.getInstance(\"http: UURI uuri3 = UURIFactory.getInstance(\"http: UURI uuri4 = UURIFactory.getInstance(\"http: UURI uuri5 = UURIFactory.getInstance(\"http: UURI uuri6 = UURIFactory.getInstance(\"http: UURI uuri7 = UURIFactory.getInstance(\"http: CrawlURI curi1 = new CrawlURI(uuri1); curi1.setSeed(true); curi1.setSourceTag(url1); CrawlURI curi2 = curi1.createCrawlURI(uuri2, null, Hop.NAVLINK); CrawlURI curi3 = curi2.createCrawlURI(uuri3, null, Hop.REFER ); CrawlURI curi4 = curi3.createCrawlURI(uuri4, null, Hop.NAVLINK); CrawlURI curi5 = curi4.createCrawlURI(uuri5, null, Hop.EMBED); CrawlURI curi6 = curi5.createCrawlURI(uuri6, null, Hop.PREREQ); CrawlURI curi7 = curi6.createCrawlURI(uuri7, null, Hop.INFERRED); assertEquals(policy.getClassKey(curi7), policy.getClassKey(curi1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setLocale(Locale locale) { this.locale = locale; }### Assistant: @Test public void testSetLocale() { System.out.println(\"setLocale\"); NLFormat instance = NLFormat.getInstance(cyc); instance.setLocale(Locale.CHINA); assertEquals(Locale.CHINA, instance.getLocale()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Action> getActions(AbstractNode node, Frame frame) { if (frame.message instanceof Query) { CqlMapper mapper = CqlMapper.forVersion(frame.protocolVersion); Query query = (Query) frame.message; Matcher clusterNameMatcher = queryClusterName.matcher(query.query); if (clusterNameMatcher.matches()) { return handleClusterNameQuery(node, mapper); } else { final Matcher peerAddrMatcher = queryPeersWithAddr.matcher(query.query); if (peerAddrMatcher.matches()) { return handlePeersQuery( node, mapper, n -> { InetAddress address; if (n.getAddress() instanceof InetSocketAddress) { address = ((InetSocketAddress) n.getAddress()).getAddress(); String addrIp = address.getHostAddress(); return addrIp.equals(peerAddrMatcher.group(1)); } else { return false; } }, false); } else if (queryPeerWithNamedParam.matcher(query.query).matches()) { ByteBuffer addressBuffer = query.options.namedValues.get(\"address\"); InetAddress address = mapper.inet.decode(addressBuffer); return handlePeersQuery(node, mapper, n -> n.inet().equals(address), false); } else if (queryPeerV2WithNamedParam.matcher(query.query).matches()) { if (!supportsV2) { return peersV2NotSupported(); } ByteBuffer addressBuffer = query.options.namedValues.get(\"address\"); InetAddress address = mapper.inet.decode(addressBuffer); ByteBuffer portBuffer = query.options.namedValues.get(\"port\"); int port = mapper.cint.decode(portBuffer); InetSocketAddress socketAddr = new InetSocketAddress(address, port); return handlePeersQuery( node, mapper, n -> n.inetSocketAddress().equals(socketAddr), true); } Matcher matcher = queryLocal.matcher(query.query); if (matcher.matches()) { return handleSystemLocalQuery(node, mapper); } matcher = queryPeers.matcher(query.query); if (matcher.matches()) { if (matcher.group(2).endsWith(\"v2\")) { if (supportsV2) { return handlePeersQuery(node, mapper, n -> n != node, true); } else { return peersV2NotSupported(); } } return handlePeersQuery(node, mapper, n -> n != node, false); } } } return Collections.emptyList(); }### Assistant: @Test public void shouldReturnNoActionsForNonMatchingQuery() { assertThat(handler.getActions(node0, FrameUtils.wrapRequest(new Startup()))).isEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException { final Resource resource = request.getResource(); final int index = urlBuilder.getIndex(request); final String string = index >= 0 ? cache.get(resource, index) : null; if (isBlank(string)) { response.setStatus(HttpServletResponse.SC_NOT_FOUND); return; } response.setContentType(PerConstants.XML_MIME_TYPE); response.setCharacterEncoding(PerConstants.UTF_8); response.getWriter().write(string); }### Assistant: @Test public void incorrectIndex() throws IOException { when(urlBuilder.getIndex(request)).thenReturn(-1); model.doGet(request, response); assertEquals(HttpServletResponse.SC_NOT_FOUND, status); assertTrue(StringUtils.isBlank(writer.toString())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkAttributeSyntax(PerunSessionImpl perunSession, Resource resource, Attribute attribute) throws WrongAttributeValueException { if (attribute.getValue() == null) return; if ((attribute.valueAsString()).length() > 20) throw new WrongAttributeValueException(\"Code of Group in K4 mustn't exceed 20 characters.\"); }### Assistant: @Test public void testSemanticsWithNullValue() throws Exception { System.out.println(\"testSemanticsWithNullValue()\"); attributeToCheck.setValue(null); classInstance.checkAttributeSyntax(sess, resource, attributeToCheck); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void setMediaFormat(MediaFormat inputMediaFormat) { this.mediaFormat = inputMediaFormat; getVideoFormat().setColorFormat(MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface); }### Assistant: @Test public void canConfigure() { IMediaCodec mediaCodec = create.mediaCodec().construct(); VideoFormat videoFormat = create.videoFormat() .withFrameSize(1024, 768) .withBitRate(100) .withFrameRate(10) .withIFrameInterval(1) .construct(); MediaCodecInfo.CodecCapabilities codecCapabilities = new MediaCodecInfo.CodecCapabilities(); videoFormat.setColorFormat(codecCapabilities.COLOR_FormatSurface); VideoEncoder encoder = new VideoEncoder(mediaCodec); encoder.setMediaFormat(videoFormat); encoder.configure(); ArgumentCaptor<VideoFormat> actualVideoFormat = ArgumentCaptor.forClass(VideoFormat.class); verify(mediaCodec).configure(actualVideoFormat.capture(), any(ISurfaceWrapper.class), anyInt()); assertEquals(100, actualVideoFormat.getValue().getVideoBitRateInKBytes()); assertEquals(10, actualVideoFormat.getValue().getVideoFrameRate()); assertEquals(1, actualVideoFormat.getValue().getVideoIFrameInterval()); assertEquals(2130708361, actualVideoFormat.getValue().getInteger(\"color-format\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void addObserver(LifecycleObserver observer) { State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED; ObserverWithState statefulObserver = new ObserverWithState(observer, initialState); ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver); if (previous != null) { return; } boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent; State targetState = calculateTargetState(observer); mAddingObserverCounter++; while ((statefulObserver.mState.compareTo(targetState) < 0 && mObserverMap.contains(observer))) { pushParentState(statefulObserver.mState); statefulObserver.dispatchEvent(mLifecycleOwner, upEvent(statefulObserver.mState)); popParentState(); targetState = calculateTargetState(observer); } if (!isReentrance) { sync(); } mAddingObserverCounter--; }### Assistant: @Test public void addGenericAndObserve() { GenericLifecycleObserver generic = mock(GenericLifecycleObserver.class); mRegistry.addObserver(generic); dispatchEvent(ON_CREATE); verify(generic).onStateChanged(mLifecycleOwner, ON_CREATE); reset(generic); dispatchEvent(ON_CREATE); verify(generic, never()).onStateChanged(mLifecycleOwner, ON_CREATE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private void respondWithFile(ChannelHandlerContext ctx, HttpRequest request, String requestPath) throws IOException, ParseException { if (requestPath.endsWith(\"/\")) { requestPath = requestPath + \"index.html\"; } if (!requestPath.contains(\".\")) { requestPath = requestPath + \".json\"; } final File file = new File(rootPath, requestPath); if (!file.exists()) { ClassLoader cl = HistoryServerStaticFileServerHandler.class.getClassLoader(); String pathToLoad = requestPath.replace(\"index.html\", \"index_hs.html\"); try (InputStream resourceStream = cl.getResourceAsStream(\"web\" + pathToLoad)) { boolean success = false; try { if (resourceStream != null) { URL root = cl.getResource(\"web\"); URL requested = cl.getResource(\"web\" + pathToLoad); if (root != null && requested != null) { URI rootURI = new URI(root.getPath()).normalize(); URI requestedURI = new URI(requested.getPath()).normalize(); if (!rootURI.relativize(requestedURI).equals(requestedURI)) { LOG.debug(\"Loading missing file from classloader: {}\", pathToLoad); file.getParentFile().mkdirs(); Files.copy(resourceStream, file.toPath()); success = true; } } } } catch (Throwable t) { LOG.error(\"error while responding\", t); } finally { if (!success) { LOG.debug(\"Unable to load requested file {} from classloader\", pathToLoad); StaticFileServerHandler.sendError(ctx, NOT_FOUND); return; } } } } if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) { StaticFileServerHandler.sendError(ctx, NOT_FOUND); return; } if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) { StaticFileServerHandler.sendError(ctx, NOT_FOUND); return; } final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE); if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) { SimpleDateFormat dateFormatter = new SimpleDateFormat(StaticFileServerHandler.HTTP_DATE_FORMAT, Locale.US); Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince); long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000; long fileLastModifiedSeconds = file.lastModified() / 1000; if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) { if (LOG.isDebugEnabled()) { LOG.debug(\"Responding 'NOT MODIFIED' for file '\" + file.getAbsolutePath() + '\\''); } StaticFileServerHandler.sendNotModified(ctx); return; } } if (LOG.isDebugEnabled()) { LOG.debug(\"Responding with file '\" + file.getAbsolutePath() + '\\''); } final RandomAccessFile raf; try { raf = new RandomAccessFile(file, \"r\"); } catch (FileNotFoundException e) { StaticFileServerHandler.sendError(ctx, NOT_FOUND); return; } try { long fileLength = raf.length(); HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK); StaticFileServerHandler.setContentTypeHeader(response, file); if (!requestPath.equals(\"/joboverview.json\")) { StaticFileServerHandler.setDateAndCacheHeaders(response, file); } if (HttpHeaders.isKeepAlive(request)) { response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE); } HttpHeaders.setContentLength(response, fileLength); ctx.write(response); ChannelFuture lastContentFuture; if (ctx.pipeline().get(SslHandler.class) == null) { ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise()); lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT); } else { lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)), ctx.newProgressivePromise()); } if (!HttpHeaders.isKeepAlive(request)) { lastContentFuture.addListener(ChannelFutureListener.CLOSE); } } catch (Exception e) { raf.close(); LOG.error(\"Failed to serve file.\", e); StaticFileServerHandler.sendError(ctx, INTERNAL_SERVER_ERROR); } }### Assistant: @Test public void testRespondWithFile() throws Exception { File webDir = tmp.newFolder(\"webDir\"); Router router = new Router() .GET(\"/:*\", new HistoryServerStaticFileServerHandler(webDir)); WebFrontendBootstrap webUI = new WebFrontendBootstrap( router, LoggerFactory.getLogger(HistoryServerStaticFileServerHandlerTest.class), tmp.newFolder(\"uploadDir\"), null, \"localhost\", 0, new Configuration()); int port = webUI.getServerPort(); try { String notFound404 = HistoryServerTest.getFromHTTP(\"http: Assert.assertTrue(notFound404.contains(\"404 Not Found\")); String index = HistoryServerTest.getFromHTTP(\"http: Assert.assertTrue(index.contains(\"Completed Jobs\")); String index2 = HistoryServerTest.getFromHTTP(\"http: Assert.assertEquals(index, index2); File dir = new File(webDir, \"dir.json\"); dir.mkdirs(); String dirNotFound404 = HistoryServerTest.getFromHTTP(\"http: Assert.assertTrue(dirNotFound404.contains(\"404 Not Found\")); tmp.newFile(\"secret\"); String x = HistoryServerTest.getFromHTTP(\"http: Assert.assertTrue(x.contains(\"404 Not Found\")); } finally { webUI.shutdown(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CompletableFuture<RichMenuIdResponse> createRichMenu(final RichMenu richMenu) { return toFuture(retrofitImpl.createRichMenu(richMenu)); }### Assistant: @Test public void createRichMenuTest() throws Exception { final RichMenu richMenuReference = RichMenu.builder().build(); whenCall(retrofitMock.createRichMenu(any()), RICH_MENU_ID_RESPONSE); final RichMenuIdResponse richMenuIdResponse = target.createRichMenu(richMenuReference).get(); verify(retrofitMock, only()).createRichMenu(richMenuReference); assertThat(richMenuIdResponse).isEqualTo(RICH_MENU_ID_RESPONSE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Collection<RuleModellerActionPlugin> getRuleModellerActionPlugins() { return actionPlugins; }### Assistant: @Test public void testRuleModellerActionPlugins() throws Exception { Assertions.assertThat(plugin.getRuleModellerActionPlugins()).hasSize(1); Assertions.assertThat(plugin.getRuleModellerActionPlugins()).hasAtLeastOneElementOfType(RuleModellerActionPlugin.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @NonNull public static Builder layoutPresenterFor(@LayoutRes int layoutId) { return new Builder(layoutId); }### Assistant: @Test public void shouldRecycleViewInCompiledLayout() { final LayoutPresenter layoutPresenter = layoutPresenterFor(LAYOUT_ID) .bindWith(binder) .recycleWith(recycler) .build(); layoutPresenter.recycle(view); verify(recycler).accept(view); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void sendAsAdmin(final JsonEnvelope envelope) { requestResponseEnvelopeValidator.validateRequest(envelope); dispatchAsAdmin().apply(envelope); }### Assistant: @Test public void shouldValidateEnvelopeWithSendAsAdminMethod() { final JsonEnvelope envelope = mock(JsonEnvelope.class); dispatcherDelegate.sendAsAdmin(envelope); verify(requestResponseEnvelopeValidator).validateRequest(envelope); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T extends View> T instanceFor(final Class<T> view, final List<Message> errors) { if (view.equals(EmptyResult.class)) { throw new ValidationException(errors); } return proxifier.proxify(view, throwValidationErrorOnFinalMethods(view, errors, result.use(view))); }### Assistant: @Test(expected=ValidationException.class) public void onStatusResultShouldThrowExceptionsOnMovedPermanentlyTo() throws Exception { Status status = mock(Status.class); when(result.use(Status.class)).thenReturn(status); factory.instanceFor(Status.class, errors).movedPermanentlyTo(\"/newUri\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void toggleEditingStatus(boolean editingStatus) { collectionView.enableEditingMode(editingStatus); mapElementPresenter.toggleEditingStatus(editingStatus); listElementPresenter.toggleEditingStatus(editingStatus); }### Assistant: @Test public void toggleEditingStatusToDisableTrue() { collectionEditorPresenterSpy.toggleEditingStatus(true); verify(collectionViewMock, times(1)).enableEditingMode(eq(true)); verify(listElementPresenterMock, times(1)).toggleEditingStatus(eq(true)); verify(mapElementPresenterMock, times(1)).toggleEditingStatus(eq(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getClassName( Object object ) { return object.getClass().getSimpleName(); }### Assistant: @Test public void testGetClassName() { assertEquals( \"DataElement\", getClassName( dataElementA ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SecurityFunctionKeys getSecurityFunctions() { SecurityFunctionKeys securityFunctionKeys = new SecurityFunctionKeys(); securityFunctionKeys.getSecurityFunctionKeys() .addAll(securityFunctionDao.getSecurityFunctions().stream().map(SecurityFunctionKey::new).collect(Collectors.toList())); return securityFunctionKeys; }### Assistant: @Test public void testGetSecurityFunctions() { when(securityFunctionDao.getSecurityFunctions()).thenReturn(ALL_SECURITY_FUNCTION_NAMES); SecurityFunctionKeys securityFunctionKeys = securityFunctionService.getSecurityFunctions(); assertNotNull(securityFunctionKeys); List<SecurityFunctionKey> securityFunctionKeyList = securityFunctionKeys.getSecurityFunctionKeys(); assertEquals(ALL_SECURITY_FUNCTION_NAMES.size(), securityFunctionKeyList.size()); assertEquals(SECURITY_FUNCTION, securityFunctionKeyList.get(0).getSecurityFunctionName()); assertEquals(SECURITY_FUNCTION_2, securityFunctionKeyList.get(1).getSecurityFunctionName()); assertEquals(SECURITY_FUNCTION_3, securityFunctionKeyList.get(2).getSecurityFunctionName()); verify(securityFunctionDao).getSecurityFunctions(); verifyNoMoreInteractionsHelper(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> CurrentPeekingIterator<T> currentPeekingIterator(PeekingIterator<? extends T> iterator) { return new Iterators.CurrentPeekingIteratorImpl(iterator); }### Assistant: @Test void test_iterator_peek() { String one = \"one\"; String two = \"two\"; String three = \"three\"; List<String> strings = Arrays.asList(one, two, three); PeekingIterator<String> peekingIterator = com.google.common.collect.Iterators.peekingIterator(strings.iterator()); CurrentPeekingIterator<String> currentPeekingIterator = Iterators.currentPeekingIterator(peekingIterator); String peek = currentPeekingIterator.peek(); String current = currentPeekingIterator.current(); Assertions.assertEquals(null, current); Assertions.assertEquals(one, peek); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void close() { }### Assistant: @Test public void testSelfCertSignerFactory() { SelfCertSignerFactory certFactory = new SelfCertSignerFactory(); assertNotNull(certFactory); CertSigner certSigner = certFactory.create(); assertNotNull(certSigner); certSigner.close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure public int indexOf(BusItineraryHalt bushalt) { if (bushalt == null) { return -1; } if (bushalt.isValidPrimitive()) { return ListUtil.indexOf(this.validHalts, VALID_HALT_COMPARATOR, bushalt); } int idx = ListUtil.indexOf(this.invalidHalts, INVALID_HALT_COMPARATOR, bushalt); if (idx >= 0) { idx += this.validHalts.size(); } return idx; }### Assistant: @Test public void testIndexOfRoadSegment() { assertEquals(-1, this.itinerary.indexOf(this.segment1)); assertEquals(-1, this.itinerary.indexOf(this.segment2)); assertEquals(-1, this.itinerary.indexOf(this.segment3)); initTest(); assertEquals(0, this.itinerary.indexOf(this.segment1)); assertEquals(1, this.itinerary.indexOf(this.segment2)); assertEquals(-1, this.itinerary.indexOf(this.segment3)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onDestroy(HostType host) { for (ActivityLightCycle<HostType> component : activityLightCycles) { component.onDestroy(host); } }### Assistant: @Test public void dispatchOnDestroy() { dispatcher.onDestroy(activity); verify(lightCycleComponent1).onDestroy(activity); verify(lightCycleComponent2).onDestroy(activity); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void removeDockerContainer(String containerId) { try { PrivilegedOperationExecutor privOpExecutor = PrivilegedOperationExecutor.getInstance(super.getConf()); if (DockerCommandExecutor.isRemovable( DockerCommandExecutor.getContainerStatus(containerId, privOpExecutor, nmContext))) { LOG.info(\"Removing Docker container : {}\", containerId); DockerRmCommand dockerRmCommand = new DockerRmCommand(containerId, ResourceHandlerModule.getCgroupsRelativeRoot()); DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId, null, privOpExecutor, false, nmContext); } } catch (ContainerExecutionException e) { LOG.warn(\"Unable to remove docker container: {}\", containerId); } }### Assistant: @Test public void testRemoveDockerContainer() throws Exception { ApplicationId appId = ApplicationId.newInstance(12345, 67890); ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 54321); String cid = ContainerId.newContainerId(attemptId, 9876).toString(); LinuxContainerExecutor lce = mock(LinuxContainerExecutor.class); lce.removeDockerContainer(cid); verify(lce, times(1)).removeDockerContainer(cid); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setArmaSignificance(double value) { if (value < 0.5) { throw new X13Exception(\"Arma T-value limit must be greater than .5\"); } tsig_ = value; }### Assistant: @Test(expected = X13Exception.class) public void testSetArmaSignificanceLowerBound() { AutoModelSpec expected = new AutoModelSpec(); expected.setArmaSignificance(.45); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<RoboconfCompletionProposal> findProposals( String text ) { List<RoboconfCompletionProposal> proposals = new ArrayList<> (); Ctx ctx = findContext( text ); boolean addImport = true; switch( ctx.kind ) { case IMPORT: for( String instanceImport : CompletionUtils.findInstancesFilesToImport( this.appDirectory, this.editedFile, text )) { if( startsWith( instanceImport, ctx.lastWord )) proposals.add( basicProposal( instanceImport, \"\", false )); } break; case ATTRIBUTE: addImport = false; Map<String,String> candidates = findExportedVariableNames( ctx ); proposals.addAll( buildProposalsFromMap( candidates, ctx.lastWord )); case NEUTRAL: if( addImport && startsWith( IMPORT_PREFIX, ctx.lastWord )) proposals.add( basicProposal( IMPORT_PREFIX, ctx.lastWord, true )); if( startsWith( INSTANCE_OF_PREFIX, ctx.lastWord )) { proposals.add( basicProposal( INSTANCE_OF_PREFIX, ctx.lastWord, true )); StringBuilder sb = new StringBuilder( INSTANCE_OF_PREFIX ); sb.append( \"component\" ); sb.append( \" {\\n\\t\" ); sb.append( ctx.parentIndentation ); sb.append( PROPERTY_INSTANCE_NAME ); sb.append( \": name;\\n\" ); sb.append( ctx.parentIndentation ); sb.append( \"}\" ); String proposalString = sb.toString(); SelectionRange sel1 = new SelectionRange( KEYWORD_INSTANCE_OF.length() + 1, COMPONENT_NAME.length()); SelectionRange sel2 = new SelectionRange( sel1.getOffset() + sel1.getLength() + PROPERTY_INSTANCE_NAME.length() + 6 + ctx.parentIndentation.length(), 4 ); RoboconfCompletionProposal proposal = new RoboconfCompletionProposal( proposalString, INSTANCE_OF_BLOCK, INSTANCE_OF_BLOCK + \"\\n\\n\" + proposalString.trim(), ctx.lastWord.length()); proposal.getSelection().add( sel1 ); proposal.getSelection().add( sel2 ); proposals.add( proposal ); } break; case COMPONENT_NAME: candidates = findComponentNames( ctx ); proposals.addAll( buildProposalsFromMap( candidates, ctx.lastWord )); break; default: break; } return proposals; }### Assistant: @Test public void verifyIndentation_4() throws Exception { Couple couple = prepare( \"app3\", \"initial.instances\", 700 ); couple.text = \"instance of n1 {\\n\\tinstance of n2 {\\n\\t\\tinstance of n3 {\\n\"; List<RoboconfCompletionProposal> proposals = couple.proposer.findProposals( couple.text ); Assert.assertEquals( 4, proposals.size()); Assert.assertEquals( INSTANCE_OF_BLOCK, proposals.get( 3 ).getProposalName()); Assert.assertEquals( indentation( 3 ), proposals.get( 3 ).getProposalString()); Assert.assertEquals( 0, proposals.get( 3 ).getReplacementOffset()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected static Map<Entry, String> loadFromFile(String resourceLocation) { final ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader(); final InputStream is; if (new File(resourceLocation).isFile()) { try { is = Files.newInputStream(new File(resourceLocation).toPath()); } catch (IOException ie) { log.error(\"Exception while reading file {}\", resourceLocation, ie); throw new RuntimeException(ie); } } else { is = systemClassLoader.getResourceAsStream(resourceLocation); } try (BufferedReader br = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) { Map<Entry, String> translations = new HashMap<>(1000); String line; boolean firstline = true; String[] languages = null, data; while ((line = br.readLine()) != null) { if (firstline) { languages = line.split(\",\"); firstline = false; } else { data = line.split(\",\"); String key = data[0].strip(); for (int i = 1; i < data.length; i++) { translations.put(new Entry(key, languages[i].strip()), data[i].strip()); } } } return translations; } catch (Exception e) { log.error(\"Exception while loading resource {}\", resourceLocation, e); throw new RuntimeException(e); } }### Assistant: @Test void shouldLoadTranslationsFromLocalFile() { final String file = System.getProperty(\"user.dir\") + FILESEPARATOR + \"src\" + FILESEPARATOR + \"test\" + FILESEPARATOR + \"resources\" + FILESEPARATOR + \"data\" + FILESEPARATOR + \"multilinguism\" + FILESEPARATOR + \"translation.csv\"; final Map<I18N.Entry, String> translations = I18N.loadFromFile(file); assert translations.size() == 6; }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @SuppressWarnings(\"unchecked\") public <T extends Thing> Optional<OrmFactory<T>> getFactoryOfType(Class<T> type) { return factories.stream() .filter(factory -> type.equals(factory.getType())) .map(factory -> (OrmFactory<T>) factory) .findFirst(); }### Assistant: @Test public void getFactoryByTypeClassThatDoesNotExistTest() { assertFalse(registry.getFactoryOfType(Error.class).isPresent()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String[] getForwardAndInverseKeys_pixelCoding() { final String[] codingNames = new String[2]; final Preferences preferences = Config.instance(\"s3tbx\").preferences(); final boolean useFractAccuracy = preferences.getBoolean(SYSPROP_OLCI_USE_FRACTIONAL_ACCURACY, false); if (useFractAccuracy) { codingNames[0] = PixelInterpolatingForward.KEY; } else { codingNames[0] = preferences.get(SYSPROP_OLCI_PIXEL_CODING_FORWARD, PixelForward.KEY); } codingNames[1] = preferences.get(SYSPROP_OLCI_PIXEL_CODING_INVERSE, PixelQuadTreeInverse.KEY); return codingNames; }### Assistant: @Test public void testGetForwardAndInverseKeys_pixelCoding_inverseCoding() { final String inverseKey = System.getProperty(SYSPROP_OLCI_PIXEL_CODING_INVERSE); try { System.setProperty(SYSPROP_OLCI_PIXEL_CODING_INVERSE, \"jippie\"); final String[] codingKeys = OlciProductFactory.getForwardAndInverseKeys_pixelCoding(); assertEquals(\"FWD_PIXEL\", codingKeys[0]); assertEquals(\"jippie\", codingKeys[1]); } finally { if (inverseKey != null) { System.setProperty(SYSPROP_OLCI_PIXEL_CODING_INVERSE, inverseKey); } else { System.clearProperty(SYSPROP_OLCI_PIXEL_CODING_INVERSE); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Date getStartDate() { return startDate; }### Assistant: @Test public void testGetStart() throws ParseException { MonthlyPeriod instance = new MonthlyPeriod(new SimpleDateFormat( \"yyyy-MM-dd\").parse(\"2012-10-19\")); Date expResult = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\") .parse(\"2012-10-01T00:00:00\"); Date result = instance.getStartDate(); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Api importApiFromSwaggerJSON(Api api, String swaggerAsString, boolean override) throws IOException { List<Resource> resources; if (override) { resourceService.deleteAllFromApi(api.getId()); resources = new ArrayList<>(); } else { resources = resourceService.list(api.getId(), new ResourceDTO()); } Swagger swagger = new Swagger20Parser().parse(swaggerAsString); readTags(swagger.getTags(), resources, api.getId()); readPaths(swagger.getPaths(), api.getBasePath(), resources, api.getId()); api.setResources(new HashSet<>(resources)); return api; }### Assistant: @Test public void importApiFromSwaggerJSONWithoutOverride() throws IOException { importApiFromSwaggerJSON(false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: String binding() { return plugin().getEditingColStringValue(); }### Assistant: @Test public void testBinding() throws Exception { page.binding(); verify(plugin).getEditingColStringValue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void put(K key, VersionedItem<V> value) { putInternal(key, value, versionedItem -> offHeapCache.put(key, versionedItem)); }### Assistant: @Test public void put() { final String key = \"key1\", value = \"valueA\"; cache.put(key, new SimpleItem(value)); verify(cache.offHeapCache).put(key, new SimpleItem<>(0, value)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String removeDomainPrefix(String objectName, String domainName, String objectPrefix) { String valPrefix = domainName + \":\" + objectPrefix; if (objectName.startsWith(valPrefix)) { objectName = objectName.substring(valPrefix.length()); } return objectName; }### Assistant: @Test public void testRemoveDomainPrefix() { assertEquals(\"role1\", ZMSUtils.removeDomainPrefix(\"role1\", \"domain1\", \"role.\")); assertEquals(\"role1\", ZMSUtils.removeDomainPrefix(\"domain1:role.role1\", \"domain1\", \"role.\")); assertEquals(\"domain1:role.role1\", ZMSUtils.removeDomainPrefix(\"domain1:role.role1\", \"domain2\", \"role.\")); assertEquals(\"domain1:role.role1\", ZMSUtils.removeDomainPrefix(\"domain1:role.role1\", \"domain1\", \"policy.\")); assertEquals(\"policy1\", ZMSUtils.removeDomainPrefix(\"domain1:policy.policy1\", \"domain1\", \"policy.\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isValidNcNameStart(int c) { return c < NUMBER_OF_CHARACTERS && (MASKS[c] & NCNAME_START_CHARACTER) != 0; }### Assistant: @Test public void shouldNotAllowDigitAsFirstCharacterInNcName() { assertThat(XmlCharacters.isValidNcNameStart('0')).isFalse(); assertThat(XmlCharacters.isValidNcNameStart('1')).isFalse(); assertThat(XmlCharacters.isValidNcNameStart('2')).isFalse(); assertThat(XmlCharacters.isValidNcNameStart('3')).isFalse(); assertThat(XmlCharacters.isValidNcNameStart('4')).isFalse(); assertThat(XmlCharacters.isValidNcNameStart('5')).isFalse(); assertThat(XmlCharacters.isValidNcNameStart('6')).isFalse(); assertThat(XmlCharacters.isValidNcNameStart('7')).isFalse(); assertThat(XmlCharacters.isValidNcNameStart('8')).isFalse(); assertThat(XmlCharacters.isValidNcNameStart('9')).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void main(String[] args) { AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>()); service.execute(new ArithmeticSumTask(1000)); service.execute(new ArithmeticSumTask(500)); service.execute(new ArithmeticSumTask(2000)); service.execute(new ArithmeticSumTask(1)); }### Assistant: @Test public void test() throws InterruptedException, ExecutionException { App.main(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public XMLEvent nextEvent() throws XMLStreamException { XMLEvent currentEvent = peek(); if (currentEvent == null) { throw new XMLStreamException(\"no more events\"); } currentEventType = currentEvent.getEventType(); peekedEvent = null; return currentEvent; }### Assistant: @Test public void testStartEndElement() throws XMLStreamException { XMLEventReader reader = createXmlEventReader(\"<alice/>\"); Assert.assertEquals(XMLStreamConstants.START_ELEMENT, reader.nextEvent().getEventType()); Assert.assertEquals(XMLStreamConstants.END_ELEMENT, reader.nextEvent().getEventType()); reader = createXmlEventReader(\"<alice></alice>\"); Assert.assertEquals(XMLStreamConstants.START_ELEMENT, reader.nextEvent().getEventType()); Assert.assertEquals(XMLStreamConstants.END_ELEMENT, reader.nextEvent().getEventType()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean supportsParameter(final MethodParameter parameter) { return TransactionTokenContext.class.equals(parameter .getParameterType()); }### Assistant: @Test public void testSupportsParameter01() { TransactionTokenContextHandlerMethodArgumentResolver resolver = new TransactionTokenContextHandlerMethodArgumentResolver(); MethodParameter parameter = mock(MethodParameter.class); Mockito.<Class<?>> when(parameter.getParameterType()).thenReturn( TransactionTokenContext.class); boolean result = resolver.supportsParameter(parameter); assertThat(result, is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public URL getDescribeFeatureTypeURLGet(String typeName) { final String outputFormat = \"text/xml; subtype=gml/3.1.1\"; return getDescribeFeatureTypeURLGet(typeName, outputFormat); }### Assistant: @Test public void testGetDescribeFeatureTypeURLGet() throws IOException { createTestProtocol(GEOS_ARCHSITES.CAPABILITIES); try { wfs.getDescribeFeatureTypeURLGet(\"nonExistentTypeName\"); fail(\"Expected IAE\"); } catch (IllegalArgumentException e) { assertTrue(true); } URL url; url = wfs.getDescribeFeatureTypeURLGet(GEOS_ARCHSITES.FEATURETYPENAME); assertNotNull(url); String externalForm = url.toExternalForm(); externalForm = URLDecoder.decode(externalForm, \"UTF-8\"); assertTrue(externalForm.startsWith(\"http: assertTrue(externalForm.contains(\"REQUEST=DescribeFeatureType\")); assertTrue(externalForm.contains(\"TYPENAME=sf:archsites\")); assertTrue(externalForm.contains(\"VERSION=1.1.0\")); assertTrue(externalForm.contains(\"SERVICE=WFS\")); assertTrue(externalForm.contains(\"NAMESPACE=xmlns(sf=http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final MutateFeedItemTargetsResponse mutateFeedItemTargets( String customerId, List<FeedItemTargetOperation> operations) { MutateFeedItemTargetsRequest request = MutateFeedItemTargetsRequest.newBuilder() .setCustomerId(customerId) .addAllOperations(operations) .build(); return mutateFeedItemTargets(request); }### Assistant: @Test @SuppressWarnings(\"all\") public void mutateFeedItemTargetsTest() { MutateFeedItemTargetsResponse expectedResponse = MutateFeedItemTargetsResponse.newBuilder().build(); mockFeedItemTargetService.addResponse(expectedResponse); String customerId = \"customerId-1772061412\"; List<FeedItemTargetOperation> operations = new ArrayList<>(); MutateFeedItemTargetsResponse actualResponse = client.mutateFeedItemTargets(customerId, operations); Assert.assertEquals(expectedResponse, actualResponse); List<AbstractMessage> actualRequests = mockFeedItemTargetService.getRequests(); Assert.assertEquals(1, actualRequests.size()); MutateFeedItemTargetsRequest actualRequest = (MutateFeedItemTargetsRequest) actualRequests.get(0); Assert.assertEquals(customerId, actualRequest.getCustomerId()); Assert.assertEquals(operations, actualRequest.getOperationsList()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean canProcess(final Map params) { if (params == null) { return false; } try { URL url = (URL) URL.lookUp(params); if( !\"http\".equalsIgnoreCase(url.getProtocol()) && !\"https\".equalsIgnoreCase(url.getProtocol())){ return false; } } catch (Exception e) { return false; } if (params.containsKey(USERNAME.key)) { if (!params.containsKey(PASSWORD.key)) { return false; } } else { if (params.containsKey(PASSWORD.key)) { return false; } } return true; }### Assistant: @Test public void testCanProcess() { assertFalse(dsf.canProcess(params)); params.put(WFSDataStoreFactory.URL.key, \"http: assertTrue(dsf.canProcess(params)); params.put(WFSDataStoreFactory.USERNAME.key, \"groldan\"); assertFalse(dsf.canProcess(params)); params.put(WFSDataStoreFactory.PASSWORD.key, \"secret\"); assertTrue(dsf.canProcess(params)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void showLoading() { mBinding.errorView.setVisibility(View.INVISIBLE); mBinding.loadingView.setVisibility(View.VISIBLE); mBinding.recyclerView.setVisibility(View.INVISIBLE); }### Assistant: @Test public void testShowLoading() throws Exception { mListingActivity.showLoading(); assertTrue(\"Loading indicator is not visible\", mProgressBar.isShown()); assertFalse(\"content is visible\", mRecyclerView.isShown()); assertFalse(\"Error textview is visible\", mErrorTextView.isShown()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Map<String, String>> pipelinePossibleStates(NegativeBoundHiveTinyIntTag action, List<Map<String, String>> possibleStateList) { final String minVALUE = \"-128\"; final String maxVALUE = \"127\"; return returnStates(action, possibleStateList, buildNumericData(action, minVALUE, maxVALUE, false)); }### Assistant: @Test public void maxTest3() { Map<String, String> variableDomains = new HashMap<>(); NegativeBoundHiveTinyInt.NegativeBoundHiveTinyIntTag neg = new NegativeBoundHiveTinyInt.NegativeBoundHiveTinyIntTag(); NegativeBoundHiveTinyInt test = new NegativeBoundHiveTinyInt(); List<Map<String, String>> listOfMaps = new LinkedList<>(); ArrayList<String> al = new ArrayList<>(); variableDomains.put(\"test\", \"\"); listOfMaps.add(variableDomains); neg.setMin(\"0\"); neg.setMax(\"12342\"); neg.setNullable(\"true\"); neg.setName(\"test\"); List<Map<String, String>> list = test.pipelinePossibleStates(neg, listOfMaps); Assert.assertTrue(list.get(0).get(\"test\").equals(\"-1\")); Assert.assertTrue(list.get(1).get(\"test\").equals(\"128\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean acquire(String group, String clientIP) { RateConfig config = this.config.get(group); if (config == null) { logger.warn(\"can not find group, group={}\", group); return true; } String key = group + \"/\" + clientIP; Rate rate; synchronized (this) { rate = rates.computeIfAbsent(key, k -> new Rate(config.maxPermits)); } long currentTime = System.nanoTime(); return rate.acquire(currentTime, config.maxPermits, config.fillRatePerNano); }### Assistant: @Test void acquire() { RateControl.Rate rate = new RateControl.Rate(1); rate.lastUpdateTime = 100; boolean result = rate.acquire(101, 2, 1); assertThat(result).isTrue(); assertThat(rate.currentPermits).isEqualTo(1); result = rate.acquire(101, 2, 1); assertThat(result).isTrue(); assertThat(rate.currentPermits).isEqualTo(0); result = rate.acquire(101, 2, 1); assertThat(result).isFalse(); result = rate.acquire(102, 2, 1); assertThat(result).isTrue(); assertThat(rate.currentPermits).isEqualTo(0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public T intentExtras(@Nullable final Bundle extras) { this.intentExtras = extras; return (T) this; }### Assistant: @Test public void testIntentExtras() { final TestTransition transition = new TestTransition(); transition.intentExtras().putString(\"extra_text\", \"Extra text.\"); transition.intentExtras().putInt(\"extra_int\", 1000); assertThat(transition.intentExtras().getString(\"extra_text\"), is(\"Extra text.\")); assertThat(transition.intentExtras().getInt(\"extra_int\"), is(1000)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @MainThread public <S> void addSource(LiveData<S> source, Observer<S> onChanged) { Source<S> e = new Source<>(source, onChanged); Source<?> existing = mSources.putIfAbsent(source, e); if (existing != null && existing.mObserver != onChanged) { throw new IllegalArgumentException( \"This source was already added with the different observer\"); } if (existing != null) { return; } if (hasActiveObservers()) { e.plug(); } }### Assistant: @Test public void testAddSourceToInActive() { mSource.setValue(\"flatfoot\"); mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP); Observer observer = mock(Observer.class); mMediator.addSource(mSource, observer); verify(observer, never()).onChanged(any()); mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START); verify(observer).onChanged(\"flatfoot\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Mono<MessageData> editMessage(long channelId, long messageId, MessageEditRequest request) { return Routes.MESSAGE_EDIT.newRequest(channelId, messageId) .body(request) .exchange(getRouter()) .bodyToMono(MessageData.class); }### Assistant: @Test public void testEditMessage() { MessageEditRequest req = MessageEditRequest.builder() .content(\"This is a message I can edit.\") .build(); channelService.editMessage(permanentChannel, editMessage, req).block(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Long reassignWhenNotStarted(long taskId, String timeExpression, OrganizationalEntity... orgEntities) throws TaskNotFoundException { return reassignWhenNotStarted(null, taskId, timeExpression, orgEntities); }### Assistant: @Test(timeout=10000) public void testReassignNotStartedInvalidOrgEntities() throws Exception { processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"org.jbpm.writedocument\"); Assertions.assertThat(processInstanceId).isNotNull(); List<TaskSummary> tasks = runtimeDataService.getTasksAssignedAsPotentialOwner(\"salaboy\", new QueryFilter()); Assertions.assertThat(tasks).hasSize(1); TaskSummary task = tasks.get(0); Assertions.assertThatThrownBy(() -> { userTaskAdminService.reassignWhenNotStarted(task.getId(), \"2s\", null); }) .hasMessage(\"Invalid org entity\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: String determineGuestHostAndPort() { return defaultString(getenv(GUEST_URI_ENV_PROPERTY_KEY), \"localhost:8080\"); }### Assistant: @Test public void if_the_environment_variable_is_set_the_guest_url_is_configured() { mockStatic(System.class); final String expectedConfig = \"HOST:PORT\"; when(System.getenv(GUEST_URI_ENV_PROPERTY_KEY)).thenReturn(expectedConfig); assertThat(new GuestFeedSubscriber().determineGuestHostAndPort()).isEqualTo(expectedConfig); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CloseableIterator<Index> getIndices( final Map<StatisticsId, InternalDataStatistics<SimpleFeature, ?, ?>> stats, final QueryConstraints query, final Index[] indices, final DataTypeAdapter<?> adapter, final Map<QueryHint, Object> hints) { return new CloseableIterator<Index>() { Index nextIdx = null; boolean done = false; int i = 0; @Override public boolean hasNext() { double indexMax = -1; Index bestIdx = null; while (!done && (i < indices.length)) { nextIdx = indices[i++]; if (nextIdx.getIndexStrategy().getOrderedDimensionDefinitions().length == 0) { continue; } final List<MultiDimensionalNumericData> queryRanges = query.getIndexConstraints(nextIdx); if (IndexUtils.isFullTableScan(queryRanges)) { if (bestIdx == null) { bestIdx = nextIdx; } } else { double totalMax = 0; for (final MultiDimensionalNumericData qr : queryRanges) { final double[] dataRangePerDimension = new double[qr.getDimensionCount()]; for (int d = 0; d < dataRangePerDimension.length; d++) { dataRangePerDimension[d] = qr.getMaxValuesPerDimension()[d] - qr.getMinValuesPerDimension()[d]; } totalMax += IndexUtils.getDimensionalBitsUsed( nextIdx.getIndexStrategy(), dataRangePerDimension); } if (totalMax > indexMax) { indexMax = totalMax; bestIdx = nextIdx; } } } nextIdx = bestIdx; done = true; return nextIdx != null; } @Override public Index next() throws NoSuchElementException { if (nextIdx == null) { throw new NoSuchElementException(); } final Index returnVal = nextIdx; nextIdx = null; return returnVal; } @Override public void remove() {} @Override public void close() {} }; }### Assistant: @Test public void testChooseTemporalWithoutStatsBlockHour() { final ChooseLocalityPreservingQueryStrategy strategy = new ChooseLocalityPreservingQueryStrategy(); final Iterator<Index> it = getIndices( new HashMap<StatisticsId, InternalDataStatistics<SimpleFeature, ?, ?>>(), new BasicQueryByClass(createConstraints(BLOCK, BLOCK, HOUR)), strategy); assertTrue(it.hasNext()); assertEquals(indices.get(1).getName(), it.next().getName()); assertFalse(it.hasNext()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int getImplicitHydrogenCount(IAtomContainer atomContainer, IAtom atom) { return atom.getImplicitHydrogenCount() == CDKConstants.UNSET ? 0 : atom.getImplicitHydrogenCount(); }### Assistant: @Test public void testGetImplicitHydrogenCount() throws InvalidSmilesException { String rawMolSmiles = \"[H]POOSC(Br)C(Cl)C(F)I\"; SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer atomContainer = sp.parseSmiles(rawMolSmiles); IAtom atom = null; for (IAtom a : atomContainer.atoms()) { if (a.getSymbol().equalsIgnoreCase(\"P\")) { atom = a; break; } } int expResult = 1; int result = SMSDNormalizer.getImplicitHydrogenCount(atomContainer, atom); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public static <L, R> BiCollection<L, R> of() { return (BiCollection<L, R>) EMPTY; }### Assistant: @Test public void testBuilder_add() { assertKeyValues(BiStream.builder().add(\"one\", 1).build().collect(BiCollection::toBiCollection)) .containsExactlyEntriesIn(ImmutableMultimap.of(\"one\", 1)) .inOrder(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Map<String, Object> buildPages( Integer selectedPage, int totalPages, int depthSize ){ logger.trace(\"Map<String,Object> buildPages(selectedPage= {},totalPages={},depthSize={})\",new Object[]{selectedPage,totalPages,depthSize}); Map<String,Object> pagination = new HashMap<String, Object>(); int returnSize = Math.min(((depthSize*2)+1),totalPages); Integer[] pages = new Integer[returnSize]; if(selectedPage <= depthSize+1){ logger.trace(\"Map<String,Object> buildPages(pages) Keeping to left side no need to scroll \"); for(int i =1; i <= returnSize ; i++){ pages[i-1]=i; } }else if( selectedPage > totalPages - (depthSize*2)){ logger.trace(\"Map<String,Object> buildPages(pages) Working from right <- left, not enough spaces on the right {}\",returnSize); for(int i =0 ; i < returnSize; i++){ pages[i] = (totalPages-returnSize+1)+i; } }else{ pages[depthSize]=selectedPage; for(int i=0; i< depthSize; i++){ pages[i]= selectedPage-(depthSize-i); pages[depthSize+1+i] = selectedPage+1+i; } } pagination.put(\"first\",1); pagination.put(\"pages\",pages); pagination.put(\"last\",totalPages); pagination.put(\"selected\",selectedPage); return pagination; }### Assistant: @Test public void testScrollRightFitSize(){ Map<String,Object> stringObjectMap = paginationBuilderService.buildPages(6, 10, 4); Integer[] pages = (Integer[]) stringObjectMap.get(\"pages\"); Integer selected = (Integer) stringObjectMap.get(\"selected\"); Assert.assertEquals(6,selected, 0); Assert.assertEquals(9, pages.length); testPages(pages, new Integer[]{ 2,3,4,5,6,7,8,9,10 }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void editSchedule(){ CSQueue root = scheduler.getRootQueue(); Resource clusterResources = Resources.clone(scheduler.getClusterResource()); containerBasedPreemptOrKill(root, clusterResources); }### Assistant: @Test public void testZeroGuarOverCap() { int[][] qData = new int[][] { { 200, 100, 0, 99, 0, 100, 100 }, { 200, 200, 200, 200, 200, 200, 200 }, { 170, 170, 60, 20, 90, 0, 0 }, { 85, 50, 30, 10, 10, 20, 20 }, { 0, 0, 0, 0, 0, 0, 0 }, { 4, 3, 1, 1, 1, 1, 1 }, { -1, -1, 1, 1, 1, -1, 1 }, { 2, 3, 0, 0, 0, 1, 0 }, }; ProportionalCapacityPreemptionPolicy policy = buildPolicy(qData); policy.editSchedule(); verify(mDisp, times(15)).handle(argThat(new IsPreemptionRequestFor(appC))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String parse(String text) { StringBundler sb = new StringBundler(); List<BBCodeItem> bbCodeItems = _bbCodeParser.parse(text); Stack<String> tags = new Stack<>(); IntegerWrapper marker = new IntegerWrapper(); for (; marker.getValue() < bbCodeItems.size(); marker.increment()) { BBCodeItem bbCodeItem = bbCodeItems.get(marker.getValue()); int type = bbCodeItem.getType(); if (type == BBCodeParser.TYPE_DATA) { handleData(sb, bbCodeItems, tags, marker, bbCodeItem); } else if (type == BBCodeParser.TYPE_TAG_END) { handleTagEnd(sb, tags); } else if (type == BBCodeParser.TYPE_TAG_START) { handleTagStart(sb, bbCodeItems, tags, marker, bbCodeItem); } } return sb.toString(); }### Assistant: @Test public void testURLWithAccents() { String urlWithAccents = \"https: String expected = \"<a href=\\\"\" + HtmlUtil.escapeHREF(urlWithAccents) + \"\\\">link</a>\"; String actual = _htmlBBCodeTranslatorImpl.parse( \"[url=\" + urlWithAccents + \"]link[/url]\"); Assert.assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Database addDatabase(InspectionResults results) { Database database = results.getObject(DATABASE); if (database == null) { results.addObject(database = new Database()); } return database; }### Assistant: @Test public void testAddDatabase() { InspectionResults inspectionResults = mock(InspectionResults.class); Database database = addDatabase(inspectionResults); verify(inspectionResults).addObject(database); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ImmutableList<Complex> find(double a, double b, double c) { if (a == 0) { Preconditions.checkArgument(b != 0, \"No solutions can be found for an equation of the form c = 0\"); return ImmutableList.of(new Complex(-c / b, 0)); } double discriminant = Math.pow(b, 2) - 4 * a * c; if (discriminant < 0) { Complex rootOne = new Complex(-b / (2 * a), Math.sqrt(-discriminant) / (2 * a)); Complex rootTwo = new Complex(rootOne.getReal(), -rootOne.getImaginary()); return ImmutableList.of(rootOne, rootTwo); } Complex rootOne = new Complex((-b + Math.sqrt(discriminant)) / (2 * a), 0d); Complex rootTwo = new Complex((-b - Math.sqrt(discriminant)) / (2 * a), 0d); return ImmutableList.of(rootOne, rootTwo); }### Assistant: @Test void find_whenBothRootsAreReal_thenReturnsCorrectRoots() { ImmutableList<Complex> roots = QuadraticRootFinder.find(2, -3, 1); ImmutableList<Pair<Double, Double>> expectedRoots = ImmutableList.of( Pair.of(1.0, 0.0), Pair.of(0.5, 0.0) ); assertEquals(expectedRoots, roots); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<String> getCustomGroupNames(final String careProviderId) { return getHibernateTemplate().execute( session -> new Hql() .select( medicationCustomGroup.get(\"name\"), medicationCustomGroup.get(\"sortOrder\") ) .distinct() .from( medicationCustomGroupMember.innerJoin(\"medicationCustomGroup\").as(medicationCustomGroup) ) .where( medicationCustomGroup.get(\"careProviderId\").eq(careProviderId) ) .orderBy(medicationCustomGroup.get(\"sortOrder\")) .buildQuery(session, Object[].class) .list( new TupleProcessor<String>() { @Override protected String process(final boolean hasNextTuple) throws ProcessingException { return next(); } }) ); }### Assistant: @Test @DatabaseSetup(\"HibernateMedicationsDaoTest.testCustomGroups.xml\") public void testGetCustomGroupNames() { final Set<Long> medicationCodes = new HashSet<>(); medicationCodes.add(1L); medicationCodes.add(2L); medicationCodes.add(3L); medicationCodes.add(4L); final Map<Long, Pair<String, Integer>> resultMapPek = medicationsDao.getCustomGroupNameSortOrderMap(\"1\", medicationCodes); assertEquals(1L, (long)resultMapPek.size()); assertEquals(\"Paracetamol Kardio Hosp\", resultMapPek.get(1L).getFirst()); assertEquals(Integer.valueOf(2), resultMapPek.get(1L).getSecond()); final Map<Long, Pair<String, Integer>> resultMapKookit = medicationsDao.getCustomGroupNameSortOrderMap(\"2\", medicationCodes); assertEquals(4L, (long)resultMapKookit.size()); assertEquals(\"Paracetamol KOOKIT EIT\", resultMapKookit.get(1L).getFirst()); assertEquals(Integer.valueOf(1), resultMapKookit.get(1L).getSecond()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ThingModifyCommandResponseAdapter of(final HeaderTranslator headerTranslator) { return new ThingModifyCommandResponseAdapter(requireNonNull(headerTranslator)); }### Assistant: @Test public void modifyFeaturesResponseToAdaptable() { final TopicPath topicPath = topicPath(TopicPath.Action.MODIFY); final JsonPointer path = JsonPointer.of(\"/features\"); final Adaptable expectedCreated = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path) .withStatus(HttpStatusCode.CREATED) .withValue(TestConstants.FEATURES.toJson(FieldType.notHidden())) .build()) .withHeaders(TestConstants.HEADERS_V_2) .build(); final ModifyFeaturesResponse modifyFeaturesResponseCreated = ModifyFeaturesResponse.created(TestConstants.THING_ID, TestConstants.FEATURES, TestConstants.DITTO_HEADERS_V_2); final Adaptable actualCreated = underTest.toAdaptable(modifyFeaturesResponseCreated, channel); assertWithExternalHeadersThat(actualCreated).isEqualTo(expectedCreated); final Adaptable expectedModified = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path) .withStatus(HttpStatusCode.NO_CONTENT) .withValue(ThingsModelFactory.nullFeatures().toJson()) .build()) .withHeaders(TestConstants.HEADERS_V_2) .build(); final ModifyFeaturesResponse modifyFeaturesResponseModified = ModifyFeaturesResponse.modified(TestConstants.THING_ID, TestConstants.HEADERS_V_2_NO_CONTENT_TYPE); final Adaptable actualModified = underTest.toAdaptable(modifyFeaturesResponseModified, channel); assertWithExternalHeadersThat(actualModified).isEqualTo(expectedModified); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public LookupTable<PDAnnotation> retainRelevantAnnotations(LookupTable<PDPage> relevantPages) { LOG.debug(\"Filtering annotations\"); for (PDPage page : relevantPages.keys()) { try { Set<PDAnnotation> keptAnnotations = new LinkedHashSet<>(); for (PDAnnotation annotation : page.getAnnotations()) { PDAnnotation mapped = annotationsLookup.lookup(annotation); if (nonNull(mapped)) { keptAnnotations.add(mapped); } else { if (annotation instanceof PDAnnotationLink) { processLinkAnnotation(relevantPages, keptAnnotations, (PDAnnotationLink) annotation); } else { processNonLinkAnnotation(relevantPages, keptAnnotations, annotation); } } } relevantPages.lookup(page).setAnnotations(new ArrayList<>(keptAnnotations)); } catch (IOException e) { LOG.warn(\"Failed to process annotations for page\", e); } } return annotationsLookup; }### Assistant: @Test public void links_OnePageNotRelevantOneRelevant() { PDPage destPage = new PDPage(); PDAnnotationLink annotation = new PDAnnotationLink(); PDPageDestination dest = new PDPageFitDestination(); dest.setPage(destPage); annotation.setDestination(dest); PDAnnotationLink annotation2 = new PDAnnotationLink(); PDPageDestination dest2 = new PDPageFitDestination(); dest2.setPage(oldPage); annotation2.setDestination(dest2); List<PDAnnotation> annotations = Arrays.asList(annotation, annotation2); oldPage.setAnnotations(annotations); PDDocument doc = new PDDocument(); doc.addPage(oldPage); LookupTable<PDAnnotation> annotationsLookup = new AnnotationsDistiller(doc).retainRelevantAnnotations(lookup); assertEquals(annotationsLookup.lookup(annotation2), newPage.getAnnotations().get(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override DataObject buildSetParameterData(final ConfigurationObjectDto configurationToSet, final ConfigurationObjectDto configurationOnDevice) throws ProtocolAdapterException { final List<DataObject> dataObjects = new LinkedList<>(); this.addGprsOperationMode(configurationToSet, configurationOnDevice, dataObjects); this.addFlags(configurationToSet, configurationOnDevice, dataObjects); return DataObject.newStructureData(dataObjects); }### Assistant: @Test public void buildSetParameterDataGprsModeOnDevice() throws ProtocolAdapterException { when(this.configurationToSet.getGprsOperationMode()).thenReturn(null); when(this.configurationOnDevice.getGprsOperationMode()).thenReturn(GPRS_OPERATION_MODE); final DataObject result = this.instance.buildSetParameterData(this.configurationToSet, this.configurationOnDevice); final List<DataObject> elements = result.getValue(); final int value = elements.get(0).getValue(); assertThat(value).isEqualTo(GPRS_OPERATION_MODE.getNumber()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String durationTranslator(String sonarDuration) { String daysPart = \"P\" + (sonarDuration.contains(\"d\") ? sonarDuration.substring(0, sonarDuration.indexOf('d')) + \"D\" : \"\"); String timePart = (sonarDuration.contains(\"d\") ? sonarDuration.substring(sonarDuration.indexOf('d') + 1) : sonarDuration); return daysPart + (timePart.isEmpty() ? \"\" : \"T\" + timePart.replaceAll(\"min\", \"M\").replaceAll(\"h\", \"H\")); }### Assistant: @Test public void testDateWithDaysWorks() { String input = \"1d2h50min\"; assertEquals(\"P1DT2H50M\", Utils.durationTranslator(input)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected Result check() { try { ListenableFuture<Void> nopFuture = distributedStore.nop(); nopFuture.get(TIMEOUT, TIMEOUT_TIME_UNIT); return Result.healthy(\"server is leader\"); } catch (TimeoutException e) { return Result.unhealthy(String.format(\"timed out after attempting to reach cluster for %d %s\", TIMEOUT, TIMEOUT_TIME_UNIT)); } catch (ExecutionException e) { if (e.getCause() instanceof NotLeaderException) { NotLeaderException leaderException = (NotLeaderException) e.getCause(); String leader = leaderException.getLeader(); if (leader != null) { return Result.healthy(String.format(\"server not leader, but cluster has leader: %s\", leader)); } else { return Result.unhealthy(\"cluster does not have a leader\"); } } else { return getDefaultUnhealthyResult(e.getCause()); } } catch (Exception e) { return getDefaultUnhealthyResult(e); } }### Assistant: @Test public void shouldReturnUnhealthyResultIfCallToDistributedStoreThrowsException1() { IllegalStateException failureCause = new IllegalStateException(\"failed\"); when(distributedStore.nop()).thenReturn(Futures.<Void>immediateFailedFuture(failureCause)); assertThat(check.check().isHealthy(), equalTo(false)); assertThat(check.check().getError(), Matchers.<Throwable>sameInstance(failureCause)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting public ShardDataTree getDataStore() { return store; }### Assistant: @Test public void testTransactionCommitWithSubsequentExpiredCohortEntry() { dataStoreContextBuilder.shardTransactionCommitTimeoutInSeconds(1); final ShardTestKit testKit = new ShardTestKit(getSystem()); final TestActorRef<Shard> shard = actorFactory.createTestActor( newShardProps().withDispatcher(Dispatchers.DefaultDispatcherId()), \"testTransactionCommitWithSubsequentExpiredCohortEntry\"); ShardTestKit.waitUntilLeader(shard); final Duration duration = Duration.ofSeconds(5); final ShardDataTree dataStore = shard.underlyingActor().getDataStore(); final TransactionIdentifier transactionID1 = nextTransactionId(); shard.tell(prepareBatchedModifications(transactionID1, TestModel.TEST_PATH, ImmutableNodes.containerNode(TestModel.TEST_QNAME), false), testKit.getRef()); testKit.expectMsgClass(duration, ReadyTransactionReply.class); shard.tell(new CanCommitTransaction(transactionID1, CURRENT_VERSION).toSerializable(), testKit.getRef()); testKit.expectMsgClass(duration, CanCommitTransactionReply.class); final TransactionIdentifier transactionID2 = nextTransactionId(); shard.tell(prepareBatchedModifications(transactionID2, TestModel.TEST_PATH, ImmutableNodes.containerNode(TestModel.TEST_QNAME), false), testKit.getRef()); testKit.expectMsgClass(duration, ReadyTransactionReply.class); final TransactionIdentifier transactionID3 = nextTransactionId(); final DataTreeModification modification3 = dataStore.newModification(); new WriteModification(TestModel.TEST2_PATH, ImmutableNodes.containerNode(TestModel.TEST2_QNAME)) .apply(modification3); modification3.ready(); final ReadyLocalTransaction readyMessage = new ReadyLocalTransaction(transactionID3, modification3, true, Optional.empty()); shard.tell(readyMessage, testKit.getRef()); shard.tell(new CommitTransaction(transactionID1, CURRENT_VERSION).toSerializable(), testKit.getRef()); testKit.expectMsgClass(duration, CommitTransactionReply.class); testKit.expectMsgClass(duration, CommitTransactionReply.class); final NormalizedNode<?, ?> node = readStore(shard, TestModel.TEST2_PATH); assertNotNull(TestModel.TEST2_PATH + \" not found\", node); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void apply(List<ChangeScript> changeScripts) { String filename = syntax + \"_\" + getTemplateQualifier() + \".ftl\"; try { Map<String, Object> model = new HashMap<String, Object>(); model.put(\"scripts\", changeScripts); model.put(\"changeLogTableName\", changeLogTableName); model.put(\"delimiter\", delimiter); model.put(\"separator\", delimiterType == DelimiterType.row ? \"\\n\" : \"\"); try { Template template = configuration.getTemplate(filename); template.process(model, writer); } finally { writer.close(); } } catch (FileNotFoundException ex) { throw new UsageException(\"Could not find template named \" + filename + \"\\n\" + \"Check that you have got the name of the database syntax correct.\", ex); } catch (Exception e) { throw new RuntimeException(e); } }### Assistant: @Test public void shouldThrowUsageExceptionWhenTemplateNotFound() throws Exception { TemplateBasedApplier applier = new TemplateBasedApplier(new NullWriter(), \"some_complete_rubbish\", null, \";\", DelimiterType.normal, null); try { applier.apply(null); Assert.fail(\"expected exception\"); } catch (UsageException e) { assertThat(e.getMessage(), is(\"Could not find template named some_complete_rubbish_apply.ftl\\n\" + \"Check that you have got the name of the database syntax correct.\")); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ParacetamolRuleResult applyRule( @Nonnull final ParacetamolRuleParameters parameters, @Nonnull final DateTime actionTimestamp, @Nonnull final Locale locale) { Preconditions.checkNotNull(parameters, \"parameters must not be null\"); Preconditions.checkNotNull(actionTimestamp, \"actionTimestamp must not be null\"); Preconditions.checkNotNull(locale, \"locale must not be null\"); final MedicationParacetamolRuleType medicationParacetamolRuleType = parameters.getMedicationParacetamolRuleType(); if (medicationParacetamolRuleType == MedicationParacetamolRuleType.FOR_THERAPY) { final TherapyDto therapyDto = ((ParacetamolRuleForTherapyParameters)parameters).getTherapyDto(); final List<MedicationDataDto> medicationDataDtoList = ((ParacetamolRuleForTherapyParameters)parameters).getMedicationDataDtoList(); Preconditions.checkNotNull(therapyDto, \"therapyDto must not be null\"); Preconditions.checkNotNull(medicationDataDtoList, \"medicationDataDtoList must not be null\"); Preconditions.checkArgument(!medicationDataDtoList.isEmpty(), \"medicationDataDtoList must not be empty\"); return applyRuleForTherapy( therapyDto, medicationDataDtoList, parameters.getPatientWeight(), parameters.getPatientAgeInYears(), locale); } else if (medicationParacetamolRuleType == MedicationParacetamolRuleType.FOR_THERAPIES) { final List<TherapyDto> therapies = ((ParacetamolRuleForTherapiesParameters)parameters).getTherapies(); final Interval searchInterval = ((ParacetamolRuleForTherapiesParameters)parameters).getSearchInterval(); final String patientId = ((ParacetamolRuleForTherapiesParameters)parameters).getPatientId(); Preconditions.checkNotNull(therapies, \"therapies must not be null\"); Preconditions.checkNotNull(searchInterval, \"searchInterval must not be null\"); Preconditions.checkNotNull(patientId, \"patientId must not be null\"); return applyRuleForTherapies( therapies, parameters.getPatientWeight(), parameters.getPatientAgeInYears(), actionTimestamp, patientId, locale); } else if (medicationParacetamolRuleType == MedicationParacetamolRuleType.FOR_ADMINISTRATION) { final TherapyDoseDto therapyDoseDto = ((ParacetamolRuleForAdministrationParameters)parameters).getTherapyDoseDto(); final String administrationId = ((ParacetamolRuleForAdministrationParameters)parameters).getAdministrationId(); final String taskId = ((ParacetamolRuleForAdministrationParameters)parameters).getTaskId(); final TherapyDto therapyDto = ((ParacetamolRuleForAdministrationParameters)parameters).getTherapyDto(); final Interval searchInterval = ((ParacetamolRuleForAdministrationParameters)parameters).getSearchInterval(); final String patientId = ((ParacetamolRuleForAdministrationParameters)parameters).getPatientId(); Preconditions.checkNotNull(searchInterval, \"searchInterval must not be null\"); Preconditions.checkNotNull(patientId, \"patientId must not be null\"); return applyRuleForAdministration( therapyDoseDto, administrationId, taskId, therapyDto, parameters.getPatientWeight(), parameters.getPatientAgeInYears(), searchInterval, actionTimestamp, patientId, locale); } else { throw new IllegalArgumentException(\"Not supported medication paracetamol rule type\"); } }### Assistant: @Test(expected = NullPointerException.class) public void testApplyRuleForTherapyNoNullParameters3() throws Exception { final ParacetamolRuleForTherapyParameters parameters = new ParacetamolRuleForTherapyParameters(); parameters.setMedicationParacetamolRuleType(MedicationParacetamolRuleType.FOR_THERAPY); parameters.setMedicationDataDtoList(Collections.emptyList()); final ParacetamolRuleResult paracetamolRuleResult = paracetamolRule.applyRule( parameters, new DateTime(), new Locale(\"si Sl\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SecurityManager getSecurityManager() { return securityManager; }### Assistant: @Test void testGetSecurityManager() { DefaultWebApplication webApp = new DefaultWebApplication(); try { webApp.getSecurityManager(); } catch (Exception exception) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder name(String name) { return new Builder(name); }### Assistant: @Test public void testTemplateMultipleValues2() { final MetricName.MetricNameTemplate metricNameTemplate = name(\"foo\").templateFor(\"bar\", \"qux\"); assertEquals(name(\"foo\").tag(\"bar\", \"baz\").tag(\"qux\", \"q\").build(), metricNameTemplate.build(\"baz\", \"q\")); assertSame(metricNameTemplate.build(\"baz\", \"quux\"), metricNameTemplate.build(\"baz\", \"quux\")); assertNotEquals(metricNameTemplate.build(\"baz\", \"quux\"), metricNameTemplate.build(\"baz2\", \"quux\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] hmacSha1(byte[] data, byte[] key) { try { SecretKeySpec signingKey = new SecretKeySpec(key, \"HmacSHA1\"); Mac mac = Mac.getInstance(\"HmacSHA1\"); mac.init(signingKey); return mac.doFinal(data); } catch (Exception e) { throw new RuntimeException(e); } }### Assistant: @Test public void findIntegrity() throws DecoderException { String bytes = \"000100502112a442e9dec49e8038338d00f9a79c0006001162323064306166343a623230643061663400000000250000002400046e7f00ff802a00081eb6ff2cf7589cd700080014020b27ff78fbd931427c9f4518b9f40d5415562e8028000473cf7c86\"; String noFinger2 = \"000100482112a442e9dec49e8038338d00f9a79c0006001162323064306166343a623230643061663400000000250000002400046e7f00ff802a00081eb6ff2cf7589cd7\"; byte[] msg = Hex.decodeHex(noFinger2.toCharArray()); byte[] mac = Hex.decodeHex(\"020b27ff78fbd931427c9f4518b9f40d5415562e\".toCharArray()); String password = \"230f754083a9070aff5bd1ced7654a9c\"; byte[] compMac = SignalUtil.hmacSha1(msg,password.getBytes()); System.out.println(Hex.encodeHexString(mac) +\" \" + Hex.encodeHexString(compMac)); assertTrue(Arrays.equals(mac,compMac)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void collect() { processDelayedRegisterStatistics(); for (int i = 0; i < statistics.size(); i++) { AbstractStatistic statistic = statistics.get(i); try { statistic.collect(sink); } catch (Throwable ignored) { } } if (printer != null) printer.accept(System.currentTimeMillis(), sink.flush()); }### Assistant: @Test public void collect() { AtomicBoolean executed = new AtomicBoolean(false); TestStatisticCollector statisticCollector = new TestStatisticCollector((t, s) -> { if (retries.get() >= 0) Assert.assertEquals(\"foo[name=value]\", s); else Assert.assertEquals(\"foo[name=value], delayed[name=value]\", s); executed.set(true); }); statisticCollector.register(new TestStatistic(\"foo\")); statisticCollector.delayRegister(this::createTestStatistic); for (int i = 0; i < RETRIES_COUNT; i++) statisticCollector.collect(); Assert.assertTrue(executed.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static List<String> nameSegments(ObjectName objectName) { List<String> segments = new ArrayList<>(); segments.add(objectName.getDomain()); for (String s : objectName.getKeyPropertyListString().split(\",\")) { int index = s.indexOf('='); if (index < 0) { continue; } String key = objectName.getKeyProperty(s.substring(0, index)); if (s.substring(0, index).equals(\"type\")) { segments.add(1, key); } else { segments.add(key); } } return segments; }### Assistant: @Test public void objectNameSplitting() throws MalformedObjectNameException { assertThat(RBACDecorator.nameSegments(new ObjectName(\"a.b:type=a,name=b\")).toArray(new String[3]), equalTo(new String[]{\"a.b\", \"a\", \"b\"})); assertThat(RBACDecorator.nameSegments(new ObjectName(\"a.b:name=b,type=a\")).toArray(new String[3]), equalTo(new String[]{\"a.b\", \"a\", \"b\"})); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Scheduled(fixedDelayString = \"${spring.cloud.kubernetes.discovery.catalogServicesWatchDelay:30000}\") public void catalogServicesWatch() { try { List<String> previousState = this.catalogEndpointsState.get(); List<Endpoints> endpoints = this.properties.isAllNamespaces() ? this.kubernetesClient.endpoints().inAnyNamespace().withLabels(properties.getServiceLabels()) .list().getItems() : this.kubernetesClient.endpoints().withLabels(properties.getServiceLabels()).list().getItems(); List<String> endpointsPodNames = endpoints.stream().map(Endpoints::getSubsets).filter(Objects::nonNull) .flatMap(Collection::stream).map(EndpointSubset::getAddresses).filter(Objects::nonNull) .flatMap(Collection::stream).map(EndpointAddress::getTargetRef).filter(Objects::nonNull) .map(ObjectReference::getName) .sorted(String::compareTo).collect(Collectors.toList()); this.catalogEndpointsState.set(endpointsPodNames); if (!endpointsPodNames.equals(previousState)) { logger.trace(\"Received endpoints update from kubernetesClient: {}\", endpointsPodNames); this.publisher.publishEvent(new HeartbeatEvent(this, endpointsPodNames)); } } catch (Exception e) { logger.error(\"Error watching Kubernetes Services\", e); } }### Assistant: @Test public void testEndpointsWithoutAddresses() { EndpointsList endpoints = createSingleEndpointEndpointListByPodName(\"api-pod\"); endpoints.getItems().get(0).getSubsets().get(0).setAddresses(null); when(this.endpointsOperation.list()).thenReturn(endpoints); when(this.kubernetesClient.endpoints()).thenReturn(this.endpointsOperation); when(this.kubernetesClient.endpoints().withLabels(anyMap())).thenReturn(this.endpointsOperation); this.underTest.catalogServicesWatch(); this.underTest.catalogServicesWatch(); verify(this.applicationEventPublisher).publishEvent(any(HeartbeatEvent.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getName() { return NAME; }### Assistant: @Test public void testCalculateClusterAndFairRatios() { Map<String, Integer> index = ResourceUtils.getResourceTypeIndex(); Resource used = Resources.createResource(10, 5); Resource capacity = Resources.createResource(100, 10); float[][] shares = new float[3][2]; DominantResourceFairnessComparatorN comparator = new DominantResourceFairnessComparatorN(); used.setResourceValue(\"test\", 2L); capacity.setResourceValue(\"test\", 5L); int dominant = comparator.calculateClusterAndFairRatios(used, capacity, shares, 1.0f); assertEquals(\"Calculated usage ratio for memory (10MB out of 100MB) is \" + \"incorrect\", 0.1, shares[index.get(ResourceInformation.MEMORY_MB.getName())][0], .00001); assertEquals(\"Calculated usage ratio for vcores (5 out of 10) is \" + \"incorrect\", 0.5, shares[index.get(ResourceInformation.VCORES.getName())][0], .00001); assertEquals(\"Calculated usage ratio for test resource (2 out of 5) is \" + \"incorrect\", 0.4, shares[index.get(\"test\")][0], .00001); assertEquals(\"The wrong dominant resource index was returned\", index.get(ResourceInformation.VCORES.getName()).intValue(), dominant); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Instant parseDateMonth(String dateMonth) { return parseDate(dateMonth + \"-01\"); }### Assistant: @Test public void shouldParseDateMonth() { final Instant instant = ParameterUtil.parseDateMonth(\"2016-01\"); assertThat(instant, is(parse(\"2016-01-01T00:00:00.000Z\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected List<Point> compare(BufferedImage image1, BufferedImage image2, int offsetX, int offsetY) { return null; }### Assistant: @Test public void testCompareGreaterThanParam() throws Exception { BufferedImage expectedImage = ImageIO.read(getClass().getResource(\"hifive_logo.png\")); BufferedImage targetImage = ImageIO.read(getClass().getResource(\"hifive_logo_similar.png\")); double pixleByPixelThreshold = 0.98; double featherMatrixThreshold = 0.96; double thresDiffThreshold = 0.96; double totalDiffThreshold = 0.95; SimilarityComparisonParameters param = new SimilarityComparisonParameters(pixleByPixelThreshold, featherMatrixThreshold, thresDiffThreshold, totalDiffThreshold); SimilarityImageComparator similarityImageComparator = new SimilarityImageComparator(param); ImageComparedResult result = similarityImageComparator.compare(expectedImage, targetImage); assertThat(result.isSucceeded(), is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void update(KerberosServiceDescriptor updates) { if (updates != null) { Map<String, KerberosComponentDescriptor> updatedComponents = updates.getComponents(); if (updatedComponents != null) { for (Map.Entry<String, KerberosComponentDescriptor> entry : updatedComponents.entrySet()) { KerberosComponentDescriptor existing = getComponent(entry.getKey()); if (existing == null) { putComponent(entry.getValue()); } else { existing.update(entry.getValue()); } } } } super.update(updates); }### Assistant: @Test public void testJSONWithOnlyServiceNameAndConfigurations() throws AmbariException { String JSON_VALUE_ONLY_NAME_AND_CONFIGS = \"{\" + \" \\\"name\\\": \\\"SERVICE_NAME\\\",\" + \" \\\"configurations\\\": [\" + \" {\" + \" \\\"service-site\\\": {\" + \" \\\"service.property1\\\": \\\"value1\\\",\" + \" \\\"service.property2\\\": \\\"value2\\\"\" + \" }\" + \" }\" + \" ]\" + \"}\"; TreeMap<String, Object> CHANGE_NAME = new TreeMap<String, Object>() {{ put(\"name\", \"A_DIFFERENT_SERVICE_NAME\"); }}; KerberosServiceDescriptor serviceDescriptor = KERBEROS_SERVICE_DESCRIPTOR_FACTORY.createInstance(\"SERVICE_NAME\", JSON_VALUE_ONLY_NAME_AND_CONFIGS); KerberosServiceDescriptor updatedServiceDescriptor = new KerberosServiceDescriptor(CHANGE_NAME); Assert.assertNotNull(serviceDescriptor); Assert.assertNotNull(updatedServiceDescriptor); serviceDescriptor.update(updatedServiceDescriptor); Assert.assertNotNull(serviceDescriptor); Assert.assertEquals(\"A_DIFFERENT_SERVICE_NAME\", serviceDescriptor.getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean checkSecondFilter(SpatialArguments spatialArguments, GeometryWrapper targetGeometryWrapper) { GeometryWrapper geometryWrapper = spatialArguments.getGeometryWrapper(); try { return targetGeometryWrapper.within(geometryWrapper); } catch (FactoryException | MismatchedDimensionException | TransformException ex) { throw new ExprEvalException(ex.getMessage() + \": \" + targetGeometryWrapper.asLiteral() + \", \" + geometryWrapper.asLiteral(), ex); } }### Assistant: @Test public void testCheckSecondFilter_fail() { WithinBoxPF instance = new WithinBoxPF(); Node predicate = NodeFactory.createURI(SpatialExtension.WITHIN_BOX_PROP); float lat = 5; float lon = 5; float latMin = 0; float lonMin = 0; float latMax = 2; float lonMax = 2; Literal targetGeometry = ConvertLatLon.toLiteral(lat, lon); List<Node> objectNodes = Arrays.asList(NodeValue.makeFloat(latMin).asNode(), NodeValue.makeFloat(lonMin).asNode(), NodeValue.makeFloat(latMax).asNode(), NodeValue.makeFloat(lonMax).asNode()); PropFuncArg object = new PropFuncArg(objectNodes); SpatialArguments spatialArguments = instance.extractObjectArguments(predicate, object, SpatialIndexTestData.WGS_84_SRS_INFO); GeometryWrapper targetGeometryWrapper = GeometryWrapper.extract(targetGeometry); boolean expResult = false; boolean result = instance.checkSecondFilter(spatialArguments, targetGeometryWrapper); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ApiFuture<Result> readModifyWriteRowAsync(ReadModifyWriteRow readModifyWriteRow) { ListenableFuture<ReadModifyWriteRowResponse> response = delegate.readModifyWriteRowAsync(readModifyWriteRow.toProto(requestContext)); return ApiFutureUtil.transformAndAdapt( response, new Function<ReadModifyWriteRowResponse, Result>() { @Override public Result apply(ReadModifyWriteRowResponse response) { return transformRowToResult(response.getRow()); } }); }### Assistant: @Test public void testReadModifyWriteAsyncWithOneRow() throws ExecutionException, InterruptedException { String family_1 = \"col-family-1\"; String family_2 = \"col-family-2\"; String family_3 = \"col-family-3\"; ByteString qualifier_1 = ByteString.copyFromUtf8(\"test-qualifier_1-1\"); ByteString qualifier_2 = ByteString.copyFromUtf8(\"test-qualifier_1-2\"); ByteString qualifier_3 = ByteString.copyFromUtf8(\"test-qualifier_1-2\"); ByteString value_1 = ByteString.copyFromUtf8(\"test-values-1\"); ByteString value_2 = ByteString.copyFromUtf8(\"test-values-2\"); ByteString value_3 = ByteString.copyFromUtf8(\"test-values-3\"); ByteString value_4 = ByteString.copyFromUtf8(\"test-values-4\"); ByteString value_5 = ByteString.copyFromUtf8(\"test-values-5\"); ByteString value_6 = ByteString.copyFromUtf8(\"test-values-6\"); Row row = Row.newBuilder() .setKey(ROW_KEY) .addFamilies( Family.newBuilder() .setName(family_1) .addColumns( Column.newBuilder() .setQualifier(qualifier_1) .addCells( Cell.newBuilder() .setTimestampMicros(11_111L) .setValue(value_1) .addLabels(\"label-1\")) .addCells( Cell.newBuilder() .setTimestampMicros(22_222L) .setValue(value_2) .addLabels(\"label-2\"))) .addColumns( Column.newBuilder() .setQualifier(qualifier_2) .addCells( Cell.newBuilder() .setTimestampMicros(11_111L) .setValue(value_3) .addLabels(\"label-3\") .addLabels(\"label-4\")) .addCells( Cell.newBuilder().setTimestampMicros(22_222L).setValue(value_4))) .build()) .addFamilies( Family.newBuilder() .setName(family_2) .addColumns( Column.newBuilder() .setQualifier(qualifier_1) .addCells( Cell.newBuilder().setTimestampMicros(11_111L).setValue(value_5)))) .addFamilies( Family.newBuilder() .setName(family_3) .addColumns( Column.newBuilder() .setQualifier(qualifier_3) .addCells(Cell.newBuilder().setValue(value_6).addLabels(\"label-6\")))) .build(); ReadModifyWriteRow readModify = ReadModifyWriteRow.create(TABLE_ID, \"test-key\"); ReadModifyWriteRowRequest request = readModify.toProto(REQUEST_CONTEXT); ReadModifyWriteRowResponse response = ReadModifyWriteRowResponse.newBuilder().setRow(row).build(); ListenableFuture<ReadModifyWriteRowResponse> listenableResponse = Futures.immediateFuture(response); when(delegate.readModifyWriteRowAsync(request)).thenReturn(listenableResponse); Result result = dataClientWrapper.readModifyWriteRowAsync(readModify).get(); assertEquals(6, result.rawCells().length); List<org.apache.hadoop.hbase.Cell> cells1 = result.getColumnCells(family_1.getBytes(), qualifier_1.toByteArray()); assertEquals(2, cells1.size()); assertEquals(11L, cells1.get(0).getTimestamp()); assertArrayEquals(value_1.toByteArray(), CellUtil.cloneValue(cells1.get(0))); assertEquals(Collections.singletonList(\"label-1\"), ((RowCell) cells1.get(0)).getLabels()); assertEquals(22L, cells1.get(1).getTimestamp()); assertArrayEquals(value_2.toByteArray(), CellUtil.cloneValue(cells1.get(1))); assertEquals(Collections.singletonList(\"label-2\"), ((RowCell) cells1.get(1)).getLabels()); List<org.apache.hadoop.hbase.Cell> cells2 = result.getColumnCells(family_1.getBytes(), qualifier_2.toByteArray()); assertEquals(2, cells2.size()); assertEquals(11L, cells2.get(0).getTimestamp()); assertArrayEquals(value_3.toByteArray(), CellUtil.cloneValue(cells2.get(0))); assertEquals(ImmutableList.of(\"label-3\", \"label-4\"), ((RowCell) cells2.get(0)).getLabels()); assertEquals(22L, cells2.get(1).getTimestamp()); assertArrayEquals(value_4.toByteArray(), CellUtil.cloneValue(cells2.get(1))); List<org.apache.hadoop.hbase.Cell> cells3 = result.getColumnCells(family_2.getBytes(), qualifier_1.toByteArray()); assertEquals(1, cells3.size()); assertArrayEquals(value_5.toByteArray(), CellUtil.cloneValue(cells3.get(0))); List<org.apache.hadoop.hbase.Cell> cells4 = result.getColumnCells(family_3.getBytes(), qualifier_3.toByteArray()); assertEquals(1, cells4.size()); assertArrayEquals(value_6.toByteArray(), CellUtil.cloneValue(cells4.get(0))); assertEquals(Collections.singletonList(\"label-6\"), ((RowCell) cells4.get(0)).getLabels()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @DB() @SuppressWarnings(\"unchecked\") protected static <M> M getObject(Class<M> type, ResultSet rs, int index) throws SQLException { if (type == String.class) { byte[] bytes = rs.getBytes(index); if (bytes != null) { try { return (M)new String(bytes, \"UTF-8\"); } catch (UnsupportedEncodingException e) { throw new CloudRuntimeException(\"UnsupportedEncodingException exception while converting UTF-8 data\"); } } else { return null; } } else if (type == int.class) { return (M) (Integer) rs.getInt(index); } else if (type == Integer.class) { if (rs.getObject(index) == null) { return null; } else { return (M) (Integer) rs.getInt(index); } } else if (type == long.class) { return (M) (Long) rs.getLong(index); } else if (type == Long.class) { if (rs.getObject(index) == null) { return null; } else { return (M) (Long) rs.getLong(index); } } else if (type == Date.class) { final Object data = rs.getDate(index); if (data == null) { return null; } else { return (M)DateUtil.parseDateString(s_gmtTimeZone, rs.getString(index)); } } else if (type == short.class) { return (M) (Short) rs.getShort(index); } else if (type == Short.class) { if (rs.getObject(index) == null) { return null; } else { return (M) (Short) rs.getShort(index); } } else if (type == boolean.class) { return (M) (Boolean) rs.getBoolean(index); } else if (type == Boolean.class) { if (rs.getObject(index) == null) { return null; } else { return (M) (Boolean) rs.getBoolean(index); } } else if (type == float.class) { return (M) (Float) rs.getFloat(index); } else if (type == Float.class) { if (rs.getObject(index) == null) { return null; } else { return (M) (Float) rs.getFloat(index); } } else if (type == double.class) { return (M) (Double) rs.getDouble(index); } else if (type == Double.class) { if (rs.getObject(index) == null) { return null; } else { return (M) (Double) rs.getDouble(index); } } else if (type == byte.class) { return (M) (Byte) rs.getByte(index); } else if (type == Byte.class) { if (rs.getObject(index) == null) { return null; } else { return (M) (Byte) rs.getByte(index); } } else if (type == Calendar.class) { final Object data = rs.getDate(index); if (data == null) { return null; } else { final Calendar cal = Calendar.getInstance(); cal.setTime(DateUtil.parseDateString(s_gmtTimeZone, rs.getString(index))); return (M)cal; } } else if (type == byte[].class) { return (M)rs.getBytes(index); } else { return (M)rs.getObject(index); } }### Assistant: @Test public void getObjectPrimitiveFloat() throws SQLException { Mockito.when(resultSet.getObject(1)).thenReturn(0.1f); Mockito.when(resultSet.getFloat(1)).thenReturn(0.1f); Assert.assertEquals(0.1f, GenericDaoBase.getObject(float.class, resultSet, 1), 0.1); Mockito.verify(resultSet).getFloat(1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean addAll(Collection<? extends Edge> c) { checkCollection(c); if (!c.isEmpty()) { int capacityNeeded = c.size() - garbageSize; if (capacityNeeded > 0) { ensureCapacity(capacityNeeded); } boolean changed = false; Iterator<? extends Edge> itr = c.iterator(); while (itr.hasNext()) { Edge e = itr.next(); if (add(e)) { changed = true; } } return changed; } return false; }### Assistant: @Test(expectedExceptions = IllegalArgumentException.class) public void testAddAllSelf() { EdgeStore edgeStore = new EdgeStore(); edgeStore.addAll(edgeStore); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkAttributeSemantics(PerunSessionImpl perunSession, User user, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException { String value = attribute.valueAsString(); try { Attribute eppns = perunSession.getPerunBl().getAttributesManagerBl().getAttribute(perunSession, user, A_U_eduPersonPrincipalNames); if (eppns.getValue() != null) { List<String> values = eppns.valueAsList(); if (!values.contains(value)) { throw new WrongReferenceAttributeValueException(attribute, eppns, user, null, user, null, \"Value '\"+value+\"' is not allowed. Please use one of allowed.\"); } } else { if (value != null) throw new WrongReferenceAttributeValueException(attribute, eppns, user, null, user, null, \"Value '\"+value+\"' is not allowed. Please use one of allowed.\"); } } catch (AttributeNotExistsException ex) { throw new ConsistencyErrorException(\"Can't check attribute value because source attribute \" + A_U_eduPersonPrincipalNames + \" not exist!\", ex); } }### Assistant: @Test(expected = WrongReferenceAttributeValueException.class) public void testCheckNullValue() throws Exception { System.out.println(\"testCheckNullValue()\"); List<String> list = new ArrayList<>(); list.add(\"not name\"); reqAttribute.setValue(list); attributeToCheck.setValue(null); classInstance.checkAttributeSemantics(session, user, attributeToCheck); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping( value = {\"/get_GroupPolicyScopeDataByName\"}, method = {RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_VALUE) public void getGroupPolicyScopeEntityDataByName(HttpServletResponse response) { DictionaryUtils utils = getDictionaryUtilsInstance(); utils.getDataByEntity(response, groupPolicyScopeDatas, \"name\", GroupPolicyScopeList.class); }### Assistant: @Test public void testGetGroupPolicyScopeEntityDataByName() { when(commonClassDao.getDataByColumn(GroupPolicyScopeList.class, \"name\")).thenReturn(data); controller.getGroupPolicyScopeEntityDataByName(response); try { assertTrue(response.getContentAsString() != null && response.getContentAsString().contains(\"groupPolicyScopeListDatas\")); } catch (Exception e) { fail(); logger.error(e.getMessage(), e); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String campaignCriterion(long customerId, long campaignId, long criterionId) { return CampaignCriterionName.format( String.valueOf(customerId), concatIdentifiers(campaignId, criterionId)); }### Assistant: @Test public void testCampaignCriteria() { String expected = \"customers/1234/campaignCriteria/5678~1011\"; assertEquals(expected, ResourceNames.campaignCriterion(1234L, 5678L, 1011L)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void sortHostsUpwardScore(List<HostResources> hosts) { Collections.sort(hosts, hostUpwardScoreComparator); }### Assistant: @Test public void sortHostsUpwardScoreTest() { List<HostResources> hostsToSort = setupOfSortHostTests(); spyAlgorithm.sortHostsUpwardScore(hostsToSort); List<HostResources> expectedHostsOrder = new ArrayList<HostResources>(); expectedHostsOrder.add(createHostResourcesWithScore(0)); expectedHostsOrder.add(createHostResourcesWithScore(3)); expectedHostsOrder.add(createHostResourcesWithScore(5)); expectedHostsOrder.add(createHostResourcesWithScore(12)); checkIfSortIsCorrect(hostsToSort, expectedHostsOrder); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public long cleanupRpkiObjects() throws Exception { final InstantWithoutNanos unreachableSince = InstantWithoutNanos.now().minus(cleanupGraceDuration); final Pair<Long, Long> deleted = Time.timed(() -> rpkiObjects.deleteUnreachableObjects(unreachableSince)); log.info(\"Removed {} RPKI objects that have not been marked reachable since {}, took {}ms\", deleted.getLeft(), unreachableSince, deleted.getRight()); storage.gc(); return deleted.getLeft(); }### Assistant: @Test public void should_delete_objects_not_reachable_from_manifest() throws Exception { BigInteger serial = TrustAnchorsFactory.nextSerial(); TrustAnchor trustAnchor = wtx(tx -> factory.createTrustAnchor(tx, ta -> ta.roaPrefixes(Collections.singletonList(RoaPrefix.of(IpRange.parse(\"127.0.0.0/8\"), null, Asn.parse( \"123\"), DateTime.now().toInstant().getMillis(), DateTime.now().plusYears(1).toInstant().getMillis(), serial))))); assertThat(subject.cleanupRpkiObjects()).isEqualTo(0); RpkiObject orphan = new RpkiObject( new X509ResourceCertificateBuilder() .withResources(IpResourceSet.parse(\"10.0.0.0/8\")) .withIssuerDN(trustAnchor.getCertificate().getSubject()) .withSubjectDN(new X500Principal(\"CN=orphan\")) .withSerial(serial) .withPublicKey(KEY_PAIR_FACTORY.generate().getPublic()) .withSigningKeyPair(KEY_PAIR_FACTORY.generate()) .withValidityPeriod(new ValidityPeriod(DateTime.now(), DateTime.now().plusYears(1))) .build() ); wtx0(tx -> rpkiObjects.put(tx, orphan)); assertThat(subject.cleanupRpkiObjects()).isEqualTo(0); wtx0(tx -> rpkiObjects.markReachable(tx, orphan.key(), InstantWithoutNanos.now().minus(Duration.ofDays(10)))); assertThat(subject.cleanupRpkiObjects()).isEqualTo(1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public PixelPos getPixelPos(GeoPos geoPos, PixelPos pixelPos) { pixelPos = super.getPixelPos(geoPos, pixelPos); PixelPos transformedPixelPos = new PixelPos(); inverse.transform(pixelPos, transformedPixelPos); pixelPos.setLocation(transformedPixelPos); return transformedPixelPos; }### Assistant: @Test public void testGetPixelPos_IdentityTransform() { final GeoPos geoPos = new GeoPos(6, 6); final PixelPos referencePixelPos = new PixelPos(); referenceGeoCoding.getPixelPos(geoPos, referencePixelPos); final PixelPos slstrPixelPos = new PixelPos(); slstrCoding.getPixelPos(geoPos, slstrPixelPos); assertEquals(referencePixelPos.getX(), slstrPixelPos.getX(), 1e-8); assertEquals(referencePixelPos.getY(), slstrPixelPos.getY(), 1e-8); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void update(List<LookoutMeasurement> measures, Map<String, String> metadata) { logger.info(measures.toString()); }### Assistant: @Test public void testUseLogObserver() { LogObserver logObserver = new LogObserver(new StringLog()); Id id = new DefaultRegistry().createId(\"aa\"); LookoutMeasurement measurement = new LookoutMeasurement(new Date(), id); measurement.addTag(\"k\", \"v\"); measurement.put(\"v\", 2); List<LookoutMeasurement> measurements = new ArrayList<LookoutMeasurement>(); measurements.add(measurement); logObserver.update(measurements, null); Assert.assertTrue(str.contains(\"\\\"tags\\\":{\\\"k\\\":\\\"v\\\"}\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int read() throws IOException { byte[] b1 = new byte[1]; int n = this.read(b1); if (n == 1) { return b1[0] & 0xff; } return -1; }### Assistant: @Test(timeout = 10000) public void targetChannelClosed() throws Exception { testChannel = new TestPipeChannel(); PipeChannelInputStream input = new PipeChannelInputStream(testChannel, Duration.ofSeconds(1)); CompletableFuture<Void> futur = runAsync(() -> { int n = input.read(); assertThat(n).isEqualTo(-1); }); testChannel.shutdownOutputStreams(); futur.get(500, TimeUnit.MILLISECONDS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isSigned( int column ) { return getJcrType(column).isSigned(); }### Assistant: @Test public void shouldReturnSignedBasedUponNodeTypeWhenResultIsExtendedJcrQueryResult() { assertThat(extMetadata.isSigned(1), is(false)); assertThat(extMetadata.isSigned(2), is(true)); assertThat(extMetadata.isSigned(3), is(false)); assertThat(extMetadata.isSigned(4), is(false)); assertThat(extMetadata.isSigned(5), is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static int getNext(final CronEntry entry, final int current) throws MessageFormatException { int result = 0; if (entry.currentWhen == null) { entry.currentWhen = calculateValues(entry); } List<Integer> list = entry.currentWhen; int next = -1; for (Integer i : list) { if (i.intValue() > current) { next = i.intValue(); break; } } if (next != -1) { result = next - current; } else { int first = list.get(0).intValue(); result = entry.end + first - entry.start - current; if (entry.name.equals(\"DayOfWeek\") || entry.name.equals(\"Month\")) { result++; } } return result; }### Assistant: @Test public void testGetNextRange() throws MessageFormatException { String token = \"3-5\"; int next = CronParser.getNext(createEntry(token, 1, 10), 3); assertEquals(1, next); next = CronParser.getNext(createEntry(token, 1, 10), 5); assertEquals(7, next); next = CronParser.getNext(createEntry(token, 1, 10), 6); assertEquals(6, next); next = CronParser.getNext(createEntry(token, 1, 10), 1); assertEquals(2, next); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected BackoffTimer getRetriesBeforeCkptCleanup() { return _retriesBeforeCkptCleanup; }### Assistant: @Test public void testTransition_RestartWithNoServerInfo() throws Exception { BootstrapPullThread bsPuller = createBootstrapPullThread(false, false, false); Checkpoint cp = _ckptHandlerSource1.createInitialBootstrapCheckpoint(null, 50L); cp.setBootstrapStartScn(1111L); bsPuller.getComponentStatus().start(); ConnectionState connState = bsPuller.getConnectionState(); connState.switchToBootstrap(cp); testTransitionCase(bsPuller, StateId.BOOTSTRAP, StateId.REQUEST_START_SCN, cp); Assert.assertEquals(cp.getBootstrapStartScn().longValue(), Checkpoint.UNSET_BOOTSTRAP_START_SCN, \"Cleared Bootstrap StartSCN\"); Assert.assertEquals(cp.getBootstrapSinceScn().longValue(), 50L, \"Cleared Bootstrap SinceSCN\"); int numRetries = bsPuller.getRetriesBeforeCkptCleanup().getRemainingRetriesNum(); Assert.assertEquals(numRetries, 1000, \"NumRetries Check\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static LayoutConstraintsDescriptor flexible() { return new LayoutConstraintsDescriptor(FLEXIBLE_PREF, FLEXIBLE_PREF); }### Assistant: @Test @Disabled public void testFlexible() { System.out.println(\"flexible\"); LayoutConstraintsDescriptor expResult = null; LayoutConstraintsDescriptor result = LayoutConstraintsDescriptor.flexible(); assertEquals(expResult, result); fail(\"The test case is a prototype.\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Transactional(propagation = Propagation.REQUIRES_NEW) public NotifyStatistics notifySubscriber(Long subscriberId) { NotifyStatistics statistics = new NotifyStatistics(); if (subscriberId == null) { return statistics; } List<NotificationEvent> events = getEvents(subscriberId); if (events.isEmpty()) { return statistics; } List<NotificationEventTO> eventTOs = converter.toEventTOList(events); if (eventTOs.isEmpty()) { return statistics; } Collections.sort(eventTOs, new NotificationEventTO.NotificationEventTOComparator()); statistics = send(eventTOs.get(0).getEvent().getSubscription().getSubscriber(), eventTOs); updateEvents(eventTOs, statistics); return statistics; }### Assistant: @Test public void notifySubscriber_noSubscriberChannel() { subscriberMock.getChannels().remove(Subscriber.Channel.EMAIL); NotifyStatistics statistics = notifyDelegateTestObject.notifySubscriber(subscriberId); assertNull(statistics); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkAttributeSemantics(PerunSessionImpl sess, User user, Attribute attribute) throws WrongReferenceAttributeValueException { if (attribute.getValue() == null) return; try { Attribute reservedMailsAttribute = sess.getPerunBl().getAttributesManagerBl().getEntitylessAttributeForUpdate(sess, usedMailsKeyVsup, usedMailsUrn); if (reservedMailsAttribute.getValue() != null) { Map<String,String> reservedMailsAttributeValue = reservedMailsAttribute.valueAsMap(); String ownersUserId = reservedMailsAttributeValue.get(attribute.valueAsString()); if (ownersUserId != null && !Objects.equals(ownersUserId, String.valueOf(user.getId()))) { User ownersUser = sess.getPerunBl().getUsersManagerBl().getUserById(sess, Integer.parseInt(ownersUserId)); throw new WrongReferenceAttributeValueException(attribute, reservedMailsAttribute, user, null, ownersUser, null, \"V\u0160UP mail alias: '\"+attribute.getValue()+\"' is already in use by User ID: \" + ownersUserId + \".\"); } } } catch (AttributeNotExistsException ex) { throw new ConsistencyErrorException(\"Attribute doesn't exists.\", ex); } catch (UserNotExistsException e) { throw new ConsistencyErrorException(\"User doesn't exists.\", e); } }### Assistant: @Test(expected = WrongReferenceAttributeValueException.class) public void testCheckSemanticsWithInvalidLogin() throws Exception { System.out.println(\"testCheckSemanticsWithInvalidLogin()\"); Map<String, String> value = new LinkedHashMap<>(); value.put(\"john.doe@vsup.cz\", \"5\"); reqAttribute.setValue(value); attributeToCheck.setValue(\"john.doe@vsup.cz\"); classInstance.checkAttributeSemantics(session, user, attributeToCheck); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int firstExcludedCodePoint(String s) { if (s == null || s.isEmpty()) { return NOT_FOUND; } int len = s.length(); int codePoint; for (int i = 0; i < len; i += Character.charCount(codePoint)) { codePoint = s.codePointAt(i); if (!set.contains(codePoint)) { return codePoint; } } return NOT_FOUND; }### Assistant: @Test public void testGetFirstNotAllowedCodePoint_empty() { String testStr = \"\"; Set<Integer> allowedCodePointSet = new HashSet<Integer>(); int result = new CodePoints(allowedCodePointSet).firstExcludedCodePoint( testStr); assertThat(result, is(CodePoints.NOT_FOUND)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static TtmlStyle resolveStyle(TtmlStyle style, String[] styleIds, Map<String, TtmlStyle> globalStyles) { if (style == null && styleIds == null) { return null; } else if (style == null && styleIds.length == 1) { return globalStyles.get(styleIds[0]); } else if (style == null && styleIds.length > 1) { TtmlStyle chainedStyle = new TtmlStyle(); for (String id : styleIds) { chainedStyle.chain(globalStyles.get(id)); } return chainedStyle; } else if (style != null && styleIds != null && styleIds.length == 1) { return style.chain(globalStyles.get(styleIds[0])); } else if (style != null && styleIds != null && styleIds.length > 1) { for (String id : styleIds) { style.chain(globalStyles.get(id)); } return style; } return style; }### Assistant: @Test public void testResolveStyleNoStyleAtAll() { assertThat(resolveStyle(null, null, null)).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ServerCredentials getServerCredentials(String serverId) { return client(SERVER_URL_WITH_ID + \"/credentials\") .resolveTemplate(SERVER_ID, serverId) .request() .get(ServerCredentials.class); }### Assistant: @Test(groups = {INTEGRATION, LONG_RUNNING}) public void getServerCredentialsTest() { ServerMetadata server = serverService.findByRef(SingleServerFixture.server()); ServerCredentials credentials = serverClient.getServerCredentials(server.getName()); assertNotNull(credentials); assertNotNull(credentials.getPassword()); assertNotNull(credentials.getUserName()); assertFalse(credentials.getPassword().isEmpty()); assertFalse(credentials.getUserName().isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public byte[] hGet(byte[] key, byte[] field) { return helper.doInScope(RedisCommand.HGET, key, () -> connection.hGet(key, field)); }### Assistant: @Test public void invokingHGetCreatesNewSpan() { commandCreatesNewSpan(RedisCommand.HGET, () -> getConnection().hGet(\"key\".getBytes(), \"field\".getBytes())); verify(mockRedisConnection()).hGet(\"key\".getBytes(), \"field\".getBytes()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String sanitizeTable(String name, QueryBuilderOptions options) { return (options.autoQuoteTableNames ? options.nameQuoteCharacter + name + options.nameQuoteCharacter : name); }### Assistant: @Test public void sanitizeTableAutoQuoteTableNames() { QueryBuilderOptions options = new QueryBuilderOptions(); options.autoQuoteTableNames = true; String fieldName = \"NAME\"; String actual = Validator.sanitizeTable(fieldName, options); String expected = \"`NAME`\"; assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"/products\") public Response findAll(@BeanParam PageableImpl pageable) { LOGGER.debug(\"REST request to get all Products\"); return Response.ok().entity(productService.findAll(pageable)).build(); }### Assistant: @Test public void createProduct() { int databaseSizeBeforeCreate = productRepository.findAll().size(); given() .contentType(JSON) .body(this.product) .when().post(\"/api/products\") .then() .statusCode(201); List<Product> productList = productRepository.findAll(); Assertions.assertEquals(productList.size(), databaseSizeBeforeCreate + 1); Product product = productList.get(productList.size() - 1); Assertions.assertEquals(product.getName(), DEFAULT_NAME); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String processUrl(HttpServletRequest request, String url) { String result = url; for (RequestDataValueProcessor processor : processors) { result = processor.processUrl(request, url); if (!url.equals(result)) { break; } } return result; }### Assistant: @Test public void testProcessUrlNoProcessors() { compositeRequestDataValueProcessor = new CompositeRequestDataValueProcessor(); String result = compositeRequestDataValueProcessor.processUrl(request, \"http: assertThat(result, is(\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void handleParameterAnnotation(FormParam annotation, ParamConfigBuilder builder) { builder.setType(FORM).setName(ph(annotation.value())); }### Assistant: @Test public void handleParameterAnnotationShouldSetTypeAndName() throws Exception { when(mockParamConfigBuilder.setType(any(ParamType.class))).thenReturn(mockParamConfigBuilder); when(mockAnnotation.value()).thenReturn(\"a\"); toTest.handleParameterAnnotation(mockAnnotation, mockParamConfigBuilder); verify(mockParamConfigBuilder).setType(ParamType.FORM); verify(mockParamConfigBuilder).setName(\"a\"); verify(mockAnnotation).value(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void searchDownloadInfo(Set<PipInstalledPackage> _packs, String _out) throws IOException { if (_packs != null) for (PipInstalledPackage pack : _packs) this.searchDownloadInfo(pack, _out); }### Assistant: @Test public void testParsePipInstallOutput() throws IOException, ProcessWrapperException { final String out = FileUtil.readFile(\"./src/test/resources/pip-install-out.txt\"); final Set<PipInstalledPackage> packs = new HashSet<PipInstalledPackage>(); final PipInstalledPackage werkzeug = new PipInstalledPackage(\"Werkzeug\", \"0.12.2\"); packs.add(werkzeug); final PipInstalledPackage ms = new PipInstalledPackage(\"MarkupSafe\", \"1.0\"); packs.add(ms); final PipInstalledPackage isdang = new PipInstalledPackage(\"itsdangerous\", \"0.24\"); packs.add(isdang); final PipWrapper pw = new PipWrapper(); pw.searchDownloadInfo(packs, out); assertTrue(werkzeug.getDownloadUrl() != null); assertTrue(ms.getDownloadUrl() != null); assertTrue(isdang.getDownloadUrl() != null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public short getShort(int columnIndex) { return getShort(columnNames[columnIndex]); }### Assistant: @Test public void testGetShort() throws IOException { ColumnType[] types = {LOCAL_DATE, SHORT, STRING}; Table table = Table.read() .csv( CsvReadOptions.builder(new File(\"../data/bush.csv\")) .columnTypes(types) .minimizeColumnSizes()); Row row = new Row(table); while (row.hasNext()) { row.next(); assertEquals(table.shortColumn(1).getShort(row.getRowNumber()), row.getShort(1)); assertEquals( table.shortColumn(\"approval\").getShort(row.getRowNumber()), row.getShort(\"approval\")); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE) public static Observable<Connectivity> observeNetworkConnectivity(final Context context) { final NetworkObservingStrategy strategy; if (Preconditions.isAtLeastAndroidMarshmallow()) { strategy = new MarshmallowNetworkObservingStrategy(); } else if (Preconditions.isAtLeastAndroidLollipop()) { strategy = new LollipopNetworkObservingStrategy(); } else { strategy = new PreLollipopNetworkObservingStrategy(); } return observeNetworkConnectivity(context, strategy); }### Assistant: @Test public void observeNetworkConnectivityShouldBeConnectedOnStartWhenNetworkIsAvailable() { final Application context = RuntimeEnvironment.application; Connectivity connectivity = ReactiveNetwork.observeNetworkConnectivity(context).blockingFirst(); assertThat(connectivity.state()).isEqualTo(NetworkInfo.State.CONNECTED); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public VaultTokenLookupDetails getVaultTokenLookupDetails(String token) throws TVaultValidationException{ Response response = reqProcessor.process(\"/auth/tvault/lookup\",\"{}\", token); VaultTokenLookupDetails lookupDetails = null; if(HttpStatus.OK.equals(response.getHttpstatus())){ try { lookupDetails = new VaultTokenLookupDetails(); ObjectMapper objMapper = new ObjectMapper(); ObjectNode objNode = (ObjectNode) objMapper.readTree(response.getResponse()); lookupDetails.setUsername(objNode.get(\"username\").asText()); String[] policies = commonUtils.getPoliciesAsArray(objMapper, response.getResponse()); lookupDetails.setPolicies(policies); lookupDetails.setToken(token); lookupDetails.setValid(true); lookupDetails.setAdmin(authorizationUtils.containsAdminPolicies(Arrays.asList(policies), policyUtils.getAdminPolicies())); if (TVaultConstants.OIDC.equals(vaultAuthMethod) && objNode.get(\"display_name\") != null && objNode.get(\"path\") != null ) { String authPath = objNode.get(\"path\").asText(); String displayName = objNode.get(\"display_name\").asText(); if (TVaultConstants.OIDC_AUTH_PATH.equalsIgnoreCase(authPath) && !StringUtils.isEmpty(displayName) && displayName.contains(\"oidc-\")) { String email = objNode.get(\"display_name\").asText().substring(5); if (!StringUtils.isEmpty(email)) { lookupDetails.setEmail(email); } ResponseEntity<DirectoryObjects> directoryObjectsResponseEntity = directoryService.searchByUPN(email); if (directoryObjectsResponseEntity != null && HttpStatus.OK.equals(directoryObjectsResponseEntity.getStatusCode())) { Object[] adUser = directoryObjectsResponseEntity.getBody().getData().getValues(); if (adUser.length > 0) { DirectoryUser directoryUser = (DirectoryUser) adUser[0]; lookupDetails.setUsername(directoryUser.getUserName()); } } } else { lookupDetails.setEmail(null); lookupDetails.setUsername(displayName); } } } catch (IOException e) { throw new TVaultValidationException(e); } } else if(HttpStatus.FORBIDDEN.equals(response.getHttpstatus())){ throw new TVaultValidationException( String.format(\"Can't perform the required operation. Possible reasons: 1. Invalid/expired client token or 2. Insufficient permissions. Actual Status: [%s], Reason [%s]\", response.getHttpstatus(), response.getResponse())); } else { throw new TVaultValidationException( String.format(\"Can't perform the required operation. Actual Status: [%s], Reason [%s]\", response.getHttpstatus(), response.getResponse())); } return lookupDetails; }### Assistant: @Test public void test_getVaultTokenLookupDetails_failure() throws TVaultValidationException, IOException { String token = \"7QPMPIGiyDFlJkrK3jFykUqa\"; Response response = getMockResponse(HttpStatus.FORBIDDEN, true, \"\"); VaultTokenLookupDetails expectedLookupDetails = new VaultTokenLookupDetails(); expectedLookupDetails.setAdmin(false); expectedLookupDetails.setValid(true); expectedLookupDetails.setToken(token); expectedLookupDetails.setUsername(null); String [] policies = {\"default\"}; ArrayList<String> adminPolicies = new ArrayList<>(); adminPolicies.add(\"adminpolicy\"); expectedLookupDetails.setPolicies(policies); when(reqProcessor.process(\"/auth/tvault/lookup\",\"{}\", token)).thenReturn(response); try { VaultTokenLookupDetails lookupDetails = tokenValidator.getVaultTokenLookupDetails(token); }catch (TVaultValidationException t) { assertTrue(true); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer) throws Py4JException, IOException { String returnCommand = null; String subCommand = safeReadLine(reader, false); if (subCommand.equals(FIELD_GET_SUB_COMMAND_NAME)) { returnCommand = getField(reader); } else if (subCommand.equals(FIELD_SET_SUB_COMMAND_NAME)) { returnCommand = setField(reader); } else { returnCommand = Protocol.getOutputErrorCommand(\"Unknown Field SubCommand Name: \" + subCommand); } logger.finest(\"Returning command: \" + returnCommand); writer.write(returnCommand); writer.flush(); }### Assistant: @Test public void testPrivateMember() { String inputCommand = \"g\\n\" + target + \"\\nfield1\\ne\\n\"; try { command.execute(\"f\", new BufferedReader(new StringReader(inputCommand)), writer); assertEquals(\"!yo\\n\", sWriter.toString()); } catch (Exception e) { e.printStackTrace(); fail(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Double convert(String value, Class<? extends Double> type, ResourceBundle bundle) { if (isNullOrEmpty(value)) { return null; } try { final Locale locale = localization.getLocale(); DecimalFormat fmt = (DecimalFormat) DecimalFormat.getInstance(locale); return fmt.parse(value).doubleValue(); } catch (ParseException e) { throw new ConversionError(MessageFormat.format(bundle.getString(\"is_not_a_valid_number\"), value)); } }### Assistant: @Test public void shouldBeAbleToConvertEmpty() { assertThat(converter.convert(\"\", Double.class, bundle), is(nullValue())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public long readBits(int numberOfBits) throws EOFException { Validate.inclusiveBetween(1, 32, numberOfBits, \"numberOfBits must be [1,32]\"); if (numberOfBits == 1) { return readBit(); } long result = 0; for (int i = 0; i < numberOfBits; i++) { result |= readBit() << (numberOfBits - i - 1); } return result; }### Assistant: @Test public void testReadBits3() throws EOFException { ByteBuf byteBuf = Unpooled.wrappedBuffer(new byte[] {(byte) 0b10111010}); BitReader bitReader = new BitReader(byteBuf); assertThat(bitReader.readBits(3), is((long) 0b101)); assertThat(bitReader.readBits(3), is((long) 0b110)); assertThat(bitReader.readBits(2), is((long) 0b10)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull @Override public B setId(@Nonnull final String id) { return super.setId(id); }### Assistant: @Test public void testExistingMethods() throws Exception { AbstractDependencyBuilder<SimpleDependency, ExistingExtendedBuilder> builder = new ExistingExtendedBuilder() .setId(\"abc\") .setFoo(\"foo\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onCreate(@Nullable final Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (annotationHandler != null) { final WebFragmentAnnotationHandler annotationHandler = (WebFragmentAnnotationHandler) this.annotationHandler; final int contentResId = annotationHandler.getWebContentResId(-1); if (contentResId == -1) { this.content = annotationHandler.getWebContent(null); } else { this.content = getString(contentResId); } } if (savedInstanceState != null) { this.options = savedInstanceState.getParcelable(BUNDLE_OPTIONS); this.privateFlags = savedInstanceState.getInt(BUNDLE_PRIVATE_FLAGS); this.content = savedInstanceState.getString(BUNDLE_CONTENT); } else if (options != null && !TextUtils.isEmpty(options.content)) { this.content = options.content; } this.contentType = resolveContentType(content); }### Assistant: @Test public void testOnCreate() { final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get(); final FragmentManager fragmentManager = activity.getSupportFragmentManager(); final WebFragment fragment = new TestFragmentWithWebContent(); fragmentManager.beginTransaction().add(fragment, null).commit(); fragmentManager.executePendingTransactions(); assertThat(fragment.getContent(), is(TestFragmentWithWebContent.CONTENT)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void search(Name base, String filter, int searchScope, boolean returningObjFlag, NameClassPairCallbackHandler handler) { search(base, filter, getDefaultSearchControls(searchScope, returningObjFlag, ALL_ATTRIBUTES), handler); }### Assistant: @Test public void testSearch_ContextMapper_Default() throws Exception { expectGetReadOnlyContext(); Object expectedObject = new Object(); SearchResult searchResult = new SearchResult(\"\", expectedObject, new BasicAttributes()); singleSearchResult(searchControlsRecursive(), searchResult); Object expectedResult = expectedObject; when(contextMapperMock.mapFromContext(expectedObject)).thenReturn(expectedResult); List list = tested.search(nameMock, \"(ou=somevalue)\", contextMapperMock); verify(namingEnumerationMock).close(); verify(dirContextMock).close(); assertThat(list).isNotNull(); assertThat(list).hasSize(1); assertThat(list.get(0)).isSameAs(expectedResult); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isIsogram(String phrase) { ArrayList<Integer> check = new ArrayList<>(); for (char c : phrase.toLowerCase().replace(\" \", \"\").replace(\"-\", \"\").replace(\".\", \"\").toCharArray()){ if(check.indexOf((int) c) == -1) { check.add((int) c); } else return false; } return true; }### Assistant: @Ignore(\"Remove to run test\") @Test public void testDuplicatedCharacterInTheMiddleIsNotIsogram() { IsogramChecker iso = new IsogramChecker(); assertFalse(iso.isIsogram(\"accentor\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String h(Object input) { return HtmlEscapeUtils.htmlEscape(input); }### Assistant: @Test public void testH12() { Object input = \"12345abcde&<>\\\"\\'\"; Object expct = \"12345abcde&amp;&lt;&gt;&quot;&#39;\"; String result = Functions.h(input); assertThat(result, is(expct)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public long readLong(final JBBPByteOrder byteOrder) throws IOException { if (byteOrder == JBBPByteOrder.BIG_ENDIAN) { return (((long) readInt(byteOrder) & 0xFFFFFFFFL) << 32) | ((long) readInt(byteOrder) & 0xFFFFFFFFL); } else { return ((long) readInt(byteOrder) & 0xFFFFFFFFL) | (((long) readInt(byteOrder) & 0xFFFFFFFFL) << 32); } }### Assistant: @Test public void testReadLong_BigEndian_EOF() throws Exception { assertThrows(EOFException.class, () -> asInputStream(0x12, 0x34, 0x56, 0x78, 0xAA, 0xBB, 0xCC).readLong(JBBPByteOrder.BIG_ENDIAN)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void updateConfigurationItem(final Connection conn, final String category, final String instance, final String component, final String name, final String value) { try (PreparedStatement preparedStatement = conn.prepareStatement(UPDATE_CONFIGURATION_ITEM)) { preparedStatement.setString(1, value); preparedStatement.setString(2, category); preparedStatement.setString(3, instance); preparedStatement.setString(4, component); preparedStatement.setString(5, name); preparedStatement.executeUpdate(); } catch (final SQLException e) { logger.error(\"Caught exception while updating values: \" + e.getMessage()); throw new CloudRuntimeException(e); } }### Assistant: @Test(expected = CloudRuntimeException.class) public void test_updateConfigurationItem_whenThereAnException() throws Exception { when(dbConnection.prepareStatement(BareMetalRemovalUpdater.UPDATE_CONFIGURATION_ITEM)).thenReturn(preparedStatement); when(preparedStatement.executeUpdate()).thenThrow(SQLException.class); bareMetalRemovalUpdater.updateConfigurationItem(dbConnection, \"someCategory\", \"someInstance\", \"someComponent\", \"someName\", \"someValue\"); verify(preparedStatement, times(5)).setString(anyInt(), anyString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AppSchema extractAppSchema() { for ( QName ftName : ftNameToFtElement.keySet() ) { FeatureType ft = buildFeatureType( ftNameToFtElement.get( ftName ) ); ftNameToFt.put( ftName, ft ); } FeatureType[] fts = ftNameToFt.values().toArray( new FeatureType[ftNameToFt.size()] ); Map<FeatureType, FeatureType> ftSubstitution = new HashMap<FeatureType, FeatureType>(); for ( QName ftName : ftNameToSubstitutionGroupName.keySet() ) { QName substitutionFtName = ftNameToSubstitutionGroupName.get( ftName ); if ( substitutionFtName != null ) { ftSubstitution.put( ftNameToFt.get( ftName ), ftNameToFt.get( substitutionFtName ) ); } } final List<GMLObjectType> genericGmlObjectTypes = new ArrayList<GMLObjectType>(); for ( final XSElementDeclaration elDecl : gmlSchema.getGeometryElementDeclarations( null, false ) ) { final GMLObjectType type = buildGenericObjectType( elDecl ); genericGmlObjectTypes.add( type ); typeNameToType.put( type.getName(), type ); } Map<GMLObjectType, GMLObjectType> typeToSuperType = new HashMap<GMLObjectType, GMLObjectType>(); for ( QName ftName : geometryNameToSubstitutionGroupName.keySet() ) { QName substitutionFtName = geometryNameToSubstitutionGroupName.get( ftName ); if ( substitutionFtName != null ) { typeToSuperType.put( typeNameToType.get( ftName ), typeNameToType.get( substitutionFtName ) ); } } for ( final XSElementDeclaration elDecl : gmlSchema.getTimeObjectElementDeclarations( null, false ) ) { final GMLObjectType type = buildGenericObjectType( elDecl ); genericGmlObjectTypes.add( type ); typeNameToType.put( type.getName(), type ); } for ( final XSElementDeclaration elDecl : gmlSchema.getTimeSliceElementDeclarations( null, false ) ) { final GMLObjectType type = buildGenericObjectType( elDecl ); genericGmlObjectTypes.add( type ); typeNameToType.put( type.getName(), type ); } return new GenericAppSchema( fts, ftSubstitution, prefixToNs, gmlSchema, genericGmlObjectTypes, typeToSuperType ); }### Assistant: @Test public void testAIXMNumberOfTimeSliceTypes() throws ClassCastException, ClassNotFoundException, InstantiationException, IllegalAccessException { final String schemaUrl = this.getClass().getResource( \"../aixm/schema/message/AIXM_BasicMessage.xsd\" ).toString(); final GMLAppSchemaReader adapter = new GMLAppSchemaReader( null, null, schemaUrl ); final AppSchema schema = adapter.extractAppSchema(); final List<GMLObjectType> objectTypes = schema.getGmlObjectTypes( TIME_SLICE ); assertEquals( 127, objectTypes.size() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public PixManagerBean getQueryMessage(PRPAIN201310UV02 response, PixManagerBean pixMgrBean) { logger.debug(\"response ack code:\" + response.getAcceptAckCode()); logger.debug(\"response type id: \" + response.getTypeId()); final JXPathContext context = JXPathContext.newContext(response); final Iterator<MCCIMT000300UV01Acknowledgement> ackmntList = context .iterate(\"/acknowledgement\"); while (ackmntList.hasNext()) { final MCCIMT000300UV01Acknowledgement ackmnt = ackmntList.next(); if (ackmnt.getTypeCode().getCode().equals(\"AA\")) { final StringBuffer queryMsg = new StringBuffer( \"Query Success! \"); final Map<String, String> idMap = new HashMap<String, String>(); final Iterator<PRPAMT201307UV02PatientIdentifier> pidList = context .iterate(\"/controlActProcess/queryByParameter/value/parameterList/patientIdentifier\"); while (pidList.hasNext()) { final PRPAMT201307UV02PatientIdentifier pid = pidList .next(); final List<II> ptIdList = pid.getValue(); for (final II ptId : ptIdList) { queryMsg.append(\" Given PID: \" + ptId.getExtension()); queryMsg.append(\" Given UID: \" + ptId.getRoot()); queryMsg.append(\"\\t\"); } } final Iterator<II> ptIdList = context .iterate(\"/controlActProcess/subject[1]/registrationEvent/subject1[typeCode='SBJ']/patient[classCode='PAT']/id\"); while (ptIdList.hasNext()) { final II pId = ptIdList.next(); idMap.put(pId.getRoot(), pId.getExtension()); } pixMgrBean.setQueryMessage(queryMsg.toString()); pixMgrBean.setQueryIdMap(idMap); break; } else if (ackmnt.getTypeCode().getCode().equals(\"AE\")) { final List<MCCIMT000300UV01AcknowledgementDetail> ackmntDetList = ackmnt .getAcknowledgementDetail(); for (final MCCIMT000300UV01AcknowledgementDetail ackDet : ackmntDetList) { logger.error(\"Query Failure! \" + ackDet.getText().getContent()); pixMgrBean.setQueryMessage(\"Query Failure! \" + ackDet.getText().getContent()); pixMgrBean.setQueryIdMap(null); break; } } else { pixMgrBean.setQueryMessage(\"Query Failure! \"); pixMgrBean.setQueryIdMap(null); } } return pixMgrBean; }### Assistant: @Test public void testGetQueryMessage() throws JAXBException { PRPAIN201310UV02 pRPAIN201310UV02 = (PRPAIN201310UV02) getPIXResObject( \"xml/QuerySample_PRPA_IN201310UV02.xml\", PixManagerConstants.ENCODE_STRING); PixManagerBean pixManagerBean = new PixManagerBean(); sut.getQueryMessage(pRPAIN201310UV02, pixManagerBean); assertTrue(\"Actual query message \" + pixManagerBean.getQueryMessage(), pixManagerBean.getQueryMessage().startsWith(\"Query Success! \")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void prepare(final IObject query) throws TaskPrepareException { try { Map<String, String> indexes = new HashMap<>(); indexes.put(keyNameField.in(query), ORDERED_INDEX); indexes.put(\"isActive\", ORDERED_INDEX); indexes.put(\"startDateTime\", DATE_TIME_INDEX); indexesField.out(query, indexes); createCollectionTask.prepare(query); } catch (InvalidArgumentException | ReadValueException | ChangeValueException e) { throw new TaskPrepareException(\"Can't prepare query for create cached collection\", e); } }### Assistant: @Test(expected = TaskPrepareException.class) public void MustIncorrectPrepareQueryForCreateCollectionWhenIOCResolveThrowException() throws Exception { IObject startQuery = mock(IObject.class); when(keyNameField.in(startQuery)).thenThrow(new ReadValueException()); testTask.prepare(startQuery); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public PropertiesFunction getFunction(String name) { return functionMap.get(name); }### Assistant: @Test public void testGetFunction() { PropertiesFunction function = PropertiesFunction.builder().setName(\"test\").build(); AccessControllerState state = AccessControllerState.builder().addFunction(function).build(); assertSame(function, state.getFunction(function.getName())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <I, O> Observable.Transformer<I, O> toTransformer( final Connectable<I, O> connectable, final BackpressureMode backpressureMode) { return new Observable.Transformer<I, O>() { @Override public Observable<O> call(final Observable<I> upstream) { return Observable.create( new Action1<Emitter<O>>() { @Override public void call(final Emitter<O> emitter) { Consumer<O> output = new Consumer<O>() { @Override public void accept(O value) { emitter.onNext(value); } }; final Connection<I> input = connectable.connect(output); final Subscription subscription = upstream.subscribe( new Action1<I>() { @Override public void call(I f) { input.accept(f); } }, new Action1<Throwable>() { @Override public void call(Throwable throwable) { emitter.onError(throwable); } }, new Action0() { @Override public void call() { emitter.onCompleted(); } }); emitter.setCancellation( new Cancellable() { @Override public void cancel() throws Exception { subscription.unsubscribe(); input.dispose(); } }); } }, backpressureMode); } }; }### Assistant: @Test public void shouldPropagateErrorsFromUpstream() throws Exception { final Throwable expected = new RuntimeException(\"expected\"); AssertableSubscriber<Integer> subscriber = input.compose(RxConnectables.toTransformer(connectable)).test(); input.onError(expected); subscriber.awaitTerminalEvent(1, TimeUnit.SECONDS); subscriber.assertError(expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Flux<ContainerHealthEvent> events(boolean snapshot) { return snapshot ? healthStatuses.compose(ReactorExt.head(() -> Collections.singletonList(buildCurrentSnapshot()))) : healthStatuses; }### Assistant: @Test public void testBadHealthDownstreamSourceTerminatesClientSubscription() { StepVerifier.create(healthService.events(false)) .then(() -> { downstream2.breakSubscriptionsWithError(new RuntimeException(\"Simulated error\")); }) .verifyError(RuntimeException.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getString() { return Path.DELIMITER_STR; }### Assistant: @Test public void shouldAllowNullTextEncoder() { assertThat(root.getString((TextEncoder)null), is(\"/\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void serialize(BinaryWriter writer) throws IOException { writer.writeSerializableFixed(this.account); writer.writeByte(WitnessScope.combineScopes(this.scopes)); if (scopes.contains(WitnessScope.CUSTOM_CONTRACTS)) { writer.writeSerializableVariable(this.allowedContracts); } if (scopes.contains(WitnessScope.CUSTOM_GROUPS)) { writer.writeSerializableVariable(this.allowedGroups); } }### Assistant: @Test public void serializeCustomGroupsScope() throws IOException { ByteArrayOutputStream outStream = new ByteArrayOutputStream(); BinaryWriter writer = new BinaryWriter(outStream); new Signer.Builder() .account(acctScriptHash) .allowedGroups(groupPubKey1, groupPubKey2) .build() .serialize(writer); byte[] actual = outStream.toByteArray(); byte[] expected = Numeric.hexStringToByteArray(\"\" + Numeric.reverseHexString(acctScriptHash.toString()) + Numeric.toHexStringNoPrefix(WitnessScope.CUSTOM_GROUPS.byteValue()) + \"02\" + Numeric.toHexStringNoPrefix(groupPubKey1.toArray()) + Numeric.toHexStringNoPrefix(groupPubKey2.toArray())); assertArrayEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public long transfer( final FileChannel dst, final long position, final long count) throws IOException { if (dst == null) { return 0; } if (isCompleted()) { return -1; } final int chunk = (int) Math.min((this.contentLength - this.len), Integer.MAX_VALUE); final long bytesRead; if (this.buffer.hasData()) { final int maxLen = Math.min(chunk, this.buffer.length()); dst.position(position); bytesRead = this.buffer.read(dst, count < maxLen ? (int)count : maxLen); } else { if (this.channel.isOpen()) { if (position > dst.size()) { throw new IOException(String.format(\"Position past end of file [%d > %d]\", position, dst.size())); } bytesRead = dst.transferFrom(this.channel, position, count < chunk ? count : chunk); } else { bytesRead = -1; } if (bytesRead > 0) { this.metrics.incrementBytesTransferred(bytesRead); } } if (bytesRead == -1) { setCompleted(); if (this.len < this.contentLength) { throw new ConnectionClosedException( \"Premature end of Content-Length delimited message body (expected: %d; received: %d)\", this.contentLength, this.len); } } this.len += bytesRead; if (this.len >= this.contentLength) { this.completed = true; } return bytesRead; }### Assistant: @Test public void testWriteBeyondFileSize() throws Exception { final ReadableByteChannel channel = new ReadableByteChannelMock( new String[] {\"a\"}, StandardCharsets.US_ASCII); final SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, 0, StandardCharsets.US_ASCII); final BasicHttpTransportMetrics metrics = new BasicHttpTransportMetrics(); final LengthDelimitedDecoder decoder = new LengthDelimitedDecoder( channel, inbuf, metrics, 1); createTempFile(); final RandomAccessFile testfile = new RandomAccessFile(this.tmpfile, \"rw\"); try { final FileChannel fchannel = testfile.getChannel(); Assert.assertEquals(0, testfile.length()); try { decoder.transfer(fchannel, 5, 10); Assert.fail(\"IOException should have been thrown\"); } catch(final IOException expected) { } } finally { testfile.close(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <C> C newConfiguration(Class<C> configType, String... keyValuePairs) { if (keyValuePairs.length == 0) { return DEFAULT_CONFIG_PROXY_FACTORY.newProxy(configType); } Preconditions.checkArgument(keyValuePairs.length % 2 == 0, \"Expected even number of arguments\"); Map<String, String> props = new HashMap<>(); int len = keyValuePairs.length / 2; for (int i = 0; i < len; i++) { props.put(keyValuePairs[i * 2], keyValuePairs[i * 2 + 1]); } Config config = new MapConfig(props); return newConfiguration(configType, config); }### Assistant: @Test public void testConfigurationWithOverrides() { assertThat(Archaius2Ext.newConfiguration(MyConfig.class, \"string\", \"overridden\").getString()).isEqualTo(\"overridden\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String sharedSet(long customerId, long sharedSetId) { return SharedSetName.format(String.valueOf(customerId), String.valueOf(sharedSetId)); }### Assistant: @Test public void testSharedSet() { String expected = \"customers/1234/sharedSets/5678\"; assertEquals(expected, ResourceNames.sharedSet(1234L, 5678L)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void encode( Message message, ValuePacker packer ) throws IOException { checkArgument( message, CommitMessage.class ); packer.packStructHeader( 0, CommitMessage.SIGNATURE ); }### Assistant: @Test void shouldEncodeCommitMessage() throws Exception { encoder.encode( COMMIT, packer ); verify( packer ).packStructHeader( 0, CommitMessage.SIGNATURE ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting void evaluateIndexingSpecification() { String tableName = null; byte[] configuration = null; Map<String,String> indexConnectionParams = Maps.newHashMap(); if (hbaseIndexerZkHost != null) { if (hbaseIndexerName == null) { throw new IllegalStateException(\"--hbase-indexer-name must be supplied if --hbase-indexer-zk is specified\"); } StateWatchingZooKeeper zk = null; try { int zkSessionTimeout = HBaseIndexerConfiguration.getSessionTimeout(conf); zk = new StateWatchingZooKeeper(hbaseIndexerZkHost, zkSessionTimeout); IndexerModelImpl indexerModel = new IndexerModelImpl(zk, conf.get(ConfKeys.ZK_ROOT_NODE, \"/ngdata/hbaseindexer\")); IndexerDefinition indexerDefinition = indexerModel.getIndexer(hbaseIndexerName); hbaseIndexerComponentFactory = indexerDefinition.getIndexerComponentFactory(); configuration = indexerDefinition.getConfiguration(); if (indexerDefinition.getConnectionParams() != null) { indexConnectionParams.putAll(indexerDefinition.getConnectionParams()); } if (zkHost == null) { zkHost = indexConnectionParams.get(\"solr.zk\"); } if (collection == null) { collection = indexConnectionParams.get(\"solr.collection\"); } indexerModel.stop(); } catch (IndexerNotFoundException infe) { throw new IllegalStateException(\"Indexer \" + hbaseIndexerName + \" doesn't exist\"); } catch (Exception e) { throw new RuntimeException(e); } finally { Closer.close(zk); } } else { if (hbaseIndexerComponentFactory == null) { hbaseIndexerComponentFactory = DefaultIndexerComponentFactory.class.getName(); } if (hbaseIndexerConfigFile == null) { throw new IllegalStateException( \"--hbase-indexer-file must be specified if --hbase-indexer-zk is not specified\"); } if (solrHomeDir == null) { if (zkHost == null) { throw new IllegalStateException( \"--zk-host must be specified if --hbase-indexer-zk is not specified\"); } if (collection == null) { throw new IllegalStateException( \"--collection must be specified if --hbase-indexer-zk is not specified\"); } } } if (this.hbaseIndexerConfigFile != null) { try { configuration = Files.toByteArray(hbaseIndexerConfigFile); } catch (IOException e) { throw new RuntimeException(\"Error loading \" + hbaseIndexerConfigFile, e); } } if (solrHomeDir != null) { indexConnectionParams.put(\"solr.mode\", \"classic\"); indexConnectionParams.put(\"solr.home\", solrHomeDir.getAbsolutePath()); } else { if (zkHost != null) { indexConnectionParams.put(\"solr.zk\", zkHost); } if (collection != null) { indexConnectionParams.put(\"solr.collection\", collection); } } ByteArrayInputStream is = new ByteArrayInputStream(configuration); IndexerComponentFactory factory = IndexerComponentFactoryUtil.getComponentFactory(hbaseIndexerComponentFactory, is, indexConnectionParams); IndexerConf indexerConf = factory.createIndexerConf(); applyMorphLineParams(indexerConf); if (hbaseTableName != null) { tableName = hbaseTableName; } else { tableName = indexerConf.getTable(); } if (hbaseIndexerName == null) { hbaseIndexerName = DEFAULT_INDEXER_NAME; } this.hbaseIndexingSpecification = new IndexingSpecification( tableName, hbaseIndexerName, hbaseIndexerComponentFactory, configuration, indexConnectionParams); }### Assistant: @Test(expected=IllegalStateException.class) public void testEvaluateIndexingSpecification_NonExistantIndexerSupplied() throws Exception { opts.hbaseIndexerZkHost = \"localhost:\" + ZK_CLIENT_PORT; opts.hbaseIndexerName = \"NONEXISTANT\"; opts.evaluateIndexingSpecification(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T extends View> T findViewByIdEfficient(int id) { return castView(findViewByIdEfficient(0, id)); }### Assistant: @Test public void testReturnChildOfParent1ByDefault() throws Exception { assertEquals(mViewParent1Child1, mSubject.findViewByIdEfficient(ID_CHILD_1)); assertEquals(mViewParent1Child2, mSubject.findViewByIdEfficient(ID_CHILD_2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String formatTimeSortable(long timeDiff) { StringBuilder buf = new StringBuilder(); long hours = timeDiff / (60 * 60 * 1000); long rem = (timeDiff % (60 * 60 * 1000)); long minutes = rem / (60 * 1000); rem = rem % (60 * 1000); long seconds = rem / 1000; if (hours > 99) { hours = 99; minutes = 59; seconds = 59; } buf.append(String.format(\"%02d\", hours)); buf.append(\"hrs, \"); buf.append(String.format(\"%02d\", minutes)); buf.append(\"mins, \"); buf.append(String.format(\"%02d\", seconds)); buf.append(\"sec\"); return buf.toString(); }### Assistant: @Test public void testFormatTimeSortable() { long timeDiff = 523452311; String timeDiffStr = \"99hrs, 59mins, 59sec\"; assertEquals(\"Incorrect time diff string returned\", timeDiffStr, StringUtils.formatTimeSortable(timeDiff)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Flux<ContainerHealthEvent> events(boolean snapshot) { return snapshot ? healthStatuses.compose(ReactorExt.head(() -> Collections.singletonList(buildCurrentSnapshot()))) : healthStatuses; }### Assistant: @Test public void testSubscriptionWithSnapshot() { downstream1.makeHealthy(taskId1); downstream2.makeHealthy(taskId1); StepVerifier.create(healthService.events(true)) .assertNext(event -> assertContainerHealthSnapshot( event, status -> status.getTaskId().equals(taskId1) && status.getState() == ContainerHealthState.Healthy) ) .then(() -> downstream1.makeUnhealthy(taskId1)) .assertNext(event -> assertContainerHealthEvent(event, taskId1, ContainerHealthState.Unhealthy)) .thenCancel() .verify(Duration.ofSeconds(5)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private static Operation createPost(URI uri, State currentState) { Operation op = Operation.createPost(uri); return prepareOp(op, currentState); }### Assistant: @Test public void failOnDestinationNodeFailureBeforeIssuingQuery() throws Throwable { createExampleDocuments(this.exampleSourceFactory, getSourceHost(), this.serviceCount); MigrationTaskService.State migrationState = validMigrationState(ExampleService.FACTORY_LINK); migrationState.sourceNodeGroupReference = UriUtils.extendUri(getSourceHost().getPublicUri(), ServiceUriPaths.DEFAULT_NODE_GROUP); migrationState.destinationNodeGroupReference = FAKE_URI; Operation op = Operation.createPost(this.destinationFactoryUri).setBody(migrationState); State state = this.sender.sendAndWait(op, State.class); State waitForServiceCompletion = waitForServiceCompletion(state.documentSelfLink, getDestinationHost()); assertEquals(TaskStage.FAILED, waitForServiceCompletion.taskInfo.stage); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean isRoleToken(String token) { boolean roleToken = false; for (String item : token.split(\";\")) { if (\"v=Z1\".equalsIgnoreCase(item)) { roleToken = true; break; } } return roleToken; }### Assistant: @Test public void testIsRoleToken() { String domain = \"AuthorizerRoleToken\"; ZMSAuthorizer authorizer = new ZMSAuthorizer(zmsUrl, domain); assertTrue(authorizer.isRoleToken(\"v=Z1;d=domain;r=roles;s=signature\")); assertTrue(authorizer.isRoleToken(\"d=domain;r=roles;v=Z1;s=signature\")); assertFalse(authorizer.isRoleToken(\"v=S1;d=domain;n=server;s=signature\")); assertFalse(authorizer.isRoleToken(\"d=domain;r=roles;s=signature\")); assertFalse(authorizer.isRoleToken(\"vZ1\")); authorizer.close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void mapObject(String name, Object object) { mappedObjects.put(name, object); CarpaccioLogger.d(TAG, \"map object [\" + name + \",\" + object.getClass().getName() + \"]\"); List<MappingWaiting> waitingsForThisName = mappingWaitings.get(name); if (waitingsForThisName != null) { for (MappingWaiting mappingWaiting : waitingsForThisName) { CarpaccioLogger.d(TAG, \"call waiting mapped \" + mappingWaiting.getCarpaccioAction().getCompleteCall()); String value = evaluate(object, mappingWaiting.getCall()); CarpaccioLogger.d(TAG, \"call waiting value = \" + value); if (value != null && mappingManagerCallback != null) { mappingWaiting.getCarpaccioAction().setValues(new String[]{value}); mappingManagerCallback.callActionOnView(mappingWaiting.getCarpaccioAction(), mappingWaiting.getView()); } } waitingsForThisName.clear(); mappingWaitings.remove(name); } }### Assistant: @Test public void testMapObject2() throws Exception { User user = new User(\"florent\"); String name = \"user\"; View view = mock(View.class); CarpaccioAction carpaccioAction = new CarpaccioAction(\"setText($user.name)\"); { ArrayList list = new ArrayList(); list.add(new MappingWaiting(view,carpaccioAction,\"user.getName()\",\"user\")); mappingManager.mappingWaitings.put(\"user\", list); } mappingManager.mapObject(name, user); assertTrue(mappingManager.mappedObjects.containsKey(name)); assertEquals(user, mappingManager.mappedObjects.get(name)); verify(callback,atLeastOnce()).callActionOnView(eq(carpaccioAction), eq(view)); assertEquals(\"florent\", carpaccioAction.getValues()[0]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String ordinalize( int number ) { int remainder = number % 100; String numberStr = Integer.toString(number); if (11 <= number && number <= 13) return numberStr + \"th\"; remainder = number % 10; if (remainder == 1) return numberStr + \"st\"; if (remainder == 2) return numberStr + \"nd\"; if (remainder == 3) return numberStr + \"rd\"; return numberStr + \"th\"; }### Assistant: @Test public void shouldOrdinalize() { ordinalize(1, \"1st\"); ordinalize(2, \"2nd\"); ordinalize(3, \"3rd\"); ordinalize(4, \"4th\"); ordinalize(5, \"5th\"); ordinalize(6, \"6th\"); ordinalize(7, \"7th\"); ordinalize(8, \"8th\"); ordinalize(9, \"9th\"); ordinalize(10, \"10th\"); ordinalize(11, \"11th\"); ordinalize(12, \"12th\"); ordinalize(13, \"13th\"); ordinalize(14, \"14th\"); ordinalize(15, \"15th\"); ordinalize(16, \"16th\"); ordinalize(17, \"17th\"); ordinalize(18, \"18th\"); ordinalize(19, \"19th\"); ordinalize(20, \"20th\"); ordinalize(21, \"21st\"); ordinalize(22, \"22nd\"); ordinalize(23, \"23rd\"); ordinalize(24, \"24th\"); ordinalize(25, \"25th\"); ordinalize(26, \"26th\"); ordinalize(27, \"27th\"); ordinalize(28, \"28th\"); ordinalize(29, \"29th\"); ordinalize(30, \"30th\"); ordinalize(31, \"31st\"); ordinalize(32, \"32nd\"); ordinalize(33, \"33rd\"); ordinalize(34, \"34th\"); ordinalize(35, \"35th\"); ordinalize(36, \"36th\"); ordinalize(37, \"37th\"); ordinalize(38, \"38th\"); ordinalize(39, \"39th\"); ordinalize(100, \"100th\"); ordinalize(101, \"101st\"); ordinalize(102, \"102nd\"); ordinalize(103, \"103rd\"); ordinalize(104, \"104th\"); ordinalize(200, \"200th\"); ordinalize(201, \"201st\"); ordinalize(202, \"202nd\"); ordinalize(203, \"203rd\"); ordinalize(204, \"204th\"); ordinalize(1000, \"1000th\"); ordinalize(1001, \"1001st\"); ordinalize(1002, \"1002nd\"); ordinalize(1003, \"1003rd\"); ordinalize(1004, \"1004th\"); ordinalize(10000, \"10000th\"); ordinalize(10001, \"10001st\"); ordinalize(10002, \"10002nd\"); ordinalize(10003, \"10003rd\"); ordinalize(10004, \"10004th\"); ordinalize(100000, \"100000th\"); ordinalize(100001, \"100001st\"); ordinalize(100002, \"100002nd\"); ordinalize(100003, \"100003rd\"); ordinalize(100004, \"100004th\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static float[] toHSVA(int argb) { float[] hsva = new float[4]; float b = ARGB.getB(argb); float g = ARGB.getG(argb); float r = ARGB.getR(argb); hsva[3] = ARGB.getA(argb); hsva[2] = Math.max(r, Math.max(g, b)); float Cmin = Math.min(r, Math.min(g, b)); float Cdelt = hsva[2] - Cmin; hsva[1] = (hsva[2] == 0) ? 0 : Cdelt / hsva[2]; hsva[0] = 60f; if (Cdelt == 0) { hsva[0] = 0; } else if (hsva[2] == r) { hsva[0] *= ((g-b)/Cdelt) % 6f; } else if (hsva[2] == g) { hsva[0] *= ((b-r)/Cdelt) + 2f; } else { hsva[0] *= ((r-g)/Cdelt) + 4f; } return hsva; }### Assistant: @Test public void testToHSVA() throws Exception { Assert.assertEquals(0, ARGB.toHSVA(ARGB.toARGB(1f, 1f, 0f, 0f))[0], 0.1); Assert.assertEquals(120, ARGB.toHSVA(ARGB.toARGB(1f, 0f, 1f, 0f))[0], 0.1); Assert.assertEquals(240, ARGB.toHSVA(ARGB.toARGB(1f, 0f, 0f, 1f))[0], 0.1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void writeAnalysis(final Analysis analysis, final Writer writer) throws IOException { checkNotNull(analysis); checkNotNull(writer); try { JAXBContext context = JAXBContext.newInstance(Analysis.class); Marshaller marshaller = context.createMarshaller(); SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); URL commonSchemaURL = SraReader.class.getResource(\"/org/nmdp/ngs/sra/xsd/SRA.common.xsd\"); URL analysisSchemaURL = SraReader.class.getResource(\"/org/nmdp/ngs/sra/xsd/SRA.analysis.xsd\"); Schema schema = schemaFactory.newSchema(new StreamSource[] { new StreamSource(commonSchemaURL.toString()), new StreamSource(analysisSchemaURL.toString()) }); marshaller.setSchema(schema); marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true); marshaller.marshal(analysis, writer); } catch (JAXBException | SAXException e) { throw new IOException(\"could not marshal Analysis\", e); } }### Assistant: @Test public void testWriteAnalysisOutputStream() throws Exception { try (OutputStream outputStream = createOutputStream()) { writeAnalysis(analysis, outputStream); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void executePutRole(ResourceContext ctx, String domainName, String roleName, Role role, String auditRef, String caller) { for (int retryCount = defaultRetryCount; ; retryCount--) { try (ObjectStoreConnection con = store.getConnection(false, true)) { String principal = getPrincipalName(ctx); checkDomainAuditEnabled(con, domainName, auditRef, caller, principal, AUDIT_TYPE_ROLE); quotaCheck.checkRoleQuota(con, domainName, role, caller); Role originalRole = getRole(con, domainName, roleName, false, false, false); if (originalRole != null && (originalRole.getAuditEnabled() == Boolean.TRUE || originalRole.getReviewEnabled() == Boolean.TRUE)) { throw ZMSUtils.requestError(\"Can not update auditEnabled and/or reviewEnabled roles\", caller); } StringBuilder auditDetails = new StringBuilder(ZMSConsts.STRING_BLDR_SIZE_DEFAULT); if (!processRole(con, originalRole, domainName, roleName, role, principal, auditRef, false, auditDetails)) { con.rollbackChanges(); throw ZMSUtils.internalServerError(\"unable to put role: \" + role.getName(), caller); } saveChanges(con, domainName); auditLogRequest(ctx, domainName, auditRef, caller, ZMSConsts.HTTP_PUT, roleName, auditDetails.toString()); return; } catch (ResourceException ex) { if (!shouldRetryOperation(ex, retryCount)) { throw ex; } } } }### Assistant: @Test public void testExecutePutRole() { String domainName = \"executeputroledom1\"; String roleName = \"role1\"; TopLevelDomain dom1 = createTopLevelDomainObject(domainName, \"Test Domain1\", \"testOrg\", adminUser); zms.postTopLevelDomain(mockDomRsrcCtx, auditRef, dom1); Role role1 = createRoleObject(domainName, roleName, null, \"user.joe\", \"user.jane\"); zms.dbService.executePutRole(mockDomRsrcCtx, domainName, roleName, role1, auditRef, \"putRole\"); Role role3 = zms.getRole(mockDomRsrcCtx, domainName, roleName, false, false, false); assertNotNull(role3); assertEquals(role3.getName(), domainName + \":role.\" + roleName); assertNull(role3.getTrust()); zms.deleteTopLevelDomain(mockDomRsrcCtx, domainName, auditRef); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String execute(CommandContext commandContext) throws NoSuchCommandException { BaseCommand command = null; try { command = ExtensionLoader.getExtensionLoader(BaseCommand.class).getExtension(commandContext.getCommandName()); } catch (Throwable throwable) { } if (command == null) { throw new NoSuchCommandException(commandContext.getCommandName()); } return command.execute(commandContext, commandContext.getArgs()); }### Assistant: @Test public void testExecute2() throws Exception { DefaultCommandExecutor executor = new DefaultCommandExecutor(); String result = executor.execute(CommandContextFactory.newInstance(\"greeting\", new String[]{\"dubbo\"}, false)); assertThat(result, equalTo(\"greeting dubbo\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final Feed getFeed(FeedName resourceName) { GetFeedRequest request = GetFeedRequest.newBuilder() .setResourceName(resourceName == null ? null : resourceName.toString()) .build(); return getFeed(request); }### Assistant: @Test @SuppressWarnings(\"all\") public void getFeedTest() { com.google.ads.googleads.v5.services.FeedName resourceName2 = com.google.ads.googleads.v5.services.FeedName.of(\"[CUSTOMER]\", \"[FEED]\"); Feed expectedResponse = Feed.newBuilder().setResourceName(resourceName2.toString()).build(); mockFeedService.addResponse(expectedResponse); FeedName resourceName = FeedName.of(\"[CUSTOMER]\", \"[FEED]\"); Feed actualResponse = client.getFeed(resourceName); Assert.assertEquals(expectedResponse, actualResponse); List<AbstractMessage> actualRequests = mockFeedService.getRequests(); Assert.assertEquals(1, actualRequests.size()); GetFeedRequest actualRequest = (GetFeedRequest) actualRequests.get(0); Assert.assertEquals(resourceName, FeedName.parse(actualRequest.getResourceName())); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Entity> build(Bundle bundle, BundleType bundleType, Document document) { Map<String, PrivateKey> privateKeyMap = Optional.ofNullable(bundle.getPrivateKeys()).orElse(Collections.emptyMap()); return buildEntities(bundle, bundleType, privateKeyMap, document); }### Assistant: @Test void buildFromEmptyBundle_noKeys() { PrivateKeyEntityBuilder builder = new PrivateKeyEntityBuilder(keystoreHelper); final List<Entity> entities = builder.build(new Bundle(), BundleType.ENVIRONMENT, INSTANCE.getDocumentBuilder().newDocument()); assertTrue(entities.isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validateConfigurationValues( String configuration, JSONObject valuesJSONObject) throws FragmentEntryConfigurationException { if (Validator.isNull(configuration)) { return; } InputStream configurationJSONSchemaInputStream = FragmentEntryValidatorImpl.class.getResourceAsStream( \"dependencies/configuration-json-schema.json\"); try { JSONValidator.validate( configuration, configurationJSONSchemaInputStream); JSONObject configurationJSONObject = JSONFactoryUtil.createJSONObject(configuration); JSONArray fieldSetsJSONArray = configurationJSONObject.getJSONArray( \"fieldSets\"); Set<String> fieldNames = new HashSet<>(); for (int fieldSetIndex = 0; fieldSetIndex < fieldSetsJSONArray.length(); fieldSetIndex++) { JSONObject fieldSetJSONObject = fieldSetsJSONArray.getJSONObject(fieldSetIndex); JSONArray fieldsJSONArray = fieldSetJSONObject.getJSONArray( \"fields\"); for (int fieldIndex = 0; fieldIndex < fieldsJSONArray.length(); fieldIndex++) { JSONObject fieldJSONObject = fieldsJSONArray.getJSONObject( fieldIndex); String fieldName = fieldJSONObject.getString(\"name\"); if (fieldNames.contains(fieldName)) { throw new FragmentEntryConfigurationException( \"Field names must be unique\"); } JSONObject typeOptionsJSONObject = fieldJSONObject.getJSONObject(\"typeOptions\"); if (typeOptionsJSONObject != null) { String defaultValue = fieldJSONObject.getString( \"defaultValue\"); if (!_checkValidationRules( defaultValue, typeOptionsJSONObject.getJSONObject( \"validation\"))) { throw new FragmentEntryConfigurationException( \"Invalid default configuration value for \" + \"field \" + fieldName); } if (valuesJSONObject != null) { String value = valuesJSONObject.getString( fieldName); if (!_checkValidationRules( value, typeOptionsJSONObject.getJSONObject( \"validation\"))) { throw new FragmentEntryConfigurationException( \"Invalid configuration value for field \" + fieldName); } } } fieldNames.add(fieldName); } } } catch (JSONException jsonException) { throw new FragmentEntryConfigurationException( _getMessage(jsonException.getMessage()), jsonException); } catch (JSONValidatorException jsonValidatorException) { throw new FragmentEntryConfigurationException( _getMessage(jsonValidatorException.getMessage()), jsonValidatorException); } }### Assistant: @Test public void testValidateConfigurationValuesTextFieldTypeInvalidURL() throws Exception { expectedException.expect(FragmentEntryConfigurationException.class); _fragmentEntryValidatorImpl.validateConfigurationValues( _read(\"configuration_field_text_typeoptions_validation_url.json\"), JSONUtil.put(\"urlField\", StringUtil.randomString())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public org.modeshape.jcr.api.query.Query createQuery( String statement, String language ) throws InvalidQueryException, RepositoryException { CheckArg.isNotNull(statement, \"statement\"); CheckArg.isNotNull(language, \"language\"); return createQuery(statement, language, null, null); }### Assistant: @SuppressWarnings( \"deprecation\" ) @Test public void shouldBeAbleToExecuteXPathQueryToFindRootNode() throws RepositoryException { Query query = session.getWorkspace().getQueryManager().createQuery(\"/jcr:root\", Query.XPATH); QueryResult result = query.execute(); validateQuery().rowCount(1).hasColumns(\"jcr:primaryType\", \"jcr:path\", \"jcr:score\").validate(query, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CandidateGroup apply(final String decisionTable, final BusinessData businessData) { DmnDecisionTableResult result = decisionService.evaluateDecisionTableByKey(decisionTable, businessData.toVariables()); DmnDecisionRuleResult singleResult = result.getSingleResult(); return singleResult != null ? new CandidateGroup(singleResult.getSingleEntry()) : CandidateGroup.empty(); }### Assistant: @Test public void evaluate_input_wrong() throws Exception { thrown.expect(ProcessEngineException.class); thrown.expectCause(CoreMatchers.is(DmnEvaluationException.class)); final HashMap<String,Integer> data = new HashMap<>(); data.put(\"abc\", 3); businessData = new BusinessData(data); evaluate.apply(\"box\", businessData); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public BeanDescription processJavaInput(InputStream in) throws ParseException { final BeanDescription descriptionToFill = new BeanDescription(); CompilationUnit cu = JavaParser.parse(in, \"UTF-8\"); (new VoidVisitorAdapter<Object>() { @Override public void visit(MethodDeclaration m, Object arg) { if (m.getAnnotations() != null) { log.debug(m.getName() + \":\"); String methodName = m.getName(); if (methodName != null && methodName.length() >= 4 && (methodName.startsWith(\"set\") || methodName.startsWith(\"get\"))) { String propName = methodName.substring(3, 4).toLowerCase() + methodName.substring(4); for (AnnotationExpr an : m.getAnnotations()) { log.debug(\" \" + an); String annoName = an.getName().toString(); PropertyDescription newProp = descriptionToFill.getProperty(propName); if (newProp == null) { newProp = new PropertyDescription(descriptionToFill, propName, m.getType().toString()); descriptionToFill.addProperty(newProp); } if (MapProperty.class.getSimpleName().equals(annoName)) { processMapPropertyAnnotation(descriptionToFill, newProp, an); } if (DisplayProperty.class.getSimpleName().equals(annoName)) { processDisplayPropertyAnnotation(descriptionToFill, newProp, an); } } } } if (m.getName().startsWith(\"get\")) { descriptionToFill.addGetter(m.getName()); } if (m.getName().startsWith(\"set\")) { descriptionToFill.addSetter(m.getName()); } super.visit(m, arg); } @Override public void visit(FieldDeclaration f, Object arg) { if (f.getVariables().size() > 0 && f.getAnnotations() != null) { log.debug(f.getVariables().get(0).toString() + \":\"); String fieldName = f.getVariables().get(0).getId().toString(); if (fieldName != null && fieldName.length() >= 1) { for (AnnotationExpr an : f.getAnnotations()) { log.debug(\" \" + an); String annoName = an.getName().toString(); if (MapProperty.class.getSimpleName().equals(annoName)) { PropertyDescription newProp = descriptionToFill.getProperty(fieldName); if (newProp == null) { newProp = new PropertyDescription(descriptionToFill, fieldName, f.getType().toString()); descriptionToFill.addProperty(newProp); } processMapPropertyAnnotation(descriptionToFill, newProp, an); } if (DisplayProperty.class.getSimpleName().equals(annoName)) { PropertyDescription newProp = descriptionToFill.getProperty(fieldName); if (newProp == null) { newProp = new PropertyDescription(descriptionToFill, fieldName, f.getType().toString()); descriptionToFill.addProperty(newProp); } processDisplayPropertyAnnotation(descriptionToFill, newProp, an); } } } } super.visit(f, arg); } private void processMapPropertyAnnotation(final BeanDescription descriptionToFill, PropertyDescription newProp, AnnotationExpr an) { newProp.setMapped(true); if (an instanceof NormalAnnotationExpr) { for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"profileSettings\".equals(pair.getName())) { if (pair.getValue() instanceof ArrayInitializerExpr) { ArrayInitializerExpr array = (ArrayInitializerExpr) pair.getValue(); for (Expression arrayexp : array.getValues()) { processMapPropertyProfileAnnotation(newProp, arrayexp); } } else { processMapPropertyProfileAnnotation(newProp, pair.getValue()); } } else if (\"ignore\".equals(pair.getName())) { newProp.setMapped(!Boolean.valueOf(pair.getValue().toString())); } } } } private void processMapPropertyProfileAnnotation(PropertyDescription newProp, Expression arrayexp) { log.debug(\" \" + arrayexp); String profileName = null; for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"profileName\".equals(innerpair.getName())) { profileName = ((StringLiteralExpr) innerpair.getValue()).getValue(); } } MapPropertyProfileDescription newProfile = newProp.getMapPropertyProfile(profileName); for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"deep\".equals(innerpair.getName())) { newProfile.setDeep(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"exclude\".equals(innerpair.getName())) { newProfile.setExcluded(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"include\".equals(innerpair.getName())) { newProfile.setIncluded(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"mandatory\".equals(innerpair.getName())) { newProfile.setMandatory(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"profileName\".equals(innerpair.getName())) { } else if (\"readonly\".equals(innerpair.getName())) { newProfile.setReadonly(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"targetPropertyName\".equals(innerpair.getName())) { newProfile.setTargetPropertyName(((StringLiteralExpr) innerpair.getValue()).getValue()); } else if (\"targetPropertyClassName\".equals(innerpair.getName())) { newProfile.setTargetPropertyClassName(((StringLiteralExpr) innerpair.getValue()).getValue()); } } } private void processDisplayPropertyAnnotation(final BeanDescription descriptionToFill, PropertyDescription newProp, AnnotationExpr an) { newProp.setDisplayed(true); if (an instanceof NormalAnnotationExpr) { for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"captionProp\".equals(pair.getName())) { newProp.setCaptionProp(((StringLiteralExpr) pair.getValue()).getValue()); } else if (\"converterClassName\".equals(pair.getName())) { newProp.setConverterClassName(((StringLiteralExpr) pair.getValue()).getValue()); descriptionToFill.addImport(createConverterImportString(newProp.getConverterClassName())); } else if (\"captionText\".equals(pair.getName())) { newProp.setCaptionText(((StringLiteralExpr) pair.getValue()).getValue()); } else if (\"profileSettings\".equals(pair.getName())) { if (pair.getValue() instanceof ArrayInitializerExpr) { ArrayInitializerExpr array = (ArrayInitializerExpr) pair.getValue(); for (Expression arrayexp : array.getValues()) { processDisplayPropertyProfileAnnotation(newProp, arrayexp); } } else { processDisplayPropertyProfileAnnotation(newProp, pair.getValue()); } } else if (\"ignore\".equals(pair.getName())) { newProp.setDisplayed(!Boolean.valueOf(pair.getValue().toString())); } else if (\"sortable\".equals(pair.getName())) { newProp.setSortable(Boolean.valueOf(pair.getValue().toString())); } } } } private void processDisplayPropertyProfileAnnotation(PropertyDescription newProp, Expression arrayexp) { log.debug(\" \" + arrayexp); String profileName = Constants.DEFAULT_DISPLAY_PROFILE; for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"profileName\".equals(innerpair.getName())) { profileName = ((StringLiteralExpr) innerpair.getValue()).getValue(); } } DisplayPropertyProfileDescription newProfile = newProp.getDisplayPropertyProfile(profileName); for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"customClassName\".equals(innerpair.getName())) { newProfile.setCustomClassName(((StringLiteralExpr) innerpair.getValue()).getValue()); } else if (\"customAuswahlAusListe\".equals(innerpair.getName())) { newProfile.setCustomAuswahlAusListe(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"customMultiAuswahlAusListe\".equals(innerpair.getName())) { newProfile.setCustomMultiAuswahlAusListe(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"customUnboxed\".equals(innerpair.getName())) { newProfile.setCustomUnboxed(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"exclude\".equals(innerpair.getName())) { newProfile.setExcluded(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"fieldType\".equals(innerpair.getName())) { newProfile.setFieldType(FieldType.valueOf(innerpair.getValue().toString().replace(\"FieldType.\", \"\"))); } else if (\"include\".equals(innerpair.getName())) { newProfile.setIncluded(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"order\".equals(innerpair.getName())) { newProfile.setOrder(Integer.parseInt(innerpair.getValue().toString())); } else if (\"profileName\".equals(innerpair.getName())) { } else if (\"readOnly\".equals(innerpair.getName())) { newProfile.setReadOnly(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"required\".equals(innerpair.getName())) { newProfile.setRequired(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"sectionName\".equals(innerpair.getName())) { newProfile.setSectionName(((StringLiteralExpr) innerpair.getValue()).getValue()); } else if (\"showInDetail\".equals(innerpair.getName())) { newProfile.setShowInDetail(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"showInTable\".equals(innerpair.getName())) { newProfile.setShowInTable(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"tableExpandRatio\".equals(innerpair.getName())) { newProfile.setTableExpandRatio(Float.parseFloat(innerpair.getValue().toString())); } else if (\"allowTextInput\".equals(innerpair.getName())) { newProfile.setAllowTextInput(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"useAsSummary\".equals(innerpair.getName())) { newProfile.setUseAsSummary(Boolean.valueOf(innerpair.getValue().toString())); } } } @Override public void visit(EnumConstantDeclaration c, Object arg) { log.debug(c.toString() + \":\"); String fieldName = c.getName(); if (fieldName != null && fieldName.length() >= 1) { EnumValueDescription newVal = descriptionToFill.getEnumValue(fieldName); if (newVal == null) { newVal = new EnumValueDescription(descriptionToFill, fieldName); descriptionToFill.addEnumValue(newVal); } if (c.getAnnotations() != null) { for (AnnotationExpr an : c.getAnnotations()) { log.debug(\" \" + an); String annoName = an.getName().toString(); if (DisplayEnum.class.getSimpleName().equals(annoName)) { processDisplayEnumAnnotation(descriptionToFill, newVal, an); } } } } } private void processDisplayEnumAnnotation(final BeanDescription descriptionToFill, EnumValueDescription newVal, AnnotationExpr an) { if (an instanceof NormalAnnotationExpr) { for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"captionProp\".equals(pair.getName())) { newVal.setCaptionProp(((StringLiteralExpr) pair.getValue()).getValue()); } else if (\"captionText\".equals(pair.getName())) { newVal.setCaptionText(((StringLiteralExpr) pair.getValue()).getValue()); } } } } @Override public void visit(ClassOrInterfaceDeclaration cls, Object arg) { if (!cls.isInterface()) { if (cls.getAnnotations() != null) { log.debug(\"(class):\"); descriptionToFill.setClassName(cls.getName()); for (AnnotationExpr an : cls.getAnnotations()) { log.debug(\" \" + an); String annoName = an.getName().toString(); if (MapBean.class.getSimpleName().equals(annoName)) { processMapBeanAnnotation(descriptionToFill, an); } if (DisplayBean.class.getSimpleName().equals(annoName)) { processDisplayBeanAnnotation(descriptionToFill, an); } if (ServiceBean.class.getSimpleName().equals(annoName)) { processServiceBeanAnnotation(descriptionToFill, an); } if (WrappedBean.class.getSimpleName().equals(annoName)) { processWrappedBeanAnnotation(descriptionToFill, an); } } } } super.visit(cls, arg); } private void processMapBeanAnnotation(final BeanDescription descriptionToFill, AnnotationExpr an) { descriptionToFill.setMapped(true); for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (an instanceof NormalAnnotationExpr) { if (\"ignore\".equals(pair.getName())) { descriptionToFill.setMapped(!Boolean.valueOf(pair.getValue().toString())); } else if (\"profiles\".equals(pair.getName())) { if (pair.getValue() instanceof ArrayInitializerExpr) { ArrayInitializerExpr array = (ArrayInitializerExpr) pair.getValue(); for (Expression arrayexp : array.getValues()) { processMapBeanProfileAnnotation(descriptionToFill, arrayexp); } } else { processMapBeanProfileAnnotation(descriptionToFill, pair.getValue()); } } } } } private void processMapBeanProfileAnnotation(final BeanDescription descriptionToFill, Expression arrayexp) { log.debug(\" \" + arrayexp); String profileName = null; for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"profileName\".equals(innerpair.getName())) { profileName = ((StringLiteralExpr) innerpair.getValue()).getValue(); } } MapProfileDescription newProfile = descriptionToFill.getMapProfile(profileName); for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"bidirectional\".equals(innerpair.getName())) { newProfile.setBidirectional(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"profileName\".equals(innerpair.getName())) { } else if (\"target\".equals(innerpair.getName())) { newProfile.setTargetClassName(((ClassExpr) innerpair.getValue()).getType().toString()); } } } private void processDisplayBeanAnnotation(final BeanDescription descriptionToFill, AnnotationExpr an) { descriptionToFill.setDisplayed(true); if (an instanceof NormalAnnotationExpr) { descriptionToFill.getDisplayProfile(Constants.DEFAULT_DISPLAY_PROFILE); for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"ignore\".equals(pair.getName())) { descriptionToFill.setDisplayed(!Boolean.valueOf(pair.getValue().toString())); } else if (\"captionProp\".equals(pair.getName())) { descriptionToFill.setCaptionProp(((StringLiteralExpr) pair.getValue()).getValue()); } else if (\"captionText\".equals(pair.getName())) { descriptionToFill.setCaptionText(((StringLiteralExpr) pair.getValue()).getValue()); } else if (\"beanValidation\".equals(pair.getName())) { descriptionToFill.setBeanValidation(((BooleanLiteralExpr) pair.getValue()).getValue()); } else if (\"profiles\".equals(pair.getName())) { if (pair.getValue() instanceof ArrayInitializerExpr) { ArrayInitializerExpr array = (ArrayInitializerExpr) pair.getValue(); for (Expression arrayexp : array.getValues()) { processDisplayBeanProfileAnnotation(descriptionToFill, arrayexp); } } else { processDisplayBeanProfileAnnotation(descriptionToFill, pair.getValue()); } } } } } private void processDisplayBeanProfileAnnotation(final BeanDescription descriptionToFill, Expression arrayexp) { log.debug(\" \" + arrayexp); String profileName = null; for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"profileName\".equals(innerpair.getName())) { profileName = ((StringLiteralExpr) innerpair.getValue()).getValue(); } } DisplayProfileDescription newProfile = descriptionToFill.getDisplayProfile(profileName); for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"profileCaptionText\".equals(innerpair.getName())) { newProfile.setProfileCaptionText(((StringLiteralExpr) innerpair.getValue()).getValue()); } else if (\"profileCaptionProp\".equals(innerpair.getName())) { newProfile.setProfileCaptionProp(((StringLiteralExpr) innerpair.getValue()).getValue()); } else if (\"order\".equals(innerpair.getName())) { newProfile.setOrder(Integer.parseInt(innerpair.getValue().toString())); } else if (\"profileName\".equals(innerpair.getName())) { } else if (\"showOnFirstPage\".equals(innerpair.getName())) { newProfile.setShowOnFirstPage(Boolean.valueOf(innerpair.getValue().toString())); } } } private void processServiceBeanAnnotation(final BeanDescription descriptionToFill, AnnotationExpr an) { descriptionToFill.setService(true); if (an instanceof NormalAnnotationExpr) { for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"ignore\".equals(pair.getName())) { descriptionToFill.setService(!Boolean.valueOf(pair.getValue().toString())); } } } } private void processWrappedBeanAnnotation(final BeanDescription descriptionToFill, AnnotationExpr an) { descriptionToFill.setWrapped(true); if (an instanceof NormalAnnotationExpr) { for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"ignore\".equals(pair.getName())) { descriptionToFill.setWrapped(!Boolean.valueOf(pair.getValue().toString())); } } } } @Override public void visit(ImportDeclaration imp, Object arg) { if (!imp.toString().contains(\"de.akquinet.engineering.vaadinator.annotations.\")) { descriptionToFill.addImport(imp.toString().trim()); } super.visit(imp, arg); } @Override public void visit(ConstructorDeclaration n, Object arg) { ConstructorDescription newCons = new ConstructorDescription(descriptionToFill); if (n.getParameters() != null) { for (Parameter p : n.getParameters()) { newCons.addParam(new ConstructorParamDescription(newCons, p.getId().getName(), p.getType().toString())); } } descriptionToFill.addConstructor(newCons); super.visit(n, arg); } @Override public void visit(EnumDeclaration n, Object arg) { log.debug(\"(enum):\"); descriptionToFill.setClassName(n.getName()); descriptionToFill.setEnumeration(true); super.visit(n, arg); } }).visit(cu, null); return descriptionToFill; }### Assistant: @Test public void testNoSummaryMethod () throws ParseException { BeanDescription desc = daoUnderTest.processJavaInput(getClass().getResourceAsStream(\"AddressMinimal.javainput\")); assertEquals(\"toString\", desc.getDisplayProfile(Constants.DEFAULT_DISPLAY_PROFILE).getSummaryMethod()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static RegionMask create(String name, String data) throws ParseException { final boolean[][] samples = new boolean[height][width]; final StringTokenizer stringTokenizer = new StringTokenizer(data, \"\\n\"); int lineNo = 0; int y = 0; while (stringTokenizer.hasMoreTokens()) { lineNo++; String line = stringTokenizer.nextToken().trim(); if (!line.isEmpty() && !line.startsWith(\"#\")) { if (line.length() != width) { throw new ParseException(String.format(\"Region %s: Illegal mask format in line %d: Line must contain exactly %d characters, but found %d.\", name, lineNo, width, line.length()), 0); } for (int x = 0; x < width; x++) { char c = line.charAt(x); if (c != '0' && c != '1') { throw new ParseException(String.format(\"Region %s: Illegal mask format in line %d: Only use characters '0' and '1'.\", name, lineNo), x); } if (c == '1') { samples[y][x] = true; } } y++; } } if (y != height) { throw new ParseException(String.format(\"Region %s: Illegal mask format in line %d: Exactly %d lines are required, but found %d.\", name, lineNo, height, y), 0); } return new RegionMask(name, samples); }### Assistant: @Test public void testCreate_invalidData() { final char[] data = createData(73, 36); set(data, 11, 19, 'I'); try { RegionMask.create(\"test\", new String(data)); fail(\"ParseException expected\"); } catch (ParseException expected) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static JavaMethodId parseMethodQName(String _s) { return JavaId.parseMethodQName(JavaId.Type.CLASS, _s); }### Assistant: @Test public void testMethodParser() { final JavaPackageId p = new JavaPackageId(\"com.sap.research\"); final JavaClassId c = new JavaClassId(p, \"TestClass\"); final JavaClassId nc = new JavaClassId(c, \"NestedClass\"); final JavaMethodId m1 = new JavaMethodId(nc, \"foo\", Arrays.asList(\"java.lang.String\", \"int\")); final JavaMethodId m2 = JavaId.parseMethodQName(\"com.sap.research.TestClass$NestedClass.foo(String,int)\"); assertEquals(m1, m2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int hashCode() { int h = this.hash; if (h == 0 && this.value.length > 0) { for (final byte byteValue : this.value) { h = 31 * h + byteValue; } this.hash = h; } return h; }### Assistant: @Test public void testHashCode() { final byte[] byteValue1 = randomUUID().toString().getBytes(); final byte[] byteValue2 = Arrays.copyOf(byteValue1, byteValue1.length); final BytesValue value1 = new BytesValue(byteValue1); final BytesValue value2 = new BytesValue(byteValue2); assertEquals(value1.hashCode(), value2.hashCode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public RangerServiceConfigDef populateXXToRangerServiceConfigDef(XXServiceConfigDef xObj) { RangerServiceConfigDef vObj = new RangerServiceConfigDef(); vObj.setItemId(xObj.getItemId()); vObj.setName(xObj.getName()); vObj.setType(xObj.getType()); vObj.setSubType(xObj.getSubtype()); vObj.setMandatory(xObj.getIsMandatory()); vObj.setDefaultValue(xObj.getDefaultvalue()); vObj.setValidationRegEx(xObj.getValidationRegEx()); vObj.setValidationMessage(xObj.getValidationMessage()); vObj.setUiHint(xObj.getUiHint()); vObj.setLabel(xObj.getLabel()); vObj.setDescription(xObj.getDescription()); vObj.setRbKeyLabel(xObj.getRbkeylabel()); vObj.setRbKeyDescription(xObj.getRbkeydescription()); vObj.setRbKeyValidationMessage(xObj.getRbKeyValidationMessage()); return vObj; }### Assistant: @Test public void test4populateXXToRangerServiceConfigDef() { XXServiceConfigDef serviceConfigDefObj = new XXServiceConfigDef(); RangerServiceConfigDef dbserviceConfigDefObj = rangerServiceDefService .populateXXToRangerServiceConfigDef(serviceConfigDefObj); Assert.assertNotNull(dbserviceConfigDefObj); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public T0 get0() { return ((T0) values[0]); }### Assistant: @Test void get0Test() { assertEquals(0, (int) instance.get0()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static RenderBucketType getRenderBucketType(final String name) { if (name == null) { throw new IllegalArgumentException(\"name must not be null!\"); } RenderBucketType bucketType = bucketTypeMap.get(name); if (bucketType == null) { bucketType = new RenderBucketType(name); bucketTypeMap.put(name, bucketType); } return bucketType; }### Assistant: @Test public void getPrebucket() throws Exception { final RenderBucketType preBucket = RenderBucketType.getRenderBucketType(\"PreBucket\"); assertNotNull(preBucket); final RenderBucketType preBucket2 = RenderBucketType.getRenderBucketType(\"PreBucket\"); assertSame(preBucket, preBucket2); assertSame(RenderBucketType.PreBucket, preBucket); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public byte[] encrypt(final byte[] plaintext, final byte[] contextInfo ) throws GeneralSecurityException { if (contextInfo != null) { throw new GeneralSecurityException(\"contextInfo must be null because it is unused\"); } if (plaintext.length > recordSize - WebPushConstants.CIPHERTEXT_OVERHEAD) { throw new GeneralSecurityException(\"plaintext too long\"); } KeyPair keyPair = EllipticCurves.generateKeyPair(WebPushConstants.NIST_P256_CURVE_TYPE); ECPrivateKey ephemeralPrivateKey = (ECPrivateKey) keyPair.getPrivate(); ECPublicKey ephemeralPublicKey = (ECPublicKey) keyPair.getPublic(); byte[] ecdhSecret = EllipticCurves.computeSharedSecret(ephemeralPrivateKey, recipientPublicPoint); byte[] ephemeralPublicKeyBytes = EllipticCurves.pointEncode( WebPushConstants.NIST_P256_CURVE_TYPE, WebPushConstants.UNCOMPRESSED_POINT_FORMAT, ephemeralPublicKey.getW()); byte[] ikm = WebPushUtil.computeIkm(ecdhSecret, authSecret, recipientPublicKey, ephemeralPublicKeyBytes); byte[] salt = Random.randBytes(WebPushConstants.SALT_SIZE); byte[] cek = WebPushUtil.computeCek(ikm, salt); byte[] nonce = WebPushUtil.computeNonce(ikm, salt); return ByteBuffer.allocate(WebPushConstants.CIPHERTEXT_OVERHEAD + plaintext.length) .put(salt) .putInt(recordSize) .put((byte) WebPushConstants.PUBLIC_KEY_SIZE) .put(ephemeralPublicKeyBytes) .put(encrypt(cek, nonce, plaintext)) .array(); }### Assistant: @Test public void testEncryptDecryptWithVaryingRecordSizes() throws Exception { KeyPair uaKeyPair = EllipticCurves.generateKeyPair(WebPushConstants.NIST_P256_CURVE_TYPE); ECPrivateKey uaPrivateKey = (ECPrivateKey) uaKeyPair.getPrivate(); ECPublicKey uaPublicKey = (ECPublicKey) uaKeyPair.getPublic(); byte[] authSecret = Random.randBytes(16); int numTests = 100; if (TestUtil.isTsan()) { numTests = 5; } for (int i = 0; i < numTests; i++) { int recordSize = WebPushConstants.CIPHERTEXT_OVERHEAD + Random.randInt( WebPushConstants.MAX_CIPHERTEXT_SIZE - WebPushConstants.CIPHERTEXT_OVERHEAD); HybridEncrypt hybridEncrypt = new WebPushHybridEncrypt.Builder() .withRecordSize(recordSize) .withAuthSecret(authSecret) .withRecipientPublicKey(uaPublicKey) .build(); HybridDecrypt hybridDecrypt = new WebPushHybridDecrypt.Builder() .withRecordSize(recordSize) .withAuthSecret(authSecret) .withRecipientPublicKey(uaPublicKey) .withRecipientPrivateKey(uaPrivateKey) .build(); byte[] plaintext = Random.randBytes(recordSize - WebPushConstants.CIPHERTEXT_OVERHEAD); byte[] ciphertext = hybridEncrypt.encrypt(plaintext, null ); assertEquals(ciphertext.length, plaintext.length + WebPushConstants.CIPHERTEXT_OVERHEAD); assertArrayEquals(plaintext, hybridDecrypt.decrypt(ciphertext, null )); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void configure() throws ConfigurationException { super.configure(); appConstants = AppConstants.getInstance(getConfigurationClassLoader()); if (StringUtils.isNotEmpty(getFileName()) && !isLookupAtRuntime()) { URL resource = null; try { resource = ClassUtils.getResourceURL(getConfigurationClassLoader(), getFileName()); } catch (Throwable e) { throw new ConfigurationException(getLogPrefix(null)+\"got exception searching for [\"+getFileName()+\"]\", e); } if (resource==null) { throw new ConfigurationException(getLogPrefix(null)+\"cannot find resource [\"+getFileName()+\"]\"); } try { returnString = Misc.resourceToString(resource, SystemUtils.LINE_SEPARATOR); } catch (Throwable e) { throw new ConfigurationException(getLogPrefix(null)+\"got exception loading [\"+getFileName()+\"]\", e); } } if ((StringUtils.isEmpty(fileName)) && (StringUtils.isEmpty(fileNameSessionKey)) && returnString==null) { throw new ConfigurationException(getLogPrefix(null)+\"has neither fileName nor fileNameSessionKey nor returnString specified\"); } if (StringUtils.isNotEmpty(replaceFrom)) { returnString = replace(returnString, replaceFrom, replaceTo ); } }### Assistant: @Test public void testEmptyFileName() throws Exception{ exception.expectMessage(\"Pipe [FixedResult under test] has neither fileName nor fileNameSessionKey nor returnString specified\"); pipe.configure(); fail(\"this should fail\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void exception(final ConnectionMonitor.InfoProvider infoProvider, @Nullable final Exception exception) { if (null != exception) { exception(infoProvider, defaultExceptionMessage, exception.getMessage()); } else { exception(infoProvider, defaultExceptionMessage, FALLBACK_EXCEPTION_TEXT); } }### Assistant: @Test public void exceptionDoesntFailOnNullException() { final EvictingConnectionLogger logger = builder().build(); logger.exception(randomInfoProvider(), null); LogEntryAssertions.assertThat(getFirstAndOnlyEntry(logger)) .isNotNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Resource> getDifferenceChain(final Resource sourceCommitId, final Resource targetCommitId, final RepositoryConnection conn) { return getDifferenceChain(sourceCommitId, targetCommitId, conn, false); }### Assistant: @Test public void doesDifferenceChainSourceCommitExist() { Resource sourceId = VALUE_FACTORY.createIRI(\"http: Resource targetId = VALUE_FACTORY.createIRI(\"http: thrown.expect(IllegalArgumentException.class); thrown.expectMessage(String.format(\"Commit %s could not be found\", sourceId.stringValue())); try (RepositoryConnection conn = repo.getConnection()) { List<Resource> actual = service.getDifferenceChain(sourceId, targetId, conn); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @DeleteMapping(value = \"{processId}/instances/{processInstanceId}/nodeInstances/{nodeInstanceId}\", produces = APPLICATION_JSON_VALUE) public ResponseEntity cancelNodeInstanceId(@PathVariable(\"processId\") String processId, @PathVariable(\"processInstanceId\") String processInstanceId, @PathVariable(\"nodeInstanceId\") String nodeInstanceId) { return doCancelNodeInstanceId(processId, processInstanceId, nodeInstanceId); }### Assistant: @Test void cancelNodeInstanceId() { tested.cancelNodeInstanceId(PROCESS_ID, PROCESS_INSTANCE_ID, NODE_INSTANCE_ID); verify(tested).doCancelNodeInstanceId(PROCESS_ID, PROCESS_INSTANCE_ID, NODE_INSTANCE_ID); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting @Override public BlockType getBlockType() { return HeaderFormat.getBlockType(header); }### Assistant: @Test public void testGetBlockType() { replication = 3; preferredBlockSize = 128*1024*1024; INodeFile inf = createINodeFile(replication, preferredBlockSize); assertEquals(inf.getBlockType(), CONTIGUOUS); INodeFile striped = createStripedINodeFile(preferredBlockSize); assertEquals(striped.getBlockType(), STRIPED); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public MaterializedConfiguration getConfiguration() { MaterializedConfiguration conf = new SimpleMaterializedConfiguration(); FlumeConfiguration fconfig = getFlumeConfiguration(); AgentConfiguration agentConf = fconfig.getConfigurationFor(getAgentName()); if (agentConf != null) { Map<String, ChannelComponent> channelComponentMap = Maps.newHashMap(); Map<String, SourceRunner> sourceRunnerMap = Maps.newHashMap(); Map<String, SinkRunner> sinkRunnerMap = Maps.newHashMap(); try { loadChannels(agentConf, channelComponentMap); loadSources(agentConf, channelComponentMap, sourceRunnerMap); loadSinks(agentConf, channelComponentMap, sinkRunnerMap); Set<String> channelNames = new HashSet<String>(channelComponentMap.keySet()); for (String channelName : channelNames) { ChannelComponent channelComponent = channelComponentMap.get(channelName); if (channelComponent.components.isEmpty()) { LOGGER.warn(String.format(\"Channel %s has no components connected\" + \" and has been removed.\", channelName)); channelComponentMap.remove(channelName); Map<String, Channel> nameChannelMap = channelCache.get(channelComponent.channel.getClass()); if (nameChannelMap != null) { nameChannelMap.remove(channelName); } } else { LOGGER.info(String.format(\"Channel %s connected to %s\", channelName, channelComponent.components.toString())); conf.addChannel(channelName, channelComponent.channel); } } for (Map.Entry<String, SourceRunner> entry : sourceRunnerMap.entrySet()) { conf.addSourceRunner(entry.getKey(), entry.getValue()); } for (Map.Entry<String, SinkRunner> entry : sinkRunnerMap.entrySet()) { conf.addSinkRunner(entry.getKey(), entry.getValue()); } } catch (InstantiationException ex) { LOGGER.error(\"Failed to instantiate component\", ex); } finally { channelComponentMap.clear(); sourceRunnerMap.clear(); sinkRunnerMap.clear(); } } else { LOGGER.warn(\"No configuration found for this host:{}\", getAgentName()); } return conf; }### Assistant: @Test public void testSourceAndSinkThrowExceptionDuringConfiguration() throws Exception { String agentName = \"agent1\"; String sourceType = UnconfigurableSource.class.getName(); String channelType = \"memory\"; String sinkType = UnconfigurableSink.class.getName(); Map<String, String> properties = getProperties(agentName, sourceType, channelType, sinkType); MemoryConfigurationProvider provider = new MemoryConfigurationProvider(agentName, properties); MaterializedConfiguration config = provider.getConfiguration(); Assert.assertTrue(config.getSourceRunners().size() == 0); Assert.assertTrue(config.getChannels().size() == 0); Assert.assertTrue(config.getSinkRunners().size() == 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private Feature update(@PathParam(\"group\") String group, Feature feature) { return featureService.updateFeature(group, feature.getKey(), feature) .orElseThrow(() -> new RuntimeException(\"\")); }### Assistant: @Test public void testUpdate() throws Exception { JerseyClient client = createClient(); String featureKey = \"testUpdateFeatureKey\"; Feature feature = buildTestFeature(seedGroupOneKey, featureKey); String featureJson = Protobuf3Support.toJsonString(feature); String url = createFeatureUrl() + \"/\" + seedGroupOneKey; Response register = client.target(url) .request() .property(HTTP_AUTHENTICATION_BASIC_USERNAME, seedServiceOne + \"/service\") .property(HTTP_AUTHENTICATION_BASIC_PASSWORD, basicPassword) .post(Entity.entity(featureJson, MediaType.APPLICATION_JSON_TYPE)); assertTrue(register.getStatus() == 201); String jsonRegister = register.readEntity(String.class); Feature.Builder builderRegister = Feature.newBuilder(); JsonFormat.parser().merge(jsonRegister, builderRegister); String id = builderRegister.getId(); String created = builderRegister.getCreated(); String updated = builderRegister.getUpdated(); Status state = builderRegister.getStatus(); assertNotNull(id); assertNotNull(updated); assertNotNull(created); assertEquals(Status.off, state); Feature update = builderRegister.build().toBuilder().setStatus(Status.on).build(); String featureUpdateJson = Protobuf3Support.toJsonString(update); Response responseUpdate = client.target(url + \"/\" + featureKey) .request() .property(HTTP_AUTHENTICATION_BASIC_USERNAME, seedMemberOne + \"/member\") .property(HTTP_AUTHENTICATION_BASIC_PASSWORD, basicPassword) .post(Entity.entity(featureUpdateJson, MediaType.APPLICATION_JSON_TYPE)); assertTrue(responseUpdate.getStatus() == 200); String jsonUpdateResult = responseUpdate.readEntity(String.class); Feature.Builder builderUpdated = Feature.newBuilder(); JsonFormat.parser().merge(jsonUpdateResult, builderUpdated); assertEquals(id, builderUpdated.getId()); assertNotEquals(updated, builderUpdated.getUpdated()); assertEquals(created, builderUpdated.getCreated()); assertEquals(Status.on, builderUpdated.getStatus()); Response responseGet = client.target(url + \"/\" + featureKey) .request() .property(HTTP_AUTHENTICATION_BASIC_USERNAME, seedServiceOne + \"/service\") .property(HTTP_AUTHENTICATION_BASIC_PASSWORD, basicPassword) .get(); String jsonResponseGet = responseGet.readEntity(String.class); Feature.Builder responseGetBuilder = Feature.newBuilder(); JsonFormat.parser().merge(jsonResponseGet, responseGetBuilder); Feature featResponseGet = responseGetBuilder.build(); assertEquals(id, featResponseGet.getId()); assertEquals(id, featResponseGet.getId()); assertNotEquals(updated, featResponseGet.getUpdated()); assertEquals(builderUpdated.getUpdated(), featResponseGet.getUpdated()); assertEquals(created, featResponseGet.getCreated()); assertEquals(Status.on, featResponseGet.getStatus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <C extends Comparable> C center(final Range<C> range) { checkNotNull(range); if (!range.hasLowerBound() && !range.hasUpperBound()) { throw new IllegalStateException(\"cannot find the center of a range without bounds\"); } if (!range.hasLowerBound()) { return range.upperEndpoint(); } if (!range.hasUpperBound()) { return range.lowerEndpoint(); } C lowerEndpoint = range.lowerEndpoint(); C upperEndpoint = range.upperEndpoint(); if (upperEndpoint instanceof Integer) { Integer upper = (Integer) upperEndpoint; Integer lower = (Integer) lowerEndpoint; return (C) Integer.valueOf((upper.intValue() + lower.intValue()) / 2); } if (upperEndpoint instanceof Long) { Long upper = (Long) upperEndpoint; Long lower = (Long) lowerEndpoint; return (C) Long.valueOf((upper.longValue() + lower.longValue()) / 2L); } if (upperEndpoint instanceof BigInteger) { BigInteger upper = (BigInteger) upperEndpoint; BigInteger lower = (BigInteger) lowerEndpoint; BigInteger two = BigInteger.valueOf(2L); return (C) upper.subtract(lower).divide(two); } throw new IllegalStateException(\"cannot find the center of a range whose endpoint type is not Integer, Long, or BigInteger\"); }### Assistant: @Test(expected=NullPointerException.class) public void testCenterNull() { center(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void validate(final String template, final Placeholder<?>... placeholders) { applyOrElseRetain(template, PlaceholderFactory.newExpressionResolverForValidation(placeholders)); }### Assistant: @Test public void testValidate() { PlaceholderFilter.validate(\"{{thing:namespace}}/{{thing:name}}:{{header:device-id}}\", placeholders); PlaceholderFilter.validate(\"{{ thing:namespace }}/{{ thing:name }}:{{ header:device-id }}\", placeholders); PlaceholderFilter.validate(\"{{thing:namespace }}/{{ thing:name }}:{{header:device-id }}\", placeholders); PlaceholderFilter.validate(\"{{thing:namespace }}{{ thing:name }}{{header:device-id }}\", placeholders); PlaceholderFilter.validate(\"{{thing:namespace }} {{ thing:name }} {{header:device-id }}\", placeholders); PlaceholderFilter.validate(\" {{thing:namespace }}{{ thing:name }}{{header:device-id }} \", placeholders); PlaceholderFilter.validate(\"-----{{thing:namespace }}{{ thing:name }}{{header:device-id }}-----\", placeholders); PlaceholderFilter.validate(\"-----{{thing:namespace }} placeholders); PlaceholderFilter.validate(\"{{ thing:namespace }}:{{thing:id | fn:substring-after(':')}}\", placeholders); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @POST @Timed @ApiOperation(\"runSync\") public ActionResponse runSync(@Valid final ActionRequest request) { return queryExecutor.execute(request); }### Assistant: @Test public void testRunSync() throws Exception { GroupRequest groupRequest = new GroupRequest(); groupRequest.setTable(TestUtils.TEST_TABLE_NAME); groupRequest.setNesting(Arrays.asList(\"os\", \"device\", \"version\")); Map<String, Object> expectedResponse = new LinkedHashMap<String, Object>(); final Map<String, Object> nexusResponse = new LinkedHashMap<String, Object>() {{ put(\"1\", 2); put(\"2\", 2); put(\"3\", 1); }}; final Map<String, Object> galaxyResponse = new LinkedHashMap<String, Object>() {{ put(\"2\", 1); put(\"3\", 1); }}; expectedResponse.put(\"android\", new LinkedHashMap<String, Object>() {{ put(\"nexus\", nexusResponse); put(\"galaxy\", galaxyResponse); }}); final Map<String, Object> nexusResponse2 = new LinkedHashMap<String, Object>() {{ put(\"2\", 1); }}; final Map<String, Object> iPadResponse = new LinkedHashMap<String, Object>() {{ put(\"2\", 2); }}; final Map<String, Object> iPhoneResponse = new LinkedHashMap<String, Object>() {{ put(\"1\", 1); }}; expectedResponse.put(\"ios\", new LinkedHashMap<String, Object>() {{ put(\"nexus\", nexusResponse2); put(\"ipad\", iPadResponse); put(\"iphone\", iPhoneResponse); }}); Entity<GroupRequest> serviceUserEntity = Entity.json(groupRequest); GroupResponse response = resources.client() .target(\"/v1/analytics\") .request() .post(serviceUserEntity, GroupResponse.class); assertEquals(expectedResponse, response.getResult()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> List<T> apply(T[] a) { return apply(Arrays.asList(a)); }### Assistant: @Test public void minOnlyRange() { Range r = new Range(4,Integer.MAX_VALUE); assertEquals(\"[e, f]\", toS(r.apply(array))); assertEquals(\"[e, f]\", toS(r.apply(list))); assertEquals(\"[e, f]\", toS(r.apply(set))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; DiscreteInterval other = (DiscreteInterval) obj; if (max != other.max) return false; if (min != other.min) return false; return true; }### Assistant: @Test public void intervalsWithDifferentMinimumsAreNotEqual() { DiscreteInterval i1 = new DiscreteInterval(1,6); DiscreteInterval i2 = new DiscreteInterval(2,6); assertFalse(i1.equals(i2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void modifyGroupsVisibility(HashMap<Long, Integer> groupVisibilityMap) { checkAdminAccess(); xaBizUtil.blockAuditorRoleUser(); Set<Map.Entry<Long, Integer>> entries = groupVisibilityMap.entrySet(); for (Map.Entry<Long, Integer> entry : entries) { XXGroup xGroup = daoManager.getXXGroup().getById(entry.getKey()); VXGroup vObj = xGroupService.populateViewBean(xGroup); vObj.setIsVisible(entry.getValue()); vObj = xGroupService.updateResource(vObj); } }### Assistant: @Test public void test13ModifyGroupsVisibilitySetEmpty() { setup(); XXGroupDao xxGroupDao = Mockito.mock(XXGroupDao.class); VXGroup vXGroup = vxGroup(); XXGroup xxGroup = new XXGroup(); HashMap<Long, Integer> groupVisibilityMap = new HashMap<Long, Integer>(); groupVisibilityMap.put(userId, emptyValue); Mockito.when(daoManager.getXXGroup()).thenReturn(xxGroupDao); Mockito.when(xxGroupDao.getById(vXGroup.getId())).thenReturn(xxGroup); Mockito.when(xGroupService.populateViewBean(xxGroup)).thenReturn(vXGroup); Mockito.when(xGroupService.updateResource(vXGroup)).thenReturn(vXGroup); xUserMgr.modifyGroupsVisibility(groupVisibilityMap); Assert.assertEquals(emptyValue, vXGroup.getIsVisible()); Assert.assertEquals(userId, vXGroup.getId()); Mockito.verify(daoManager).getXXGroup(); Mockito.verify(xGroupService).populateViewBean(xxGroup); Mockito.verify(xGroupService).updateResource(vXGroup); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public JestClient createClient() { if (client == null) { HttpClientConfig.Builder builder = new HttpClientConfig.Builder(serverUris) .maxTotalConnection(maxTotalConnections) .defaultMaxTotalConnectionPerRoute(defaultMaxTotalConnectionsPerRoute) .connTimeout(connTimeout) .readTimeout(readTimeout) .discoveryEnabled(discoveryEnabled) .multiThreaded(true); if (this.auth != null) { auth.configure(builder); } WrappedHttpClientConfig.Builder wrappedHttpClientConfigBuilder = new WrappedHttpClientConfig.Builder(builder.build()) .ioThreadCount(ioThreadCount); client = getClientProvider(wrappedHttpClientConfigBuilder).createClient(); } return client; }### Assistant: @Test public void clientIsInitializedOnlyOnce() { JestHttpObjectFactory factory = spy(createTestObjectFactoryBuilder().build()); JestClient client1 = factory.createClient(); JestClient client2 = factory.createClient(); assertEquals(client1, client2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public B2Bucket deleteBucket(B2AccountAuthorization accountAuth, B2DeleteBucketRequestReal request) throws B2Exception { return webApiClient.postJsonReturnJson( makeUrl(accountAuth, \"b2_delete_bucket\"), makeHeaders(accountAuth), request, B2Bucket.class); }### Assistant: @Test public void testDeleteBucket() throws B2Exception { final B2DeleteBucketRequestReal requestReal = new B2DeleteBucketRequestReal(ACCOUNT_ID, bucketId(1)); webifier.deleteBucket(ACCOUNT_AUTH, requestReal); webApiClient.check(\"postJsonReturnJson.\\n\" + \"url:\\n\" + \" apiUrl1/b2api/v2/b2_delete_bucket\\n\" + \"headers:\\n\" + \" Authorization: accountToken1\\n\" + \" User-Agent: SecretAgentMan/3.19.28\\n\" + \" X-Bz-Test-Mode: force_cap_exceeded\\n\" + \"request:\\n\" + \" {\\n\" + \" \\\"accountId\\\": \\\"1\\\",\\n\" + \" \\\"bucketId\\\": \\\"bucket1\\\"\\n\" + \" }\\n\" + \"responseClass:\\n\" + \" B2Bucket\\n\" ); checkRequestCategory(OTHER, w -> w.deleteBucket(ACCOUNT_AUTH, requestReal)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void handleResponse(Response response) { handleConnection(response); if (isAsync() && CollectionUtils.isNotEmpty(interceptors)) { int length = interceptors.size(); for (int i = length - 1; i >= 0; i--) { interceptors.get(i).handleResponse(response); } } if (isAsync()) { setRpcContext(); if (response == null) { callback.fail(new RpcException(RpcException.SERVICE_EXCEPTION, \"internal error\")); } else if (response.getResult() != null) { callback.success((T) response.getResult()); } else { callback.fail(response.getException()); } } }### Assistant: @Test public void testAsyncHandleNullResponse() throws Exception { rpcFuture.handleResponse(null); verify(rpcCallback).fail(throwableCaptor.capture()); Throwable t = throwableCaptor.getValue(); assertThat(t, instanceOf(RpcException.class)); verify(interceptor).handleResponse(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @GetMapping(\"/{id:^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+$}\") @ApiOperation(\"\u6839\u636eID\u67e5\u8be2\u4ee3\u7801\u751f\u6210\u6a21\u677f\") @PreAuthorize(\"hasAnyAuthority('\" + QUERY_PERM + \"')\") public Result<Gen> findById(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id) { return super.findById(id); }### Assistant: @Test public void testFindById() throws Exception { String id = \"{}\"; String result = mockMvc.perform(get(\"/tool/gen/\"+ id) .header(HttpHeaders.AUTHORIZATION, String.join(\" \", accessToken.getTokenType(), accessToken.getValue())) .contentType(MediaType.APPLICATION_JSON_UTF8) .accept(MediaType.APPLICATION_JSON_UTF8)) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.data.id\").value(id)) .andReturn().getResponse().getContentAsString(); log.info(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute( EnforcerRuleHelper helper ) throws EnforcerRuleException { logger = helper.getLog(); MavenSession session; try { session = (MavenSession) helper.evaluate( \"${session}\" ); } catch ( ExpressionEvaluationException eee ) { throw new EnforcerRuleException( \"Unable to retrieve the MavenSession: \", eee ); } List<MavenProject> sortedProjects = session.getProjectDependencyGraph().getSortedProjects(); if ( sortedProjects != null && !sortedProjects.isEmpty() ) { checkReactor( sortedProjects ); checkParentsInReactor( sortedProjects ); checkMissingParentsInReactor( sortedProjects ); checkParentsPartOfTheReactor( sortedProjects ); if ( !isIgnoreModuleDependencies() ) { checkDependenciesWithinReactor( sortedProjects ); } } }### Assistant: @Test( expected = EnforcerRuleException.class ) public void shouldFailWithWrongDependencyInReactor() throws EnforcerRuleException, ExpressionEvaluationException { MavenProject mp1 = createProjectParent(); MavenProject mp2 = createProjectChild1( mp1 ); Dependency goodDependency = createDependency( \"org.junit\", \"junit\", \"2.0\" ); Dependency wrongDepFromReactor = createDependency( \"org.apache.enforcer\", \"m2\", \"1.1-SNAPSHOT\" ); List<Dependency> depList = Arrays.asList( goodDependency, wrongDepFromReactor ); when( mp2.getDependencies() ).thenReturn( depList ); MavenProject mp3 = createProjectChild2( mp1 ); List<MavenProject> theList = Arrays.asList( mp1, mp2, mp3 ); setupSortedProjects( theList ); rule.execute( helper ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static RetrieveThingsResponse of(final List<String> thingsPlainJson, @Nullable final String namespace, final DittoHeaders dittoHeaders) { return new RetrieveThingsResponse(HttpStatusCode.OK, null, thingsPlainJson.stream() .collect(Collectors.joining(\",\", \"[\", \"]\")), namespace, dittoHeaders); }### Assistant: @Test(expected = NullPointerException.class) public void tryToCreateInstanceWithNullThings() { RetrieveThingsResponse.of((List<Thing>) null, FieldType.notHidden(), \"some.namespace\", TestConstants.EMPTY_DITTO_HEADERS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public PolicyRestAdapter populateRequestParameters(HttpServletRequest request) { PolicyRestAdapter policyData = null; ClosedLoopFaultTrapDatas trapDatas = null; ClosedLoopFaultTrapDatas faultDatas = null; try { ObjectMapper mapper = new ObjectMapper(); mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); JsonNode root = mapper.readTree(request.getReader()); policyData = mapper.readValue(root.get(\"policyData\").toString(), PolicyRestAdapter.class); if (root.get(\"trapData\") != null) { trapDatas = mapper.readValue(root.get(\"trapData\").toString(), ClosedLoopFaultTrapDatas.class); policyData.setTrapDatas(trapDatas); } if (root.get(\"faultData\") != null) { faultDatas = mapper.readValue(root.get(\"faultData\").toString(), ClosedLoopFaultTrapDatas.class); policyData.setFaultDatas(faultDatas); } JsonObject json = stringToJsonObject(root.toString()); if (json.containsKey(\"policyJSON\")) { policyData.setPolicyJSON(root.get(\"policyJSON\")); } else { String jsonBodyData = json.getJsonObject(\"policyData\").get(\"jsonBodyData\").toString(); policyData.setJsonBody(jsonBodyData); } } catch (Exception e) { LOGGER.error(\"Exception Occured while populating request parameters: \" + e); } return policyData; }### Assistant: @Test public void testConfigBrmsParameterHandling() throws Exception { PolicyParameters parameters = createParametersObject(); parameters.setPolicyConfigType(PolicyConfigType.BRMS_PARAM); PolicyValidationRequestWrapper wrapper = new PolicyValidationRequestWrapper(); assertThatThrownBy(() -> wrapper.populateRequestParameters(parameters)) .isInstanceOf(NullPointerException.class); Map<AttributeType, Map<String, String>> attributes = new LinkedHashMap<>(); parameters.setAttributes(attributes); assertThatThrownBy(() -> wrapper.populateRequestParameters(parameters)) .isInstanceOf(NullPointerException.class); Map<String, String> templateMap = new LinkedHashMap<>(); templateMap.put(\"templateName\", \"Template Name\"); attributes.put(AttributeType.RULE, templateMap); PolicyRestAdapter adapter = wrapper.populateRequestParameters((parameters)); assertEquals(\"BRMS_Param\", adapter.getConfigPolicyType()); assertEquals(\"Template Name\", adapter.getRuleName()); parameters.setConfigBody(\"{\\\"someParameter\\\": \\\"someValue\\\"}\"); adapter = wrapper.populateRequestParameters((parameters)); assertEquals(\"BRMS_Param\", adapter.getConfigPolicyType()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void setOriginalColumnType(final ColumnType columnType) { this.originalColumnType = columnType; final Collection<ImageListEditor<ColumnType>.Entry> acceptableEntries = getAcceptableEntries(columnType); this.columnType.setEntries(acceptableEntries); }### Assistant: @Test public void testSetOriginalColumnType() { ColumnType type = mock(ColumnType.class); presenter.setOriginalColumnType(type); verify(columnType, times(1)).setEntries(any(Collection.class)); verify(columnType, times(0)).isEditMode(anyBoolean()); verify(columnType, times(0)).setHelpContent(anyString(), anyString(), any(Placement.class)); verify(columnType, times(0)).setImageSize(anyString(), anyString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean next(final TokenKind allowedTokenKind) { if (allowedTokenKind == null) { return false; } boolean found = false; final int previousIndex = index; switch (allowedTokenKind) { case EOF: found = index >= parseString.length(); break; case REF: found = nextConstant(\"$ref\"); break; case VALUE: found = nextConstant(\"$value\"); break; case COUNT: found = nextConstant(\"$count\"); break; case CROSSJOIN: found = nextConstant(\"$crossjoin\"); break; case ROOT: found = nextConstant(\"$root\"); break; case IT: found = nextConstant(\"$it\"); break; case APPLY: found = nextConstant(\"$apply\"); break; case EXPAND: found = nextConstant(\"$expand\"); break; case FILTER: found = nextConstant(\"$filter\"); break; case LEVELS: found = nextConstant(\"$levels\"); break; case ORDERBY: found = nextConstant(\"$orderby\"); break; case SEARCH: found = nextConstant(\"$search\"); break; case SELECT: found = nextConstant(\"$select\"); break; case SKIP: found = nextConstant(\"$skip\"); break; case TOP: found = nextConstant(\"$top\"); break; case ANY: found = nextConstant(\"any\"); break; case ALL: found = nextConstant(\"all\"); break; case OPEN: found = nextCharacter('('); break; case CLOSE: found = nextCharacter(')'); break; case COMMA: found = nextCharacter(','); break; case SEMI: found = nextCharacter(';'); break; case COLON: found = nextCharacter(':'); break; case DOT: found = nextCharacter('.'); break; case SLASH: found = nextCharacter('/'); break; case EQ: found = nextCharacter('='); break; case STAR: found = nextCharacter('*'); break; case PLUS: found = nextCharacter('+'); break; case NULL: found = nextConstant(\"null\"); break; case MAX: found = nextConstant(\"max\"); break; case AVERAGE: found = nextConstant(\"average\"); break; case COUNTDISTINCT: found = nextConstant(\"countdistinct\"); break; case IDENTITY: found = nextConstant(\"identity\"); break; case MIN: found = nextConstant(\"min\"); break; case SUM: found = nextConstant(\"sum\"); break; case ROLLUP_ALL: found = nextConstant(\"$all\"); break; case ODataIdentifier: found = nextODataIdentifier(); break; case QualifiedName: found = nextQualifiedName(); break; case ParameterAliasName: found = nextParameterAliasName(); break; case BooleanValue: found = nextBooleanValue(); break; case StringValue: found = nextStringValue(); break; case IntegerValue: found = nextIntegerValue(true); break; case GuidValue: found = nextGuidValue(); break; case DateValue: found = nextDateValue(); break; case DateTimeOffsetValue: found = nextDateTimeOffsetValue(); break; case TimeOfDayValue: found = nextTimeOfDayValue(); break; case DecimalValue: found = nextDecimalValue(); break; case DoubleValue: found = nextDoubleValue(); break; case DurationValue: found = nextDurationValue(); break; case BinaryValue: found = nextBinaryValue(); break; case EnumValue: found = nextEnumValue(); break; case GeographyPoint: found = nextGeoPoint(true); break; case GeometryPoint: found = nextGeoPoint(false); break; case GeographyLineString: found = nextGeoLineString(true); break; case GeometryLineString: found = nextGeoLineString(false); break; case GeographyPolygon: found = nextGeoPolygon(true); break; case GeometryPolygon: found = nextGeoPolygon(false); break; case GeographyMultiPoint: found = nextGeoMultiPoint(true); break; case GeometryMultiPoint: found = nextGeoMultiPoint(false); break; case GeographyMultiLineString: found = nextGeoMultiLineString(true); break; case GeometryMultiLineString: found = nextGeoMultiLineString(false); break; case GeographyMultiPolygon: found = nextGeoMultiPolygon(true); break; case GeometryMultiPolygon: found = nextGeoMultiPolygon(false); break; case GeographyCollection: found = nextGeoCollection(true); break; case GeometryCollection: found = nextGeoCollection(false); break; case jsonArrayOrObject: found = nextJsonArrayOrObject(); break; case Word: found = nextWord(); break; case Phrase: found = nextPhrase(); break; case OrOperatorSearch: found = nextBinaryOperator(\"OR\"); break; case AndOperatorSearch: found = nextAndOperatorSearch(); break; case NotOperatorSearch: found = nextUnaryOperator(\"NOT\"); break; case OrOperator: found = nextBinaryOperator(\"or\"); break; case AndOperator: found = nextBinaryOperator(\"and\"); break; case EqualsOperator: found = nextBinaryOperator(\"eq\"); break; case NotEqualsOperator: found = nextBinaryOperator(\"ne\"); break; case GreaterThanOperator: found = nextBinaryOperator(\"gt\"); break; case GreaterThanOrEqualsOperator: found = nextBinaryOperator(\"ge\"); break; case LessThanOperator: found = nextBinaryOperator(\"lt\"); break; case LessThanOrEqualsOperator: found = nextBinaryOperator(\"le\"); break; case HasOperator: found = nextBinaryOperator(\"has\"); break; case InOperator: found = nextBinaryOperator(\"in\"); break; case AddOperator: found = nextBinaryOperator(\"add\"); break; case SubOperator: found = nextBinaryOperator(\"sub\"); break; case MulOperator: found = nextBinaryOperator(\"mul\"); break; case DivOperator: found = nextBinaryOperator(\"div\"); break; case ModOperator: found = nextBinaryOperator(\"mod\"); break; case MinusOperator: found = nextCharacter('-') && !nextDigit() && !nextConstant(\"INF\"); break; case NotOperator: found = nextUnaryOperator(\"not\"); break; case AsOperator: found = nextBinaryOperator(\"as\"); break; case FromOperator: found = nextBinaryOperator(\"from\"); break; case WithOperator: found = nextBinaryOperator(\"with\"); break; case CastMethod: found = nextMethod(\"cast\"); break; case CeilingMethod: found = nextMethod(\"ceiling\"); break; case ConcatMethod: found = nextMethod(\"concat\"); break; case ContainsMethod: found = nextMethod(\"contains\"); break; case DateMethod: found = nextMethod(\"date\"); break; case DayMethod: found = nextMethod(\"day\"); break; case EndswithMethod: found = nextMethod(\"endswith\"); break; case FloorMethod: found = nextMethod(\"floor\"); break; case FractionalsecondsMethod: found = nextMethod(\"fractionalseconds\"); break; case GeoDistanceMethod: found = nextMethod(\"geo.distance\"); break; case GeoIntersectsMethod: found = nextMethod(\"geo.intersects\"); break; case GeoLengthMethod: found = nextMethod(\"geo.length\"); break; case HourMethod: found = nextMethod(\"hour\"); break; case IndexofMethod: found = nextMethod(\"indexof\"); break; case IsofMethod: found = nextMethod(\"isof\"); break; case LengthMethod: found = nextMethod(\"length\"); break; case MaxdatetimeMethod: found = nextMethod(\"maxdatetime\"); break; case MindatetimeMethod: found = nextMethod(\"mindatetime\"); break; case MinuteMethod: found = nextMethod(\"minute\"); break; case MonthMethod: found = nextMethod(\"month\"); break; case NowMethod: found = nextMethod(\"now\"); break; case RoundMethod: found = nextMethod(\"round\"); break; case SecondMethod: found = nextMethod(\"second\"); break; case StartswithMethod: found = nextMethod(\"startswith\"); break; case SubstringMethod: found = nextMethod(\"substring\"); break; case TimeMethod: found = nextMethod(\"time\"); break; case TolowerMethod: found = nextMethod(\"tolower\"); break; case TotaloffsetminutesMethod: found = nextMethod(\"totaloffsetminutes\"); break; case TotalsecondsMethod: found = nextMethod(\"totalseconds\"); break; case ToupperMethod: found = nextMethod(\"toupper\"); break; case TrimMethod: found = nextMethod(\"trim\"); break; case YearMethod: found = nextMethod(\"year\"); break; case SubstringofMethod: found = nextMethod(\"substringof\"); break; case IsDefinedMethod: found = nextMethod(\"isdefined\"); break; case AggregateTrafo: found = nextMethod(\"aggregate\"); break; case BottomCountTrafo: found = nextMethod(\"bottomcount\"); break; case BottomPercentTrafo: found = nextMethod(\"bottompercent\"); break; case BottomSumTrafo: found = nextMethod(\"bottomsum\"); break; case ComputeTrafo: found = nextMethod(\"compute\"); break; case ExpandTrafo: found = nextMethod(\"expand\"); break; case FilterTrafo: found = nextMethod(\"filter\"); break; case GroupByTrafo: found = nextMethod(\"groupby\"); break; case SearchTrafo: found = nextMethod(\"search\"); break; case TopCountTrafo: found = nextMethod(\"topcount\"); break; case TopPercentTrafo: found = nextMethod(\"toppercent\"); break; case TopSumTrafo: found = nextMethod(\"topsum\"); break; case RollUpSpec: found = nextMethod(\"rollup\"); break; case AscSuffix: found = nextSuffix(\"asc\"); break; case DescSuffix: found = nextSuffix(\"desc\"); break; } if (found) { startIndex = previousIndex; } else { index = previousIndex; } return found; }### Assistant: @Test public void booleanValue() { assertTrue(new UriTokenizer(\"true\").next(TokenKind.BooleanValue)); assertTrue(new UriTokenizer(\"tRuE\").next(TokenKind.BooleanValue)); assertTrue(new UriTokenizer(\"false\").next(TokenKind.BooleanValue)); assertTrue(new UriTokenizer(\"False\").next(TokenKind.BooleanValue)); wrongToken(TokenKind.BooleanValue, \"true\", 'x'); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public long trimLog(final long desiredTrimIndex) { return currentState.trimLog(desiredTrimIndex); }### Assistant: @Test public void testTrimLogWhenTrimIndexNotPresent() { doReturn(20L).when(mockRaftActorContext).getLastApplied(); doReturn(false).when(mockReplicatedLog).isPresent(10); long retIndex = snapshotManager.trimLog(10); assertEquals(\"return index\", -1L, retIndex); verify(mockReplicatedLog, never()).snapshotPreCommit(anyLong(), anyLong()); verify(mockReplicatedLog, never()).snapshotCommit(); verify(mockRaftActorBehavior).setReplicatedToAllIndex(10L); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void validate(HttpServerRequest req, String type, Buffer jsonBuffer, Handler<ValidationResult> callback) { final Logger log = RequestLoggerFactory.getLogger(Validator.class, req); if(!req.path().startsWith(schemaRoot)) { log.debug(\"Validating request\"); doValidate(jsonBuffer, req.path(), schemaRoot, type, (req.path().replaceFirst(\"^/\", \"\")+\"/\"+type).split(\"/\"), log, callback); } }### Assistant: @Test public void testValidationWithNoSchema(TestContext context){ storage.putMockData(\"/foo/schemas/apis/foo/\",\"{\\\"foo\\\": [\\\"mediamessage\\\"]}\"); storage.putMockData(\"/foo/schemas/apis/foo/mediamessage/\",\"{\\\"mediamessage\\\": [\\\"v1\\\"]}\"); storage.putMockData(\"/foo/schemas/apis/foo/mediamessage/v1/\",\"{\\\"v1\\\": [\\\"output\\\"]}\"); storage.putMockData(\"/foo/schemas/apis/foo/mediamessage/v1/output/\",\"{\\\"output\\\": [\\\"front\\\"]}\"); class GETValidationResourceRequest extends HttpServerRequestMock { @Override public HttpMethod method() { return HttpMethod.GET; } @Override public String uri() { return \"/foo/mediamessage/v1/output/front\"; } @Override public String path() { return \"/foo/mediamessage/v1/output/front\"; } } String type = \"GET/out\"; Buffer jsonBuffer = Buffer.buffer(); final SettableFuture<String> future = SettableFuture.create(); validator.validate(new GETValidationResourceRequest(), type, jsonBuffer, validationResult -> { String message = validationResult.getMessage(); context.assertTrue(message.contains(\"Could not get path\"), message); future.set(message); }); context.assertTrue(future.isDone()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validate(TopicIF topic) throws SchemaViolationException { TopicClass klass = (TopicClass) findClass(topic, schema.getTopicClasses()); if (klass == null) { if (schema.isStrict()) handler.violation(\"No matching rule for topic\", topic.getTopicMap(), topic, null); return; } Collection basenamecs = klass.getAllTopicNameConstraints(); Collection occurrencecs = klass.getAllOccurrenceConstraints(); Collection rolecs = klass.getAllRoleConstraints(); Collection others = klass.getOtherClasses(); Iterator it = topic.getTypes().iterator(); while (it.hasNext()) { TopicIF tclass = (TopicIF) it.next(); if (klass.getTypeSpecification().matchType(tclass)) continue; boolean found = false; Iterator it2 = others.iterator(); while (it2.hasNext()) { TypeSpecification typespec = (TypeSpecification) it2.next(); if (typespec.matchType(tclass)) { found = true; TopicClass otherclass = (TopicClass) findClassFor(tclass, schema.getTopicClasses()); if (otherclass != null) { basenamecs.addAll(otherclass.getAllTopicNameConstraints()); occurrencecs.addAll(otherclass.getAllOccurrenceConstraints()); rolecs.addAll(otherclass.getAllRoleConstraints()); } break; } } if (!found) handler.violation(\"Topic instance of illegal other class\", topic, tclass, null); } validate(topic, basenamecs, topic.getTopicNames(), klass.isStrict()); validate(topic, occurrencecs, topic.getOccurrences(), klass.isStrict()); validate(topic, rolecs, topic.getRoles(), klass.isStrict()); }### Assistant: @Test public void testMinimumAssociationRoles() throws IOException, SchemaSyntaxException { OSLSchema schema = (OSLSchema) readSchema(\"in\", \"arole.xml\"); AssociationIF instance = builder.makeAssociation(makeType(\"#type\")); validate(schema, instance, null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Plan validateReservationListRequest( ReservationSystem reservationSystem, ReservationListRequest request) throws YarnException { String queue = request.getQueue(); if (request.getEndTime() < request.getStartTime()) { String errorMessage = \"The specified end time must be greater than \" + \"the specified start time.\"; RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.LIST_RESERVATION_REQUEST, \"validate list reservation input\", \"ClientRMService\", errorMessage); throw RPCUtil.getRemoteException(errorMessage); } return getPlanFromQueue(reservationSystem, queue, AuditConstants.LIST_RESERVATION_REQUEST); }### Assistant: @Test public void testListReservationsInvalidTimeInterval() { ReservationListRequest request = new ReservationListRequestPBImpl(); request.setQueue(ReservationSystemTestUtil.reservationQ); request.setEndTime(1000); request.setStartTime(2000); when(rSystem.getPlan(ReservationSystemTestUtil.reservationQ)).thenReturn (this.plan); Plan plan = null; try { plan = rrValidator.validateReservationListRequest(rSystem, request); Assert.fail(); } catch (YarnException e) { Assert.assertNull(plan); String message = e.getMessage(); Assert.assertTrue(message.equals(\"The specified end time must be \" + \"greater than the specified start time.\")); LOG.info(message); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute() throws TaskExecutionException { try { IDatabase dataBase = IOC.resolve(Keys.getOrAdd(InMemoryDatabase.class.getCanonicalName())); Long result = dataBase.count(criteria, collection); callback.execute(result); } catch (ResolutionException e) { throw new TaskExecutionException(\"Failed to resolve InMemoryDatabase\", e); } catch (Exception e) { try { throw new TaskExecutionException(\"Count failed: criteria = \" + criteria.serialize(), e); } catch (SerializeException | NullPointerException e1) { throw new TaskExecutionException(\"Count failed\", e); } } }### Assistant: @Test public void testExecute() throws InvalidArgumentException, ChangeValueException, TaskPrepareException, TaskExecutionException, IDatabaseException, ActionExecuteException { InMemoryDBCountTask selectTask = new InMemoryDBCountTask(); IObject query = new DSObject(\"{\\\"collectionName\\\": \\\"collection_name\\\"}\"); IObject criteria = new DSObject(\"{\\\"hello\\\": \\\"world\\\"}\"); IAction<Long> callback = mock(IAction.class); IFieldName criteriaFieldName = new FieldName(\"criteria\"); IFieldName callbackFieldName = new FieldName(\"callback\"); query.setValue(criteriaFieldName, criteria); query.setValue(callbackFieldName, callback); selectTask.prepare(query); selectTask.execute(); verify(inMemoryDatabase).count(criteria, \"collection_name\"); verify(callback).execute(any(Long.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure public final BusStop getNearestBusStop(Point2D<?, ?> point) { return getNearestBusStop(point.getX(), point.getY()); }### Assistant: @Test public void testGetNearestBusStopPoint2d() { assertNull(this.network.getNearestBusStop(new Point2d(0, 0))); initTest(); assertSame(this.stop1, this.network.getNearestBusStop(new Point2d(0, 0))); assertSame(this.stop2, this.network.getNearestBusStop(new Point2d(-10, 0))); assertSame(this.stop4, this.network.getNearestBusStop(new Point2d(110, -110))); assertSame(this.stop1, this.network.getNearestBusStop(new Point2d(100, 0))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean containsKey(Object key) { return keyClass.isInstance(key); }### Assistant: @Test public void containsKey_true() { assertEquals(true, cache.containsKey(\"a\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int get() { if (next == phoneNumbers.length) { throw new NoNumbersLeftException(\"No phone numbers left.\"); } return phoneNumbers[next++]; }### Assistant: @Test public void get_RaiseErrorWhenNoNumbersAreLeft() { PhoneNumberAllotter tested = new SimplePhoneNumberAllotter(0); boolean thrown = false; try { tested.get(); } catch (NoNumbersLeftException e) { thrown = true; } assertTrue(thrown); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean addValue(String value) { if (value == null) { value = \"\"; } if (values.contains(value)) { return false; } return values.add(value); }### Assistant: @Test public void shouldAllowNullsAsInput() { assertThat(multiValue.addValue(null), is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void doSystem(Param p) { doSystem(\"\", p); }### Assistant: @Test public void testDoSystem() { JAXBConfigImpl config = new JAXBConfigImpl(); Param p = new Param(); p.setName(\"foo\"); p.setValue(\"bar\"); p.setOverride(false); config.doSystem(p); Assert.assertEquals(\"bar\", System.getProperty(\"foo\")); p.setOverride(false); p.setValue(\"barbar\"); config.doSystem(p); Assert.assertEquals(\"bar\", System.getProperty(\"foo\")); System.getProperties().remove(\"foo\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String diff(IChemObject first, IChemObject second) { IDifference diff = difference(first, second); if (diff == null) { return \"\"; } else { return diff.toString(); } }### Assistant: @Test public void testDiff() { IAtom carbon = mock(IAtom.class); IAtom oxygen = mock(IAtom.class); when(carbon.getSymbol()).thenReturn(\"C\"); when(oxygen.getSymbol()).thenReturn(\"O\"); ILonePair bond1 = mock(ILonePair.class); ILonePair bond2 = mock(ILonePair.class); when(bond1.getAtom()).thenReturn(carbon); when(bond2.getAtom()).thenReturn(oxygen); String result = LonePairDiff.diff(bond1, bond2); Assert.assertNotNull(result); Assert.assertNotSame(0, result.length()); assertContains(result, \"LonePairDiff\"); assertContains(result, \"AtomDiff\"); assertContains(result, \"C/O\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull public static Formatter<File> fileFormatter() { return FILE_FORMATTER; }### Assistant: @Test public void testFileFormatter() { Formatter<File> f = Formatters.fileFormatter(); assertCompliance(f); assertThat(f.format(new File(\"test.xml\"))).isEqualTo(\"test.xml\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ClassDescriptor findSumType(Collection<ClassDescriptor> classes) throws MetaDataException { return findCommonClasses(classes).get(0); }### Assistant: @Test public void testCommonCousins() throws MetaDataException { withClasses(\"Employable\", \"Address\"); String common = DescriptorUtils.findSumType(classes).getUnqualifiedName(); assertEquals(common, \"Thing\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<T> run() { ArrayList<T> output = new ArrayList<>(Collections.nCopies(size, null)); for (Batch<?, T> batch : batches) { batch.convertInto(output); } return output; }### Assistant: @Test public void emptyFunnel() { assertThat(funnel.run()).isEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static StandardProperty getByName(String propertyName) { StandardProperty standardProperty = ALL.get(propertyName.toLowerCase(Locale.ENGLISH)); return standardProperty != null ? standardProperty : new UnknownProperty(propertyName); }### Assistant: @Test public void should_return_a_valid_border_property_object() { StandardProperty property = StandardPropertyFactory.getByName(\"border\"); assertEquals(Border.class, property.getClass()); assertEquals(property.getName(), \"border\"); assertEquals(property.getLinks().size(), 2); assertEquals(property.getLinks().get(0), \"https: assertEquals(property.getLinks().get(1), \"https: assertEquals(property.getVendors().size(), 0); assertEquals(property.isObsolete(), false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void onResume() { ReaderView view = getView(); view.setKeepScreen(preferenceHelper.getBoolean(\"DisableTurnScreen\")); view.setCurrentOrientation(preferenceHelper.getBoolean(\"DisableAutoScreenRotation\")); }### Assistant: @Test public void onResume() throws Exception { when(preferenceHelper.getBoolean(eq(\"DisableTurnScreen\"))).thenReturn(false); when(preferenceHelper.getBoolean(eq(\"DisableAutoScreenRotation\"))).thenReturn(true); presenter.onResume(); verify(view).setKeepScreen(eq(false)); verify(view).setCurrentOrientation(eq(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void translate( DocumentBuilder documentBuilder, Map<String, Object> documentSourceMap) { if (MapUtil.isEmpty(documentSourceMap)) { return; } documentSourceMap.forEach( (name, value) -> translate(name, value, documentBuilder)); }### Assistant: @Test public void testDocumentSourceMapWithMultiValueField() { DocumentFieldsTranslator documentFieldsTranslator = new DocumentFieldsTranslator(null); DocumentBuilder documentBuilder = new DocumentBuilderImpl(); String fieldName = RandomTestUtil.randomString(); List<String> list1 = Arrays.asList( RandomTestUtil.randomString(), RandomTestUtil.randomString()); documentFieldsTranslator.translate( documentBuilder, Collections.singletonMap(fieldName, list1)); Document document = documentBuilder.build(); List<String> list2 = document.getStrings(fieldName); Assert.assertEquals(list1.toString(), list2.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isPrimary() { return primary; }### Assistant: @Test public void testPrimaryIsDefault() throws Exception { final DirtySubsceneRemover remover = new DirtySubsceneRemover(); assertTrue(remover.isPrimary()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T, E extends Throwable> CompletionStage<Maybe<T, E>> catchException( Class<E> exceptionType, CompletionStage<? extends T> stage) { requireNonNull(exceptionType); CompletableFuture<Maybe<T, E>> future = new CompletableFuture<>(); stage.handle((v, e) -> { try { if (e == null) { future.complete(Maybe.of(v)); } else { unwrapFutureException(exceptionType, e) .map(cause -> future.complete(Maybe.except(cause))) .orElseGet(() -> future.completeExceptionally(e)); } } catch (Throwable x) { if (x != e) x.addSuppressed(e); future.completeExceptionally(x); } return null; }); return future; }### Assistant: @Test public void wrapFuture_futureIsUnexpectedUncheckedException_idempotence() throws Exception { RuntimeException exception = new RuntimeException(\"test\"); CompletionStage<?> stage = Maybe.catchException(IOException.class, exceptionally(exception)); stage = Maybe.catchException(IOException.class, stage); stage = Maybe.catchException(MyException.class, stage); stage = Maybe.catchException(Error.class, stage); assertCauseOf(ExecutionException.class, stage).isSameAs(exception); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String sendRequest(final String sessionId, Request request) throws SDKBadRequestException { if (request.getType() == null) { throw new SDKBadRequestException(SDKErrorEnum.badRequestError, \"Request type (method) is missing!\"); } URI uri = buildURI(request); LOGGER.debug(\"Using URL: \" + uri.toString()); HttpRequestBase requestBase; switch (request.getType()) { case POST: HttpPost post = new HttpPost(uri); fillRequestEntity(post, request); requestBase = post; break; case GET: requestBase = new HttpGet(uri); break; case PATCH: HttpPatch patch = new HttpPatch(uri); fillRequestEntity(patch, request); requestBase = patch; break; case PUT: HttpPut put = new HttpPut(uri); fillRequestEntity(put, request); requestBase = put; break; case DELETE: requestBase = new HttpDelete(uri); break; default: LOGGER.error(\"Request type not supported.\"); throw new SDKBadRequestException(SDKErrorEnum.badRequestError, SdkConstants.APPLIANCE); } for (Header header : request.getHeaders()) { requestBase.addHeader(header); } if (StringUtils.isNotBlank(sessionId)) { requestBase.setHeader(SdkConstants.AUTH_HEADER, sessionId); } return getResponse(sessionId, requestBase, request.isForceReturnTask(), request.getDownloadPath()); }### Assistant: @Test public void testSendRequestResetResponse() { Mockito.when(responseStatus.getStatusCode()).thenReturn(205); String result = restClient.sendRequest(SESSION_ID, new Request(HttpMethod.GET, \"\")); assertNotNull(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getId() { return id; }### Assistant: @Test public void testGetId() { assertThat(instance.getId(), equalTo(ID)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean encode(long[] current, long[] next) { int p = permutation.parity(current); if (p != 0) { int q = geometric.parity() * p; if (q > 0) { for (int i : centres) { next[i] = current[i] * ANTICLOCKWISE; } } else if (q < 0) { for (int i : centres) { next[i] = current[i] * CLOCKWISE; } } return true; } return false; }### Assistant: @Test public void testEncode_Clockwise() throws Exception { PermutationParity permutation = mock(PermutationParity.class); GeometricParity geometric = mock(GeometricParity.class); when(permutation.parity(any(long[].class))).thenReturn(-1); when(geometric.parity()).thenReturn(+1); StereoEncoder encoder = new GeometryEncoder(new int[]{1}, permutation, geometric); long[] prev = new long[3]; long[] result = new long[3]; Arrays.fill(prev, 1); Arrays.fill(result, 1); assertTrue(encoder.encode(prev, result)); assertThat(result, is(new long[]{1, 15543053, 1})); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ItemData getItemData(final NodeData parentData, final QPathEntry name, final ItemType itemType) throws RepositoryException { return getItemData(parentData, name, itemType, true); }### Assistant: @Test @PerfTest(invocations = TOTAL_THREADS, threads = TOTAL_THREADS) public void testGetItemById() throws Exception { assertEquals(0, con.getItemDataByIdCalls.get()); startSignal.await(); for (int i = 0; i < TIMES; i++) { ItemData item = cwdm.getItemData(\"getItemData\"); assertNotNull(item); } assertEquals(1, con.getItemDataByIdCalls.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void publishEvent(byte[] row, byte[] payload) throws IOException { Put eventPut = new Put(row); eventPut.addColumn(payloadColumnFamily, payloadColumnQualifier, payload); payloadTable.put(eventPut); }### Assistant: @Test public void testPublishEvent() throws IOException { byte[] eventRow = Bytes.toBytes(\"row-id\"); byte[] eventPayload = Bytes.toBytes(\"payload\"); ArgumentCaptor<Put> putCaptor = ArgumentCaptor.forClass(Put.class); eventPublisher.publishEvent(eventRow, eventPayload); verify(recordTable).put(putCaptor.capture()); Put put = putCaptor.getValue(); assertArrayEquals(eventRow, put.getRow()); assertEquals(1, put.size()); assertArrayEquals(eventPayload, CellUtil.cloneValue(put.get(PAYLOAD_CF, PAYLOAD_CQ).get(0))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ApiOperation(value = \"${SelfSupportController.updateSafe.value}\", notes = \"${SelfSupportController.updateSafe.notes}\") @PutMapping(value=\"/v2/ss/sdb\", consumes=\"application/json\",produces=\"application/json\") public ResponseEntity<String> updateSafe(HttpServletRequest request, @RequestHeader(value=\"vault-token\" ) String token, @RequestBody Safe safe) { UserDetails userDetails = (UserDetails) ((HttpServletRequest) request).getAttribute(\"UserDetails\"); return selfSupportService.updateSafe(userDetails, token, safe); }### Assistant: @Test public void test_updateSafe() throws Exception { SafeBasicDetails safeBasicDetails = new SafeBasicDetails(\"mysafe01\", \"youremail@yourcompany.com\", null, \"My first safe\"); Safe safe = new Safe(\"shared/mysafe01\",safeBasicDetails); String inputJson =new ObjectMapper().writeValueAsString(safe); String responseJson = \"{\\\"messages\\\":[\\\"Safe updated \\\"]}\"; ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.OK).body(responseJson); UserDetails userDetails = getMockUser(false); when(selfSupportService.updateSafe(eq(userDetails),eq(\"5PDrOhsy4ig8L3EpsJZSLAMg\"), Mockito.any(Safe.class))).thenReturn(responseEntityExpected); mockMvc.perform(MockMvcRequestBuilders.put(\"/v2/ss/sdb\").requestAttr(\"UserDetails\", userDetails) .header(\"vault-token\", \"5PDrOhsy4ig8L3EpsJZSLAMg\") .header(\"Content-Type\", \"application/json;charset=UTF-8\") .content(inputJson)) .andExpect(status().isOk()) .andExpect(content().string(containsString(responseJson))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public View getHeaderView(@SuppressWarnings(\"unused\") final ViewGroup parent) { throw new UnsupportedOperationException( \"You need to implement getHeaderView() if you set headerViewWillBeProvided\"); }### Assistant: @Test public void givenSection_whenGetHeaderView_thenThrowsException() { final int itemId = 1; @SuppressWarnings(\"ResourceType\") SectionParameters sectionParameters = SectionParameters.builder() .itemResourceId(itemId) .build(); Section section = getSection(sectionParameters); expectedException.expect(UnsupportedOperationException.class); expectedException.expectMessage(\"You need to implement getHeaderView() if you set headerViewWillBeProvided\"); section.getHeaderView(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean canBoundTo(String binding) { if (binding == null) { return false; } return binding.startsWith(\"Apache Tomcat/7.0\") || binding.startsWith(\"Apache Tomcat (TomEE)/7.0\") || binding.startsWith(\"NonStop(tm) Servlets For JavaServer Pages(tm) v7.0\") || binding.startsWith(\"Pivotal tc\") && binding.contains(\"/7.0\"); }### Assistant: @Test public void canBoundToNull() { final Tomcat70ContainerAdapter adapter = new Tomcat70ContainerAdapter(); assertFalse(adapter.canBoundTo(null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ApiOperation(value = \"Returns the details of a road\") @ApiResponses({ @ApiResponse(code = 200, message = \"Details of a road returned successfully.\", response = StandardResponse.class), @ApiResponse(code = 400, message = \"Invalid request or road name.\", response = StandardResponse.class), @ApiResponse(code = 404, message = \"Road not found.\", response = StandardResponse.class) }) @GetMapping(\"/{name}\") public RoadModel getRoad(@ApiParam(name = \"name\", value = \"road name\", required = true) @PathVariable String name) throws UnknownRoadException { return service.getRoad(name); }### Assistant: @Test public void getRoad_RoadDoesNotExist() throws Exception { doThrow(new UnknownRoadException(\"road1\")).when(paverService).getRoad(NAME); mockMvc .perform(get(CONTEXT_PATH + \"/roads/road1\")) .andExpect(status().isNotFound()) .andExpect(content().contentType(APPLICATION_JSON_UTF8)) .andExpect(jsonPath(\"$.message\", is(\"Road \\\"road1\\\" does not exist.\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Address freshAddress(KeyChain.KeyPurpose purpose) { DeterministicKeyChain chain = getActiveKeyChain(); if (chain.isMarried()) { Script outputScript = chain.freshOutputScript(purpose); checkState(outputScript.isPayToScriptHash()); Address freshAddress = Address.fromP2SHScript(params, outputScript); maybeLookaheadScripts(); currentAddresses.put(purpose, freshAddress); return freshAddress; } else { return freshKey(purpose).toAddress(params); } }### Assistant: @Test public void freshAddress() throws Exception { group = createMarriedKeyChainGroup(); Address a1 = group.freshAddress(KeyChain.KeyPurpose.RECEIVE_FUNDS); Address a2 = group.freshAddress(KeyChain.KeyPurpose.RECEIVE_FUNDS); assertTrue(a1.isP2SHAddress()); assertNotEquals(a1, a2); group.getBloomFilterElementCount(); assertEquals(((group.getLookaheadSize() + group.getLookaheadThreshold()) * 2) + (2 - group.getLookaheadThreshold()) + group.getActiveKeyChain().getAccountPath().size() + 3 , group.numKeys()); Address a3 = group.currentAddress(KeyChain.KeyPurpose.RECEIVE_FUNDS); assertEquals(a2, a3); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void removeFactMappingByIndex(int index) { factMappings.remove(index); }### Assistant: @Test(expected = IndexOutOfBoundsException.class) public void removeFactMappingByIndex() { int testingIndex = 0; scesimModelDescriptor.addFactMapping(factIdentifier, expressionIdentifier); assertNotNull(scesimModelDescriptor.getFactMappingByIndex(testingIndex)); scesimModelDescriptor.removeFactMappingByIndex(testingIndex); scesimModelDescriptor.getFactMappingByIndex(testingIndex); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void load() throws PluginException { try { IBootstrapItem<String> item = new BootstrapItem(\"CreateHttpEndpoint\"); item .after(\"EndpointPlugin\") .after(\"response\") .after(\"response_content_strategy\") .before(\"configure\") .process( () -> { try { initializeFieldNames(); IKey httpEndpointKey = Keys.getOrAdd(\"http_endpoint\"); registerCookiesSetter(); registerHeadersExtractor(); registerResponseStatusExtractor(); registerExceptionalResponse(); IOC.register( Keys.getOrAdd(IEnvironmentHandler.class.getCanonicalName()), new CreateNewInstanceStrategy( (args) -> { IObject configuration = (IObject) args[0]; IQueue queue = null; Integer stackDepth = null; try { queue = (IQueue) configuration.getValue(queueFieldName); stackDepth = (Integer) configuration.getValue(stackDepthFieldName); return new EnvironmentHandler(queue, stackDepth); } catch (ReadValueException | InvalidArgumentException | ResolutionException e) { throw new RuntimeException(e); } } ) ); IOC.register(httpEndpointKey, new CreateNewInstanceStrategy( (args) -> { IObject configuration = (IObject) args[0]; try { IOC.resolve( Keys.getOrAdd(\"info.smart_tools.smartactors.endpoint.interfaces.ideserialize_strategy.IDeserializeStrategy\"), \"HTTP_GET\", configuration.getValue(endpointNameFieldName), configuration.getValue(templatesFieldName)); IOC.resolve( Keys.getOrAdd(\"info.smart_tools.smartactors.endpoint.interfaces.ideserialize_strategy.IDeserializeStrategy\"), \"HTTP_application/json\", configuration.getValue(endpointNameFieldName)); IOC.resolve( Keys.getOrAdd(\"info.smart_tools.smartactors.endpoint.interfaces.ideserialize_strategy.IDeserializeStrategy\"), \"HTTP_application/x-www-form-urlencoded\", configuration.getValue(endpointNameFieldName)); IUpCounter upCounter = IOC.resolve(Keys.getOrAdd(\"root upcounter\")); IEnvironmentHandler environmentHandler = IOC.resolve( Keys.getOrAdd(IEnvironmentHandler.class.getCanonicalName()), configuration); HttpEndpoint endpoint = new HttpEndpoint( (Integer) configuration.getValue(portFieldName), (Integer) configuration.getValue(maxContentLengthFieldName), ScopeProvider.getCurrentScope(), environmentHandler, (IReceiverChain) configuration.getValue(startChainNameFieldName), (String) configuration.getValue(endpointNameFieldName), upCounter); upCounter.onShutdownComplete(endpoint::stop); return endpoint; } catch (ReadValueException | InvalidArgumentException | ScopeProviderException | ResolutionException | UpCounterCallbackExecutionException e) { throw new RuntimeException(e); } } ) ); registerDeserializationStrategies(); registerResponseSenders(); IKey emptyIObjectKey = Keys.getOrAdd(\"EmptyIObject\"); IOC.register(emptyIObjectKey, new CreateNewInstanceStrategy( (args) -> new DSObject() ) ); IKey channelHandlerNettyKey = Keys.getOrAdd(\"info.smart_tools.smartactors.http_endpoint.channel_handler_netty.ChannelHandlerNetty\"); IOC.register(channelHandlerNettyKey, new CreateNewInstanceStrategy( (args) -> { ChannelHandlerNetty channelHandlerNetty = new ChannelHandlerNetty(); channelHandlerNetty.init((ChannelHandlerContext) args[0]); return channelHandlerNetty; } )); } catch (ResolutionException e) { throw new ActionExecuteException(\"EndpointCollection plugin can't load: can't get key\", e); } catch (InvalidArgumentException e) { throw new ActionExecuteException(\"EndpointCollection plugin can't load: can't create strategy\", e); } catch (RegistrationException | AdditionDependencyStrategyException e) { throw new ActionExecuteException(\"EndpointCollection plugin can't load: can't register new strategy\", e); } } ); bootstrap.add(item); } catch (Exception e) { throw new PluginException(\"Can't load \\\"CreateHttpEndpoint\\\" plugin\", e); } }### Assistant: @Test public void checkLoadExecution() throws Exception { Checker checker = new Checker(); checker.item = new BootstrapItem(\"test\"); IBootstrap<IBootstrapItem<String>> bootstrap = mock(IBootstrap.class); List<IBootstrapItem<String>> itemList = new ArrayList<>(); doAnswer(new Answer<Void>() { public Void answer(InvocationOnMock invocation) { Object[] args = invocation.getArguments(); checker.item = (IBootstrapItem<String>) args[0]; itemList.add(checker.item); return null; } }) .when(bootstrap) .add(any(IBootstrapItem.class)); IPlugin plugin = new HttpEndpointPlugin(bootstrap); plugin.load(); assertEquals(itemList.size(), 1); IBootstrapItem<String> item = itemList.get(0); item.executeProcess(); reset(bootstrap); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private void validateKey(String key) { Matcher matcher = LEGAL_KEY_PATTERN.matcher(key); if (!matcher.matches()) { throw new IllegalArgumentException(\"keys must match regex [a-z0-9_-]{1,64}: \\\"\" + key + \"\\\"\"); } }### Assistant: @Test public void validateKey() throws Exception { String key = null; try { key = \"has_space \"; cache.edit(key); fail(\"Exepcting an IllegalArgumentException as the key was invalid.\"); } catch (IllegalArgumentException iae) { assertThat(iae.getMessage()).isEqualTo( \"keys must match regex [a-z0-9_-]{1,64}: \\\"\" + key + \"\\\"\"); } try { key = \"has_CR\\r\"; cache.edit(key); fail(\"Exepcting an IllegalArgumentException as the key was invalid.\"); } catch (IllegalArgumentException iae) { assertThat(iae.getMessage()).isEqualTo( \"keys must match regex [a-z0-9_-]{1,64}: \\\"\" + key + \"\\\"\"); } try { key = \"has_LF\\n\"; cache.edit(key); fail(\"Exepcting an IllegalArgumentException as the key was invalid.\"); } catch (IllegalArgumentException iae) { assertThat(iae.getMessage()).isEqualTo( \"keys must match regex [a-z0-9_-]{1,64}: \\\"\" + key + \"\\\"\"); } try { key = \"has_invalid/\"; cache.edit(key); fail(\"Exepcting an IllegalArgumentException as the key was invalid.\"); } catch (IllegalArgumentException iae) { assertThat(iae.getMessage()).isEqualTo( \"keys must match regex [a-z0-9_-]{1,64}: \\\"\" + key + \"\\\"\"); } try { key = \"has_invalid\\u2603\"; cache.edit(key); fail(\"Exepcting an IllegalArgumentException as the key was invalid.\"); } catch (IllegalArgumentException iae) { assertThat(iae.getMessage()).isEqualTo( \"keys must match regex [a-z0-9_-]{1,64}: \\\"\" + key + \"\\\"\"); } try { key = \"this_is_way_too_long_this_is_way_too_long_this_is_way_too_long_this_is_way_too_long\"; cache.edit(key); fail(\"Exepcting an IllegalArgumentException as the key was too long.\"); } catch (IllegalArgumentException iae) { assertThat(iae.getMessage()).isEqualTo( \"keys must match regex [a-z0-9_-]{1,64}: \\\"\" + key + \"\\\"\"); } key = \"0123456789012345678901234567890123456789012345678901234567890123\"; cache.edit(key).abort(); key = \"abcdefghijklmnopqrstuvwxyz_0123456789\"; cache.edit(key).abort(); key = \"-20384573948576\"; cache.edit(key).abort(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isValid(Document doc) { Optional<Node> dataSetNode = lookupDataSetNode(doc); return dataSetNode.isPresent() && !hasKeyFamilyRef(dataSetNode.get()); }### Assistant: @Test public void testIsValid() throws Exception { GuessingCompactFactory factory = new GuessingCompactFactory(); assertFalse(factory.isValid(load(\"/sdmx-generic-sample.xml\"))); assertTrue(factory.isValid(load(\"/sdmx-compact-sample.xml\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> void copy(final T source, final T dest) { copy(source, dest, null, null); }### Assistant: @Test void testNullSource() { MyObject original = new MyObject(); original.setString(null); MyObject copy = new MyObject(); copy.setString(\"copy\"); FieldMapper.copy(original, copy); assertThat(copy.getString()) .isEqualTo(original.getString()); assertThat(System.identityHashCode(original)) .isNotEqualTo(System.identityHashCode(copy)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ImmutableList<Suggestion> processBundleZipEntry(BundleContext context, FileData fileData) { return processFileEntry(context, fileData, isBundleAssetFile(fileData)); }### Assistant: @Test public void ignoresNonAssetFiles() { fileData = FakeFileData.builder(DEX_FILE).setSize(LARGE_FILE_SIZE).build(); assertThat( new LargeFilesSuggester() .processBundleZipEntry(BundleContext.create(1, false), fileData)) .isEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void copyAllObjects(Class originEntityClass, Class currentEntityClass) throws ViewDataMigrationException { copyAllObjects(originEntityClass, currentEntityClass, new EntityConverter() { @Override public void convert(Object orig, Object dest) { BeanUtils.copyProperties(orig, dest); } }); }### Assistant: @Test public void copyAllObjects() throws Exception { ViewEntity entity1 = getViewEntityMock(VERSION_1); ViewEntity entity2 = getViewEntityMock(VERSION_2); replay(entity1, entity2); ViewInstanceEntity instanceEntity1 = getViewInstanceEntityMock(entity1); ViewInstanceEntity instanceEntity2 = getViewInstanceEntityMock(entity2); replay(instanceEntity1, instanceEntity2); TestViewDataMigrationContextImpl context = new TestViewDataMigrationContextImpl(instanceEntity1, instanceEntity2); DataStore dataStore1 = createStrictMock(DataStore.class); expect(dataStore1.findAll(eq(SampleEntity.class), (String) isNull())).andReturn( Arrays.asList(new SampleEntity(\"data1\"), new SampleEntity(\"data2\"))); replay(dataStore1); DataStore dataStore2 = createStrictMock(DataStore.class); Capture<SampleEntity> copiedEntity1 = Capture.newInstance(); Capture<SampleEntity> copiedEntity2 = Capture.newInstance(); dataStore2.store(capture(copiedEntity1)); expectLastCall(); dataStore2.store(capture(copiedEntity2)); expectLastCall(); replay(dataStore2); context.setMockOriginDataStore(dataStore1); context.setMockCurrentDataStore(dataStore2); context.copyAllObjects(SampleEntity.class, SampleEntity.class); verify(dataStore1); verify(dataStore2); Assert.assertEquals(\"data1\", copiedEntity1.getValue().getField()); Assert.assertEquals(\"data2\", copiedEntity2.getValue().getField()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ElementPropertyWithNumericalBoundaries hasNChildren(Integer n) { return new ElementPropertyWithNumericalBoundaries() { @Override public String toXpath() { return \"count(. @Override public ElementProperty orMore() { return new ElementProperty() { @Override public String toXpath() { return \"count(. @Override public ElementProperty orLess() { return new ElementProperty() { @Override public String toXpath() { return \"count(./*)<=\" + n; } public String toString() { return String.format(\"has at most %d children\", n); } }; } }; }### Assistant: @Test public void hasNChildrenAtMost() { Path el = div.or(span).that(hasNChildren(3).orLess()); String xpath = el.getXPath().get(); NodeList nodes = findAllByXpath(\"<div><x/>foo</div><div>foo</div><span><a/><b/></span>\", el); assertThat(nodes.getLength(), is(3)); assertThat(getElementName(nodes.item(0)), equalTo(\"div\")); assertThat(getElementName(nodes.item(1)), equalTo(\"div\")); assertThat(getElementName(nodes.item(2)), equalTo(\"span\")); assertThat(el.toString(), is(equalTo(\"div or span, that has at most 3 children\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected static Long computeMillisToReachTarget(Float targetVelocity, float initialVelocity, float acceleration) { if (targetVelocity != null) { if (acceleration != 0f) { final long time = (long) ((targetVelocity - initialVelocity) / acceleration); return time > 0 ? time : 0; } else { if (targetVelocity < initialVelocity) { return 0L; } else { return null; } } } else { return null; } }### Assistant: @Test public void test_computeMillisToReachTarget() { Long time = Confetto.computeMillisToReachTarget(null, 0f, 0f); assertNull(time); time = Confetto.computeMillisToReachTarget(0f, 10f, 10f); assertEquals(0, time.longValue()); time = Confetto.computeMillisToReachTarget(20f, 10f, 10f); assertEquals(1, time.longValue()); time = Confetto.computeMillisToReachTarget(30f, 0f, 10f); assertEquals(3, time.longValue()); time = Confetto.computeMillisToReachTarget(20f, 10f, 0f); assertNull(time); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public char getDelimiter() { return 0; }### Assistant: @Test public void testGetDelimiter01() throws Exception { String fileName = TEMP_FILE_NAME; Class<PlainFileLineWriter_Stub01> clazz = PlainFileLineWriter_Stub01.class; Map<String, ColumnFormatter> columnFormatterMap = new HashMap<String, ColumnFormatter>(); columnFormatterMap.put(\"java.lang.String\", new NullColumnFormatter()); PlainFileLineWriter plainFileLineWriter = new PlainFileLineWriter( fileName, clazz, columnFormatterMap); char result = plainFileLineWriter.getDelimiter(); assertEquals(0, result); plainFileLineWriter.closeFile(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public MongoDBDocumentCollectionManagerFactory get(Map<String, String> configurations) throws NullPointerException { requireNonNull(configurations, \"configurations is required\"); SettingsBuilder builder = Settings.builder(); configurations.entrySet().forEach(e -> builder.put(e.getKey(), e.getValue())); return get(builder.build()); }### Assistant: @Test public void shouldCreateDocumentCollectionManagerFactoryByMap() { Map<String, String> map = new HashMap<>(); map.put(\"mongodb-server-host-1\", \"172.17.0.2:27017\"); MongoDBDocumentConfiguration configuration = new MongoDBDocumentConfiguration(); DocumentCollectionManagerFactory managerFactory = configuration.get(map); assertNotNull(managerFactory); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Hml read(final Reader reader) throws IOException { checkNotNull(reader); try { JAXBContext context = JAXBContext.newInstance(Hml.class); Unmarshaller unmarshaller = context.createUnmarshaller(); SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); URL schemaURL = HmlReader.class.getResource(\"/org/nmdp/ngs/hml/xsd/hml-1.0.1.xsd\"); Schema schema = schemaFactory.newSchema(schemaURL); unmarshaller.setSchema(schema); return (Hml) unmarshaller.unmarshal(reader); } catch (JAXBException | SAXException e) { throw new IOException(\"could not unmarshal HML\", e); } }### Assistant: @Test(expected=NullPointerException.class) public void testReadNullReader() throws Exception { read((Reader) null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Title getTitle(int pageId) throws WikiApiException { Session session = this.__getHibernateSession(); session.beginTransaction(); Object returnValue = session.createNativeQuery( \"select p.name from PageMapLine as p where p.pageId= :pId\").setParameter(\"pId\", pageId, IntegerType.INSTANCE).uniqueResult(); session.getTransaction().commit(); String title = (String)returnValue; if(title==null){ throw new WikiPageNotFoundException(); } return new Title(title); }### Assistant: @Test public void testGetTitleByIDInvalid() { try { wiki.getTitle(-42); } catch (WikiPageNotFoundException wpnfe) { } catch (WikiApiException e) { fail(\"Expected a WikiApiException, yet encountered WikiApiException: \" + e.getLocalizedMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument) throws PDUStitchingException { final String threshold = fromParents.get(0).getAttributes().getNamedItem(\"threshold\").getNodeValue(); toParent.setAttribute(\"threshold\", threshold); final NumberFormatter numberFormatter = getNumberFormatter(); final Map<String, List<Node>> globalInfoNodesListMap = collectNodes(fromParents, GLOBAL_INFO_NAME); Map<String, Double> overs = new HashMap<>(); for (Map.Entry<String, List<Node>> globalInfoNodesEntry : globalInfoNodesListMap.entrySet()) { final String[] key = globalInfoNodesEntry.getKey().split(SEPARATOR); final String gridValue = key[0]; final String viewValue = key[1]; int value = 0; int over = 0; final List<Node> globalInfoNodes = globalInfoNodesEntry.getValue(); for (Node globalInfoNode : globalInfoNodes) { final Node valueNode = globalInfoNode.getAttributes().getNamedItem(\"value\"); final Node overNode = globalInfoNode.getAttributes().getNamedItem(\"over\"); if (valueNode != null && overNode != null) { value += Integer.parseInt(valueNode.getNodeValue()); final int over1 = Integer.parseInt(overNode.getNodeValue()); over += over1; } } String percentage; try { overs.put(globalInfoNodesEntry.getKey(), (double) over); final double percentageAsDouble = ((double) value / over) * 100; percentage = numberFormatter.valueToString(percentageAsDouble); } catch (ParseException e) { throw new PDUStitchingException(\"Could not format number: \" + e.getMessage()); } final Element globalInfoElement = toDocument.createElement(GLOBAL_INFO_NAME); globalInfoElement.setAttribute(\"grid\", gridValue); globalInfoElement.setAttribute(\"view\", viewValue); globalInfoElement.setAttribute(\"value\", String.valueOf(value)); globalInfoElement.setAttribute(\"over\", String.valueOf(over)); globalInfoElement.setAttribute(\"percentage\", percentage); toParent.appendChild(globalInfoElement); } final List<NewNode> newMissingNodes = getNewMissingNodes(fromParents); final List<NewNode> sortedNodes = new ArrayList<>(); for (NewNode newNode : newMissingNodes) { boolean inserted = false; for (int j = 0; j < sortedNodes.size(); j++) { final NewNode sortedNode = sortedNodes.get(j); if (newNode.startTime.before(sortedNode.startTime)) { sortedNodes.add(j, newNode); inserted = true; break; } } if (!inserted) { sortedNodes.add(newNode); } } for (NewNode node : sortedNodes) { String key = node.gridValue.split(\",\")[0].trim() + SEPARATOR + node.viewValue; double over = overs.get(key); try { final String percentage = numberFormatter.valueToString((node.value / over) * 100); addNode(toDocument, toParent, node, percentage); } catch (ParseException e) { throw new PDUStitchingException(\"Could not format number: \" + e.getMessage()); } } }### Assistant: @Test public void mergeNodes_interrupted() throws ParserConfigurationException, SAXException, IOException, PDUStitchingException { List<Node> fromParents = new ArrayList<>(); fromParents.add(ManifestTestUtils.createNode( \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<slstr:missingElements threshold=\\\"75\\\">\\n\" + \" <slstr:globalInfo grid=\\\"1 km\\\" view=\\\"Oblique\\\" value=\\\"77\\\" over=\\\"601\\\" percentage=\\\"12.81198\\\"/>\\n\" + \" <slstr:elementMissing grid=\\\"1 km\\\" view=\\\"Oblique\\\" startTime=\\\"2017-10-18T01:25:22.192255Z\\\" stopTime=\\\"2017-10-18T01:25:24.592142Z\\\" percentage=\\\"10.482529\\\">\\n\" + \" <slstr:bandSet>S8, F2</slstr:bandSet>\\n\" + \" </slstr:elementMissing>\\n\" + \" <slstr:elementMissing grid=\\\"1 km\\\" view=\\\"Oblique\\\" startTime=\\\"2017-10-18T01:25:34.592568Z\\\" stopTime=\\\"2017-10-18T01:25:35.292568Z\\\" percentage=\\\"2.329451\\\">\\n\" + \" <slstr:bandSet>S8</slstr:bandSet>\\n\" + \" </slstr:elementMissing>\\n\" + \"</slstr:missingElements>\").getFirstChild()); fromParents.add(ManifestTestUtils.createNode( \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<slstr:missingElements threshold=\\\"75\\\">\\n\" + \" <slstr:globalInfo grid=\\\"1 km\\\" view=\\\"Oblique\\\" value=\\\"15\\\" over=\\\"575\\\" percentage=\\\"2.608696\\\"/>\\n\" + \" <slstr:elementMissing grid=\\\"1 km\\\" view=\\\"Oblique\\\" startTime=\\\"2017-10-18T01:25:35.592568Z\\\" stopTime=\\\"2017-10-18T01:25:36.442568Z\\\" percentage=\\\"0.173913\\\">\\n\" + \" <slstr:bandSet>S8</slstr:bandSet>\\n\" + \" </slstr:elementMissing>\\n\" + \" <slstr:elementMissing grid=\\\"1 km\\\" view=\\\"Oblique\\\" startTime=\\\"2017-10-18T01:25:36.942504Z\\\" stopTime=\\\"2017-10-18T01:25:38.142447Z\\\" percentage=\\\"0.869565\\\">\\n\" + \" <slstr:bandSet>S8</slstr:bandSet>\\n\" + \" </slstr:elementMissing>\\n\" + \" <slstr:elementMissing grid=\\\"1 km\\\" view=\\\"Oblique\\\" startTime=\\\"2017-10-18T01:25:42.192255Z\\\" stopTime=\\\"2017-10-18T01:25:44.562142Z\\\" percentage=\\\"1.565217\\\">\\n\" + \" <slstr:bandSet>S8, F2</slstr:bandSet>\\n\" + \" </slstr:elementMissing>\\n\" + \"</slstr:missingElements>\").getFirstChild()); fromParents.add(ManifestTestUtils.createNode( \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<slstr:missingElements threshold=\\\"75\\\">\\n\" + \" <slstr:globalInfo grid=\\\"1 km\\\" view=\\\"Oblique\\\" value=\\\"10\\\" over=\\\"575\\\" percentage=\\\"2.608696\\\"/>\\n\" + \" <slstr:elementMissing grid=\\\"1 km\\\" view=\\\"Oblique\\\" startTime=\\\"2017-10-18T01:25:44.592142Z\\\" stopTime=\\\"2017-10-18T01:25:46.592142Z\\\" percentage=\\\"1.391304\\\">\\n\" + \" <slstr:bandSet>S8, F2</slstr:bandSet>\\n\" + \" </slstr:elementMissing>\\n\" + \" <slstr:elementMissing grid=\\\"1 km\\\" view=\\\"Oblique\\\" startTime=\\\"2017-10-18T01:25:55.592568Z\\\" stopTime=\\\"2017-10-18T01:25:56.592568Z\\\" percentage=\\\"0.347826\\\">\\n\" + \" <slstr:bandSet>F2</slstr:bandSet>\\n\" + \" </slstr:elementMissing>\\n\" + \"</slstr:missingElements>\").getFirstChild()); Document manifest = ManifestTestUtils.createDocument(); final Element manifestElement = manifest.createElement(\"slstr:missingElements\"); manifest.appendChild(manifestElement); new MissingElementsMerger().mergeNodes(fromParents, manifestElement, manifest); assertEquals(1, manifestElement.getAttributes().getLength()); assert(manifestElement.hasAttribute(\"threshold\")); assertEquals(\"75\", manifestElement.getAttribute(\"threshold\")); final NodeList childNodes = manifestElement.getChildNodes(); assertEquals(6, childNodes.getLength()); final Node globalInfoNode = childNodes.item(0); assertEquals(\"slstr:globalInfo\", globalInfoNode.getNodeName()); assert(globalInfoNode.hasAttributes()); final NamedNodeMap globalInfoNodeAttributes = globalInfoNode.getAttributes(); assertEquals(5, globalInfoNodeAttributes.getLength()); assertNotNull(globalInfoNodeAttributes.getNamedItem(\"grid\")); assertEquals(\"1 km\", globalInfoNodeAttributes.getNamedItem(\"grid\").getNodeValue()); assertNotNull(globalInfoNodeAttributes.getNamedItem(\"view\")); assertEquals(\"Oblique\", globalInfoNodeAttributes.getNamedItem(\"view\").getNodeValue()); assertNotNull(globalInfoNodeAttributes.getNamedItem(\"value\")); assertEquals(\"102\", globalInfoNodeAttributes.getNamedItem(\"value\").getNodeValue()); assertNotNull(globalInfoNodeAttributes.getNamedItem(\"over\")); assertEquals(\"1751\", globalInfoNodeAttributes.getNamedItem(\"over\").getNodeValue()); assertNotNull(globalInfoNodeAttributes.getNamedItem(\"percentage\")); assertEquals(\"5.825243\", globalInfoNodeAttributes.getNamedItem(\"percentage\").getNodeValue()); assertElement(childNodes.item(1), \"1 km\", \"Oblique\", \"2017-10-18T01:25:22.192255Z\", \"2017-10-18T01:25:24.592142Z\", \"3.597944\", \"S8, F2\"); assertElement(childNodes.item(2), \"1 km\", \"Oblique\", \"2017-10-18T01:25:34.592568Z\", \"2017-10-18T01:25:36.442568Z\", \"0.856653\", \"S8\"); assertElement(childNodes.item(3), \"1 km\", \"Oblique\", \"2017-10-18T01:25:36.942504Z\", \"2017-10-18T01:25:38.142447Z\", \"0.285551\", \"S8\"); assertElement(childNodes.item(4), \"1 km\", \"Oblique\", \"2017-10-18T01:25:42.192255Z\", \"2017-10-18T01:25:46.592142Z\", \"0.970874\", \"S8, F2\"); assertElement(childNodes.item(5), \"1 km\", \"Oblique\", \"2017-10-18T01:25:55.592568Z\", \"2017-10-18T01:25:56.592568Z\", \"0.114220\", \"F2\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String submit() { return callingCommand + \"(\" + passedValue + \").submit()\"; }### Assistant: @Test public void checkWebElementSubmitReturnsCorrectCode() { assertThat(driver.findElement(locator).submit(), is(equalTo(\"driver.findElement(\" + locator + \").submit()\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Range findRange(Array historyTimes, double referenceTime, double timeDelta) { if (historyTimes.getRank() != 1) { throw new IllegalArgumentException(\"history.getRank() != 1\"); } if (referenceTime + timeDelta < historyTimes.getDouble(0)) { return Range.EMPTY; } final int historyLength = historyTimes.getIndexPrivate().getShape(0); if (referenceTime - timeDelta > historyTimes.getDouble(historyLength - 1)) { return Range.EMPTY; } int startIndex = -1; int endIndex = -1; for (int i = 0; i < historyLength; i++) { final double time = historyTimes.getDouble(i); if (startIndex == -1) { if (time >= referenceTime - timeDelta) { startIndex = i; endIndex = startIndex; } } else { if (time <= referenceTime + timeDelta) { endIndex = i; } else { break; } } } try { return new Range(startIndex, endIndex); } catch (InvalidRangeException e) { return Range.EMPTY; } }### Assistant: @Test public void testFindRange_ForReferenceTimeAtEndOfHistory_SECS_1978() { final Array historyTimes = InsituData.createHistoryTimeArray_SECS_1978(); final double referenceTime = 791596007; final Range range = InsituReaderHelper.findRange(historyTimes, referenceTime, HALF_DAY_SECS); assertTrue(historyTimes.getDouble(range.first() - 1) < referenceTime - HALF_DAY_SECS); assertTrue(historyTimes.getDouble(range.first()) >= referenceTime - HALF_DAY_SECS); assertEquals(referenceTime, historyTimes.getDouble(range.last()), 1e-8); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Class<E> valueType() { return clazz; }### Assistant: @Test public void answersCorrectValueType() { assertSame( TestEnum.class, converter.valueType() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Map<String, String> getColumnNames() { return columnNames; }### Assistant: @Test public void testGetColumnNames() { assertEquals(Collections.EMPTY_MAP, configuration.getColumnNames()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"rawtypes\") @Override public void preprocess(DataSetLookup lookup) { if (identityProvider == null || userGroupCallback == null) { return; } ColumnFilter columnFilter; List<Comparable> orgEntities = new ArrayList<>(); if (lookup.getFirstFilterOp() != null) { List<String> potOwners = new ArrayList<String>(); List<CoreFunctionFilter> columnFilters = extractCoreFunctionFilter(lookup.getFirstFilterOp().getColumnFilterList()); Iterator<CoreFunctionFilter> it = columnFilters.iterator(); while (orgEntities.isEmpty() && it.hasNext()) { CoreFunctionFilter column = it.next(); if (column.getColumnId().toUpperCase().equals(columnId)) { potOwners.addAll(column.getParameters()); for (String potOwner : potOwners) { addUserAndGroupsFromIdentityProvider(orgEntities, potOwner); } removeCoreFunctionFilter(lookup.getFirstFilterOp().getColumnFilterList(), column); } } if (orgEntities.isEmpty()) { addUserAndGroupsFromIdentityProvider(orgEntities, identityProvider.getName()); } columnFilter = AND(in(COLUMN_POTOWNER, orgEntities)); lookup.getFirstFilterOp().addFilterColumn(columnFilter); } else { DataSetFilter filter = new DataSetFilter(); addUserAndGroupsFromIdentityProvider(orgEntities, identityProvider.getName()); columnFilter = AND(in(COLUMN_POTOWNER, orgEntities)); filter.addFilterColumn(columnFilter); lookup.addOperation(filter); } LOGGER.debug(\"Adding column filter: {}\", columnFilter); super.preprocess(lookup); }### Assistant: @Test public void testNullGroups() { String userId = \"userId\"; when(userGroupCallback.getGroupsForUser(userId)).thenReturn(null); when(identityProvider.getName()).thenReturn(userId); userAndGroupsTasksPreprocessor.preprocess(dataSetLookup); assertEquals(\"(POTOWNER in \" + userId + \")\", dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void setContext(Context context) { super.setContext(context); historyShape = InsituHelper.getShape(context); }### Assistant: @Test public void testSetContext_historyShapeIsSetFromDimensionMap() { final Map<String, Integer> dimensionConfiguration = new HashMap<>(); dimensionConfiguration.put(Constants.DIMENSION_NAME_INSITU_NTIME, 65); final Context context = new ContextBuilder().dimensionConfiguration(dimensionConfiguration).build(); final InsituLatitude insituLatitude = new InsituLatitude(); insituLatitude.setContext(context); assertNotNull(insituLatitude.historyShape); assertArrayEquals(new int[]{1, 65}, insituLatitude.historyShape); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T extends RevisableEntity> T delete(final String entityIdentifier, final RevisionInfo revisionInfo, final Supplier<T> deleteEntity) { if (entityIdentifier == null || entityIdentifier.trim().isEmpty()) { throw new IllegalArgumentException(\"Entity identifier is required\"); } if (revisionInfo == null || revisionInfo.getVersion() == null) { throw new IllegalArgumentException(\"Revision info is required\"); } final Revision revision = createRevision(entityIdentifier, revisionInfo); final RevisionClaim claim = new StandardRevisionClaim(revision); return revisionManager.deleteRevision(claim, () -> deleteEntity.get()); }### Assistant: @Test public void testDelete() { final RevisionInfo revisionInfo = new RevisionInfo(null, 0L); final TestEntity requestEntity = new TestEntity(\"1\", revisionInfo); final RevisableEntity createdEntity = entityService.create( requestEntity, \"user1\", () -> requestEntity); assertNotNull(createdEntity); final RevisableEntity deletedEntity = entityService.delete( createdEntity.getIdentifier(), createdEntity.getRevision(), () -> createdEntity); assertNotNull(deletedEntity); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @GetMapping(value = \"{processId}/instances/{processInstanceId}/error\", produces = APPLICATION_JSON_VALUE) public ResponseEntity getInstanceInError(@PathVariable(\"processId\") String processId, @PathVariable(\"processInstanceId\") String processInstanceId) { return doGetInstanceInError(processId, processInstanceId); }### Assistant: @Test void getInstanceInError() { tested.getInstanceInError(PROCESS_ID, PROCESS_INSTANCE_ID); verify(tested).doGetInstanceInError(PROCESS_ID, PROCESS_INSTANCE_ID); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState) { Optional<AgentInstance> instanceOpt = SchedulerUtils.findInstance(agentManagementService, configuration.getInstanceAttributeName(), targetVM); if (!instanceOpt.isPresent()) { return MACHINE_DOES_NOT_EXIST; } AgentInstance agentInstance = instanceOpt.get(); Optional<AgentInstanceGroup> instanceGroupOpt = agentManagementService.findInstanceGroup(agentInstance.getInstanceGroupId()); if (!instanceGroupOpt.isPresent()) { return MACHINE_GROUP_DOES_NOT_EXIST; } AgentInstanceGroup instanceGroup = instanceGroupOpt.get(); Set<String> taints = getTaints(instanceGroup, agentInstance); return taints.contains(toleration) ? VALID : TOLERATION_DOES_NOT_MATCH; }### Assistant: @Test public void taintsDoNotMatchToleration() { AgentInstance instance = AgentGenerator.agentInstances().getValue().toBuilder().withId(MACHINE_ID) .withInstanceGroupId(MACHINE_GROUP) .build(); when(agentManagementService.findAgentInstance(MACHINE_ID)).thenReturn(Optional.of(instance)); AgentInstanceGroup instanceGroup = AgentGenerator.agentServerGroups().getValue().toBuilder() .withId(MACHINE_GROUP) .build(); when(agentManagementService.findInstanceGroup(MACHINE_GROUP)).thenReturn(Optional.of(instanceGroup)); Result result = constraint.evaluate(createTaskRequest(TASK_ID), createVirtualMachineCurrentStateMock(MACHINE_ID), createTaskTrackerState()); assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase(\"The machine or machine group does not have a matching taint\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CompletableFuture<CreateAudienceGroupResponse> createAudienceGroup( CreateAudienceGroupRequest request) { return toFuture(retrofitImpl.createAudienceGroup(request)); }### Assistant: @Test public void createAudienceGroup() throws Exception { final CreateAudienceGroupResponse response = CreateAudienceGroupResponse.builder() .build(); CreateAudienceGroupRequest request = CreateAudienceGroupRequest.builder() .description(\"test\") .isIfaAudience(false) .uploadDescription(\"test\") .audiences(singletonList(new Audience(\"Uabcdef\"))) .build(); whenCall(retrofitMock.createAudienceGroup(any()), response); final CreateAudienceGroupResponse actual = target.createAudienceGroup(request).get(); verify(retrofitMock, only()).createAudienceGroup(request); assertThat(actual).isEqualTo(response); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String padding(String columnString, String fileEncoding, int columnBytes, char paddingChar, PaddingType paddingType) { if (PaddingType.NONE.equals(paddingType)) { return columnString; } if (!isHalfWidthChar(fileEncoding, paddingChar)) { throw new FileException(\"Padding char is not half-width character.\"); } try { int paddingSize = columnBytes - columnString.getBytes(fileEncoding).length; if (paddingSize <= 0) { return columnString; } StringBuilder columnBuilder = new StringBuilder(columnBytes); char[] fillChars = new char[paddingSize]; Arrays.fill(fillChars, paddingChar); if (PaddingType.LEFT.equals(paddingType)) { columnBuilder.append(fillChars).append(columnString); return columnBuilder.toString(); } else if (PaddingType.RIGHT.equals(paddingType)) { columnBuilder.append(columnString).append(fillChars); return columnBuilder.toString(); } else { return columnString; } } catch (UnsupportedEncodingException e) { throw new FileException(\"Specified Encoding : \" + fileEncoding + \" is not supported\", e); } }### Assistant: @Test public void testPadding06() throws Exception { String columnString = \"1\"; String fileEncoding = \"Shift_JIS\"; int columnBytes = 3; char paddingChar = ' '; PaddingType paddingType = PaddingType.RIGHT; String result = FileDAOUtility.padding(columnString, fileEncoding, columnBytes, paddingChar, paddingType); assertNotNull(result); assertEquals(\"1 \", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Version detect(DeploymentDescriptor deploymentDescriptor, List<ExtensionDescriptor> extensionDescriptorChain) throws ContentException { validateSchemaVersionCompatibility(deploymentDescriptor, extensionDescriptorChain); return getMax(deploymentDescriptor, extensionDescriptorChain); }### Assistant: @Test void testDetectWithIncompatibleSchemaVersions() { DeploymentDescriptor deploymentDescriptor = buildDeploymentDescriptor(SCHEMA_VERSION_2_0, FOO_ID); ExtensionDescriptor extensionDescriptor1 = buildExtensionDescriptor(SCHEMA_VERSION_1_0, BAR_ID); ExtensionDescriptor extensionDescriptor2 = buildExtensionDescriptor(SCHEMA_VERSION_2_0, BAZ_ID); List<ExtensionDescriptor> extensionDescriptorChain = Arrays.asList(extensionDescriptor1, extensionDescriptor2); ContentException contentException = assertThrows(ContentException.class, () -> schemaVersionDetector.detect(deploymentDescriptor, extensionDescriptorChain)); String expectedMessage = MessageFormat.format(Messages.EXTENSION_DESCRIPTORS_MUST_HAVE_THE_SAME_MAJOR_SCHEMA_VERSION_AS_THE_DEPLOYMENT_DESCRIPTOR_BUT_0_DO_NOT, BAR_ID); assertEquals(expectedMessage, contentException.getMessage()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int compareTo(final Point other) { if (this == other) { return 0; } if (this.latitude < other.latitude) { return -1; } if (this.latitude > other.latitude) { return 1; } if (this.longitude < other.longitude) { return -1; } if (this.longitude > other.longitude) { return 1; } assert this.equals(other) : \"compareTo inconsistent with equals.\"; return 0; }### Assistant: @Test public void testCompareTo() { boolean expected; int actual; String geohash; Point o1; Point o2; geohash = GeoHashExtensions.encode(53.5526394, 10.0067103); o1 = new GeoHashPoint(geohash); o2 = new GeoHashPoint(geohash); actual = o1.compareTo(o2); expected = actual == 0; assertTrue(expected); actual = o1.compareTo(o1); expected = actual == 0; assertTrue(expected); geohash = GeoHashExtensions.encode(30.0, -90.0); o2 = new GeoHashPoint(geohash); actual = o1.compareTo(o2); expected = 0 < actual; assertTrue(expected); actual = o2.compareTo(o1); expected = actual < 0; assertTrue(expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Boolean pExpire(byte[] key, long millis) { return helper.doInScope(RedisCommand.PEXPIRE, key, () -> connection.pExpire(key, millis)); }### Assistant: @Test public void invokingPExpireCreatesNewSpan() { commandCreatesNewSpan(RedisCommand.PEXPIRE, () -> getConnection().pExpire(\"key\".getBytes(), 0L)); verify(mockRedisConnection()).pExpire(\"key\".getBytes(), 0L); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <E> List<E> concat(List<E> left, List<E> right) { int leftSize = left.size(); if (leftSize == 0) return right; int rightSize = right.size(); if (rightSize == 0) return left; E[] array = (E[]) new Object[leftSize + rightSize]; int i = 0; for (int l = 0; l < leftSize; l++) { array[i++] = left.get(l); } for (int r = 0; r < rightSize; r++) { array[i++] = right.get(r); } return Collections.unmodifiableList(Arrays.asList(array)); }### Assistant: @Test public void concat_concatenates() { List<Object> list1 = ImmutableList.of(\"foo\"); List<Object> list2 = ImmutableList.of(\"bar\", \"baz\"); assertThat(Lists.concat(list1, list2)) .hasSameClassAs(Collections.unmodifiableList(list1)) .containsExactly(\"foo\", \"bar\", \"baz\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX + \"/namespaces/{namespace}\" + \"/businessObjectDefinitionNames/{businessObjectDefinitionName}\" + \"/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}\" + \"/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}\" + \"/businessObjectDataAttributeNames/{businessObjectDataAttributeName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_GET) public BusinessObjectDataAttribute getBusinessObjectDataAttribute(@PathVariable(\"namespace\") String namespace, @PathVariable(\"businessObjectDefinitionName\") String businessObjectDefinitionName, @PathVariable(\"businessObjectFormatUsage\") String businessObjectFormatUsage, @PathVariable(\"businessObjectFormatFileType\") String businessObjectFormatFileType, @PathVariable(\"businessObjectFormatVersion\") Integer businessObjectFormatVersion, @PathVariable(\"partitionValue\") String partitionValue, @PathVariable(\"businessObjectDataVersion\") Integer businessObjectDataVersion, @PathVariable(\"businessObjectDataAttributeName\") String businessObjectDataAttributeName) { return businessObjectDataAttributeService.getBusinessObjectDataAttribute( new BusinessObjectDataAttributeKey(namespace, businessObjectDefinitionName, businessObjectFormatUsage, businessObjectFormatFileType, businessObjectFormatVersion, partitionValue, new ArrayList<String>(), businessObjectDataVersion, businessObjectDataAttributeName)); }### Assistant: @Test public void testGetBusinessObjectDataAttributeSubPartitionValuesCount0() { BusinessObjectDataAttributeKey businessObjectDataAttributeKey = new BusinessObjectDataAttributeKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, NO_SUBPARTITION_VALUES, DATA_VERSION, ATTRIBUTE_NAME_1_MIXED_CASE); BusinessObjectDataAttribute businessObjectDataAttribute = new BusinessObjectDataAttribute(ID, businessObjectDataAttributeKey, ATTRIBUTE_VALUE_1); when(businessObjectDataAttributeService.getBusinessObjectDataAttribute(businessObjectDataAttributeKey)).thenReturn(businessObjectDataAttribute); BusinessObjectDataAttribute result = businessObjectDataAttributeRestController .getBusinessObjectDataAttribute(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, DATA_VERSION, ATTRIBUTE_NAME_1_MIXED_CASE); verify(businessObjectDataAttributeService).getBusinessObjectDataAttribute(businessObjectDataAttributeKey); verifyNoMoreInteractionsHelper(); assertEquals(businessObjectDataAttribute, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int getIntOrDefault(String in, int defaultValue) { try { return Integer.parseInt(in); } catch (NumberFormatException ignored) { return defaultValue; } }### Assistant: @Test public void testGetIntOrDefault() throws Exception { assertThat(getIntOrDefault(\"25\", 6), is(25)); assertThat(getIntOrDefault(\"-25\", 25), is(-25)); assertThat(getIntOrDefault(\"25z\", 6), is(6)); assertThat(getIntOrDefault( null, 42), is(42)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int interpret() { return number; }### Assistant: @Test public void testFromString() throws Exception { final int expectedValue = getFirst().interpret(); final String testStingValue = String.valueOf(expectedValue); final NumberExpression numberExpression = new NumberExpression(testStingValue); assertEquals(expectedValue, numberExpression.interpret()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Writer getWriter() throws IOException { return responseDelegate.getWriter(); }### Assistant: @Test public void testGetWriter() throws IOException { PrintWriter os = createMock(PrintWriter.class); expect(responseDelegate.getWriter()).andReturn(os); replay(applicationContext, request, response, os, portletContext, requestDelegate, responseDelegate); assertEquals(req.getWriter(), os); verify(applicationContext, request, response, os, portletContext, requestDelegate, responseDelegate); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Vulnerability getVulnerabilityMetadata(String rootDir) throws JsonSyntaxException, IOException { String filePath = rootDir + File.separator + META_PROPERTIES_FILE; if (!FileUtil.isAccessibleFile(filePath)) { throw new IllegalArgumentException( \"The root folder \" + rootDir + \" or the meta file in root directory is missing \" + filePath); } Gson gson = new Gson(); Vulnerability metadata = null; metadata = gson.fromJson(FileUtil.readFile(filePath), Vulnerability.class); if (StringUtils.isBlank(metadata.getVulnId())) { throw new IllegalArgumentException( \"The vulnerability_id is missing missing in the \" + filePath + \" file\"); } return metadata; }### Assistant: @Test public void testMetadataArtifactsPUrl() throws JsonSyntaxException, IOException { ClassLoader classLoader = getClass().getClassLoader(); String path = classLoader.getResource(\"testRootDir5\").getPath(); Vulnerability vuln = Metadata.getVulnerabilityMetadata(path); assertEquals(1, vuln.getArtifacts().size()); assertEquals(false, vuln.getArtifacts().get(0).getAffected()); assertEquals( \"pkg:maven: vuln.getArtifacts().get(0).getId()); assertEquals(\"Manual review(frontend)\", vuln.getArtifacts().get(0).getReason()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public abstract void apply(IssueFilterBuilder builder);### Assistant: @Test void issue54035() { Report report = new Report(); report.add(ISSUE_BUILDER.setFileName(\"warning.txt\").build()); report.add(ISSUE_BUILDER.setFileName(\"_build.external/mercury/Testing/na/na_test.c\").build()); report.add(ISSUE_BUILDER.setFileName(\"@2/_build.external/pmix/src/mca/gds/gds.h\").build()); RegexpFilter filter = new ExcludeFile(\".*_build\\\\.external\\\\/.*\"); IssueFilterBuilder builder = new IssueFilterBuilder(); filter.apply(builder); Report filtered = report.filter(builder.build()); assertThat(filtered).hasSize(1); assertThat(report.get(0)).hasFileName(\"warning.txt\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static OkHttpClient create(MetricRegistry registry) { return new InstrumentedOkHttpClient(registry, new OkHttpClient(), null); }### Assistant: @Test public void instrumentAndNameProvidedClient() { OkHttpClient rawClient = new OkHttpClient(); OkHttpClient client = InstrumentedOkHttpClients.create(registry, rawClient, \"custom\"); assertThatClientsAreEqual(client, rawClient); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Assembly patchLabels(Assembly assembly) { List<Instruction> updatedAssembly = new ArrayList<>(); Map<String, Long> updatedLabelMap = new HashMap<>(assembly.labelMap); int lineNumber = 0; for (Instruction instruction : assembly.instructions) { int patchOffset = 0; if (instruction.opcode.type == OpcodeType.INDIRECT) { if (instruction.opcode.encodesTo > 0xFF) { throw new IllegalArgumentException(\"Indirect instructions with opcodes larger than a byte are not supported.\"); } if (instruction.opcode.encodesTo > 0xF) { patchOffset++; } updatedAssembly.add(instruction); } else if (instruction.labelOperand != null) { patchOffset += 7; updatedAssembly.add(instruction); } else if (instruction.constantOperand != null) { if (instruction.constantOperand < 0 || instruction.constantOperand > 0xF) { List<Instruction> prefixResult = prefix(instruction); patchOffset += prefixResult.size() - 1; updatedAssembly.addAll(prefixResult); } else { updatedAssembly.add(instruction); } } else { throw new IllegalArgumentException(\"Instruction '\" + instruction + \"' does not have a valid operand.\"); } for (Map.Entry<String, Long> labelEntry : updatedLabelMap.entrySet()) { if (labelEntry.getValue() > lineNumber) { labelEntry.setValue(labelEntry.getValue() + patchOffset); } } lineNumber += patchOffset + 1; } return new Assembly(updatedAssembly, updatedLabelMap); }### Assistant: @Test public void testPatchLabels() { List<Instruction> instructions = Arrays.asList( new Instruction(InstructionType.INSTRUCTION, \"init\", Assembler.opcodes.get(\"ldc\"), 89L, null, null, null, 1), new Instruction(InstructionType.INSTRUCTION, \"space\", Assembler.opcodes.get(\"#empty\"), 0L, null, null, null, 2), new Instruction(InstructionType.INSTRUCTION, null, Assembler.opcodes.get(\"#empty\"), 0L, null, null, null, 2), new Instruction(InstructionType.INSTRUCTION, null, Assembler.opcodes.get(\"#empty\"), 0L, null, null, null, 2), new Instruction(InstructionType.INSTRUCTION, \"~configuration\", Assembler.opcodes.get(\"confio\"), null, null, null, null, 3), new Instruction(InstructionType.INSTRUCTION, \"alabel\", Assembler.opcodes.get(\"ajw\"), -10L, null, null, null, 4), new Instruction(InstructionType.INSTRUCTION, null, Assembler.opcodes.get(\"ldlp\"), 0L, null, null, null, 5), new Instruction(InstructionType.INSTRUCTION, \"jump\", Assembler.opcodes.get(\"j\"), null, \"~configuration\", null, null, 7), new Instruction(InstructionType.INSTRUCTION, \"end\", Assembler.opcodes.get(\"ldc\"), 0L, null, null, null, 8) ); Map<String, Long> labelMap = new HashMap<>(); labelMap.put(\"init\", 0L); labelMap.put(\"space\", 1L); labelMap.put(\"~configuration\", 4L); labelMap.put(\"alabel\", 5L); labelMap.put(\"jump\", 7L); labelMap.put(\"end\", 8L); Assembly patchedAssembly = Assembler.patchLabels(new Assembly(instructions, labelMap)); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, \"init\", Assembler.opcodes.get(\"pfix\"), 5L, null, null, null, 1), patchedAssembly.instructions.get(0) ); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, null, Assembler.opcodes.get(\"ldc\"), 9L, null, null, null, 1), patchedAssembly.instructions.get(1) ); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, \"space\", Assembler.opcodes.get(\"#empty\"), 0L, null, null, null, 2), patchedAssembly.instructions.get(2) ); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, null, Assembler.opcodes.get(\"#empty\"), 0L, null, null, null, 2), patchedAssembly.instructions.get(3) ); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, null, Assembler.opcodes.get(\"#empty\"), 0L, null, null, null, 2), patchedAssembly.instructions.get(4) ); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, \"~configuration\", Assembler.opcodes.get(\"confio\"), null, null, null, null, 3), patchedAssembly.instructions.get(5) ); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, \"alabel\", Assembler.opcodes.get(\"nfix\"), 0L, null, null, null, 4), patchedAssembly.instructions.get(6) ); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, null, Assembler.opcodes.get(\"ajw\"), 6L, null, null, null, 4), patchedAssembly.instructions.get(7) ); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, null, Assembler.opcodes.get(\"ldlp\"), 0L, null, null, null, 5), patchedAssembly.instructions.get(8) ); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, \"jump\", Assembler.opcodes.get(\"j\"), null, \"~configuration\", null, null, 7), patchedAssembly.instructions.get(9) ); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, \"end\", Assembler.opcodes.get(\"ldc\"), 0L, null, null, null, 8), patchedAssembly.instructions.get(10) ); assertEquals(new Long(0), patchedAssembly.labelMap.get(\"init\")); assertEquals(new Long(2), patchedAssembly.labelMap.get(\"space\")); assertEquals(new Long(5), patchedAssembly.labelMap.get(\"~configuration\")); assertEquals(new Long(6), patchedAssembly.labelMap.get(\"alabel\")); assertEquals(new Long(9), patchedAssembly.labelMap.get(\"jump\")); assertEquals(new Long(17), patchedAssembly.labelMap.get(\"end\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getExecutionNameSpace(String queueName) { if (StringUtils.contains(queueName, ISOLATION_SEPARATOR) && StringUtils.contains(queueName, EXECUTION_NAME_SPACE_SEPRATOR)) { return StringUtils.substringBetween(queueName, EXECUTION_NAME_SPACE_SEPRATOR, ISOLATION_SEPARATOR); } else if (StringUtils.contains(queueName, EXECUTION_NAME_SPACE_SEPRATOR)) { return StringUtils.substringAfter(queueName, EXECUTION_NAME_SPACE_SEPRATOR); } else { return StringUtils.EMPTY; } }### Assistant: @Test public void testGetQueueExecutionNameSpaceWithIsolationGroup() { Assert.assertEquals(QueueUtils.getExecutionNameSpace(\"domain:test@executionNameSpace-isolated\"),\"executionNameSpace\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public byte[] getBytes() { return bytes; }### Assistant: @Test void testGetBytes() { ByteArrayResource resource = new ByteArrayResource(\"\", null); assertNull(resource.getBytes()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void writeUInt16(int v) throws IOException { if (v < 0 || v >= (int) Math.pow(2, 16)) { throw new IllegalArgumentException(\"Value of 16-bit unsigned integer was not in \" + \"interval [0, 2^16).\"); } buffer.putInt(0, v); writer.write(array, 0, 2); }### Assistant: @Test public void failWritingUInt16NotInRange() throws IOException { try { int uint = (int) Math.pow(2, 16); writer.writeUInt16(uint); fail(); } catch (IllegalArgumentException ignored) { } try { int uint = -1; writer.writeUInt16(uint); fail(); } catch (IllegalArgumentException ignored) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final void buildListing(Path pathToListFile, DistCpContext distCpContext) throws IOException { validatePaths(distCpContext); doBuildListing(pathToListFile, distCpContext); Configuration config = getConf(); config.set(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH, pathToListFile.toString()); config.setLong(DistCpConstants.CONF_LABEL_TOTAL_BYTES_TO_BE_COPIED, getBytesToCopy()); config.setLong(DistCpConstants.CONF_LABEL_TOTAL_NUMBER_OF_RECORDS, getNumberOfPaths()); validateFinalListing(pathToListFile, distCpContext); LOG.info(\"Number of paths in the copy list: \" + this.getNumberOfPaths()); }### Assistant: @Test(timeout=10000) public void testBuildListing() { FileSystem fs = null; try { fs = FileSystem.get(getConf()); List<Path> srcPaths = new ArrayList<Path>(); Path p1 = new Path(\"/tmp/in/1\"); Path p2 = new Path(\"/tmp/in/2\"); Path p3 = new Path(\"/tmp/in2/2\"); Path target = new Path(\"/tmp/out/1\"); srcPaths.add(p1.getParent()); srcPaths.add(p3.getParent()); TestDistCpUtils.createFile(fs, \"/tmp/in/1\"); TestDistCpUtils.createFile(fs, \"/tmp/in/2\"); TestDistCpUtils.createFile(fs, \"/tmp/in2/2\"); fs.mkdirs(target); OutputStream out = fs.create(p1); out.write(\"ABC\".getBytes()); out.close(); out = fs.create(p2); out.write(\"DEF\".getBytes()); out.close(); out = fs.create(p3); out.write(\"GHIJ\".getBytes()); out.close(); Path listingFile = new Path(\"/tmp/file\"); final DistCpOptions options = new DistCpOptions.Builder(srcPaths, target) .withSyncFolder(true) .build(); CopyListing listing = new SimpleCopyListing(getConf(), CREDENTIALS); try { listing.buildListing(listingFile, new DistCpContext(options)); Assert.fail(\"Duplicates not detected\"); } catch (DuplicateFileException ignore) { } assertThat(listing.getBytesToCopy()).isEqualTo(10); assertThat(listing.getNumberOfPaths()).isEqualTo(3); TestDistCpUtils.delete(fs, \"/tmp\"); try { listing.buildListing(listingFile, new DistCpContext(options)); Assert.fail(\"Invalid input not detected\"); } catch (InvalidInputException ignore) { } TestDistCpUtils.delete(fs, \"/tmp\"); } catch (IOException e) { LOG.error(\"Exception encountered \", e); Assert.fail(\"Test build listing failed\"); } finally { TestDistCpUtils.delete(fs, \"/tmp\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private final void compareConfiltsJoueur(Joueur j1, Joueur j2) { int r1 = j1.getForceMilitaire(); int r2 = j2.getForceMilitaire(); if (r1 != r2) { if (r1 > r2) { j1.ajouterJetonVictoire(age); j2.ajouterJetonDefaite(); } else { j2.ajouterJetonVictoire(age); j1.ajouterJetonDefaite(); } } }### Assistant: @Test public final void testCompareConfiltsJoueur() { assertArrayEquals(new int[] { 1, 1, 1, 1, 1, 1, 1 }, getScoreJoueurs()); ArrayList<Carte> cs = new ArrayList<Carte>(1); cs.add(new Carte(\"CarteTestMilitaire\", BLANC, 1, 0, 0, 1)); testDuJeu.getJoueurs().get(1).setDeckMain(cs); testDuJeu.getJoueurs().get(1).poserCarte(0); testDuJeu.ageSuivant(); assertArrayEquals(new int[] { 0, 3, 0, 1, 1, 1, 1 }, getScoreJoueurs()); cs = new ArrayList<Carte>(1); cs.add(new Carte(\"CarteTestMilitaire\", BLANC, 1, 0, 0, 2)); testDuJeu.getJoueurs().get(2).setDeckMain(cs); testDuJeu.getJoueurs().get(2).poserCarte(0); testDuJeu.ageSuivant(); assertArrayEquals(new int[] { 0, 5, 6, 0, 1, 1, 1 }, getScoreJoueurs()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean evaluate(Map<String, Object> values) { boolean toReturn = false; if (values.containsKey(name)) { logger.debug(\"found matching parameter, evaluating... \"); toReturn = evaluation(values.get(name)); } return toReturn; }### Assistant: @Test public void evaluateStringIn() { ARRAY_TYPE arrayType = ARRAY_TYPE.STRING; List<Object> values = getObjects(arrayType, 4); KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicate = getKiePMMLSimpleSetPredicate(values, arrayType, IN_NOTIN.IN); Map<String, Object> inputData = new HashMap<>(); inputData.put(\"FAKE\", \"NOT\"); assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); inputData.put(SIMPLE_SET_PREDICATE_NAME, \"NOT\"); assertFalse(kiePMMLSimpleSetPredicate.evaluate(inputData)); inputData.put(SIMPLE_SET_PREDICATE_NAME, values.get(0)); assertTrue(kiePMMLSimpleSetPredicate.evaluate(inputData)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> List<T> dropEveryNth(List<T> list, int n) { if (n == 0) { return list; } return IntStream.range(0, list.size()) .mapToObj(i -> new SimpleEntry<>(list.get(i), i)) .filter(entry -> (entry.getValue() + 1) % n != 0) .map(SimpleEntry::getKey) .collect(Collectors.toList()); }### Assistant: @Test public void shouldReturnSameListWhenNIsZero() throws Exception { List<String> result = P16.dropEveryNth(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"), 0); assertThat(result, hasSize(11)); assertThat(result, contains(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Long insertServerAppConfig(ServerConfig serverAppConfig) throws SQLException { if (serverAppConfig == null) { return 0L; } this.getDasClient().insert(serverAppConfig); return serverAppConfig.getId(); }### Assistant: @Test public void insertServerAppConfig() throws Exception { Long id = serverConfigDao.insertServerAppConfig(serverConfig); System.out.println(\"insertServerAppConfig :-------> \" + id); Assert.assertTrue(id > 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String quote(final String arg) { final StringBuilder escaped = new StringBuilder(); for (final char c : arg.toCharArray()) { if (c == QUOTE || c == SLASH) { escaped.append(SLASH); } escaped.append(c); } if (arg.indexOf(BLANK) != -1 || arg.indexOf(QUOTE) != -1) { escaped.insert(0, QUOTE).append(QUOTE); } return escaped.toString(); }### Assistant: @Test public void testQuote5() { assertEquals(\"a\\\\\\\\b\", CommandLineSupport.quote(\"a\\\\b\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void fire(Rules rules, Facts facts) { triggerListenersBeforeRules(rules, facts); doFire(rules, facts); triggerListenersAfterRules(rules, facts); }### Assistant: @Test public void rulesMustBeTriggeredInTheirNaturalOrder() throws Exception { when(rule1.evaluate(facts)).thenReturn(true); when(rule2.evaluate(facts)).thenReturn(true); when(rule2.compareTo(rule1)).thenReturn(1); rules.register(rule1); rules.register(rule2); rulesEngine.fire(rules, facts); InOrder inOrder = inOrder(rule1, rule2); inOrder.verify(rule1).execute(facts); inOrder.verify(rule2).execute(facts); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public T12 get12() { return ((T12) values[12]); }### Assistant: @Test void get12Test() { assertEquals(12, (int) instance.get12()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getName() { return name; }### Assistant: @Test void getName() { assertEquals(NAME, instance().getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static TextPattern parse( String pattern ) throws TextPatternParsingException { List<TextPatternSegment> segments = new ArrayList<>(); boolean segment = false; boolean invalidExpression = true; Matcher m; if ( pattern != null && !pattern.isEmpty() ) { m = EXPRESSION_REGEX.matcher( pattern ); } else { throw new TextPatternParsingException( \"Supplied expression was null or empty.\", -1 ); } while ( m.find() ) { invalidExpression = false; String method = m.group( \"Method\" ); if ( method != null ) { String methodName = m.group( \"MethodName\" ); if ( methodName == null ) { if ( TextPatternMethod.TEXT.getType().validatePattern( method ) ) { segment = true; segments.add( new TextPatternSegment( TextPatternMethod.TEXT, method ) ); continue; } } else { try { TextPatternMethod textPatternMethod = TextPatternMethod.valueOf( methodName ); if ( textPatternMethod.getType().validatePattern( method ) ) { segment = true; segments.add( new TextPatternSegment( textPatternMethod, method ) ); continue; } } catch ( Exception e ) { } } throw new TextPatternParsingException( \"Failed to parse the following method: '\" + method + \"'\", m.start( \"Method\" ) ); } else if ( m.group( \"Join\" ) != null ) { if ( !segment ) { throw new TextPatternParsingException( \"Unexpected '+'\", m.start( \"JoinValue\" ) ); } else { segment = false; } } } if ( invalidExpression ) { throw new TextPatternParsingException( \"The expression is invalid\", -1 ); } if ( !segment ) { throw new TextPatternParsingException( \"Unexpected '+' at the end of the expression\", -1 ); } return new TextPattern( segments ); }### Assistant: @Test public void testParseWithUnexpectedPlusThrowsException() throws TextPatternParser.TextPatternParsingException { thrown.expect( ParsingException ); TextPatternParser.parse( \"+\" ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Stream<RecommendedParticipation> recommend(final Collection<ParticipationDescriptor> available, final PortfolioOverview portfolio, final SessionInfo sessionInfo) { if (!Util.isAcceptable(strategy, portfolio)) { return Stream.empty(); } var preferences = Preferences.get(strategy, portfolio); var withoutUndesirable = available.parallelStream() .peek(d -> LOGGER.trace(\"Evaluating {}.\", d.item())) .filter(d -> { boolean isAcceptable = preferences.getDesirableRatings() .contains(d.item() .getRating()); if (!isAcceptable) { LOGGER.debug(\"Participation #{} skipped due to an undesirable rating.\", d.item() .getId()); } return isAcceptable; }); return strategy.getApplicableParticipations(withoutUndesirable, portfolio) .filter(d -> sizeMatchesStrategy(d.item())) .sorted(preferences.getSecondaryMarketplaceComparator()) .flatMap(d -> d.recommend() .stream()); }### Assistant: @Test void unacceptablePortfolioDueToOverInvestment() { final DefaultValues v = new DefaultValues(DefaultPortfolio.EMPTY); v.setTargetPortfolioSize(1000); final ParsedStrategy p = new ParsedStrategy(v); final PurchaseStrategy s = new NaturalLanguagePurchaseStrategy(p); final PortfolioOverview portfolio = mock(PortfolioOverview.class); when(portfolio.getInvested()).thenReturn(p.getMaximumInvestmentSize()); final Stream<RecommendedParticipation> result = s.recommend(Collections.singletonList(mockDescriptor()), portfolio, mockSessionInfo()); assertThat(result).isEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Object nextItemId(Object itemId) { if (!this.isSupported(itemId)) { return null; } int index = this.groups.indexOf(itemId); if (index == -1) { return null; } if (index == this.groups.size() - 1) { return null; } return this.groups.get(index + 1); }### Assistant: @Test public void testNextItemId() { OnapPDPGroup groupNotInList = Mockito.mock(OnapPDPGroup.class); Object retObj = null; container.groups.add(group); container.groups.add(newGroup); assertNull(container.nextItemId(groupNotInList)); assertNull(container.nextItemId(newGroup)); retObj = container.nextItemId(group); assertNotNull(retObj); assertTrue(retObj instanceof OnapPDPGroup); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public synchronized void updateSessions(EventTime eventTime) { boolean isObviouslyFinished = eventTime.mediaPeriodId != null && currentMediaPeriodId != null && eventTime.mediaPeriodId.windowSequenceNumber < currentMediaPeriodId.windowSequenceNumber; if (!isObviouslyFinished) { SessionDescriptor descriptor = getOrAddSession(eventTime.windowIndex, eventTime.mediaPeriodId); if (!descriptor.isCreated) { descriptor.isCreated = true; Assertions.checkNotNull(listener).onSessionCreated(eventTime, descriptor.sessionId); if (activeSessionId == null) { updateActiveSession(eventTime, descriptor); } } } }### Assistant: @Test public void updateSessions_ofOtherWindow_createsNewSession() { Timeline timeline = new FakeTimeline( 2); EventTime eventTime1 = createEventTime(timeline, 0, null); EventTime eventTime2 = createEventTime(timeline, 1, null); sessionManager.updateSessions(eventTime1); sessionManager.updateSessions(eventTime2); ArgumentCaptor<String> sessionId1 = ArgumentCaptor.forClass(String.class); ArgumentCaptor<String> sessionId2 = ArgumentCaptor.forClass(String.class); verify(mockListener).onSessionCreated(eq(eventTime1), sessionId1.capture()); verify(mockListener).onSessionCreated(eq(eventTime2), sessionId2.capture()); verify(mockListener).onSessionActive(eventTime1, sessionId1.getValue()); verifyNoMoreInteractions(mockListener); assertThat(sessionId1).isNotEqualTo(sessionId2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean shouldAppend() { return append; }### Assistant: @Test public void testAppendOption() { final DistCpOptions.Builder builder = new DistCpOptions.Builder( Collections.singletonList(new Path(\"hdfs: new Path(\"hdfs: .withSyncFolder(true) .withAppend(true); Assert.assertTrue(builder.build().shouldAppend()); try { new DistCpOptions.Builder( Collections.singletonList(new Path(\"hdfs: new Path(\"hdfs: .withAppend(true) .build(); fail(\"Append should fail if update option is not specified\"); } catch (IllegalArgumentException e) { assertExceptionContains( \"Append is valid only with update options\", e); } try { new DistCpOptions.Builder( Collections.singletonList(new Path(\"hdfs: new Path(\"hdfs: .withSyncFolder(true) .withAppend(true) .withCRC(true) .build(); fail(\"Append should fail if skipCrc option is specified\"); } catch (IllegalArgumentException e) { assertExceptionContains( \"Append is disallowed when skipping CRC\", e); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void fromParameters(MetadataStore mds, String jdbcUrl, String schemaName, String dbSchemaName, String pgpassPath, String driverClassName, String detectionMethod) throws Exception { CreateSchemaForRDBMSApp.Parameters parameters = new CreateSchemaForRDBMSApp.Parameters(); parameters.jdbcUrl = jdbcUrl; parameters.schemaName = schemaName; parameters.dbSchema = dbSchemaName; parameters.pgPassPath = pgpassPath; parameters.driverClassName = driverClassName; parameters.detection = detectionMethod; parameters.metadataStoreParameters.isCloseMetadataStore = false; CreateSchemaForRDBMSApp app = new CreateSchemaForRDBMSApp(parameters); app.metadataStore = mds; app.run(); }### Assistant: @Test public void testImportViaFromParameters() throws Exception { MetadataStore metadataStore = new DefaultMetadataStore(); File testFolder = getTestResource(\"test-database.db\"); CreateSchemaForRDBMSApp.fromParameters( metadataStore, \"jdbc:sqlite:/\" + testFolder.getAbsolutePath(), \"test-schema\", null, null, org.sqlite.JDBC.class.getCanonicalName(), \"JDBC\" ); Schema schema = metadataStore.getSchemaByName(\"test-schema\"); Assert.assertNotNull(\"test-schema\"); Assert.assertEquals(9, schema.getTables().size()); Table target = metadataStore.getTableByName(\"test-schema.Target\"); Assert.assertEquals(6, target.getColumns().size()); Column targetData = metadataStore.getColumnByName(\"test-schema.Target.data\"); Assert.assertNotNull(targetData); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean relate(GeometryWrapper sourceGeometry, GeometryWrapper targetGeometry) throws FactoryException, MismatchedDimensionException, TransformException { return sourceGeometry.relate(targetGeometry, RCC8IntersectionPattern.PARTIALLY_OVERLAPPING); }### Assistant: @Test public void testRelate_polygon_polygon_false() throws FactoryException, MismatchedDimensionException, TransformException { GeometryWrapper subjectGeometryWrapper = GeometryWrapper.extract(ResourceFactory.createTypedLiteral(\"<http: GeometryWrapper objectGeometryWrapper = GeometryWrapper.extract(ResourceFactory.createTypedLiteral(\"<http: RccPartiallyOverlappingFF instance = new RccPartiallyOverlappingFF(); Boolean expResult = false; Boolean result = instance.relate(subjectGeometryWrapper, objectGeometryWrapper); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Document parseFile(File file) { NetworkDefinition netdef = null; try { context = JAXBContext.newInstance(new Class[]{com.github.kayak.canio.kcd.NetworkDefinition.class}); Unmarshaller umarshall = context.createUnmarshaller(); umarshall.setSchema(schema); Object object; if(file.getName().endsWith(\".kcd.gz\")) { GZIPInputStream zipstream = new GZIPInputStream(new FileInputStream(file)); object = umarshall.unmarshal(zipstream); } else if(file.getName().endsWith(\".kcd\")) { object = umarshall.unmarshal(file); } else { return null; } if (object.getClass() == NetworkDefinition.class) { netdef = (NetworkDefinition) object; } } catch(UnmarshalException e) { logger.log(Level.WARNING, \"Found invalid file: \" + file.getAbsolutePath() + \"!\", e); return null; } catch (Exception e) { logger.log(Level.WARNING, \"Could not load kcd file \" + file.getAbsolutePath() + \"!\", e); return null; } Document doc = new Document(); com.github.kayak.canio.kcd.Document documentInfo = netdef.getDocument(); doc.setVersion(documentInfo.getVersion()); doc.setAuthor(documentInfo.getAuthor()); doc.setCompany(documentInfo.getCompany()); doc.setDate(documentInfo.getDate()); doc.setName(documentInfo.getName()); doc.setFileName(file.getAbsolutePath()); for(Node n : netdef.getNode()) { com.github.kayak.core.description.Node node = doc.createNode(n.getId(), n.getName()); } for(Bus b : netdef.getBus()) { BusDescription description = doc.createBusDescription(); description.setName(b.getName()); description.setBaudrate(b.getBaudrate()); for(Message m : b.getMessage()) { MessageDescription messageDescription; if(m.getFormat().equals(\"extended\")) messageDescription = new MessageDescription(Integer.parseInt(m.getId().substring(2),16), true); else messageDescription = new MessageDescription(Integer.parseInt(m.getId().substring(2),16), false); messageDescription.setInterval(m.getInterval()); messageDescription.setName(m.getName()); Producer producer = m.getProducer(); if(producer != null) { List<NodeRef> ref = producer.getNodeRef(); if(ref.size() > 1) { } else if (ref.size() == 1) { String id = ref.get(0).getId(); com.github.kayak.core.description.Node n = doc.getNodeWithID(id); if(n != null) messageDescription.setProducer(n); } } for(Multiplex multiplex : m.getMultiplex()) { MultiplexDescription multiplexDescription = messageDescription.createMultiplexDescription(); if(multiplex.getEndianess().equals(\"big\")) { multiplexDescription.setByteOrder(ByteOrder.BIG_ENDIAN); } else { multiplexDescription.setByteOrder(ByteOrder.LITTLE_ENDIAN); } multiplexDescription.setLength(multiplex.getLength()); multiplexDescription.setOffset(multiplex.getOffset()); multiplexDescription.setName(multiplex.getName()); if(multiplex.getValue() != null) { String typeString = multiplex.getValue().getType(); if (typeString.equals(\"signed\")) { multiplexDescription.setType(SignalDescription.Type.SIGNED); } else if (typeString.equals(\"double\")) { multiplexDescription.setType(SignalDescription.Type.DOUBLE); } else if (typeString.equals(\"float\")) { multiplexDescription.setType(SignalDescription.Type.SINGLE); } else { multiplexDescription.setType(SignalDescription.Type.UNSIGNED); } } for(MuxGroup group : multiplex.getMuxGroup()) { long value = (long) group.getCount(); for(Signal s : group.getSignal()) { SignalDescription signalDescription = multiplexDescription.createMultiplexedSignal(value); signalToSignalDescription(s, signalDescription); Consumer c = s.getConsumer(); if(c != null && c.getNodeRef() != null) { List<NodeRef> signalRef = c.getNodeRef(); HashSet<com.github.kayak.core.description.Node> consumers = new HashSet<com.github.kayak.core.description.Node>(); for(NodeRef nr : signalRef) { com.github.kayak.core.description.Node n = doc.getNodeWithID(nr.getId()); if(n != null) consumers.add(n); } } } } } for(Signal s : m.getSignal()) { SignalDescription signalDescription = messageDescription.createSignalDescription(); signalToSignalDescription(s, signalDescription); Consumer c = s.getConsumer(); if(c != null && c.getNodeRef() != null) { List<NodeRef> signalRef = c.getNodeRef(); HashSet<com.github.kayak.core.description.Node> consumers = new HashSet<com.github.kayak.core.description.Node>(); for(NodeRef nr : signalRef) { com.github.kayak.core.description.Node n = doc.getNodeWithID(nr.getId()); if(n != null) consumers.add(n); } } } description.addMessageDescription(messageDescription); } } return doc; }### Assistant: @Test public void testParseFile() { System.out.println(\"parseFile\"); System.out.println(\"Document properties\"); assertEquals(\"The Homer\", document.getName()); assertEquals(\"1.23\", document.getVersion()); assertEquals(\"Herbert Powell\", document.getAuthor()); assertEquals(\"Powell Motors\", document.getCompany()); System.out.println(\"nodes\"); Set<Node> nodes = document.getNodes(); boolean foundMotor = false; for(Node n : nodes) { if(n.getName().equals(\"Motor ACME\")) foundMotor = true; } assertTrue(foundMotor); Set<BusDescription> busses = document.getBusDescriptions(); assertEquals(3, busses.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right) { BufferedImage leftImg = new SRGBColorConverter( new ConvenientBufferedImageWrapper(left)).getImage().getBufferedImage(); BufferedImage rightImg = new SRGBColorConverter( new ConvenientBufferedImageWrapper(right)).getImage().getBufferedImage(); ShrinkResizePreprocessor shrink = new ShrinkResizePreprocessor(leftImg, rightImg); shrink.process(); leftImg = shrink.getResult1(); rightImg = shrink.getResult2(); shrink = null; ScaleToNearestFactorPreprocessor scale = new ScaleToNearestFactorPreprocessor(leftImg, rightImg, targetSize); scale.process(); leftImg = scale.getResult1(); rightImg = scale.getResult2(); scale = null; HSBColorConverter c1 = new HSBColorConverter( new SRGBColorConverter(new ConvenientBufferedImageWrapper(leftImg))); HSBColorConverter c2 = new HSBColorConverter( new SRGBColorConverter(new ConvenientBufferedImageWrapper(rightImg))); SimpleSSIMMetric metric = new SimpleSSIMMetric(c1, c2, new Point(0, 0), new Point(leftImg.getWidth(), leftImg.getHeight()), numThreads); return metric.execute(); }### Assistant: @Test public void evaluateTest_half000000_111111_half000000_111111() { BufferedImage left = BufferedImageHelper.createSolidHalfImage(new Color(0, 0, 0), new Color(255, 255, 255)); BufferedImage right = BufferedImageHelper.createSolidHalfImage(new Color(0, 0, 0), new Color(255, 255, 255)); SsimQa ssimQa = new SsimQa(); TransientOperation<Float, StaticColor> op = ssimQa.evaluate(left, right); checkOperationEqual(op, 1.0f); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static <B> TreeNode<B> parse( final String value, final Function<? super String, ? extends B> mapper ) { requireNonNull(value); requireNonNull(mapper); final TreeNode<B> root = TreeNode.of(); final Deque<TreeNode<B>> parents = new ArrayDeque<>(); TreeNode<B> current = root; for (Token token : tokenize(value.trim())) { switch (token.seq) { case \"(\": if (current == null) { throw new IllegalArgumentException(format( \"Illegal parentheses tree string: '%s'.\", value )); } final TreeNode<B> tn1 = TreeNode.of(); current.attach(tn1); parents.push(current); current = tn1; break; case \",\": if (parents.isEmpty()) { throw new IllegalArgumentException(format( \"Expect '(' at position %d.\", token.pos )); } final TreeNode<B> tn2 = TreeNode.of(); assert parents.peek() != null; parents.peek().attach(tn2); current = tn2; break; case \")\": if (parents.isEmpty()) { throw new IllegalArgumentException(format( \"Unbalanced parentheses at position %d.\", token.pos )); } current = parents.pop(); if (parents.isEmpty()) { current = null; } break; default: if (current == null) { throw new IllegalArgumentException(format( \"More than one root element at pos %d: '%s'.\", token.pos, value )); } if (current.value() == null) { current.value(mapper.apply(token.seq)); } break; } } if (!parents.isEmpty()) { throw new IllegalArgumentException( \"Unbalanced parentheses: \" + value ); } return root; }### Assistant: @Test public void oneLevelOneTree() { Assert.assertEquals( parse(\"a(b)\", Function.identity()), TreeNode.of(\"a\").attach(\"b\") ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String writeJsonObject(final JsonObject json) { final StringWriter stringWriter = new StringWriter(); try (final JsonWriter jsonWriter = writerFactory.createWriter(stringWriter)) { jsonWriter.writeObject(json); return stringWriter.toString(); } }### Assistant: @Test public void shouldWriteAJsonObjectAsAPrettyPrintedString() throws Exception { final JsonObject jsonObject = createObjectBuilder() .add(\"aProperty\", \"value a\") .add(\"bProperty\", \"value b\") .add(\"cProperty\", \"value c\") .add(\"anObject\", createObjectBuilder() .add(\"innerProperty\", \"innerValue\")) .build(); final String json = JsonEnvelopeWriter.writeJsonObject(jsonObject); assertThat(json, is(EXPECTED_JSON)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Debt> optimize(List<Debt> debts) { final List<Debt> sortedCopy = debts .stream() .sorted(comparingInt(Debt::hashCode)) .collect(toList()); return new MinimalAmountTransferredOptimizer(sortedCopy).getDebtsWithMinimalAmountTransferred(); }### Assistant: @Test public void orderOfDebtsShouldNotInfluenceResults() { List<Debt> debtListA = Arrays.asList( debt(matthias, amount(10), thomas), debt(thomas, amount(3), david), debt(thomas, amount(10), david), debt(david, amount(13), thomasB), debt(jacqueline, amount(7), thomas), debt(thomasB, amount(6), jacqueline), debt(jacqueline, amount(5), thomasB), debt(matthias, amount(4), jacqueline), debt(thomas, amount(13), thomasB), debt(david, amount(17), thomas) ); List<Debt> debtListB = Arrays.asList( debt(david, amount(17), thomas), debt(david, amount(13), thomasB), debt(matthias, amount(4), jacqueline), debt(thomas, amount(13), thomasB), debt(matthias, amount(10), thomas), debt(thomas, amount(10), david), debt(thomas, amount(3), david), debt(thomasB, amount(6), jacqueline), debt(jacqueline, amount(7), thomas), debt(jacqueline, amount(5), thomasB) ); List<Debt> optimalDebtsA = sut.optimize(debtListA); List<Debt> optimalDebtsB = sut.optimize(debtListB); assertThat(optimalDebtsA, equalTo(optimalDebtsB)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String calculateBaseURL(AtomicBoolean cancelMonitor, String url, List<DavResource> resources) throws IOException { for (Iterator<DavResource> iterator = resources.iterator(); iterator.hasNext(); ) { if (cancelMonitor.get()) { return \"\"; } DavResource next = iterator.next(); if (url.endsWith(next.getPath())) { iterator.remove(); return url.substring(0, url.length() - next.getPath().length()); } } return url; }### Assistant: @Test public void testCalculateBaseURL() throws Exception { List<DavResource> resources = new ArrayList<DavResource>(2); final DavResource baseResource = Mockito.mock(DavResource.class); Mockito.when(baseResource.getPath()).thenReturn(\"/webdav/\"); final DavResource otherResource = Mockito.mock(DavResource.class); Mockito.when(otherResource.getPath()).thenReturn(\"/webdav/metadata.xml\"); resources.add(baseResource); resources.add(otherResource); final String baseURL = WebDavRetriever.calculateBaseURL(new AtomicBoolean(), \"http: assertEquals(\"http: assertEquals(1, resources.size()); assertFalse(resources.contains(baseResource)); assertTrue(resources.contains(otherResource)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean test(@Nullable final Message message) { if (message == null) { return false; } if (LOGGER.isTraceEnabled()) { LOGGER.trace(\"Received SQS message: {}\", message); } else if (LOGGER.isDebugEnabled()) { LOGGER.debug(\"Received SQS message: {}\", message.getMessageId()); } if (broadcaster.isEmpty()) { LOGGER.debug(\"No connections found, skipping SQS message processing\"); return false; } final AmazonSNSNotification notification; try { notification = MAPPER.readValue(message.getBody(), AmazonSNSNotification.class); } catch (IOException e) { LOGGER.error(\"Failed to parse SNS notification, deleting SQS message\", e); return true; } LOGGER.debug( \"SNS notification created at: {} ({} behind)\", notification.getTimestamp(), notification.getDelayDuration()); final String body; if (notification.isValid()) { body = notification.getMessage(); } else { body = message.getBody(); } final S3EventNotification records; try { records = S3EventNotification.parseJson(body); } catch (AmazonClientException e) { LOGGER.error(\"Failed to parse S3 event records, deleting SQS message\", e); return true; } final int recordCount = records.getRecords().size(); recordCounts.update(recordCount); LOGGER.debug(\"Parsed {} S3 event records from SNS notification\", recordCount); if (recordCount < 1) { LOGGER.debug(\"No S3 event records found in SNS notification, deleting SQS message\"); return true; } int recordsProcessed = 0; for (S3EventNotificationRecord record : records.getRecords()) { if (broadcaster.isEmpty()) { LOGGER.debug(\"No connections found, not downloading from S3\"); return false; } if (processRecord(record)) { recordsProcessed++; } } if (recordsProcessed == recordCount) { LOGGER.debug( \"Processed {} of {} records, deleting SQS message\", recordsProcessed, recordCount); return true; } LOGGER.debug( \"Processed {} of {} records, not deleting SQS message: {}\", recordsProcessed, recordCount, message.getMessageId()); return false; }### Assistant: @Test public void testProcessS3EventFetchFailure() throws Exception { when(broadcaster.isEmpty()).thenReturn(false); when(s3.fetch(any(S3EventNotificationRecord.class))) .thenThrow(new AmazonServiceException(\"error\")); message.setBody(FixtureHelpers.fixture(\"fixtures/sns_notification.json\")); final boolean actual = processor.test(message); verify(broadcaster, times(2)).isEmpty(); verify(broadcaster, never()).test(anyString()); verify(s3).fetch(any(S3EventNotificationRecord.class)); assertThat(actual).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void decode(int streamId, ByteBuf in, Http2Headers headers) throws Http2Exception { int index = 0; long headersLength = 0; int nameLength = 0; int valueLength = 0; byte state = READ_HEADER_REPRESENTATION; boolean huffmanEncoded = false; CharSequence name = null; IndexType indexType = IndexType.NONE; while (in.isReadable()) { switch (state) { case READ_HEADER_REPRESENTATION: byte b = in.readByte(); if (maxDynamicTableSizeChangeRequired && (b & 0xE0) != 0x20) { throw MAX_DYNAMIC_TABLE_SIZE_CHANGE_REQUIRED; } if (b < 0) { index = b & 0x7F; switch (index) { case 0: throw DECODE_ILLEGAL_INDEX_VALUE; case 0x7F: state = READ_INDEXED_HEADER; break; default: headersLength = indexHeader(streamId, index, headers, headersLength); } } else if ((b & 0x40) == 0x40) { indexType = IndexType.INCREMENTAL; index = b & 0x3F; switch (index) { case 0: state = READ_LITERAL_HEADER_NAME_LENGTH_PREFIX; break; case 0x3F: state = READ_INDEXED_HEADER_NAME; break; default: name = readName(index); state = READ_LITERAL_HEADER_VALUE_LENGTH_PREFIX; } } else if ((b & 0x20) == 0x20) { index = b & 0x1F; if (index == 0x1F) { state = READ_MAX_DYNAMIC_TABLE_SIZE; } else { setDynamicTableSize(index); state = READ_HEADER_REPRESENTATION; } } else { indexType = ((b & 0x10) == 0x10) ? IndexType.NEVER : IndexType.NONE; index = b & 0x0F; switch (index) { case 0: state = READ_LITERAL_HEADER_NAME_LENGTH_PREFIX; break; case 0x0F: state = READ_INDEXED_HEADER_NAME; break; default: name = readName(index); state = READ_LITERAL_HEADER_VALUE_LENGTH_PREFIX; } } break; case READ_MAX_DYNAMIC_TABLE_SIZE: setDynamicTableSize(decodeULE128(in, (long) index)); state = READ_HEADER_REPRESENTATION; break; case READ_INDEXED_HEADER: headersLength = indexHeader(streamId, decodeULE128(in, index), headers, headersLength); state = READ_HEADER_REPRESENTATION; break; case READ_INDEXED_HEADER_NAME: name = readName(decodeULE128(in, index)); state = READ_LITERAL_HEADER_VALUE_LENGTH_PREFIX; break; case READ_LITERAL_HEADER_NAME_LENGTH_PREFIX: b = in.readByte(); huffmanEncoded = (b & 0x80) == 0x80; index = b & 0x7F; if (index == 0x7f) { state = READ_LITERAL_HEADER_NAME_LENGTH; } else { if (index > maxHeaderListSizeGoAway - headersLength) { headerListSizeExceeded(maxHeaderListSizeGoAway); } nameLength = index; state = READ_LITERAL_HEADER_NAME; } break; case READ_LITERAL_HEADER_NAME_LENGTH: nameLength = decodeULE128(in, index); if (nameLength > maxHeaderListSizeGoAway - headersLength) { headerListSizeExceeded(maxHeaderListSizeGoAway); } state = READ_LITERAL_HEADER_NAME; break; case READ_LITERAL_HEADER_NAME: if (in.readableBytes() < nameLength) { throw notEnoughDataException(in); } name = readStringLiteral(in, nameLength, huffmanEncoded); state = READ_LITERAL_HEADER_VALUE_LENGTH_PREFIX; break; case READ_LITERAL_HEADER_VALUE_LENGTH_PREFIX: b = in.readByte(); huffmanEncoded = (b & 0x80) == 0x80; index = b & 0x7F; switch (index) { case 0x7f: state = READ_LITERAL_HEADER_VALUE_LENGTH; break; case 0: headersLength = insertHeader(streamId, headers, name, EMPTY_STRING, indexType, headersLength); state = READ_HEADER_REPRESENTATION; break; default: if ((long) index + nameLength > maxHeaderListSizeGoAway - headersLength) { headerListSizeExceeded(maxHeaderListSizeGoAway); } valueLength = index; state = READ_LITERAL_HEADER_VALUE; } break; case READ_LITERAL_HEADER_VALUE_LENGTH: valueLength = decodeULE128(in, index); if ((long) valueLength + nameLength > maxHeaderListSizeGoAway - headersLength) { headerListSizeExceeded(maxHeaderListSizeGoAway); } state = READ_LITERAL_HEADER_VALUE; break; case READ_LITERAL_HEADER_VALUE: if (in.readableBytes() < valueLength) { throw notEnoughDataException(in); } CharSequence value = readStringLiteral(in, valueLength, huffmanEncoded); headersLength = insertHeader(streamId, headers, name, value, indexType, headersLength); state = READ_HEADER_REPRESENTATION; break; default: throw new Error(\"should not reach here state: \" + state); } } if (headersLength > maxHeaderListSize) { headerListSizeExceeded(streamId, maxHeaderListSize, true); } }### Assistant: @Test public void testLiteralWithIncrementalIndexingWithEmptyName() throws Http2Exception { decode(\"400005\" + hex(\"value\")); verify(mockHeaders, times(1)).add(EMPTY_STRING, of(\"value\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Tuple0 of() { return Tuple0Impl.EMPTY_TUPLE; }### Assistant: @Test void of7() { assertTuple(Tuples.of(0, 1, 2, 3, 4, 5, 6), 7); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<RangerTag> getTagsByType(String name) { List<RangerTag> ret = new ArrayList<RangerTag>(); List<XXTag> xxTags = daoMgr.getXXTag().findByName(name); if(CollectionUtils.isNotEmpty(xxTags)) { for(XXTag xxTag : xxTags) { RangerTag tag = populateViewBean(xxTag); ret.add(tag); } } return ret; }### Assistant: @Test public void test4GetTagsByType() { Mockito.when(daoMgr.getXXTag()).thenReturn(xXTagDao); rangerTagService.getTagsByType(\"testTagName\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void init(Random random) { super.init(random, list.size()); }### Assistant: @Test(expected = UnsupportedOperationException.class) public void testWrongInit() { BooleanMapGenotype<Integer> geno = new BooleanMapGenotype<>(new MockList()); geno.init(new MockRandom(), 2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting public long partialUpdateSecret(String name, String creator, PartialUpdateSecretRequestV2 request) { return dslContext.transactionResult(configuration -> { long now = OffsetDateTime.now().toEpochSecond(); SecretContentDAO secretContentDAO = secretContentDAOFactory.using(configuration); SecretSeriesDAO secretSeriesDAO = secretSeriesDAOFactory.using(configuration); SecretSeries secretSeries = secretSeriesDAO.getSecretSeriesByName(name).orElseThrow( NotFoundException::new); Long currentVersion = secretSeries.currentVersion().orElseThrow(NotFoundException::new); SecretContent secretContent = secretContentDAO.getSecretContentById(currentVersion).orElseThrow(NotFoundException::new); long secretId = secretSeries.id(); String description = request.descriptionPresent() ? request.description() : secretSeries.description(); String type = request.typePresent() ? request.type() : secretSeries.type().orElse(\"\"); ImmutableMap<String, String> metadata = request.metadataPresent() ? request.metadata() : secretContent.metadata(); Long expiry = request.expiryPresent() ? request.expiry() : secretContent.expiry(); String encryptedContent = secretContent.encryptedContent(); String hmac = secretContent.hmac(); if (request.contentPresent()) { checkArgument(!request.content().isEmpty()); hmac = cryptographer.computeHmac( request.content().getBytes(UTF_8), \"hmackey\"); if (hmac == null) { throw new ContentEncodingException(\"Error encoding content for SecretBuilder!\"); } encryptedContent = cryptographer.encryptionKeyDerivedFrom(name).encrypt(request.content()); } secretSeriesDAO.updateSecretSeries(secretId, name, creator, description, type, secretSeries.generationOptions(), now); long secretContentId = secretContentDAO.createSecretContent(secretId, encryptedContent, hmac, creator, metadata, expiry, now); secretSeriesDAO.setCurrentVersion(secretId, secretContentId, creator, now); return secretId; }); }### Assistant: @Test(expected = NotFoundException.class) public void partialUpdateSecretWhenSecretContentDoesNotExist() { String name = \"newSecret\"; String content = \"c2VjcmV0MQ==\"; PartialUpdateSecretRequestV2 request = PartialUpdateSecretRequestV2.builder().contentPresent(true).content(content).build(); jooqContext.insertInto(SECRETS) .set(SECRETS.ID, 12L) .set(SECRETS.NAME, name) .set(SECRETS.DESCRIPTION, series1.description()) .set(SECRETS.CREATEDBY, series1.createdBy()) .set(SECRETS.CREATEDAT, series1.createdAt().toEpochSecond()) .set(SECRETS.UPDATEDBY, series1.updatedBy()) .set(SECRETS.UPDATEDAT, series1.updatedAt().toEpochSecond()) .set(SECRETS.CURRENT, 12L) .execute(); secretDAO.partialUpdateSecret(name, \"test\", request); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean exists(JdbcIndex<?> index) { boolean headExists = headTableEngine.exists(index); boolean histExists = historyTableEngine.exists(index); if (headExists ^ histExists) { throw new IllegalStateException(\"Index is inconsitent. Head: \" + headExists + \", history: \" + histExists); } return headExists; }### Assistant: @Test(expected = IllegalStateException.class) public void exists_onInconsistentIndex_throwsException() throws Exception { JdbcIndex<?> index = new JdbcIndex<>(); when(headTableEngine.exists(index)).thenReturn(true); when(historyTableEngine.exists(index)).thenReturn(false); mapper.exists(index); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int getSize() { return keys.size(); }### Assistant: @Test public void testSize() throws Exception { SubstructureFingerprinter fp = new SubstructureFingerprinter(); Assert.assertEquals(307, fp.getSize()); fp = new SubstructureFingerprinter(StandardSubstructureSets.getFunctionalGroupSMARTS()); Assert.assertEquals(307, fp.getSize()); fp = new SubstructureFingerprinter(StandardSubstructureSets.getCountableMACCSSMARTS()); Assert.assertEquals(142, fp.getSize()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public GenotypeCollection convert(AlleleCountPosition position, Set<Integer> samples, Variant variant, Consumer<AlleleCountPosition> checkFilteredObject) { allExist(samples); AlleleCountPosition currAllele = new AlleleCountPosition(position, samples); Set<Integer> remaining = new HashSet<>(samples); validRefAlleles(currAllele); if (null != checkFilteredObject) { checkFilteredObject.accept(currAllele); } HashMap<Integer, List<Integer>> refMap = new HashMap<>(currAllele.getReference()); refMap.remove(NO_CALL); if (!VariantHbaseUtil.isInsertion(variant)) { currAllele.getAltMap().remove(INS_SYMBOL); } Set<Integer> noCallIds = new HashSet<>(); Function<Integer, Boolean> validSampleId = (sid) -> { remaining.remove(sid); return true; }; Function<Integer, Boolean> validNoCallSampleId = (sid) -> { boolean isNoCall = remaining.remove(sid); if (isNoCall) { noCallIds.add(sid); } return isNoCall; }; int alternateCount = count(currAllele.getAlternate(), validSampleId); int insCnt = count(currAllele.getAltMap().get(INS_SYMBOL), validSampleId); int delCnt = count(currAllele.getAltMap().get(DEL_SYMBOL), validSampleId); int aCnt = count(currAllele.getAltMap().get(\"A\"), validSampleId); int tCnt = count(currAllele.getAltMap().get(\"T\"), validSampleId); int gCnt = count(currAllele.getAltMap().get(\"G\"), validSampleId); int cCnt = count(currAllele.getAltMap().get(\"C\"), validSampleId); count(currAllele.getReference().get(NO_CALL), validNoCallSampleId); int refCount = count(refMap, validSampleId); Set<Integer> explained = new HashSet<>(); Set<Integer> unexplained = new HashSet<>(); GenotypeCollection genotypes = new GenotypeCollection(); Map<String, Integer> altPos = new HashMap<>(); genotypes.getAlleles().add(variant.getReference()); altPos.put(variant.getReference(), 0); genotypes.getAlleles().add(variant.getAlternate()); altPos.put(variant.getAlternate(), 1); currAllele.getAltMap().forEach((alt, map) -> { if (alt.equals(INS_SYMBOL)) { alt = DEL_SYMBOL; } if (!altPos.containsKey(alt)) { altPos.put(alt, altPos.size()); genotypes.getAlleles().add(alt); } map.forEach((k, ids) -> unexplained.addAll(ids)); }); if (!remaining.isEmpty()) { genotypes.getGenotypeToSamples().put(Genotype.HOM_REF, new HashSet<>(remaining)); explained.addAll(remaining); } if (currAllele.getAlternate().containsKey(2)) { genotypes.getGenotypeToSamples().put(Genotype.HOM_VAR, new HashSet<>(currAllele.getAlternate().get(2))); explained.addAll(currAllele.getAlternate().get(2)); } Set<Integer> oneRef = new HashSet<>(currAllele.getReference().containsKey(1) ? currAllele.getReference().get(1) : Collections.emptyList()); if (currAllele.getAlternate().containsKey(1)) { Set<Integer> hetIds = new HashSet<>(); currAllele.getAlternate().get(1).forEach(sid -> { if (oneRef.remove(sid)) { hetIds.add(sid); } else { unexplained.add(sid); } }); if (!hetIds.isEmpty()) { genotypes.getGenotypeToSamples().put(Genotype.HET_REF, hetIds); explained.addAll(hetIds); } } unexplained.addAll(oneRef); if (!noCallIds.isEmpty()) { genotypes.getGenotypeToSamples().put(Genotype.NOCALL, noCallIds); explained.addAll(noCallIds); } unexplained.removeAll(explained); if (!unexplained.isEmpty()) { Map<Integer, String> gts = buildComplexGts(unexplained, currAllele, altPos, variant); gts.forEach((k, v) -> genotypes.getGenotypeToSamples().computeIfAbsent(v, x -> new HashSet<>()).add(k)); } return genotypes; }### Assistant: @Test public void convert() throws Exception { Set<Integer> indexed = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 20, 21)); AlleleCountToGenotypes alleleCountToGenotypes = new AlleleCountToGenotypes(indexed); AlleleCountPosition position = new AlleleCountPosition(); position.getReference().put(-1, Arrays.asList(7)); position.getReference().put(1, Arrays.asList(1, 2, 5, 6, 10, 20)); position.getAlternate().put(1, Arrays.asList(1, 2, 5, 8, 12)); position.getAlternate().put(2, Arrays.asList(3)); position.getAltMap().computeIfAbsent(\"G\", x -> new HashMap<>()).put(1, Arrays.asList(10,12)); position.getAltMap().computeIfAbsent(\"G\", x -> new HashMap<>()).put(2, Arrays.asList(11)); position.getAltMap().computeIfAbsent(HBaseAlleleCalculator.DEL_SYMBOL, x -> new HashMap<>()).put(1, Arrays.asList(20)); position.getAltMap().computeIfAbsent(HBaseAlleleCalculator.INS_SYMBOL, x -> new HashMap<>()).put(2, Arrays.asList(21)); Set<Integer> samples = new HashSet<>(Arrays.asList(1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 20, 21)); Variant variant = new Variant(\"1:100:A:T\"); AlleleCountToGenotypes.GenotypeCollection gts = alleleCountToGenotypes.convert(position, samples, variant, null); Map<String, Integer> alleleIdx = new HashMap<>(); for (int i = 0; i < gts.getAlleles().size(); i++) { alleleIdx.put(gts.getAlleles().get(i), i); } assertEquals(\"HET\", new HashSet(Arrays.asList(1,2)), gts.getGenotypeToSamples().get(Genotype.HET_REF)); assertEquals(\"HOM_ALT\", new HashSet(Arrays.asList(3)), gts.getGenotypeToSamples().get(Genotype.HOM_VAR)); assertEquals(\"HOM_REF\", new HashSet(Arrays.asList(4, 21)), gts.getGenotypeToSamples().get(Genotype.HOM_REF)); assertEquals(\"Hemi\", new HashSet(Arrays.asList(6)), gts.getGenotypeToSamples().get(\"0\")); assertEquals(\"Hemi\", new HashSet(Arrays.asList(8)), gts.getGenotypeToSamples().get(\"1\")); assertEquals(\"NoCall\", new HashSet(Arrays.asList(7)), gts.getGenotypeToSamples().get(Genotype.NOCALL)); Integer gIdx = alleleIdx.get(\"G\"); assertEquals(\"SecAlt G\", new HashSet(Arrays.asList(10)), gts.getGenotypeToSamples().get(\"0/\" + gIdx)); assertEquals(\"SecAlt G\", new HashSet(Arrays.asList(11)), gts.getGenotypeToSamples().get(gIdx + \"/\" + gIdx)); assertEquals(\"SecAlt T/G\", new HashSet(Arrays.asList(12)), gts.getGenotypeToSamples().get(\"1/\" + gIdx)); Integer delIdx = alleleIdx.get(HBaseAlleleCalculator.DEL_SYMBOL); assertEquals(\"SecAlt Del\", new HashSet(Arrays.asList(20)), gts.getGenotypeToSamples().get(\"0/\" + delIdx)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public double calc(double[] vec1, double[] vec2) { return calc(vec1, 0, vec2, 0, vec1.length); }### Assistant: @Test public void testCalDistanceVecVec() { DenseMatrix denseResult = distance.calc(distance.prepareVectorData(Tuple2.of(denseVector1, null)), (FastDistanceData)distance.prepareVectorData(Tuple2.of(denseVector2, null))); Assert.assertEquals(denseResult.get(0, 0), 12.0, 0.01); DenseMatrix sparseResult = distance.calc(distance.prepareVectorData(Tuple2.of(sparseVector1, null)), (FastDistanceData)distance.prepareVectorData(Tuple2.of( sparseVector2, null))); Assert.assertEquals(sparseResult.get(0, 0), 0.8, 0.01); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"/count\") @Override public Response getUserCount() { try { UserStoreCountRetriever userStoreCountRetrieverService = DeviceMgtAPIUtils.getUserStoreCountRetrieverService(); RealmConfiguration secondaryRealmConfiguration = DeviceMgtAPIUtils.getUserRealm().getRealmConfiguration() .getSecondaryRealmConfig(); if (secondaryRealmConfiguration != null) { if (!secondaryRealmConfiguration.isPrimary() && !Constants.JDBC_USERSTOREMANAGER. equals(secondaryRealmConfiguration.getUserStoreClass().getClass())) { return getUserCountViaUserStoreManager(); } } if (userStoreCountRetrieverService != null) { long count = userStoreCountRetrieverService.countUsers(\"\"); if (count != -1) { BasicUserInfoList result = new BasicUserInfoList(); result.setCount(count); return Response.status(Response.Status.OK).entity(result).build(); } } } catch (UserStoreCounterException e) { String msg = \"Error occurred while retrieving the count of users that exist within the current tenant\"; log.error(msg, e); } catch (UserStoreException e) { String msg = \"Error occurred while retrieving user stores.\"; log.error(msg, e); } return getUserCountViaUserStoreManager(); }### Assistant: @Test(description = \"This method tests the behaviour of getUserCount method of UserManagementService\", dependsOnMethods = {\"testRemoveUser\"}) public void testGetUserCount() throws UserStoreException { PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, \"getUserRealm\")).toReturn(userRealm); PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, \"getUserStoreCountRetrieverService\")) .toReturn(null); PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, \"getUserStoreManager\")) .toReturn(this.userStoreManager); Response response = userManagementService.getUserCount(); Assert.assertEquals(response.getStatus(), Response.Status.OK.getStatusCode(), \"User count retrieval failed\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DbmsColumnHandler getColumnHandler() { return DEFAULT_COLUMN_HANDLER; }### Assistant: @Test void getColumnHandler() { assertNotNull(instance.getColumnHandler()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean tableNameIsRegex() { return tableNameIsRegex; }### Assistant: @Test public void testTableNameIsRegex_BasicLiteral() throws Exception { assertFalse(new IndexerConf(\"myTableName\").tableNameIsRegex()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static int getPossibleParallelRepairsCount( Map<List<String>, List<String>> ranges, Map<String, String> hostsInRing, DatacenterAvailability datacenterAvailability) throws ReaperException { if (ranges.isEmpty()) { String msg = \"Repairing 0-sized cluster.\"; LOG.error(msg); throw new ReaperException(msg); } if (DatacenterAvailability.SIDECAR == datacenterAvailability) { return 1; } LOG.debug( \"Possible parallel repairs : {}\", Math.min( ranges.size() / ranges.values().iterator().next().size(), Math.max(1, hostsInRing.keySet().size() / ranges.values().iterator().next().size()))); return Math.min( ranges.size() / ranges.values().iterator().next().size(), Math.max(1, hostsInRing.keySet().size() / ranges.values().iterator().next().size())); }### Assistant: @Test public void getPossibleParallelRepairsTest() throws Exception { Map<List<String>, List<String>> map = RepairRunnerTest.threeNodeCluster(); Map<String, String> endpointsThreeNodes = RepairRunnerTest.threeNodeClusterEndpoint(); assertEquals(1, RepairRunner.getPossibleParallelRepairsCount(map, endpointsThreeNodes, DatacenterAvailability.ALL)); map = RepairRunnerTest.sixNodeCluster(); Map<String, String> endpointsSixNodes = RepairRunnerTest.sixNodeClusterEndpoint(); assertEquals(2, RepairRunner.getPossibleParallelRepairsCount(map, endpointsSixNodes, DatacenterAvailability.ALL)); assertEquals(1, RepairRunner.getPossibleParallelRepairsCount(map, endpointsSixNodes, DatacenterAvailability.SIDECAR)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Set<PropertyInfo> getPropertiesByName(String stackName, String version, String serviceName, String propertyName) throws AmbariException { Set<PropertyInfo> properties = serviceName == null ? getStackProperties(stackName, version) : getServiceProperties(stackName, version, serviceName); if (properties.size() == 0) { throw new StackAccessException(\"stackName=\" + stackName + \", stackVersion=\" + version + \", serviceName=\" + serviceName + \", propertyName=\" + propertyName); } Set<PropertyInfo> propertyResult = new HashSet<PropertyInfo>(); for (PropertyInfo property : properties) { if (property.getName().equals(propertyName)) { propertyResult.add(property); } } if (propertyResult.isEmpty()) { throw new StackAccessException(\"stackName=\" + stackName + \", stackVersion=\" + version + \", serviceName=\" + serviceName + \", propertyName=\" + propertyName); } return propertyResult; }### Assistant: @Test public void testGetPropertiesNoName() throws Exception { Set<PropertyInfo> properties = metaInfo.getPropertiesByName(STACK_NAME_HDP, STACK_VERSION_HDP, SERVICE_NAME_HDFS, PROPERTY_NAME); Assert.assertEquals(1, properties.size()); for (PropertyInfo propertyInfo : properties) { Assert.assertEquals(PROPERTY_NAME, propertyInfo.getName()); Assert.assertEquals(FILE_NAME, propertyInfo.getFilename()); } try { metaInfo.getPropertiesByName(STACK_NAME_HDP, STACK_VERSION_HDP, SERVICE_NAME_HDFS, NON_EXT_VALUE); } catch (StackAccessException e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting protected static boolean impliesURI(String privilege, String request) { return PathUtils.impliesURI(privilege, request); }### Assistant: @Test public void testImpliesURIPositive() throws Exception { assertTrue(DBWildcardPrivilege.impliesURI(\"hdfs: \"hdfs: assertTrue(DBWildcardPrivilege.impliesURI(\"hdfs: \"hdfs: assertTrue(DBWildcardPrivilege.impliesURI(\"file: \"file: assertTrue(DBWildcardPrivilege.impliesURI(\"file: \"file: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Duration parse(final String duration) { final Matcher matcher = pattern.matcher(duration); final long value; if (!matcher.find()) { throw new DateTimeParseException(\"Invalid time duration string.\", duration, 0); } value = Long.parseLong(matcher.group(1)); if (null == matcher.group(2)) { return Duration.ofMillis(value); } switch (matcher.group(2).toLowerCase()) { case \"d\": return Duration.ofDays(value); case \"h\": return Duration.ofHours(value); case \"m\": return Duration.ofMinutes(value); case \"s\": return Duration.ofSeconds(value); default: return Duration.ofMillis(value); } }### Assistant: @Test public void testParseDefaultsToMilliseconds() { Assert.assertEquals(500, parse(\"500\").toMillis()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public EdDsaSigner getSigner() { return new Ed25519Signer(algorithm, this); }### Assistant: @Test public void success_GetSigner() { SchemeProvider schemeProvider = new Ed25519ctxSchemeProvider(HashAlgorithm.SHAKE_256); assertNotNull(schemeProvider.getSigner()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getAnyText( ISORecord r, AnyText anyText ) { String anyTextString = null; if ( anyText == null || anyText.getCore() != null ) { StringBuilder sb = new StringBuilder(); for ( String s : r.getAbstract() ) { sb.append( s ).append( STOPWORD ); } for ( String f : r.getFormat() ) { sb.append( f ).append( STOPWORD ); } if ( r.getIdentifier() != null ) { sb.append( r.getIdentifier() ).append( STOPWORD ); } if ( r.getLanguage() != null ) { sb.append( r.getLanguage() ).append( STOPWORD ); } if ( r.getModified() != null ) { sb.append( r.getModified() ).append( STOPWORD ); } for ( String f : r.getRelation() ) { sb.append( f ).append( STOPWORD ); } for ( String f : r.getTitle() ) { sb.append( f ).append( STOPWORD ); } if ( r.getType() != null ) { sb.append( r.getType() ).append( STOPWORD ); } for ( String f : r.getSubject() ) { sb.append( f ).append( STOPWORD ); } sb.append( r.isHasSecurityConstraints() ).append( STOPWORD ); for ( String f : r.getRights() ) { sb.append( f ).append( STOPWORD ); } if ( r.getContributor() != null ) { sb.append( r.getContributor() ).append( STOPWORD ); } if ( r.getPublisher() != null ) { sb.append( r.getPublisher() ).append( STOPWORD ); } if ( r.getSource() != null ) { sb.append( r.getSource() ).append( STOPWORD ); } if ( r.getCreator() != null ) { sb.append( r.getCreator() ).append( STOPWORD ); } if ( r.getParentIdentifier() != null ) { sb.append( r.getParentIdentifier() ).append( STOPWORD ); } anyTextString = sb.toString(); } else if ( anyText.getAll() != null ) { StringBuilder sb = new StringBuilder(); try { XMLStreamReader xmlStream = r.getAsXMLStream(); while ( xmlStream.hasNext() ) { xmlStream.next(); if ( xmlStream.getEventType() == XMLStreamConstants.CHARACTERS && !xmlStream.isWhiteSpace() ) { sb.append( xmlStream.getText() ).append( STOPWORD ); } } } catch ( XMLStreamException e ) { e.printStackTrace(); } anyTextString = sb.toString(); } else if ( anyText.getCustom() != null ) { List<String> xpathList = anyText.getCustom().getXPath(); if ( xpathList != null && !xpathList.isEmpty() ) { XPath[] path = new XPath[xpathList.size()]; int counter = 0; for ( String x : xpathList ) { path[counter++] = new XPath( x, ns ); } anyTextString = generateAnyText( r, path ).toString(); } } else { anyTextString = \"\"; } return anyTextString; }### Assistant: @Test public void testAnyTextElement_CORE() throws JAXBException { TimeZone.setDefault( TimeZone.getTimeZone( \"GMT\" ) ); LOG.info( \"START Test: test anyText element 'CORE' for one metadataRecord \" ); ISORecord rec = (ISORecord) MetadataRecordFactory.create( ( new XMLAdapter( TstConstants.tst_10 ) ).getRootElement() ); String anyText = AnyTextHelper.getAnyText( rec, getConfig( TstConstants.configURL_ANYTEXT_CORE ).getAnyText() ); String expected = \"Raw (source) image from CwRS campaigns. RAW ECW d0e5c36eec7f473b91b8b249da87d522 eng 2007-01-23 SPOT 5 RAW 2007-01-23T10:25:14 dataset SPOT 5 PATH 50 ROW 242 Orthoimagery imageryBaseMapsEarthCover true otherRestrictions license Raw (Source) image as delivered by image provider. \"; Assert.assertEquals( \"anyText CORE: \", expected, anyText ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Keep @Api(2.0) @NonNull public static Builder builder() { return new Builder(); }### Assistant: @Test public void thatCanSearchToFilterTargetRelationships() { SearchQuery query = SearchQuery.builder() .addRelatedInstances(Relationship.create(\"fieldname\", \"1\")) .addRelatedInstances(Relationship.create(\"fieldname\", \"2\")) .build(); assertThat(query.mRelationships.size()).isEqualTo(2); assertTrue(query.mRelationships.get(0).getFieldName().equals(\"fieldname\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equalsByPrimaryKeys(Object do1, Object do2) { return selectAdapter(do1).equalsByPrimaryKeys(do1, do2); }### Assistant: @Test public void testEqualsByPrimaryKeys_Legacy() throws Exception { enableLegacy(); Object object1 = newLegacyObject(); Object object2 = newLegacyObject(); lda.equalsByPrimaryKeys(object1, object2); verify(knsLegacyDataAdapter).equalsByPrimaryKeys(eq(object1), eq(object2)); verifyZeroInteractions(kradLegacyDataAdapter); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Boolean generateColumn() { if (isNewColumn()) { presenter.appendColumn(editingCol()); } else { try { presenter.updateColumn(originalCol(), editingCol()); } catch (ModelSynchronizer.VetoException veto) { wizard.showGenericVetoError(); return false; } } return true; }### Assistant: @Test public void testGenerateColumn() { final ActionCol52 actionCol52 = mock(ActionCol52.class); final ActionWrapper actionWrapper = mock(ActionWrapper.class); doReturn(actionCol52).when(actionWrapper).getActionCol52(); doReturn(actionWrapper).when(plugin).editingWrapper(); final Boolean success = plugin.generateColumn(); assertTrue(success); verify(presenter).appendColumn(actionCol52); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @PluginBuilderFactory public static Log4j2BatchLimitBackoffPolicy.Builder newBuilder() { return new Log4j2BatchLimitBackoffPolicy.Builder(); }### Assistant: @Test public void builderThrowsIfMaxBatchesInFlightEqualsZero() { Log4j2BatchLimitBackoffPolicy.Builder builder = Log4j2BatchLimitBackoffPolicy.newBuilder() .withMaxBatchesInFlight(0); expectedException.expect(ConfigurationException.class); expectedException.expectMessage(\"maxBatchesInFlight must be higher than 0 for \" + BatchLimitBackoffPolicy.class.getSimpleName()); builder.build(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void updateCommit(Commit commit, Model additions, Model deletions, RepositoryConnection conn) { Resource resource = commit.getGenerated_resource().stream().findFirst() .orElseThrow(() -> new IllegalArgumentException(\"Commit does not have a Revision.\")); Revision revision = revisionFactory.getExisting(resource, commit.getModel()) .orElseThrow(() -> new IllegalStateException(\"Could not retrieve expected Revision.\")); updateCommit(commit.getResource(), revision, additions, deletions, conn); }### Assistant: @Test public void updateCommitWithResourceWithoutDeletionsSetTest() { thrown.expect(IllegalStateException.class); thrown.expectMessage(\"Deletions not set on Commit \" + COMMIT_NO_DELETIONS_IRI); try (RepositoryConnection conn = repo.getConnection()) { service.updateCommit(COMMIT_NO_DELETIONS_IRI, MODEL_FACTORY.createModel(), MODEL_FACTORY.createModel(), conn); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public NetworkInterface getNetworkInterface() { return networkInterface; }### Assistant: @Test public void getNetworkInterfaceShouldReturnNetworkInterfaceFromConstructor() { assertSame(networkInterface, networkInterfaceInfo.getNetworkInterface()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isValidElement(Element element) { final String sv = XMLUtil.getAttributeValueWithDefault(element, null, this.name); final E v = (sv == null) ? null : convertValue(sv); return v == this.value || (v != null && v.equals(this.value)); }### Assistant: @Test public void isValidElement_invalid() { Element element = mock(Element.class); when(element.getAttribute(anyString())).then((inv) -> { if (this.name.equals(inv.getArgument(0))) { return UUID.randomUUID().toString(); } fail(\"Invalid attribute name\"); return null; }); assertFalse(this.constraint.isValidElement(element)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void abbreviate(@NonNull File trackFileGz, @NonNull File abbrvFile) { final long startTime = System.currentTimeMillis(); try (BufferedReader br = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(trackFileGz)), StandardCharsets.UTF_8))) { try (FileWriter writer = new FileWriter(abbrvFile)) { boolean firstLine = true; String line; while ((line = br.readLine()) != null) { if (firstLine) { firstLine = false; writer.write(line); writer.write('\\n'); } else if (!line.contains(\",grv,\") && !line.contains(\",rot,\") && !line.contains(\",acc,\")) { writer.write(line); writer.write('\\n'); } } } } catch (EOFException e) { Log.e(TAG, \"Premature end of gzip track file \" + trackFileGz + \" to \" + abbrvFile + \"\\n\" + e); } catch (IOException e) { Log.e(TAG, \"Error abbreviated track data from \" + trackFileGz + \" to \" + abbrvFile, e); } Log.i(TAG, \"Abbreviated track \" + (trackFileGz.length() >> 10) + \"kb -> \" + (abbrvFile.length() >> 10) + \"kb in \" + (System.currentTimeMillis() - startTime) + \"ms\"); }### Assistant: @Test public void abbreviate() throws IOException { File in = FileUtil.makeFileGz(\"time,sensor,x,y,z\\n,gps,1,2,3\\n,alt,4,5,6\\n,grv,7,8,9\"); File out = File.createTempFile(\"abbrv-out\", \".csv\"); TrackAbbrv.abbreviate(in, out); assertEquals(40, out.length()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> Optional<T> min(Iterator<T> iter, Comparator<T> comparator) { T x = null; while(iter.hasNext()) { T elt = iter.next(); if ( x == null ) x = elt; else { int cmp = comparator.compare(x, elt); if ( cmp > 0 ) x = elt; } } return Optional.ofNullable(x); }### Assistant: @Test public void min2() { Optional<String> x = Iter.min(data(\"2\"), String::compareTo); assertTrue(x.isPresent()); assertEquals(\"2\", x.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ObjectOutput serialize(URL url, OutputStream out) throws IOException { return new FstObjectOutput(out); }### Assistant: @Test public void testSerialize() throws IOException { ObjectOutput objectOutput = fstSerialization.serialize(null, mock(OutputStream.class)); assertThat(objectOutput, Matchers.<ObjectOutput>instanceOf(FstObjectOutput.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void handleMethodAnnotation(SocketTimeout annotation, MethodConfigBuilder builder) { builder.setSocketTimeout(annotation.value()); }### Assistant: @Test public void handleMethodAnnotationShouldSetSocketTimeout() throws Exception { when(mockAnnotation.value()).thenReturn(12); toTest.handleMethodAnnotation(mockAnnotation, mockMethodConfigBuilder); verify(mockAnnotation).value(); verify(mockMethodConfigBuilder).setSocketTimeout(12); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Path safeCreateDirectory(Path path, boolean withParents) throws IOException { while (!Files.exists(path)) { try { LOGGER.info(\"Creating attachment download path {}.\", path); return withParents ? Files.createDirectories(path) : Files.createDirectory(path); } catch (FileAlreadyExistsException e) { LOGGER.debug(\"Concurrent creation of directory {}. Ignoring exception.\", path); } } if (!Files.isDirectory(path)) { throw new FileAlreadyExistsException(path.toString()); } return path; }### Assistant: @Test(expected = FileAlreadyExistsException.class) public void testSafeCreateDirectoryExistingFile() throws IOException { Path directory = Files.createDirectories(folder.getRoot().toPath() .resolve(\"this/is/the/directory/for/all/of/my/downloads\")); Path file = Files.write(directory.resolve(\"foo\"), \"some data\".getBytes(StandardCharsets.UTF_8)); SW360AttachmentUtils.safeCreateDirectory(file, false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void migrate(Context context) throws Exception { File accountInfoFile = getAccountInfoPath().toFile(); if (!accountInfoFile.exists() || !accountInfoFile.canRead()) { log.warn(\"Skipping entity import due to missing file {}\", accountInfoFile.getAbsoluteFile()); return; } log.info(\"Importing account file {}\", accountInfoFile.getAbsoluteFile()); Stopwatch stopwatch = Stopwatch.createStarted(); long count = 0L; try (BufferedReader reader = new BufferedReader(new FileReader(accountInfoFile))) { String line; while ((line = reader.readLine()) != null) { try { if (StringUtils.isNotBlank(line)) { updateAccount(line); } ++count; } catch (Exception e) { log.error(\"Unable to load AccountInfo: {}\", line, e); } } } log.info(\"Successfully loaded {} accounts in {}\", count, stopwatch); }### Assistant: @Test void missingFile() throws Exception { migration.migrate(new FlywayContext()); assertThat(entityRepository.count()).isEqualTo(0L); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] toByteArray(final HttpEntity entity) throws IOException { Args.notNull(entity, \"HttpEntity\"); final int contentLength = toContentLength((int) Args.checkContentLength(entity)); try (final InputStream inStream = entity.getContent()) { if (inStream == null) { return null; } final ByteArrayBuffer buffer = new ByteArrayBuffer(contentLength); final byte[] tmp = new byte[DEFAULT_BYTE_BUFFER_SIZE]; int l; while ((l = inStream.read(tmp)) != -1) { buffer.append(tmp, 0, l); } return buffer.toByteArray(); } }### Assistant: @Test public void testUnknownLengthContentToByteArray() throws Exception { final byte[] bytes = \"Message content\".getBytes(StandardCharsets.ISO_8859_1); final BasicHttpEntity entity = new BasicHttpEntity(new ByteArrayInputStream(bytes), -1, null); final byte[] bytes2 = EntityUtils.toByteArray(entity); Assert.assertNotNull(bytes2); Assert.assertEquals(bytes.length, bytes2.length); for (int i = 0; i < bytes.length; i++) { Assert.assertEquals(bytes[i], bytes2[i]); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final Pattern or(Pattern p2) { return new OrPattern(this, p2); }### Assistant: @Test public void testOr() { assertEquals(1, Patterns.hasAtLeast(1).or(Patterns.hasAtLeast(2)).match(\"abc\", 0, 2)); assertEquals(1, Patterns.hasAtLeast(1).or(Patterns.hasAtLeast(2)).match(\"abc\", 0, 1)); assertEquals(0, Patterns.NEVER.or(Patterns.ALWAYS).match(\"abc\", 0, 0)); assertEquals(MISMATCH, Patterns.NEVER.or(Patterns.NEVER).match(\"\", 0, 0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CompletionStage<Backfill> backfillCreate(String componentId, String workflowId, String start, String end, int concurrency) { return backfillCreate(componentId, workflowId, start, end, concurrency, null); }### Assistant: @Test public void shouldCreateBackfillFromInput() throws Exception { final BackfillInput backfillInput = BACKFILL_INPUT.builder() .reverse(true) .build(); when(client.send(any(Request.class))).thenReturn(CompletableFuture.completedFuture( response(HTTP_OK, BACKFILL))); final CompletableFuture<Backfill> r = styx.backfillCreate(backfillInput) .toCompletableFuture(); verify(client, timeout(30_000)).send(requestCaptor.capture()); assertThat(r.isDone(), is(true)); final Request request = requestCaptor.getValue(); assertThat(request.url().toString(), is(API_URL + \"/backfills?allowFuture=false\")); assertThat(Json.deserialize(bytesOfRequestBody(request), BackfillInput.class), equalTo(backfillInput)); assertThat(r.isCompletedExceptionally(), is(false)); assertThat(request.method(), is(\"POST\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GetMapping(\"/FanoutSend\") public void fanoutSender() throws Exception { sender.send(); }### Assistant: @Test public void fanoutSender() throws Exception { sender.send(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> JsonCodec<T> jsonCodec(Class<T> type) { requireNonNull(type, \"type is null\"); return new JsonCodec<>(createObjectMapper(), type); }### Assistant: @Test public void testJsonCodec() { JsonCodec<Person> jsonCodec = jsonCodecFactory.jsonCodec(Person.class); Person expected = new Person().setName(\"dain\").setRocks(true); String json = jsonCodec.toJson(expected); Person actual = jsonCodec.fromJson(json); assertEquals(actual, expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean allPrimaryKeyValuesPresentAndNotWildcard(Class<?> boClass, Map<String, String> formProps) { return selectAdapter(boClass).allPrimaryKeyValuesPresentAndNotWildcard(boClass, formProps); }### Assistant: @Test public void testAllPrimaryKeyValuesPresentAndNotWildcard_Legacy() throws Exception { enableLegacy(); lda.allPrimaryKeyValuesPresentAndNotWildcard(Legacy.class, new HashMap<String, String>()); verify(knsLegacyDataAdapter).allPrimaryKeyValuesPresentAndNotWildcard(eq(Legacy.class), anyMapOf(String.class, String.class)); verifyZeroInteractions(kradLegacyDataAdapter); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void startProcessing() { DiscoveryEngineAbstract wd = new WeblogDiscoveryEngine(props, es, spark); wd.process(); DiscoveryEngineAbstract od = new OntologyDiscoveryEngine(props, es, spark); od.preprocess(); od.process(); DiscoveryEngineAbstract md = new MetadataDiscoveryEngine(props, es, spark); md.preprocess(); md.process(); LinkageIntegration li = new LinkageIntegration(props, es, spark); li.execute(); DiscoveryEngineAbstract recom = new RecommendEngine(props, es, spark); recom.process(); }### Assistant: @Ignore @Test public final void testStartProcessing() { fail(\"Not yet implemented\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean onStartWith(@NonNull final IntentStarter starter, @NonNull final Intent intent) { return super.onStartWith(starter, Intent.createChooser(intent, dialogTitle)); }### Assistant: @Test public void testOnStartWith() { final ContentIntent contentIntent = new ContentIntentImpl(); contentIntent.input(Uri.EMPTY); contentIntent.dataType(MimeType.TEXT_HTML); final Intent intent = contentIntent.build(context); final IntentStarter mockStarter = mock(IntentStarter.class); contentIntent.onStartWith(mockStarter, intent); verify(mockStarter).startIntent(any(Intent.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static void parseTargetAddress(HttpHost target, Span span) { if (span.isNoop()) return; if (target == null) return; InetAddress address = target.getAddress(); if (address != null) { if (span.remoteIpAndPort(address.getHostAddress(), target.getPort())) return; } span.remoteIpAndPort(target.getHostName(), target.getPort()); }### Assistant: @Test public void parseTargetAddress_IpAndPortFromHost() { when(span.isNoop()).thenReturn(false); when(span.remoteIpAndPort(\"1.2.3.4\", 9999)).thenReturn(true); HttpHost host = new HttpHost(\"1.2.3.4\", 9999); TracingHttpAsyncClientBuilder.parseTargetAddress(host, span); verify(span).isNoop(); verify(span).remoteIpAndPort(\"1.2.3.4\", 9999); verifyNoMoreInteractions(span); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void removeSessionAttribute(String key) { if (key != null && !key.isEmpty()) { Map<String, Object> sessionAttributes = new HashMap<>(getSessionAttributes()); sessionAttributes.remove(key); setSessionAttributes(sessionAttributes); } }### Assistant: @Test public void testRemoveSessionAttribute() throws Exception { Map<String, Object> attributes = new HashMap<String, Object>(); attributes.put(\"foo\", \"bar\"); attributes.put(\"foo2\", \"bar2\"); Map<String, Object> trimmedAttributes = new HashMap<String, Object>(attributes); trimmedAttributes.remove(\"foo2\"); AmbariSessionManager sessionManager = createMock(AmbariSessionManager.class); ClusterImpl cluster = createMockBuilder(ClusterImpl.class). addMockedMethod(\"getSessionManager\"). addMockedMethod(\"getClusterName\"). addMockedMethod(\"getSessionAttributes\"). createMock(); expect(cluster.getSessionManager()).andReturn(sessionManager); expect(cluster.getClusterName()).andReturn(\"c1\"); expect(cluster.getSessionAttributes()).andReturn(attributes); sessionManager.setAttribute(\"cluster_session_attributes:c1\", trimmedAttributes); expectLastCall().once(); replay(sessionManager, cluster); cluster.removeSessionAttribute(\"foo2\"); verify(sessionManager, cluster); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String get(String key) { Objects.requireNonNull(key, \"Key must not be null.\"); PropertyValue value = configEvaluator.evaluateRawValue(key, configurationContext); if(value==null || value.getValue()==null){ return null; } value = PropertyFiltering.applyFilter(value, configurationContext); if(value!=null){ return value.getValue(); } return null; }### Assistant: @Test(expected = NullPointerException.class) public void getDoesNotAcceptNull() { DefaultConfiguration c = new DefaultConfiguration(new MockedConfigurationContext()); c.get((String)null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Pair<Integer, TrackEncryptionBox> parseCommonEncryptionSinfFromParent( ParsableByteArray parent, int position, int size) { int childPosition = position + Atom.HEADER_SIZE; int schemeInformationBoxPosition = C.POSITION_UNSET; int schemeInformationBoxSize = 0; String schemeType = null; Integer dataFormat = null; while (childPosition - position < size) { parent.setPosition(childPosition); int childAtomSize = parent.readInt(); int childAtomType = parent.readInt(); if (childAtomType == Atom.TYPE_frma) { dataFormat = parent.readInt(); } else if (childAtomType == Atom.TYPE_schm) { parent.skipBytes(4); schemeType = parent.readString(4); } else if (childAtomType == Atom.TYPE_schi) { schemeInformationBoxPosition = childPosition; schemeInformationBoxSize = childAtomSize; } childPosition += childAtomSize; } if (C.CENC_TYPE_cenc.equals(schemeType) || C.CENC_TYPE_cbc1.equals(schemeType) || C.CENC_TYPE_cens.equals(schemeType) || C.CENC_TYPE_cbcs.equals(schemeType)) { Assertions.checkArgument(dataFormat != null, \"frma atom is mandatory\"); Assertions.checkArgument(schemeInformationBoxPosition != C.POSITION_UNSET, \"schi atom is mandatory\"); TrackEncryptionBox encryptionBox = parseSchiFromParent(parent, schemeInformationBoxPosition, schemeInformationBoxSize, schemeType); Assertions.checkArgument(encryptionBox != null, \"tenc atom is mandatory\"); return Pair.create(dataFormat, encryptionBox); } else { return null; } }### Assistant: @Test public void testParseCommonEncryptionSinfFromParentIgnoresUnknownSchemeType() { byte[] cencSinf = new byte[] { 0, 0, 0, 24, 115, 105, 110, 102, 0, 0, 0, 16, 115, 99, 104, 109, 0, 0, 0, 0, 88, 88, 88, 88}; assertThat(AtomParsers.parseCommonEncryptionSinfFromParent( new ParsableByteArray(cencSinf), 0, cencSinf.length)).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Route> rulesFor(ResourceClass resource) { Class<?> baseType = resource.getType(); return registerRulesFor(baseType); }### Assistant: @Test public void shouldFindNonAnnotatedNonStaticPublicMethodWithComponentNameInVariableCamelCaseConventionAsURI() throws Exception { List<Route> routes = parser.rulesFor(new DefaultResourceClass(ClientsController.class)); Route route = getRouteMatching(routes, \"/clients/add\"); assertThat(route, canHandle(ClientsController.class, \"add\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @NonNull public static <T> RPLayout<T, DBRPMain<T>> dataBindingRepositoryPresenterOf( @Nullable final Class<T> type) { return new DataBindingRepositoryPresenterCompiler(); }### Assistant: @Test public void shouldRecycleRepositoryPresenterOfResultWithAllRecycling() { when(view.getTag(R.id.agera__rvdatabinding__item_id)).thenReturn(ITEM_ID); final RepositoryPresenter<Result<String>> resultRepositoryPresenter = dataBindingRepositoryPresenterOf(String.class) .layout(LAYOUT_ID) .itemId(ITEM_ID) .handler(HANDLER_ID, HANDLER) .handler(SECOND_HANDLER_ID, SECOND_HANDLER) .onRecycle(CLEAR_ALL) .forResult(); resultRepositoryPresenter.recycle(viewHolder); verify(viewDataBinding).setVariable(ITEM_ID, null); verify(viewDataBinding).setVariable(HANDLER_ID, null); verify(viewDataBinding).setVariable(SECOND_HANDLER_ID, null); verify(viewDataBinding).executePendingBindings(); verifyNoMoreInteractions(viewDataBinding); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void addObserver(LifecycleObserver observer) { State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED; ObserverWithState statefulObserver = new ObserverWithState(observer, initialState); ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver); if (previous != null) { return; } boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent; State targetState = calculateTargetState(observer); mAddingObserverCounter++; while ((statefulObserver.mState.compareTo(targetState) < 0 && mObserverMap.contains(observer))) { pushParentState(statefulObserver.mState); statefulObserver.dispatchEvent(mLifecycleOwner, upEvent(statefulObserver.mState)); popParentState(); targetState = calculateTargetState(observer); } if (!isReentrance) { sync(); } mAddingObserverCounter--; }### Assistant: @Test public void siblingLimitationCheck() { fullyInitializeRegistry(); final TestObserver observer2 = mock(TestObserver.class); final TestObserver observer3 = mock(TestObserver.class); final TestObserver observer1 = spy(new TestObserver() { @Override void onStart() { mRegistry.addObserver(observer2); } @Override void onResume() { mRegistry.addObserver(observer3); } }); mRegistry.addObserver(observer1); InOrder inOrder = inOrder(observer1, observer2, observer3); inOrder.verify(observer1).onCreate(); inOrder.verify(observer1).onStart(); inOrder.verify(observer2).onCreate(); inOrder.verify(observer1).onResume(); inOrder.verify(observer3).onCreate(); inOrder.verify(observer2).onStart(); inOrder.verify(observer2).onResume(); inOrder.verify(observer3).onStart(); inOrder.verify(observer3).onResume(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String checkSql(String sql, DatabaseCategory category) { final boolean isMySQL = category == DatabaseCategory.MySql; List<SQLStatement> sqlStatements = com.alibaba.druid.sql.SQLUtils.parseStatements(sql, isMySQL? JdbcConstants.MYSQL : JdbcConstants.SQL_SERVER); Preconditions.checkArgument(sqlStatements.size() == 1, \"\u8bf7\u4e0d\u8981\u8f93\u5165\u591a\u6761SQL\u8bed\u53e5\"); SQLStatement sqlStatement = sqlStatements.get(0); if(isMySQL) { if(sqlStatement instanceof SQLSelectStatement){ AtomicInteger offset = new AtomicInteger(0); AtomicInteger count = new AtomicInteger(-1); sqlStatement.accept(new SQLASTVisitorAdapter() { @Override public boolean visit(SQLLimit x) { if(x.getOffset() != null){ offset.set(((SQLIntegerExpr)x.getOffset()).getNumber().intValue()); } count.set(((SQLIntegerExpr)x.getRowCount()).getNumber().intValue()); return true; } }); Preconditions.checkArgument(count.get() <= LIMIT_MAX, \"\u8bf7\u4e0d\u8981\u8f93\u5165 limit > \" + LIMIT_MAX); return PagerUtils.limit(sql, JdbcConstants.MYSQL, offset.get(), count.get() == -1 ? LIMIT_MAX : count.get()); } if (sqlStatement instanceof SQLShowTablesStatement) { return sql; } } else { if(sqlStatement instanceof SQLSelectStatement){ AtomicInteger offset = new AtomicInteger(0); AtomicInteger count = new AtomicInteger(-1); sqlStatement.accept(new SQLServerASTVisitorAdapter() { @Override public boolean visit(SQLServerTop x) { count.set(((SQLIntegerExpr)x.getExpr()).getNumber().intValue()); return true; } @Override public boolean visit(SQLServerSelectQueryBlock x) { SQLLimit limit = x.getLimit(); if(limit != null){ if(limit.getOffset() != null){ offset.set(((SQLIntegerExpr)limit.getOffset()).getNumber().intValue()); } if(limit.getRowCount() != null) { count.set(((SQLIntegerExpr) limit.getRowCount()).getNumber().intValue()); } } return true; } }); Preconditions.checkArgument(count.get() <= LIMIT_MAX, \"\u8bf7\u4e0d\u8981\u8f93\u5165 limit > \" + LIMIT_MAX); return PagerUtils.limit(sql, JdbcConstants.SQL_SERVER, offset.get(), count.get() == -1 ? LIMIT_MAX : count.get()); } } throw new IllegalArgumentException(\"\u53ea\u652f\u6301\u67e5\u8be2SQL\u8bed\u53e5\"); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testCheckSQLServerInsert(){ String sql = SQLUtils.checkSql(\"insert into t(id) values(1)\", DatabaseCategory.MySql); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void loadBanner( Context context, CustomEventBannerListener customEventBannerListener, Map<String, Object> localExtras, Map<String, String> serverExtras) { String htmlData; String redirectUrl; String clickthroughUrl; Boolean isScrollable; if (extrasAreValid(serverExtras)) { htmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY)); redirectUrl = serverExtras.get(REDIRECT_URL_KEY); clickthroughUrl = serverExtras.get(CLICKTHROUGH_URL_KEY); isScrollable = Boolean.valueOf(serverExtras.get(SCROLLABLE_KEY)); } else { customEventBannerListener.onBannerFailed(NETWORK_INVALID_STATE); return; } AdConfiguration adConfiguration = AdConfiguration.extractFromMap(localExtras); mHtmlBannerWebView = HtmlBannerWebViewFactory.create(context, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl, adConfiguration); AdViewController.setShouldHonorServerDimensions(mHtmlBannerWebView); mHtmlBannerWebView.loadHtmlResponse(htmlData); }### Assistant: @Test public void loadBanner_shouldPopulateTheHtmlWebViewWithHtml() throws Exception { subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras); assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener); assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse(); assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull(); assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull(); verify(htmlBannerWebView).loadHtmlResponse(responseBody); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> OnSubscribeFunc<T> distinctUntilChanged(Observable<? extends T> source, Comparator<T> equalityComparator) { return new DistinctUntilChanged<T, T>(source, Functions.<T> identity(), equalityComparator); }### Assistant: @Test public void testDistinctUntilChangedWithComparatorAndKeySelectorandTwoSubscriptions() { Observable<String> src = Observable.from(\"a\", \"b\", \"x\", \"aa\", \"bb\", \"c\", \"ddd\"); Observable.create(distinctUntilChanged(src, TO_UPPER_WITH_EXCEPTION, COMPARE_LENGTH)).subscribe(w); InOrder inOrder = inOrder(w); inOrder.verify(w, times(1)).onNext(\"a\"); inOrder.verify(w, times(1)).onNext(\"x\"); Observable.create(distinctUntilChanged(src, TO_UPPER_WITH_EXCEPTION, COMPARE_LENGTH)).subscribe(w2); inOrder.verify(w, times(1)).onNext(\"c\"); inOrder.verify(w, times(1)).onNext(\"ddd\"); inOrder.verify(w, times(1)).onCompleted(); inOrder.verify(w, never()).onNext(anyString()); verify(w, never()).onError(any(Throwable.class)); InOrder inOrder2 = inOrder(w2); inOrder2.verify(w2, times(1)).onNext(\"a\"); inOrder2.verify(w2, times(1)).onNext(\"x\"); inOrder2.verify(w2, times(1)).onNext(\"c\"); inOrder2.verify(w2, times(1)).onNext(\"ddd\"); inOrder2.verify(w2, times(1)).onCompleted(); inOrder2.verify(w2, never()).onNext(anyString()); verify(w2, never()).onError(any(Throwable.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @MainThread @Override public void onReceive(final Context context, Intent intent) { final Context applicationContext = context.getApplicationContext(); CTGeofenceAPI.getLogger().debug(GEOFENCE_LOG_TAG, \"onReceive called after \" + \"device reboot\"); if (intent == null || intent.getAction() == null) { return; } if (intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED)) { if (!Utils.hasPermission(context, Manifest.permission.ACCESS_FINE_LOCATION)) { CTGeofenceAPI.getLogger().debug(CTGeofenceAPI.GEOFENCE_LOG_TAG, \"We don't have ACCESS_FINE_LOCATION permission! Not registering \" + \"geofences and location updates after device reboot\"); return; } if (!Utils.hasBackgroundLocationPermission(context)) { CTGeofenceAPI.getLogger().debug(CTGeofenceAPI.GEOFENCE_LOG_TAG, \"We don't have ACCESS_BACKGROUND_LOCATION permission! not registering \" + \"geofences and location updates after device reboot\"); return; } final PendingResult result = goAsync(); Thread thread = new Thread() { public void run() { try { if (!Utils.initCTGeofenceApiIfRequired(applicationContext)) { finishPendingIntent(result); return; } CTGeofenceAPI.getLogger().info(GEOFENCE_LOG_TAG, \"registering geofences after device reboot\"); GeofenceUpdateTask geofenceUpdateTask = new GeofenceUpdateTask(applicationContext, null); Future<?> futureGeofence = CTGeofenceTaskManager.getInstance() .postAsyncSafely(\"ProcessGeofenceUpdatesOnBoot\", geofenceUpdateTask); try { if (futureGeofence != null) { futureGeofence.get(BROADCAST_INTENT_TIME_MS, TimeUnit.MILLISECONDS); } } catch (TimeoutException e) { CTGeofenceAPI.getLogger().debug(CTGeofenceAPI.GEOFENCE_LOG_TAG, \"Timeout geofence update task execution limit of 3 secs\"); } catch (Exception e) { CTGeofenceAPI.getLogger().debug(CTGeofenceAPI.GEOFENCE_LOG_TAG, \"Exception while executing geofence update task\"); e.printStackTrace(); } CTGeofenceAPI.getLogger().info(GEOFENCE_LOG_TAG, \"registering location updates after device reboot\"); LocationUpdateTask locationUpdateTask = new LocationUpdateTask(applicationContext); Future<?> futureLocation = CTGeofenceTaskManager.getInstance() .postAsyncSafely(\"IntitializeLocationUpdatesOnBoot\", locationUpdateTask); try { if (futureLocation != null) { futureLocation.get(BROADCAST_INTENT_TIME_MS, TimeUnit.MILLISECONDS); } } catch (TimeoutException e) { CTGeofenceAPI.getLogger().debug(CTGeofenceAPI.GEOFENCE_LOG_TAG, \"Timeout location update task execution limit of 3 secs\"); } catch (Exception e) { CTGeofenceAPI.getLogger().debug(CTGeofenceAPI.GEOFENCE_LOG_TAG, \"Exception while executing location update task\"); e.printStackTrace(); } finishPendingIntent(result); } catch (Exception e) { finishPendingIntent(result); CTGeofenceAPI.getLogger().debug(CTGeofenceAPI.GEOFENCE_LOG_TAG, \"Exception while processing Boot receiver intent\"); e.printStackTrace(); } } }; thread.start(); } }### Assistant: @Test public void testOnReceiveWhenIntentIstNull() { CTGeofenceBootReceiver receiver = new CTGeofenceBootReceiver(); CTGeofenceBootReceiver spy = Mockito.spy(receiver); spy.onReceive(application, null); verify(spy, never()).goAsync(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Injector build() throws InstantiationException { final File configFile = configFileLocation.toFile(); final Properties properties = loadProperties(INTERNAL_LOGGER, configFile); overriddenParams.forEach(properties::setProperty); final Set<Class<?>> allInjectableTypes = unmodifiableSet( injectables.values().stream() .flatMap(List::stream) .map(Injectable::get) .collect(toSet()) ); final Set<Injectable<?>> injectablesSet = unmodifiableSet( injectables.values().stream() .flatMap(List::stream) .collect(toCollection((Supplier<Set<Injectable<?>>>) LinkedHashSet::new)) ); final DependencyGraph graph = DependencyGraph.create(injectablesSet.stream().map(Injectable::get), this::proxyFor); final Map<Class<?>, Object> instanceMap = injectablesSet.stream() .map(Injectable::get) .collect(toMap( Function.identity(), i -> UNINSTANTIATED, (a, b) -> a, LinkedHashMap::new )); INTERNAL_LOGGER.debug(String.format(\"Creating %d injectable instances.\", injectablesSet.size())); INTERNAL_LOGGER.debug(HORIZONTAL_LINE); final Set<Injectable<?>> injectablesLeft = new LinkedHashSet<>(injectablesSet); while (!injectablesLeft.isEmpty()) { tryToCreateInstances(properties, allInjectableTypes, instanceMap, injectablesLeft); } final LinkedList<Object> instances = instancesSoFarInReversedOrder(instanceMap); instanceMap.clear(); final Injector injector = new InjectorImpl( injectablesSet, unmodifiableList(instances), properties, classLoader, graph, this ); final ClassMapper classMapper = new ClassMapper() { @Override public <T> T apply(Class<T> type) { return findIn( type, injector, instances, true ); } @Override public <T> T applyOrNull(Class<T> type) { return findIn( type, injector, instances, false ); } }; instances.forEach(this::assertAnnotationsCorrect); instances.forEach(instance -> setAutoInjectedFields(instance, instances, injector)); executions.stream() .map(builder -> builder.build(graph)) .forEachOrdered(execution -> { final DependencyNode node = graph.get(execution.getType()); node.getExecutions().add(execution); }); final AtomicBoolean hasAnythingChanged = new AtomicBoolean(); final AtomicInteger nextState = new AtomicInteger(0); while (nextState.get() <= State.STARTED.ordinal()) { handleNextState(graph, instances, injector, classMapper, hasAnythingChanged, nextState); } INTERNAL_LOGGER.debug(HORIZONTAL_LINE); INTERNAL_LOGGER.debug( \"| %-79s |\", \"All \" + instances.size() + \" components have been configured!\" ); INTERNAL_LOGGER.debug(HORIZONTAL_LINE); return injector; }### Assistant: @Test void construct2() throws InstantiationException { final InjectorBuilder builder = new InjectorBuilderImpl(InjectorBuilderImpl.class.getClassLoader()); final Injector injector = builder.build(); assertEquals(0, injector.injectables().count()); assertEquals(InjectorBuilderImpl.class.getClassLoader(), injector.classLoader()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final void flush(ChannelHandlerContext ctx) { flushNeeded = false; super.flush(ctx); }### Assistant: @Ignore(\"not supported anymore atm\") @Test public void cancellingWritesBeforeFlush() { LastInboundHandler inboundHandler = streamActiveAndWriteHeaders(inboundStream); Channel childChannel = inboundHandler.channel(); Http2HeadersFrame headers1 = new DefaultHttp2HeadersFrame(new DefaultHttp2Headers()); Http2HeadersFrame headers2 = new DefaultHttp2HeadersFrame(new DefaultHttp2Headers()); ChannelPromise writePromise = childChannel.newPromise(); childChannel.write(headers1, writePromise); childChannel.write(headers2); assertTrue(writePromise.cancel(false)); childChannel.flush(); Http2HeadersFrame headers = parentChannel.readOutbound(); assertSame(headers, headers2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> Serializer from(T object) { return from(object, null); }### Assistant: @Test public void whenThereIsAFormatGivenShouldUseCorrectSerializerWithAlias() throws Exception { when(formatResolver.getAcceptFormat()).thenReturn(\"xml\"); when(serialization.accepts(\"xml\")).thenReturn(true); Object object = new Object(); representation.from(object, \"Alias!\"); verify(serialization).from(object, \"Alias!\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public VirtualProcedure addVirtualProcedure( final UnitOfWork transaction, final String procedureName ) throws KException { return RelationalModelFactory.createVirtualProcedure( transaction, getRepository(), this, procedureName ); }### Assistant: @Test( expected = IllegalArgumentException.class ) public void shouldFailAddingNullVirtualProcedureName() throws Exception { this.model.addVirtualProcedure( getTransaction(), null ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void target(List<AnyOfType> anyOfList) { if (LOGGER.isTraceEnabled()) { LOGGER.trace(ENTER); } if (anyOfList == null) { return; } Iterator<AnyOfType> iterAnyOf = anyOfList.iterator(); StringBuilder targetInHuman = new StringBuilder(); while (iterAnyOf.hasNext()) { AnyOfType anyOf = iterAnyOf.next(); List<AllOfType> allOfList = anyOf.getAllOf(); Iterator<AllOfType> iterAllOf = allOfList.iterator(); while (iterAllOf.hasNext()) { AllOfType allOf = iterAllOf.next(); List<MatchType> matchList = allOf.getMatch(); Iterator<MatchType> iterMatch = matchList.iterator(); if (matchList.size() > 1) { targetInHuman.append(\"(\"); } while (iterMatch.hasNext()) { MatchType match = iterMatch.next(); StdAttribute attribute = null; AttributeValueType value = match.getAttributeValue(); String attributeDataType; if (match.getAttributeDesignator() != null && value != null) { AttributeDesignatorType designator = match.getAttributeDesignator(); attribute = new StdAttribute(new IdentifierImpl(designator.getCategory()), new IdentifierImpl(designator.getAttributeId()), new StdAttributeValue<List<?>>(new IdentifierImpl(value.getDataType()), value.getContent()), designator.getIssuer(), false); attributeDataType = designator.getDataType(); } else if (match.getAttributeSelector() != null && value != null) { AttributeSelectorType selector = match.getAttributeSelector(); attribute = new StdAttribute(new IdentifierImpl(selector.getCategory()), new IdentifierImpl(selector.getContextSelectorId()), new StdAttributeValue<List<?>>(new IdentifierImpl(value.getDataType()), value.getContent()), null, false); attributeDataType = selector.getDataType(); } else { LOGGER.warn(\"NULL designator/selector or value for match.\"); attributeDataType = \"NA\"; } String functionName = getHumanFunction(match.getMatchId()); if (attribute != null) { String succintIdentifier = extractLastIdentifier( attribute.getCategory().stringValue(), \":\") + \":\" + extractLastIdentifier(attribute.getAttributeId().stringValue(), \":\"); AttributeIdentifiers ai = new AttributeIdentifiers(attribute.getCategory().stringValue(), attributeDataType, attribute.getAttributeId().stringValue()); this.attributeIdentifiersMap.put(succintIdentifier, ai); targetInHuman.append(\"<i><a href=\\\"#\" + succintIdentifier + \"\\\">\" + succintIdentifier + \"</a></i> \" + functionName + \" \"); int numAttributes = attribute.getValues().size(); int count = 0; for (AttributeValue<?> v : attribute.getValues()) { count++; if (v.getValue() instanceof Collection<?>) { Collection<?> collectionValues = (Collection<?>) v.getValue(); int numValues = collectionValues.size(); int countValues = 0; for (Object o : collectionValues) { countValues++; targetInHuman.append(\" <I>\" + o + \"</I>\"); if (countValues < numValues) { targetInHuman.append(\", or\"); } } } else { targetInHuman.append(\" <I>\" + v.getValue() + \"</I>\"); if (count < numAttributes) { targetInHuman.append(\", or \"); } } } } if (iterMatch.hasNext()) { targetInHuman.append(\" and \"); } } if (matchList.size() > 1) { targetInHuman.append(\")\"); } } if (iterAllOf.hasNext()) { targetInHuman.append(\" or \"); } } if (iterAnyOf.hasNext()) { targetInHuman = new StringBuilder(); targetInHuman.append(\"(\" + targetInHuman + \")\" + \" or \"); } else { if (anyOfList.size() > 1) { targetInHuman.append(\")\"); } } htmlOut.println(targetInHuman); }### Assistant: @Test public void testHtmlProcessorTarget() { PolicySetType mockPolicySetType = Mockito.mock(PolicySetType.class); processor = new HtmlProcessor(temp, mockPolicySetType); processor.target(null); AnyOfType mockAnyOfType = Mockito.mock(AnyOfType.class); List<AnyOfType> anyOfList = new ArrayList<AnyOfType>(); anyOfList.add(mockAnyOfType); anyOfList.add(mockAnyOfType); AllOfType mockAllOfType = Mockito.mock(AllOfType.class); List<AllOfType> allOfTypeList = new ArrayList<AllOfType>(); allOfTypeList.add(mockAllOfType); allOfTypeList.add(mockAllOfType); MatchType mockMatchType = Mockito.mock(MatchType.class); List<MatchType> matchTypeList = new ArrayList<MatchType>(); matchTypeList.add(mockMatchType); matchTypeList.add(mockMatchType); AttributeValueType mockAttrValType = Mockito.mock(AttributeValueType.class); AttributeDesignatorType mockAttrDesType = Mockito.mock(AttributeDesignatorType.class); AttributeSelectorType mockAttrSelType = Mockito.mock(AttributeSelectorType.class); List<Object> contentList = new ArrayList<Object>(); when(mockAnyOfType.getAllOf()).thenReturn(allOfTypeList); when(mockAllOfType.getMatch()).thenReturn(matchTypeList); when(mockMatchType.getAttributeValue()).thenReturn(mockAttrValType); when(mockMatchType.getMatchId()).thenReturn(XACML1.ID_FUNCTION_STRING_EQUAL.stringValue()); when(mockMatchType.getAttributeDesignator()).thenReturn(mockAttrDesType); when(mockAttrValType.getDataType()).thenReturn(\"\"); when(mockAttrValType.getContent()).thenReturn(contentList); when(mockAttrDesType.getCategory()).thenReturn(\"\"); when(mockAttrDesType.getAttributeId()).thenReturn(\"\"); when(mockAttrDesType.getIssuer()).thenReturn(\"\"); when(mockAttrDesType.getDataType()).thenReturn(\"\"); processor.target(anyOfList); verify(mockAnyOfType, atLeast(1)).getAllOf(); verify(mockAllOfType, atLeast(1)).getMatch(); verify(mockMatchType, atLeast(1)).getAttributeValue(); verify(mockMatchType, atLeast(1)).getMatchId(); verify(mockMatchType, atLeast(1)).getAttributeDesignator(); verify(mockAttrValType, atLeast(1)).getDataType(); verify(mockAttrValType, atLeast(1)).getContent(); verify(mockAttrDesType, atLeast(1)).getCategory(); verify(mockAttrDesType, atLeast(1)).getAttributeId(); verify(mockAttrDesType, atLeast(1)).getIssuer(); verify(mockAttrDesType, atLeast(1)).getDataType(); when(mockMatchType.getAttributeDesignator()).thenReturn(null); when(mockMatchType.getAttributeSelector()).thenReturn(mockAttrSelType); when(mockAttrSelType.getCategory()).thenReturn(\"\"); when(mockAttrSelType.getContextSelectorId()).thenReturn(\"\"); when(mockAttrSelType.getDataType()).thenReturn(\"\"); processor.target(anyOfList); verify(mockMatchType, atLeast(1)).getAttributeDesignator(); verify(mockMatchType, atLeast(1)).getAttributeSelector(); verify(mockAttrSelType, atLeast(1)).getCategory(); verify(mockAttrSelType, atLeast(1)).getContextSelectorId(); verify(mockAttrSelType, atLeast(1)).getDataType(); when(mockMatchType.getAttributeDesignator()).thenReturn(null); when(mockMatchType.getAttributeSelector()).thenReturn(null); processor.target(anyOfList); verify(mockMatchType, atLeast(1)).getAttributeDesignator(); verify(mockMatchType, atLeast(1)).getAttributeSelector(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final RawLocationReference decodeData(final LocationReference lr) throws PhysicalFormatException { Object data = lr.getLocationReferenceData(); if (!(data instanceof OpenLR)) { throw new OpenLRXMLException(XMLErrorType.DATA_ERROR, \"incorrect data class\"); } OpenLR xmlData = (OpenLR) data; String id = xmlData.getLocationID(); XMLLocationReference xmlLoc = xmlData.getXMLLocationReference(); if (xmlLoc == null) { throw new OpenLRXMLException(XMLErrorType.BINARY_DATA_ONLY, \"cannot decode binary string using xml package\"); } LineLocationReference lineLoc = xmlLoc.getLineLocationReference(); PointLocationReference pointLoc = xmlLoc.getPointLocationReference(); AreaLocationReference areaLoc = xmlLoc.getAreaLocationReference(); if (lineLoc == null && pointLoc == null && areaLoc == null) { throw new OpenLRXMLException(XMLErrorType.DATA_ERROR, \"no location reference\"); } RawLocationReference rawLocRef = null; if (lineLoc != null) { LineDecoder decoder = new LineDecoder(); rawLocRef = decoder.decodeData(id, lineLoc); } else if (pointLoc != null) { GeoCoordinate gCoord = pointLoc.getGeoCoordinate(); PointAlongLine pal = pointLoc.getPointAlongLine(); PoiWithAccessPoint palwap = pointLoc.getPoiWithAccessPoint(); if (gCoord == null && pal == null && palwap == null) { throw new OpenLRXMLException(XMLErrorType.DATA_ERROR, \"no point location found\"); } if (gCoord != null) { GeoCoordDecoder decoder = new GeoCoordDecoder(); rawLocRef = decoder.decodeData(id, gCoord); } else if (pal != null) { PointAlongDecoder decoder = new PointAlongDecoder(); rawLocRef = decoder.decodeData(id, pal); } else if (palwap != null) { PoiAccessDecoder decoder = new PoiAccessDecoder(); rawLocRef = decoder.decodeData(id, palwap); } } else if (areaLoc != null) { CircleLocationReference circleLoc = areaLoc .getCircleLocationReference(); RectangleLocationReference rectangleLoc = areaLoc .getRectangleLocationReference(); GridLocationReference gridLoc = areaLoc.getGridLocationReference(); PolygonLocationReference polygonLoc = areaLoc .getPolygonLocationReference(); ClosedLineLocationReference closedLineLoc = areaLoc .getClosedLineLocationReference(); if (circleLoc == null && polygonLoc == null && rectangleLoc == null && gridLoc == null && closedLineLoc == null) { throw new OpenLRXMLException(XMLErrorType.DATA_ERROR, \"no area location found\"); } if (circleLoc != null) { CircleDecoder circleDecoder = new CircleDecoder(); rawLocRef = circleDecoder.decodeData(id, circleLoc); } else if (rectangleLoc != null) { RectangleDecoder rectangleDecoder = new RectangleDecoder(); rawLocRef = rectangleDecoder.decodeData(id, rectangleLoc); } else if (gridLoc != null) { GridDecoder gridDecoder = new GridDecoder(); rawLocRef = gridDecoder.decodeData(id, gridLoc); } else if (polygonLoc != null) { PolygonDecoder polygonDecoder = new PolygonDecoder(); rawLocRef = polygonDecoder.decodeData(id, polygonLoc); } else if (closedLineLoc != null) { ClosedLineDecoder closedLineDecoder = new ClosedLineDecoder(); rawLocRef = closedLineDecoder.decodeData(id, closedLineLoc); } } return rawLocRef; }### Assistant: @Test public final void testInvalidLocation() { OpenLRXMLDecoder dec = new OpenLRXMLDecoder(); try { LocationReference lr = new LocationReferenceXmlImpl(\"\", invalidXML, 1); dec.decodeData(lr); fail(\"exception expected\"); } catch (PhysicalFormatException e) { assertNotNull(e); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ModelNode convert(Xml xml) { ModelNode fullConfiguration = new ModelNode(); fullConfiguration.setEmptyList(); for (Xml c : getChildren.apply(xml)) { String extensionId = getName.apply(c); String id = getAttributeValue.apply(c, \"id\"); ModelNode schema = knownExtensionSchemas.get(extensionId); if (schema == null) { LOG.warn(\"Extension '\" + extensionId + \"' doesn't declare a JSON schema but XML contains its configuration. Cannot convert it into\" + \" JSON and will ignore it!\"); continue; } ModelNode config = convert(c, schema); ModelNode instanceConfig = new ModelNode(); instanceConfig.get(\"extension\").set(extensionId); if (id != null) { instanceConfig.get(\"id\").set(id); } instanceConfig.get(\"configuration\").set(config); fullConfiguration.add(instanceConfig); } return fullConfiguration; }### Assistant: @Test public void testBooleanConversion_false() throws Exception { XmlToJson<Node> converter = converter(\"ext\", \"{\\\"type\\\": \\\"boolean\\\"}\"); Node xml = xml(\"<config><ext>false</ext></config>\"); ModelNode config = converter.convert(xml).get(0).get(\"configuration\"); Assert.assertNotNull(config); Assert.assertEquals(ModelType.BOOLEAN, config.getType()); Assert.assertFalse(config.asBoolean()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkAttributeSemantics(PerunSessionImpl perunSession, Member member, Attribute attribute) throws WrongReferenceAttributeValueException { if(attribute.getValue() == null) throw new WrongReferenceAttributeValueException(attribute, \"Member mail can't be null.\"); }### Assistant: @Test(expected = WrongReferenceAttributeValueException.class) public void testCheckNull() throws Exception { System.out.println(\"testCheckNull()\"); attributeToCheck.setValue(null); classInstance.checkAttributeSemantics(session, member, attributeToCheck); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getLastName() { return lastName; }### Assistant: @Test public void testLastName2() { String lName = \"VorsT\"; String expectedLName = \"Vorst\"; voter = new Voter(firstName, lName, genders[0]); assertEquals(expectedLName, voter.getLastName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int validate(final String jobName, final Props serverProps, final Props jobProps, final Collection<String> errors) { final int maxNumCallback = serverProps.getInt( JobCallbackConstants.MAX_CALLBACK_COUNT_PROPERTY_KEY, JobCallbackConstants.DEFAULT_MAX_CALLBACK_COUNT); final int maxPostBodyLength = serverProps.getInt(MAX_POST_BODY_LENGTH_PROPERTY_KEY, DEFAULT_POST_BODY_LENGTH); int totalCallbackCount = 0; for (final JobCallbackStatusEnum jobStatus : JobCallbackStatusEnum.values()) { totalCallbackCount += validateBasedOnStatus(jobProps, errors, jobStatus, maxNumCallback, maxPostBodyLength); } if (logger.isDebugEnabled()) { logger.debug(\"Found \" + totalCallbackCount + \" job callbacks for job \" + jobName); } return totalCallbackCount; }### Assistant: @Test public void postBodyLengthTooLargeTest() { final Props jobProps = new Props(); jobProps.put(\"job.notification.\" + JobCallbackStatusEnum.FAILURE.name().toLowerCase() + \".1.url\", \"http: jobProps.put(\"job.notification.\" + JobCallbackStatusEnum.FAILURE.name().toLowerCase() + \".1.method\", JobCallbackConstants.HTTP_POST); final String postBodyValue = \"abcdefghijklmnopqrstuvwxyz\"; final int postBodyLength = 20; Assert.assertTrue(postBodyValue.length() > postBodyLength); jobProps.put(\"job.notification.\" + JobCallbackStatusEnum.FAILURE.name().toLowerCase() + \".1.body\", postBodyValue); final Props localServerProps = new Props(); localServerProps.put(MAX_POST_BODY_LENGTH_PROPERTY_KEY, postBodyLength); final Set<String> errors = new HashSet<>(); Assert.assertEquals(0, JobCallbackValidator.validate(\"bogusJob\", localServerProps, jobProps, errors)); System.out.println(errors); Assert.assertEquals(1, errors.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Boolean getValue() { return AppiumUIA2Driver .getInstance() .getSessionOrThrow() .shouldUseCompactResponses(); }### Assistant: @Test public void shouldBeAbleToDisableShouldUseCompactResponses() { session.setCapability(SHOULD_USE_COMPACT_RESPONSES.toString(), \"false\"); Assert.assertEquals(false, shouldUseCompactResponses.getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public MonetaryFormat withLocale(Locale locale) { DecimalFormatSymbols dfs = new DecimalFormatSymbols(locale); char negativeSign = dfs.getMinusSign(); char zeroDigit = dfs.getZeroDigit(); char decimalMark = dfs.getMonetaryDecimalSeparator(); return new MonetaryFormat(negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed); }### Assistant: @Test public void withLocale() throws Exception { final Coin value = Coin.valueOf(-1234567890l); assertEquals(\"-12.34567890\", NO_CODE.withLocale(Locale.US).format(value).toString()); assertEquals(\"-12,34567890\", NO_CODE.withLocale(Locale.GERMANY).format(value).toString()); assertEquals(\"-\u0967\u0968.\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966\", NO_CODE.withLocale(new Locale(\"hi\", \"IN\")).format(value).toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected JspCompilationContext createJspCompilationContext(String name, Options opt, ServletContext sctx, JspRuntimeContext jrctx, ClassLoader classLoader) { JspCompilationContext jcctx = new JspCompilationContext(name, opt, sctx, null, jrctx); jcctx.setClassLoader(classLoader); return jcctx; }### Assistant: @Test public void createJspCompilationContext() { final Tomcat90ContainerAdapter adapter = new Tomcat90ContainerAdapter(); JspCompilationContext context = adapter.createJspCompilationContext(\"name\", null, null, null, ClassLoader.getSystemClassLoader()); assertEquals(\"org.apache.jsp.name\", context.getFQCN()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isEmpty() { return id == EMPTY.id; }### Assistant: @Test public void testIsEmpty() { assertThat(RsId.empty().isEmpty(), is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int hashCode() { return new HashCodeBuilder() .append(this.location) .toHashCode(); }### Assistant: @Test public void hashCodeIsRepeatable() { final int hashCode = x.hashCode(); for (int i = 0; i < 10; i++) { assertEquals(\"Hash code is not repeatable\", hashCode, x.hashCode()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String and(String... subqueries) { return junction(HibernateOperator.AND, subqueries); }### Assistant: @Test public void and_one() { String q1 = \"test this\"; assertEquals(q1, translator.and(q1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static BiFunction<HttpRequestBase, HttpResponse, JsonNode> toJson(ObjectMapper mapper) { return (request, response) -> { try (InputStream content = response.getEntity().getContent()) { JsonNode jsonNode = mapper.readTree(content); if (jsonNode == null) { throw new IllegalArgumentException(\"Source should not be empty\"); } return jsonNode; } catch (Exception e) { throw new TDPException(CommonErrorCodes.UNEXPECTED_EXCEPTION, e); } finally { request.releaseConnection(); } }; }### Assistant: @Test public void shouldParseJsonArray() throws Exception { final BiFunction<HttpRequestBase, HttpResponse, Set<String>> extractStatuses = toJson(new ObjectMapper()).andThen(jsonNode -> { final Iterator<JsonNode> elements = jsonNode.elements(); Set<String> statuses = new HashSet<>(); while (elements.hasNext()) { final JsonNode element = elements.next(); statuses.add(element.get(\"status\").asText()); } return statuses; }); final BasicHttpResponse response = buildResponse(); response.setEntity(new StringEntity(\"[{\\\"status\\\":\\\"OK\\\"}, {\\\"status\\\":\\\"OK\\\"}, {\\\"status\\\":\\\"CANCEL\\\"}]\")); final HttpGet request = buildRequest(); final Set<String> statuses = extractStatuses.apply(request, response); assertEquals(2, statuses.size()); assertTrue(statuses.contains(\"OK\")); assertTrue(statuses.contains(\"CANCEL\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static KiePMMLDroolsAST getKiePMMLDroolsAST(final DataDictionary dataDictionary, final Scorecard model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLDroolsType> types) { logger.trace(\"getKiePMMLDroolsAST {} {} {}\", dataDictionary, model, fieldTypeMap); DATA_TYPE targetType = getTargetFieldType(dataDictionary, model); final List<KiePMMLOutputField> outputFields = getOutputFields(model); KiePMMLScorecardModelCharacteristicASTFactory factory = KiePMMLScorecardModelCharacteristicASTFactory.factory(fieldTypeMap, outputFields, targetType); if (model.isUseReasonCodes()) { factory = factory.withReasonCodes(model.getBaselineScore(), REASONCODE_ALGORITHM.byName(model.getReasonCodeAlgorithm().value())); } final List<KiePMMLDroolsRule> rules = factory .declareRulesFromCharacteristics(model.getCharacteristics(), \"\", model.getInitialScore()); return new KiePMMLDroolsAST(types, rules); }### Assistant: @Test public void getKiePMMLDroolsSampleAST() { final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = getFieldTypeMap(samplePmml.getDataDictionary(), samplePmml.getTransformationDictionary(), scorecardModel.getLocalTransformations()); List<KiePMMLDroolsType> types = Collections.emptyList(); KiePMMLDroolsAST retrieved = KiePMMLScorecardModelASTFactory.getKiePMMLDroolsAST(samplePmml.getDataDictionary(), scorecardModel, fieldTypeMap, types); assertNotNull(retrieved); assertEquals(types, retrieved.getTypes()); assertFalse(retrieved.getRules().isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getName() { return \"Bamboo Plugin\"; }### Assistant: @Test public void should_get_name() { assertEquals(\"Bamboo Plugin\", bamboo.getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Address currentAddress(KeyChain.KeyPurpose purpose) { keyChainGroupLock.lock(); try { maybeUpgradeToHD(); return keyChainGroup.currentAddress(purpose); } finally { keyChainGroupLock.unlock(); } }### Assistant: @Test public void basicSpendingFromP2SH() throws Exception { createMarriedWallet(2, 2); myAddress = wallet.currentAddress(KeyChain.KeyPurpose.RECEIVE_FUNDS); basicSpendingCommon(wallet, myAddress, OTHER_ADDRESS, null); createMarriedWallet(2, 3); myAddress = wallet.currentAddress(KeyChain.KeyPurpose.RECEIVE_FUNDS); basicSpendingCommon(wallet, myAddress, OTHER_ADDRESS, null); createMarriedWallet(3, 3); myAddress = wallet.currentAddress(KeyChain.KeyPurpose.RECEIVE_FUNDS); basicSpendingCommon(wallet, myAddress, OTHER_ADDRESS, null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public EcPoint hashToCurve(final String input) { return this.hashToCurve(input.getBytes(StandardCharsets.UTF_8), null); }### Assistant: @Test public void testVector18() { final HmacKeyDerivationFunction hkdf = new HmacKeyDerivationFunction(HmacKeyDerivationFunction.HDFK_SHA512, new byte[0]); final byte[] inputBytes = hkdf.createKey(new byte[] { 0, 1, 2 }, 4096); final PointHasher pointHasher = EcCurve.secp384r1.getPointHasher(); EcPoint result = pointHasher.hashToCurve(inputBytes); System.out.println(\"Test Vector Point: \" + result); EcPoint expected = new EcPoint( \"13574875865813460249138662550698218803344127707850688963302044462592953166902667130065024915236575599853564091775290\", \"8450942680331909847902806980881161384447495168235739504502265930417469323805437311384304845899387819654924561237326\"); Assert.assertEquals(expected, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void visit(NodeContractInput contractInput) { if (shouldCreateContainer(contractInput)) { Container newContainer = contractInputToWidgetMapper.toContainer(contractInput, container.getRows()); ContractInputVisitorImpl containerContractInputVisitor = new ContractInputVisitorImpl(newContainer, contractInputToWidgetMapper); for (ContractInput childInput : contractInput.getInput()) { childInput.accept(containerContractInputVisitor); } if (contractInput.isMultiple() && !contractInput.isReadOnly()) { newContainer.getRows() .add(Collections.<Element> singletonList(contractInputToWidgetMapper.createRemoveButton())); } container.getRows().add(Collections.<Element> singletonList(newContainer)); addButtonBar(contractInput, container); } else { for (ContractInput childInput : contractInput.getInput()) { childInput.accept(this); } } }### Assistant: @Test public void add_a_children_components_embedded_in_a_container_when_visiting_a_node_contract_input() throws Exception { Page page = new Page(); new ContractInputVisitorImpl(page, contractInputToWidgetMapper) .visit((NodeContractInput) ContractInputBuilder.aNodeContractInput(\"employee\").withInput( ContractInputBuilder.aStringContractInput(\"firstName\"), ContractInputBuilder.aStringContractInput(\"lastName\")).build()); assertThat(page.getRows()).hasSize(2); List<Element> firstRow = page.getRows().get(0); assertThat(firstRow).hasSize(1); assertThat(firstRow.get(0)).isInstanceOf(Component.class); assertThat(((Component) firstRow.get(0)).getId()).isEqualTo(\"pbTitle\"); assertThat(firstRow.get(0).getPropertyValues()).contains( entry(ParameterConstants.TEXT_PARAMETER, aInterpolationPropertyValue(\"Employee\"))); List<Element> secondRow = page.getRows().get(1); assertThat(secondRow).hasSize(1); assertThat(secondRow.get(0)).isInstanceOf(Container.class); Container container = (Container) secondRow.get(0); assertThat(container.getRows()).hasSize(2); assertThat(container.getRows().get(0)).hasSize(1); Component firstNameComponent = (Component) container.getRows().get(0).get(0); assertThat(firstNameComponent.getId()).isEqualTo(\"pbInput\"); assertThat(firstNameComponent.getPropertyValues()).contains( entry(ParameterConstants.LABEL_PARAMETER, aInterpolationPropertyValue(\"First Name\"))); Component lastNameComponent = (Component) container.getRows().get(1).get(0); assertThat(lastNameComponent.getId()).isEqualTo(\"pbInput\"); assertThat(lastNameComponent.getPropertyValues()).contains( entry(ParameterConstants.LABEL_PARAMETER, aInterpolationPropertyValue(\"Last Name\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static XMLConfiguration createXmlConfiguration(final String fileName) { try { return new XMLConfiguration(IntegrityUtil.ensure(fileName, \"Must provide a file name\")); } catch (final ConfigurationException configurationException) { throw new RuntimeException(\"Trouble using file name [\" + fileName + \"]\", configurationException); } }### Assistant: @Test(expected = RuntimeException.class) public void test_createXmlConfiguration_nullUrl() { XmlCredentialsUtil.createXmlConfiguration((URL) null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Index addIndex( final UnitOfWork transaction, final String indexName ) throws KException { return RelationalModelFactory.createIndex( transaction, getRepository(), this, indexName ); }### Assistant: @Test( expected = IllegalArgumentException.class ) public void shouldFailAddingEmptyIndexName() throws Exception { this.table.addIndex( getTransaction(), StringConstants.EMPTY_STRING ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean match(SamplingRequest req) { Map<String, String> requestAttributes = req.getAttributes(); for (Map.Entry<String, String> a : attributes.entrySet()) { if (!requestAttributes.containsKey(a.getKey())) { return false; } if (!SearchPattern.wildcardMatch(a.getValue(), requestAttributes.get(a.getKey()))) { return false; } } return SearchPattern.wildcardMatch(url, req.getUrl().orElse(\"\")) && SearchPattern.wildcardMatch(service, req.getService().orElse(\"\")) && SearchPattern.wildcardMatch(method, req.getMethod().orElse(\"\")) && SearchPattern.wildcardMatch(host, req.getHost().orElse(\"\")) && SearchPattern.wildcardMatch(serviceType, req.getServiceType().orElse(\"\")); }### Assistant: @Test void testPartialRequestMismatch() { SamplingRule rule = new SamplingRule() .withAttributes(null) .withHost(\"192.168.1.1\") .withServiceName(\"www.foo.com\") .withHTTPMethod(\"POST\") .withResourceARN(\"arn:aws:service:us-east-1:111111111111:resource\") .withURLPath(\"/bar/123\") .withServiceType(\"AWS::EC2::Instance\"); SamplingRequest req = new SamplingRequest( \"role-arn\", \"arn:aws:service:us-east-1:111111111111:resource\", \"www.bar.com\", null, \"POST\", \"/bar/123\", \"AWS::EC2::Instance\", null ); Matchers m = new Matchers(rule); Assertions.assertFalse(m.match(req)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected static CronSchedule scheduleDefault() { try { final String pattern = ConfigHelp.reference().getString( \"form-field-bundle.scanner-schedule.default-value\"); return new CronSchedule(pattern); } catch (final Exception e) { return null; } }### Assistant: @Test public void testCron() throws Exception { assertNotNull(\"default cron schedule\", TaskManager.scheduleDefault()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getNamespaceUri() { return this.namespaceUri; }### Assistant: @Test public void shouldAllowEmptyNamespaceUriInConstructor() { name = new BasicName(\"\", validLocalName); assertThat(name.getNamespaceUri(), is(\"\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem) { validateUriScheme(connection, dittoHeaders, ACCEPTED_SCHEMES, SECURE_SCHEMES, \"AMQP 0.9.1\"); validateSourceConfigs(connection, dittoHeaders); validateTargetConfigs(connection, dittoHeaders); validatePayloadMappings(connection, actorSystem, dittoHeaders); }### Assistant: @Test public void testValidTargetAddress() { UNDER_TEST.validate(connectionWithTarget(\"ditto/rabbit\"), DittoHeaders.empty(), actorSystem); UNDER_TEST.validate(connectionWithTarget(\"ditto\"), DittoHeaders.empty(), actorSystem); UNDER_TEST.validate(connectionWithTarget(\"ditto/{{thing:id}}\"), DittoHeaders.empty(), actorSystem); UNDER_TEST.validate(connectionWithTarget(\"ditto/{{topic:full}}\"), DittoHeaders.empty(), actorSystem); UNDER_TEST.validate(connectionWithTarget(\"ditto/{{header:x}}\"), DittoHeaders.empty(), actorSystem); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private synchronized void deleteRequestSchedule(RequestScheduleRequest request) throws AmbariException { if (request.getId() == null) { throw new AmbariException(\"Id is a required field.\"); } Clusters clusters = getManagementController().getClusters(); Cluster cluster; try { cluster = clusters.getCluster(request.getClusterName()); } catch (ClusterNotFoundException e) { throw new ParentObjectNotFoundException( \"Attempted to delete a request schedule from a cluster which doesn't \" + \"exist\", e); } RequestExecution requestExecution = cluster.getAllRequestExecutions().get(request.getId()); if (requestExecution == null) { throw new AmbariException(\"Request Schedule not found \" + \", clusterName = \" + request.getClusterName() + \", description = \" + request.getDescription() + \", id = \" + request.getId()); } String username = getManagementController().getAuthName(); LOG.info(\"Disabling Request Schedule \" + \", clusterName = \" + request.getClusterName() + \", id = \" + request.getId() + \", user = \" + username); getManagementController().getExecutionScheduleManager() .deleteAllJobs(requestExecution); requestExecution.updateStatus(RequestExecution.Status.DISABLED); }### Assistant: @Test public void testDeleteRequestSchedule() throws Exception { AmbariManagementController managementController = createMock(AmbariManagementController.class); Clusters clusters = createNiceMock(Clusters.class); Cluster cluster = createNiceMock(Cluster.class); RequestExecution requestExecution = createNiceMock(RequestExecution.class); ExecutionScheduleManager executionScheduleManager = createNiceMock (ExecutionScheduleManager.class); Map<Long, RequestExecution> requestExecutionMap = new HashMap<Long, RequestExecution>(); requestExecutionMap.put(1L, requestExecution); expect(managementController.getAuthName()).andReturn(\"admin\").anyTimes(); expect(managementController.getClusters()).andReturn(clusters).anyTimes(); expect(managementController.getExecutionScheduleManager()).andReturn (executionScheduleManager).anyTimes(); expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes(); expect(cluster.getAllRequestExecutions()).andReturn(requestExecutionMap); replay(managementController, clusters, cluster, executionScheduleManager, requestExecution ); RequestScheduleResourceProvider resourceProvider = getResourceProvider (managementController); AbstractResourceProviderTest.TestObserver observer = new AbstractResourceProviderTest.TestObserver(); ((ObservableResourceProvider) resourceProvider).addObserver(observer); Predicate predicate = new PredicateBuilder().property (RequestScheduleResourceProvider.REQUEST_SCHEDULE_CLUSTER_NAME_PROPERTY_ID) .equals(\"Cluster100\").and().property(RequestScheduleResourceProvider .REQUEST_SCHEDULE_ID_PROPERTY_ID).equals(1L).toPredicate(); resourceProvider.deleteResources(new RequestImpl(null, null, null, null), predicate); ResourceProviderEvent lastEvent = observer.getLastEvent(); Assert.assertNotNull(lastEvent); Assert.assertEquals(Resource.Type.RequestSchedule, lastEvent.getResourceType()); Assert.assertEquals(ResourceProviderEvent.Type.Delete, lastEvent.getType()); Assert.assertEquals(predicate, lastEvent.getPredicate()); Assert.assertNull(lastEvent.getRequest()); verify(managementController, clusters, cluster, executionScheduleManager, requestExecution); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure @Override public final int getChildCount() { return (this.children == null) ? 0 : this.children.size(); }### Assistant: @Test public void getChildCount() { assertEquals(2, this.root.getChildCount()); assertEquals(1, this.child1.getChildCount()); assertEquals(0, this.child2.getChildCount()); assertEquals(0, this.node.getChildCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value=\"/alerts\", method = RequestMethod.GET) @ApiResponses(value={@ApiResponse(code=200, message = \"Returns the latest alarm alerts\")}) public Collection<Alert> getAlerts(@ApiParam(name=\"nbItem\", value=\"number of alerts to return\") @RequestParam(value = \"items\", required = false, defaultValue = \"20\") final int nbItem, @ApiParam(name=\"start\", value=\"starting date\") @RequestParam(value = \"start\", required = false, defaultValue = \"0\") final int start, @ApiParam(name=\"from\") @RequestParam(value = \"from\", required = false) final String from) { Collection<Alert> alerts; if (from != null) { alerts = alertService.getAlerts(from); } else { alerts = alertService.getAlerts(nbItem, start).getValues(); } return alerts; }### Assistant: @Test public void test_getAlerts_with_start_param_and_nbItem_param() throws Exception{ Collection<Alert> values = Arrays.asList(getAlert(\"alert1\"),getAlert(\"alert2\")); Alert.Alerts alerts = new Alert.Alerts(); alerts.setValues(values); when(alertService.getAlerts(anyInt(), anyInt())).thenReturn(alerts); mockMvc.perform(get(\"/alerts\") .param(\"start\",\"1\") .param(\"nbItem\",\"2\") ).andExpect(status().isOk()) .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)) .andExpect(jsonPath(\"$\", hasSize(2))) .andExpect(jsonPath(\"$[0].id\", is(\"alert1\"))) .andExpect(jsonPath(\"$[1].id\", is(\"alert2\"))) ; }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Project create(File file) { if (PROJECT != null) { return PROJECT; } synchronized (FileProjectFactory.class) { if (PROJECT == null) { PROJECT = createInternal(file); } } return PROJECT; }### Assistant: @Test void shouldPrioritizeGradleOverMaven() { URL gradleWithPom = GradleInfoReaderTest.class.getClassLoader().getResource(GRADLE_WITH_POM); File file = Urls.toFile(gradleWithPom); Path root = file.toPath().getParent(); Project project = FileProjectFactory.create(file); assertNotNull(project); BuildInfo info = project.getBuildInfo(); assertNotNull(info); assertEquals(\"gradle\", info.getName()); assertEquals(\"jar\", info.getPackaging()); assertEquals(\"latest\", info.getVersion()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getErrorMessage() { Throwable tmp = getCause(); if (tmp != null) { Throwable t; while (true) { t = tmp.getCause(); if (t == null) { break; } tmp = tmp.getCause(); } return tmp.getMessage(); } return getMessage(); }### Assistant: @Test public void getErrorMessageOneLevel() { Throwable t1 = new AriaddnaException(\"1 \u0443\u0440\u043e\u0432\u0435\u043d\u044c\"); try { throw t1; } catch (AriaddnaException e) { System.out.println(e.getErrorMessage()); } catch (Throwable throwable) { throwable.printStackTrace(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public <I, O> ProcessingStage<I, O> create(Engine engine, Stage.TakeWhile stage) { Predicate<I> predicate = (Predicate<I>) Objects.requireNonNull(stage.getPredicate()); return source -> (Flowable<O>) source.takeWhile(predicate::test); }### Assistant: @Test(expected = NullPointerException.class) public void createWithoutPredicate() { factory.create(null, () -> null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public WebXml parse(InputStream inputStream) { WebXml webXml = new WebXml(); try { DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder(); Document document = documentBuilder.parse(inputStream); XPath xPath = XPathFactory.newInstance().newXPath(); parseAbsoluteOrdering(webXml, xPath, document); parseOrdering(webXml, xPath, document); parseContextParameters(webXml, xPath, document); parseDefaultContextPath(webXml, xPath, document); parseDenyUncoveredHttpMethods(webXml, xPath, document); parseDisplayName(webXml, xPath, document); parseFragmentName(webXml, xPath, document); parseDistributable(webXml, xPath, document); parseErrorPages(webXml, xPath, document); parseFilterMappings(webXml, xPath, document); parseFilters(webXml, xPath, document); parseListeners(webXml, xPath, document); parseLoginConfig(webXml, xPath, document); parseMimeMappings(webXml, xPath, document); parseRequestCharacterEncoding(webXml, xPath, document); parseResponseCharacterEncoding(webXml, xPath, document); parseLocaleEncodingMapping(webXml, xPath, document); processSecurityConstraints(webXml, xPath, document); processSecurityRoles(webXml, xPath, document); parseServletMappings(webXml, xPath, document); parseServlets(webXml, xPath, document); parseSessionConfig(webXml, xPath, document); parseWebApp(webXml, xPath, document); parseWelcomeFiles(webXml, xPath, document); } catch (Throwable t) { LOGGER.log(WARNING, \"Unable to parse web.xml\", t); } return webXml; }### Assistant: @Test void testParseWebXml2() throws Exception { DefaultWebApplication webApplication = new DefaultWebApplication(); webApplication.addResource(new DirectoryResource(new File(\"src/test/webxml/parse2\"))); InputStream inputStream = webApplication.getResourceAsStream(\"WEB-INF/web.xml\"); WebXmlParser parser = new WebXmlParser(); WebXml webXml = parser.parse(inputStream); assertNotEquals(\"/defaultContextPath\", webXml.getDefaultContextPath()); assertFalse(webXml.getDenyUncoveredHttpMethods()); assertNotEquals(\"myServletContextName\", webXml.getDisplayName()); assertFalse(webXml.isDistributable()); assertNotEquals(\"UTF-8\", webXml.getResponseCharacterEncoding()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Result resolve(List<PluginDescriptor> plugins) { dependenciesGraph = new DirectedGraph<>(); dependentsGraph = new DirectedGraph<>(); Map<String, PluginDescriptor> pluginByIds = new HashMap<>(); for (PluginDescriptor plugin : plugins) { addPlugin(plugin); pluginByIds.put(plugin.getPluginId(), plugin); } log.debug(\"Graph: {}\", dependenciesGraph); List<String> sortedPlugins = dependenciesGraph.reverseTopologicalSort(); log.debug(\"Plugins order: {}\", sortedPlugins); Result result = new Result(sortedPlugins); resolved = true; if (sortedPlugins != null) { for (String pluginId : sortedPlugins) { if (!pluginByIds.containsKey(pluginId)) { result.addNotFoundDependency(pluginId); } } } for (PluginDescriptor plugin : plugins) { String pluginId = plugin.getPluginId(); String existingVersion = plugin.getVersion(); List<String> dependents = new ArrayList<>(getDependents(pluginId)); while (!dependents.isEmpty()) { String dependentId = dependents.remove(0); PluginDescriptor dependent = pluginByIds.get(dependentId); String requiredVersion = getDependencyVersionSupport(dependent, pluginId); boolean ok = checkDependencyVersion(requiredVersion, existingVersion); if (!ok) { result.addWrongDependencyVersion(new WrongDependencyVersion(pluginId, dependentId, existingVersion, requiredVersion)); } } } return result; }### Assistant: @Test public void wrongDependencyVersion() { PluginDescriptor pd1 = new DefaultPluginDescriptor() .setPluginId(\"p1\") .setDependencies(\"p2@>=1.5.0 & <1.6.0\"); PluginDescriptor pd2 = new DefaultPluginDescriptor() .setPluginId(\"p2\") .setPluginVersion(\"1.4.0\"); List<PluginDescriptor> plugins = new ArrayList<>(); plugins.add(pd1); plugins.add(pd2); DependencyResolver.Result result = resolver.resolve(plugins); assertFalse(result.getWrongVersionDependencies().isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Expr getCanonicalConstant(Scope scope) { assert !hasCanonicalConstant(scope); throw new RuntimeException(\"No canonical constant for \" + this); }### Assistant: @Test(expected = RuntimeException.class) public void getCanonicalConstant() { VoidType.VOID.getCanonicalConstant(new Scope()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public IntStream sorted() { return this; }### Assistant: @Test void sorted() { assertEqualsApplying(IntStream::sorted); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getSimpleHttpResourcePath(String location) { return getSimpleHttpResourcePath(location, false); }### Assistant: @Test public void queryIgnored() { String path = SchemaResolver .getSimpleHttpResourcePath(\"http: Assert.assertEquals(\"/org/example/schemas/exampleml/exml.xsd\", path); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static AclEntryModified of(final String thingId, final AclEntry aclEntry, final long revision, final DittoHeaders dittoHeaders) { return of(ThingId.of(thingId), aclEntry, revision, dittoHeaders); }### Assistant: @Test(expected = NullPointerException.class) public void tryToCreateInstanceWithNullThingId() { AclEntryModified.of((ThingId) null, TestConstants.Authorization.ACL_ENTRY_OLDMAN, TestConstants.Thing.REVISION_NUMBER, TestConstants.EMPTY_DITTO_HEADERS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String generateNextStationName(Survey survey, Station originatingStation) { String originatingName = originatingStation.getName(); String newUniqueName = advanceNumberIfNotUnique(survey, originatingName); return newUniqueName; }### Assistant: @Test public void testNameAdvancesNumberOnEstablishedBranch() { Survey testSurvey = BasicTestSurveyCreator.createStraightNorthWith1EBranch(); String newName = StationNamer.generateNextStationName( testSurvey, testSurvey.getStationByName(\"5\")); int numberOfStations = testSurvey.getAllStations().size(); Assert.assertEquals(Integer.toString(numberOfStations + 1), newName); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Criteria build(Map<RequestObject, Object> requestParams) { return build(Optional.empty(), requestParams, FieldMapper.of(Maps.newHashMap())); }### Assistant: @Test public void testOfAllOperators() throws Exception { Map<RequestObject, Object> filters = ImmutableMap.of( RequestField.of(\"name\"), ImmutableMap.builder() .put(RequestOperator.of(OperatorType.STARTS_WITH), \"John\") .put(RequestOperator.of(OperatorType.IN), Lists.newArrayList(\"John\", \"Bob\")) .put(RequestOperator.of(OperatorType.LESS_THAN), 4) .put(RequestOperator.of(OperatorType.EQUAL), \"John\") .put(RequestOperator.of(OperatorType.GREATER_THAN), 1) .put(RequestOperator.of(OperatorType.GREATER_THAN_EQUAL), 2) .put(RequestOperator.of(OperatorType.LESS_THAN_EQUAL), 3) .put(RequestOperator.of(OperatorType.NOT_EQUAL), \"Bob\") .put(RequestOperator.of(OperatorType.NOT_IN), Lists.newArrayList(\"Brian\", \"Adam\")) .build() ); Criteria result = requestParamsCriteriaBuilder.build(filters); assertThat(result).isEqualTo(new Criteria().andOperator( Criteria.where(\"name\").regex(\"^John\", \"i\"), Criteria.where(\"name\").in(\"John\", \"Bob\"), Criteria.where(\"name\").lt(4), Criteria.where(\"name\").is(\"John\"), Criteria.where(\"name\").gt(1), Criteria.where(\"name\").gte(2), Criteria.where(\"name\").lte(3), Criteria.where(\"name\").ne(\"Bob\"), Criteria.where(\"name\").nin(\"Brian\", \"Adam\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void updateToolbar(int itemNumber) throws IllegalStateException { if (itemNumber == ZERO) { showDefaultToolbar(); } else if (itemNumber > ZERO) { showMultiChoiceToolbar(); } updateToolbarTitle(itemNumber); }### Assistant: @Test public void testGivenOneItemSelectedWhenUpdateToolbarAndClickOnIconPerformedThenListenerInterfaceClick() throws Exception { int itemSelected = 1; mCut.updateToolbar(itemSelected); verify(mMockToolbar, times(1)).setNavigationOnClickListener(any(View.OnClickListener.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int[] convertCodePointsToSortedIntArrayNoDuplicates(String line, String range) { if (Strings.isNullOrEmpty(line)) line = range; if (Strings.isNullOrEmpty(line)) throw new IllegalArgumentException(\"Nothing to work on\"); String[] items = line.split(\"\\\\s*,\\\\s*\"); SortedSet<Integer> treeSetOfInts = new TreeSet<>(); for (String item : items) { if (item.contains(\"-\")) { int[] temp = convertDashSeparatedValuesToIntArray(item); for (int t : temp) { treeSetOfInts.add(t); } } else { try { treeSetOfInts.add(Integer.parseInt(item)); } catch (NumberFormatException nfe) { } } } int[] arrayOfInts = convertIntegerSetToIntArray(treeSetOfInts); return arrayOfInts; }### Assistant: @Test(expected = IllegalArgumentException.class) public void testConvertCodePointsToSortedIntArrayNoDuplicatesBothNull() throws Exception { Helper.convertCodePointsToSortedIntArrayNoDuplicates(null, null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String removeTypeParameter(String name) { int tpIdx = name.indexOf('<'); if (tpIdx >= 0) { final int last = name.lastIndexOf('>'); String fst = name.substring(0, tpIdx); String sec = name.substring(last + 1); name = fst + sec; } return name; }### Assistant: @Test public void removeTypeParameter1() throws Exception { String name = \"java.util.Map<K, V>\"; final String s = ClassNameUtils.removeTypeParameter(name); assertEquals(\"java.util.Map\", s); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public NetworkConfiguration getNetworkConfiguration() { return loader.getConf().getNetworkConfiguration(); }### Assistant: @Test (dependsOnMethods=\"checkConfigurationLoaderNetwork\") public void checkConfigurationLoaderNetworkOutbound () { NetworkConfiguration network = conf.getNetworkConfiguration (); checkBounds (network.getOutbound (), \"outbound channel\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String[] evaluate(String[] words, String pattern) { if (words == null || pattern == null) { throw new IllegalArgumentException(\"You can't pass null objects as input.\"); } List<String> result = new ArrayList<String>(); for (String word : words) { if (matchDotRegularExpression(word, pattern)) { result.add(word); } } return result.toArray(new String[result.size()]); }### Assistant: @Test public void shouldReturnAnEmptyArrayIfTheArrayIsEmpty() { String pattern = \"p.d\"; String[] words = { }; String[] result = dotRegularExpression.evaluate(words, pattern); assertEquals(0, result.length); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Vector3f subtract(Vector3f vec) { return new Vector3f(x - vec.x, y - vec.y, z - vec.z); }### Assistant: @Test public void testSubtract4() { final Vector3f target = new Vector3f(12.0f, 8.0f, 5.0f); final Vector3f retval = target.subtract(7.0f, 4.0f, -2.0f); assertEquals(5.0f, retval.x, 0.0f); assertEquals(4.0f, retval.y, 0.0f); assertEquals(7.0f, retval.z, 0.0f); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> List<T> insertAt(List<T> list, int pos, T t) throws IllegalArgumentException { if (pos < 1) { throw new IllegalArgumentException(\"pos can't be less than 1\"); } list.add((pos - 1), t); return list; }### Assistant: @Test public void shouldInsertElementAtEnd() throws Exception { List<String> input = Stream.of(\"a\", \"b\", \"c\", \"d\").collect(toList()); List<String> result = P21.insertAt(input, 5, \"alfa\"); assertThat(result, hasSize(5)); assertThat(result, contains(\"a\", \"b\", \"c\", \"d\", \"alfa\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Number center() { return getMax().doubleValue() - (length().doubleValue() / 2); }### Assistant: @Test public void testCenter() throws Exception { Region r1 = new Region(1, 2); assertEquals(1.5, r1.center()); Region r2 = new Region(-10, 10); assertEquals(0.0, r2.center()); Region r3 = new Region(-2, -1); assertEquals(-1.5, r3.center()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean tryCheckpoint(int partitionId, Instant when) { Path path = checkpointPathGenerator.apply(partitionId, when); try { if (!checkpointed(path)) { checkpoint(path); checkpointsCache.refresh(path); return true; } } catch (IOException | ExecutionException e) { LOGGER.warn(\"Couldn't write checkpoint file: {}\", e.getMessage()); } return false; }### Assistant: @Test public void recreateFailingCheckpoint() throws IOException { FileSystem fsMock = mock(FileSystem.class); FSDataOutputStream outputStreamMock = mock(FSDataOutputStream.class); Path returnedPath = new Path(\"testPath\"); FsBasedCheckpointer cptr = new FsBasedCheckpointer(fsMock, (ignored, alsoIgnored) -> returnedPath); doThrow(new IOException(\"Ayo\")).when(fsMock).exists(returnedPath); Assert.assertFalse(cptr.tryCheckpoint(1, Instant.MIN)); doReturn(false).when(fsMock).exists(returnedPath); doThrow(new IOException(\"Ayo\")).when(fsMock).create(returnedPath); Assert.assertFalse(cptr.tryCheckpoint(1, Instant.MIN)); doReturn(outputStreamMock).when(fsMock).create(returnedPath); Assert.assertTrue(cptr.tryCheckpoint(1, Instant.MIN)); verify(fsMock, times(2)).create(returnedPath); verify(outputStreamMock, times(1)).close(); verifyNoMoreInteractions(outputStreamMock); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ICResponse<List<CategoryAttributeInfo>> findAllByCategoryId(AttributeQueryRequest request) { if(request==null){ throw new IllegalArgumentException(\"find_all_by_category_id request is null\"); } request.checkParam(); return attributeBaseReadFacade.findAllByCategoryId(request); }### Assistant: @Test public void findAllByCategoryId() { AttributeQueryRequest request = new AttributeQueryRequest(); request.setCategoryId(3L); ICResponse<List<CategoryAttributeInfo>> allByCategoryId = attributeBaseReadFacade.findAllByCategoryId(request); printJson(allByCategoryId); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static FilterResult filterProperty(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, boolean reject) { CaseInsensitiveHeaders headers = new CaseInsensitiveHeaders(); headers.setAll(request.headers()); if (URL.equals(filterPropertyKey)) { boolean matches = filterRequestURL(request, filterPropertyValue); FilterResult result = rejectIfNeeded(reject, matches); logFilterResult(request, filterPropertyKey, filterPropertyValue, result); return result; } if (METHOD.equals(filterPropertyKey)) { boolean matches = filterRequestMethod(request, filterPropertyValue); FilterResult result = rejectIfNeeded(reject, matches); logFilterResult(request, filterPropertyKey, filterPropertyValue, result); return result; } if (headers.names().contains(filterPropertyKey) && headers.get(filterPropertyKey).equalsIgnoreCase(filterPropertyValue)) { FilterResult result = reject ? FilterResult.REJECT : FilterResult.FILTER; logFilterResult(request, filterPropertyKey, filterPropertyValue, result); return result; } logFilterResult(request, filterPropertyKey, filterPropertyValue, FilterResult.REJECT, true); return FilterResult.REJECT; }### Assistant: @Test public void testPropertyUrlFilterRequest(TestContext context){ context.assertEquals(FilterResult.FILTER, RequestPropertyFilter.filterProperty(new PUTRequest(), RequestPropertyFilter.URL, PUT_REQUEST_REGEX, false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String formatJavaDocBox(String text) { requireNonNull(text); return formatTextBox(text, JAVA_DOC_WIDTH, JAVADOC_WORDS, JAVA_DOC_SINGLE_LINE_WORDS); }### Assistant: @Test void testFormatJavaDocBox() { String text = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789.\"; String eRes = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789\\n123456789 123456789 123456789 123456789 123456789 123456789.\"; String result = TextUtil.formatJavaDocBox(text); assertEquals(eRes, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private KeyValue compareAndSet(SetValue setValue) throws Exception { LOGGER.info(\"cas: {}->{} if {}\", key, setValue.getNewValue(), setValue.getExpectedValue()); try { ListenableFuture<KeyValue> casFuture = distributedStore.compareAndSet(key, setValue); return casFuture.get(ResourceConstants.COMMAND_TIMEOUT, ResourceConstants.COMMAND_TIMEOUT_TIME_UNIT); } catch (ExecutionException e) { Throwable cause = e.getCause(); if (cause instanceof NotLeaderException) { throw createCannotSubmitCommandException((NotLeaderException) cause); } else if (cause instanceof KayVeeException) { throw (KayVeeException) cause; } else { throw e; } } }### Assistant: @Test public void shouldReturnRedirectWithLocationIfCompareAndSetFailsBecauseNotLeaderExceptionIsThrownWithTheLeaderSetToAValidLeader() { when(distributedStore.compareAndSet(KEY, casValue)).thenReturn(Futures.<KeyValue>immediateFailedFuture(new NotLeaderException(self, leader))); assertThatValidCompareAndSetRequestReturnsErrorStatus(ClientResponse.Status.MOVED_PERMANENTLY); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TenantDomains setTenantDomainNames(List<String> tenantDomainNames) { this.tenantDomainNames = tenantDomainNames; return this; }### Assistant: @Test public void TestEqualsFalse() { TenantDomains td1 = new TenantDomains(); TenantDomains td2 = new TenantDomains(); td1.setTenantDomainNames(new ArrayList<>(Arrays.asList(\"A\", \"B\", \"C\"))); Assert.assertNotEquals(td1, td2); Assert.assertNotEquals(\"\", td1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public StateStore getStore(String name) { return stores.get(name); }### Assistant: @Test public void testGetStore() throws IOException { File baseDir = Files.createTempDirectory(stateDir).toFile(); try { MockRestoreConsumer restoreConsumer = new MockRestoreConsumer(); restoreConsumer.updatePartitions(nonPersistentStoreTopicName, Utils.mkList( new PartitionInfo(nonPersistentStoreTopicName, 1, Node.noNode(), new Node[0], new Node[0]) )); MockStateStoreSupplier.MockStateStore mockStateStore = new MockStateStoreSupplier.MockStateStore(nonPersistentStoreName, false); ProcessorStateManager stateMgr = new ProcessorStateManager(applicationId, 1, noPartitions, baseDir, restoreConsumer, false); try { stateMgr.register(mockStateStore, true, mockStateStore.stateRestoreCallback); assertNull(stateMgr.getStore(\"noSuchStore\")); assertEquals(mockStateStore, stateMgr.getStore(nonPersistentStoreName)); } finally { stateMgr.close(Collections.<TopicPartition, Long>emptyMap()); } } finally { Utils.delete(baseDir); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getTransactionExecutableData(List<String> addressListArray, List<String> transferAmountArray) { List<Address> addressList = new ArrayList<>(); List<Uint256> transferAmountList = new ArrayList<>(); for (String address : addressListArray) { addressList.add(new Address(address)); } for (String amount : transferAmountArray) { transferAmountList.add(new Uint256(new BigInteger(amount))); } Function function = new Function( DIRECT_TRANSFERS, Arrays.asList(new DynamicArray(addressList), new DynamicArray(transferAmountList)), Collections.emptyList()); return FunctionEncoder.encode(function); }### Assistant: @Test public void testDirectTransferCallData() { String expectedOutput = \"0x94ac7a3f0000000000000000000000000000000000000000000000000000000000\" + \"00004000000000000000000000000000000000000000000000000000000000000000800000000000000\" + \"0000000000000000000000000000000000000000000000000010000000000000000000000004a523bf8\" + \"cd96323e315df9442c6d04880c6fafb50000000000000000000000000000000000000000000000000000\" + \"00000000000100000000000000000000000000000000000000000000000000000002540be400\"; List<String> tokenHolderAddresses = Arrays.asList(\"0x4a523bf8cd96323e315df9442c6d04880c6fafb5\"); List<String> amounts = Arrays.asList(\"10000000000\"); String encodeMessage = new TokenRules().getTransactionExecutableData(tokenHolderAddresses, amounts); assertEquals(expectedOutput, encodeMessage); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DataSetLoader<Document> jsonLoader() { return (final File path) -> Document.parse(new String(Files.readAllBytes(path.toPath()), StandardCharsets.UTF_8)); }### Assistant: @Test public void testJsonLoaderLoadUsingProperResource() throws Exception { final DataSetLoader<Document> loader = LOADER_PROVIDER.jsonLoader(); assertThat(loader, notNullValue()); final Document document = loader.load(getFile(\"test-data.json\")); assertThat(document, notNullValue()); final Set<String> tableNames = document.keySet(); assertThat(tableNames.size(), equalTo(2)); assertThat(tableNames, hasItems(\"JSON_COLLECTION_1\", \"JSON_COLLECTION_2\")); final List<Document> collection1 = document.get(\"JSON_COLLECTION_1\", List.class); assertThat(collection1.size(), equalTo(3)); final List<Document> collection2 = document.get(\"JSON_COLLECTION_2\", List.class); assertThat(collection2.size(), equalTo(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static NamingException convertLdapException(javax.naming.NamingException ex) { Assert.notNull(ex, \"NamingException must not be null\"); if (javax.naming.directory.AttributeInUseException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.AttributeInUseException( (javax.naming.directory.AttributeInUseException) ex); } if (javax.naming.directory.AttributeModificationException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.AttributeModificationException( (javax.naming.directory.AttributeModificationException) ex); } if (javax.naming.CannotProceedException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.CannotProceedException((javax.naming.CannotProceedException) ex); } if (javax.naming.CommunicationException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.CommunicationException((javax.naming.CommunicationException) ex); } if (javax.naming.ConfigurationException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.ConfigurationException((javax.naming.ConfigurationException) ex); } if (javax.naming.ContextNotEmptyException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.ContextNotEmptyException((javax.naming.ContextNotEmptyException) ex); } if (javax.naming.InsufficientResourcesException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.InsufficientResourcesException( (javax.naming.InsufficientResourcesException) ex); } if (javax.naming.InterruptedNamingException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.InterruptedNamingException((javax.naming.InterruptedNamingException) ex); } if (javax.naming.directory.InvalidAttributeIdentifierException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.InvalidAttributeIdentifierException( (javax.naming.directory.InvalidAttributeIdentifierException) ex); } if (javax.naming.directory.InvalidAttributesException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.InvalidAttributesException( (javax.naming.directory.InvalidAttributesException) ex); } if (javax.naming.directory.InvalidAttributeValueException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.InvalidAttributeValueException( (javax.naming.directory.InvalidAttributeValueException) ex); } if (javax.naming.InvalidNameException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.InvalidNameException((javax.naming.InvalidNameException) ex); } if (javax.naming.directory.InvalidSearchControlsException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.InvalidSearchControlsException( (javax.naming.directory.InvalidSearchControlsException) ex); } if (javax.naming.directory.InvalidSearchFilterException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.InvalidSearchFilterException( (javax.naming.directory.InvalidSearchFilterException) ex); } if (javax.naming.ldap.LdapReferralException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.LdapReferralException((javax.naming.ldap.LdapReferralException) ex); } if (javax.naming.ReferralException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.ReferralException((javax.naming.ReferralException) ex); } if (javax.naming.SizeLimitExceededException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.SizeLimitExceededException((javax.naming.SizeLimitExceededException) ex); } if (javax.naming.TimeLimitExceededException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.TimeLimitExceededException((javax.naming.TimeLimitExceededException) ex); } if (javax.naming.LimitExceededException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.LimitExceededException((javax.naming.LimitExceededException) ex); } if (javax.naming.LinkLoopException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.LinkLoopException((javax.naming.LinkLoopException) ex); } if (javax.naming.MalformedLinkException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.MalformedLinkException((javax.naming.MalformedLinkException) ex); } if (javax.naming.LinkException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.LinkException((javax.naming.LinkException) ex); } if (javax.naming.NameAlreadyBoundException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.NameAlreadyBoundException((javax.naming.NameAlreadyBoundException) ex); } if (javax.naming.NameNotFoundException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.NameNotFoundException((javax.naming.NameNotFoundException) ex); } if (javax.naming.NoPermissionException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.NoPermissionException((javax.naming.NoPermissionException) ex); } if (javax.naming.AuthenticationException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.AuthenticationException((javax.naming.AuthenticationException) ex); } if (javax.naming.AuthenticationNotSupportedException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.AuthenticationNotSupportedException( (javax.naming.AuthenticationNotSupportedException) ex); } if (javax.naming.NamingSecurityException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.NamingSecurityException((javax.naming.NamingSecurityException) ex); } if (javax.naming.NoInitialContextException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.NoInitialContextException((javax.naming.NoInitialContextException) ex); } if (javax.naming.directory.NoSuchAttributeException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.NoSuchAttributeException( (javax.naming.directory.NoSuchAttributeException) ex); } if (javax.naming.NotContextException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.NotContextException((javax.naming.NotContextException) ex); } if (javax.naming.OperationNotSupportedException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.OperationNotSupportedException( (javax.naming.OperationNotSupportedException) ex); } if (javax.naming.PartialResultException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.PartialResultException((javax.naming.PartialResultException) ex); } if (javax.naming.directory.SchemaViolationException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.SchemaViolationException( (javax.naming.directory.SchemaViolationException) ex); } if (javax.naming.ServiceUnavailableException.class.isAssignableFrom(ex.getClass())) { return new org.springframework.ldap.ServiceUnavailableException( (javax.naming.ServiceUnavailableException) ex); } return new org.springframework.ldap.UncategorizedLdapException(ex); }### Assistant: @Test public void testConvertLdapExceptions() { assertThat( LdapUtils.convertLdapException( new javax.naming.directory.AttributeInUseException()).getClass()) .isEqualTo(org.springframework.ldap.AttributeInUseException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.directory.AttributeModificationException()) .getClass()).isEqualTo( org.springframework.ldap.AttributeModificationException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.CannotProceedException()) .getClass()).isEqualTo( org.springframework.ldap.CannotProceedException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.CommunicationException()) .getClass()).isEqualTo( org.springframework.ldap.CommunicationException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.ConfigurationException()) .getClass()).isEqualTo( org.springframework.ldap.ConfigurationException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.ContextNotEmptyException()).getClass()) .isEqualTo(org.springframework.ldap.ContextNotEmptyException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.InsufficientResourcesException()).getClass()) .isEqualTo(org.springframework.ldap.InsufficientResourcesException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.InterruptedNamingException()).getClass()) .isEqualTo(org.springframework.ldap.InterruptedNamingException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.directory.InvalidAttributeIdentifierException()) .getClass()).isEqualTo( org.springframework.ldap.InvalidAttributeIdentifierException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.directory.InvalidAttributesException()) .getClass()).isEqualTo( org.springframework.ldap.InvalidAttributesException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.directory.InvalidAttributeValueException()) .getClass()).isEqualTo( org.springframework.ldap.InvalidAttributeValueException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.InvalidNameException()) .getClass()).isEqualTo( org.springframework.ldap.InvalidNameException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.directory.InvalidSearchControlsException()) .getClass()).isEqualTo( org.springframework.ldap.InvalidSearchControlsException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.directory.InvalidSearchFilterException()) .getClass()).isEqualTo( org.springframework.ldap.InvalidSearchFilterException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.SizeLimitExceededException()).getClass()) .isEqualTo(org.springframework.ldap.SizeLimitExceededException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.TimeLimitExceededException()).getClass()) .isEqualTo(org.springframework.ldap.TimeLimitExceededException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.LimitExceededException()) .getClass()).isEqualTo( org.springframework.ldap.LimitExceededException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.LinkLoopException()) .getClass()).isEqualTo( org.springframework.ldap.LinkLoopException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.MalformedLinkException()) .getClass()).isEqualTo( org.springframework.ldap.MalformedLinkException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.LinkException()) .getClass()).isEqualTo( org.springframework.ldap.LinkException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.NameAlreadyBoundException()).getClass()) .isEqualTo(org.springframework.ldap.NameAlreadyBoundException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.NameNotFoundException()) .getClass()).isEqualTo( org.springframework.ldap.NameNotFoundException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.NoPermissionException()) .getClass()).isEqualTo( org.springframework.ldap.NoPermissionException.class); assertThat( LdapUtils .convertLdapException(new javax.naming.AuthenticationException()) .getClass()).isEqualTo( org.springframework.ldap.AuthenticationException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.AuthenticationNotSupportedException()) .getClass()).isEqualTo( org.springframework.ldap.AuthenticationNotSupportedException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.NoInitialContextException()).getClass()) .isEqualTo(org.springframework.ldap.NoInitialContextException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.directory.NoSuchAttributeException()).getClass()) .isEqualTo(org.springframework.ldap.NoSuchAttributeException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.NotContextException()) .getClass()).isEqualTo( org.springframework.ldap.NotContextException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.OperationNotSupportedException()).getClass()) .isEqualTo(org.springframework.ldap.OperationNotSupportedException.class); assertThat( LdapUtils.convertLdapException(new javax.naming.PartialResultException()) .getClass()).isEqualTo( org.springframework.ldap.PartialResultException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.directory.SchemaViolationException()).getClass()) .isEqualTo(org.springframework.ldap.SchemaViolationException.class); assertThat( LdapUtils.convertLdapException( new javax.naming.ServiceUnavailableException()).getClass()) .isEqualTo(org.springframework.ldap.ServiceUnavailableException.class); assertThat( LdapUtils.convertLdapException(new MockAttributeInUseException()) .getClass()).isEqualTo( org.springframework.ldap.AttributeInUseException.class); assertThat( LdapUtils.convertLdapException(new MockAttributeModificationException()) .getClass()).isEqualTo( org.springframework.ldap.AttributeModificationException.class); assertThat( LdapUtils.convertLdapException(new MockCannotProceedException()) .getClass()).isEqualTo( org.springframework.ldap.CannotProceedException.class); assertThat( LdapUtils.convertLdapException(new MockCommunicationException()) .getClass()).isEqualTo( org.springframework.ldap.CommunicationException.class); assertThat( LdapUtils.convertLdapException(new MockConfigurationException()) .getClass()).isEqualTo( org.springframework.ldap.ConfigurationException.class); assertThat( LdapUtils.convertLdapException(new MockContextNotEmptyException()) .getClass()).isEqualTo( org.springframework.ldap.ContextNotEmptyException.class); assertThat( LdapUtils.convertLdapException(new MockInsufficientResourcesException()) .getClass()).isEqualTo( org.springframework.ldap.InsufficientResourcesException.class); assertThat( LdapUtils.convertLdapException(new MockInterruptedNamingException()) .getClass()).isEqualTo( org.springframework.ldap.InterruptedNamingException.class); assertThat( LdapUtils.convertLdapException( new MockInvalidAttributeIdentifierException()).getClass()) .isEqualTo( org.springframework.ldap.InvalidAttributeIdentifierException.class); assertThat( LdapUtils.convertLdapException(new MockInvalidAttributesException()) .getClass()).isEqualTo( org.springframework.ldap.InvalidAttributesException.class); assertThat( LdapUtils.convertLdapException(new MockInvalidAttributeValueException()) .getClass()).isEqualTo( org.springframework.ldap.InvalidAttributeValueException.class); assertThat( LdapUtils.convertLdapException(new MockInvalidNameException()).getClass()) .isEqualTo(org.springframework.ldap.InvalidNameException.class); assertThat( LdapUtils.convertLdapException(new MockInvalidSearchControlsException()) .getClass()).isEqualTo( org.springframework.ldap.InvalidSearchControlsException.class); assertThat( LdapUtils.convertLdapException(new MockInvalidSearchFilterException()) .getClass()).isEqualTo( org.springframework.ldap.InvalidSearchFilterException.class); assertThat( LdapUtils.convertLdapException(new MockSizeLimitExceededException()) .getClass()).isEqualTo( org.springframework.ldap.SizeLimitExceededException.class); assertThat( LdapUtils.convertLdapException(new MockTimeLimitExceededException()) .getClass()).isEqualTo( org.springframework.ldap.TimeLimitExceededException.class); assertThat( LdapUtils.convertLdapException(new MockLimitExceededException()) .getClass()).isEqualTo( org.springframework.ldap.LimitExceededException.class); assertThat(LdapUtils.convertLdapException(new MockLinkLoopException()).getClass()) .isEqualTo(org.springframework.ldap.LinkLoopException.class); assertThat( LdapUtils.convertLdapException(new MockMalformedLinkException()) .getClass()).isEqualTo( org.springframework.ldap.MalformedLinkException.class); assertThat(LdapUtils.convertLdapException(new MockLinkException()).getClass()) .isEqualTo(org.springframework.ldap.LinkException.class); assertThat( LdapUtils.convertLdapException(new MockNameAlreadyBoundException()) .getClass()).isEqualTo( org.springframework.ldap.NameAlreadyBoundException.class); assertThat( LdapUtils.convertLdapException(new MockNameNotFoundException()) .getClass()).isEqualTo( org.springframework.ldap.NameNotFoundException.class); assertThat( LdapUtils.convertLdapException(new MockNoPermissionException()) .getClass()).isEqualTo( org.springframework.ldap.NoPermissionException.class); assertThat( LdapUtils.convertLdapException(new MockAuthenticationException()) .getClass()).isEqualTo( org.springframework.ldap.AuthenticationException.class); assertThat( LdapUtils.convertLdapException( new MockAuthenticationNotSupportedException()).getClass()) .isEqualTo( org.springframework.ldap.AuthenticationNotSupportedException.class); assertThat( LdapUtils.convertLdapException(new MockNoInitialContextException()) .getClass()).isEqualTo( org.springframework.ldap.NoInitialContextException.class); assertThat( LdapUtils.convertLdapException(new MockNoSuchAttributeException()) .getClass()).isEqualTo( org.springframework.ldap.NoSuchAttributeException.class); assertThat( LdapUtils.convertLdapException(new MockNotContextException()).getClass()) .isEqualTo(org.springframework.ldap.NotContextException.class); assertThat( LdapUtils.convertLdapException(new MockOperationNotSupportedException()) .getClass()).isEqualTo( org.springframework.ldap.OperationNotSupportedException.class); assertThat( LdapUtils.convertLdapException(new MockPartialResultException()) .getClass()).isEqualTo( org.springframework.ldap.PartialResultException.class); assertThat( LdapUtils.convertLdapException(new MockSchemaViolationException()) .getClass()).isEqualTo( org.springframework.ldap.SchemaViolationException.class); assertThat( LdapUtils.convertLdapException(new MockServiceUnavailableException()) .getClass()).isEqualTo( org.springframework.ldap.ServiceUnavailableException.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState) { Optional<AgentInstance> instanceOpt = SchedulerUtils.findInstance(agentManagementService, configuration.getInstanceAttributeName(), targetVM); if (!instanceOpt.isPresent()) { return MACHINE_DOES_NOT_EXIST; } AgentInstance agentInstance = instanceOpt.get(); String instanceInstanceType = agentInstance.getAttributes().getOrDefault(configuration.getMachineTypeAttributeName(), \"\"); return instanceInstanceType.equalsIgnoreCase(machineType) ? VALID : MACHINE_TYPE_DOES_NOT_MATCH; }### Assistant: @Test public void machineTypeDoesNotMatch() { AgentInstance instance = AgentGenerator.agentInstances().getValue().toBuilder() .withId(MACHINE_ID) .withAttributes(Collections.singletonMap(MACHINE_TYPE_ATTRIBUTE_NAME, \"noMatch\")) .build(); when(agentManagementService.findAgentInstance(MACHINE_ID)).thenReturn(Optional.of(instance)); Result result = constraint.evaluate(createTaskRequest(TASK_ID), createVirtualMachineCurrentStateMock(MACHINE_ID), createTaskTrackerState()); assertThat(result.isSuccessful()).isFalse(); assertThat(result.getFailureReason()).isEqualToIgnoringCase(\"The machine type does not match the specified machine type\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void reset() { for (PerformanceLogger performanceLogger : performanceLoggers) { performanceLogger.reset(); } }### Assistant: @Test public void reset() { PerformanceLogger logger = mock(PerformanceLogger.class); PerformanceLoggerCountingAggregate aggregate = new PerformanceLoggerCountingAggregate(); aggregate.add(logger); aggregate.reset(); verify(logger, times(1)).reset(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable @Override public RouteType findRouteType(RouteTypeInfo routeTypeInfo) { Assert.notNull(routeTypeInfo, \"routeTypeInfo must not be null\"); Set<String> uris = new HashSet<>(); Route route = routeTypeInfo.getRoute(); if (route != null && route.getConsumer() != null && route.getConsumer().getEndpoint() != null) { uris.add(routeTypeInfo.getRoute().getConsumer().getEndpoint().getEndpointUri()); } if (routeTypeInfo.getRouteDefinition() != null) { for (FromDefinition fromDefinition : routeTypeInfo.getRouteDefinition().getInputs()) { if (!StringUtils.isBlank(fromDefinition.getUri())) { uris.add(fromDefinition.getUri()); } } } RouteType result = null; for (String uri : uris) { if (!StringUtils.isBlank(uri) && uri.matches(inputUriPattern.getValue())) { result = RouteTypeEnum.INPUT; break; } } return result; }### Assistant: @Test public void testFindRouteTypeForRoute() throws Exception { getCamelContext().addRoutes(new AbstractBasicRoute() { @Override protected void doConfigure() throws Exception { from(\"direct:inputRoute\") .routeId(\"inputTestRouteOne\") .log(\"TestRoute\"); from(\"direct:inputUri\") .routeId(\"inputTestRouteTwo\") .log(\"TestRoute\"); from(\"direct:outputRoute\") .routeId(\"outputTestRouteOne\") .log(\"TestRoute\"); } }); assertThat(routeTypeUriResolver.findRouteType( new RouteTypeInfo(getCamelContext().getRoute(\"inputTestRouteOne\"), null, null, null)), is(RouteTypeEnum.INPUT)); assertThat(routeTypeUriResolver.findRouteType( new RouteTypeInfo(getCamelContext().getRoute(\"inputTestRouteTwo\"), null, null, null)), is(RouteTypeEnum.INPUT)); assertThat(routeTypeUriResolver.findRouteType( new RouteTypeInfo(getCamelContext().getRoute(\"outputTestRouteOne\"), null, null, null)), nullValue()); assertThat(routeTypeUriResolver.findRouteType(new RouteTypeInfo(null, null, null, getCamelContext().getRouteDefinition(\"inputTestRouteOne\"))), is(RouteTypeEnum.INPUT)); assertThat(routeTypeUriResolver.findRouteType(new RouteTypeInfo(null, null, null, getCamelContext().getRouteDefinition(\"inputTestRouteTwo\"))), is(RouteTypeEnum.INPUT)); assertThat(routeTypeUriResolver.findRouteType(new RouteTypeInfo(null, null, null, getCamelContext().getRouteDefinition(\"outputTestRouteOne\"))), nullValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static UDDIClient getUDDIClient(ServletContext servletContext) throws ConfigurationException { if (servletContext.getAttribute(JUDDI_CLIENT_NAME) != null) { String clientName = String.valueOf(servletContext.getAttribute(JUDDI_CLIENT_NAME)); return UDDIClientContainer.getUDDIClient(clientName); } else { String clientName = servletContext.getInitParameter(UDDI_CLIENT_NAME); if (clientName != null) { try { UDDIClient client = UDDIClientContainer.getUDDIClient(clientName); logger.info(\"Client \" + clientName + \" was already started.\"); servletContext.setAttribute(JUDDI_CLIENT_NAME, clientName); return client; } catch (ConfigurationException ce) { logger.debug(\"Client \" + clientName + \" is not yet started.\"); } } String clientConfigFile = servletContext.getInitParameter(UDDI_CLIENT_CONFIG_FILE); if (clientConfigFile == null) { clientConfigFile = ClientConfig.DEFAULT_UDDI_CONFIG; } logger.info(\"Reading the clientName from the clientConfig file \" + clientConfigFile); UDDIClient client = new UDDIClient(clientConfigFile); if (client.getName() == null) { logger.warn(\"Deprecated, client name set to 'default', however it should be provided in the uddi.xml\"); clientName = \"default\"; } if (client.getName() != null) { logger.info(\"Starting Client \" + client.getName() + \"...\"); clientName = client.getName(); } else { throw new ConfigurationException(\"A client name needs to be specified in the client config file.\"); } client.start(); servletContext.setAttribute(JUDDI_CLIENT_NAME, clientName); return client; } }### Assistant: @Test public void testGetUDDIClient() throws Exception { System.out.println(\"getUDDIClient\"); ServletContext req = createNiceMock(ServletContext.class); req.setAttribute(JUDDI_CLIENT_NAME, null); expect(req.getInitParameter(WebHelper.JUDDI_CLIENT_NAME)).andReturn(null).times(0, 1); replay(req); UDDIClient result = WebHelper.getUDDIClient(req); Assert.assertNotNull(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int hashCode() { int result = mMinHaloVersion != null ? mMinHaloVersion.hashCode() : 0; result = 31 * result + (mChangeLogUrl != null ? mChangeLogUrl.hashCode() : 0); return result; }### Assistant: @Test public void thatVersionAreEquals() { HaloServerVersion version = new HaloServerVersion(\"changelog\", \"1.1\"); HaloServerVersion version2 = new HaloServerVersion(\"changelog\", \"1.1\"); assertThat(version2).isEqualTo(version); HaloServerVersion version3 = new HaloServerVersion(\"changelog2\", \"1.1\"); assertThat(version3).isNotEqualTo(version2); HaloServerVersion version4 = new HaloServerVersion(\"changelog\", \"1\"); assertThat(version3).isNotEqualTo(version4); assertThat(1).isNotEqualTo(version); assertThat(version).isNotNull(); assertThat(new HaloServerVersion(null, \"1.1\")).isNotEqualTo(version); assertThat(version).isNotEqualTo(new HaloServerVersion(null, \"1.1\")); assertThat(new HaloServerVersion(null, null)).isNotEqualTo(version); assertThat(new HaloServerVersion(\"changelog\", null)).isNotEqualTo(version); assertThat(version).isNotEqualTo(new HaloServerVersion(\"changelog\", null)); assertThat(version).isEqualTo(version); assertThat(version2.hashCode()).isEqualTo(version.hashCode()); assertThat(new HaloServerVersion(null, null).hashCode() == 0).isTrue(); assertThat(new HaloServerVersion(null, null).hashCode()).isNotEqualTo(version.hashCode()); assertThat(version3.hashCode()).isNotEqualTo(version.hashCode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public RaftActorBehavior handleMessage(final ActorRef sender, final Object originalMessage) { requireNonNull(sender, \"sender should not be null\"); if (ISOLATED_LEADER_CHECK.equals(originalMessage)) { if (isLeaderIsolated()) { log.warn(\"{}: At least {} followers need to be active, Switching {} from Leader to IsolatedLeader\", context.getId(), getMinIsolatedLeaderPeerCount(), getLeaderId()); return internalSwitchBehavior(new IsolatedLeader(context, this)); } else { return this; } } else { return super.handleMessage(sender, originalMessage); } }### Assistant: @Test public void testSendingReplicateImmediatelyAfterHeartbeatDoesReplicate() { logStart(\"testSendingReplicateImmediatelyAfterHeartbeatDoesReplicate\"); MockRaftActorContext actorContext = createActorContextWithFollower(); actorContext.setConfigParams(new DefaultConfigParamsImpl() { @Override public FiniteDuration getHeartBeatInterval() { return FiniteDuration.apply(100, TimeUnit.MILLISECONDS); } }); long term = 1; actorContext.getTermInformation().update(term, \"\"); leader = new Leader(actorContext); MessageCollectorActor.expectFirstMatching(followerActor, AppendEntries.class); long lastIndex = actorContext.getReplicatedLog().lastIndex(); leader.handleMessage(followerActor, new AppendEntriesReply( FOLLOWER_ID, term, true, lastIndex, term, (short)0)); assertEquals(\"isFollowerActive\", true, leader.getFollower(FOLLOWER_ID).isFollowerActive()); followerActor.underlyingActor().clear(); Uninterruptibles.sleepUninterruptibly(150, TimeUnit.MILLISECONDS); leader.handleMessage(leaderActor, SendHeartBeat.INSTANCE); sendReplicate(actorContext, lastIndex + 1); List<AppendEntries> allMessages = MessageCollectorActor.getAllMatching(followerActor, AppendEntries.class); assertEquals(\"The number of append entries collected should be 2\", 2, allMessages.size()); assertEquals(0, allMessages.get(0).getEntries().size()); assertEquals(1, allMessages.get(1).getEntries().size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected Throwable unwrapAsyncExceptions(Throwable error) { if (error == null || error.getCause() == null) return error; if (error instanceof CompletionException || error instanceof ExecutionException) { error = error.getCause(); error = unwrapAsyncExceptions(error); } return error; }### Assistant: @Test public void unwrapAsyncExceptions_unwraps_CompletionException() { Exception underlyingError = new Exception(\"bang\"); CompletionException wrapperEx = new CompletionException(underlyingError); assertThat(cbSpy.unwrapAsyncExceptions(wrapperEx)).isSameAs(underlyingError); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String rightPad(String str, int size) { return rightPad(str, size, ' '); }### Assistant: @Test public void testRightPad_StringInt() { assertEquals(null, rightPad(null, 5)); assertEquals(\" \", rightPad(\"\", 5)); assertEquals(\"abc \", rightPad(\"abc\", 5)); assertEquals(\"abc\", rightPad(\"abc\", 2)); assertEquals(\"abc\", rightPad(\"abc\", -1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void undeploy( Instance instance ) throws PluginException { this.logger.fine( this.agentId + \" is undeploying instance \" + instance.getName()); File instanceDirectory = InstanceHelpers.findInstanceDirectoryOnAgent( instance ); try { callPuppetScript( instance, \"undeploy\", PuppetState.UNDEF, null, false, instanceDirectory ); } catch( Exception e ) { throw new PluginException( e ); } }### Assistant: @Test( expected = PluginException.class ) public void testNoModuleDirectory() throws Exception { Assume.assumeTrue( isLinuxSystem()); Assert.assertTrue( new File( this.instanceDirectory, \"whatever\" ).mkdirs()); Assert.assertTrue( new File( this.instanceDirectory, \"whatever.txt\" ).createNewFile()); this.plugin.undeploy( this.inst ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Class<?> getLiteral(String className, String literal) { LiteralAnalyzer analyzer = ANALYZERS.get( className ); Class result = null; if ( analyzer != null ) { analyzer.validate( literal ); result = analyzer.getLiteral(); } return result; }### Assistant: @Test public void testFloatWithLongLiteral() { assertThat( getLiteral( float.class.getCanonicalName(), \"156L\" ) ).isNotNull(); assertThat( getLiteral( float.class.getCanonicalName(), \"156l\" ) ).isNotNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Set<SubResourceDefinition> getSubResourceDefinitions() { return Collections.emptySet(); }### Assistant: @Test public void testGetSubResourceDefinitions() throws Exception { ViewPermissionResourceDefinition ViewPermissionResourceDefinition = new ViewPermissionResourceDefinition(); Set<SubResourceDefinition> subResourceDefinitions = ViewPermissionResourceDefinition.getSubResourceDefinitions (); Assert.assertTrue(subResourceDefinitions.isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String encodeBytes(BytesType bytesType) { byte[] value = bytesType.getValue(); int length = value.length; int mod = length % MAX_BYTE_LENGTH; byte[] dest; if (mod != 0) { int padding = MAX_BYTE_LENGTH - mod; dest = new byte[length + padding]; System.arraycopy(value, 0, dest, 0, length); } else { dest = value; } return Numeric.toHexStringNoPrefix(dest); }### Assistant: @Test public void testStaticBytes() { Bytes staticBytes = new Bytes6(new byte[] { 0, 1, 2, 3, 4, 5 }); assertThat(TypeEncoder.encodeBytes(staticBytes), is(\"0001020304050000000000000000000000000000000000000000000000000000\")); Bytes empty = new Bytes1(new byte[] { 0 }); assertThat(TypeEncoder.encodeBytes(empty), is(\"0000000000000000000000000000000000000000000000000000000000000000\")); Bytes dave = new Bytes4(\"dave\".getBytes()); assertThat(TypeEncoder.encodeBytes(dave), is(\"6461766500000000000000000000000000000000000000000000000000000000\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T extends Serializable> T readObject() throws ClassNotFoundException { byte tcByte = _buffer[_index++]; if (tcByte == SerializationConstants.TC_BOOLEAN) { return (T)Boolean.valueOf(readBoolean()); } else if (tcByte == SerializationConstants.TC_BYTE) { return (T)Byte.valueOf(readByte()); } else if (tcByte == SerializationConstants.TC_CHARACTER) { return (T)Character.valueOf(readChar()); } else if (tcByte == SerializationConstants.TC_CLASS) { String contextName = readString(); String className = readString(); return (T)ClassResolverUtil.resolve( className, ClassLoaderPool.getClassLoader(contextName)); } else if (tcByte == SerializationConstants.TC_DOUBLE) { return (T)Double.valueOf(readDouble()); } else if (tcByte == SerializationConstants.TC_FLOAT) { return (T)Float.valueOf(readFloat()); } else if (tcByte == SerializationConstants.TC_INTEGER) { return (T)Integer.valueOf(readInt()); } else if (tcByte == SerializationConstants.TC_LONG) { return (T)Long.valueOf(readLong()); } else if (tcByte == SerializationConstants.TC_NULL) { return null; } else if (tcByte == SerializationConstants.TC_SHORT) { return (T)Short.valueOf(readShort()); } else if (tcByte == SerializationConstants.TC_STRING) { return (T)readString(); } else if (tcByte == SerializationConstants.TC_OBJECT) { try { ObjectInputStream objectInputStream = new ProtectedAnnotatedObjectInputStream( new BufferInputStream()); return (T)objectInputStream.readObject(); } catch (IOException ioException) { throw new RuntimeException(ioException); } } throw new IllegalStateException(\"Unkown TC code \" + tcByte); }### Assistant: @Test public void testReadObjectNull() throws ClassNotFoundException { ByteBuffer byteBuffer = ByteBuffer.allocate(1); byteBuffer.put(SerializationConstants.TC_NULL); byteBuffer.flip(); Deserializer deserializer = new Deserializer(byteBuffer); Object object = deserializer.readObject(); Assert.assertNull(object); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static WebView mockWebView() { return mock(WebView.class); }### Assistant: @Test public void mockWebView() { View view = AndroidMocks.mockWebView(); assertThat(view).isNotNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DataExists fromSerializable(final Object serializable) { Preconditions.checkArgument(serializable instanceof DataExists); return (DataExists)serializable; }### Assistant: @Test public void testSerialization() { DataExists expected = new DataExists(TestModel.TEST_PATH, DataStoreVersions.CURRENT_VERSION); Object serialized = expected.toSerializable(); assertEquals(\"Serialized type\", DataExists.class, serialized.getClass()); DataExists actual = DataExists.fromSerializable(SerializationUtils.clone((Serializable) serialized)); assertEquals(\"getPath\", expected.getPath(), actual.getPath()); assertEquals(\"getVersion\", DataStoreVersions.CURRENT_VERSION, actual.getVersion()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String format(LogRecord x) { StringBuilder sb = new StringBuilder(); sb.append(String.format(\"%6d\",System.currentTimeMillis() - FIRST_TIME) ) .append(\" \") .append(String.format(\"%-7s\",x.getLevel().getName())) .append(formatMessage(x)); if (x.getThrown() != null) { try { sb.append(LF).append(\"exception: \"); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); x.getThrown().printStackTrace(pw); pw.close(); sb.append(sw.toString()); } catch (Exception ex) { sb.append(\"while retrieving exception: \"); sb.append(ex.getMessage()); sb.append(\" \"); } } sb.append(LF); return sb.toString(); }### Assistant: @Test void test_oneline_format() { OneLineFormatter f = new OneLineFormatter(); LogRecord x = new LogRecord(Level.INFO,\"test\"); x.setThrown(new IllegalArgumentException()); assertThat(f.format(x), CoreMatchers.containsString(\"exception: java.lang.IllegalArgumentException\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST\", justification = \"The ServletRequest is cast to an HttpServletRequest which is always the case since all requests use the HTTP protocol.\") public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { doHttpFilter((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse, filterChain); }### Assistant: @Test public void testHttpHeaderAuthenticationFilterWithDatabaseConnectionError() throws Exception { setupTestFunctions(\"testRole\"); modifyPropertySourceInEnvironment(getDefaultSecurityEnvironmentVariables()); ApplicationUserBuilder applicationUserBuilder = (ApplicationUserBuilder) ReflectionTestUtils.getField(httpHeaderAuthenticationFilter, \"applicationUserBuilder\"); try { MockHttpServletRequest request = getRequestWithHeaders(USER_ID, \"testFirstName\", \"testLastName\", \"testEmail\", \"testRole\", \"Wed, 11 Mar 2015 10:24:09\"); ApplicationUserBuilder mockApplicationUserBuilder = Mockito.mock(ApplicationUserBuilder.class); Mockito.when(mockApplicationUserBuilder.buildNoRoles(any(HttpServletRequest.class))).thenThrow(PersistenceException.class); invalidateApplicationUser(request); ReflectionTestUtils.setField(httpHeaderAuthenticationFilter, \"applicationUserBuilder\", mockApplicationUserBuilder); httpHeaderAuthenticationFilter.init(new MockFilterConfig()); MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse(); httpHeaderAuthenticationFilter.doFilter(request, mockHttpServletResponse, new MockFilterChain()); assertEquals(500, mockHttpServletResponse.getStatus()); ErrorInformation errorInformation = new ErrorInformation(); errorInformation.setStatusCode(500); errorInformation.setStatusDescription(\"Internal Server Error\"); errorInformation.setMessage(\"javax.persistence.PersistenceException\"); errorInformation.setMessageDetails(new ArrayList<>()); assertEquals(xmlHelper.objectToXml(errorInformation), mockHttpServletResponse.getContentAsString()); } finally { restorePropertySourceInEnvironment(); } ReflectionTestUtils.setField(httpHeaderAuthenticationFilter, \"applicationUserBuilder\", applicationUserBuilder); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TextDecoder getDecoder() { return this.decoder; }### Assistant: @Test public void shouldReturnDefaultTextEncoderWhenNullPassedToGetEncoder() { assertThat(factory.getDecoder(), is(sameInstance(ValueFactory.DEFAULT_DECODER))); assertThat(factory.getDecoder(null), is(sameInstance(ValueFactory.DEFAULT_DECODER))); assertThat(factory.getDecoder(CUSTOM_DECODER), is(sameInstance(CUSTOM_DECODER))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<DbArtifact> getArtifacts(final FiltersHolder filters) { return repositoryHandler.getArtifacts(filters); }### Assistant: @Test public void checkGetAllArtifact(){ final RepositoryHandler repositoryHandler = mock(RepositoryHandler.class); final ArtifactHandler handler = new ArtifactHandler(repositoryHandler, mock(LicenseMatcher.class)); final FiltersHolder filtersHolder = mock(FiltersHolder.class); handler.getArtifacts(filtersHolder); verify(repositoryHandler, times(1)).getArtifacts(filtersHolder); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected boolean isOnTime( Document document, LocalDateTime nowLocalDateTime, LocalDateTime overdueLocalDateTime) { if (nowLocalDateTime.isBefore(overdueLocalDateTime)) { return true; } LocalDateTime createDateLocalDateTime = LocalDateTime.parse( document.getDate(\"createDate\"), _dateTimeFormatter); if (createDateLocalDateTime.isAfter(overdueLocalDateTime)) { return false; } if (Validator.isNull(document.getDate(\"completionDate\"))) { return false; } LocalDateTime completionDateLocalDateTime = LocalDateTime.parse( document.getDate(\"completionDate\"), _dateTimeFormatter); if (completionDateLocalDateTime.isBefore(overdueLocalDateTime) || Objects.equals(completionDateLocalDateTime, overdueLocalDateTime)) { return true; } return false; }### Assistant: @Test public void testIsOnTime() { LocalDateTime nowLocalDateTime = _createLocalDateTime(); _assertIsOnTime( true, _createDocument( HashMapBuilder.<String, Object>put( \"createDate\", _format(nowLocalDateTime) ).build()), nowLocalDateTime, nowLocalDateTime.plusHours(1)); _assertIsOnTime( true, _createDocument( HashMapBuilder.<String, Object>put( \"completionDate\", _format(nowLocalDateTime.minusHours(1)) ).put( \"createDate\", _format(nowLocalDateTime.minusHours(2)) ).build()), nowLocalDateTime, nowLocalDateTime.minusHours(1)); _assertIsOnTime( false, _createDocument( HashMapBuilder.<String, Object>put( \"createDate\", _format(nowLocalDateTime.minusHours(1)) ).build()), nowLocalDateTime, nowLocalDateTime.minusHours(2)); _assertIsOnTime( false, _createDocument( HashMapBuilder.<String, Object>put( \"createDate\", _format(nowLocalDateTime.minusHours(2)) ).build()), nowLocalDateTime, nowLocalDateTime.minusHours(1)); _assertIsOnTime( false, _createDocument( HashMapBuilder.<String, Object>put( \"completionDate\", _format(nowLocalDateTime) ).put( \"createDate\", _format(nowLocalDateTime.minusHours(2)) ).build()), nowLocalDateTime, nowLocalDateTime.minusHours(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String toSimpleElapsedTime(Date date) { long diff = (System.currentTimeMillis() - date.getTime()) / 1000; if (diff < 60) { return \"less than a minute ago\"; } diff /= 60; if (diff < 60) { return pluralize(diff, \"minute\") + \" ago\"; } diff /= 60; if (diff < 24) { return pluralize(diff, \"hour\") + \" ago\"; } else { diff /= 24; return pluralize(diff, \"day\") + \" ago\"; } }### Assistant: @Test public void toSimpleElapsedTime_underhour() { assertEquals(\"5 minutes ago\", DateUtils.toSimpleElapsedTime(new Date(new Date().getTime() - ((5 * MINUTE) + (10 * SECOND))))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getMessage(String code, Object[] args) { return getMessageSourceAccessor().getMessage(code, args); }### Assistant: @Test public void testGetMessage01() throws Exception { String[] args = { \"test1\" }; String result = messageAccessor.getMessage(\"errors.alphaNumericString\", args); assertEquals(\"test1\u306b\u306f\u534a\u89d2\u82f1\u6570\u5b57\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044.\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void triggerNode(String nodeId) { WorkflowProcessInstance wfpi = processInstance(); RuleFlowProcess rfp = ((RuleFlowProcess) wfpi.getProcess()); Node node = rfp.getNodesRecursively() .stream() .filter(ni -> nodeId.equals(ni.getMetaData().get(\"UniqueId\"))).findFirst().orElseThrow(() -> new NodeNotFoundException(this.id, nodeId)); Node parentNode = rfp.getParentNode(node.getId()); NodeInstanceContainer nodeInstanceContainerNode = parentNode == null ? wfpi : ((NodeInstanceContainer) wfpi.getNodeInstance(parentNode)); nodeInstanceContainerNode.getNodeInstance(node).trigger(null, org.jbpm.workflow.core.Node.CONNECTION_DEFAULT_TYPE); addToUnitOfWork(pi -> ((MutableProcessInstances<T>) process.instances()).update(pi.id(), pi)); }### Assistant: @Test public void shouldTriggerNodeWhenTrigger() { NodeInstance nodeInstance = givenExistingNode(NODE_ID); processInstance.triggerNode(NODE_ID); verify(nodeInstance).trigger(null, org.jbpm.workflow.core.Node.CONNECTION_DEFAULT_TYPE); verify(unitOfWork).intercept(any()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Iterator<String> splitAt(String str, String delims) { return new DeQuotingStringIterator(str.trim(), delims); }### Assistant: @Test public void testSplitAtEmpty() { Iterator<String> iter = QuoteUtil.splitAt(\"\", \"=\"); assertFalse(iter.hasNext()); assertThrows(NoSuchElementException.class, () -> iter.next()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder builder() { return new Builder(); }### Assistant: @Test(expected = SchemaException.class) public void schemaForNoAdditionalProperties() { ObjectSchema.builder().additionalProperties(false) .schemaOfAdditionalProperties(BooleanSchema.INSTANCE).build(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Bundle> getBundles() { return this.bundles; }### Assistant: @Test public void testGetBundles() throws Exception { View view = getView(); Assert.assertEquals(view.getBundles().size(), 20); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public T send() throws IOException { return web3jService.send(this, responseType); }### Assistant: @Test public void testShhGetFilterChanges() throws Exception { web3j.shhGetFilterChanges(Numeric.toBigInt(\"0x7\")).send(); verifyResult(\"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"shh_getFilterChanges\\\",\" + \"\\\"params\\\":[\\\"0x07\\\"],\\\"id\\\":1}\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Set<byte[]> zrange(byte[] key, long start, long end) { return jedisCluster.zrange(key, start, end); }### Assistant: @Test public void testZrange() { byte[] key = new byte[] {}; long start = 1; long end = 2; rf.zrange(key, start, end); verify(jedisCluster).zrange(key, start, end); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception { if (message.getPayloadLength() == 0) { log.warn(\"Road: {}, stream: {}, sessionId: {} - Ignoring message with zero sized payload\", roadName, streamName, sessionId); return; } service.onEvent(message.getPayload()); }### Assistant: @Test public void handleTextMessage() throws Exception { Message<String> message = new Message<>(0, 1L, 1, 1L, \"a\"); TextMessage textMessage = new TextMessage((new ObjectMapper()).writeValueAsString(message)); String refUtf8 = new String(textMessage.getPayload().getBytes(), UTF_8); String refUtf16 = new String(textMessage.getPayload().getBytes(), UTF_16); underTest.afterConnectionEstablished(session); underTest.handleTextMessage(session, textMessage); ArgumentCaptor<String> valueCapture = ArgumentCaptor.forClass(String.class); verify(service).onEvent(valueCapture.capture()); String out = valueCapture.getValue(); assertEquals(refUtf8, out); assertNotEquals(refUtf16, out); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public synchronized void onEvent(ServiceInstancesChangedEvent event) { logger.info(\"Received instance notification, serviceName: \" + event.getServiceName() + \", instances: \" + event.getServiceInstances().size()); String appName = event.getServiceName(); allInstances.put(appName, event.getServiceInstances()); Map<String, List<ServiceInstance>> revisionToInstances = new HashMap<>(); Map<String, Set<String>> localServiceToRevisions = new HashMap<>(); Map<Set<String>, List<URL>> revisionsToUrls = new HashMap(); for (Map.Entry<String, List<ServiceInstance>> entry : allInstances.entrySet()) { List<ServiceInstance> instances = entry.getValue(); for (ServiceInstance instance : instances) { String revision = getExportedServicesRevision(instance); if (DEFAULT_REVISION.equals(revision)) { logger.info(\"Find instance without valid service metadata: \" + instance.getAddress()); continue; } List<ServiceInstance> subInstances = revisionToInstances.computeIfAbsent(revision, r -> new LinkedList<>()); subInstances.add(instance); MetadataInfo metadata = revisionToMetadata.get(revision); if (metadata == null) { metadata = getMetadataInfo(instance); logger.info(\"MetadataInfo for instance \" + instance.getAddress() + \"?revision=\" + revision + \" is \" + metadata); if (metadata != null) { revisionToMetadata.put(revision, getMetadataInfo(instance)); } else { } } if (metadata != null) { parseMetadata(revision, metadata, localServiceToRevisions); ((DefaultServiceInstance) instance).setServiceMetadata(metadata); } localServiceToRevisions.forEach((serviceKey, revisions) -> { List<URL> urls = revisionsToUrls.get(revisions); if (urls != null) { serviceUrls.put(serviceKey, urls); } else { urls = new ArrayList<>(); for (String r : revisions) { for (ServiceInstance i : revisionToInstances.get(r)) { urls.add(i.toURL()); } } revisionsToUrls.put(revisions, urls); serviceUrls.put(serviceKey, urls); } }); } } this.notifyAddressChanged(); }### Assistant: @Test public void testOnEvent() { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static int implicitValence(int elem, int q, int val) { switch (elem) { case 1: case 3: case 11: case 19: case 37: case 55: case 87: if (q == 0 && val <= 1) return 1; break; case 4: case 12: case 20: case 38: case 56: case 88: switch (q) { case 0: if (val <= 2) return 2; break; case 1: if (val <= 1) return 1; break; } break; case 5: switch (q) { case -4: if (val <= 1) return 1; break; case -3: if (val <= 2) return 2; break; case -2: if (val <= 3) return 3; if (val <= 5) return 5; break; case -1: if (val <= 4) return 4; break; case 0: if (val <= 3) return 3; break; case 1: if (val <= 2) return 2; break; case 2: if (val <= 1) return 1; break; } break; case 6: switch (q) { case -3: if (val <= 1) return 1; break; case -2: if (val <= 2) return 2; break; case -1: if (val <= 3) return 3; if (val <= 5) return 5; break; case 0: if (val <= 4) return 4; break; case 1: if (val <= 3) return 3; break; case 2: if (val <= 2) return 2; break; case 3: if (val <= 1) return 1; break; } break; case 7: switch (q) { case -2: if (val <= 1) return 1; break; case -1: if (val <= 2) return 2; break; case 0: if (val <= 3) return 3; if (val <= 5) return 5; break; case 1: if (val <= 4) return 4; break; case 2: if (val <= 3) return 3; break; case 3: if (val <= 2) return 2; break; case 4: if (val <= 1) return 1; break; } break; case 8: switch (q) { case -1: if (val <= 1) return 1; break; case 0: if (val <= 2) return 2; break; case 1: if (val <= 3) return 3; if (val <= 5) return 5; break; case 2: if (val <= 4) return 4; break; case 3: if (val <= 3) return 3; break; case 4: if (val <= 2) return 2; break; case 5: if (val <= 1) return 1; break; } break; case 9: switch (q) { case 0: if (val <= 1) return 1; break; case 1: if (val <= 2) return 2; break; case 2: if (val <= 3) return 3; if (val <= 5) return 5; break; case 3: if (val <= 4) return 4; break; case 4: if (val <= 3) return 3; break; case 5: if (val <= 2) return 2; break; case 6: if (val <= 1) return 1; break; } break; case 13: switch (q) { case -4: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case -3: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case -2: if (val <= 3) return 3; if (val <= 5) return 5; break; case -1: if (val <= 4) return 4; break; case 0: if (val <= 3) return 3; break; case 1: if (val <= 2) return 2; break; case 2: if (val <= 1) return 1; break; } break; case 14: switch (q) { case -3: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case -2: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case -1: if (val <= 3) return 3; if (val <= 5) return 5; break; case 0: if (val <= 4) return 4; break; case 1: if (val <= 3) return 3; break; case 2: if (val <= 2) return 2; break; case 3: if (val <= 1) return 1; break; } break; case 15: switch (q) { case -2: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case -1: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case 0: if (val <= 3) return 3; if (val <= 5) return 5; break; case 1: if (val <= 4) return 4; break; case 2: if (val <= 3) return 3; break; case 3: if (val <= 2) return 2; break; case 4: if (val <= 1) return 1; break; } break; case 16: switch (q) { case -1: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case 0: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case 1: if (val <= 3) return 3; if (val <= 5) return 5; break; case 2: if (val <= 4) return 4; break; case 3: if (val <= 3) return 3; break; case 4: if (val <= 2) return 2; break; case 5: if (val <= 1) return 1; break; } break; case 17: switch (q) { case 0: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case 1: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case 2: if (val <= 3) return 3; if (val <= 5) return 5; break; case 3: if (val <= 4) return 4; break; case 4: if (val <= 3) return 3; break; case 5: if (val <= 2) return 2; break; case 6: if (val <= 1) return 1; break; } break; case 31: switch (q) { case -4: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case -3: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case -2: if (val <= 3) return 3; if (val <= 5) return 5; break; case -1: if (val <= 4) return 4; break; case 0: if (val <= 3) return 3; break; case 2: if (val <= 1) return 1; break; } break; case 32: switch (q) { case -3: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case -2: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case -1: if (val <= 3) return 3; if (val <= 5) return 5; break; case 0: if (val <= 4) return 4; break; case 1: if (val <= 3) return 3; break; case 3: if (val <= 1) return 1; break; } break; case 33: switch (q) { case -2: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case -1: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case 0: if (val <= 3) return 3; if (val <= 5) return 5; break; case 1: if (val <= 4) return 4; break; case 2: if (val <= 3) return 3; break; case 4: if (val <= 1) return 1; break; } break; case 34: switch (q) { case -1: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case 0: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case 1: if (val <= 3) return 3; if (val <= 5) return 5; break; case 2: if (val <= 4) return 4; break; case 3: if (val <= 3) return 3; break; case 5: if (val <= 1) return 1; break; } break; case 35: switch (q) { case 0: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case 1: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case 2: if (val <= 3) return 3; if (val <= 5) return 5; break; case 3: if (val <= 4) return 4; break; case 4: if (val <= 3) return 3; break; case 6: if (val <= 1) return 1; break; } break; case 49: switch (q) { case -4: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case -3: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case -2: if (val <= 3) return 3; if (val <= 5) return 5; break; case -1: if (val <= 2) return 2; if (val <= 4) return 4; break; case 0: if (val <= 3) return 3; break; case 2: if (val <= 1) return 1; break; } break; case 50: case 82: switch (q) { case -3: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case -2: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case -1: if (val <= 3) return 3; if (val <= 5) return 5; break; case 0: if (val <= 2) return 2; if (val <= 4) return 4; break; case 1: if (val <= 3) return 3; break; case 3: if (val <= 1) return 1; break; } break; case 51: case 83: switch (q) { case -2: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case -1: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case 0: if (val <= 3) return 3; if (val <= 5) return 5; break; case 1: if (val <= 2) return 2; if (val <= 4) return 4; break; case 2: if (val <= 3) return 3; break; case 4: if (val <= 1) return 1; break; } break; case 52: case 84: switch (q) { case -1: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case 0: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case 1: if (val <= 3) return 3; if (val <= 5) return 5; break; case 2: if (val <= 2) return 2; if (val <= 4) return 4; break; case 3: if (val <= 3) return 3; break; case 5: if (val <= 1) return 1; break; } break; case 53: case 85: switch (q) { case 0: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case 1: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case 2: if (val <= 3) return 3; if (val <= 5) return 5; break; case 3: if (val <= 2) return 2; if (val <= 4) return 4; break; case 4: if (val <= 3) return 3; break; case 6: if (val <= 1) return 1; break; } break; case 81: switch (q) { case -4: if (val <= 1) return 1; if (val <= 3) return 3; if (val <= 5) return 5; if (val <= 7) return 7; break; case -3: if (val <= 2) return 2; if (val <= 4) return 4; if (val <= 6) return 6; break; case -2: if (val <= 3) return 3; if (val <= 5) return 5; break; case -1: if (val <= 2) return 2; if (val <= 4) return 4; break; case 0: if (val <= 1) return 1; if (val <= 3) return 3; break; } break; } return val; }### Assistant: @Test public void nitrogen_cation() { assertThat(MDLValence.implicitValence(7, +1, 0), is(4)); assertThat(MDLValence.implicitValence(7, +1, 1), is(4)); assertThat(MDLValence.implicitValence(7, +1, 2), is(4)); assertThat(MDLValence.implicitValence(7, +1, 3), is(4)); assertThat(MDLValence.implicitValence(7, +1, 4), is(4)); assertThat(MDLValence.implicitValence(7, +1, 5), is(5)); assertThat(MDLValence.implicitValence(7, +1, 6), is(6)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isEncrypted(String str) { return StringUtils.startsWith(str, CIPHER_PREFIX); }### Assistant: @Test public void testIsEncryptedArrayOutOfBounds() { char[] testValue = {'{', 'c'}; assertFalse(\"The value is expected to not be encrypted \", encryptionService.isEncrypted(String.valueOf(testValue))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Date tomorrowZero(Date period) { if (period == null) { period = new Date(); } Calendar cal = Calendar.getInstance(); cal.setTime(period); cal.add(Calendar.DAY_OF_YEAR, 1); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); cal.set(Calendar.MILLISECOND, 0); return cal.getTime(); }### Assistant: @Test public void testTomorrowZero2() { Assert.assertEquals(new Date(1562601600000L), TaskHelper.tomorrowZero(new Date(1562596622000L))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull protected List<T> findAll(final SelectCommand query) { return super.findAll(reader(), query); }### Assistant: @Test public void testSelectILike() { final List<List<Object>> res = _personDao.findAll(SQL.select( Person.NAME, Person.HEIGTH).from( Person.TABLE).where( Person.LASTNAME.ilike( \"pa%\")).orderBy( Person.ID)); Assert.assertEquals(res, RESULT_LIKE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getLanguageDetectorFactory() { String factoryClassName = getPropertyValue(GrobidPropertyKeys.PROP_LANG_DETECTOR_FACTORY); if (isUseLanguageId() && (StringUtils.isBlank(factoryClassName))) { throw new GrobidPropertyException(\"Language detection is enabled but a factory class name is not provided\"); } return factoryClassName; }### Assistant: @Test public void testgetLanguageDetectorFactory() { GrobidProperties.setUseLanguageId(\"false\"); assertEquals(\"The property has not the value expected\", \"org.grobid.core.lang.impl.CybozuLanguageDetectorFactory\", GrobidProperties.getLanguageDetectorFactory()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ListenableFuture<Void> setInputFocus() { final int winId = getWindowId(); final int time = this.xTime.getTime(); return this.xExecutor.submit(new Runnable() { @Override public void run() { LOG.debug(\"[winId={}] set input focus.\", winId); xcb_set_input_focus(getConnectionRef(), (short) XCB_INPUT_FOCUS_NONE, winId, time); xcb_flush(getConnectionRef()); } }, null); }### Assistant: @Test public void testSetInputFocus() { this.xWindow.setInputFocus(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull public String getName() { return mName; }### Assistant: @Test public void thatCanCreateAModuleField(){ assertThat(mHaloModuleFieldType).isNotNull(); assertThat(mHaloModuleFieldType.getName()).isEqualTo(\"myawesomeName\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String labelize(String name) { StringBuilder label = new StringBuilder(); for (char c : name.toCharArray()) { if (Character.isUpperCase(c) && label.length() > 0) label.append(' '); label.append(label.length() == 0 ? Character.toUpperCase(c) : c); } return label.toString(); }### Assistant: @Test public void testLabelize() { Assert.assertEquals(\"Foo Bar Baz\", ConfigUtil.labelize(\"fooBarBaz\")); Assert.assertEquals(\"Foo Bar Baz\", ConfigUtil.labelize(\"FooBarBaz\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void dispatch(Notification notification) { LOG.info(\"Sending SNMP trap: {}\", notification.Subject); try { createTransportMapping(); snmp = new Snmp(transportMapping); SnmpVersion snmpVersion = getSnmpVersion(notification.DispatchProperties); sendTraps(notification, snmpVersion); successCallback(notification); } catch (InvalidSnmpConfigurationException ex) { LOG.error(\"Unable to dispatch SNMP trap with invalid configuration. \" + ex.getMessage()); failureCallback(notification); } catch (Exception ex) { LOG.error(\"Error occurred during SNMP trap dispatching.\", ex); failureCallback(notification); transportMapping = null; } }### Assistant: @Test public void testDispatch_noRecipients() throws Exception { SNMPDispatcher dispatcher = new SNMPDispatcher(DEFAULT_SNMP_PORT); Notification notification = mock(Notification.class); notification.Callback = mock(DispatchCallback.class); notification.CallbackIds = new ArrayList<>(); Map<String, String> properties = new HashMap<String, String>(); properties.put(SNMPDispatcher.SUBJECT_OID_PROPERTY, \"1\"); properties.put(SNMPDispatcher.BODY_OID_PROPERTY, \"2\"); properties.put(SNMPDispatcher.PORT_PROPERTY, \"3\"); properties.put(SNMPDispatcher.COMMUNITY_PROPERTY, \"4\"); properties.put(SNMPDispatcher.SNMP_VERSION_PROPERTY, \"SNMPv1\"); properties.put(SNMPDispatcher.TRAP_OID_PROPERTY, \"1.3.6.1.6.3.1.1.5.4\"); notification.DispatchProperties = properties; notification.Body = \"body\"; notification.Subject = \"subject\"; notification.Recipients = new ArrayList<Recipient>(); dispatcher.dispatch(notification); verify(notification.Callback).onFailure(notification.CallbackIds); verify(notification.Callback, never()).onSuccess(notification.CallbackIds); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String toLabel(String string) { if (string == null) { return null; } boolean isQuestion = false; List<String> words = splitString(string); if (!words.isEmpty() && \"is\".equals(words.get(0))) { isQuestion = true; words.remove(0); } StringBuilder nb = new StringBuilder(); for (String word : words) { if (word.length() == 0) { continue; } if (ABBREVIATIONS.contains(word)) { nb.append(word.toUpperCase(Locale.ENGLISH)); } else { nb.append(Character.toUpperCase(word.charAt(0))); nb.append(word.substring(1)); } nb.append(' '); } if (nb.length() > 0) { nb.setLength(nb.length() - 1); } if (isQuestion) { nb.append('?'); } return nb.toString(); }### Assistant: @Test public void toLabel() { assertEquals(\"A String With Words\", StringUtils.toLabel(\"a-string-with-words\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void close() throws IOException { boolean triedToClose = false, success = false; try { flush(); ((FileOutputStream)out).getChannel().force(true); triedToClose = true; super.close(); success = true; } finally { if (success) { boolean renamed = tmpFile.renameTo(origFile); if (!renamed) { if (origFile.exists()) { try { Files.delete(origFile.toPath()); } catch (IOException e) { throw new IOException(\"Could not delete original file \" + origFile, e); } } try { NativeIO.renameTo(tmpFile, origFile); } catch (NativeIOException e) { throw new IOException(\"Could not rename temporary file \" + tmpFile + \" to \" + origFile + \" due to failure in native rename. \" + e.toString()); } } } else { if (!triedToClose) { IOUtils.closeStream(out); } if (!tmpFile.delete()) { LOG.warn(\"Unable to delete tmp file \" + tmpFile); } } } }### Assistant: @Test public void testFailToFlush() throws IOException { FileOutputStream fos = new FileOutputStream(DST_FILE); fos.write(TEST_STRING_2.getBytes()); fos.close(); OutputStream failingStream = createFailingStream(); failingStream.write(TEST_STRING.getBytes()); try { failingStream.close(); fail(\"Close didn't throw exception\"); } catch (IOException ioe) { } assertEquals(TEST_STRING_2, DFSTestUtil.readFile(DST_FILE)); assertEquals(\"Temporary file should have been cleaned up\", DST_FILE.getName(), Joiner.on(\",\").join(TEST_DIR.list())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static RetrieveAttribute of(final String thingId, final JsonPointer attributeJsonPointer, final DittoHeaders dittoHeaders) { return of(ThingId.of(thingId), attributeJsonPointer, dittoHeaders); }### Assistant: @Test public void tryToCreateInstanceWithValidArguments() { RetrieveAttribute.of(TestConstants.Thing.THING_ID, KNOWN_JSON_POINTER, TestConstants.EMPTY_DITTO_HEADERS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void inputWatermark(Watermark watermark, int channelIndex) { if (lastOutputStreamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isActive()) { long watermarkMillis = watermark.getTimestamp(); if (watermarkMillis > channelStatuses[channelIndex].watermark) { channelStatuses[channelIndex].watermark = watermarkMillis; if (!channelStatuses[channelIndex].isWatermarkAligned && watermarkMillis >= lastOutputWatermark) { channelStatuses[channelIndex].isWatermarkAligned = true; } findAndOutputNewMinWatermarkAcrossAlignedChannels(); } } }### Assistant: @Test public void testMultipleInputYieldsWatermarkOnlyWhenAllChannelsReceivesWatermarks() { BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler(); StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput); valve.inputWatermark(new Watermark(0), 0); valve.inputWatermark(new Watermark(0), 1); assertEquals(null, valveOutput.popLastSeenOutput()); valve.inputWatermark(new Watermark(0), 2); assertEquals(new Watermark(0), valveOutput.popLastSeenOutput()); assertEquals(null, valveOutput.popLastSeenOutput()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static char[][] split( final char[] inputArray, final char split ) { char[][] results = new char[ 16 ][]; int resultIndex = 0; int startCurrentLineIndex = 0; int currentLineLength = 1; char c = 0; int index = 0; for (; index < inputArray.length; index++, currentLineLength++ ) { c = inputArray[ index ]; if ( c == split ) { if ( resultIndex == results.length ) { results = _grow( results ); } results[ resultIndex ] = Chr.copy( inputArray, startCurrentLineIndex, currentLineLength - 1 ); startCurrentLineIndex = index + 1; currentLineLength = 0; resultIndex++; } } if (c!=split) { if ( resultIndex == results.length ) { results = _grow( results ); } results[resultIndex] = Chr.copy( inputArray, startCurrentLineIndex, currentLineLength - 1); resultIndex++; } else if (index == inputArray.length) { } else { if ( resultIndex == results.length ) { results = _grow( results ); } results[ resultIndex ] = Chr.copy( inputArray, startCurrentLineIndex, inputArray.length - index - 1); resultIndex++; } int actualLength = resultIndex; if ( actualLength < results.length ) { final int newSize = results.length - actualLength; results = __shrink( results, newSize ); } return results; }### Assistant: @Test public void splitOnly4_startDelim() { String string = \"_01_34_67_90\"; final char[][] split = CharScanner.split(string.toCharArray(), '_'); String zero = new String(split[0]); ok |= zero.equals(\"\") || die(zero); String one = new String(split[1]); ok |= one.equals(\"01\") || die(one); String two = new String(split[2]); ok |= two.equals(\"34\") || die(two); String three = new String(split[3]); ok |= three.equals(\"67\") || die(three); String four = new String(split[4]); ok |= four.equals(\"90\") || die(three); ok |= split.length == 5 || die(\"Length is wrong size\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public VideoDecoder(IMediaCodec mediaCodec) { super(mediaCodec, MediaFormatType.VIDEO); }### Assistant: @Test public void mediaCodec_releaseOutputBuffer_doRenderVariableMustBeTrue() { IMediaCodec mediaCodec = create.mediaCodec() .withDequeueOutputBufferIndex(1) .construct(); VideoDecoder decoder = create.videoDecoder() .with(mediaCodec) .construct(); ISurfaceWrapper surface = create.surfaceContainer().construct(); decoder.setOutputSurface(surface); decoder.releaseOutputBuffer(1); verify(mediaCodec).releaseOutputBuffer(eq(1), eq(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] decrypt(byte[] cipherText, byte[] keyCandidate) { return decrypt(cipherText, keyCandidate, cipherText.length); }### Assistant: @Test (expected = NullPointerException.class) public void testDecryptNullCipher() { PseudoOtp.decrypt(null, new byte[] { 0x00 }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean toBoolean() { String value = toString(); return BooleanUtils.toBoolean(value); }### Assistant: @Test public void testToBooleanWithValidValues() throws Exception { assertEquals(true, new RequestParameter(null, \"true\").toBoolean()); assertEquals(true, new RequestParameter(null, \"TRUE\").toBoolean()); assertEquals(true, new RequestParameter(null, \"yes\").toBoolean()); assertEquals(true, new RequestParameter(null, \"YES\").toBoolean()); assertEquals(false, new RequestParameter(null, \"false\").toBoolean()); assertEquals(false, new RequestParameter(null, \"no\").toBoolean()); assertEquals(false, new RequestParameter(null, \"1\").toBoolean()); assertEquals(false, new RequestParameter(null, \"0\").toBoolean()); assertEquals(false, new RequestParameter(null, \"foo\").toBoolean()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FEELFnResult<BigDecimal> invoke(@ParameterName( \"n\" ) BigDecimal n) { if ( n == null ) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"n\", \"cannot be null\")); } return FEELFnResult.ofResult( n.setScale( 0, BigDecimal.ROUND_FLOOR ) ); }### Assistant: @Test public void invokeZero() { FunctionTestUtil.assertResultBigDecimal(floorFunction.invoke(BigDecimal.ZERO), BigDecimal.ZERO); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final long serialize () throws InternetSCSIException { checkIntegrity(); long isid = 0; int firstLine = c; firstLine |= b << Constants.ONE_BYTE_SHIFT; firstLine |= a << Constants.THREE_BYTES_SHIFT; firstLine &= 0x00ffffff; firstLine |= t.value() << T_FIELD_SHIFT; isid = Utils.getUnsignedLong(firstLine) << Constants.FOUR_BYTES_SHIFT; isid |= Utils.getUnsignedLong(d) << Constants.TWO_BYTES_SHIFT; return isid; }### Assistant: @Test public void testSerialize1 () throws InternetSCSIException { ISID isid = new ISID(Format.OUI_FORMAT, (byte) 0x00, (short) 0x0000, (byte) 0x00, (short) 0xABCD); assertEquals(TEST_CASE, isid.serialize()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void correct(BiblioItem bib, BiblioItem bibo) { if (bibo.getDOI() != null) bib.setDOI(bibo.getDOI()); if (bibo.getPMID() != null) bib.setPMID(bibo.getPMID()); if (bibo.getPMCID() != null) bib.setPMCID(bibo.getPMCID()); if (bibo.getPII() != null) bib.setPII(bibo.getPII()); if (bibo.getIstexId() != null) bib.setIstexId(bibo.getIstexId()); if (bibo.getArk() != null) bib.setArk(bibo.getArk()); if (bibo.getOAURL() != null) bib.setOAURL(bibo.getOAURL()); if (bibo.getJournal() != null) { bib.setJournal(bibo.getJournal()); if (bibo.getBookTitle() == null) { bib.setBookTitle(null); } } if (bibo.getAuthors() != null) bib.setAuthors(bibo.getAuthors()); if (bibo.getEditors() != null) bib.setEditors(bibo.getEditors()); if (bibo.getBookTitle() != null) { bib.setBookTitle(bibo.getBookTitle()); if (bibo.getJournal() == null) { bib.setJournal(null); } } if (bibo.getVolume() != null) bib.setVolume(bibo.getVolume()); if (bibo.getVolumeBlock() != null) bib.setVolumeBlock(bibo.getVolumeBlock(), false); if (bibo.getIssue() != null) bib.setIssue(bibo.getIssue()); if (bibo.getBeginPage() != -1) bib.setBeginPage(bibo.getBeginPage()); if (bibo.getEndPage() != -1) bib.setEndPage(bibo.getEndPage()); if (bibo.getPageRange() != null) bib.setPageRange(bibo.getPageRange()); if (bibo.getPublicationDate() != null) bib.setPublicationDate(bibo.getPublicationDate()); if (bibo.getSubmissionDate() != null) bib.setSubmissionDate(bibo.getSubmissionDate()); if (bibo.getDownloadDate() != null) bib.setDownloadDate(bibo.getDownloadDate()); if (bibo.getYear() != null) bib.setYear(bibo.getYear()); if (bibo.getNormalizedPublicationDate() != null) bib.setNormalizedPublicationDate(bibo.getNormalizedPublicationDate()); if (bibo.getMonth() != null) bib.setMonth(bibo.getMonth()); if (bibo.getDay() != null) bib.setDay(bibo.getDay()); if (bibo.getE_Year() != null) bib.setE_Year(bibo.getE_Year()); if (bibo.getE_Month() != null) bib.setE_Month(bibo.getE_Month()); if (bibo.getE_Day() != null) bib.setE_Day(bibo.getE_Day()); if (bibo.getA_Year() != null) bib.setA_Year(bibo.getA_Year()); if (bibo.getA_Month() != null) bib.setA_Month(bibo.getA_Month()); if (bibo.getA_Day() != null) bib.setA_Day(bibo.getA_Day()); if (bibo.getS_Year() != null) bib.setS_Year(bibo.getS_Year()); if (bibo.getS_Month() != null) bib.setS_Month(bibo.getS_Month()); if (bibo.getS_Day() != null) bib.setS_Day(bibo.getS_Day()); if (bibo.getD_Year() != null) bib.setD_Year(bibo.getD_Year()); if (bibo.getD_Month() != null) bib.setD_Month(bibo.getD_Month()); if (bibo.getD_Day() != null) bib.setD_Day(bibo.getD_Day()); if (bibo.getLocation() != null) bib.setLocation(bibo.getLocation()); if (bibo.getPublisher() != null) bib.setPublisher(bibo.getPublisher()); if (bibo.getTitle() != null) { bib.setTitle(bibo.getTitle()); } if (bibo.getArticleTitle() != null) { bib.setArticleTitle(bibo.getArticleTitle()); } if (bibo.getJournalAbbrev() != null) { bib.setJournalAbbrev(bibo.getJournalAbbrev()); } if (bibo.getISSN() != null) bib.setISSN(bibo.getISSN()); if (bibo.getISSNe() != null) bib.setISSNe(bibo.getISSNe()); if (bibo.getISBN10() != null) bib.setISBN10(bibo.getISBN10()); if (bibo.getISBN13() != null) bib.setISBN13(bibo.getISBN13()); if (bibo.getItem() != -1) { bib.setItem(bibo.getItem()); } if (bibo.getCollaboration() != null) { bib.setCollaboration(bibo.getCollaboration()); } if (!CollectionUtils.isEmpty(bibo.getFullAuthors())) { if (CollectionUtils.isEmpty(bib.getFullAuthors())) bib.setFullAuthors(bibo.getFullAuthors()); else if (bibo.getFullAuthors().size() == 1) { Person auto = (Person) bibo.getFullAuthors().get(0); List<Person> auts = bib.getFullAuthors(); if (auts != null) { for (Person aut : auts) { if (StringUtils.isNotBlank(aut.getLastName()) && StringUtils.isNotBlank(auto.getLastName())) { if (aut.getLastName().toLowerCase().equals(auto.getLastName().toLowerCase())) { if (StringUtils.isBlank(aut.getFirstName()) || (auto.getFirstName() != null && aut.getFirstName().length() <= auto.getFirstName().length() && auto.getFirstName().toLowerCase().startsWith(aut.getFirstName().toLowerCase()))) { aut.setFirstName(auto.getFirstName()); aut.setCorresp(true); if (StringUtils.isNotBlank(auto.getEmail())) aut.setEmail(auto.getEmail()); if (StringUtils.isNotBlank(auto.getMiddleName()) && (StringUtils.isBlank(aut.getMiddleName()))) aut.setMiddleName(auto.getMiddleName()); } } } } } } else if (bibo.getFullAuthors().size() > 1) { for (Person aut : bibo.getFullAuthors()) { for (Person aut2 : bib.getFullAuthors()) { if (StringUtils.isNotBlank(aut2.getLastName())) { String aut2_lastname = aut2.getLastName().toLowerCase(); if (StringUtils.isNotBlank(aut.getLastName())) { String aut_lastname = aut.getLastName().toLowerCase(); if (aut_lastname.equals(aut2_lastname)) { if ( StringUtils.isBlank(aut2.getFirstName()) || (StringUtils.isNotBlank(aut2.getFirstName()) && StringUtils.isNotBlank(aut.getFirstName())) ) { if ( StringUtils.isBlank(aut2.getFirstName()) || aut.getFirstName().equals(aut2.getFirstName()) || ( aut.getFirstName().length() == 1 && aut.getFirstName().equals(aut2.getFirstName().substring(0,1)) ) ) { if (StringUtils.isNotBlank(aut2.getFirstName()) && aut2.getFirstName().length() > aut.getFirstName().length()) aut.setFirstName(aut2.getFirstName()); if (StringUtils.isBlank(aut.getMiddleName())) aut.setMiddleName(aut2.getMiddleName()); if (StringUtils.isBlank(aut.getTitle())) aut.setTitle(aut2.getTitle()); if (StringUtils.isBlank(aut.getSuffix())) aut.setSuffix(aut2.getSuffix()); if (StringUtils.isBlank(aut.getORCID())) aut.setORCID(aut2.getORCID()); if (StringUtils.isBlank(aut.getEmail())) aut.setEmail(aut2.getEmail()); if(!CollectionUtils.isEmpty(aut2.getAffiliations())) aut.setAffiliations(aut2.getAffiliations()); if (!CollectionUtils.isEmpty(aut2.getAffiliationBlocks())) aut.setAffiliationBlocks(aut2.getAffiliationBlocks()); if (!CollectionUtils.isEmpty(aut2.getAffiliationMarkers())) aut.setAffiliationMarkers(aut2.getAffiliationMarkers()); if (!CollectionUtils.isEmpty(aut2.getMarkers())) aut.setMarkers(aut2.getMarkers()); if (!CollectionUtils.isEmpty(aut2.getLayoutTokens())) aut.setLayoutTokens(aut2.getLayoutTokens()); break; } } } } } } } bib.setFullAuthors(bibo.getFullAuthors()); } } }### Assistant: @Test public void correct_empty_shouldNotFail() { BiblioItem.correct(new BiblioItem(), new BiblioItem()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Range findRange(Array historyTimes, double referenceTime, double timeDelta) { if (historyTimes.getRank() != 1) { throw new IllegalArgumentException(\"history.getRank() != 1\"); } if (referenceTime + timeDelta < historyTimes.getDouble(0)) { return Range.EMPTY; } final int historyLength = historyTimes.getIndexPrivate().getShape(0); if (referenceTime - timeDelta > historyTimes.getDouble(historyLength - 1)) { return Range.EMPTY; } int startIndex = -1; int endIndex = -1; for (int i = 0; i < historyLength; i++) { final double time = historyTimes.getDouble(i); if (startIndex == -1) { if (time >= referenceTime - timeDelta) { startIndex = i; endIndex = startIndex; } } else { if (time <= referenceTime + timeDelta) { endIndex = i; } else { break; } } } try { return new Range(startIndex, endIndex); } catch (InvalidRangeException e) { return Range.EMPTY; } }### Assistant: @Test public void testFindRange_ForReferenceTimeAtLowerLimit_SECS_1978() { final Array historyTimes = InsituData.createHistoryTimeArray_SECS_1978(); final double referenceTime = 790323660 - HALF_DAY_SECS; final Range range = InsituReaderHelper.findRange(historyTimes, referenceTime, HALF_DAY_SECS); assertNotSame(Range.EMPTY, range); assertTrue(range.first() == range.last()); assertTrue(historyTimes.getDouble(range.first()) == referenceTime + HALF_DAY_SECS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static IHmsTask getTask( TaskType taskType, HmsNode node ) { IHmsTask task = null; switch ( taskType ) { default: return task; } }### Assistant: @Test public void testGetTask_PowerResetServerTask() { logger.info(\"[TS] : testGetTask_PowerResetServerTask\"); TaskType taskType = TaskType.PowerResetServer; ServerNode sNode = new ServerNode(\"2\",\"10.28.197.202\",\"ADMIN\",\"ADMIN\"); sNode.setOsUserName(\"root\"); sNode.setOsPassword(\"l@ni3r2o14\"); sNode.setIbIpAddress(\"10.28.197.22\"); IHmsTask result = TaskFactory.getTask(taskType, sNode); logger.info(\"[TS] : Expected Result : Not Null , Actual Result : \"+result); assertNotNull(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String[] getDefaultFileExtensions() { return new String[]{FILE_EXTENSION_NC}; }### Assistant: @Test public void testGetFileExtension() { final String[] defaultFileExtensions = plugIn.getDefaultFileExtensions(); assertEquals(1, defaultFileExtensions.length); assertEquals(\".nc\", defaultFileExtensions[0]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ValidatorChain validatePermisionUpdateAndDelete(LoginUser user, UserGroup userGroup, Errors errors) throws SQLException { return ValidatorChain.newInstance().controllerValidate(errors) .addAssert(() -> this.validateUserOptUserPermisionInGroup(user, userGroup), \"\u4f60\u6ca1\u6709\u5f53\u524dDAS Team\u7684\u7ec4\u5458\u64cd\u4f5c\u6743\u9650.\") .addAssert(() -> this.validateUserPermisionCompare(user, userGroup), \"\u4f60\u6240\u6388\u4e88\u7684\u6743\u9650\u5927\u4e8e\u4f60\u6240\u62e5\u6709\u7684\u6743\u9650.\"); }### Assistant: @Test public void validatePermisionUpdateAndDeleteTest() throws Exception { LoginUser user = LoginUser.builder().id(1L).build(); UserGroup userGroup = UserGroup.builder().update_user_no(\"name\").build(); Errors errors = new BeanPropertyBindingResult(userGroup, \"userGroup\", true, 256); Assert.assertTrue(groupMemberService.validatePermisionUpdateAndDelete(user, userGroup, errors).validate().isValid()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TxHash send(final AccountAddress sender, final AccountAddress recipient, final Aer amount, final BytesValue payload) { return request(keyStoreMethods.getSend(), Arrays.asList(sender, recipient, amount, payload)); }### Assistant: @Test public void testSend() throws Exception { final KeyStoreTemplate keystoreTemplate = new KeyStoreTemplate(contextStorage); final Requester mockRequester = mock(Requester.class); final TxHash expected = TxHash.of(BytesValue.EMPTY); when(mockRequester.request(ArgumentMatchers.<Invocation<?>>any())) .thenReturn(expected); keystoreTemplate.requester = mockRequester; final TxHash actual = keystoreTemplate .send(anyAccountAddress, anyAccountAddress, anyAmount, BytesValue.EMPTY); assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean test(ExportParameters parameters) { if (parameters == null) { return false; } if (parameters.getContent() != null) { return false; } if (StringUtils.isEmpty(parameters.getPreparationId())) { return false; } final OptimizedPreparationInput optimizedPreparationInput = new OptimizedPreparationInput(parameters); return optimizedPreparationInput.applicable(); }### Assistant: @Test public void testAcceptKO_noStepId() { preparationRepository.add(new Preparation(\"prep-1234\", \"1234\", Step.ROOT_STEP.id(), \"0.1\")); ExportParameters exportParameters = new ExportParameters(); exportParameters.setPreparationId(\"prep-1234\"); assertFalse(optimizedExportStrategy.test(exportParameters)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <K, V> ImmutableMap<K, V> parseAndFilter( String s, Function<String, K> keyParser, Function<String, V> valueParser, BiPredicate<K, V> filter) { Builder<K, V> mapBuilder = ImmutableMap.builder(); for (String objectAndWeight : s.split(\";\")) { String[] keyAndWeight = objectAndWeight.split(\":\"); K key = keyParser.apply(keyAndWeight[0]); V value = valueParser.apply(keyAndWeight[1]); if (filter.test(key, value)) { mapBuilder.put(key, value); } } return mapBuilder.build(); }### Assistant: @Test void testParseAndFilterNoneRemain() { String toParse = \"A:1;B:2;C:3;D:4\"; ImmutableMap<String, Integer> parsed = ImmutableMapFactory.parseAndFilter( toParse, s -> s, Integer::parseInt, (key, value) -> !key.equals(\"A\") && value > 4); ImmutableMap<String, Integer> expected = ImmutableMap.of(); Assertions.assertEquals(expected, parsed); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T> T getInstance(final Class<T> clazz) { if (!definitions.containsKey(clazz)) { definitions.put(clazz, createProxy(clazz)); } return clazz.cast(definitions.get(clazz)); }### Assistant: @Test public void testGetInstanceForSameTypeLeadsToExecutionOfProcessBeforeAllOnlyOnce() throws Exception { final ClassA obj1 = factory.getInstance(ClassA.class); final ClassA obj2 = factory.getInstance(ClassA.class); assertNotNull(obj1); assertNotNull(obj2); final ArgumentCaptor<TestInvocation> invocationCaptor = ArgumentCaptor.forClass(TestInvocation.class); verify(executor).processBeforeAll(invocationCaptor.capture()); final TestInvocation invocation = invocationCaptor.getValue(); assertThat(invocation.getTestClass(), equalTo(ClassA.class)); assertThat(invocation.getContext(), equalTo(ctx)); assertThat(invocation.getFeatureResolver(), notNullValue()); verifyNoMoreInteractions(executor); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String encodeArray(String[] plain) { if (plain == null) return null; String[] escaped = new String[plain.length]; for (int i = 0; i < plain.length; ++i) { if (plain[i] == null) { plain[i] = \"\"; } escaped[i] = StringUtils.escapeString(plain[i]); } return StringUtils.arrayToString(escaped); }### Assistant: @Test public void testEncodeArray() { Assert.assertEquals(null, TempletonUtils.encodeArray((String []) null)); String[] tmp = new String[0]; Assert.assertTrue(TempletonUtils.encodeArray(new String[0]).length() == 0); tmp = new String[3]; tmp[0] = \"fred\"; tmp[1] = null; tmp[2] = \"peter,lisa,, barney\"; Assert.assertEquals(\"fred,,peter\" + StringUtils.ESCAPE_CHAR + \",lisa\" + StringUtils.ESCAPE_CHAR + \",\" + StringUtils.ESCAPE_CHAR + \", barney\", TempletonUtils.encodeArray(tmp)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = USER_NAMESPACE_AUTHORIZATIONS_URI_PREFIX + \"/userIds/{userId}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_USER_NAMESPACE_AUTHORIZATIONS_BY_USERID_GET) public UserNamespaceAuthorizations getUserNamespaceAuthorizationsByUserId(@PathVariable(\"userId\") String userId) { return userNamespaceAuthorizationService.getUserNamespaceAuthorizationsByUserId(userId); }### Assistant: @Test public void testGetUserNamespaceAuthorizationsByUserId() throws Exception { UserNamespaceAuthorizations userNamespaceAuthorizations = new UserNamespaceAuthorizations(); when(userNamespaceAuthorizationService.getUserNamespaceAuthorizationsByUserId(USER_ID)).thenReturn(userNamespaceAuthorizations); UserNamespaceAuthorizations resultUserNamespaceAuthorizations = userNamespaceAuthorizationRestController.getUserNamespaceAuthorizationsByUserId(USER_ID); verify(userNamespaceAuthorizationService).getUserNamespaceAuthorizationsByUserId(USER_ID); verifyNoMoreInteractions(userNamespaceAuthorizationService); assertEquals(resultUserNamespaceAuthorizations, userNamespaceAuthorizations); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isValidIpV4Address(String ip) { return isValidIpV4Address(ip, 0, ip.length()); }### Assistant: @Test public void testIsValidIpV4Address() { for (String host : validIpV4Hosts.keySet()) { assertTrue(host, isValidIpV4Address(host)); } for (String host : invalidIpV4Hosts.keySet()) { assertFalse(host, isValidIpV4Address(host)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void forEachRemaining(LongConsumer action) { requireNonNull(action); if (hasNext) { action.accept(element); hasNext = false; } }### Assistant: @Test void forEachRemainingConsumer() { instance.forEachRemaining((Consumer<Long>) i -> cnt.incrementAndGet()); assertEquals(1, cnt.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Binder dateBinder() { return DATE_BINDER; }### Assistant: @Test public void dateBinderBindsLocalDateTime() throws SQLException { Binder binder = Binders.dateBinder(); binder.bind(stmt, 1, LocalDateTime.parse(\"1975-07-19T01:02:03.000\")); verify(stmt).setDate(1, Date.valueOf(\"1975-07-19\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setFunction(ObjectiveFunction function) { this.function = function; this.descriptor.setNumVariables(function.getDimension()); this.descriptor.setVariablesLowerBounds(function.getMinimum()); this.descriptor.setVariablesLengths(new int[function.getDimension()]); this.descriptor.setVariablesPrecisions(new double[function.getDimension()]); switch (this.encodingType){ case FixedLength: processFixedLengthEncoding(); break; case FixedPrecision: processFixedPrecisionEncoding(); break; } }### Assistant: @Test public void testSetFunction2() throws Exception { this.factory.setEncodingType(EncodingType.FixedPrecision); this.factory.setFixedPrecision(1.0); this.factory.setFixedLength(16); this.factory.setFunction(this.function); SimpleBinaryGenomeDescriptor descriptor = this.factory.descriptor; assertEquals(function.getDimension(), descriptor.getNumVariables()); Assert.assertArrayEquals(function.getMinimum(), descriptor.getVariablesLowerBounds(), 0.0); Assert.assertArrayEquals(new int[]{4, 37, 339}, descriptor.getVariablesLengths()); Assert.assertArrayEquals(new double[]{1, 1, 1}, descriptor.getVariablesPrecisions(), 0.00000000001); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ElementProperty isAfterSibling(Path... paths) { return new RelationBetweenMultiElement(\"preceding-sibling\", Arrays.asList(paths)) { @Override public String toString() { return asString(\"is after sibling\"); } }; }### Assistant: @Test public void insideAndFolowingSibling2() { Path a = div.inside(body); Path el = span.that(isAfterSibling(a)); logit(el); NodeList nodes = findAllByXpath(\"<body><span>abc</span><div>abc</div><span>def</span></body>\", el); assertThat(nodes.getLength(), equalTo(1)); assertThat(getElementName(nodes.item(0)), equalTo(\"span\")); assertThat(getText(nodes.item(0)), equalTo(\"def\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean remove(Double timestamp) { Object values = getValuesArray(); final int removeIndex = removeInner(timestamp); if (removeIndex >= 0) { if (removeIndex != size) { System.arraycopy(values, removeIndex + 1, values, removeIndex, size - removeIndex); } return true; } return false; }### Assistant: @Test public void testRemove() { for (TimestampMap set : getAllInstances()) { Object[] defaultValues = getTestValues(set); set.put(1.0, defaultValues[0]); set.put(2.0, defaultValues[1]); Assert.assertTrue(set.remove(1.0)); Assert.assertFalse(set.contains(1.0)); Assert.assertEquals(set.get(2.0, null), defaultValues[1]); Assert.assertTrue(set.remove(2.0)); Assert.assertTrue(set.isEmpty()); Assert.assertFalse(set.contains(1.0)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getWeeklyCronExpression( int minutes, int hours, int dayOfWeek ) { return getCronExpression( \"0\", String.valueOf( minutes ), String.valueOf( hours ), null, null, Weekday.values()[(dayOfWeek % 7)].name ); }### Assistant: @Test public void getWeeklyCronExpressionForAllWeekdays() { assertEquals( \"0 0 0 * * SUN\", CronUtils.getWeeklyCronExpression( 0, 0, 0 ) ); assertEquals( \"0 0 0 * * MON\", CronUtils.getWeeklyCronExpression( 0, 0, 1 ) ); assertEquals( \"0 0 0 * * TUE\", CronUtils.getWeeklyCronExpression( 0, 0, 2 ) ); assertEquals( \"0 0 0 * * WED\", CronUtils.getWeeklyCronExpression( 0, 0, 3 ) ); assertEquals( \"0 0 0 * * THU\", CronUtils.getWeeklyCronExpression( 0, 0, 4 ) ); assertEquals( \"0 0 0 * * FRI\", CronUtils.getWeeklyCronExpression( 0, 0, 5 ) ); assertEquals( \"0 0 0 * * SAT\", CronUtils.getWeeklyCronExpression( 0, 0, 6 ) ); assertEquals( \"0 0 0 * * SUN\", CronUtils.getWeeklyCronExpression( 0, 0, 7 ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void setBytes(byte[] data, byte[] input, int startOffset, int numBits) throws BufferException { checkExceptions(data, startOffset, numBits); insertBits(data, input, startOffset, numBits); }### Assistant: @Test public void testSetBytes() throws Exception { byte[] input = { 0, 1 }; byte[] data = { 6, 0 }; BitBufferHelper.setBytes(data, input, 7, 9); Assert.assertTrue(data[0] == 6); Assert.assertTrue(data[1] == 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public InputStream asStream() throws Exception { return delegate.asStream(); }### Assistant: @Test public void asStreamShouldDelegates() throws Exception { InputStream expected = mock(InputStream.class); when(mockResponse.asStream()).thenReturn(expected); assertSame(expected, toTest.asStream()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Features removeProperty(final String featureId, final JsonPointer propertyPath) { final Feature feature = getFeatureOrNull(featureId); if (null != feature) { return setFeature(feature.removeProperty(propertyPath)); } return this; }### Assistant: @Test public void removePropertyFromNonExistingFeatureReturnsSameFeaturesObject() { final Features unchangedFeatures = underTest.removeProperty(\"waldo\", YEAR_1_PROPERTY_POINTER); assertThat(unchangedFeatures).isSameAs(underTest); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Map<String, BundleArtifacts> build(Bundle bundle, BundleType bundleType, Document document, ProjectInfo projectInfo) { return build(bundle, bundleType, document, projectInfo, false); }### Assistant: @Test public void testAnnotatedEncassDeleteBundle_WithPolicyFragment() { BundleEntityBuilder builder = createBundleEntityBuilder(); Bundle bundle = createBundleWithPolicyFragment(false, projectInfo); Encass encass = buildTestEncassWithAnnotation(TEST_GUID, TEST_ENCASS_POLICY, false); bundle.putAllEncasses(ImmutableMap.of(TEST_ENCASS, encass)); Map<String, BundleArtifacts> bundles = builder.build(bundle, DEPLOYMENT, DocumentTools.INSTANCE.getDocumentBuilder().newDocument(), projectInfo); assertNotNull(bundles); assertEquals(1, bundles.size()); Element deleteBundleElement = bundles.get(TEST_ENCASS_ANNOTATION_NAME + \"-1.0\").getDeleteBundle().getElement(); assertNotNull(deleteBundleElement); assertEquals(BundleDocumentBuilder.GATEWAY_MANAGEMENT, deleteBundleElement.getAttribute(BundleDocumentBuilder.L7)); assertEquals(BUNDLE, deleteBundleElement.getTagName()); final int expectedElementCountBundle = 3; final Element references = getSingleChildElement(deleteBundleElement, REFERENCES); assertNotNull(references); final List<Element> itemList = getChildElements(references, ITEM); assertNotNull(itemList); assertEquals(expectedElementCountBundle, itemList.size()); final Element item1 = itemList.get(2); assertEquals(\"::\" + projectInfo.getGroupName() + \".\" + TEST_ENCASS_ANNOTATION_NAME + \"::\" + TEST_POLICY_FRAGMENT + \"::\" + projectInfo.getVersion() , getSingleChildElementTextContent(item1, NAME)); assertEquals(EntityTypes.POLICY_TYPE, getSingleChildElementTextContent(item1, TYPE)); assertNotNull(getSingleChildElement(item1, RESOURCE)); final Element item2 = itemList.get(1); assertEquals(\"::\" + projectInfo.getGroupName() + \".\" + TEST_ENCASS_ANNOTATION_NAME + \"::\" + TEST_ENCASS_POLICY + \"::\" + projectInfo.getVersion() , getSingleChildElementTextContent(item2, NAME)); assertEquals(EntityTypes.POLICY_TYPE, getSingleChildElementTextContent(item2, TYPE)); assertNotNull(getSingleChildElement(item2, RESOURCE)); final Element item3 = itemList.get(0); assertEquals(\"::\" + projectInfo.getGroupName() + \".\" + TEST_ENCASS_ANNOTATION_NAME + \"::\" + TEST_ENCASS + \"::\" + projectInfo.getVersion(), getSingleChildElementTextContent(item3, NAME)); assertEquals(EntityTypes.ENCAPSULATED_ASSERTION_TYPE, getSingleChildElementTextContent(item3, TYPE)); assertNotNull(getSingleChildElement(item3, RESOURCE)); final Element mappings = getSingleChildElement(deleteBundleElement, MAPPINGS); assertNotNull(mappings); final List<Element> mappingItemList = getChildElements(mappings, MAPPING); assertEquals(expectedElementCountBundle, mappingItemList.size()); final Element mapping1 = mappingItemList.get(2); final Element mapping1Properties = getSingleChildElement(mapping1, PROPERTIES); Set<String> propertyValues = getChildElementsTextContents(mapping1Properties, PROPERTY); assertTrue(propertyValues.contains(\"::\" + projectInfo.getGroupName() + \".\" + TEST_ENCASS_ANNOTATION_NAME + \"::\" + TEST_POLICY_FRAGMENT + \"::\" + projectInfo.getVersion())); assertEquals(MappingActions.DELETE, mapping1.getAttribute(\"action\")); assertEquals(EntityTypes.POLICY_TYPE, mapping1.getAttribute(\"type\")); final Element mapping2 = mappingItemList.get(1); final Element mapping2Properties = getSingleChildElement(mapping2, PROPERTIES); propertyValues = getChildElementsTextContents(mapping2Properties, PROPERTY); assertTrue(propertyValues.contains(\"::\" + projectInfo.getGroupName() + \".\" + TEST_ENCASS_ANNOTATION_NAME + \"::\" + TEST_ENCASS_POLICY + \"::\" + projectInfo.getVersion())); assertEquals(MappingActions.DELETE, mapping2.getAttribute(\"action\")); assertEquals(EntityTypes.POLICY_TYPE, mapping2.getAttribute(\"type\")); final Element mapping3 = mappingItemList.get(0); final Element mapping3Properties = getSingleChildElement(mapping3, PROPERTIES); propertyValues = getChildElementsTextContents(mapping3Properties, PROPERTY); assertTrue(propertyValues.contains(\"::\" + projectInfo.getGroupName() + \".\" + TEST_ENCASS_ANNOTATION_NAME + \"::\" + TEST_ENCASS + \"::\" + projectInfo.getVersion())); assertEquals(MappingActions.DELETE, mapping3.getAttribute(\"action\")); assertEquals(EntityTypes.ENCAPSULATED_ASSERTION_TYPE, mapping3.getAttribute(\"type\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setDescription(String description) { this.description = description; }### Assistant: @Test public void testSetDescription() { fail(\"Not yet implemented\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String asString() { if (expression == null) { GroovyExpressionTranslator expressionTranslator = new GroovyExpressionTranslator(); condition.getExpression().accept(expressionTranslator); expression = expressionTranslator.getTranslatedExpression(); } return expression; }### Assistant: @Test public void testNested() throws Exception { Condition condition = new Condition(); condition.setExpression(new BinaryExpression(Operator.LESS_THAN, new ArrayFieldExpression( new MapFieldExpression(getVariable(\"map\"), \"foo\"), 100), getVariable(\"b\"))); GroovyExpression expr = new GroovyExpression(condition); Assert.assertEquals(\"map['foo'][100] < b\", expr.asString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean evaluate(Resource resource) { Predicate[] predicates = getPredicates(); for (Predicate predicate : predicates) { if (!predicate.evaluate(resource)) { return false; } } return true; }### Assistant: @Test public void testApply() { Resource resource = new ResourceImpl(Resource.Type.HostComponent); String propertyId1 = PropertyHelper.getPropertyId(\"category1\", \"property1\"); String propertyId2 = PropertyHelper.getPropertyId(\"category1\", \"property2\"); String propertyId3 = PropertyHelper.getPropertyId(\"category1\", \"property3\"); EqualsPredicate predicate1 = new EqualsPredicate<String>(propertyId1, \"v1\"); EqualsPredicate predicate2 = new EqualsPredicate<String>(propertyId2, \"v2\"); EqualsPredicate predicate3 = new EqualsPredicate<String>(propertyId3, \"v3\"); AndPredicate andPredicate = new AndPredicate(predicate1, predicate2, predicate3); resource.setProperty(propertyId1, \"v1\"); resource.setProperty(propertyId2, \"monkey\"); resource.setProperty(propertyId3, \"v3\"); Assert.assertFalse(andPredicate.evaluate(resource)); resource.setProperty(propertyId2, \"v2\"); Assert.assertTrue(andPredicate.evaluate(resource)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void delete(String key) { RBucket<byte[]> bucket = getClient().getBucket(key, ByteArrayCodec.INSTANCE); bucket.delete(); }### Assistant: @Test public void testDelete() { RBucket<byte[]> bucket = client.getBucket(\"test\", ByteArrayCodec.INSTANCE); bucket.set(\"abcd\".getBytes()); cache.delete(\"test\"); assertNull(cache.get(\"test\")); assertNull(bucket.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Timer.Context getFlowSetupTimerContext() { return this.flowSetupTimer.time(); }### Assistant: @Test public void testFlowSetupMetrics() throws InterruptedException { assertThat(this.testUtil.getTimerCount(ExecMetrics.FLOW_SETUP_TIMER_NAME)).isEqualTo(0); Timer.Context context = this.metrics.getFlowSetupTimerContext(); try { Thread.sleep(10); } finally { context.stop(); } assertThat(this.testUtil.getTimerCount(ExecMetrics.FLOW_SETUP_TIMER_NAME)).isEqualTo(1); Snapshot snapshot = this.testUtil.getTimerSnapshot(ExecMetrics.FLOW_SETUP_TIMER_NAME); double val = snapshot.getMax(); assertThat(snapshot.getMax()).isGreaterThanOrEqualTo(10); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String appendCookie(String cookies, String newCookie) { if (cookies == null || cookies.length() == 0) { return newCookie; } return cookies + \"; \" + newCookie; }### Assistant: @Test public void testAppendCookie() throws Exception { Assert.assertEquals(\"newCookie\", URLStreamProvider.appendCookie(null, \"newCookie\")); Assert.assertEquals(\"newCookie\", URLStreamProvider.appendCookie(\"\", \"newCookie\")); Assert.assertEquals(\"oldCookie; newCookie\", URLStreamProvider.appendCookie(\"oldCookie\", \"newCookie\")); Assert.assertEquals(\"oldCookie1; oldCookie2; newCookie\", URLStreamProvider.appendCookie(\"oldCookie1; oldCookie2\", \"newCookie\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void createEcho(UUID accountId, GuardedString password) { AccPasswordFilterEchoItemDto echo = new AccPasswordFilterEchoItemDto(hashPassword(password), accountId); ZonedDateTime now = ZonedDateTime.now(); echo.setValidityChecked(true); echo.setChanged(true); echo.setChangeDate(now); echo.setValidateDate(now); LOG.info(\"For account [{}] will be created new standard echo with validity and changed record.\", accountId); idmCacheManager.cacheValue(ECHO_CACHE_NAME, accountId, echo); }### Assistant: @Test @Ignore public void stressTestPasswordEndcoding() { long sum = 0; int iteration = 100; for (int index = 0; index < iteration+1; index++) { long before = System.currentTimeMillis(); passwordFilterManager.createEcho(UUID.randomUUID(), new GuardedString(getHelper().createName())); long after = System.currentTimeMillis(); long diff = after - before; sum += diff; } System.out.println(MessageFormat.format(\"[{0}] iteration takes [{1}]. Average for one iteration [{2}].\", iteration, sum, sum/iteration)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TextMessage toMessage(final JsonEnvelope envelope, final Session session) { final String envelopeAsString = jsonObjectEnvelopeConverter.asJsonString(envelope); try { final TextMessage textMessage = session.createTextMessage(envelopeAsString); textMessage.setStringProperty(JMS_HEADER_CPPNAME, envelope.metadata().name()); return textMessage; } catch (JMSException e) { throw new JmsConverterException(String.format(\"Exception while creating message from envelope %s\", envelopeAsString), e); } }### Assistant: @Test(expected = JmsConverterException.class) public void shouldThrowExceptionWhenFailToCreateTextMessage() throws JMSException { when(jsonObjectEnvelopeConverter.asJsonString(envelope)).thenReturn(MESSAGE_TEXT); doThrow(JMSException.class).when(session).createTextMessage(MESSAGE_TEXT); envelopeConverter.toMessage(envelope, session); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ExprType type() { return ES_IP; }### Assistant: @Test void type() { assertEquals(ES_IP, ipValue.type()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object visit(ASTRingIdentifier node, Object data) { IQueryAtom atom = (IQueryAtom) data; RingIdentifierAtom ringIdAtom = new RingIdentifierAtom(builder); ringIdAtom.setAtom(atom); IQueryBond bond; if (node.jjtGetNumChildren() == 0) { bond = null; } else { bond = (IQueryBond) node.jjtGetChild(0).jjtAccept(this, data); } ringIdAtom.setRingBond(bond); return ringIdAtom; }### Assistant: @Test public void testPattern211() throws Exception { visit(\"[CX3](=O)[OX2H1]\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static float getAsFloat(Map<String, Object> map, String key) { Object value = map.get(key); if (value instanceof Float) { return (float) value; } if (value == null) { return 0; } if (value instanceof String) { return Float.valueOf((String) value); } throw new WrongTypeException(key, \"float\", value); }### Assistant: @Test public void testFloatAsFloat() { map.put(\"value\", 1.1f); Float actual = MapValueGetter.getAsFloat(map, \"value\"); Float expected = 1.1f; assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: InfusionRateCalculationDto getInfusionRateCalculationData(final ComplexTherapyDto therapy) { if (therapy.getIngredientsList().size() == 1) { final InfusionIngredientDto onlyInfusionIngredient = therapy.getIngredientsList().get(0); if (MedicationTypeEnum.MEDS_AND_SUPPS.contains(onlyInfusionIngredient.getMedication().getMedicationType())) { if (therapy.isContinuousInfusion() && onlyInfusionIngredient.getMedication().getId() != null) { final MedicationIngredientDto medicationDefiningIngredient = medicationsValueHolder.getValue().get(onlyInfusionIngredient.getMedication().getId()).getDefiningIngredient(); if (medicationDefiningIngredient != null && (\"ml\".equals(medicationDefiningIngredient.getStrengthDenominatorUnit()) || \"mL\".equals(medicationDefiningIngredient.getStrengthDenominatorUnit()))) { final InfusionRateCalculationDto calculationDto = new InfusionRateCalculationDto(); calculationDto.setQuantity(medicationDefiningIngredient.getStrengthNumerator()); calculationDto.setQuantityUnit(medicationDefiningIngredient.getStrengthNumeratorUnit()); calculationDto.setQuantityDenominator(medicationDefiningIngredient.getStrengthDenominator()); return calculationDto; } } else { final InfusionRateCalculationDto calculationDto = new InfusionRateCalculationDto(); calculationDto.setQuantity(onlyInfusionIngredient.getQuantity()); calculationDto.setQuantityUnit(onlyInfusionIngredient.getQuantityUnit()); calculationDto.setQuantityDenominator(onlyInfusionIngredient.getQuantityDenominator()); return calculationDto; } } } else { InfusionRateCalculationDto calculationDto = null; for (final InfusionIngredientDto ingredient : therapy.getIngredientsList()) { final MedicationTypeEnum medicationType = ingredient.getMedication().getMedicationType(); if (MedicationTypeEnum.MEDS_AND_SUPPS.contains(medicationType)) { if (calculationDto != null) { return null; } calculationDto = new InfusionRateCalculationDto(); calculationDto.setQuantity(ingredient.getQuantity()); calculationDto.setQuantityUnit(ingredient.getQuantityUnit()); calculationDto.setQuantityDenominator(therapy.getVolumeSum()); } } return calculationDto; } return null; }### Assistant: @Test public void testGetInfusionRateCalculationData4() { final ConstantComplexTherapyDto therapy = new ConstantComplexTherapyDto(); therapy.setVolumeSum(55.0); final InfusionIngredientDto ingredient1 = new InfusionIngredientDto(); therapy.getIngredientsList().add(ingredient1); ingredient1.setQuantityUnit(\"mg\"); ingredient1.setQuantity(10.0); ingredient1.setQuantityDenominator(5.0); final MedicationDto medication1 = new MedicationDto(); ingredient1.setMedication(medication1); medication1.setMedicationType(MedicationTypeEnum.MEDICATION); final InfusionIngredientDto ingredient2 = new InfusionIngredientDto(); therapy.getIngredientsList().add(ingredient2); ingredient2.setQuantityUnit(\"mg\"); ingredient2.setQuantity(2.0); ingredient2.setQuantityDenominator(1.0); final MedicationDto solution = new MedicationDto(); ingredient2.setMedication(solution); solution.setMedicationType(MedicationTypeEnum.MEDICATION); final InfusionRateCalculationDto data = medicationsBo.getInfusionRateCalculationData(therapy); assertNull(data); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void analysis(AnalysisParam analysisParam) { insertRegisterDetail(analysisParam); inserRegisterFailedDetail(analysisParam); analysisRegisterCount(analysisParam); analysisRegisterCountByUrl(analysisParam); }### Assistant: @Test public void testAnalysis(){ AnalysisParam ap = new AnalysisParam(\"2014112001\", TimeType.HOUR); registerByTimeAnalysisService.analysis(ap); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <K, V, G, R> BiCollector<K, V, BiStream<G, R>> groupingBy( BiFunction<? super K, ? super V, ? extends G> classifier, BiCollector<? super K, ? super V, R> groupCollector) { requireNonNull(classifier); requireNonNull(groupCollector); return new BiCollector<K, V, BiStream<G, R>>() { @Override public <E> Collector<E, ?, BiStream<G, R>> splitting( Function<E, K> toKey, Function<E, V> toValue) { return BiStream.groupingBy( e -> classifier.apply(toKey.apply(e), toValue.apply(e)), groupCollector.splitting(toKey::apply, toValue::apply)); } }; }### Assistant: @Test public void testGroupingBy_withReducer_empty() { BiStream<String, Integer> salaries = BiStream.empty(); assertKeyValues(salaries.collect(groupingBy(s -> s.charAt(0), (a, b) -> a + b))).isEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated protected static boolean equalsObjects(Object value1, Object value2) { return equalsObjects(value1, value2, null); }### Assistant: @Test public void testEqualsObjects0010() { Object value1 = new AtomicInteger(3); Object value2 = null; boolean result = ControlBreakChecker.equalsObjects(value1, value2, null); assertFalse(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Session create(SessionID sessionID, SessionSettings settings) throws ConfigError { try { String connectionType = null; final boolean rejectGarbledMessage = getSetting(settings, sessionID, Session.SETTING_REJECT_GARBLED_MESSAGE, false); final boolean validateChecksum = getSetting(settings, sessionID, Session.SETTING_VALIDATE_CHECKSUM, true); if (rejectGarbledMessage && !validateChecksum) { throw new ConfigError(\"Not possible to reject garbled message and process \" + \"messages with invalid checksum at the same time.\"); } final boolean rejectInvalidMessage = getSetting(settings, sessionID, Session.SETTING_REJECT_INVALID_MESSAGE, true); final boolean rejectMessageOnUnhandledException = getSetting(settings, sessionID, Session.SETTING_REJECT_MESSAGE_ON_UNHANDLED_EXCEPTION, false); final boolean requiresOrigSendingTime = getSetting(settings, sessionID, Session.SETTING_REQUIRES_ORIG_SENDING_TIME, true); if (settings.isSetting(sessionID, SessionFactory.SETTING_CONNECTION_TYPE)) { connectionType = settings.getString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE); } if (connectionType == null) { throw new ConfigError(\"Missing ConnectionType\"); } if (!connectionType.equals(SessionFactory.ACCEPTOR_CONNECTION_TYPE) && !connectionType.equals(SessionFactory.INITIATOR_CONNECTION_TYPE)) { throw new ConfigError(\"Invalid ConnectionType\"); } if (connectionType.equals(SessionFactory.ACCEPTOR_CONNECTION_TYPE) && settings.isSetting(sessionID, SessionSettings.SESSION_QUALIFIER)) { throw new ConfigError(\"SessionQualifier cannot be used with acceptor.\"); } if (connectionType.equals(SessionFactory.INITIATOR_CONNECTION_TYPE) && settings.isSetting(sessionID, Session.SETTING_ALLOWED_REMOTE_ADDRESSES)) { throw new ConfigError(\"AllowedRemoteAddresses cannot be used with initiator\"); } DefaultApplVerID senderDefaultApplVerID = null; if (sessionID.isFIXT()) { if (!settings.isSetting(sessionID, Session.SETTING_DEFAULT_APPL_VER_ID)) { throw new ConfigError(Session.SETTING_DEFAULT_APPL_VER_ID + \" is required for FIXT transport\"); } senderDefaultApplVerID = new DefaultApplVerID(toApplVerID( settings.getString(sessionID, Session.SETTING_DEFAULT_APPL_VER_ID)) .getValue()); } boolean useDataDictionary = true; if (settings.isSetting(sessionID, Session.SETTING_USE_DATA_DICTIONARY)) { useDataDictionary = settings .getBool(sessionID, Session.SETTING_USE_DATA_DICTIONARY); } DefaultDataDictionaryProvider dataDictionaryProvider = null; if (useDataDictionary) { dataDictionaryProvider = new DefaultDataDictionaryProvider(); if (sessionID.isFIXT()) { processFixtDataDictionaries(sessionID, settings, dataDictionaryProvider); } else { processPreFixtDataDictionary(sessionID, settings, dataDictionaryProvider); } } int heartbeatInterval = 0; if (connectionType.equals(SessionFactory.INITIATOR_CONNECTION_TYPE)) { heartbeatInterval = (int) settings.getLong(sessionID, Session.SETTING_HEARTBTINT); if (heartbeatInterval <= 0) { throw new ConfigError(\"Heartbeat must be greater than zero\"); } } final boolean checkLatency = getSetting(settings, sessionID, Session.SETTING_CHECK_LATENCY, true); final int maxLatency = getSetting(settings, sessionID, Session.SETTING_MAX_LATENCY, Session.DEFAULT_MAX_LATENCY); final double testRequestDelayMultiplier = getSetting(settings, sessionID, Session.SETTING_TEST_REQUEST_DELAY_MULTIPLIER, Session.DEFAULT_TEST_REQUEST_DELAY_MULTIPLIER); final double heartBeatTimeoutMultiplier = getSetting(settings, sessionID, Session.SETTING_HEARTBEAT_TIMEOUT_MULTIPLIER, Session.DEFAULT_HEARTBEAT_TIMEOUT_MULTIPLIER); final UtcTimestampPrecision timestampPrecision = getTimestampPrecision(settings, sessionID, UtcTimestampPrecision.MILLIS); final boolean resetOnLogout = getSetting(settings, sessionID, Session.SETTING_RESET_ON_LOGOUT, false); final boolean resetOnDisconnect = getSetting(settings, sessionID, Session.SETTING_RESET_ON_DISCONNECT, false); final boolean resetOnLogon = getSetting(settings, sessionID, Session.SETTING_RESET_ON_LOGON, false); final boolean refreshOnLogon = getSetting(settings, sessionID, Session.SETTING_REFRESH_ON_LOGON, false); final boolean checkCompID = getSetting(settings, sessionID, Session.SETTING_CHECK_COMP_ID, true); final boolean redundantResentRequestAllowed = getSetting(settings, sessionID, Session.SETTING_SEND_REDUNDANT_RESEND_REQUEST, false); final boolean persistMessages = getSetting(settings, sessionID, Session.SETTING_PERSIST_MESSAGES, true); final boolean useClosedIntervalForResend = getSetting(settings, sessionID, Session.SETTING_USE_CLOSED_RESEND_INTERVAL, false); final int logonTimeout = getSetting(settings, sessionID, Session.SETTING_LOGON_TIMEOUT, 10); final int logoutTimeout = getSetting(settings, sessionID, Session.SETTING_LOGOUT_TIMEOUT, 2); final boolean validateSequenceNumbers = getSetting(settings, sessionID, Session.SETTING_VALIDATE_SEQUENCE_NUMBERS, true); final boolean validateIncomingMessage = getSetting(settings, sessionID, Session.SETTING_VALIDATE_INCOMING_MESSAGE, true); final boolean resetOnError = getSetting(settings, sessionID, Session.SETTING_RESET_ON_ERROR, false); final boolean disconnectOnError = getSetting(settings, sessionID, Session.SETTING_DISCONNECT_ON_ERROR, false); final boolean disableHeartBeatCheck = getSetting(settings, sessionID, Session.SETTING_DISABLE_HEART_BEAT_CHECK, false); final boolean forceResendWhenCorruptedStore = getSetting(settings, sessionID, Session.SETTING_FORCE_RESEND_WHEN_CORRUPTED_STORE, false); final boolean enableNextExpectedMsgSeqNum = getSetting(settings, sessionID, Session.SETTING_ENABLE_NEXT_EXPECTED_MSG_SEQ_NUM, false); final boolean enableLastMsgSeqNumProcessed = getSetting(settings, sessionID, Session.SETTING_ENABLE_LAST_MSG_SEQ_NUM_PROCESSED, false); final int resendRequestChunkSize = getSetting(settings, sessionID, Session.SETTING_RESEND_REQUEST_CHUNK_SIZE, Session.DEFAULT_RESEND_RANGE_CHUNK_SIZE); final int[] logonIntervals = getLogonIntervalsInSeconds(settings, sessionID); final Set<InetAddress> allowedRemoteAddresses = getInetAddresses(settings, sessionID); final SessionSchedule sessionSchedule = sessionScheduleFactory.create(sessionID, settings); final List<StringField> logonTags = getLogonTags(settings, sessionID); final Session session = new Session(application, messageStoreFactory, sessionID, dataDictionaryProvider, sessionSchedule, logFactory, messageFactory, heartbeatInterval, checkLatency, maxLatency, timestampPrecision, resetOnLogon, resetOnLogout, resetOnDisconnect, refreshOnLogon, checkCompID, redundantResentRequestAllowed, persistMessages, useClosedIntervalForResend, testRequestDelayMultiplier, senderDefaultApplVerID, validateSequenceNumbers, logonIntervals, resetOnError, disconnectOnError, disableHeartBeatCheck, rejectGarbledMessage, rejectInvalidMessage, rejectMessageOnUnhandledException, requiresOrigSendingTime, forceResendWhenCorruptedStore, allowedRemoteAddresses, validateIncomingMessage, resendRequestChunkSize, enableNextExpectedMsgSeqNum, enableLastMsgSeqNumProcessed, validateChecksum, logonTags, heartBeatTimeoutMultiplier); session.setLogonTimeout(logonTimeout); session.setLogoutTimeout(logoutTimeout); final int maxScheduledWriteRequests = getSetting(settings, sessionID, Session.SETTING_MAX_SCHEDULED_WRITE_REQUESTS, 0); session.setMaxScheduledWriteRequests(maxScheduledWriteRequests); application.onCreate(sessionID); return session; } catch (final FieldConvertError e) { throw new ConfigError(e.getMessage()); } }### Assistant: @Test public void testTestRequestDelayMultiplier() throws Exception { settings.setString(sessionID, Session.SETTING_TEST_REQUEST_DELAY_MULTIPLIER, \"0.37\"); try (Session session = factory.create(sessionID, settings)) { assertEquals(0.37, session.getTestRequestDelayMultiplier(), 0); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> List<T> insertAt_split(List<T> list, int pos, T t) throws IllegalArgumentException { if (pos < 1) { throw new IllegalArgumentException(\"pos can't be less than 1\"); } Map<Boolean, List<T>> split = P17.split(list, pos); List<T> first = split.get(true); List<T> second = split.get(false); first.add(pos - 1, t); first.addAll(second); return first; }### Assistant: @Test public void shouldInsertElementAtFirstPosition_split() throws Exception { List<String> input = Stream.of(\"a\", \"b\", \"c\", \"d\").collect(toList()); List<String> result = P21.insertAt_split(input, 1, \"alfa\"); assertThat(result, hasSize(5)); assertThat(result, contains(\"alfa\", \"a\", \"b\", \"c\", \"d\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<File> listDirectFiles( File directory, String fileExtension ) { String ext = fileExtension; if( ext != null ) { ext = ext.toLowerCase(); if( ! ext.startsWith( \".\" )) ext = \".\" + ext; } List<File> result = new ArrayList<> (); File[] files = directory.listFiles(); if( files != null ) { for( File f : files ) { if( f.isFile() && (ext == null || f.getName().toLowerCase().endsWith( ext ))) { result.add( f ); } } } return result; }### Assistant: @Test public void testListDirectFiles_withFileExtension() throws Exception { File dir = this.folder.newFolder(); Assert.assertTrue( new File( dir, \"sub\" ).mkdir()); Assert.assertTrue( new File( dir, \"f1.txt\" ).createNewFile()); Assert.assertTrue( new File( dir, \"sub/f2.jpg\" ).createNewFile()); Assert.assertTrue( new File( dir, \"f3.txt\" ).createNewFile()); Assert.assertTrue( new File( dir, \"f4.JPG\" ).createNewFile()); Assert.assertTrue( new File( dir, \"sub/f5.zip\" ).createNewFile()); Assert.assertEquals( 1, Utils.listDirectFiles( dir, \"jpg\" ).size()); Assert.assertEquals( 1, Utils.listDirectFiles( dir, \".jpg\" ).size()); Assert.assertEquals( 1, Utils.listDirectFiles( dir, \"jPg\" ).size()); Assert.assertEquals( 2, Utils.listDirectFiles( dir, \"txt\" ).size()); Assert.assertEquals( 0, Utils.listDirectFiles( dir, \".zip\" ).size()); Assert.assertEquals( 3, Utils.listDirectFiles( dir, null ).size()); Assert.assertEquals( 0, Utils.listDirectFiles( this.folder.newFile(), null ).size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String hankakuToZenkaku(String value) { if (value == null || \"\".equals(value)) { return value; } char[] chars = value.toCharArray(); StringBuilder returnValue = new StringBuilder(); String getValue = null; Character nextvalue = null; for (int i = 0; i < chars.length; i++) { getValue = getZenkakuMoji(chars[i]); if (getValue != null) { returnValue.append(getValue); } else if (i == (chars.length - 1)) { getValue = getZenkakuKasatahaMoji(chars[i]); if (getValue != null) { returnValue.append(getValue); } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff9c'))) { returnValue.append(\"\u30ef\"); } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff66'))) { returnValue.append(\"\u30f2\"); } else { returnValue.append(String.valueOf(chars[i])); } } else { nextvalue = Character.valueOf(chars[i + 1]); if (nextvalue.equals(Character.valueOf('\uff9e'))) { getValue = getZenkakuDakuMoji(chars[i]); if (getValue != null) { returnValue.append(getValue); i++; } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff9c'))) { returnValue.append(ZENKAKU_WA_DAKUTEN); i++; } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff66'))) { returnValue.append(ZENKAKU_WO_DAKUTEN); i++; } else { returnValue.append((String.valueOf(chars[i]) + \"\u309b\")); i++; } } else if (nextvalue.equals(Character.valueOf('\uff9f'))) { getValue = getZenkakuHandakuMoji(chars[i]); if (getValue != null) { returnValue.append(getValue); i++; } else { getValue = getZenkakuKasatahaMoji(chars[i]); if (getValue == null && (Character.valueOf('\uff9c')).equals(chars[i])) { returnValue.append(\"\u30ef\").append(\"\u309c\"); } else if ((Character.valueOf('\uff66')).equals(chars[i])) { returnValue.append(\"\u30f2\").append(\"\u309c\"); } else { returnValue.append(String.valueOf(getValue)).append(\"\u309c\"); } i++; } } else { getValue = getZenkakuKasatahaMoji(chars[i]); if (getValue != null) { returnValue.append(getValue); } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff9c'))) { returnValue.append(\"\u30ef\"); } else if (Character.valueOf(chars[i]).equals( Character.valueOf('\uff66'))) { returnValue.append(\"\u30f2\"); } else { returnValue.append(String.valueOf(chars[i])); } } } } return returnValue.toString(); }### Assistant: @Test public void testHankakuToZenkaku16() throws Exception { String input = \"B\uff66\uff9e8\"; String result = StringUtil.hankakuToZenkaku(input); assertEquals(\"\uff22\\u30fa\uff18\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void reserve(long elements, long bytes) throws FlowControlException { Preconditions.checkArgument(elements >= 0); Preconditions.checkArgument(bytes >= 0); if (outstandingElementCount != null) { if (!outstandingElementCount.acquire(elements)) { throw new MaxOutstandingElementCountReachedException(maxOutstandingElementCount); } } if (outstandingByteCount != null) { long permitsToDraw = Math.min(bytes, maxOutstandingRequestBytes); if (!outstandingByteCount.acquire(permitsToDraw)) { if (outstandingElementCount != null) { outstandingElementCount.release(elements); } throw new MaxOutstandingRequestBytesReachedException(maxOutstandingRequestBytes); } } }### Assistant: @Test public void testInvalidArguments() throws Exception { FlowController flowController = new FlowController( FlowControlSettings.newBuilder() .setMaxOutstandingElementCount(10L) .setMaxOutstandingRequestBytes(10L) .setLimitExceededBehavior(LimitExceededBehavior.Block) .build()); flowController.reserve(0, 0); try { flowController.reserve(-1, 1); fail(\"Must have thrown an illegal argument error\"); } catch (IllegalArgumentException expected) { } try { flowController.reserve(1, -1); fail(\"Must have thrown an illegal argument error\"); } catch (IllegalArgumentException expected) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> Map<RepositoryObjectKey, T> createObjects(Class<T> objectClass, Annotation annotation) { Map<String, T> rawObjectInstances; ObjectInstance[] instanceDescriptors = extractInstanceDescriptors(annotation); if (instanceDescriptors.length > 0) { rawObjectInstances = createObjectsFromInstanceDescriptors(objectClass, instanceDescriptors); } else { rawObjectInstances = createObject(objectClass, annotation); } int objectOrder = extractOrder(annotation); Map<RepositoryObjectKey, T> createdObjects = new HashMap<RepositoryObjectKey, T>(); for (Entry<String, T> objectEntry : rawObjectInstances.entrySet()) { createdObjects.put(new RepositoryObjectKey(objectEntry.getKey(), objectOrder), objectEntry.getValue()); } return createdObjects; }### Assistant: @Test public void shouldCreateSingleInstanceAndReturnItUnderDifferentKeysWhenUsingValuesProperty() { Annotation annotation = annotation().withValues(\"TEST_CODE1\", \"TEST_CODE2\").build(); Map<RepositoryObjectKey, Object> objects = annotatedObjectFactory.createObjects(Object.class, annotation); assertThatItemMap(objects).containsObjectsThatAreSame(\"TEST_CODE1\", \"TEST_CODE2\").hasSize(2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Observable<Boolean> needToShowImportInfo() { return intentImportProcessor.getLastResult() .map(intentImportResultOptional -> { if (intentImportResultOptional.isPresent()) { final FileType fileType = intentImportResultOptional.get().getFileType(); return fileType == FileType.Image || fileType == FileType.Pdf; } else { return false; } }); }### Assistant: @Test public void notShowImportInfoForBackup() { when(intentImportProcessor.getLastResult()).thenReturn(Observable.just(Optional.of(new IntentImportResult(fakeUri, FileType.Smr)))); manager.needToShowImportInfo() .test() .assertComplete() .assertNoErrors() .assertValueCount(1) .assertValue(false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Report scan(final Path file, final Charset charset) { try (Stream<String> lines = Files.lines(file, charset)) { return scanTasks(lines.iterator(), new IssueBuilder().setFileName(file.toString())); } catch (IOException | UncheckedIOException exception) { Report report = new Report(); Throwable cause = exception.getCause(); if (cause instanceof MalformedInputException || cause instanceof UnmappableCharacterException) { report.logError(\"Can't read source file '%s', defined encoding '%s' seems to be wrong\", file, charset); } else { report.logException(exception, \"Exception while reading the source code file '%s':\", file); } return report; } }### Assistant: @Test void shouldReportFileExceptionError() { TaskScanner scanner = new TaskScannerBuilder().build(); Report report = scanner.scan(new File(\"\").toPath(), StandardCharsets.UTF_8); assertThat(report.getErrorMessages()).contains(\"Exception while reading the source code file '':\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException { String service = request.getURI().toASCIIString(); String proxyTicket = proxyTicketProvider.getProxyTicket(service); if (!StringUtils.hasText(proxyTicket)) { throw new IllegalStateException( String.format(\"Proxy ticket provider returned a null proxy ticket for service %s.\", service)); } URI uri = UriComponentsBuilder .fromUri(request.getURI()) .replaceQueryParam(serviceProperties.getArtifactParameter(), proxyTicket) .build(true).toUri(); return execution.execute(new HttpRequestWrapper(request) { @Override public URI getURI() { return uri; } }, body); }### Assistant: @Test public void intercept_ServiceWithExistingQueryParameters_ProxyTicketAsQueryEscapedParameter() throws IOException { String service = \"http: ClientHttpRequestExecution clientHttpRequestExecution = mock(ClientHttpRequestExecution.class); ClientHttpRequest request = new MockClientHttpRequest(HttpMethod.GET, URI.create(service)); String proxyTicket = \"PT-21-c1gk6jBcfYnatLbNExfx-0623277bc36a\"; when(proxyTicketProvider.getProxyTicket(service)).thenReturn(proxyTicket); casAuthorizationInterceptor.intercept(request, null, clientHttpRequestExecution); verify(proxyTicketProvider, times(1)).getProxyTicket(service); verify(clientHttpRequestExecution, times(1)).execute(httpRequestArgumentCaptor.capture(), isNull()); assertThat(httpRequestArgumentCaptor.getValue().getURI().toASCIIString()) .isEqualTo(service + \"&ticket=\" + proxyTicket); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getRecursive(int n) { validateInput(n); if (n == 0) { return 1; } else { return n * getRecursive(n - 1); } }### Assistant: @Test public void factorialOfFiveEqualsTo120Recursive() { int result = factorial.getRecursive(5); assertEquals(120, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String updateAmsEnvContent(String content) { if (content == null) { return null; } if (!content.contains(\"AMS_COLLECTOR_GC_OPTS\")) { content += \"\\n\" + \"# AMS Collector GC options\\n\" + \"export AMS_COLLECTOR_GC_OPTS=\\\"-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 \" + \"-XX:+UseCMSInitiatingOccupancyOnly -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps \" + \"-XX:+UseGCLogFileRotation -XX:GCLogFileSize=10M \" + \"-Xloggc:{{ams_collector_log_dir}}/collector-gc.log-`date +'%Y%m%d%H%M'`\\\"\\n\" + \"export AMS_COLLECTOR_OPTS=\\\"$AMS_COLLECTOR_OPTS $AMS_COLLECTOR_GC_OPTS\\\"\\n\"; } if (!content.contains(\"AMS_HBASE_NORMALIZER_ENABLED\")) { content += \"\\n\" + \"# HBase normalizer enabled\\n\" + \"export AMS_HBASE_NORMALIZER_ENABLED={{ams_hbase_normalizer_enabled}}\\n\"; } if (!content.contains(\"AMS_HBASE_FIFO_COMPACTION_ENABLED\")) { content += \"\\n\" + \"# HBase compaction policy enabled\\n\" + \"export AMS_HBASE_FIFO_COMPACTION_ENABLED={{ams_hbase_fifo_compaction_enabled}}\\n\"; } return content; }### Assistant: @Test public void testUpdateAmsEnvContent() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException { Method updateAmsEnvContent = UpgradeCatalog220.class.getDeclaredMethod(\"updateAmsEnvContent\", String.class); UpgradeCatalog220 upgradeCatalog220 = new UpgradeCatalog220(injector); String oldContent = \"some_content\"; String expectedContent = \"some_content\" + \"\\n\" + \"# AMS Collector GC options\\n\" + \"export AMS_COLLECTOR_GC_OPTS=\\\"-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 \" + \"-XX:+UseCMSInitiatingOccupancyOnly -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps \" + \"-XX:+UseGCLogFileRotation -XX:GCLogFileSize=10M \" + \"-Xloggc:{{ams_collector_log_dir}}/collector-gc.log-`date +'%Y%m%d%H%M'`\\\"\\n\" + \"export AMS_COLLECTOR_OPTS=\\\"$AMS_COLLECTOR_OPTS $AMS_COLLECTOR_GC_OPTS\\\"\\n\"+ \"\\n\" + \"# HBase normalizer enabled\\n\" + \"export AMS_HBASE_NORMALIZER_ENABLED={{ams_hbase_normalizer_enabled}}\\n\" + \"\\n\" + \"# HBase compaction policy enabled\\n\" + \"export AMS_HBASE_FIFO_COMPACTION_ENABLED={{ams_hbase_fifo_compaction_enabled}}\\n\"; String result = (String) updateAmsEnvContent.invoke(upgradeCatalog220, oldContent); Assert.assertEquals(expectedContent, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setDatasetId(String datasetId) { this.datasetId = datasetId; }### Assistant: @Test public void invalidParametersDatasetIdNoOperations() { AggregationParameters parameters = new AggregationParameters(); parameters.setDatasetId(\"dataset#7568\"); Set<ConstraintViolation<AggregationParameters>> constraintViolations = validator.validate(parameters); Assert.assertEquals(2, constraintViolations.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setRequiredBy(Requirement<T> req) { req.setRequires(this); }### Assistant: @Test public void testCycles() { Requirement parent = new Requirement(\"parent\"); Requirement child1 = new Requirement(\"child1\"); Requirement child3 = new Requirement(\"child3\"); parent.setRequiredBy(child1); child1.setRequiredBy(child3); thrown.expect(RuntimeException.class); thrown.expectMessage(\"Requirement cycle detected\"); child3.setRequiredBy(parent); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean processDomainDeletes() { ArrayList<String> localDomainList = new ArrayList<>(getCacheStore().asMap().keySet()); if (localDomainList.isEmpty()) { return true; } Set<String> zmsDomainList = changeLogStore.getServerDomainList(); if (zmsDomainList == null) { return false; } if (!validDomainListResponse(zmsDomainList)) { return false; } for (String domainName : localDomainList) { if (!zmsDomainList.contains(domainName)) { if (LOGGER.isDebugEnabled()) { LOGGER.debug(\"Removing local domain: \" + domainName + \". Domain not in ZMS anymore.\"); } deleteDomain(domainName); } } return true; }### Assistant: @Test public void testProcessDomainDeletesZMSFailure() { ChangeLogStore clogStore = new MockZMSFileChangeLogStore(\"/tmp/zts_server_unit_tests/zts_root\", pkey, \"0\"); DataStore store = new DataStore(clogStore, null); ((MockZMSFileChangeLogStore) store.changeLogStore).setDomainList(null); addDomainToDataStore(store, \"coretech\"); assertFalse(store.processDomainDeletes()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T0> get0() { return getAndCast(0); }### Assistant: @Test void get0() { assertEquals(m0, instance.get0()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AthenzDomain getAthenzDomain(final String domainName, boolean masterCopy) { try (ObjectStoreConnection con = store.getConnection(true, masterCopy)) { return getAthenzDomain(con, domainName); } }### Assistant: @Test public void testSetMembersInDomainNullRoles() { String domainName = \"null-roles\"; Domain domain = new Domain().setModified(Timestamp.fromCurrentTime()); AthenzDomain athenzDomain = new AthenzDomain(domainName); athenzDomain.setDomain(domain); athenzDomain.setRoles(null); Mockito.when(mockObjStore.getConnection(true, false)).thenReturn(mockJdbcConn); Mockito.when(mockJdbcConn.getAthenzDomain(domainName)).thenReturn(athenzDomain); ObjectStore saveStore = zms.dbService.store; zms.dbService.store = mockObjStore; AthenzDomain resAthenzDomain = zms.dbService.getAthenzDomain(domainName, false); assertNull(resAthenzDomain.getRoles()); zms.dbService.store = saveStore; }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public NodeImpl[] toArray() { readLock(); NodeImpl[] array = new NodeImpl[size]; if (garbageSize == 0) { for (int i = 0; i < blocksCount; i++) { NodeBlock block = blocks[i]; System.arraycopy(block.backingArray, 0, array, block.offset, block.nodeLength); } } else { NodeStoreIterator itr = iterator(); int offset = 0; while (itr.hasNext()) { NodeImpl n = itr.next(); array[offset++] = n; } } readUnlock(); return array; }### Assistant: @Test public void testToArray() { NodeImpl[] nodes = new NodeImpl[] { new NodeImpl(\"0\"), new NodeImpl(\"1\"), new NodeImpl(\"2\") }; NodeStore nodeStore = new NodeStore(); Assert.assertEquals(new NodeImpl[0], nodeStore.toArray()); nodeStore.addAll(Arrays.asList(nodes)); Assert.assertEquals(nodes, nodeStore.toArray()); Assert.assertEquals(nodes, nodeStore.toArray(new Node[0])); nodeStore.clear(); Assert.assertEquals(new NodeImpl[0], nodeStore.toArray()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void formatHeader(final CharArrayBuffer buffer, final Header header) { Args.notNull(buffer, \"Char array buffer\"); Args.notNull(header, \"Header\"); buffer.append(header.getName()); buffer.append(\": \"); final String value = header.getValue(); if (value != null) { buffer.ensureCapacity(buffer.length() + value.length()); for (int valueIndex = 0; valueIndex < value.length(); valueIndex++) { char valueChar = value.charAt(valueIndex); if (valueChar == '\\r' || valueChar == '\\n' || valueChar == '\\f' || valueChar == 0x0b) { valueChar = ' '; } buffer.append(valueChar); } } }### Assistant: @Test public void testHeaderFormattingRequestSplitting() throws Exception { final CharArrayBuffer buf = new CharArrayBuffer(64); final Header header = new BasicHeader(\"Host\", \"apache.org\\r\\nOops: oops\"); formatter.formatHeader(buf, header); final String s = buf.toString(); Assert.assertFalse(s.contains(\"\\n\")); Assert.assertEquals(\"Host: apache.org Oops: oops\", s); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void writeRunSet(final RunSet runSet, final Writer writer) throws IOException { checkNotNull(runSet); checkNotNull(writer); try { JAXBContext context = JAXBContext.newInstance(RunSet.class); Marshaller marshaller = context.createMarshaller(); SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); URL commonSchemaURL = SraReader.class.getResource(\"/org/nmdp/ngs/sra/xsd/SRA.common.xsd\"); URL runSchemaURL = SraReader.class.getResource(\"/org/nmdp/ngs/sra/xsd/SRA.run.xsd\"); Schema schema = schemaFactory.newSchema(new StreamSource[] { new StreamSource(commonSchemaURL.toString()), new StreamSource(runSchemaURL.toString()) }); marshaller.setSchema(schema); marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true); marshaller.marshal(runSet, writer); } catch (JAXBException | SAXException e) { throw new IOException(\"could not marshal RunSet\", e); } }### Assistant: @Test public void testWriteRunSetFile() throws Exception { writeRunSet(runSet, createFile()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <A, R> Observable<R> doFlatMap( final Callable<Observable<A>> zero, final Function<A, Observable<R>> one) { try { return zero.call() .flatMap(new Function<A, Observable<R>>() { @Override public Observable<R> apply(final A a) throws Exception { return one.apply(a); } }); } catch (Exception e) { throw new RuntimeException(e); } }### Assistant: @Test public void threeFM() { Assert.assertEquals(RxComprehensions.doFlatMap(zero(3), one(true), two(\"result\"), three(\"other\")).blockingFirst(), \"other\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Observable<List<Movie>> fetchMovies(final String category) { return Observable.defer(() -> movieDbRestService.fetchAllMovies(category) .concatMap(moviesList -> Observable.from(moviesList.getMovies()) .toList())) .retryWhen(observable -> observable.flatMap(o -> { if (o instanceof IOException) { return Observable.just(null); } return Observable.error(o); })); }### Assistant: @Test public void fetchAllMovies_OtherHttpError_fetchMoviesTerminatedWithError() { when(mMovieDbRestService.fetchAllMovies(anyString())) .thenReturn(get403ForbiddenError()); TestSubscriber<List<Movie>> subscriber = new TestSubscriber<>(); mMovieRepository.fetchMovies(POPULAR).subscribe(subscriber); subscriber.awaitTerminalEvent(); subscriber.assertError(HttpException.class); verify(mMovieDbRestService).fetchAllMovies(POPULAR); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String mapMemberName(String rawName) { if (rawName == null) return null; else if (rawName.length()==0) return \"\"; else if (rawName.length()==1) return String.valueOf(Character.toLowerCase(rawName.charAt(0))); return Character.toLowerCase(rawName.charAt(0)) + rawName.substring(1); }### Assistant: @Test @DisplayName(\"Checking jackson mapping with standard names\") void checkJacksonMapping() { standardTest.forEach( (x,y) -> assertEquals( testee.mapMemberName(x), y, \"Expected '\" + y +\"' got '\" + testee.mapMemberName(x) ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ByteBuffer encode(Http2Frame message, Void context) { return message.toBuffer(); }### Assistant: @Test public void settingsHighestID() { Http2Frame frame = TestMessages.SETTINGS_HIGHEST_ID_FRAME; assertArrayEquals(TestMessages.SETTINGS_HIGHEST_ID_BUFFER, toByteArray(encoder.encode(frame, null))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Before(\"serviceMethods()\") public void checkPermission(JoinPoint joinPoint) { MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature(); Method method = methodSignature.getMethod(); List<NamespacePermission> namespacePermissions = new ArrayList<>(); if (method.isAnnotationPresent(NamespacePermissions.class)) { namespacePermissions.addAll(Arrays.asList(method.getAnnotation(NamespacePermissions.class).value())); } else if (method.isAnnotationPresent(NamespacePermission.class)) { namespacePermissions.add(method.getAnnotation(NamespacePermission.class)); } if (!namespacePermissions.isEmpty()) { String[] parameterNames = methodSignature.getParameterNames(); Object[] args = joinPoint.getArgs(); Map<String, Object> variables = new HashMap<>(); for (int i = 0; i < parameterNames.length; i++) { variables.put(parameterNames[i], args[i]); } List<AccessDeniedException> accessDeniedExceptions = new ArrayList<>(); for (NamespacePermission namespacePermission : namespacePermissions) { for (String field : namespacePermission.fields()) { try { namespaceSecurityHelper.checkPermission(spelExpressionHelper.evaluate(field, Object.class, variables), namespacePermission .permissions()); } catch (AccessDeniedException accessDeniedException) { accessDeniedExceptions.add(accessDeniedException); } } } if (!accessDeniedExceptions.isEmpty()) { throw namespaceSecurityHelper.getAccessDeniedException(accessDeniedExceptions); } } }### Assistant: @Test public void checkPermissionAssertNoExceptionWhenHasPermissionsNamespaceTrimmed() throws Exception { JoinPoint joinPoint = mock(JoinPoint.class); MethodSignature methodSignature = mock(MethodSignature.class); Method method = NamespaceSecurityAdviceTest.class.getDeclaredMethod(\"mockMethod\", String.class); when(methodSignature.getParameterNames()).thenReturn(new String[] {\"namespace\"}); when(methodSignature.getMethod()).thenReturn(method); when(joinPoint.getSignature()).thenReturn(methodSignature); when(joinPoint.getArgs()).thenReturn(new Object[] {BLANK_TEXT + \"foo\" + BLANK_TEXT}); String userId = \"userId\"; ApplicationUser applicationUser = new ApplicationUser(getClass()); applicationUser.setUserId(userId); applicationUser.setNamespaceAuthorizations(new HashSet<>()); applicationUser.getNamespaceAuthorizations().add(new NamespaceAuthorization(\"foo\", Arrays.asList(NamespacePermissionEnum.READ))); SecurityContextHolder.getContext().setAuthentication( new TestingAuthenticationToken(new SecurityUserWrapper(userId, \"\", false, false, false, false, Arrays.asList(), applicationUser), null)); try { namespaceSecurityAdvice.checkPermission(joinPoint); } catch (AccessDeniedException e) { fail(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isPersistable(Class<?> dataObjectClass) { return selectAdapter(dataObjectClass).isPersistable(dataObjectClass); }### Assistant: @Test public void testIsPersistable() throws Exception { lda.isPersistable(NonLegacy.class); verify(kradLegacyDataAdapter).isPersistable(eq(NonLegacy.class)); verifyZeroInteractions(knsLegacyDataAdapter); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public User findUserByUuid(String userUuid) throws ApiException { ApiResponse<User> resp = findUserByUuidWithHttpInfo(userUuid); LOGGER.info(\"Method {findUserByUuid} was called, response code is {}\", resp.getStatusCode()); return resp.getData(); }### Assistant: @Test public void findUserByUuidTest() throws ApiException { String userUuid = \"userUuid\"; User response = api.findUserByUuid(userUuid); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Query select(DocumentQuery documentQuery) { StringBuilder query = new StringBuilder(); List<Object> params = new java.util.ArrayList<>(); List<ORecordId> ids = new ArrayList<>(); query.append(\"SELECT FROM \"); query.append(documentQuery.getDocumentCollection()); if (documentQuery.getCondition().isPresent()) { query.append(WHERE); definesCondition(documentQuery.getCondition().get(), query, params, 0, ids); } if (!documentQuery.getSorts().isEmpty()) { appendSort(documentQuery.getSorts(), query); } appendPagination(documentQuery, query); return new Query(query.toString(), params, ids); }### Assistant: @Test public void shouldRunEqualsQueryAnd() { DocumentQuery query = select().from(\"collection\") .where(\"name\").eq(\"value\") .and(\"age\").lte(10) .build(); QueryOSQLConverter.Query convert = QueryOSQLConverter.select(query); String sql = convert.getQuery(); List<Object> values = convert.getParams(); assertEquals(\"value\", values.get(0)); assertEquals(10, values.get(1)); assertEquals(\"SELECT FROM collection WHERE name = ? AND age <= ?\", sql); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void fixContextClassloader(String cls, String method, Class<?> clsArg, ClassLoader bundleLoader) { BundleReference br = getBundleReference(bundleLoader); if (br == null) { return; } final ClassLoader cl = findContextClassloader(br.getBundle(), cls, method, clsArg); if (cl != null) { BaseActivator.activator.log(Level.FINE, \"Temporarily setting Thread Context Classloader to: \" + cl); AccessController.doPrivileged(new PrivilegedAction<Void>() { @Override public Void run() { Thread.currentThread().setContextClassLoader(cl); return null; } }); } else { BaseActivator.activator.log(Level.FINE, \"No classloader found for \" + cls + \":\" + method + \"(\" + clsArg + \")\"); } }### Assistant: @Test public void testFixContextClassLoaderSimpleViaEmbeddedJar() throws Exception { BaseActivator activator = new BaseActivator() { public void start(BundleContext context) throws Exception { } }; BaseActivator.activator = activator; URL url = getClass().getResource(\"/embedded3.jar\"); assertNotNull(\"precondition\", url); Bundle providerBundle = EasyMock.createMock(Bundle.class); final ClassLoader providerCL = new TestBundleClassLoader(new URL [] {url}, getClass().getClassLoader(), providerBundle); EasyMock.expect(providerBundle.getBundleContext()).andThrow(new IllegalStateException(\"Disable getBundleClassLoaderViaAdapt\")); EasyMock.expect(providerBundle.getBundleId()).andReturn(42L).anyTimes(); EasyMock.expect(providerBundle.getEntryPaths((String) EasyMock.anyObject())).andReturn(null).anyTimes(); Dictionary<String, String> providerHeaders = new Hashtable<String, String>(); providerHeaders.put(Constants.BUNDLE_CLASSPATH, \".,embedded3.jar\"); EasyMock.expect(providerBundle.getHeaders()).andReturn(providerHeaders).anyTimes(); EasyMock.expect(providerBundle.getResource(\"embedded3.jar\")).andReturn(url).anyTimes(); providerBundle.loadClass((String) EasyMock.anyObject()); EasyMock.expectLastCall().andAnswer(new IAnswer<Class<?>>() { @Override public Class<?> answer() throws Throwable { return providerCL.loadClass((String) EasyMock.getCurrentArguments()[0]); } }).anyTimes(); EasyMock.replay(providerBundle); activator.registerProviderBundle(MySPI.class.getName(), providerBundle, new HashMap<String, Object>()); Bundle clientBundle = EasyMock.createMock(Bundle.class); EasyMock.replay(clientBundle); ClassLoader clientCL = new TestBundleClassLoader(new URL [] {}, getClass().getClassLoader(), clientBundle); Thread.currentThread().setContextClassLoader(null); Util.fixContextClassloader(ServiceLoader.class.getName(), \"load\", MySPI.class, clientCL); assertSame(providerCL, Thread.currentThread().getContextClassLoader()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String applyPatternAndCondition(String queryString, String condition, long pattern) { if (condition != null) { if (pattern != 0) { queryString = queryString.replaceAll(\"where r.time\", \"where m.pattern & ?4 = ?4 and \" + condition + \" and r.time\"); } else { queryString = queryString.replaceAll(\"where r.time\", \"where \" + condition + \" and r.time\"); } } else if (pattern != 0) { queryString = queryString.replaceAll(\"where r.time\", \"where m.pattern & ?4 = ?4 and r.time\"); } return queryString; }### Assistant: @Test public void testApplyPatternAndCondition_onlyPattern() { final String sql = \"select something cool where r.time = easter_last_year\"; final String sqlApplied = JpaMatchupStorage.applyPatternAndCondition(sql, null, 564); assertEquals(\"select something cool where m.pattern & ?4 = ?4 and r.time = easter_last_year\", sqlApplied); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void getAvailableDocumentPaths(final Callback<List<Path>> callback) { view.showLoading(); graphService.call(new RemoteCallback<List<Path>>() { @Override public void callback(final List<Path> paths) { view.hideBusyIndicator(); callback.callback(paths); } }, new HasBusyIndicatorDefaultErrorCallback(view)).listDecisionTablesInPackage(editorPath); }### Assistant: @Test public void checkGetAvailableDocumentPaths() { when(dtGraphService.listDecisionTablesInPackage(eq(presenter.editorPath))).thenReturn(new ArrayList<Path>() {{ add(PathFactory.newPath(\"file1\", \"file1Url\")); }}); presenter.getAvailableDocumentPaths((List<Path> result) -> { assertNotNull(result); assertEquals(1, result.size()); assertEquals(\"file1\", result.get(0).getFileName()); assertEquals(\"file1Url\", result.get(0).toURI()); }); verify(view, times(1)).showLoading(); verify(dtGraphService, times(1)).listDecisionTablesInPackage(eq(presenter.editorPath)); verify(view, times(1)).hideBusyIndicator(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Map<String, String>> pipelinePossibleStates(NegativeBoundHiveDecimalTag action, List<Map<String, String>> possibleStateList) { return returnStates(action, possibleStateList, setParameters(action, false)); }### Assistant: @Test public void setTest() { Map<String, String> variableDomains = new HashMap<>(); List<Map<String, String>> listOfMaps = new LinkedList<>(); variableDomains.put(\"A\", \"1\"); variableDomains.put(\"B\", \"2\"); variableDomains.put(\"C\", \"3\"); listOfMaps.add(variableDomains); NegativeBoundHiveDecimal setTest = new NegativeBoundHiveDecimal(); NegativeBoundHiveDecimal.NegativeBoundHiveDecimalTag tag = new NegativeBoundHiveDecimal.NegativeBoundHiveDecimalTag(); tag.setNullable(\"true\"); tag.setLength(\"38,18\"); tag.setName(\"Name\"); List<Map<String, String>> newList = setTest.pipelinePossibleStates(tag, listOfMaps); Assert.assertEquals(newList.get(0).get(\"A\"), \"1\"); Assert.assertEquals(newList.get(0).get(\"B\"), \"2\"); Assert.assertEquals(newList.get(0).get(\"C\"), \"3\"); Assert.assertEquals(newList.get(1).get(\"A\"), \"1\"); Assert.assertEquals(newList.get(1).get(\"B\"), \"2\"); Assert.assertEquals(newList.get(1).get(\"C\"), \"3\"); Assert.assertEquals(newList.size(), 2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void step(Program program) { program.fullTrace(); if (CONFIG.vmTrace()) program.saveOpTrace(); try { OpCode op = OpCode.code(program.getCurrentOp()); if (op == null) throw program.new IllegalOperationException(); program.setLastOp(op.val()); long oldMemSize = program.getMemSize(); BigInteger newMemSize = BigInteger.ZERO; Stack<DataWord> stack = program.getStack(); String hint = \"\"; long callGas = 0, memWords = 0; long gasCost = GasCost.STEP; long gasBefore = program.getGas().longValue(); int stepBefore = program.getPC(); program.stackRequire(op.require()); switch (op) { case STOP: case SUICIDE: gasCost = GasCost.STOP; break; case SSTORE: DataWord newValue = stack.get(stack.size()-2); DataWord oldValue = program.storageLoad(stack.peek()); if (oldValue == null && !newValue.isZero()) gasCost = GasCost.SSTORE * 2; else if (oldValue != null && newValue.isZero()) gasCost = GasCost.SSTORE * 0; else gasCost = GasCost.SSTORE; break; case SLOAD: gasCost = GasCost.SLOAD; break; case BALANCE: gasCost = GasCost.BALANCE; break; case MSTORE: newMemSize = memNeeded(stack.peek(), new DataWord(32)); break; case MSTORE8: newMemSize = memNeeded(stack.peek(), new DataWord(1)); break; case MLOAD: newMemSize = memNeeded(stack.peek(), new DataWord(32)); break; case RETURN: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-2)); break; case SHA3: gasCost = GasCost.SHA3; newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-2)); break; case CALLDATACOPY: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-3)); break; case CODECOPY: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-3)); break; case EXTCODECOPY: newMemSize = memNeeded(stack.get(stack.size()-2), stack.get(stack.size()-4)); break; case CALL: case CALLCODE: gasCost = GasCost.CALL; DataWord callGasWord = stack.get(stack.size()-1); if(callGasWord.compareTo(program.getGas()) == 1) { throw program.new OutOfGasException(); } callGas = callGasWord.longValue(); BigInteger in = memNeeded(stack.get(stack.size()-4), stack.get(stack.size()-5)); BigInteger out = memNeeded(stack.get(stack.size()-6), stack.get(stack.size()-7)); newMemSize = in.max(out); break; case CREATE: gasCost = GasCost.CREATE; newMemSize = memNeeded(stack.get(stack.size()-2), stack.get(stack.size()-3)); break; default: break; } program.spendGas(gasCost, op.name()); if(newMemSize.compareTo(MAX_GAS) == 1) { throw program.new OutOfGasException(); } long memoryUsage = (newMemSize.longValue() + 31) / 32 * 32; if (memoryUsage > oldMemSize) { memWords = (memoryUsage - oldMemSize) / 32; long memGas = GasCost.MEMORY * memWords; program.spendGas(memGas, op.name() + \" (memory usage)\"); gasCost += memGas; } if(program.getNumber().intValue() == CONFIG.dumpBlock()) this.dumpLine(op, gasBefore, gasCost+callGas, memWords, program); switch (op) { case STOP:{ program.setHReturn(ByteBuffer.allocate(0)); program.stop(); } break; case ADD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" + \" + word2.value(); word1.add(word2); program.stackPush(word1); program.step(); } break; case MUL:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" * \" + word2.value(); word1.mul(word2); program.stackPush(word1); program.step(); } break; case SUB:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" - \" + word2.value(); word1.sub(word2); program.stackPush(word1); program.step(); } break; case DIV:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" / \" + word2.value(); word1.div(word2); program.stackPush(word1); program.step(); } break; case SDIV:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" / \" + word2.sValue(); word1.sDiv(word2); program.stackPush(word1); program.step(); } break; case MOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" % \" + word2.value(); word1.mod(word2); program.stackPush(word1); program.step(); } break; case SMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" #% \" + word2.sValue(); word1.sMod(word2); program.stackPush(word1); program.step(); } break; case EXP:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" ** \" + word2.value(); word1.exp(word2); program.stackPush(word1); program.step(); } break; case NEG:{ DataWord word1 = program.stackPop(); word1.negate(); if (logger.isInfoEnabled()) hint = \"\" + word1.value(); program.stackPush(word1); program.step(); } break; case LT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" < \" + word2.value(); if (word1.value().compareTo(word2.value()) == -1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case SLT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" < \" + word2.sValue(); if (word1.sValue().compareTo(word2.sValue()) == -1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case SGT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" > \" + word2.sValue(); if (word1.sValue().compareTo(word2.sValue()) == 1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case GT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" > \" + word2.value(); if (word1.value().compareTo(word2.value()) == 1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case EQ:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" == \" + word2.value(); if (word1.xor(word2).isZero()) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case NOT: { DataWord word1 = program.stackPop(); if (word1.isZero()) { word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } if (logger.isInfoEnabled()) hint = \"\" + word1.value(); program.stackPush(word1); program.step(); } break; case AND:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" && \" + word2.value(); word1.and(word2); program.stackPush(word1); program.step(); } break; case OR: { DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" || \" + word2.value(); word1.or(word2); program.stackPush(word1); program.step(); } break; case XOR: { DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" ^ \" + word2.value(); word1.xor(word2); program.stackPush(word1); program.step(); } break; case BYTE:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord result = null; if (word1.value().compareTo(_32_) == -1) { byte tmp = word2.getData()[word1.intValue()]; word2.and(DataWord.ZERO); word2.getData()[31] = tmp; result = word2; } else { result = new DataWord(); } if (logger.isInfoEnabled()) hint = \"\" + result.value(); program.stackPush(result); program.step(); } break; case ADDMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord word3 = program.stackPop(); word1.addmod(word2, word3); program.stackPush(word1); program.step(); } break; case MULMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord word3 = program.stackPop(); word1.mulmod(word2, word3); program.stackPush(word1); program.step(); } break; case SHA3:{ DataWord memOffsetData = program.stackPop(); DataWord lengthData = program.stackPop(); ByteBuffer buffer = program.memoryChunk(memOffsetData, lengthData); byte[] encoded = HashUtil.sha3(buffer.array()); DataWord word = new DataWord(encoded); if (logger.isInfoEnabled()) hint = word.toString(); program.stackPush(word); program.step(); } break; case ADDRESS:{ DataWord address = program.getOwnerAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(address.getLast20Bytes()); program.stackPush(address); program.step(); } break; case BALANCE:{ DataWord address = program.stackPop(); DataWord balance = program.getBalance(address); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(address.getLast20Bytes()) + \" balance: \" + balance.longValue(); program.stackPush(balance); program.step(); } break; case ORIGIN:{ DataWord originAddress = program.getOriginAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(originAddress.getLast20Bytes()); program.stackPush(originAddress); program.step(); } break; case CALLER:{ DataWord callerAddress = program.getCallerAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(callerAddress.getLast20Bytes()); program.stackPush(callerAddress); program.step(); } break; case CALLVALUE:{ DataWord callValue = program.getCallValue(); if (logger.isInfoEnabled()) hint = \"value: \" + callValue; program.stackPush(callValue); program.step(); } break; case CALLDATALOAD:{ DataWord dataOffs = program.stackPop(); DataWord value = program.getDataValue(dataOffs); if (logger.isInfoEnabled()) hint = \"data: \" + value; program.stackPush(value); program.step(); } break; case CALLDATASIZE:{ DataWord dataSize = program.getDataSize(); if (logger.isInfoEnabled()) hint = \"size: \" + dataSize.value(); program.stackPush(dataSize); program.step(); } break; case CALLDATACOPY:{ DataWord memOffsetData = program.stackPop(); DataWord dataOffsetData = program.stackPop(); DataWord lengthData = program.stackPop(); byte[] msgData = program.getDataCopy(dataOffsetData, lengthData); if (logger.isInfoEnabled()) hint = \"data: \" + Hex.toHexString(msgData); program.memorySave(memOffsetData.intValue(), msgData); program.step(); } break; case CODESIZE: case EXTCODESIZE: { int length; if (op == OpCode.CODESIZE) length = program.getCode().length; else { DataWord address = program.stackPop(); length = program.getCodeAt(address).length; } DataWord codeLength = new DataWord(length); if (logger.isInfoEnabled()) hint = \"size: \" + length; program.stackPush(codeLength); program.step(); } break; case CODECOPY: case EXTCODECOPY: { byte[] fullCode; if (op == OpCode.CODECOPY) fullCode = program.getCode(); else { DataWord address = program.stackPop(); fullCode = program.getCodeAt(address); } DataWord memOffsetData = program.stackPop(); BigInteger codeOffsetData = program.stackPop().value(); BigInteger lengthData = program.stackPop().value(); if (fullCode == null || BigInteger.valueOf(fullCode.length).compareTo( codeOffsetData.add(lengthData)) < 0) { program.stop(); break; } int length = lengthData.intValue(); int codeOffset = codeOffsetData.intValue(); byte[] codeCopy = new byte[length]; System.arraycopy(fullCode, codeOffset, codeCopy, 0, length); if (logger.isInfoEnabled()) hint = \"code: \" + Hex.toHexString(codeCopy); program.memorySave(memOffsetData.intValue(), codeCopy); program.step(); } break; case GASPRICE:{ DataWord gasPrice = program.getGasPrice(); if (logger.isInfoEnabled()) hint = \"price: \" + gasPrice.toString(); program.stackPush(gasPrice); program.step(); } break; case PREVHASH: { DataWord prevHash = program.getPrevHash(); if (logger.isInfoEnabled()) hint = \"prevHash: \" + prevHash; program.stackPush(prevHash); program.step(); } break; case COINBASE: { DataWord coinbase = program.getCoinbase(); if (logger.isInfoEnabled()) hint = \"coinbase: \" + Hex.toHexString(coinbase.getLast20Bytes()); program.stackPush(coinbase); program.step(); } break; case TIMESTAMP:{ DataWord timestamp = program.getTimestamp(); if (logger.isInfoEnabled()) hint = \"timestamp: \" + timestamp.value(); program.stackPush(timestamp); program.step(); } break; case NUMBER:{ DataWord number = program.getNumber(); if (logger.isInfoEnabled()) hint = \"number: \" + number.value(); program.stackPush(number); program.step(); } break; case DIFFICULTY:{ DataWord difficulty = program.getDifficulty(); if (logger.isInfoEnabled()) hint = \"difficulty: \" + difficulty; program.stackPush(difficulty); program.step(); } break; case GASLIMIT:{ DataWord gaslimit = program.getGaslimit(); if (logger.isInfoEnabled()) hint = \"gaslimit: \" + gaslimit; program.stackPush(gaslimit); program.step(); } break; case POP:{ program.stackPop(); program.step(); } break; case DUP1: case DUP2: case DUP3: case DUP4: case DUP5: case DUP6: case DUP7: case DUP8: case DUP9: case DUP10: case DUP11: case DUP12: case DUP13: case DUP14: case DUP15: case DUP16:{ int n = op.val() - OpCode.DUP1.val() + 1; DataWord word_1 = stack.get(stack.size() - n); program.stackPush(word_1.clone()); program.step(); } break; case SWAP1: case SWAP2: case SWAP3: case SWAP4: case SWAP5: case SWAP6: case SWAP7: case SWAP8: case SWAP9: case SWAP10: case SWAP11: case SWAP12: case SWAP13: case SWAP14: case SWAP15: case SWAP16:{ int n = op.val() - OpCode.SWAP1.val() + 2; DataWord word_1 = stack.peek(); stack.set(stack.size() - 1, stack.get(stack.size() - n)); stack.set(stack.size() - n, word_1); program.step(); } break; case MLOAD:{ DataWord addr = program.stackPop(); DataWord data = program.memoryLoad(addr); if (logger.isInfoEnabled()) hint = \"data: \" + data; program.stackPush(data); program.step(); } break; case MSTORE:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); if (logger.isInfoEnabled()) hint = \"addr: \" + addr + \" value: \" + value; program.memorySave(addr, value); program.step(); } break; case MSTORE8:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); byte[] byteVal = {value.getData()[31]}; program.memorySave(addr.intValue(), byteVal); program.step(); } break; case SLOAD:{ DataWord key = program.stackPop(); DataWord val = program.storageLoad(key); if (logger.isInfoEnabled()) hint = \"key: \" + key + \" value: \" + val; if (val == null) { val = key.and(DataWord.ZERO); } program.stackPush(val); program.step(); } break; case SSTORE:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); if (logger.isInfoEnabled()) hint = \"addr: \" + addr + \" value: \" + value; program.storageSave(addr, value); program.step(); } break; case JUMP:{ DataWord pos = program.stackPop(); int nextPC = pos.intValue(); if (nextPC != 0 && program.getOp(nextPC-1) != OpCode.JUMPDEST.val()) throw new BadJumpDestinationException(); if (logger.isInfoEnabled()) hint = \"~> \" + nextPC; program.setPC(nextPC); } break; case JUMPI:{ DataWord pos = program.stackPop(); DataWord cond = program.stackPop(); if (!cond.isZero()) { int nextPC = pos.intValue(); if (nextPC != 0 && program.getOp(nextPC-1) != OpCode.JUMPDEST.val()) throw new BadJumpDestinationException(); if (logger.isInfoEnabled()) hint = \"~> \" + nextPC; program.setPC(nextPC); } else { program.step(); } } break; case PC:{ int pc = program.getPC(); DataWord pcWord = new DataWord(pc); if (logger.isInfoEnabled()) hint = pcWord.toString(); program.stackPush(pcWord); program.step(); } break; case MSIZE:{ int memSize = program.getMemSize(); DataWord wordMemSize = new DataWord(memSize); if (logger.isInfoEnabled()) hint = \"\" + memSize; program.stackPush(wordMemSize); program.step(); } break; case GAS:{ DataWord gas = program.getGas(); if (logger.isInfoEnabled()) hint = \"\" + gas; program.stackPush(gas); program.step(); } break; case PUSH1: case PUSH2: case PUSH3: case PUSH4: case PUSH5: case PUSH6: case PUSH7: case PUSH8: case PUSH9: case PUSH10: case PUSH11: case PUSH12: case PUSH13: case PUSH14: case PUSH15: case PUSH16: case PUSH17: case PUSH18: case PUSH19: case PUSH20: case PUSH21: case PUSH22: case PUSH23: case PUSH24: case PUSH25: case PUSH26: case PUSH27: case PUSH28: case PUSH29: case PUSH30: case PUSH31: case PUSH32:{ program.step(); int nPush = op.val() - PUSH1.val() + 1; byte[] data = program.sweep(nPush); hint = \"\" + Hex.toHexString(data); program.stackPush(data); } break; case JUMPDEST:{ program.step(); } break; case CREATE:{ DataWord value = program.stackPop(); DataWord inOffset = program.stackPop(); DataWord inSize = program.stackPop(); if (logger.isInfoEnabled()) logger.info(logString, program.getPC(), String.format(\"%-12s\", op.name()), program.getGas().value(), program.invokeData.getCallDeep(), hint); program.createContract(value, inOffset, inSize); program.step(); } break; case CALL: case CALLCODE: { DataWord gas = program.stackPop(); DataWord codeAddress = program.stackPop(); DataWord value = program.stackPop(); DataWord inDataOffs = program.stackPop(); DataWord inDataSize = program.stackPop(); DataWord outDataOffs = program.stackPop(); DataWord outDataSize = program.stackPop(); if (logger.isInfoEnabled()) { hint = \"addr: \" + Hex.toHexString(codeAddress.getLast20Bytes()) + \" gas: \" + gas.shortHex() + \" inOff: \" + inDataOffs.shortHex() + \" inSize: \" + inDataSize.shortHex(); logger.info(logString, program.getPC(), String.format(\"%-12s\", op.name()), program.getGas().value(), program.invokeData.getCallDeep(), hint); } MessageCall msg = new MessageCall( op.equals(CALL) ? MsgType.CALL : MsgType.STATELESS, gas, codeAddress, value, inDataOffs, inDataSize, outDataOffs, outDataSize); program.callToAddress(msg); program.step(); } break; case RETURN:{ DataWord offset = program.stackPop(); DataWord size = program.stackPop(); ByteBuffer hReturn = program.memoryChunk(offset, size); program.setHReturn(hReturn); if (logger.isInfoEnabled()) hint = \"data: \" + Hex.toHexString(hReturn.array()) + \" offset: \" + offset.value() + \" size: \" + size.value(); program.step(); program.stop(); } break; case SUICIDE:{ DataWord address = program.stackPop(); program.suicide(address); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(program.getOwnerAddress().getLast20Bytes()); program.stop(); } break; default: break; } if (logger.isInfoEnabled() && !op.equals(CALL) && !op.equals(CREATE)) logger.info(logString, stepBefore, String.format(\"%-12s\", op.name()), program.getGas().longValue(), program.invokeData.getCallDeep(), hint); vmCounter++; } catch (RuntimeException e) { if(e instanceof OutOfGasException) program.spendAllGas(); logger.warn(\"VM halted\", e.getMessage()); program.stop(); throw e; } finally { program.fullTrace(); } }### Assistant: @Test public void testPUSH1() { VM vm = new VM(); program = new Program(Hex.decode(\"60A0\"), invoke); String expected = \"00000000000000000000000000000000000000000000000000000000000000A0\"; program.fullTrace(); vm.step(program); assertEquals(expected, Hex.toHexString(program.stack.peek().getData()).toUpperCase() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Nullable public Throwable error() { return status.getCause(); }### Assistant: @Test public void error_null() { assertThat(response.error()).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: Double calculateInfusionFormulaFromRate( final Double rate, final InfusionRateCalculationDto calculationDto, final Double patientHeight, final String formulaUnit, final Double referenceWeight) { final String[] formulaUnitParts = Pattern.compile(\"/\").split(formulaUnit); final String formulaMassUnit; String formulaPatientUnit = null; final String formulaTimeUnit; if (formulaUnitParts.length == 2) { formulaMassUnit = formulaUnitParts[0]; formulaTimeUnit = formulaUnitParts[1]; } else { formulaMassUnit = formulaUnitParts[0]; formulaPatientUnit = formulaUnitParts[1]; formulaTimeUnit = formulaUnitParts[2]; } final Double rateWithPatientUnit = getRateWithPatientUnits(rate, patientHeight, referenceWeight, formulaPatientUnit); final Double rateInMassUnit = rateWithPatientUnit * calculationDto.getQuantity() / calculationDto.getQuantityDenominator(); final Double rateInFormulaMassUnit = TherapyUnitsConverter.convertToUnit(rateInMassUnit, calculationDto.getQuantityUnit(), formulaMassUnit); if (rateInFormulaMassUnit != null) { final Double timeRatio = TherapyUnitsConverter.convertToUnit(1.0, \"h\", formulaTimeUnit); return rateInFormulaMassUnit / timeRatio; } return null; }### Assistant: @Test public void testCalculateInfusionFormulaFromRate1() { final InfusionRateCalculationDto calculationDto = new InfusionRateCalculationDto(); calculationDto.setQuantity(10.0); calculationDto.setQuantityUnit(\"mg\"); calculationDto.setQuantityDenominator(5.0); final Double formula = medicationsBo.calculateInfusionFormulaFromRate(10.0, calculationDto, 10.0, \"mg/kg/h\", 10.0); assertEquals(new Double(2.0), formula); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void addWallet(Wallet wallet) { wallets.add(wallet); }### Assistant: @Test public void invDownloadTxMultiPeer() throws Exception { VersionMessage ver = new VersionMessage(PARAMS, 100); InetSocketAddress address = new InetSocketAddress(\"127.0.0.1\", 4242); Peer peer2 = new Peer(PARAMS, ver, new PeerAddress(PARAMS, address), blockChain); peer2.addWallet(wallet); VersionMessage peerVersion = new VersionMessage(PARAMS, OTHER_PEER_CHAIN_HEIGHT); peerVersion.clientVersion = NetworkParameters.ProtocolVersion.MINIMUM.getBitcoinProtocolVersion(); peerVersion.localServices = VersionMessage.NODE_NETWORK; connect(); InboundMessageQueuer writeTarget2 = connect(peer2, peerVersion); Coin value = COIN; Transaction tx = createFakeTx(PARAMS, value, this.address); InventoryMessage inv = new InventoryMessage(PARAMS); InventoryItem item = new InventoryItem(InventoryItem.Type.Transaction, tx.getHash()); inv.addItem(item); inbound(writeTarget, inv); GetDataMessage message = (GetDataMessage)outbound(writeTarget); assertEquals(1, message.getItems().size()); assertEquals(tx.getHash(), message.getItems().get(0).hash); assertNotEquals(0, tx.getConfidence().numBroadcastPeers()); inbound(writeTarget2, inv); pingAndWait(writeTarget2); assertNull(outbound(writeTarget2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static EditLogValidation validateEditLog(EditLogInputStream in) { long lastPos = 0; long lastTxId = HdfsConstants.INVALID_TXID; long numValid = 0; FSEditLogOp op = null; while (true) { lastPos = in.getPosition(); try { if ((op = in.readOp()) == null) { break; } } catch (Throwable t) { FSImage.LOG.warn(\"Caught exception after reading \" + numValid + \" ops from \" + in + \" while determining its valid length.\" + \"Position was \" + lastPos, t); in.resync(); FSImage.LOG.warn(\"After resync, position is \" + in.getPosition()); continue; } if (lastTxId == HdfsConstants.INVALID_TXID || op.getTransactionId() > lastTxId) { lastTxId = op.getTransactionId(); } numValid++; } return new EditLogValidation(lastPos, lastTxId, false); }### Assistant: @Test public void testValidateEmptyEditLog() throws IOException { File testDir = new File(TEST_DIR, \"testValidateEmptyEditLog\"); SortedMap<Long, Long> offsetToTxId = Maps.newTreeMap(); File logFile = prepareUnfinalizedTestEditLog(testDir, 0, offsetToTxId); truncateFile(logFile, 8); EditLogValidation validation = EditLogFileInputStream.validateEditLog(logFile); assertTrue(!validation.hasCorruptHeader()); assertEquals(HdfsConstants.INVALID_TXID, validation.getEndTxId()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @PluginBuilderFactory public static Builder newBuilder() { return new Builder(); }### Assistant: @Test public void builderBuildsSuccessfully() { StringItemSourceFactory.Builder builder = StringItemSourceFactory.newBuilder(); StringItemSourceFactory factory = builder.build(); assertNotNull(factory); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void warn(Throwable exception, String format, Object... args) { if (logger.isLoggable(WARNING)) { String message; try { message = format(format, args); } catch (IllegalFormatException e) { logger.log(SEVERE, illegalFormatMessageFor(Level.WARN, format, args), e); message = rawMessageFor(format, args); } logger.log(WARNING, message, exception); } }### Assistant: @Test public void testWarnShortCircuit() { inner.setLevel(Level.OFF); logger.warn(\"hello\"); assertTrue(handler.isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String toString() { return url; }### Assistant: @Test public void canBuildUsingDefaultBase() { assertEquals(\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public WorkflowOperationResult start(WorkflowInstance workflowInstance, JobContext context) throws WorkflowOperationException { cleanUpJobArgument(workflowInstance); MediaPackage mediaPackage = workflowInstance.getMediaPackage(); WorkflowOperationInstance currentOperation = workflowInstance.getCurrentOperation(); String flavors = currentOperation.getConfiguration(PRESERVE_FLAVOR_PROPERTY); final List<MediaPackageElementFlavor> flavorsToPreserve = new ArrayList<MediaPackageElementFlavor>(); boolean deleteExternal = BooleanUtils.toBoolean(currentOperation.getConfiguration(DELETE_EXTERNAL)); String delayStr = currentOperation.getConfiguration(DELAY); int delay = 1; if (delayStr != null) { try { delay = Integer.parseInt(delayStr); } catch (NumberFormatException e) { logger.warn(\"Invalid value '{}' for delay in workflow operation configuration (should be integer)\", delayStr); } } if (delay > 0) { try { logger.debug(\"Sleeping {}s before removing workflow files\", delay); Thread.sleep(delay * 1000); } catch (InterruptedException e) { } } for (String flavor : asList(flavors)) flavorsToPreserve.add(MediaPackageElementFlavor.parseFlavor(flavor)); List<MediaPackageElement> elementsToRemove = new ArrayList<>(); for (MediaPackageElement element : mediaPackage.getElements()) { if (element.getURI() == null) continue; if (!isPreserved(element, flavorsToPreserve)) elementsToRemove.add(element); } List<String> externalBaseUrls = null; if (deleteExternal) { externalBaseUrls = getAllWorkingFileRepositoryUrls(); externalBaseUrls.remove(workspace.getBaseUri().toString()); } for (MediaPackageElement elementToRemove : elementsToRemove) { if (deleteExternal) { for (String repository : externalBaseUrls) { logger.debug(\"Removing {} from repository {}\", elementToRemove.getURI(), repository); try { removeElementFromRepository(elementToRemove, repository); } catch (TrustedHttpClientException ex) { logger.debug(\"Removing media package element {} from repository {} failed: {}\", elementToRemove.getURI(), repository, ex.getMessage()); } } } logger.debug(\"Removing {} from the workspace\", elementToRemove.getURI()); try { mediaPackage.remove(elementToRemove); workspace.delete(elementToRemove.getURI()); } catch (NotFoundException ex) { logger.debug(\"Workspace doesn't contain element with Id '{}' from media package '{}': {}\", elementToRemove.getIdentifier(), mediaPackage.getIdentifier().toString(), ex.getMessage()); } catch (IOException ex) { logger.warn(\"Unable to remove element with Id '{}' from the media package '{}': {}\", elementToRemove.getIdentifier(), mediaPackage.getIdentifier().toString(), ex.getMessage()); } } return createResult(mediaPackage, Action.CONTINUE); }### Assistant: @Test public void testCreanupWOHwithsomeUnknowenUrl() throws WorkflowOperationException, MediaPackageException { Map<String, String> wfInstConfig = new Hashtable<>(); MediaPackageBuilder mpBuilder = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder(); MediaPackage mp = mpBuilder.createNew(); MediaPackageElement track1 = addElementToMediaPackage(mp, MediaPackageElement.Type.Track, \"presenter\", \"source\", null); track1.setURI(UrlSupport.uri(HOSTNAME_NODE1, \"asset\", \"asset\", mp.getIdentifier().toString(), track1.getIdentifier(), 0, \"track.mp4\")); cleanupWOH.start(createWorkflowInstance(wfInstConfig, mp), null); Assert.assertEquals(\"Media package shouldn't contain any elements\", 0, mp.getElements().length); Assert.assertEquals(\"Delete on remote repository not allowed\", 0, deletedFilesURIs.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CSVFormat withDelimiter(final char delimiter) { if (isLineBreak(delimiter)) { throw new IllegalArgumentException(\"The delimiter cannot be a line break\"); } return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); }### Assistant: @Test public void testWithDelimiter() throws Exception { final CSVFormat formatWithDelimiter = CSVFormat.DEFAULT.withDelimiter('!'); assertEquals('!', formatWithDelimiter.getDelimiter()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean matches(@NonNull String rawPassword, @NonNull String encodedPassword) { String password = keyStore.decryptString(encodedPassword, Constants.ALIAS_PASSWORD_KEY); return this.updatableBCrypt.verifyHash(rawPassword, password); }### Assistant: @Test public void matches() { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean createReservation(ReservationId reservationId, String user, Plan plan, ReservationDefinition contract) throws PlanningException { LOG.info(\"placing the following ReservationRequest: \" + contract); try { boolean res = planner.createReservation(reservationId, user, plan, contract); if (res) { LOG.info(\"OUTCOME: SUCCESS, Reservation ID: \" + reservationId.toString() + \", Contract: \" + contract.toString()); } else { LOG.info(\"OUTCOME: FAILURE, Reservation ID: \" + reservationId.toString() + \", Contract: \" + contract.toString()); } return res; } catch (PlanningException e) { LOG.info(\"OUTCOME: FAILURE, Reservation ID: \" + reservationId.toString() + \", Contract: \" + contract.toString()); throw e; } }### Assistant: @Test public void testOrderNoGapImpossible() throws PlanningException { prepareBasicPlan(); int[] f = { 100, 100 }; ReservationDefinition rDef = ReservationSystemTestUtil .createSimpleReservationDefinition(30, 30 * step + f.length * step, f.length * step, 1, recurrenceExpression); assertTrue( plan.toString(), plan.addReservation(new InMemoryReservationAllocation( ReservationSystemTestUtil.getNewReservationId(), rDef, \"u1\", \"dedicated\", 30 * step, 30 * step + f.length * step, ReservationSystemTestUtil.generateAllocation(30 * step, step, f), res, minAlloc), false)); ReservationDefinition rr = new ReservationDefinitionPBImpl(); rr.setArrival(0L); rr.setDeadline(70L); ReservationRequests reqs = new ReservationRequestsPBImpl(); reqs.setInterpreter(ReservationRequestInterpreter.R_ORDER_NO_GAP); ReservationRequest r = ReservationRequest.newInstance( Resource.newInstance(2048, 2), 10, 1, 10); ReservationRequest r2 = ReservationRequest.newInstance( Resource.newInstance(1024, 1), 10, 10, 20); List<ReservationRequest> list = new ArrayList<ReservationRequest>(); list.add(r); list.add(r2); list.add(r); list.add(r2); reqs.setReservationResources(list); rr.setReservationRequests(reqs); ReservationId reservationID = ReservationSystemTestUtil .getNewReservationId(); boolean result = false; try { result = agent.createReservation(reservationID, \"u1\", plan, rr); fail(); } catch (PlanningException p) { } assertFalse(\"Agent-based allocation should have failed\", result); assertTrue(\"Agent-based allocation should have failed\", plan .getAllReservations().size() == 3); System.out .println(\"--------AFTER ORDER_NO_GAP IMPOSSIBLE ALLOCATION (queue: \" + reservationID + \")----------\"); System.out.println(plan.toString()); System.out.println(plan.toCumulativeString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Class<? extends ResourceProvider> getProviderClass(ClassLoader cl) throws ClassNotFoundException { if (providerClass == null) { providerClass = cl.loadClass(provider).asSubclass(ResourceProvider.class); } return providerClass; }### Assistant: @Test public void testGetProviderClass() throws Exception { List<ResourceConfig> resourceConfigs = getResourceConfigs(); Assert.assertEquals(2, resourceConfigs.size()); Assert.assertTrue(resourceConfigs.get(0).getProviderClass(getClass().getClassLoader()).equals(ViewConfigTest.MyResourceProvider.class)); Assert.assertTrue(resourceConfigs.get(1).getProviderClass(getClass().getClassLoader()).equals(ViewConfigTest.MyResourceProvider.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(final Object obj) { if (obj == this) { return true; } if (!(obj instanceof XmlSchemaDTO)) { return false; } final XmlSchemaDTO other = (XmlSchemaDTO) obj; return new EqualsBuilder() .append(this.location, other.location) .isEquals(); }### Assistant: @Test public void equalsIsTypeAware() { assertFalse( \"Comparison with different type should always return false\", x.equals(this)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public IInfoSistemaDBEntity getInfoSistemaDBEntity() { if (infoSistemaDBEntity == null) { infoSistemaDBEntity = getFactory().getInfoSistemaDBEntity(conn); } return infoSistemaDBEntity; }### Assistant: @Test public void infoSistemaDBEntityTest() { Assert.notNull(getManager(), \"ArchidocManager es nulo\"); IInfoSistemaDBEntity dbEntity = getManager().getInfoSistemaDBEntity(); Assert.notNull(dbEntity, \"entity es nulo\"); Assert.isTrue(ArchivoTables.AGINFOSISTEMA_TABLE_NAME.equals(dbEntity .getTableName()),\"Las tablas no coinciden\"); logger.info(getTextoCount(dbEntity.getTableName(), dbEntity.getCount())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void operationComplete(F future) throws Exception { InternalLogger internalLogger = logNotifyFailure ? logger : null; if (future.isSuccess()) { V result = future.get(); for (Promise<? super V> p: promises) { PromiseNotificationUtil.trySuccess(p, result, internalLogger); } } else if (future.isCancelled()) { for (Promise<? super V> p: promises) { PromiseNotificationUtil.tryCancel(p, internalLogger); } } else { Throwable cause = future.cause(); for (Promise<? super V> p: promises) { PromiseNotificationUtil.tryFailure(p, cause, internalLogger); } } }### Assistant: @Test public void testListenerSuccess() throws Exception { @SuppressWarnings(\"unchecked\") Promise<Void> p1 = mock(Promise.class); @SuppressWarnings(\"unchecked\") Promise<Void> p2 = mock(Promise.class); @SuppressWarnings(\"unchecked\") PromiseNotifier<Void, Future<Void>> notifier = new PromiseNotifier<Void, Future<Void>>(p1, p2); @SuppressWarnings(\"unchecked\") Future<Void> future = mock(Future.class); when(future.isSuccess()).thenReturn(true); when(future.get()).thenReturn(null); when(p1.trySuccess(null)).thenReturn(true); when(p2.trySuccess(null)).thenReturn(true); notifier.operationComplete(future); verify(p1).trySuccess(null); verify(p2).trySuccess(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Flux<TopicMessage> retrieve(TopicMessageFilter filter) { if (!retrieverProperties.isEnabled()) { return Flux.empty(); } PollingContext context = new PollingContext(filter); return Flux.defer(() -> poll(context)) .repeatWhen(Repeat.create(r -> !context.isComplete(), Long.MAX_VALUE) .fixedBackoff(retrieverProperties.getPollingFrequency()) .jitter(Jitter.random(0.1)) .withBackoffScheduler(scheduler)) .name(\"retriever\") .metrics() .retryBackoff(Long.MAX_VALUE, Duration.ofSeconds(1)) .timeout(retrieverProperties.getTimeout(), scheduler) .doOnCancel(context::onComplete) .doOnComplete(context::onComplete) .doOnNext(context::onNext); }### Assistant: @Test void greaterThanPageSize() { int maxPageSize = retrieverProperties.getMaxPageSize(); retrieverProperties.setMaxPageSize(2); domainBuilder.topicMessage().block(); domainBuilder.topicMessage().block(); domainBuilder.topicMessage().block(); TopicMessageFilter filter = TopicMessageFilter.builder() .startTime(Instant.EPOCH) .build(); pollingTopicMessageRetriever.retrieve(filter) .map(TopicMessage::getSequenceNumber) .as(StepVerifier::create) .expectNext(1L, 2L, 3L) .expectComplete() .verify(Duration.ofMillis(500)); retrieverProperties.setMaxPageSize(maxPageSize); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void onItemClick(int index) { if (!selectedItems.contains(index)) { if (selectedItems.isEmpty()) { selectItem(index); } else { unselectItem(selectedItems.get(0)); selectItem(index); } } else { getAudioHelper().stop(); } if (quickAdvance && listener != null) { listener.advance(); } if (noButtonsMode) { SelectChoice item = items.get(index); Clip clip = getClip(getFormEntryPrompt(), item, getReferenceManager()); if (clip != null) { getAudioHelper().play(clip); } } widgetValueChanged(); }### Assistant: @Test public void whenChoicesHaveAudio_clickingChoice_doesNotPlayAudio() throws Exception { createMockReference(referenceManager, \"file: createMockReference(referenceManager, \"file: formEntryPrompt = new MockFormEntryPromptBuilder() .withIndex(\"i am index\") .withSelectChoices(asList( new SelectChoice(\"1\", \"1\"), new SelectChoice(\"2\", \"2\") )) .withSpecialFormSelectChoiceText(asList( new Pair<>(FormEntryCaption.TEXT_FORM_AUDIO, \"file: new Pair<>(FormEntryCaption.TEXT_FORM_AUDIO, \"file: )) .build(); GridWidget widget = getActualWidget(); widget.onItemClick(0); verify(audioHelper, never()).play(any()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isMultipart(String a) { return isMatch(Constants.MULTIPART_RELATED_TYPE, a); }### Assistant: @Test public void testIsMultipart() { assertTrue(MimeTypeHelper.isMultipart(\"multipart/related\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public @Nullable StateDescription getStateDescription(String itemName, @Nullable Locale locale) { StateDescriptionFragment stateDescriptionFragment = getMergedStateDescriptionFragments(itemName, locale); return stateDescriptionFragment != null ? stateDescriptionFragment.toStateDescription() : null; }### Assistant: @Test public void testOptionsWhenTwoDescriptionProvidersHigherRankingProvidesOptions() { StateDescriptionFragment stateDescriptionFragment1 = StateDescriptionFragmentBuilder.create() .withOption(new StateOption(\"value\", \"label\")).build(); registerStateDescriptionFragmentProvider(stateDescriptionFragment1, -1); StateDescriptionFragment stateDescriptionFragment2 = StateDescriptionFragmentBuilder.create().build(); registerStateDescriptionFragmentProvider(stateDescriptionFragment2, -2); StateDescription stateDescription = item.getStateDescription(); assertThat(stateDescription.getOptions(), is(stateDescriptionFragment1.getOptions())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String substring(final String dn, final int beginIndex) { if (beginIndex < 0) { throw new IndexOutOfBoundsException(\"beginIndex cannot be negative\"); } final List<LdapAttribute> attrs = convertDnToAttributes(dn); if (beginIndex >= attrs.size()) { throw new IndexOutOfBoundsException(\"beginIndex cannot be larger than the number of RDNs\"); } final StringBuilder sb = new StringBuilder(); for (int i = 0; i < attrs.size(); i++) { if (i >= beginIndex) { final LdapAttribute la = attrs.get(i); sb.append(la.getName()).append(\"=\").append(la.getStringValue()).append(\",\"); } } if (sb.length() > 0 && sb.charAt(sb.length() - 1) == ',') { sb.deleteCharAt(sb.length() - 1); } return sb.toString(); }### Assistant: @Test(groups = \"dnParser\") public void testSubstring() throws Exception { final String dn = \"CN=Jim Smith,UID=jsmith,DC=ldaptive,DC=org\"; try { DnParser.substring(dn, -1); Assert.fail(\"Should have thrown IndexOutOfBoundsException\"); } catch (Exception e) { Assert.assertEquals(e.getClass(), IndexOutOfBoundsException.class); } Assert.assertEquals(DnParser.substring(dn, 0), \"CN=Jim Smith,UID=jsmith,DC=ldaptive,DC=org\"); Assert.assertEquals(DnParser.substring(dn, 1), \"UID=jsmith,DC=ldaptive,DC=org\"); Assert.assertEquals(DnParser.substring(dn, 2), \"DC=ldaptive,DC=org\"); Assert.assertEquals(DnParser.substring(dn, 3), \"DC=org\"); try { DnParser.substring(dn, 4); Assert.fail(\"Should have thrown IndexOutOfBoundsException\"); } catch (Exception e) { Assert.assertEquals(e.getClass(), IndexOutOfBoundsException.class); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @DeleteMapping(path = \"/{id}\", produces = APPLICATION_JSON_VALUE) public JsonNode delete(@PathVariable String id) throws DocumentNotFoundException { return Optional .ofNullable(store.remove(id)) .map(x -> messageResponse(String.format(\"Document '%s' was deleted.\", id))) .orElseThrow(documentNotFound(id)); }### Assistant: @Test public void deleteNotExists() throws Exception { mockMvc .perform(delete(\"/doc1\")) .andExpect(status().isNotFound()) .andExpect(content().contentType(APPLICATION_JSON_UTF8)) .andExpect(jsonPath(\"$.message\", is(\"Document 'doc1' was not found.\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Point scalarMultiply(BigInteger integer) { if (integer.equals(BigInteger.ZERO)) { return PointEd448.O; } Point[] qs = new Point[]{O, O}; Point[] rs = new Point[]{this, this, negateY()}; int[] signedBin = ArrayUtils.toMutualOppositeForm(integer); for (int aSignedBin : signedBin) { qs[0] = qs[0].doubling(); qs[1] = qs[0].add(rs[1 - aSignedBin]).negate(); qs[0] = qs[(aSignedBin ^ (aSignedBin >> 31)) - (aSignedBin >> 31)]; } return qs[0]; }### Assistant: @Test public void success_ScalarMultipleBasePoint_2() { Point point = curve.getBasePoint().scalarMultiply(new BigInteger(\"2\")); assertThat(point.getAffineX().getInteger(), is(new BigInteger(\"484559149530404593699549205258669689569094240458212040187660132787056912146709081364401144455726350866276831544947397859048262938744149\"))); assertThat(point.getAffineY().getInteger(), is(new BigInteger(\"494088759867433727674302672526735089350544552303727723746126484473087719117037293890093462157703888342865036477787453078312060500281069\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void sort() { Arrays.sort(_array, 0, _limit); }### Assistant: @Test public void testSort() { DoubleList list = new DoubleList(); list.sort(); assertThat(list.toArray()).isEmpty(); list.add(10d); list.add(5d); list.sort(); assertThat(list.toArray()).containsExactly(5d, 10d); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings({\"unchecked\"}) public static Reader createReader(String readerSpec, String sensorName) { Assert.argument(readerSpec != null, \"readerSpec == null\"); Assert.argument(sensorName != null, \"sensorName == null\"); return createReader(readerSpec, sensorName, null); }### Assistant: @Test public void testCreateDecoratedAaiProductReader() throws Exception { final Reader reader = ReaderFactory.createReader(\"GunzipDecorator,AaiProductReader\", \"\"); assertNotNull(reader); assertTrue(reader instanceof GunzipDecorator); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean contains(DateTime date) { int otherDay = date.getDayOfWeek(); LocalTime lt = date.toLocalTime(); boolean startBounded = (lt.isEqual(start) || lt.isAfter(start)); boolean endBounded = (lt.isEqual(end) || lt.isBefore(end)); return dayIsWithinSessionDay(otherDay) && ((startBounded && endBounded) || (day != endDay && ((otherDay == day && startBounded) || (otherDay == endDay && endBounded) || dayIsBetweenStartEndDays(otherDay)) )); }### Assistant: @Test public void testContains() { TradingSession session = new TradingSessionImpl(DateTimeConstants.FRIDAY, DateTimeConstants.FRIDAY, new LocalTime(8, 30), new LocalTime(15, 30)); DateTime test = new DateTime(2010, 9, 10, 8, 30, 0, 0); assertTrue(session.contains(test)); test = new DateTime(2010, 9, 10, 15, 30, 0, 0); assertTrue(session.contains(test)); test = new DateTime(2010, 9, 10, 8, 29, 0, 0); assertFalse(session.contains(test)); test = new DateTime(2010, 9, 10, 15, 31, 0, 0); assertFalse(session.contains(test)); test = new DateTime(2010, 9, 11, 8, 30, 0, 0); assertFalse(session.contains(test)); session = new TradingSessionImpl(DateTimeConstants.SUNDAY, DateTimeConstants.TUESDAY, new LocalTime(18, 30), new LocalTime(3, 30)); test = new DateTime(2010, 9, 13, 3, 29, 59, 999); assertTrue(session.contains(test)); session = new TradingSessionImpl(DateTimeConstants.SUNDAY, DateTimeConstants.TUESDAY, new LocalTime(18, 30), new LocalTime(3, 30)); test = new DateTime(2010, 9, 11, 3, 29, 59, 999); assertFalse(session.contains(test)); session = new TradingSessionImpl(DateTimeConstants.SUNDAY, DateTimeConstants.TUESDAY, new LocalTime(18, 30), new LocalTime(3, 30)); test = new DateTime(2010, 9, 13, 3, 30, 01, 999); assertTrue(session.contains(test)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String generate() { long time = new Date().getTime(); String head = stringify(time); return head + nextTail(); }### Assistant: @Test public void testGenerate() throws InterruptedException { String a = IdGenerator.generate(); Thread.sleep(2); String b = IdGenerator.generate(); assertNotEquals(a, b); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseDescriptorDTO findResponseDescriptor(final Map<String, StubDescriptor> stubDescriptors, final WilmaHttpRequest request) { ResponseDescriptorDTO responseDescriptorDTO = null; for (StubDescriptor stubDescriptor : stubDescriptors.values()) { StubDescriptorAttributes attributes = stubDescriptor.getAttributes(); if (attributes.isActive()) { Iterator<DialogDescriptor> iterator = stubDescriptor.getDialogDescriptors().iterator(); while (iterator.hasNext() && responseDescriptorDTO == null) { DialogDescriptor dialogDescriptor = iterator.next(); responseDescriptorDTO = evaluateDialogDescriptor(request, dialogDescriptor); } } } return responseDescriptorDTO; }### Assistant: @Test public void testFindResponseDescriptorWhenConditionThrowsExceptionShouldLogError() { NullPointerException nullPointerException = new NullPointerException(); given(stubDescriptor.getDialogDescriptors()).willReturn(dialogDescriptors); given(dialogDescriptor.getConditionDescriptor()).willReturn(conditionDescriptor); given(dialogDescriptor.getAttributes().getName()).willReturn(DIALOG_DESCRIPTOR_NAME); given(conditionDescriptor.getCondition()).willReturn(condition); given(conditionEvaluator.evaluate(condition, clonedRequest)).willThrow(nullPointerException); given(stackTraceConverter.getStackTraceAsString(nullPointerException)).willReturn(\"error\"); Whitebox.setInternalState(underTest, \"logger\", logger); underTest.findResponseDescriptor(stubDescriptors, request); verify(logger).error(Mockito.eq(\"Error during condition evaluation in the dialog descriptor 'dialog-descriptor'!\"), Mockito.any(NullPointerException.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Observable<Double> sumDoubles(Observable<Double> source) { return source.reduce(0.0d, new Func2<Double, Double, Double>() { @Override public Double call(Double accu, Double next) { return accu + next; } }); }### Assistant: @Test public void testSumOfAFewDoubles() throws Throwable { Observable<Double> src = Observable.from(0.0d, 1.0d, 0.5d); sumDoubles(src).subscribe(wd); verify(wd, times(1)).onNext(anyDouble()); verify(wd).onNext(1.5d); verify(wd, never()).onError(any(Throwable.class)); verify(wd, times(1)).onCompleted(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final void close() { if (!seal(TransactionState.CLOSED)) { checkState(state == TransactionState.CLOSED, \"Transaction %s is ready, it cannot be closed\", getIdentifier()); return; } for (TransactionContextWrapper contextWrapper : txContextWrappers.values()) { contextWrapper.maybeExecuteTransactionOperation(new TransactionOperation() { @Override public void invoke(final TransactionContext transactionContext, final Boolean havePermit) { transactionContext.closeTransaction(); } }); } txContextWrappers.clear(); }### Assistant: @Test public void testClose() { ActorRef actorRef = setupActorContextWithInitialCreateTransaction(getSystem(), READ_WRITE); doReturn(readDataReply(null)).when(mockActorContext).executeOperationAsync( eq(actorSelection(actorRef)), eqReadData(), any(Timeout.class)); TransactionProxy transactionProxy = new TransactionProxy(mockComponentFactory, READ_WRITE); transactionProxy.read(TestModel.TEST_PATH); transactionProxy.close(); verify(mockActorContext).sendOperationAsync( eq(actorSelection(actorRef)), isA(CloseTransaction.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public DialogDescriptorAttributes getAttributes(final Element el) { String name = el.getAttribute(\"name\"); DialogDescriptorUsage usage = getUsage(el.getAttribute(\"usage\")); long validityValue = getValidityValue(el.getAttribute(\"validityValue\"), name, usage); String comment = el.getAttribute(\"comment\"); DialogDescriptorAttributes attributes = createAttributes(name, usage, validityValue, comment); return attributes; }### Assistant: @Test(expectedExceptions = DescriptorValidationFailedException.class) public void testParseWhenUsageIsTimeoutAndValidityValueNotSetShouldThrowException() { given(dialogDescriptor.getAttribute(\"name\")).willReturn(\"name\"); given(dialogDescriptor.getAttribute(\"usage\")).willReturn(\"timeout\"); underTest.getAttributes(dialogDescriptor); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isEmpty() { queueLock.lock(); try { while (!finishQueueingFlag && size() == 0) { try { notEmpty.await(); } catch (InterruptedException e) { return true; } } return super.isEmpty(); } finally { queueLock.unlock(); } }### Assistant: @Test public void testIsEmpty005() throws Exception { int capacity = 1; final long sleeptime = 1000; final CountDownLatch threadSync = new CountDownLatch(1); final ArrayBlockingQueueEx<DataValueObject> queue = new ArrayBlockingQueueEx<DataValueObject>(capacity); ErrorFeedBackThread thread01 = new ErrorFeedBackThread() { @Override public void doRun() throws Exception { long timeStart = System.currentTimeMillis(); threadSync.countDown(); boolean result = queue.isEmpty(); long timeEnd = System.currentTimeMillis(); assertTrue(result); long timeDiff = timeEnd - timeStart; if (timeDiff < (sleeptime - 50)) { throw new RuntimeException(\"An exception did not occur within a definite period of time.\"); } } }; thread01.start(); threadSync.await(); TimeUnit.MILLISECONDS.sleep(sleeptime); thread01.interrupt(); thread01.throwErrorOrExceptionIfThrown(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<TableFieldSchema> getSchemaFromString(String fields) { logger.atFine().log(\"getSchemaFromString('%s')\", fields); JsonParser jsonParser = new JsonParser(); JsonArray json = jsonParser.parse(fields).getAsJsonArray(); List<TableFieldSchema> fieldsList = new ArrayList<>(); for (JsonElement jsonElement : json) { checkArgument( jsonElement.isJsonObject(), \"Expected JsonObject for element, got '%s'.\", jsonElement); JsonObject jsonObject = jsonElement.getAsJsonObject(); checkArgument( jsonObject.get(\"name\") != null, \"Expected non-null entry for key 'name' in JsonObject '%s'\", jsonObject); checkArgument( jsonObject.get(\"type\") != null, \"Expected non-null entry for key 'type' in JsonObject '%s'\", jsonObject); TableFieldSchema fieldDef = new TableFieldSchema(); fieldDef.setName(jsonObject.get(\"name\").getAsString()); fieldDef.setType(jsonObject.get(\"type\").getAsString()); if (jsonObject.get(\"mode\") != null) { fieldDef.setMode(jsonObject.get(\"mode\").getAsString()); } if (jsonObject.get(\"type\").getAsString().equals(\"RECORD\")) { checkArgument( jsonObject.get(\"fields\") != null, \"Expected non-null entry for key 'fields' in JsonObject of type RECORD: '%s'\", jsonObject); fieldDef.setFields(getSchemaFromString(jsonObject.get(\"fields\").toString())); } fieldsList.add(fieldDef); } return fieldsList; }### Assistant: @Test public void testGetSchemaFromStringWithMissingType() { String fields = \"[{'name': 'MyName', 'type': 'STRING'},\" + \"{'name': 'Number', 'mode': 'sample'}]\"; assertThrows(IllegalArgumentException.class, () -> BigQueryUtils.getSchemaFromString(fields)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private DataSyncConfiguration() { }### Assistant: @Test public void testDataSyncConfiguration() { DataSyncConfiguration.getInstance().disableSyncMode(); assertFalse(DataSyncConfiguration.getInstance().isEnableSyncMode()); DataSyncConfiguration.getInstance().enableSyncMode(); DasDataSynchronizer dasDataSynchronizer1 = DataSyncConfiguration.getInstance().getDasDataSynchronizer(\"dbA\"); assertEquals(\"TestSynchronizer\", dasDataSynchronizer1.getClass().getSimpleName()); DasDataSynchronizer dasDataSynchronizer2 = DataSyncConfiguration.getInstance().getDasDataSynchronizer(\"dbB\"); assertEquals(\"TestSynchronizer\", dasDataSynchronizer2.getClass().getSimpleName()); assertTrue(DataSyncConfiguration.getInstance().isEnableSyncMode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Set<HostInterfaceModel> filterByName( final String pattern ) { Preconditions.checkNotNull( pattern ); return Sets.filter( interfaces, new Predicate<HostInterfaceModel>() { @Override public boolean apply( final HostInterfaceModel intf ) { return intf.getName().matches( pattern ); } } ); }### Assistant: @Test public void testFilterByName() { Set<HostInterfaceModel> ifaces = hostInterfaces.filterByName( Common.DEFAULT_CONTAINER_INTERFACE ); assertFalse( ifaces.isEmpty() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object extract(String name, Parameter parameter, MultiMap params) { AbstractSerializableParameter abstractSerializableParameter = (AbstractSerializableParameter) parameter; if (!params.contains(name)) { if (abstractSerializableParameter.getRequired()) { throw new IllegalArgumentException(\"Missing required parameter: \" + name); } else if (abstractSerializableParameter.getDefaultValue()!=null){ return abstractSerializableParameter.getDefaultValue(); } else { return null; } } if ((abstractSerializableParameter.getAllowEmptyValue() == null || !abstractSerializableParameter.getAllowEmptyValue()) && StringUtils.isEmpty(params.get(name))) { throw new IllegalArgumentException( \"Empty value is not authorized for parameter: \" + name); } if (\"array\".equals(abstractSerializableParameter.getType())) { if (\"multi\".equals(abstractSerializableParameter.getCollectionFormat())) { return params.getAll(name); } else { List<String> resultParams = this.splitArrayParam(abstractSerializableParameter, params.get(name)); if (resultParams != null) { return resultParams; } } } return params.get(name); }### Assistant: @Test() public void testArrayCsv() { String name = \"myName\"; SerializableParameter parameter = new QueryParameter(); parameter.setName(\"myName\"); parameter.setType(\"array\"); parameter.setCollectionFormat(\"csv\"); String param = \"toto,tutu,titi\"; MultiMap params = MultiMap.caseInsensitiveMultiMap(); params.add(name, param); Object result = abstractSerializableParameterExtractor.extract(name, parameter, params); Assert.assertArrayEquals(new String[] { \"toto\", \"tutu\", \"titi\" }, ((List) result).toArray()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void updateResourceHolder() { stubResourceHolder.setConditionChekers(new ArrayList<>(temporaryStubResourceHolder.getConditionCheckers())); stubResourceHolder.setResponseFormatters(new ArrayList<>(temporaryStubResourceHolder.getResponseFormatters())); stubResourceHolder.setTemplates(new HashMap<>(temporaryStubResourceHolder.getTemplates())); updateRequestInterceptors(); updateResponseInterceptors(); stubResourceHolder.setSequenceHandlers(new ArrayList<>(temporaryStubResourceHolder.getSequenceHandlers())); }### Assistant: @Test public void testUpdateResourceHolderWhenNoRequestInterceptorsShouldNotSetInterceptors() { given(temporaryStubResourceHolder.getRequestInterceptors()).willReturn(null); underTest.updateResourceHolder(); verify(stubResourceHolder, BDDMockito.never()).setRequestInterceptors(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Class<?> forNameWithCallerClassLoader(String name, Class<?> caller) throws ClassNotFoundException { return forName(name, caller.getClassLoader()); }### Assistant: @Test public void tetForNameWithCallerClassLoader() throws Exception { Class c = ClassHelper.forNameWithCallerClassLoader(ClassHelper.class.getName(), ClassHelperTest.class); assertThat(c == ClassHelper.class, is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void write(final VcfHeader header, final List<VcfSample> samples, final List<VcfRecord> records, final PrintWriter writer) { writeHeader(header, writer); writeColumnHeader(samples, writer); writeRecords(samples, records, writer); }### Assistant: @Test(expected=NullPointerException.class) public void testWriteNullSamples() throws Exception { write(header, null, records, writer); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String addAbstract(Locale locale,String text){ String ret; if(text == null || text.isEmpty()){ ret = abstractTexts.remove(locale); } else { ret = abstractTexts.put(locale, text); } return ret; }### Assistant: @Test public void testAddAbstract() throws Exception { Description descr = getDescription(); assertTrue(descr.getAbstract(new Locale(\"en\")).equals(\"I've said hello !\")); descr.addAbstract(new Locale(\"en\",\"en\"), \"Good morning world\"); assertTrue(descr.getAbstract(new Locale(\"en\",\"en\")).equals(\"Good morning world\")); assertTrue(descr.getAbstract(new Locale(\"en\")).equals(\"I've said hello !\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T> void firePostEntity(T entity) { entityPostPersitEvent.fire(EntityPostPersit.of(entity)); }### Assistant: @Test public void shouldFirePostEntity() { Jedi jedi = new Jedi(); jedi.name = \"Luke\"; subject.firePostEntity(jedi); ArgumentCaptor<EntityPostPersit> captor = ArgumentCaptor.forClass(EntityPostPersit.class); verify(entityPostPersitEvent).fire(captor.capture()); EntityPostPersit value = captor.getValue(); assertEquals(jedi, value.getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public RedactedDocument redactDocument(String document, RuleExecutionContainer ruleExecutionContainer, FactModel factModel) { Document xmlDocument = null; String tryPolicyDocument = null; final List<Node> redactNodeList = new LinkedList<Node>(); final Set<String> redactSectionCodesAndGeneratedEntryIds = new HashSet<String>(); final Set<String> redactSectionSet = new HashSet<String>(); final Set<String> redactCategorySet = new HashSet<String>(); final XacmlResult xacmlResult = factModel.getXacmlResult(); try { xmlDocument = documentXmlConverter.loadDocument(document); final Document factModelDocument = documentXmlConverter .loadDocument(marshaller.marshal(factModel)); for (final AbstractDocumentLevelRedactionHandler documentLevelRedactionHandler : documentLevelRedactionHandlers) { documentLevelRedactionHandler.execute(xmlDocument, redactSectionCodesAndGeneratedEntryIds, redactNodeList); } for (final String obligation : xacmlResult.getPdpObligations()) { for (final AbstractObligationLevelRedactionHandler obligationLevelRedactionHandler : obligationLevelRedactionHandlers) { obligationLevelRedactionHandler.execute(xmlDocument, xacmlResult, factModel, factModelDocument, ruleExecutionContainer, redactNodeList, redactSectionCodesAndGeneratedEntryIds, redactSectionSet, obligation); } } for (final ClinicalFact fact : factModel.getClinicalFactList()) { for (final AbstractClinicalFactLevelRedactionHandler clinicalFactLevelRedactionHandler : clinicalFactLevelRedactionHandlers) { clinicalFactLevelRedactionHandler.execute(xmlDocument, xacmlResult, factModel, factModelDocument, fact, ruleExecutionContainer, redactNodeList, redactSectionCodesAndGeneratedEntryIds, redactCategorySet); } } tryPolicyDocument = documentXmlConverter .convertXmlDocToString(xmlDocument); for (final Node nodeToBeReadacted : redactNodeList) { redactNodeIfNotNull(nodeToBeReadacted); } for (final AbstractPostRedactionLevelRedactionHandler postRedactionRedactionHandler : postRedactionLevelRedactionHandlers) { postRedactionRedactionHandler.execute(xmlDocument, xacmlResult, factModel, factModelDocument, ruleExecutionContainer, redactNodeList, redactSectionCodesAndGeneratedEntryIds); } document = documentXmlConverter.convertXmlDocToString(xmlDocument); } catch (final Exception e) { logger.error(e.getMessage(), e); throw new DS4PException(e.toString(), e); } return new RedactedDocument(document, tryPolicyDocument, redactSectionSet, redactCategorySet); }### Assistant: @Test public void testRedactDocument_RemC32() throws Throwable { initDocumentRedactorWithActualServices(); String remC32 = fileReader.readFile(\"testRemC32.xml\"); final String remRuleExecutionContainerActual = fileReader .readFile(\"testRemRuleExecutionContainerActual.xml\"); final RuleExecutionContainer remRuleExecutionContainerActualObj = marshaller .unmarshalFromXml(RuleExecutionContainer.class, remRuleExecutionContainerActual); final String remXacmlResult = fileReader .readFile(\"testRemXacmlResult.xml\"); final XacmlResult remXacmlResultObj = marshaller.unmarshalFromXml( XacmlResult.class, remXacmlResult); final String factModelXml = factModelExtractor.extractFactModel(remC32, marshaller.marshal(remXacmlResultObj)); final FactModel factModel = marshaller.unmarshalFromXml( FactModel.class, factModelXml); setValueSetCategories(factModel); remC32 = embeddedClinicalDocumentExtractor .extractClinicalDocumentFromFactModel(factModelXml); final String ethObservationId = \"d17e379\"; final String hivObservationId = \"d17e356\"; factModel.setXacmlResult(xacmlResultMock); final String redactedC32 = documentRedactor.redactDocument(remC32, remRuleExecutionContainerActualObj, factModel) .getRedactedDocument(); assertNotNull(getSectionElement(remC32, PROBLEMS_SECTION)); assertNotNull(getSectionElement(remC32, MEDICATIONS_SECTION)); assertNull(getSectionElement(remC32, ALLERGIES_SECTION)); assertNull(getSectionElement(remC32, RESULTS_SECTION)); assertNotNull(getSectionElement(redactedC32, PROBLEMS_SECTION)); assertNotNull(getSectionElement(redactedC32, MEDICATIONS_SECTION)); assertNull(getSectionElement(redactedC32, ALLERGIES_SECTION)); assertNull(getSectionElement(redactedC32, RESULTS_SECTION)); assertNotNull(getEntryElement(remC32, ethObservationId)); assertNotNull(getEntryElement(remC32, hivObservationId)); assertNull(getEntryElement(redactedC32, ethObservationId)); assertNull(getEntryElement(redactedC32, hivObservationId)); assertTrue(getHumanReadableTextNodeList(remC32, \"substance abuse\") .getLength() > 0); assertTrue(getHumanReadableTextNodeList(remC32, \"hiv\").getLength() > 0); assertTrue(getHumanReadableTextNodeList(redactedC32, \"substance abuse\") .getLength() == 0); assertTrue(getHumanReadableTextNodeList(redactedC32, \"hiv\").getLength() == 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static ModifyPolicyEntry of(final String policyId, final PolicyEntry policyEntry, final DittoHeaders dittoHeaders) { return of(PolicyId.of(policyId), policyEntry, dittoHeaders); }### Assistant: @Test(expected = NullPointerException.class) public void tryToCreateInstanceWithNullPolicyEntry() { ModifyPolicyEntry.of(TestConstants.Policy.POLICY_ID, null, TestConstants.EMPTY_DITTO_HEADERS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void save(final InputStream stream) { FileOutputStream fileOutput; try { fileOutput = new FileOutputStream(configFile); try { IOUtils.copy(stream, fileOutput); } finally { fileOutput.close(); } } catch (final IOException e) { throw new RuntimeException(e); } }### Assistant: @Test public void testStoreStreamUpdatesExistingDocumentAndDoesNotTryToCreateNewOne() throws Exception { final ByteArrayInputStream input = new ByteArrayInputStream(\"hello\".getBytes()); makeConfigurationExisting(\"huch\".getBytes()); storage.save(input); final File configFile = new File(tempDir.getRoot(), \"configuration.zip\"); assertTrue(configFile.exists()); assertArrayEquals(\"hello\".getBytes(), FileUtils.readFileToByteArray(configFile)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SystemException getSystemException(final Exception e) { SystemException result = null; if (e instanceof BeanCreationException) { if (((NestedRuntimeException) e).getMostSpecificCause() != null) { Throwable ex = e; boolean found = false; while (ex.getCause() != null && !found) { if (ex.getCause() instanceof SystemException) { found = true; result = (SystemException) ex.getCause(); } ex = ex.getCause(); } } } return result; }### Assistant: @Test public void testGetSystemExceptionShouldReturnWithSystemExceptionWhenExceptionCauseContainsSystemException() { given(beanCreationException.getMostSpecificCause()).willReturn(invalidPropertyException); given(beanCreationException.getCause()).willReturn(invalidPropertyException, invalidPropertyException); SystemException actual = underTest.getSystemException(beanCreationException); assertNotNull(actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping( value = \"/q/{query}\", method = RequestMethod.GET ) public @ResponseBody DashboardSearchResult search( @PathVariable String query, @RequestParam( required = false ) Set<DashboardItemType> max, @RequestParam( required = false ) Integer count, @RequestParam( required = false ) Integer maxCount ) { return dashboardService.search( query, max, count, maxCount ); }### Assistant: @Test public void verifyEndpointWithSearchQueryWithMaxArg() throws Exception { mockMvc.perform( get( ENDPOINT + \"/alfa\" ) .param( \"max\", \"CHART\" ) ) .andExpect( status().isOk() ); verify( dashboardService ).search( \"alfa\" , Sets.newHashSet( DashboardItemType.CHART ), null, null ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void removeProcedure( final UnitOfWork transaction, final String procedureName ) throws KException { ArgCheck.isNotNull( transaction, \"transaction\" ); ArgCheck.isTrue( ( transaction.getState() == State.NOT_STARTED ), \"transaction state is not NOT_STARTED\" ); ArgCheck.isNotEmpty( procedureName, \"procedureName\" ); final Procedure[] procedures = getProcedures( transaction, procedureName ); if ( procedures.length == 0 ) { throw new KException( Messages.getString( Relational.PROCEDURE_NOT_FOUND_TO_REMOVE, procedureName ) ); } procedures[ 0 ].remove( transaction ); }### Assistant: @Test( expected = IllegalArgumentException.class ) public void shouldFailTryingToRemoveNullProcedureName() throws Exception { this.model.removeProcedure( getTransaction(), null ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void seekBufferToNextMultipleOfEight(ByteBuffer bb) { int pos = bb.position(); if (pos % 8 == 0) { return; } bb.position(pos + (8 - (pos % 8))); }### Assistant: @Test void testMovingBufferToNextEightBytePosition() { ByteBuffer bb = ByteBuffer.allocate(20); bb.position(1); Utils.seekBufferToNextMultipleOfEight(bb); assertThat(bb.position(), is(equalTo(8))); bb.position(14); Utils.seekBufferToNextMultipleOfEight(bb); assertThat(bb.position(), is(equalTo(16))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static RowStructure loadRowStructure(final Parse headerRow) { Parse headerCell = headerRow.parts; int colNum = headerRow.parts.size(); String[] columnNames = new String[colNum]; boolean[] keyProperties = new boolean[colNum]; for (int i = 0; i < colNum; i++) { loadColumnStructure(headerCell, i, columnNames, keyProperties); headerCell = headerCell.more; } return new RowStructure(columnNames, keyProperties); }### Assistant: @Test(expected = UnsupportedOperationException.class) public void shouldRaiseExceptionOnNullColumnName() { Parse row = createRowParse(\"col1\", null, \"col3\"); RowStructureLoader.loadRowStructure(row); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<FeatureId> addFeatures( FeatureCollection<SimpleFeatureType, SimpleFeature> collection) throws IOException { TransformFeatureCollectionWrapper transformed = new TransformFeatureCollectionWrapper(collection, invertedTransformer); return store.addFeatures(transformed); }### Assistant: @Test public void testInsertOnSelection() throws Exception { SimpleFeatureStore transformed = (SimpleFeatureStore) transformWithSelection(); SimpleFeatureBuilder fb = new SimpleFeatureBuilder(transformed.getSchema()); fb.add(wkt.read(\"POINT (-120 40)\").buffer(3)); fb.add(\"baloon\"); fb.add(1); SimpleFeature sf = fb.buildFeature(\"states_mini.11\"); transformed.addFeatures(DataUtilities.collection(sf)); int size = STATES.getCount(Query.ALL); assertEquals(11, size); assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter(\"state_name = 'baloon'\"))).size()); assertEquals(1, transformed.getFeatures(new Query(null, CQL.toFilter(\"state_name = 'baloon'\"))).size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void getSemanticPropsSingleFromString(SingleInputSemanticProperties result, String[] forwarded, String[] nonForwarded, String[] readSet, TypeInformation<?> inType, TypeInformation<?> outType) { getSemanticPropsSingleFromString(result, forwarded, nonForwarded, readSet, inType, outType, false); }### Assistant: @Test(expected = InvalidSemanticAnnotationException.class) public void testForwardedNonForwardedCheck() { String[] forwarded = { \"1\" }; String[] nonForwarded = { \"1\" }; SemanticPropUtil.getSemanticPropsSingleFromString(new SingleInputSemanticProperties(), forwarded, nonForwarded, null, threeIntTupleType, threeIntTupleType); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Method getKeyMethod(final Class<?> keyClass) throws NoSuchMethodException { final Method storedMethod = find(keyClass); if (storedMethod != null) { return storedMethod; } Method targetMethod = getFromClass(keyClass); if (targetMethod == null) { Class<?> superKeyClass = keyClass.getSuperclass(); if (superKeyClass != null) { targetMethod = getKeyMethod(superKeyClass); } if (targetMethod == null || DEFAULT_KEY_METHOD_NAME.equals(targetMethod.getName())) { targetMethod = keyClass.getMethod(DEFAULT_KEY_METHOD_NAME, (Class<?>[]) null); } } add(keyClass, targetMethod); return targetMethod; }### Assistant: @Test public void testToStringOwerwrite() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException { Method cacheKeyMethod = cacheKeyMethodStoreImpl.getKeyMethod(YClass.class); assertEquals(\"toString\", cacheKeyMethod.getName()); Object result = cacheKeyMethod.invoke(new YClass()); assertEquals(\"Y\", result.toString()); cacheKeyMethod = cacheKeyMethodStoreImpl.getKeyMethod(XClass.class); assertEquals(\"toString\", cacheKeyMethod.getName()); result = cacheKeyMethod.invoke(new XClass()); assertEquals(\"X\", result.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public org.modeshape.jcr.api.query.Query createQuery( String statement, String language ) throws InvalidQueryException, RepositoryException { CheckArg.isNotNull(statement, \"statement\"); CheckArg.isNotNull(language, \"language\"); return createQuery(statement, language, null, null); }### Assistant: @FixFor( \"MODE-1888\" ) @Test public void shouldCaptureWarningsAboutUsingMisspelledColumnOnWrongSelector() throws RepositoryException { String sql = \"SELECT file.[jcr.uuid] FROM [nt:file] AS file JOIN [mix:referenceable] AS ref ON ISSAMENODE(file,ref)\"; Query query = session.getWorkspace().getQueryManager().createQuery(sql, Query.JCR_SQL2); QueryResult result = query.execute(); validateQuery().rowCount(0).warnings(1).hasColumns(\"file.jcr.uuid\").validate(query, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Transactional public int deleteWorkflows(TablePrefix table, Collection<Long> workflowIds) { String workflowIdParams = params(workflowIds); return deleteWorkflows(table, workflowIdParams); }### Assistant: @Test public void deleteWorkflowsWithActionsFromMainTablesWorks() { List<Long> workflowIds = new ArrayList<>(); List<Long> actionIds = new ArrayList<>(); storeActions(storeActiveWorkflow(archiveTime1), 3); storeActions(storeActiveWorkflow(prodTime1), 1); storeActions(storePassiveWorkflow(prodTime1), 2); long archivable1 = storePassiveWorkflow(archiveTime1); long archivable2 = storePassiveWorkflow(archiveTime2); actionIds.addAll(storeActions(archivable1, 1)); actionIds.addAll(storeActions(archivable2, 3)); workflowIds.addAll(asList(archivable1, archivable2)); int actionCountBefore = getActiveActionCount(); assertEquals(workflowIds.size(), maintenanceDao.deleteWorkflows(MAIN, workflowIds)); int actionCountAfter = getActiveActionCount(); assertActiveWorkflowsRemoved(workflowIds); assertArchivedWorkflowsDoNotExist(workflowIds); assertActiveActionsRemoved(actionIds); assertArchiveActionsExist(actionIds, false); assertEquals(0, getArchiveActionCount()); assertEquals(actionCountAfter, actionCountBefore - actionIds.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DataSource getDataSource(CmdArguments cmdArguments) throws FastLdrException { String sqlType = System.getProperty(DB_TYPE); if (sqlType == null || sqlType.equalsIgnoreCase(\"ORACLE\")) { return new OracleDataSource(cmdArguments).getDataSource(); } else if (sqlType.equals(\"UNIVERSAL\")) { return new UniversalDataSource().getDataSource(); } else { throw new FastLdrException(\"Unknown database type:\" + sqlType); } }### Assistant: @Test(expected = FastLdrException.class) public void testGetDataSourceUnknown() throws FastLdrException { System.setProperty(DataSourceFactory.DB_TYPE, \"MySQL\"); DataSourceFactory.getDataSource(new CmdArguments()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static RetrieveResources of(final String policyId, final Label label, final DittoHeaders dittoHeaders) { return of(PolicyId.of(policyId), label, dittoHeaders); }### Assistant: @Test public void tryToCreateInstanceWithNullPolicyId() { assertThatExceptionOfType(NullPointerException.class) .isThrownBy(() -> RetrieveResources.of((PolicyId) null, TestConstants.Policy.LABEL, EMPTY_DITTO_HEADERS)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public abstract TraceContext shallowCopy(TraceContext context);### Assistant: @Test public void shallowCopy() { TraceContext context = TraceContext.newBuilder().traceId(1).spanId(2).debug(true) .extra(Collections.singletonList(1L)).build(); assertThat(InternalPropagation.instance.shallowCopy(context)) .isNotSameAs(context) .usingRecursiveComparison() .isEqualTo(context); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getErrorMessage(final Context context) { return context.getString(R.string.formvalidations_not_in_range, mMin, mMax); }### Assistant: @Test public void testGetErrorMessage() throws Exception { final Validation validation = InRange.build(2, 4); final String errorMessage = validation.getErrorMessage(mActivity); assertNotNull(errorMessage); assertTrue(errorMessage.contains(Integer.toString(2))); assertTrue(errorMessage.contains(Integer.toString(4))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void joinReturned(SymbolicAddressMap returned, int framePtr) { if(returned == null) { throw new AssertionError(\"joinReturned: returned map is undefined ?\"); } if(this.isTop()) return; else if(returned.isTop()) { setTop(); return; } for(Entry<Location, BoundedSet<SymbolicAddress>> entry : returned.mapP.entrySet()) { Location locReturnedFrame = entry.getKey(); Location locCallerFrame; if(locReturnedFrame.isHeapLoc()) { locCallerFrame = locReturnedFrame; } else { locCallerFrame = new Location(locReturnedFrame.stackLoc + framePtr); } BoundedSet<SymbolicAddress> callerSet = mapP.get(locCallerFrame); BoundedSet<SymbolicAddress> returnedSet = returned.mapP.get(locReturnedFrame); put(locCallerFrame, returnedSet.join(callerSet)); } }### Assistant: @Test public void testJoinReturned() { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @PreAuthorize(\"hasRole('ROLE_DOWNLOAD')\") @Transactional(readOnly = false, propagation = Propagation.REQUIRED) public void deleteCartOfUser(String uuid) { ProductCart cart = getCartOfUser(uuid); if (cart != null) { productCartDao.delete(cart); } }### Assistant: @Test (priority=1000) public void deleteCartOfUser () { pcs.deleteCartOfUser(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0\"); Assert.assertNull (pcs.getCartOfUser(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Future<RecordMetadata> send(ProducerRecord<K, V> record) { return this.send(record, null); }### Assistant: @Test public void send_shouldnt_tag_binary_key() { tracingProducer.send(new ProducerRecord<>(TEST_TOPIC, new byte[1], TEST_VALUE)); mockProducer.completeNext(); MutableSpan producerSpan = spans.get(0); assertThat(producerSpan.kind()).isEqualTo(PRODUCER); assertThat(producerSpan.tags()) .containsOnly(entry(\"kafka.topic\", TEST_TOPIC)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Ordinality ordinality(int pivot, List<List<Integer>> lists) { Ordinality result = Ordinality.EMPTY; for (List<Integer> list : lists) { result = result.update(listOrdinality(pivot, list)); } return result; }### Assistant: @Test public void ordinality_of_one_list() { Assert.assertEquals(new Ordinality(1, 1, 1), Median.ordinality(2, Lists.<List<Integer>>newArrayList( Lists.newArrayList(1, 3, 2)))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public NormalizedNode<?, ?> deserialize(final SchemaNode schemaNode, final Reader inputData) throws SerializationException { NormalizedNodeResult result = new NormalizedNodeResult(); JSONCodecFactory jsonCodecFactory = JSONCodecFactorySupplier.DRAFT_LHOTKA_NETMOD_YANG_JSON_02.createLazy(schemaContext); try (JsonReader reader = new JsonReader(inputData); NormalizedNodeStreamWriter streamWriter = ImmutableNormalizedNodeStreamWriter.from(result); JsonParserStream jsonParser = JsonParserStream.create(streamWriter, jsonCodecFactory, schemaNode)) { jsonParser.parse(reader); } catch (IOException e) { throw new SerializationException(e); } return result.getResult(); }### Assistant: @Test public void testDeserialize_out() throws Exception { Optional<RpcDefinition> loadRpc = ConverterUtils.loadRpc(schemaContext, SIMPLE_IO_RPC_QNAME); String loadIoRpcOut = loadResourceAsString(\"input-output-rpc-out.json\"); NormalizedNode<?, ?> deserializeRpc = bindingSerializer.deserialize(loadRpc.get(), new StringReader(loadIoRpcOut)); Assert.assertNotNull(deserializeRpc); LOG.info(deserializeRpc.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public @Nullable Message create(short directType) { Supplier<Message> supplier = msgSuppliers[directTypeToIndex(directType)]; if (supplier == null) throw new IgniteException(\"Invalid message type: \" + directType); return supplier.get(); }### Assistant: @Test public void testCreate() { MessageFactory[] factories = {new TestMessageFactoryPovider(), new TestMessageFactory()}; IgniteMessageFactoryImpl msgFactory = new IgniteMessageFactoryImpl(factories); Message msg; msg = msgFactory.create(TEST_MSG_1_TYPE); assertTrue(msg instanceof TestMessage1); msg = msgFactory.create(TEST_MSG_2_TYPE); assertTrue(msg instanceof TestMessage2); msg = msgFactory.create(TEST_MSG_42_TYPE); assertTrue(msg instanceof TestMessage42); short[] directTypes = msgFactory.registeredDirectTypes(); assertArrayEquals(directTypes, new short[] {TEST_MSG_1_TYPE, TEST_MSG_2_TYPE, TEST_MSG_42_TYPE}); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<GoogleCloudStorageItemInfo> getItemInfos(List<StorageResourceId> resourceIds) throws IOException { List<GoogleCloudStorageItemInfo> result = new ArrayList<>(resourceIds.size()); List<StorageResourceId> request = new ArrayList<>(resourceIds.size()); for (StorageResourceId resourceId : resourceIds) { GoogleCloudStorageItemInfo item = cache.getItem(resourceId); if (item == null) { request.add(resourceId); } result.add(item); } if (!request.isEmpty()) { List<GoogleCloudStorageItemInfo> response = super.getItemInfos(request); Iterator<GoogleCloudStorageItemInfo> responseIterator = response.iterator(); for (int i = 0; i < result.size() && responseIterator.hasNext(); i++) { if (result.get(i) == null) { GoogleCloudStorageItemInfo item = responseIterator.next(); cache.putItem(item); result.set(i, item); } } } return result; }### Assistant: @Test public void testGetItemInfosAllCached() throws IOException { List<StorageResourceId> requestedIds = Lists.newArrayList(ITEM_A_A.getResourceId(), ITEM_A_B.getResourceId()); List<GoogleCloudStorageItemInfo> expected = Lists.newArrayList(ITEM_A_A, ITEM_A_B); cache.putItem(ITEM_A_A); cache.putItem(ITEM_A_B); List<GoogleCloudStorageItemInfo> result = gcs.getItemInfos(requestedIds); assertThat(result).containsExactlyElementsIn(expected).inOrder(); assertThat(cache.getAllItemsRaw()).containsExactlyElementsIn(expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void getOperatorCompletions(final Callback<String[]> callback) { final AsyncPackageDataModelOracle oracle = presenter.getDataModelOracle(); oracle.getOperatorCompletions(plugin().getFactType(), plugin().getFactField(), callback); }### Assistant: @Test public void testGetOperatorCompletions() { when(plugin.getFactType()).thenReturn(\"factType\"); when(plugin.getFactField()).thenReturn(\"factField\"); when(presenter.getDataModelOracle()).thenReturn(oracle); page.getOperatorCompletions(s -> { }); verify(oracle).getOperatorCompletions(eq(\"factType\"), eq(\"factField\"), any()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean createFailedUpdateMessage(final List<ExecutableFlow> flows, final Executor executor, final ExecutorManagerException updateException, final EmailMessage message, final String azkabanName, final String scheme, final String clientHostname, final String clientPortNumber) { final ExecutionOptions option = flows.get(0).getExecutionOptions(); final List<String> emailList = option.getFailureEmails(); if (emailList != null && !emailList.isEmpty()) { message.addAllToAddress(emailList); message.setMimeType(\"text/html\"); message.setSubject( \"Flow status could not be updated from \" + executor.getHost() + \" on \" + azkabanName); message.println( \"<h2 style=\\\"color:#FF0000\\\"> Flow status could not be updated from \" + executor.getHost() + \" on \" + azkabanName + \"</h2>\"); message.println(\"The actual status of these executions is unknown, \" + \"because getting status update from azkaban executor is failing\"); message.println(\"\"); message.println(\"<h3>Error detail</h3>\"); message.println(\"<pre>\" + ExceptionUtils.getStackTrace(updateException) + \"</pre>\"); message.println(\"\"); message.println(\"<h3>Affected executions</h3>\"); message.println(\"<ul>\"); appendFlowLinksToMessage(message, flows, scheme, clientHostname, clientPortNumber); message.println(\"</ul>\"); return true; } return false; }### Assistant: @Test public void createFailedUpdateMessage() throws Exception { final ExecutorManagerException exception = createTestStracktrace(); assertTrue(this.mailCreator .createFailedUpdateMessage(Arrays.asList(this.executableFlow, this.executableFlow), this.executor, exception, this.message, this.azkabanName, this.scheme, this.clientHostname, this.clientPortNumber)); assertEquals(\"Flow status could not be updated from executor1-host on unit-tests\", this.message.getSubject()); assertThat(TestUtils.readResource(\"failedUpdateMessage.html\", this)) .isEqualToIgnoringWhitespace(this.message.getBody()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @CheckReturnValue @NonNull public final <U> ParallelFlowable<U> compose(@NonNull ParallelTransformer<T, U> composer) { return RxJavaPlugins.onAssembly(ObjectHelper.requireNonNull(composer, \"composer is null\").apply(this)); }### Assistant: @Test public void compose() { Flowable.range(1, 5) .parallel() .compose(new ParallelTransformer<Integer, Integer>() { @Override public ParallelFlowable<Integer> apply(ParallelFlowable<Integer> pf) { return pf.map(new Function<Integer, Integer>() { @Override public Integer apply(Integer v) throws Exception { return v + 1; } }); } }) .sequential() .test() .assertResult(2, 3, 4, 5, 6); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void populatePlainTextPasswords( Map<String, Object[]> inventoryMap ) throws HMSRestException { if ( inventoryMap != null ) { Object[] hosts = inventoryMap.get( Constants.HOSTS ); Object[] switches = inventoryMap.get( Constants.SWITCHES ); if ( hosts == null || switches == null ) { throw new HMSRestException( Status.INTERNAL_SERVER_ERROR.getStatusCode(), \"hosts/switches are null in the provided input file\", \"invalid inventory file\" ); } ObjectMapper mapper = new ObjectMapper(); ServerNode[] serverNodes = mapper.convertValue( hosts, new TypeReference<ServerNode[]>() { } ); SwitchNode[] switchNodes = mapper.convertValue( switches, new TypeReference<SwitchNode[]>() { } ); decryptPassword( serverNodes ); decryptPassword( switchNodes ); Object[] serverNodeObj = mapper.convertValue( serverNodes, new TypeReference<Object[]>() { } ); Object[] switchNodeObj = mapper.convertValue( switchNodes, new TypeReference<Object[]>() { } ); inventoryMap.put( Constants.HOSTS, serverNodeObj ); inventoryMap.put( Constants.SWITCHES, switchNodeObj ); } }### Assistant: @Test( expected = HMSRestException.class ) public void testPopulatePlainTextPasswordsForNullInput() throws HmsException { Map<String, Object[]> inventoryMap = new HashMap<String, Object[]>(); AggregatorUtil.populatePlainTextPasswords( inventoryMap ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Map<String, String> parseUriPattern(String pattern, String url) { pattern = normaliseUriPath(pattern); url = normaliseUriPath(url); if (!pattern.contains(\"{\") || !pattern.contains(\"}\")) { return url.equals(pattern) ? Collections.emptyMap() : null; } UriTemplateParser templateParser = getUriParserForPattern(pattern); Matcher urlMatcher = templateParser.getPattern().matcher(url); if (urlMatcher.matches()) { if (templateParser.getGroupIndexes().length == 0) { return Collections.emptyMap(); } Map<String, String> pathParams = new LinkedHashMap<>(); int index = 0; for (String name : templateParser.getNames()) { String value = urlMatcher.group(templateParser.getGroupIndexes()[index]); if (name == null || pathParams.containsKey(name)) { pathParams.put(name + \"@\" + (index + 1), value); } else { pathParams.put(name, value); } index++; } return pathParams; } return null; }### Assistant: @Test public void testParseUriPathPatterns() { Map<String, String> map = HttpUtils.parseUriPattern(\"/cats/{id}\", \"/cats/1\"); Match.equals(map, \"{ id: '1' }\"); map = HttpUtils.parseUriPattern(\"/cats/{id}/\", \"/cats/1\"); Match.equals(map, \"{ id: '1' }\"); map = HttpUtils.parseUriPattern(\"/cats/{id}\", \"/cats/1/\"); Match.equals(map, \"{ id: '1' }\"); map = HttpUtils.parseUriPattern(\"/cats/{id}\", \"/foo/bar\"); Match.equals(map, null); map = HttpUtils.parseUriPattern(\"/cats\", \"/cats/1\"); Match.equals(map, null); map = HttpUtils.parseUriPattern(\"/{path}/{id}\", \"/cats/1\"); Match.equals(map, \"{ path: 'cats', id: '1' }\"); map = HttpUtils.parseUriPattern(\"/cats/{id}/foo\", \"/cats/1/foo\"); Match.equals(map, \"{ id: '1' }\"); map = HttpUtils.parseUriPattern(\"/api/{img}\", \"/api/billie.jpg\"); Match.equals(map, \"{ img: 'billie.jpg' }\"); map = HttpUtils.parseUriPattern(\"/{greedyPath:.+}\", \"/cats/1\"); Match.equals(map, \"{ greedyPath: 'cats/1' }\"); map = HttpUtils.parseUriPattern(\"/cats/v{partialPath}x\", \"/cats/v1x\"); Match.equals(map, \"{ partialPath: '1' }\"); map = HttpUtils.parseUriPattern(\"/cats/{duplicate}/{duplicate}\", \"/cats/v1/1043\"); Match.equals(map, \"{ duplicate: 'v1', 'duplicate@2': '1043' }\"); map = HttpUtils.parseUriPattern(\"/cats/{}/{}\", \"/cats/v1/1043\"); Match.equals(map, \"{ ignored: 'v1', 'ignored@2': '1043' }\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Optional<PropertyDescriptor> getProcessorPropertyDescriptor(final String type, final Bundle bundle, final String propertyName) { final ProcessorDefinition manifestProcessor = locateManifestProcessor(type, bundle); final Map<String,PropertyDescriptor> propertyDescriptors = manifestProcessor.getPropertyDescriptors(); if (propertyDescriptors == null || !propertyDescriptors.containsKey(propertyName)) { return Optional.empty(); } else { return Optional.of(propertyDescriptors.get(propertyName)); } }### Assistant: @Test public void testGetProcessorPropertyDescriptorWhenDoesNotExist() { final String propertyName = \"DOES NOT EXIST\"; final org.apache.nifi.registry.flow.Bundle bundle = getRequestBundle(httpBundle); final Optional<PropertyDescriptor> propertyDescriptor = extensionManager.getProcessorPropertyDescriptor( invokeHttpProcessor.getType(), bundle, propertyName); assertFalse(propertyDescriptor.isPresent()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean checkAddressName(String name) { String errMsg = null; if (TextUtils.isEmpty(name.trim())) { errMsg = string(R.string.address_name_cannot_be_empty); } else { if (name.length() > 20) { errMsg = string(R.string.address_name_length_error); } } if (TextUtils.isEmpty(errMsg)) { getView().setNameVisibility(View.GONE); } else { getView().showNameError(errMsg); } return TextUtils.isEmpty(errMsg); }### Assistant: @Test public void checkAddressName(){ String validName = \"Ella\"; String invalidName = \"\"; boolean checkAddressNameBool = presenter.checkAddressName(validName); LogUtils.i( \"------checkAddressNameBool result:\" + checkAddressNameBool); Mockito.verify(view).setNameVisibility(Mockito.anyInt()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void fullScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor) { FileSet fs = createFileSet(config); fs.setDir(baseDir); SubMonitor subMon = SubMonitor.convert(monitor, \"Scanning\", 100); String masterLocale = config.getMasterLocale(); if (masterLocale != null && masterLocale.isEmpty()) masterLocale = null; if (baseDir.exists()) { DirectoryScanner ds = fs.getDirectoryScanner(new org.apache.tools.ant.Project()); subMon.worked(10); String[] files = ds.getIncludedFiles(); subMon.setWorkRemaining(files.length); for (String f : files) { checkCanceled(monitor); File file = new File(baseDir, f); if(scanner.isTemplate(file, config.getMasterLocale())) { subMon.subTask(f); acceptor.newMatch(file); subMon.worked(1); } } } if(monitor!=null) monitor.done(); }### Assistant: @Test public void testFullScanWithMasterLocale() { File baseDir = new File(\"src/test/resources/project/master\"); ScanConfiguration configuration = PropertiesFactory.eINSTANCE.createScanConfiguration(); configuration.setMasterLocale(\"en_CA\"); WorkspaceScanner scanner = new WorkspaceScanner(); final List<String> filenames = new ArrayList<String>(); scanner.fullScan(new PropertyFileAcceptor() { @Override public void newMatch(File file) { filenames.add(file.getName()); } }, baseDir, new JavaPropertyScanner(), configuration, new NullProgressMonitor()); assertEquals(1, filenames.size()); int index = 0; assertEquals(\"messages_en_CA.properties\", filenames.get(index++)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Destination[] createDestinations(int destCount) throws JMSException { final String destName = getClient().getDestName(); ArrayList<Destination> destinations = new ArrayList<>(); if (destName.contains(DESTINATION_SEPARATOR)) { if (getClient().isDestComposite() && (destCount == 1)) { String[] simpleNames = mapToSimpleNames(destName.split(DESTINATION_SEPARATOR)); String joinedSimpleNames = join(simpleNames, DESTINATION_SEPARATOR); byte destinationType = getDestinationType(destName); destinations.add(createCompositeDestination(destinationType, joinedSimpleNames, 1)); } else { LOG.info(\"User requested multiple destinations, splitting: {}\", destName); String[] destinationNames = destName.split(DESTINATION_SEPARATOR); for (String splitDestName : destinationNames) { addDestinations(destinations, splitDestName, destCount); } } } else { addDestinations(destinations, destName, destCount); } return destinations.toArray(new Destination[] {}); }### Assistant: @Test public void testCreateDestinations_compositeQueue() throws JMSException { clientProperties.setDestComposite(true); clientProperties.setDestName(\"queue: Destination[] destinations = jmsClient.createDestinations(2); assertEquals(1, destinations.length); String expectedDestName = DEFAULT_DEST + \".0,\" + DEFAULT_DEST + \".1\"; assertDestinationNameType(expectedDestName, QUEUE_TYPE, asAmqDest(destinations[0])); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public KQueueSocketChannelConfig setSoLinger(int soLinger) { try { channel.socket.setSoLinger(soLinger); return this; } catch (IOException e) { throw new ChannelException(e); } }### Assistant: @Test public void testSetOptionWhenClosed() { ch.close().syncUninterruptibly(); try { ch.config().setSoLinger(0); fail(); } catch (ChannelException e) { assertTrue(e.getCause() instanceof ClosedChannelException); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Data rsplit(Random rng, int subsize) { List<Instance> subset = Lists.newArrayListWithCapacity(subsize); for (int i = 0; i < subsize; i++) { subset.add(instances.remove(rng.nextInt(instances.size()))); } return new Data(dataset, subset); }### Assistant: @Test public void testRsplit() { Data source = classifierData.clone(); Data subset = source.rsplit(rng, 0); assertTrue(\"subset should be empty\", subset.isEmpty()); assertEquals(\"source.size is incorrect\", DATA_SIZE, source.size()); source = classifierData.clone(); subset = source.rsplit(rng, DATA_SIZE); assertEquals(\"subset.size is incorrect\", DATA_SIZE, subset.size()); assertTrue(\"source should be empty\", source.isEmpty()); int subsize = rng.nextInt(DATA_SIZE); source = classifierData.clone(); subset = source.rsplit(rng, subsize); assertEquals(\"subset.size is incorrect\", subsize, subset.size()); assertEquals(\"source.size is incorrect\", DATA_SIZE - subsize, source.size()); source = regressionData.clone(); subset = source.rsplit(rng, 0); assertTrue(\"subset should be empty\", subset.isEmpty()); assertEquals(\"source.size is incorrect\", DATA_SIZE, source.size()); source = regressionData.clone(); subset = source.rsplit(rng, DATA_SIZE); assertEquals(\"subset.size is incorrect\", DATA_SIZE, subset.size()); assertTrue(\"source should be empty\", source.isEmpty()); subsize = rng.nextInt(DATA_SIZE); source = regressionData.clone(); subset = source.rsplit(rng, subsize); assertEquals(\"subset.size is incorrect\", subsize, subset.size()); assertEquals(\"source.size is incorrect\", DATA_SIZE - subsize, source.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void submitAnnotations(PrincipalUser submitter, List<Annotation> annotations) { requireNotDisposed(); requireArgument(submitter != null, \"Submitting user cannot be null.\"); requireArgument(annotations != null, \"The list of annotations to submit cannot be null.\"); checkSubmitAnnotationPolicyRequirementsMet(submitter, annotations); List<Annotation> putAnnotationList = new LinkedList<>(); for (Annotation annotation : annotations) { if (annotation.computeSizeBytes() > MAX_ANNOTATION_SIZE_BYTES) { _logger.debug(\"Annotation size of {} bytes exceeded max size {} allowed for annotation {}.\", annotation.computeSizeBytes(), MAX_ANNOTATION_SIZE_BYTES, annotation); Map<String, String> tags = new HashMap<>(); tags.put(\"source\", annotation.getSource()); _monitorService.modifyCounter(Counter.ANNOTATION_DROPS_MAXSIZEEXCEEDED, 1, tags); } else { annotation.setScope(TSDBEntity.replaceUnsupportedChars(annotation.getScope())); annotation.setMetric(TSDBEntity.replaceUnsupportedChars(annotation.getMetric())); Map<String, String> filteredTags = new HashMap<>(); for (String tagKey : annotation.getTags().keySet()) { filteredTags.put(TSDBEntity.replaceUnsupportedChars(tagKey), TSDBEntity.replaceUnsupportedChars(annotation.getTags().get(tagKey))); } annotation.setTags(filteredTags); putAnnotationList.add(annotation); } } _monitorService.modifyCounter(Counter.ANNOTATION_WRITES, putAnnotationList.size(), null); if (!putAnnotationList.isEmpty()) { _mqService.enqueue(ANNOTATION.getQueueName(), putAnnotationList); } }### Assistant: @Test public void updateAnnotations_testOnlyOneAnnotationSizeGreaterThanMax() { Annotation tooLargeAnnotation = createAnnotationWithSizeTooLarge(); collectionService.submitAnnotations(user, ImmutableList.of(tooLargeAnnotation)); verify(monitorService).modifyCounter(Counter.ANNOTATION_DROPS_MAXSIZEEXCEEDED, 1, ImmutableMap.of(\"source\", tooLargeAnnotation.getSource())); verify(monitorService).modifyCounter(Counter.ANNOTATION_WRITES, 0, null); verify(mqService, never()).enqueue(any(), (List)any()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static JsonNode buildBeanForInput(TypeDescriptor descriptor) throws JDOMException, IOException { Element element = XMLSplitterSerialisationHelper.typeDescriptorToExtensionXML(descriptor); return buildBeanForInput(element); }### Assistant: @Test public void testBuildBeanForInput() throws Exception { String xml = \"<s:extensions xmlns:s=\\\"http: Element element = new SAXBuilder().build(new StringReader(xml)).getRootElement(); JsonNode bean = XMLSplitterConfigurationBeanBuilder.buildBeanForInput(element); assertNotNull(\"The bean should not be null\",bean); assertEquals(\"There should be 1 input\",1,bean.get(\"inputPorts\").size()); assertEquals(\"There should be 1 output\",1,bean.get(\"outputPorts\").size()); assertEquals(\"The input should be named person\",\"person\",bean.get(\"inputPorts\").get(0).get(\"name\").textValue()); assertEquals(\"The output should be named output\",\"output\",bean.get(\"outputPorts\").get(0).get(\"name\").textValue()); assertEquals(\"The type xml definition should match\",xml,bean.get(\"wrappedType\").textValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Produces({MediaType.TEXT_HTML, MediaType.APPLICATION_JSON}) @Path(\"/{name}\") public Response get(@PathParam(\"name\") final String name){ LOG.info(\"Got a get product request.\"); final DbProduct dbProduct = getProductHandler().getProduct(name); final ProductView view = new ProductView(dbProduct); return Response.ok(view).build(); }### Assistant: @Test public void getDeliveryThatDoesNotExistOnAProductThatExist(){ final DbProduct product = new DbProduct(); product.setName(\"product1\"); when(repositoryHandler.getProduct(product.getName())).thenReturn(product); WebResource resource = client().resource(\"/\" + ServerAPI.PRODUCT_RESOURCE + \"/\" + product.getName() + ServerAPI.GET_DELIVERIES+ \"/doesNotExist/1.0.0\"); ClientResponse response = resource.type(MediaType.APPLICATION_JSON).get(ClientResponse.class); assertNotNull(response); assertEquals(HttpStatus.NOT_FOUND_404, response.getStatus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> OnSubscribeFunc<T> doWhile(Observable<? extends T> source, Func0<Boolean> postCondition) { return new WhileDoWhile<T>(source, TRUE, postCondition); }### Assistant: @Test public void testDoWhileConditionThrows() { Observable<Integer> source1 = Observable.from(1, 2, 3); Observable<Integer> result = Statement.doWhile(source1, conditionError); observeError(result, RuntimeException.class, 1, 2, 3); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public T4 get4() { return ((T4) values[4]); }### Assistant: @Test void get4Test() { assertEquals(4, (int) instance.get4()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getComponentName() { return (String) getInputParameter(\"component\").orElse(UNKNOWN_COMPONENT); }### Assistant: @Test public void shouldGetDefaultUnknownComponentNameIfNotSet() { final InterceptorContext interceptorContext = interceptorContextWithInput(input); assertThat(interceptorContext.getComponentName(), is(\"UNKNOWN\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Writer getWriter() throws IOException { return response.getWriter(); }### Assistant: @Test public void testGetWriter() throws IOException { PrintWriter os = createMock(PrintWriter.class); expect(response.getWriter()).andReturn(os); replay(response, os); assertEquals(os, delegate.getWriter()); verify(response, os); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Object invoke(MethodInvocation invocation) throws Throwable { long retryCount = 0L; Throwable cause = null; Object returnObject = null; long lastExceptionTime = System.currentTimeMillis(); while (true) { try { cause = null; returnObject = invocation.proceed(); break; } catch (DataAccessException | TransactionException e) { if (System.currentTimeMillis() - lastExceptionTime > retryReset) { retryCount = 0L; } lastExceptionTime = System.currentTimeMillis(); cause = e; if (retryCount >= maxRetryCount) { LOGGER.error(LogId.EAL025063, cause, maxRetryCount); break; } TimeUnit.MILLISECONDS.sleep(retryInterval); retryCount++; LOGGER.info(LogId.IAL025017, retryCount, maxRetryCount, retryReset, retryInterval); } } if (cause != null) { throw cause; } return returnObject; }### Assistant: @Test public void testInvoke03() throws Throwable { MethodInvocation mockMethodInvocation = mock(MethodInvocation.class); TransactionException transactionSystemException = new TransactionSystemException(\"test exception\"); try { when(mockMethodInvocation.proceed()).thenThrow( transactionSystemException); adminConnectionRetryInterceptor.invoke(mockMethodInvocation); fail(); } catch (TransactionException e) { assertSame(transactionSystemException, e); } assertEquals(Level.ERROR, logger.getLoggingEvents().get(0).getLevel()); assertEquals( \"[EAL025063] Connection retry count exceeded limit. maxRetryCount:0\", logger.getLoggingEvents().get(0).getMessage()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static GetFeature parse( Map<String, String> kvpParams, Map<String, String> nsMap ) throws Exception { Version version = Version.parseVersion( KVPUtils.getRequired( kvpParams, \"VERSION\" ) ); GetFeature result = null; if ( VERSION_100.equals( version ) ) { result = parse100( kvpParams, nsMap ); } else if ( VERSION_110.equals( version ) ) { result = parse110( kvpParams ); } else if ( VERSION_200.equals( version ) ) { result = parse200( kvpParams ); } else { String msg = Messages.get( \"UNSUPPORTED_VERSION\", version, Version.getVersionsString( VERSION_100, VERSION_110, VERSION_200 ) ); throw new InvalidParameterValueException( msg ); } return result; }### Assistant: @Test public void test_V110_EXAMPLE_16() throws Exception { URL exampleURL = this.getClass().getResource( V110_EXAMPLE_16 ); Map<String, String> kvpMap = KVPUtils.readFileIntoMap( exampleURL ); GetFeature getFeature = GetFeatureKVPAdapter.parse( kvpMap, null ); assertEquals( \"1\", getFeature.getResolveParams().getDepth() ); assertEquals( BigInteger.valueOf( 60 ), getFeature.getResolveParams().getTimeout() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static boolean callModuleMethod(String instanceId, String moduleStr, String methodStr, JSONArray args) { ModuleFactory factory = sModuleFactoryMap.get(moduleStr); if(factory == null){ WXLogUtils.e(\"[WXModuleManager] module factory not found.\"); return false; } final WXModule wxModule = findModule(instanceId, moduleStr,factory); if (wxModule == null) { return false; } wxModule.mWXSDKInstance = WXSDKManager.getInstance().getSDKInstance(instanceId); Map<String, Invoker> methodsMap = factory.getMethodMap(); if (methodsMap == null) { WXLogUtils.e(\"[WXModuleManager] callModuleMethod methodsMap is null.\"); return false; } final Invoker invoker = methodsMap.get(methodStr); try { Type[] paramClazzs = invoker.getParameterTypes(); final Object[] params = new Object[paramClazzs.length]; Object value; Type paramClazz; for (int i = 0; i < paramClazzs.length; i++) { paramClazz = paramClazzs[i]; if(i>=args.size()){ if(!paramClazz.getClass().isPrimitive()) { params[i] = null; continue; }else { WXLogUtils.e(\"[WXModuleManager] module method argument list not match.\"); return false; } } value = args.get(i); if (paramClazz == JSONObject.class) { params[i] = value; } else if(JSCallback.class == paramClazz){ if(value instanceof String){ params[i] = new SimpleJSCallback(instanceId,(String)value); }else{ throw new Exception(\"Parameter type not match.\"); } } else { params[i] = WXReflectionUtils.parseArgument(paramClazz,value); } } if (invoker.isRunInUIThread()) { WXSDKManager.getInstance().postOnUiThread(new Runnable() { @Override public void run() { try { invoker.invoke(wxModule, params); } catch (Exception e) { WXLogUtils.e(\"callModuleMethod >>> invoke module:\", e); } } }, 0); } else { invoker.invoke(wxModule, params); } } catch (Exception e) { WXLogUtils.e(\"callModuleMethod >>> invoke module:\" + moduleStr + \", method:\" + methodStr + \" failed. \", e); return false; } finally { if (wxModule instanceof WXDomModule || wxModule instanceof WXTimerModule) { wxModule.mWXSDKInstance = null; } } return true; }### Assistant: @Test public void testCallModuleMethod4() throws Exception { JSONArray args = new JSONArray(); args.add(\"testarg\"); args.add(\"testcallbackId\"); WXModuleManager.callModuleMethod(instance.getInstanceId(),\"test1\",\"testCallbackMethod\",args); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private FMeasureTableRenderer() { }### Assistant: @Test public void testFMeasureTableRenderer() { final FMeasureTableRenderer renderer = FMeasureTableRenderer.create(); final Map<String, FMeasureCounts> data = ImmutableMap.of( \"foo\", FMeasureCounts.from(1, 2, 3), \"bar\", FMeasureCounts.from(4, 5, 6)); final String expected = \"Name TP FP FN P R F1\\n\" + \"===============================================================================\\n\" + \"bar 4.0 5.0 6.0 44.44 40.00 42.11\\n\" + \"foo 1.0 2.0 3.0 33.33 25.00 28.57\\n\"; final String result = renderer.render(data); assertEquals(expected, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T11> get11() { return getAndCast(11); }### Assistant: @Test void get11() { assertEquals(m11, instance.get11()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void open() throws IOException { if (proc != null) { throw new IllegalStateException(\"Tried to open exec process twice\"); } latch = new CountDownLatch(2); outFinished.set(false); errFinished.set(false); proc = Runtime.getRuntime().exec(command); stdinISP = new InputStreamPipe(proc.getInputStream()); stderrISP = new InputStreamPipe(proc.getErrorStream()); stdout = (ReadableByteChannel) stdinISP.getChannel(); stderr = (ReadableByteChannel) stderrISP.getChannel(); readOut = new ReaderThread(stdout, \"STDOUT\", outFinished); readErr = new ReaderThread(stderr, \"STDERR\", errFinished); stdinISP.start(); stderrISP.start(); readOut.start(); readErr.start(); }### Assistant: @Test public void testNewPipeBlockingSemantics() throws IOException { Pipe pipe = Pipe.open(); ByteBuffer buf = ByteBuffer.allocate(10); assertTrue(pipe.source().isBlocking()); pipe.source().configureBlocking(false); assertTrue(!pipe.source().isBlocking()); int rdSz = pipe.source().read(buf); assertTrue(rdSz <= 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String create(String originalImgTag, FileEntry fileEntry) throws PortalException { List<String> sourceElements = _getSourceElements(fileEntry); if (sourceElements.isEmpty()) { return originalImgTag; } StringBundler sb = new StringBundler(5 + sourceElements.size()); sb.append(\"<picture \"); sb.append(AMImageHTMLConstants.ATTRIBUTE_NAME_FILE_ENTRY_ID); sb.append(\"=\\\"\"); sb.append(fileEntry.getFileEntryId()); sb.append(\"\\\">\"); sourceElements.forEach(sb::append); sb.append(originalImgTag); sb.append(\"</picture>\"); return sb.toString(); }### Assistant: @Test public void testSupportsImageTagsWithNewLineCharacters() throws Exception { _addMediaQueries(_createMediaQuery(1989, \"adaptiveURL\")); StringBundler originalSB = new StringBundler(3); originalSB.append(\"<img data-fileentryid=\\\"1234\\\" \"); originalSB.append(CharPool.NEW_LINE); originalSB.append(\"src=\\\"adaptable\\\"/>\"); StringBundler expectedSB = new StringBundler(5); expectedSB.append(\"<picture data-fileentryid=\\\"1234\\\">\"); expectedSB.append(\"<source media=\\\"(max-width:1989px)\\\" \"); expectedSB.append(\"srcset=\\\"adaptiveURL\\\" />\"); expectedSB.append(originalSB.toString()); expectedSB.append(\"</picture>\"); String pictureTag = _amImageHTMLTagFactoryImpl.create( originalSB.toString(), _fileEntry); Assert.assertEquals(expectedSB.toString(), pictureTag); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public PolicyRestAdapter setDataToPolicyRestAdapter(PolicyRestAdapter policyData, JsonNode root) { String jsonContent = null; try { LOGGER.info(\"policyJSON :\" + (root.get(POLICYJSON)).toString()); String tempJson = root.get(POLICYJSON).toString(); JSONObject policyJson = new JSONObject(root.get(POLICYJSON).toString()); tempJson = decodeJsonVal(tempJson, policyJson); String dummyValue = \"*empty-value*\" + UUID.randomUUID().toString(); LOGGER.info(\"dummyValue:\" + dummyValue); tempJson = StringUtils.replaceEach(tempJson, new String[] {\"\\\"\\\"\"}, new String[] {\"\\\"\" + dummyValue + \"\\\"\"}); ObjectMapper mapper = new ObjectMapper(); JsonNode tempJsonNode = mapper.readTree(tempJson); jsonContent = decodeContent(tempJsonNode).toString(); constructJson(policyData, jsonContent, dummyValue); } catch (Exception e) { LOGGER.error(\"Error while decoding microservice content\", e); } if (policyData.getJsonBody() != null && jsonStringValues.size() > 0) { String contentBody = policyData.getJsonBody(); JSONObject contentJson = new JSONObject(contentBody); JSONObject content = contentJson.getJSONObject(\"content\"); content = setOriginalJsonObject(content, jsonStringValues); contentJson.put(\"content\", content); policyData.setJsonBody(StringEscapeUtils.unescapeJava(contentJson.toString())); } return policyData; }### Assistant: @Test public void testSetDataToPolicyRestAdapter() { logger.debug(\"testSetDataToPolicyRestAdapter: enter\"); CreateDcaeMicroServiceController.setCommonClassDao(commonClassDao); JsonNode root = null; ObjectMapper mapper = new ObjectMapper(); mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); PolicyRestAdapter policyData = null; try { root = JsonLoader.fromString(jsonString); policyData = mapper.readValue(root.get(\"policyData\").get(\"policy\").toString(), PolicyRestAdapter.class); } catch (Exception e) { logger.error(\"testSetDataToPolicyRestAdapter\", e); } CreateDcaeMicroServiceController controller = new CreateDcaeMicroServiceController(); PolicyRestAdapter result = controller.setDataToPolicyRestAdapter(policyData, root); assertTrue(result != null && result.getJsonBody() != null && !result.getJsonBody().isEmpty()); logger.debug(\"result.getJsonBody() : \" + result.getJsonBody()); logger.debug(\"testSetDataToPolicyRestAdapter: exit\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public static SecurityContext createSecurityContextForSession(@Nonnull final HttpServletRequest httpServletRequest) { assert httpServletRequest != null; @Nullable final HttpSession httpSession = httpServletRequest.getSession(false); if (httpSession == null) { return null; } @Nullable final SessionData sessionData = getSessionData(httpSession); if (sessionData == null) { return null; } final SecurityContext securityContext = new SecurityContextImpl(new PrincipalImpl(sessionData.getUserId()), sessionData.getAuthenticationScheme()); return securityContext; }### Assistant: @Test public void testCreateSecurityContextForSessionNoCurrentSession() { LOG.info(\"testCreateSecurityContextForSessionNoCurrentSession\"); Mockito.when(httpServletRequest.getSession(false)).thenReturn(null); assertThat(SessionManager.createSecurityContextForSession(httpServletRequest), is(nullValue())); verify(httpServletRequest).getSession(false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean canSetupLimitedValue() { if (!isLimitedValueEnabled()) { return false; } if (tableFormat() != GuidedDecisionTable52.TableFormat.LIMITED_ENTRY) { return false; } if (doesNotHaveFactTypeOrFactField()) { return false; } if (!plugin().doesOperatorNeedValue()) { return false; } return true; }### Assistant: @Test public void testCanSetupLimitedValueWhenEditingColIsNotAnInstanceOfLimitedEntryConditionCol52() throws Exception { when(plugin.editingCol()).thenReturn(new ConditionCol52()); assertFalse(page.canSetupLimitedValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DDMFormInstanceRecordWriterResponse write( DDMFormInstanceRecordWriterRequest ddmFormInstanceRecordWriterRequest) throws Exception { List<Map<String, String>> ddmFormFieldsValueList = ddmFormInstanceRecordWriterRequest.getDDMFormFieldValues(); JSONArray jsonArray = jsonFactory.createJSONArray(); Stream<Map<String, String>> stream = ddmFormFieldsValueList.stream(); stream.map( this::createJSONObject ).forEach( jsonArray::put ); String json = jsonArray.toJSONString(); DDMFormInstanceRecordWriterResponse.Builder builder = DDMFormInstanceRecordWriterResponse.Builder.newBuilder( json.getBytes()); return builder.build(); }### Assistant: @Test public void testWrite() throws Exception { DDMFormInstanceRecordJSONWriter ddmFormInstanceRecordJSONWriter = new DDMFormInstanceRecordJSONWriter(); ddmFormInstanceRecordJSONWriter.jsonFactory = new JSONFactoryImpl(); List<Map<String, String>> ddmFormFieldValues = new ArrayList<Map<String, String>>() { { add( HashMapBuilder.put( \"field1\", \"2\" ).put( \"field2\", \"false\" ).put( \"field3\", \"11.7\" ).build()); add( HashMapBuilder.put( \"field1\", \"1\" ).put( \"field2\", \"\" ).put( \"field3\", \"10\" ).build()); } }; DDMFormInstanceRecordWriterRequest.Builder builder = DDMFormInstanceRecordWriterRequest.Builder.newBuilder( Collections.emptyMap(), ddmFormFieldValues); DDMFormInstanceRecordWriterResponse ddmFormInstanceRecordWriterResponse = ddmFormInstanceRecordJSONWriter.write(builder.build()); StringBundler sb = new StringBundler(3); sb.append(\"[{\\\"field1\\\":\\\"2\\\",\\\"field3\\\":\\\"11.7\\\",\\\"field2\\\":\"); sb.append(\"\\\"false\\\"},{\\\"field1\\\":\\\"1\\\",\\\"field3\\\":\\\"10\\\",\\\"field2\\\":\"); sb.append(\"\\\"\\\"}]\"); String expectedJSON = sb.toString(); Assert.assertArrayEquals( expectedJSON.getBytes(), ddmFormInstanceRecordWriterResponse.getContent()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ApplicationBuilder logger(String logger) { this.logger = logger; return getThis(); }### Assistant: @Test void logger() { ApplicationBuilder builder = new ApplicationBuilder(); builder.logger(\"log4j\"); Assertions.assertEquals(\"log4j\", builder.build().getLogger()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public static <T> Parser<T> longer(Parser<? extends T> p1, Parser<? extends T> p2) { return longest(p1, p2); }### Assistant: @Test public void testLonger() { assertEquals((Object) 'b', Parsers.longer(isChar('a'), areChars(\"ab\")).parse(\"ab\", mode)); assertEquals((Object) 'b', Parsers.longer(areChars(\"ab\"), isChar('a')).parse(\"ab\", mode)); assertEquals((Object) 'c', Parsers.longer(areChars(\"ab\"), areChars(\"abc\")).parse(\"abc\", mode)); assertEquals((Object) 'c', Parsers.longer(areChars(\"abc\"), areChars(\"ab\")).parse(\"abc\", mode)); assertEquals(\"longest\", Parsers.longer(isChar('a'), isChar('b')).toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static ModifyResource of(final String policyId, final Label label, final Resource resource, final DittoHeaders dittoHeaders) { return of(PolicyId.of(policyId), label, resource, dittoHeaders); }### Assistant: @Test public void tryToCreateInstanceWithInvalidPolicyId() { assertThatExceptionOfType(PolicyIdInvalidException.class) .isThrownBy(() -> ModifyResource.of(\"undefined\", TestConstants.Policy.LABEL, TestConstants.Policy.RESOURCE, TestConstants.EMPTY_DITTO_HEADERS)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void filter(ContainerRequestContext context) throws IOException { log.debug(\"Authorizing...\"); long start = System.currentTimeMillis(); MultivaluedMap<String, String> pathParameters = uriInfo.getPathParameters(); MultivaluedMap<String, String> queryParameters = uriInfo.getQueryParameters(); Method method = resourceInfo.getResourceMethod(); if (method.getAnnotation(ResourceId.class) == null) { log.info(String.format(\"Request authorization skipped. %dms\", System.currentTimeMillis() - start)); return; } IRI subjectIdIri = (IRI) RestUtils.optActiveUser(context, engineManager).map(User::getResource) .orElse(vf.createIRI(ANON_USER)); SubjectAttributes subjectAttributesAnnotation = method.getAnnotation(SubjectAttributes.class); Map<String, Literal> subjectAttributes = new HashMap<>(); if (subjectAttributesAnnotation != null) { setAttributes(subjectAttributes, subjectAttributesAnnotation.value(), pathParameters, queryParameters, context); } ResourceId resourceIdAnnotation = method.getAnnotation(ResourceId.class); IRI resourceIdIri; try { resourceIdIri = getResourceIdIri(resourceIdAnnotation, context, queryParameters, pathParameters); } catch (MobiWebException ex) { DefaultResourceId[] defaultValArr = resourceIdAnnotation.defaultValue(); if (defaultValArr.length != 0) { log.info(\"Attempting to resolve a default Resource ID.\"); DefaultResourceId defaultVal = defaultValArr[0]; ResourceId defaultResourceId = getResourceIdFromDefault(defaultVal); resourceIdIri = getResourceIdIri(defaultResourceId, context, queryParameters, pathParameters); } else { throw ex; } } ResourceAttributes resourceAttributesAnnotation = method.getAnnotation(ResourceAttributes.class); Map<String, Literal> resourceAttributes = new HashMap<>(); if (resourceAttributesAnnotation != null) { setAttributes(resourceAttributes, resourceAttributesAnnotation.value(), pathParameters, queryParameters, context); } ActionId actionIdAnnotation = method.getAnnotation(ActionId.class); IRI actionId; if (actionIdAnnotation == null) { switch (context.getMethod()) { case \"POST\": actionId = vf.createIRI(Create.TYPE); break; case \"DELETE\": actionId = vf.createIRI(Delete.TYPE); break; case \"PUT\": actionId = vf.createIRI(Update.TYPE); break; case \"GET\": default: actionId = vf.createIRI(Read.TYPE); break; } } else { actionId = vf.createIRI(actionIdAnnotation.value()); } ActionAttributes actionAttributesAnnotation = method.getAnnotation(ActionAttributes.class); Map<String, Literal> actionAttributes = new HashMap<>(); if (actionAttributesAnnotation != null) { setAttributes(actionAttributes, actionAttributesAnnotation.value(), pathParameters, queryParameters, context); } Request request = pdp.createRequest(subjectIdIri, subjectAttributes, resourceIdIri, resourceAttributes, actionId, actionAttributes); log.debug(request.toString()); Response response = pdp.evaluate(request, vf.createIRI(POLICY_PERMIT_OVERRIDES)); log.debug(response.toString()); Decision decision = response.getDecision(); if (decision != Decision.PERMIT) { if (decision == Decision.DENY) { String statusMessage = getMessageOrDefault(response, \"You do not have permission to perform this action\"); throw ErrorUtils.sendError(statusMessage, UNAUTHORIZED); } if (decision == Decision.INDETERMINATE) { String statusMessage = getMessageOrDefault(response, \"Request indeterminate\"); throw ErrorUtils.sendError(statusMessage, INTERNAL_SERVER_ERROR); } } log.info(String.format(\"Request permitted. %dms\", System.currentTimeMillis() - start)); }### Assistant: @Test public void decisionIsNotApplicableTest() throws Exception { when(uriInfo.getPathParameters()).thenReturn(new MultivaluedHashMap<>()); when(uriInfo.getQueryParameters()).thenReturn(new MultivaluedHashMap<>()); when(resourceInfo.getResourceMethod()).thenReturn(MockResourceIdStringClass.class.getDeclaredMethod(\"resourceIdString\")); when(response.getDecision()).thenReturn(Decision.NOT_APPLICABLE); filter.filter(context); IRI actionId = VALUE_FACTORY.createIRI(Read.TYPE); IRI resourceId = VALUE_FACTORY.createIRI(\"http: IRI subjectId = VALUE_FACTORY.createIRI(ANON_USER); Mockito.verify(pdp).createRequest(subjectId, new HashMap<>(), resourceId, new HashMap<>(), actionId, new HashMap<>()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static CompletionException combineErrors( Throwable error1, Throwable error2 ) { if ( error1 != null && error2 != null ) { Throwable cause1 = completionExceptionCause( error1 ); Throwable cause2 = completionExceptionCause( error2 ); addSuppressed( cause1, cause2 ); return asCompletionException( cause1 ); } else if ( error1 != null ) { return asCompletionException( error1 ); } else if ( error2 != null ) { return asCompletionException( error2 ); } else { return null; } }### Assistant: @Test void shouldCombineTwoErrors() { RuntimeException error1 = new RuntimeException( \"Error1\" ); RuntimeException error2Cause = new RuntimeException( \"Error2\" ); CompletionException error2 = new CompletionException( error2Cause ); CompletionException combined = Futures.combineErrors( error1, error2 ); assertEquals( error1, combined.getCause() ); assertArrayEquals( new Throwable[]{error2Cause}, combined.getCause().getSuppressed() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public Optional<T3> get3() { return Optional.ofNullable((T3) values[3]); }### Assistant: @Test void get3Test() { assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FmqFile (final String parent, final String name) { this (new File (parent, name)); }### Assistant: @Test public void testFmqFile () throws Exception { System.out.printf (\" * fmq_file: \"); FmqFile file = new FmqFile (\".\", \"bilbo\"); assertEquals (file.name (\".\"), \"bilbo\"); assertEquals (file.exists (), false); file.destroy (); file = new FmqFile (\"./this/is/a/test\", \"bilbo\"); boolean rc = file.output (); assertEquals (rc, true); FmqChunk chunk = new FmqChunk (null, 100); chunk.fill ((byte) 0, 100); rc = file.write (chunk, 1000000); assertEquals (rc, true); file.close (); assertEquals (file.exists (), true); assertEquals (file.size (), 1000100); assertEquals (file.stable (), false); chunk.destroy (); Thread.sleep (1001); file.restat (); assertEquals (file.stable (), true); rc = file.input (); assertEquals (rc, true); chunk = file.read (1000100, 0); assertNotNull (chunk); assertEquals (chunk.size (), 1000100); chunk.destroy (); FmqFile link = new FmqFile (\"./this/is/a/test\", \"bilbo.ln\"); rc = link.output (); assertEquals (rc, true); link.handle ().write (ByteBuffer.wrap (\"./this/is/a/test/bilbo\\n\".getBytes ())); link.destroy (); link = new FmqFile (\"./this/is/a/test\", \"bilbo.ln\"); rc = link.input (); assertEquals (rc, true); chunk = file.read (1000100, 0); assertNotNull (chunk); assertEquals (chunk.size (), 1000100); chunk.destroy (); link.destroy (); FmqDir dir = FmqDir.newFmqDir (\"./this\", null); assertEquals (dir.size (), 2000200); dir.remove (true); assertEquals (dir.size (), 0); dir.destroy (); assertEquals (file.exists (), true); file.restat (); assertEquals (file.exists (), false); rc = file.input (); assertEquals (rc, false); file.destroy (); System.out.printf (\"OK\\n\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping( value = {\"/get_PSResourceDataByName\"}, method = {RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_VALUE) public void getPSResourceEntityDataByName(HttpServletResponse response) { DictionaryUtils utils = getDictionaryUtilsInstance(); utils.getDataByEntity(response, psResourceDatas, \"name\", PolicyScopeResource.class); }### Assistant: @Test public void testGetPSResourceEntityDataByName() { when(commonClassDao.getDataByColumn(PolicyScopeResource.class, \"name\")).thenReturn(data); controller.getPSResourceEntityDataByName(response); try { assertTrue(response.getContentAsString() != null && response.getContentAsString().contains(\"psResourceDictionaryDatas\")); } catch (Exception e) { fail(); logger.error(e.getMessage(), e); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected Font getFont() { return getComponent() != null ? getComponent().getFont() : null; }### Assistant: @Test public void testFontWithComponent() { final JLabel label = new JLabel(); CellContext context = new CellContext() { @Override public JComponent getComponent() { return label; } }; assertNotNull(\"sanity\", label.getFont()); assertEquals(label.getFont(), context.getFont()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @PublicEvolving public static <IN, OUT> TypeInformation<OUT> getMapReturnTypes(MapFunction<IN, OUT> mapInterface, TypeInformation<IN> inType) { return getMapReturnTypes(mapInterface, inType, null, false); }### Assistant: @SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @Test public void testParameterizedArrays() { GenericArrayClass<Boolean> function = new GenericArrayClass<Boolean>(){ private static final long serialVersionUID = 1L; }; TypeInformation<?> ti = TypeExtractor.getMapReturnTypes(function, (TypeInformation) TypeInfoParser.parse(\"Boolean[]\")); Assert.assertTrue(ti instanceof ObjectArrayTypeInfo<?,?>); ObjectArrayTypeInfo<?, ?> oati = (ObjectArrayTypeInfo<?, ?>) ti; Assert.assertEquals(BasicTypeInfo.BOOLEAN_TYPE_INFO, oati.getComponentInfo()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<SlotNotice> querySlotNoticeAtAggregate(SlotNoticeService.Criteria criteria, int offset, Integer rowCount) { return slotNoticeMapper.filterAggregate(criteria.isFilterExpire(), criteria.getDecisions(), criteria.getStrategies(), criteria.getCheckTypes(), criteria.getSceneTypes(), criteria.getFromTime(), criteria.getEndTime(), criteria.getKey(), criteria.getTest(), offset, rowCount); }### Assistant: @Test public void testMySql_filterAggregated() { SqlSessionFactory sqlSessionFactory = (SqlSessionFactory) applicationContext.getBean(\"sqlSessionFactory\"); SqlSession sqlSession = SqlSessionUtils.getSqlSession(sqlSessionFactory); SlotNoticeService.Criteria criteria = new SlotNoticeService.Criteria(); criteria.setTest(1L); criteria.setCheckTypes(Arrays.asList(new String[]{\"IP\"})); criteria.setKey(\"172.16.10.110\"); criteria.setStrategies(Arrays.asList(new String[]{\"IP\u76f8\u540cUA\u5927\u91cf\u8bf7\u6c42\u5355\u4e2a\u9875\u9762\"})); List<SlotNotice> slotNotices = mysqlService.querySlotNoticeAtAggregate(criteria, 20, 20); assertThat(slotNotices.size()).isNotEqualTo(0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String ltrimZ(String str) { if (str == null) { return null; } int start = 0; int length = str.length(); while ((start < length) && isZenHankakuSpace(str.charAt(start))) { start++; } return start > 0 ? str.substring(start, length) : str; }### Assistant: @Test public void testLtrimZ03() throws Exception { String input = \"TERASOLUNA \"; String result = StringUtil.ltrimZ(input); assertEquals(\"TERASOLUNA \", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: AtomSymbol generatePeriodicSymbol(final int number, final int hydrogens, int mass, final int charge, final int unpaired, HydrogenPosition position, RendererModel opts) { Font myfont = font; final String label; switch (number) { case 0: label = \"*\"; myfont = font.deriveFont(Font.BOLD); break; case 1: if (mass == 2 && opts.get(DeuteriumSymbol.class)) { label = \"D\"; mass = 0; } else { label = Elements.ofNumber(number).symbol(); } break; default: label = Elements.ofNumber(number).symbol(); break; } TextOutline element = new TextOutline(label, myfont); TextOutline hydrogenAdjunct = defaultHydrogenLabel; TextOutline hydrogenCount = new TextOutline(Integer.toString(hydrogens), font).resize(scriptSize, scriptSize); TextOutline chargeAdjunct = new TextOutline(chargeAdjunctText(charge, unpaired), font).resize(scriptSize, scriptSize); TextOutline massAdjunct = new TextOutline(Integer.toString(mass), font).resize(scriptSize, scriptSize); hydrogenAdjunct = positionHydrogenLabel(position, element, hydrogenAdjunct); hydrogenCount = positionSubscript(hydrogenAdjunct, hydrogenCount); chargeAdjunct = positionChargeLabel(hydrogens, position, chargeAdjunct, element, hydrogenAdjunct); massAdjunct = positionMassLabel(massAdjunct, element); if (position == Left) { final double nudgeX = hydrogenXDodge(hydrogens, mass, element, hydrogenAdjunct, hydrogenCount, massAdjunct); hydrogenAdjunct = hydrogenAdjunct.translate(nudgeX, 0); hydrogenCount = hydrogenCount.translate(nudgeX, 0); chargeAdjunct = chargeAdjunct.translate(nudgeX, 0); } final List<TextOutline> adjuncts = new ArrayList<TextOutline>(4); if (hydrogens > 0) adjuncts.add(hydrogenAdjunct); if (hydrogens > 1) adjuncts.add(hydrogenCount); if (charge != 0 || unpaired > 0) adjuncts.add(chargeAdjunct); if (mass > 0) adjuncts.add(massAdjunct); return new AtomSymbol(element, adjuncts); }### Assistant: @Test public void generateWithMassAdjunct() { AtomSymbol symbol = atomGenerator.generatePeriodicSymbol(7, 0, 15, 0, 0, HydrogenPosition.Right, null); assertThat(symbol.getOutlines().size(), is(2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T> CompletionStage<T> retryAsync( Supplier<CompletionStage<T>> work ) { CompletableFuture<T> resultFuture = new CompletableFuture<>(); executeWorkInEventLoop( resultFuture, work ); return resultFuture; }### Assistant: @Test void doesNotRetryWhenMaxRetryTimeExceededAsync() { long retryStart = Clock.SYSTEM.millis(); int initialDelay = 100; int multiplier = 2; long maxRetryTimeMs = 45; Clock clock = mock( Clock.class ); when( clock.millis() ).thenReturn( retryStart ) .thenReturn( retryStart + maxRetryTimeMs - 5 ) .thenReturn( retryStart + maxRetryTimeMs + 7 ); ExponentialBackoffRetryLogic retryLogic = newRetryLogic( maxRetryTimeMs, initialDelay, multiplier, 0, clock ); Supplier<CompletionStage<Object>> workMock = newWorkMock(); SessionExpiredException error = sessionExpired(); when( workMock.get() ).thenReturn( failedFuture( error ) ); CompletionStage<Object> future = retryLogic.retryAsync( workMock ); Exception e = assertThrows( Exception.class, () -> await( future ) ); assertEquals( error, e ); List<Long> scheduleDelays = eventExecutor.scheduleDelays(); assertEquals( 2, scheduleDelays.size() ); assertEquals( initialDelay, scheduleDelays.get( 0 ).intValue() ); assertEquals( initialDelay * multiplier, scheduleDelays.get( 1 ).intValue() ); verify( workMock, times( 3 ) ).get(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public synchronized CSAssignment assignContainers( Resource clusterResource, FiCaSchedulerNode node) { CSAssignment assignment = new CSAssignment(Resources.createResource(0, 0), NodeType.NODE_LOCAL); while (canAssign(clusterResource, node)) { if (LOG.isDebugEnabled()) { LOG.debug(\"Trying to assign containers to child-queue of \" + getQueueName()); } if (!assignToQueue(clusterResource)) { break; } CSAssignment assignedToChild = assignContainersToChildQueues(clusterResource, node); assignment.setType(assignedToChild.getType()); if (Resources.greaterThan( resourceCalculator, clusterResource, assignedToChild.getResource(), Resources.none())) { allocateResource(clusterResource, assignedToChild.getResource()); Resources.addTo(assignment.getResource(), assignedToChild.getResource()); LOG.info(\"assignedContainer\" + \" queue=\" + getQueueName() + \" usedCapacity=\" + getUsedCapacity() + \" absoluteUsedCapacity=\" + getAbsoluteUsedCapacity() + \" used=\" + usedResources + \" cluster=\" + clusterResource); } else { break; } if (LOG.isDebugEnabled()) { LOG.debug(\"ParentQ=\" + getQueueName() + \" assignedSoFarInThisIteration=\" + assignment.getResource() + \" usedCapacity=\" + getUsedCapacity() + \" absoluteUsedCapacity=\" + getAbsoluteUsedCapacity()); } if (!rootQueue || assignment.getType() == NodeType.OFF_SWITCH) { if (LOG.isDebugEnabled()) { if (rootQueue && assignment.getType() == NodeType.OFF_SWITCH) { LOG.debug(\"Not assigning more than one off-switch container,\" + \" assignments so far: \" + assignment); } } break; } } return assignment; }### Assistant: @Test public void testSingleLevelQueues() throws Exception { setupSingleLevelQueues(csConf); Map<String, CSQueue> queues = new HashMap<String, CSQueue>(); CSQueue root = CapacityScheduler.parseQueue(csContext, csConf, null, CapacitySchedulerConfiguration.ROOT, queues, queues, TestUtils.spyHook); final int memoryPerNode = 10; final int coresPerNode = 16; final int numNodes = 2; FiCaSchedulerNode node_0 = TestUtils.getMockNode(\"host_0\", DEFAULT_RACK, 0, memoryPerNode*GB); FiCaSchedulerNode node_1 = TestUtils.getMockNode(\"host_1\", DEFAULT_RACK, 0, memoryPerNode*GB); final Resource clusterResource = Resources.createResource(numNodes * (memoryPerNode*GB), numNodes * coresPerNode); when(csContext.getNumClusterNodes()).thenReturn(numNodes); LeafQueue a = (LeafQueue)queues.get(A); LeafQueue b = (LeafQueue)queues.get(B); stubQueueAllocation(a, clusterResource, node_0, 0*GB); stubQueueAllocation(b, clusterResource, node_0, 1*GB); root.assignContainers(clusterResource, node_0); verifyQueueMetrics(a, 0*GB, clusterResource); verifyQueueMetrics(b, 1*GB, clusterResource); stubQueueAllocation(a, clusterResource, node_1, 2*GB); stubQueueAllocation(b, clusterResource, node_1, 1*GB); root.assignContainers(clusterResource, node_1); InOrder allocationOrder = inOrder(a, b); allocationOrder.verify(a).assignContainers(eq(clusterResource), any(FiCaSchedulerNode.class)); allocationOrder.verify(b).assignContainers(eq(clusterResource), any(FiCaSchedulerNode.class)); verifyQueueMetrics(a, 2*GB, clusterResource); verifyQueueMetrics(b, 2*GB, clusterResource); stubQueueAllocation(a, clusterResource, node_0, 1*GB); stubQueueAllocation(b, clusterResource, node_0, 2*GB); root.assignContainers(clusterResource, node_0); allocationOrder = inOrder(b, a); allocationOrder.verify(b).assignContainers(eq(clusterResource), any(FiCaSchedulerNode.class)); allocationOrder.verify(a).assignContainers(eq(clusterResource), any(FiCaSchedulerNode.class)); verifyQueueMetrics(a, 3*GB, clusterResource); verifyQueueMetrics(b, 4*GB, clusterResource); stubQueueAllocation(a, clusterResource, node_0, 0*GB); stubQueueAllocation(b, clusterResource, node_0, 4*GB); root.assignContainers(clusterResource, node_0); allocationOrder = inOrder(b, a); allocationOrder.verify(b).assignContainers(eq(clusterResource), any(FiCaSchedulerNode.class)); allocationOrder.verify(a).assignContainers(eq(clusterResource), any(FiCaSchedulerNode.class)); verifyQueueMetrics(a, 3*GB, clusterResource); verifyQueueMetrics(b, 8*GB, clusterResource); stubQueueAllocation(a, clusterResource, node_1, 1*GB); stubQueueAllocation(b, clusterResource, node_1, 1*GB); root.assignContainers(clusterResource, node_1); allocationOrder = inOrder(a, b); allocationOrder.verify(b).assignContainers(eq(clusterResource), any(FiCaSchedulerNode.class)); allocationOrder.verify(a).assignContainers(eq(clusterResource), any(FiCaSchedulerNode.class)); verifyQueueMetrics(a, 4*GB, clusterResource); verifyQueueMetrics(b, 9*GB, clusterResource); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <X> List<X> distinct(List<X> inputs) { if (null == inputs) { return null; } return foldLeft(new ArrayList<X>(), inputs, new Aggregator<X, List<X>>() { private Set<X> mSeen = new HashSet<X>(); @Override public List<X> eval(X input, List<X> out) { if (!mSeen.contains(input)) { out.add(input); mSeen.add(input); } return out; } }); }### Assistant: @Test public void testDistinct2() { List<String> inputs = new ArrayList<String>(); inputs.add(\"b\"); inputs.add(\"a\"); inputs.add(\"a\"); inputs.add(\"a\"); List<String> outputs = new ArrayList<String>(); outputs.add(\"b\"); outputs.add(\"a\"); assertTrue(outputs.equals(Lists.distinct(inputs))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static InetAddress getLocalInetAddress(String host) throws SocketException { if (host == null) { return null; } InetAddress addr = null; try { addr = SecurityUtil.getByName(host); if (NetworkInterface.getByInetAddress(addr) == null) { addr = null; } } catch (UnknownHostException ignore) { } return addr; }### Assistant: @Test public void testGetLocalInetAddress() throws Exception { assertNotNull(NetUtils.getLocalInetAddress(\"127.0.0.1\")); assertNull(NetUtils.getLocalInetAddress(\"invalid-address-for-test\")); assertNull(NetUtils.getLocalInetAddress(null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isDescendantOf( Path ancestor ) { CheckArg.isNotNull(ancestor, \"ancestor\"); if (this == ancestor) return false; if (ancestor.isRoot()) return true; if (ancestor.size() >= this.size()) return false; Path thisPath = this.getAncestor(this.size() - ancestor.size()); Path thatPath = ancestor; assert thisPath.size() == thatPath.size(); while (!thisPath.isRoot() && thisPath.getLastSegment().equals(thatPath.getLastSegment())) { thisPath = thisPath.getParent(); thatPath = thatPath.getParent(); } return thisPath.isRoot(); }### Assistant: @Test public void shouldNotConsiderNodeToBeDecendantOfItself() { assertThat(path.isDescendantOf(path), is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void applyTo(HttpClientFactory.Builder httpClientFactoryBuilder) { try ( FileInputStream keystoreFile = new FileInputStream(new File(keystorePath)); FileInputStream truststoreFile = new FileInputStream(new File(truststorePath)) ) { KeyStore keyStore = KeyStore.getInstance(\"jks\"); keyStore.load(keystoreFile, keystorePassword.toCharArray()); KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); keyManagerFactory.init(keyStore, keystorePassword.toCharArray()); KeyStore trustStore = KeyStore.getInstance(\"jks\"); trustStore.load(truststoreFile, truststorePassword.toCharArray()); TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); trustManagerFactory.init(trustStore); SSLContext sslContext = SSLContext.getInstance(\"TLS\"); sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null); httpClientFactoryBuilder.withSslSocketFactory(new SSLConnectionSocketFactory(sslContext)); httpClientFactoryBuilder.withHttpsIOSessionStrategy(new SSLIOSessionStrategy(sslContext, new NoopHostnameVerifier())); } catch (IOException | GeneralSecurityException e) { throw new ConfigurationException(configExceptionMessage, e); } }### Assistant: @Test public void builderThrowsIfKeyIsInvalid() throws IOException { expectedException.expect(ConfigurationException.class); expectedException.expectMessage(PEMCertInfo.configExceptionMessage); File invalidKey = createInvalidKey(); JKSCertInfo testCertInfo = createTestCertInfoBuilder() .withKeystorePath(invalidKey.getAbsolutePath()) .build(); testCertInfo.applyTo(mock(HttpClientFactory.Builder.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AppSchema extractAppSchema() { for ( QName ftName : ftNameToFtElement.keySet() ) { FeatureType ft = buildFeatureType( ftNameToFtElement.get( ftName ) ); ftNameToFt.put( ftName, ft ); } FeatureType[] fts = ftNameToFt.values().toArray( new FeatureType[ftNameToFt.size()] ); Map<FeatureType, FeatureType> ftSubstitution = new HashMap<FeatureType, FeatureType>(); for ( QName ftName : ftNameToSubstitutionGroupName.keySet() ) { QName substitutionFtName = ftNameToSubstitutionGroupName.get( ftName ); if ( substitutionFtName != null ) { ftSubstitution.put( ftNameToFt.get( ftName ), ftNameToFt.get( substitutionFtName ) ); } } final List<GMLObjectType> genericGmlObjectTypes = new ArrayList<GMLObjectType>(); for ( final XSElementDeclaration elDecl : gmlSchema.getGeometryElementDeclarations( null, false ) ) { final GMLObjectType type = buildGenericObjectType( elDecl ); genericGmlObjectTypes.add( type ); typeNameToType.put( type.getName(), type ); } Map<GMLObjectType, GMLObjectType> typeToSuperType = new HashMap<GMLObjectType, GMLObjectType>(); for ( QName ftName : geometryNameToSubstitutionGroupName.keySet() ) { QName substitutionFtName = geometryNameToSubstitutionGroupName.get( ftName ); if ( substitutionFtName != null ) { typeToSuperType.put( typeNameToType.get( ftName ), typeNameToType.get( substitutionFtName ) ); } } for ( final XSElementDeclaration elDecl : gmlSchema.getTimeObjectElementDeclarations( null, false ) ) { final GMLObjectType type = buildGenericObjectType( elDecl ); genericGmlObjectTypes.add( type ); typeNameToType.put( type.getName(), type ); } for ( final XSElementDeclaration elDecl : gmlSchema.getTimeSliceElementDeclarations( null, false ) ) { final GMLObjectType type = buildGenericObjectType( elDecl ); genericGmlObjectTypes.add( type ); typeNameToType.put( type.getName(), type ); } return new GenericAppSchema( fts, ftSubstitution, prefixToNs, gmlSchema, genericGmlObjectTypes, typeToSuperType ); }### Assistant: @Test public void testParsingINSPIREAddresses() throws ClassCastException, ClassNotFoundException, InstantiationException, IllegalAccessException { String schemaURL = TestProperties.getProperty( \"schema_inspire_addresses\" ); if ( schemaURL == null ) { return; } GMLAppSchemaReader adapter = new GMLAppSchemaReader( GMLVersion.GML_32, null, schemaURL ); AppSchema schema = adapter.extractAppSchema(); FeatureType[] fts = schema.getFeatureTypes(); Assert.assertEquals( 75, fts.length ); for ( String ns : schema.getGMLSchema().getAppNamespaces() ) { System.out.println( ns ); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void init(ExecutionContext context) { super.init(context); functionExecutionService = context.get(FunctionExecutionService.class); functionAccessor = context.get(FunctionAccessor.class); functionRouter = context.get(FunctionRouter.class); reportNodeAttachmentManager = new ReportNodeAttachmentManager(context); dynamicJsonObjectResolver = new DynamicJsonObjectResolver(new DynamicJsonValueResolver(context.getExpressionHandler())); this.selectorHelper = new SelectorHelper(dynamicJsonObjectResolver); this.functionLocator = new FunctionLocator(functionAccessor, selectorHelper, context); }### Assistant: @Test public void testError() { ExecutionContext executionContext = buildExecutionContext(); Function function = newFunction(FUNCTION_ID_ERROR); ((InMemoryFunctionAccessorImpl)executionContext.get(FunctionAccessor.class)).save(function); CallFunctionHandler handler = new CallFunctionHandler(); handler.init(executionContext); CallFunction callFunction = new CallFunction(); callFunction.setFunctionId(function.getId().toString()); CallFunctionReportNode node = (CallFunctionReportNode) execute(callFunction); Assert.assertEquals(\"My Error\", node.getError().getMsg()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setPattern(String name, Pattern pattern) { assert pattern != null : \"Pattern cannot be null\"; set(name, pattern.pattern()); }### Assistant: @Test public void testSetPattern() { Pattern testPattern = Pattern.compile(\"a+b\"); Configuration configuration = new Configuration(); configuration.setPattern(\"testPattern\", testPattern); assertEquals(testPattern.pattern(), configuration.getPattern(\"testPattern\", Pattern.compile(\"\")).pattern()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void validate(AzureClient azureClient) throws ConfigurationException { Preconditions.checkNotNull(azureClient, \"azureClient cannot be null\"); for (NvaConfiguration config : this.nvaConfigurations) { config.validate(azureClient); } if (this.nvaConfigurations.stream() .map(c -> ((InetSocketAddress)c.getProbeSocketAddress()).getHostName()) .distinct() .count() != this.nvaConfigurations.size()) { throw new ConfigurationException(\"Duplicate probe IP Address found\"); } List<String> invalidPublicIpAddresses = this.publicIpAddresses.stream() .map(r -> r.getId()) .filter(id -> !azureClient.checkExistenceById(id)) .collect(Collectors.toList()); if (invalidPublicIpAddresses.size() > 0) { throw new ConfigurationException(\"Invalid public ip address(es): \" + invalidPublicIpAddresses.stream().collect(Collectors.joining(\", \"))); } List<String> invalidRouteTables = this.routeTables.stream() .filter(id -> !azureClient.checkExistenceById(id)) .collect(Collectors.toList()); if (invalidRouteTables.size() > 0) { throw new ConfigurationException(\"Invalid route table(s): \" + invalidRouteTables.stream().collect(Collectors.joining(\", \"))); } }### Assistant: @Test void test_validate_invalid_public_ip_address() throws ConfigurationException { AzureProbeMonitorConfiguration azureProbeMonitorConfiguration = new AzureProbeMonitorConfiguration(azureConfiguration, nvaConfigurations, routeTables, publicIpAddresses, null, null, null); AzureClient azureClient = mock(AzureClient.class); when(azureClient.checkExistenceById(contains(\"network-interface\"))) .thenReturn(true); NetworkInterface networkInterface = mock(NetworkInterface.class); when(networkInterface.primaryPrivateIp()) .thenReturn(\"127.0.0.1\") .thenReturn(\"127.0.0.2\"); when(azureClient.getNetworkInterfaceById(anyString())) .thenReturn(networkInterface); Assertions.assertThrows(ConfigurationException.class, () -> azureProbeMonitorConfiguration.validate(azureClient)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Map<String, List<Object>> copyData() { Map<String, List<Object>> newMap = new TreeMap<>(); resultsMap.entrySet().stream() .forEach(entry -> newMap.put(entry.getKey(), new ArrayList<>(entry.getValue()))); return newMap; }### Assistant: @Test public void testCopyData() { Map<String, List<Object>> data = new HashMap<>(); data.put(\"Foo\", Lists.newArrayList(1, 2, 3, 4)); data.put(\"Bar\", Lists.newArrayList(\"a\", \"b\", \"c\", \"d\")); QueryResults queryResults = new QueryResults(data); QueryResults copy = new QueryResults(queryResults.copyData()); assertEquals(queryResults.getColumns(), copy.getColumns()); assertEquals(queryResults.getRows(), copy.getRows()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public double getDistance(double[] features1, double[] features2) { double distance = positiveInfinityIfEitherOrBothAreNull(features1, features2); if (distance < 0) { if(features1.length != features2.length) { throw new IllegalArgumentException(\"Both features should have the same length. Received lengths of [\" + + features1.length + \"] and [\" + features2.length + \"]\"); } distance = 0.0; for (int i = 0; i < features1.length; i++) { double currentDistance = Math.abs(features1[i] - features2[i]); distance = (currentDistance > distance) ? currentDistance : distance; } } return distance; }### Assistant: @Test public void reversedIncrementalVectorsOfTwentyReturnsDistanceOfNineTeen() { int last = identicalA.length - 1; for(int i = 0; i < identicalA.length; i++) { identicalB[i] = identicalA[last - i]; } double distance = distanceCalculator.getDistance(identicalA, identicalB); assertThat(distance, is(equalTo(19.0))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public <T> Codec<T> codecFor(RawType cqlType) { if (cqlTypeCache.containsKey(cqlType)) { return (Codec<T>) cqlTypeCache.get(cqlType); } Codec<T> codec = (Codec<T>) createCodec(cqlType); if (codec == null) { return null; } Codec<T> previous = (Codec<T>) cqlTypeCache.putIfAbsent(cqlType, codec); return previous == null ? codec : previous; }### Assistant: @Test public void shouldHandleDate() { Codec<LocalDate> dateCodec = mapper.codecFor(primitive(DATE)); assertThat(dateCodec).isSameAs(mapper.date); encodeAndDecode(dateCodec, LocalDate.of(2017, 7, 4), \"0x800043c7\"); encodeAndDecode(dateCodec, LocalDate.of(1970, 1, 1), \"0x80000000\"); encodeAndDecode(dateCodec, LocalDate.of(1969, 12, 31), \"0x7fffffff\"); encodeAndDecode(dateCodec, null, null); encodeObjectAndDecode( dateCodec, LocalDate.of(2017, 7, 4), \"0x800043c7\", LocalDate.of(2017, 7, 4)); encodeObjectAndDecode(dateCodec, 0, \"0x80000000\", LocalDate.of(1970, 1, 1)); encodeObjectAndDecode(dateCodec, null, null, null); encodeObjectAndDecode(dateCodec, \"2018-05-03\", \"0x800044f6\", LocalDate.parse(\"2018-05-03\")); encodeObjectAndDecode(dateCodec, Optional.of(12), null, null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<String> enumerateFileNameOptions(String[] fileNames, ResourceResolutionContext context) { List<String> result = new ArrayList<>(); ResourceResolutionComponent[] components = context.components(); int index = components.length - 1; for (String filename : fileNames) { int dot = filename.lastIndexOf('.'); String prefix = dot >= 0 ? filename.substring(0, dot) : filename; String suffix = dot >= 0 ? filename.substring(dot) : \"\"; if (index >= 0) { enumerate(prefix, suffix, result, components, index); } result.add(prefix + suffix); } return result; }### Assistant: @Test public void testEnumerateFileNameOptionsWithDotWithoutExtensionAndContext() { List<String> options = strategy.enumerateFileNameOptions(new String[] { \"test.\" }, in(Locale.US)); assertEquals(3, options.size()); assertEquals(\"test-en_US.\", options.get(0)); assertEquals(\"test-en.\", options.get(1)); assertEquals(\"test.\", options.get(2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected int crossover(final MSeq<G> that, final MSeq<G> other) { final int length = min(that.length(), other.length()); return (int)indexes(RandomRegistry.random(), length, _swapProbability) .peek(i -> that.swap(i, other)) .count(); }### Assistant: @Test public void crossoverChanges() { final ISeq<CharacterGene> g1 = ISeq.of(CharacterChromosome.of(\"1234567890\")); final ISeq<CharacterGene> g2 = ISeq.of(CharacterChromosome.of(\"abcdefghij\")); final int rv1 = 12; using(new Random(10), r -> { final UniformCrossover<CharacterGene, Double> crossover = new UniformCrossover<>(0.5, 0.5); final DoubleMomentStatistics statistics = new DoubleMomentStatistics(); for (int j = 0; j < 1000; ++j) { MSeq<CharacterGene> g1c = g1.copy(); MSeq<CharacterGene> g2c = g2.copy(); final int changed = crossover.crossover(g1c, g2c); Assert.assertEquals(changed, IntStream.range(0, g2c.length()) .filter(i -> Character.isDigit(g2c.get(i).charValue())) .count() ); statistics.accept(changed); } Assert.assertEquals(statistics.mean(), 5.0, 0.0001); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public IObject deserialize(final FullHttpRequest request) throws DeserializationException { ByteBuf content = request.content(); byte[] bytes = new byte[content.capacity()]; content.getBytes(0, bytes); try { return messageMapper.deserialize(bytes); } catch (ResolutionException e) { throw new DeserializationException(\"Failed to deserialize request. It should be json\", e); } }### Assistant: @Test public void testDeserializationResult() throws InvalidArgumentException, ResolutionException, URISyntaxException, DeserializationException, SerializeException { mapperStub = mock(IMessageMapper.class); DeserializeStrategyPostJson deserializeStrategy = new DeserializeStrategyPostJson(mapperStub); when(mapperStub.deserialize(any(byte[].class))).thenReturn(new DSObject(\"{\\\"hello\\\": \\\"world\\\"}\")); IObject iObject = deserializeStrategy.deserialize(new DefaultFullHttpRequest(HttpVersion.HTTP_1_0, HttpMethod.POST, \"http: String iObjectString = iObject.serialize().toString(); verify(iObjectString.equals(\"{\\\"hello\\\":\\\"world\\\"}\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public C getCellSafe(int x, int y) { C cell = getCell(x, y); if (cell == null) { cell = createCell(x, y); setCell(x, y, cell); } return cell; }### Assistant: @Test public void testGetCellSafe() throws Exception { CellGrid<MyCell> grid = createGrid(GridDef.createGlobal(5.0)); assertNull(grid.getCell(0, 9)); MyCell cell = grid.getCellSafe(0, 9); assertNotNull(cell); assertSame(cell, grid.getCell(0, 9)); assertSame(cell, grid.getCellSafe(0, 9)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static PdfPageLabel newInstanceWithLabel(String label, PdfLabelNumberingStyle numberingStyle, int logicalPageNumber) { if (logicalPageNumber < 1) { throw new InvalidParameterException(\"Input page number must be positive.\"); } if (label == null) { throw new InvalidParameterException(\"Input label cannot be null.\"); } if (numberingStyle == null) { throw new InvalidParameterException(\"Input numbering style cannot be null.\"); } return new PdfPageLabel(label, numberingStyle, logicalPageNumber); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testNegativePhysicalNumb() { PdfPageLabel.newInstanceWithLabel(\"dsdsadsa\", PdfLabelNumberingStyle.ARABIC, -1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean isSmsAvailable(Context context) { Intent smsIntent = new Intent(Intent.ACTION_VIEW); smsIntent.setData(Uri.parse(\"sms:\")); return IntentUtils.deviceCanHandleIntent(context, smsIntent); }### Assistant: @Test public void isSmsAvailable_whenCanAcceptIntent_shouldReturnTrue() throws Exception { context = createMockContextWithSpecificIntentData(\"sms\", null, null, \"android.intent.action.VIEW\"); assertThat(subject.isSmsAvailable(context)).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FromCopy setFeatures(final JsonObject featuresJsonObject) { return setFeatures(ThingsModelFactory.newFeatures(featuresJsonObject)); }### Assistant: @Test public void setFeatures() { underTestV1.setFeatures(FEATURES); final Thing thing = underTestV1.build(); assertThat(thing).hasFeatures(FEATURES); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validateKey(ChaCha20Poly1305Key key) throws GeneralSecurityException { Validators.validateVersion(key.getVersion(), getVersion()); if (key.getKeyValue().size() != KEY_SIZE_IN_BYTES) { throw new GeneralSecurityException(\"invalid ChaCha20Poly1305Key: incorrect key length\"); } }### Assistant: @Test public void validateKey_checkAllLengths() throws Exception { ChaCha20Poly1305KeyManager manager = new ChaCha20Poly1305KeyManager(); for (int i = 0; i < 100; i++) { if (i == 32) { manager.validateKey(createChaCha20Poly1305Key(i)); } else { try { manager.validateKey(createChaCha20Poly1305Key(i)); fail(); } catch (GeneralSecurityException e) { } } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public OAuthJwtAccessTokenParser create(KeyStore keyStore) throws IllegalArgumentException { final String jwksUrl = GET_PROPERTY.apply(JWKS_URL, null); return new DefaultOAuthJwtAccessTokenParser(keyStore, jwksUrl); }### Assistant: @Test public void testCreate() throws OAuthJwtAccessTokenException { OAuthJwtAccessTokenParser parser = null; DefaultOAuthJwtAccessTokenParserFactory factory = new DefaultOAuthJwtAccessTokenParserFactory(); assertThrows(IllegalArgumentException.class, () -> factory.create(null)); parser = factory.create(baseKeyStore); assertNotNull(parser); String jwtString = \"eyJraWQiOiJjOTk4NmVlMy03YjJhLTRkMjAtYjg2YS0wODM5ODU2ZjI1NDEiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJEZWZhdWx0T0F1dGhKd3RBY2Nlc3NUb2tlblBhcnNlckZhY3RvcnlUZXN0In0.UalqjyBTDNnEqA0NaOeOhTn_H96vFo9TsCTq58r1YT2p5Hf3xjZLn25puWjcoGZOp1N2xBrvKwmcysHtib5Gq70ulBV7zQXHVzoLB56Ey2LDJJ3QH5sejPCXuapu2i21hSp4PEVvqndULdMipcFYngN97uISrwj-cki8XVgEQDs3OiuHNpyLPYHbCOrbncU9cy29K7l1wYS9gG_OYUB_gy0vdQDhbdbtWs6iwYWQZ3UWJcLp_j1hZyeRhmrSeAmHEBUa8mZs8EuySd3cxUYtV5qje_GPQ47BP2sFWSM6an4Gw6llSWp395O9zJPHRwcqSeIop_wV9Lb7C7v1pRDQDGDsSXH4UbxvEw-Yb0fg4jos3z2cLtk8NR4qzLCVnzHt1uD9QpzB3dXNB22nn8coZ0ay78lMahje6xw162pyjWZUD2YrRpPxUgngdsVJEN-DBQzKQyieHWTWMEgZ2uUsXtPKTKYcW9XfHSXE7gEQwNP9Qz03oP4bz9oP1aLpeQIMQ790NsMfSOv3yRpH5RswZ5rd9NJZgH-n57AlS8Oqz1-wIwTehGdnRlEveU0xoVfuQOonooPHACXA0DR2pV-zo6VT4BOLUMmhU8-TDvP05VXC-maNljjjtL4H7pX6ob9eLTAbj96RqHOkey89WwgKlS1a6LnoMRxcuVJPPmcerdY\"; System.setProperty(\"athenz.auth.oauth.jwt.parser.jwks_url\", this.classLoader.getResource(\"jwt_jwks.json\").toString()); parser = factory.create(baseKeyStore); System.clearProperty(\"athenz.auth.oauth.jwt.parser.jwks_url\"); OAuthJwtAccessToken token = parser.parse(jwtString); assertEquals(token.getIssuer(), \"DefaultOAuthJwtAccessTokenParserFactoryTest\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public static <T> NonConstructableGenericSubClass<T> newInstance(Class<T> memberClass, int argA) throws NoSuchMethodException { return (NonConstructableGenericSubClass<T>) NonConstructableGenericBaseClass.newInstance(NonConstructableGenericSubClass.class, memberClass, argA); }### Assistant: @Test public void shouldCreateBaseClassInstance() throws NoSuchMethodException { final NonConstructableGenericBaseClass<Long> instance = NonConstructableGenericBaseClass.newInstance(Long.class, 5); assertThat(valueOf(instance.getFieldA()), is(5)); assertTrue(instance.getMemberClass() == Long.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public double reqCarburantMax() { return carburantMax.get(); }### Assistant: @Test public void testGetCarburantMax() { assertEquals(100.0, v1.reqCarburantMax(), 0.0001); assertEquals(20.0, v2.reqCarburantMax(), 0.0001); assertEquals(100.0, v3.reqCarburantMax(), 0.0001); assertEquals(20.0, v4.reqCarburantMax(), 0.0001); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure public final long getIdentifier(URL url) { final Long id = getIdentifierFromResource(url); if (id == null) { return -1; } return id.longValue(); }### Assistant: @Test public void getIdentifierFile() { assertEquals(-1, this.xml.getIdentifier(new File(\"x\"))); assertEquals(2, this.xml.getIdentifier(new File(\"a.txt\"))); assertEquals(3, this.xml.getIdentifier(new File(\"b.txt\"))); assertEquals(4, this.xml.getIdentifier(new File(\"a.jpg\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void rollback() { log.debug(\"Rolling back rename operation\"); try { ldapOperations.rename(newDn, originalDn); } catch (Exception e) { log.warn(\"Unable to rollback rename operation. \" + \"originalDn: \" + newDn + \"; newDn: \" + originalDn); } }### Assistant: @Test public void testRollback() { LdapName expectedNewName = LdapUtils.newLdapName(\"ou=newOu\"); LdapName expectedOldName = LdapUtils.newLdapName(\"ou=someou\"); RenameOperationExecutor tested = new RenameOperationExecutor( ldapOperationsMock, expectedOldName, expectedNewName); tested.rollback(); verify(ldapOperationsMock).rename(expectedNewName, expectedOldName); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Page<Project> searchProjectsForUserPaginated(String query, User user, Pageable pageable) { if(userService.userIsManager(user)) { return managerSearchService.searchProjects(query, pageable,null); } else { var userLob = userService.getUserData(user).getLob(); return staffSearchService.searchProjects(query, pageable, userLob); } }### Assistant: @Test public void searchProjectsForUserPaginatedSearchesInLobDependentProjectsWhenUserIsNoManager() { var expectedQuery = \"a cool query\"; var expectedLob = \"LOB Test\"; var expectedPageable = PageRequest.of(1, 4); given(userServiceMock.getUserData(userMock)).willReturn(userDataMock); given(userDataMock.getLob()).willReturn(expectedLob); given(staffHibernateSearchServiceMock.searchProjects(expectedQuery, expectedPageable, expectedLob)) .willReturn(new PageImpl<>(List.of(projectMock))); var actualProjectPage = userProjectService.searchProjectsForUserPaginated(expectedQuery, userMock, expectedPageable); assertThat(actualProjectPage).containsExactly(projectMock); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void characters(char[] ch, int start, int length) throws SAXException { advance(length); super.characters(ch, start, length); }### Assistant: @Test public void testZeroCharactersPerByte() throws IOException { try { char[] ch = new char[] { 'x' }; for (int i = 0; i < MANY_BYTES; i++) { stream.read(); } handler.characters(ch, 0, 1); } catch (SAXException e) { fail(\"Unexpected SAXException\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void checkDBVersion() throws AmbariException { LOG.info(\"Checking DB store version\"); if (metainfoDAO == null) { metainfoDAO = injector.getInstance(MetainfoDAO.class); } MetainfoEntity schemaVersionEntity = metainfoDAO.findByKey(Configuration.SERVER_VERSION_KEY); String schemaVersion = null; if (schemaVersionEntity != null) { schemaVersion = schemaVersionEntity.getMetainfoValue(); } Configuration conf = injector.getInstance(Configuration.class); File versionFile = new File(conf.getServerVersionFilePath()); if (!versionFile.exists()) { throw new AmbariException(\"Server version file does not exist.\"); } String serverVersion = null; try (Scanner scanner = new Scanner(versionFile)) { serverVersion = scanner.useDelimiter(\"\\\\Z\").next(); } catch (IOException ioe) { throw new AmbariException(\"Unable to read server version file.\"); } if (schemaVersionEntity==null || VersionUtils.compareVersions(schemaVersion, serverVersion, 3) != 0) { String error = \"Current database store version is not compatible with \" + \"current server version\" + \", serverVersion=\" + serverVersion + \", schemaVersion=\" + schemaVersion; LOG.warn(error); throw new AmbariException(error); } LOG.info(\"DB store version is compatible\"); }### Assistant: @Ignore @Test public void testCheckDBVersion_Valid() throws Exception { MetainfoDAO metainfoDAO = createMock(MetainfoDAO.class); MetainfoEntity metainfoEntity = new MetainfoEntity(); String serverVersion = ambariMetaInfo.getServerVersion(); metainfoEntity.setMetainfoName(Configuration.SERVER_VERSION_KEY); metainfoEntity.setMetainfoValue(serverVersion); expect(metainfoDAO.findByKey(Configuration.SERVER_VERSION_KEY)). andReturn(metainfoEntity); replay(metainfoDAO); DatabaseChecker.metainfoDAO = metainfoDAO; DatabaseChecker.ambariMetaInfo = ambariMetaInfo; try { DatabaseChecker.checkDBVersion(); } catch (AmbariException ae) { fail(\"DB versions check failed.\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void addHostEntries(Map<String, Set<String>> hostMap) { if (hostMap == null || hostMap.isEmpty()) { return; } for (Map.Entry<String, Set<String>> entry : hostMap.entrySet()) { List<String> services = hostCache.computeIfAbsent(entry.getKey(), k -> new ArrayList<>()); services.addAll(entry.getValue()); } }### Assistant: @Test public void testAddHostEntriesEmptyMap() { ChangeLogStore clogStore = new MockZMSFileChangeLogStore(\"/tmp/zts_server_unit_tests/zts_root\", pkey, \"0\"); DataStore store = new DataStore(clogStore, null); List<String> services = new ArrayList<>(); services.add(\"coretech.storage\"); services.add(\"coretech.backup\"); store.hostCache.put(\"host1\", services); Map<String, Set<String>> hostMap = new HashMap<>(); store.addHostEntries(hostMap); assertEquals(store.hostCache.size(), 1); List<String> retServices = store.hostCache.get(\"host1\"); assertEquals(retServices.size(), 2); assertTrue(retServices.contains(\"coretech.storage\")); assertTrue(retServices.contains(\"coretech.backup\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public BlameCommand blameCommand() { return this.jgitBlameCommand; }### Assistant: @Test public void returnImplem() { JGitBlameCommand jblameCommand = new JGitBlameCommand(new PathResolver(), analysisWarnings); GitScmProvider gitScmProvider = new GitScmProvider(jblameCommand, analysisWarnings, gitIgnoreCommand, system2); assertThat(gitScmProvider.blameCommand()).isEqualTo(jblameCommand); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException { String service = request.getURI().toASCIIString(); String proxyTicket = proxyTicketProvider.getProxyTicket(service); if (!StringUtils.hasText(proxyTicket)) { throw new IllegalStateException( String.format(\"Proxy ticket provider returned a null proxy ticket for service %s.\", service)); } URI uri = UriComponentsBuilder .fromUri(request.getURI()) .replaceQueryParam(serviceProperties.getArtifactParameter(), proxyTicket) .build(true).toUri(); return execution.execute(new HttpRequestWrapper(request) { @Override public URI getURI() { return uri; } }, body); }### Assistant: @Test public void intercept_ServiceWithConflictQueryParameter_QueryParameterOverride() throws IOException { String service = \"http: ClientHttpRequestExecution clientHttpRequestExecution = mock(ClientHttpRequestExecution.class); ClientHttpRequest request = new MockClientHttpRequest(HttpMethod.GET, URI.create(service)); String proxyTicket = \"PT-21-c1gk6jBcfYnatLbNExfx-0623277bc36a\"; when(proxyTicketProvider.getProxyTicket(service)).thenReturn(proxyTicket); casAuthorizationInterceptor.intercept(request, null, clientHttpRequestExecution); verify(proxyTicketProvider, times(1)).getProxyTicket(service); verify(clientHttpRequestExecution, times(1)).execute(httpRequestArgumentCaptor.capture(), isNull()); assertThat(httpRequestArgumentCaptor.getValue().getURI().toASCIIString()) .isEqualTo(\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String[] split(final String str, final char delim, final int maxTokens) { int max = maxTokens; List<String> result = new ArrayList<String>(max); if (max == 0) { max = -1; } int curr = -1; int prev = 0; while (true) { ++curr; if (curr == str.length()) { result.add(str.substring(prev, str.length())); --max; break; } if (str.charAt(curr) == delim) { result.add(str.substring(prev, curr)); --max; prev = curr + 1; } if (max == 0) { break; } } return result.toArray(new String[result.size()]); }### Assistant: @Test public void testSplit() { Map<String, String[]> casesMap = new LinkedHashMap<String, String[]>(); casesMap.put(\"A,B,C\", new String[]{\"A\", \"B\", \"C\"}); casesMap.put(\",A,B\", new String[]{\"\", \"A\", \"B\"}); casesMap.put(\",A,B,\", new String[]{\"\", \"A\", \"B\", \"\"}); casesMap.put(\",,\", new String[]{\"\", \"\", \"\"}); casesMap.put(\" ,, \", new String[]{\" \", \"\", \" \"}); casesMap.put(\"A,,B,,C,\", new String[]{\"A\", \"\", \"B\", \"\", \"C\", \"\"}); casesMap.put(\"AA,BB\", new String[]{\"AA\", \"BB\"}); casesMap.put(\",AA,BB\", new String[]{\"\", \"AA\", \"BB\"}); casesMap.put(\",AA,BB,\", new String[]{\"\", \"AA\", \"BB\", \"\"}); casesMap.put(\"AA,,BB\", new String[]{\"AA\", \"\", \"BB\"}); for (Map.Entry<String, String[]> e : casesMap.entrySet()) { String str = e.getKey(); String[] expected = e.getValue(); String[] result = EngineUtil.split(str, ','); assertArrayEquals(expected, result); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ObjectName registerMBeanAtServer(MBeanServer pServer, Object pMBean, String pName) throws MBeanRegistrationException, InstanceAlreadyExistsException, NotCompliantMBeanException, MalformedObjectNameException { if (pName != null) { ObjectName oName = new ObjectName(pName); return pServer.registerMBean(pMBean,oName).getObjectName(); } else { return pServer.registerMBean(pMBean,null).getObjectName(); } }### Assistant: @Test public void registerAtMBeanServer2() throws MalformedObjectNameException, MBeanRegistrationException, InstanceAlreadyExistsException, NotCompliantMBeanException { Config config = new Config(null,null,null); ObjectInstance oInstance = new ObjectInstance(\"jolokia:type=dummy\",Config.class.getName()); MBeanServer server = EasyMock.createMock(MBeanServer.class); expect(server.registerMBean(config,null)).andReturn(oInstance); replay(server); ObjectName resName = serverHandle.registerMBeanAtServer(server,config,null); assertEquals(resName,new ObjectName(\"jolokia:type=dummy\")); verify(server); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Layer getLayer() { return this.layer; }### Assistant: @Test public void testBasicStyles() { LOGGER.info(\"Try to load BasicStyles.xml \"); StyledLayerDescriptor sld = null; try { sld = StyledLayerDescriptor.unmarshall(StyledLayerDescriptor.class .getClassLoader().getResourceAsStream(\"sld/BasicStyles.xml\")); } catch (JAXBException e) { e.printStackTrace(); } LOGGER.info(\"BasicStyles.xml loaded\"); Assert.assertTrue(\"Number of layers different to 5 : \" + sld.getLayers().size(), sld.getLayers().size() == 5); Assert.assertTrue(\"Number of polygon styles different to 1 : \" + sld.getLayer(\"Polygon\").getStyles().size(), sld.getLayer(\"Polygon\") .getStyles().size() == 1); Assert.assertTrue(\"Number of point styles different to 1 : \" + sld.getLayer(\"Point\").getStyles().size(), sld.getLayer(\"Point\") .getStyles().size() == 1); Assert.assertTrue(\"Number of 'Line Dasharray' styles different to 2 : \" + sld.getLayer(\"Line Dasharray\").getStyles().size(), sld.getLayer(\"Line Dasharray\").getStyles().size() == 2); Assert.assertTrue(\"Line with contour - Line fill - Red different 255\", sld .getLayer(\"Line with contour\").getStyles().get(1).getSymbolizer() .getStroke().getColor().getRed() == 255); Assert.assertTrue(\"Line with contour - Line fill - Green different 255\", sld.getLayer(\"Line with contour\").getStyles().get(1).getSymbolizer() .getStroke().getColor().getGreen() == 255); Assert.assertTrue(\"Line with contour - Line fill - Blue different 255\", sld .getLayer(\"Line with contour\").getStyles().get(1).getSymbolizer() .getStroke().getColor().getBlue() == 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting static byte[] streamToBytes(CountingInputStream cis, long length) throws IOException { long maxLength = cis.bytesRemaining(); if (length < 0 || length > maxLength || (int) length != length) { throw new IOException(\"streamToBytes length=\" + length + \", maxLength=\" + maxLength); } byte[] bytes = new byte[(int) length]; new DataInputStream(cis).readFully(bytes); return bytes; }### Assistant: @Test public void testStreamToBytesExcessiveLength() throws IOException { byte[] data = new byte[1]; CountingInputStream cis = new CountingInputStream(new ByteArrayInputStream(data), data.length); exception.expect(IOException.class); DiskBasedCache.streamToBytes(cis, 2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Map<ModeOfInheritance, List<VariantEvaluation>> computeCompatibleInheritanceModes(List<VariantEvaluation> variantEvaluations) { List<GenotypeCalls> genotypeCalls = buildGenotypeCalls(variantEvaluations); try { Map<ModeOfInheritance, ImmutableList<GenotypeCalls>> compatibilityCalls = mendelChecker.checkMendelianInheritance(genotypeCalls); logger.debug(\"{}\", compatibilityCalls); return variantsGroupedByCompatibleMode(compatibilityCalls); } catch (IncompatiblePedigreeException e) { logger.error(\"Problem with annotating VariantContext for Mendelian inheritance.\", e); } return Collections.emptyMap(); }### Assistant: @Test public void testAutosomalDominantIndividual() { List<Allele> alleles = buildAlleles(\"A\", \"T\"); Genotype genotype = buildPhasedSampleGenotype(\"Adam\", alleles.get(0), alleles.get(1)); VariantContext variantContext = buildVariantContext(1, 12345, alleles, genotype); VariantEvaluation variant = filteredVariant(1, 12345, \"A\", \"T\", FilterResult.pass(FilterType.FREQUENCY_FILTER), variantContext); Pedigree pedigree = singleAffectedSample(\"Adam\"); InheritanceModeAnnotator instance = new InheritanceModeAnnotator(pedigree, InheritanceModeOptions.defaults()); Map<ModeOfInheritance, List<VariantEvaluation>> results = instance.computeCompatibleInheritanceModes(ImmutableList.of(variant)); Map<ModeOfInheritance, List<VariantEvaluation>> expected = ImmutableMap.of( ModeOfInheritance.AUTOSOMAL_DOMINANT, ImmutableList.of(variant) ); assertThat(results, equalTo(expected)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T extends IChemObject> T read(T object) throws CDKException { sp = new SmilesParser(object.getBuilder()); if (object instanceof IAtomContainerSet) { return (T) readAtomContainerSet((IAtomContainerSet) object); } else if (object instanceof IChemFile) { IChemFile file = (IChemFile) object; IChemSequence sequence = file.getBuilder().newInstance(IChemSequence.class); IChemModel chemModel = file.getBuilder().newInstance(IChemModel.class); chemModel.setMoleculeSet(readAtomContainerSet(file.getBuilder().newInstance(IAtomContainerSet.class))); sequence.addChemModel(chemModel); file.addChemSequence(sequence); return (T) file; } else { throw new CDKException(\"Only supported is reading of MoleculeSet objects.\"); } }### Assistant: @Test public void testReadingSmiFile_3() throws Exception { String filename = \"data/smiles/test3.smi\"; logger.info(\"Testing: \" + filename); InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename); SMILESReader reader = new SMILESReader(ins); IAtomContainerSet som = reader.read(new AtomContainerSet()); Assert.assertEquals(5, som.getAtomContainerCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute(SensorContext context) { if (context.settings().hasKey(GroovyPlugin.CODENARC_REPORT_PATHS)) { String[] codeNarcReportPaths = context.settings().getStringArray(GroovyPlugin.CODENARC_REPORT_PATHS); String codeNarcReportPath = context.settings().getString(GroovyPlugin.CODENARC_REPORT_PATH); if (codeNarcReportPaths.length == 0) { codeNarcReportPaths = new String[] { codeNarcReportPath }; } List<File> reports = new ArrayList<File>(); for (String path : codeNarcReportPaths) { File report = context.fileSystem().resolvePath(path); if (!report.isFile() || !report.exists()) { LOG.warn(\"Groovy report \" + GroovyPlugin.CODENARC_REPORT_PATHS + \" not found at {}\", report); } else { reports.add(report); } } if (!reports.isEmpty()) { parseReport(context, reports); } } else { runCodeNarc(context); } }### Assistant: @Test public void should_do_nothing_when_can_not_find_report_path() throws Exception { sensorContextTester.settings().setProperty(GroovyPlugin.CODENARC_REPORT_PATHS, \"../missing_file.xml\"); addFileWithFakeContent(\"src/org/codenarc/sample/domain/Unknown.groovy\"); ActiveRulesBuilder activeRulesBuilder = new ActiveRulesBuilder(); activeRulesBuilder = activateRule(activeRulesBuilder, \"org.codenarc.rule.basic.EmptyClassRule\", \"EmptyClass\"); sensorContextTester.setActiveRules(activeRulesBuilder.build()); sensor.execute(sensorContextTester); assertThat(sensorContextTester.allIssues()).isEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SearchResultSummaryDisplayContext build() throws Exception { try { if (_documentBuilderFactory != null) { _document = _documentBuilderFactory.builder( _legacyDocument ).build(); } String className = getFieldValueString(Field.ENTRY_CLASS_NAME); long classPK = getEntryClassPK(); if (Validator.isBlank(className) && (classPK == 0)) { return buildFromPlainDocument(); } return build(className, classPK); } catch (Exception exception) { if (_log.isDebugEnabled()) { _log.debug(exception, exception); } return buildTemporarilyUnavailable(); } }### Assistant: @Test public void testUserPortraitFromResultButTagsAndURLDownloadFromRoot() throws Exception { long userId = RandomTestUtil.randomInt(2, Integer.MAX_VALUE); AssetEntry assetEntry = createAssetEntry(userId); long rootUserId = userId - 1; AssetEntry rootAssetEntry = createAssetEntryWithTagsPresent(rootUserId); String className = RandomTestUtil.randomString(); long entryClassPK = RandomTestUtil.randomInt(2, Integer.MAX_VALUE); long rootEntryClassPK = entryClassPK - 1; whenAssetEntryLocalServiceFetchEntry( className, entryClassPK, assetEntry); whenAssetEntryLocalServiceFetchEntry( className, rootEntryClassPK, rootAssetEntry); whenAssetRendererFactoryGetAssetRenderer(entryClassPK, assetRenderer); AssetRenderer<?> rootAssetRenderer = Mockito.mock(AssetRenderer.class); whenAssetRendererFactoryGetAssetRenderer( rootEntryClassPK, rootAssetRenderer); whenAssetRendererFactoryLookupGetAssetRendererFactoryByClassName( className); String rootURLDownload = RandomTestUtil.randomString(); whenAssetRendererGetURLDownload(rootAssetRenderer, rootURLDownload); whenIndexerRegistryGetIndexer(className, createIndexer()); Document document = createDocument(className, entryClassPK); document.addKeyword(Field.ROOT_ENTRY_CLASS_PK, rootEntryClassPK); SearchResultSummaryDisplayContext searchResultSummaryDisplayContext = build(document); assertAssetRendererURLDownloadVisible( rootURLDownload, searchResultSummaryDisplayContext); assertTagsVisible(rootEntryClassPK, searchResultSummaryDisplayContext); assertUserPortraitVisible(userId, searchResultSummaryDisplayContext); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TextLayoutBuilder setTextSpacingExtra(float spacingExtra) { if (mParams.lineHeight == DEFAULT_LINE_HEIGHT && mParams.spacingAdd != spacingExtra) { mParams.spacingAdd = spacingExtra; mSavedLayout = null; } return this; }### Assistant: @Test public void testSetTextSpacingExtra() { mLayout = mBuilder.setTextSpacingExtra(10).build(); assertEquals(mBuilder.getTextSpacingExtra(), 10.0f, 0.0f); assertEquals(mLayout.getSpacingAdd(), 10.0f, 0.0f); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onError(Throwable t) { if (done) { RxJavaPlugins.onError(t); return; } done = true; if (s == null) { Throwable npe = new NullPointerException(\"Subscription not set!\"); try { actual.onSubscribe(EmptySubscription.INSTANCE); } catch (Throwable e) { Exceptions.throwIfFatal(e); RxJavaPlugins.onError(new CompositeException(t, npe, e)); return; } try { actual.onError(new CompositeException(t, npe)); } catch (Throwable e) { Exceptions.throwIfFatal(e); RxJavaPlugins.onError(new CompositeException(t, npe, e)); } return; } if (t == null) { t = new NullPointerException(\"onError called with null. Null values are generally not allowed in 2.x operators and sources.\"); } try { actual.onError(t); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); RxJavaPlugins.onError(new CompositeException(t, ex)); } }### Assistant: @Test @Ignore(\"Observers can't throw\") public void onErrorNotImplementedFailureSafe() { try { new SafeSubscriber<String>(OBSERVER_ONERROR_NOTIMPLEMENTED()).onError(new SafeSubscriberTestException(\"error!\")); fail(\"expects exception to be thrown\"); } catch (Exception e) { assertTrue(e.getCause() instanceof SafeSubscriberTestException); assertEquals(\"error!\", e.getCause().getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static final double haversineFormula(LatLonPoint point1, LatLonPoint point2) { double lat1 = point1.getLat(); double lon1 = point1.getLon(); double lat2 = point2.getLat(); double lon2 = point2.getLon(); return haversineFormula(lat1, lon1, lat2, lon2); }### Assistant: @Test public void testHaversineFormula_London_Paris() { double lat1 = 51.50853; double lon1 = -0.12574; double lat2 = 48.85341; double lon2 = 2.34880; double expResult = 343771; double result = GreatCircleDistance.haversineFormula(lat1, lon1, lat2, lon2); assertEquals(expResult, result, 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setStopReason(@Nullable String id, int stopReason) { pendingMessages++; internalHandler .obtainMessage(MSG_SET_STOP_REASON, stopReason, 0, id) .sendToTarget(); }### Assistant: @Test public void setSingleDownloadStopReasonThenRemove_removesDownload() throws Throwable { DownloadRunner runner = new DownloadRunner(uri1).postDownloadRequest(); TaskWrapper task = runner.getTask(); task.assertDownloading(); runOnMainThread(() -> downloadManager.setStopReason(task.taskId, APP_STOP_REASON)); task.assertStopped(); runner.postRemoveRequest(); runner.getDownloader(1).assertStarted().unblock(); task.assertRemoved(); downloadManagerListener.blockUntilTasksCompleteAndThrowAnyDownloadError(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public I dataType(@NonNull @MimeType.Value final String type) { this.dataType = type; return (I) this; }### Assistant: @Test public void testDataType() { final ContentIntent intent = new ContentIntentImpl(); intent.dataType(MimeType.AUDIO_MP3); assertThat(intent.dataType(), is(MimeType.AUDIO_MP3)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: Insert(QueryBuilderOptions options) { super(options, Arrays.asList( new StringBlock(options, \"INSERT\"), new IntoTableBlock(options), new InsertFieldValueBlock(options), new InsertFieldsFromQueryBlock(options) )); }### Assistant: @Test(expected=UnsupportedOperationException.class) public void unionShouldThrow() { Squel.insert() .union(\"A\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public NodeValue exec(NodeValue v) { try { GeometryWrapper geometry = GeometryWrapper.extract(v); Integer dimension = geometry.getCoordinateDimension(); return NodeValue.makeNodeInteger(dimension); } catch (DatatypeFormatException ex) { throw new ExprEvalException(ex.getMessage(), ex); } }### Assistant: @Test public void testExec_4_Dimension() { NodeValue geometryLiteral = NodeValue.makeNode(\"<http: CoordinateDimensionFF instance = new CoordinateDimensionFF(); NodeValue expResult = NodeValue.makeNodeInteger(4); NodeValue result = instance.exec(geometryLiteral); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final KeywordPlanCampaignKeyword getKeywordPlanCampaignKeyword( KeywordPlanCampaignKeywordName resourceName) { GetKeywordPlanCampaignKeywordRequest request = GetKeywordPlanCampaignKeywordRequest.newBuilder() .setResourceName(resourceName == null ? null : resourceName.toString()) .build(); return getKeywordPlanCampaignKeyword(request); }### Assistant: @Test @SuppressWarnings(\"all\") public void getKeywordPlanCampaignKeywordTest() { com.google.ads.googleads.v5.services.KeywordPlanCampaignKeywordName resourceName2 = com.google.ads.googleads.v5.services.KeywordPlanCampaignKeywordName.of( \"[CUSTOMER]\", \"[KEYWORD_PLAN_CAMPAIGN_KEYWORD]\"); KeywordPlanCampaignKeyword expectedResponse = KeywordPlanCampaignKeyword.newBuilder().setResourceName(resourceName2.toString()).build(); mockKeywordPlanCampaignKeywordService.addResponse(expectedResponse); KeywordPlanCampaignKeywordName resourceName = KeywordPlanCampaignKeywordName.of(\"[CUSTOMER]\", \"[KEYWORD_PLAN_CAMPAIGN_KEYWORD]\"); KeywordPlanCampaignKeyword actualResponse = client.getKeywordPlanCampaignKeyword(resourceName); Assert.assertEquals(expectedResponse, actualResponse); List<AbstractMessage> actualRequests = mockKeywordPlanCampaignKeywordService.getRequests(); Assert.assertEquals(1, actualRequests.size()); GetKeywordPlanCampaignKeywordRequest actualRequest = (GetKeywordPlanCampaignKeywordRequest) actualRequests.get(0); Assert.assertEquals( resourceName, KeywordPlanCampaignKeywordName.parse(actualRequest.getResourceName())); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Job execute() throws Exception { assert inputOptions != null; assert getConf() != null; Job job = null; try { metaFolder = createMetaFolderPath(); jobFS = metaFolder.getFileSystem(getConf()); job = createJob(); createInputFileListing(job); job.submit(); submitted = true; } finally { if (!submitted) { cleanup(); } } String jobID = getJobID(job); job.getConfiguration().set(DistCpConstants.CONF_LABEL_DISTCP_JOB_ID, jobID); LOG.info(\"DistCp job-id: \" + jobID); LOG.info(\"DistCp job may be tracked at: \" + job.getTrackingURL()); LOG.info(\"To cancel, run the following command:\\thadoop job -kill \" + jobID); long jobStartTime = System.nanoTime(); if (inputOptions.shouldBlock() && !job.waitForCompletion(true)) { updateJobTimeInNanos(jobStartTime); throw new IOException(\"DistCp failure: Job \" + jobID + \" has failed. \"); } updateJobTimeInNanos(jobStartTime); return job; }### Assistant: @Test public void testDynamicDistCp() throws Exception { try { clearState(); Path sourcePath = new Path(SOURCE_PATH) .makeQualified(cluster.getFileSystem()); List<Path> sources = new ArrayList<Path>(); sources.add(sourcePath); Path targetPath = new Path(TARGET_PATH) .makeQualified(cluster.getFileSystem()); DistCpOptions options = new DistCpOptions(sources, targetPath); options.setCopyStrategy(\"dynamic\"); options.setOutPutDirectory(counterOutputPath); options.setAtomicCommit(true); options.setAtomicWorkPath(new Path(\"/work\")); options.setBlocking(false); Job job = new DistCp(configuration, options).execute(); Path workDir = CopyOutputFormat.getWorkingDirectory(job); Path finalDir = CopyOutputFormat.getCommitDirectory(job); while (!job.isComplete()) { if (cluster.getFileSystem().exists(workDir)) { break; } } job.waitForCompletion(true); Assert.assertFalse(cluster.getFileSystem().exists(workDir)); Assert.assertTrue(cluster.getFileSystem().exists(finalDir)); verifyResults(); } catch (Exception e) { LOG.error(\"Exception encountered\", e); Assert.fail(\"Unexpected exception: \" + e.getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static int getNumberOfDecimalPlaces(BigDecimal bigDecimal) { return Math.max(0, bigDecimal.stripTrailingZeros().scale()); }### Assistant: @Test public void verifyGetNumberOfDecimalPlacesWorksCorrectly() { assertThat(ConfigUtil.getNumberOfDecimalPlaces(new BigDecimal(\"0.001\")), is(3)); assertThat(ConfigUtil.getNumberOfDecimalPlaces(new BigDecimal(\"0.01\")), is(2)); assertThat(ConfigUtil.getNumberOfDecimalPlaces(new BigDecimal(\"0.1\")), is(1)); assertThat(ConfigUtil.getNumberOfDecimalPlaces(new BigDecimal(\"1.000\")), is(0)); assertThat(ConfigUtil.getNumberOfDecimalPlaces(new BigDecimal(\"1.00\")), is(0)); assertThat(ConfigUtil.getNumberOfDecimalPlaces(new BigDecimal(\"1.0\")), is(0)); assertThat(ConfigUtil.getNumberOfDecimalPlaces(BigDecimal.ONE), is(0)); assertThat(ConfigUtil.getNumberOfDecimalPlaces(new BigDecimal(\"10\")), is(0)); assertThat(ConfigUtil.getNumberOfDecimalPlaces(new BigDecimal(\"100\")), is(0)); assertThat(ConfigUtil.getNumberOfDecimalPlaces(new BigDecimal(\"100.1\")), is(1)); assertThat(ConfigUtil.getNumberOfDecimalPlaces(new BigDecimal(\"100.01\")), is(2)); assertThat(ConfigUtil.getNumberOfDecimalPlaces(new BigDecimal(\"100.001\")), is(3)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static AlgoOperator createOp(String name, IOType type, Params parameter) throws Exception { Wrapper<AlgoOperator> op = IO_OP_CLASSES.get(name, type); Preconditions.checkArgument(op != null, \"No OP named %s has IOType: %s\", name, type); return op.clazz.getConstructor(Params.class).newInstance(parameter); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testCreateOpError1() throws Exception { AnnotationUtils.createOp(\"test_fake_op_1\", IOType.SinkBatch, new Params()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Mono<StageLocation> getLocation(final String documentId, final DocumentType documentType) { return Mono.fromSupplier(() -> Path.of(stageConfigurationProperties.getLocation(), buildFileName(documentId, documentType))) .map(path -> StageLocation.builder() .path(path) .build() ); }### Assistant: @Test void testGetLocation() { when(stageConfigurationProperties.getLocation()) .thenReturn(\"testlocation\"); final StageLocation result = underTest.getLocation(TEST_DOCUMENT_ID, DocumentType.PDF) .block(); assertThat(result.getPath().toString(), is(TEST_LOCATION + FileSystems.getDefault().getSeparator() + TEST_DOCUMENT_ID + \".pdf\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Event> getEventsBeforeDate(final Date date, final int pageSize) { final PageRequest pageRequest = PageRequest.of(0, pageSize, Sort.Direction.DESC, \"id\"); final Slice<Event> slice = this.eventRepository.findByDateTimeBefore(date, pageRequest); final List<Event> events = slice.getContent(); LOGGER.info(\"Found {} events with date time before {}.\", events.size(), date); return events; }### Assistant: @Test public void serviceReturnsOneEvent() { final Slice<Event> mockSlice = this.mockSliceOfEvents(1); final PageRequest pageRequest = PageRequest.of(0, 10, Sort.Direction.DESC, \"id\"); Mockito.when(this.eventRepository.findByDateTimeBefore(this.now, pageRequest)).thenReturn(mockSlice); final List<Event> events = this.transactionalEventService.getEventsBeforeDate(this.now, 10); assertThat(events.size()).isEqualTo(1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @EventListener public synchronized void handleLocationDeleted(AfterLocationDeleted event) { GetMultipleDataResult<ServiceResource> serviceResourceResult = alienDAO.buildQuery(ServiceResource.class) .setFilters(singleKeyFilter(\"locationIds\", event.getLocationId())).prepareSearch().search(0, Integer.MAX_VALUE); if (serviceResourceResult.getData() == null) { return; } for (ServiceResource serviceResource : serviceResourceResult.getData()) { Set<String> locations = CollectionUtils.safeNewHashSet(serviceResource.getLocationIds()); locations.remove(event.getLocationId()); serviceResource.setLocationIds(locations.toArray(new String[locations.size()])); } alienDAO.save(serviceResourceResult.getData()); }### Assistant: @Test public void testHandleLocationDeleted() { ServiceResource serviceResource = new ServiceResource(); serviceResource.setId(\"service1\"); serviceResource.setLocationIds(new String[] { \"location1\", \"location2\" }); alienDao.save(serviceResource); serviceResourceService.handleLocationDeleted(new AfterLocationDeleted(this, \"location3\")); serviceResource = serviceResourceService.getOrFail(\"service1\"); Assert.assertArrayEquals(new String[] { \"location1\", \"location2\" }, serviceResource.getLocationIds()); serviceResourceService.handleLocationDeleted(new AfterLocationDeleted(this, \"location1\")); serviceResource = serviceResourceService.getOrFail(\"service1\"); Assert.assertArrayEquals(new String[] { \"location2\" }, serviceResource.getLocationIds()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String write(Boolean value) { return Boolean.TRUE.equals(value) ? trueVal : falseVal; }### Assistant: @Test public void shouldWriteFalseAsMyFalse(){ assertEquals(\"myFalse\", toTest.write(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getScale() { return scale; }### Assistant: @Test public void testGetScale() { list1.addValue(-1L, 10F); list1.addValue(-2L, -3F); list1.addValue(30L, 3F); list1.addValue(2L, -100F); list1.addValue(31L, -102F); assertEquals(10L, list1.getXScale(3).longValue()); assertEquals(6L, list1.getXScale(5).longValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<EnumRow> fromString( final String content ) { final List<EnumRow> enums = new ArrayList<EnumRow>(); if ( content == null || content.isEmpty() ) { return enums; } else { final String[] lines = content.split( \"\\\\n\" ); for ( int i = 0; i < lines.length; i++ ) { final String line = lines[ i ].trim(); final EnumRow er = parseEnum( line ); if ( er != null ) { enums.add( er ); } } } return enums; }### Assistant: @Test public void testFromStringMissingContext() { final String content = \"Fact.field' :\"; final List<EnumRow> enums = EnumParser.fromString( content ); assertFalse( enums.isEmpty() ); assertEquals( \"Fact.field' :\", enums.get( 0 ).getRaw() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final void produce(final DataStreamChannel channel) throws IOException { synchronized (bytebuf) { if (state == State.ACTIVE) { produceData(new StreamChannel<ByteBuffer>() { @Override public int write(final ByteBuffer src) throws IOException { Args.notNull(src, \"Buffer\"); synchronized (bytebuf) { return writeData(channel, src); } } @Override public void endStream() throws IOException { synchronized (bytebuf) { streamEnd(channel); } } }); } if (state == State.FLUSHING) { flush(channel); if (bytebuf.position() == 0) { state = State.END_STREAM; channel.endStream(); } } } }### Assistant: @Test public void testProduceDataWithBuffering2() throws Exception { final AsyncEntityProducer producer = new ChunkByteAsyncEntityProducer( 5, ContentType.TEXT_PLAIN, new byte[] { '1' }, new byte[] { '2' }, new byte[] { '3' }, new byte[] { '4', '5' }, new byte[] { '6' }, new byte[] { '7', '8' }, new byte[] { '9', '0' }); final WritableByteChannelMock byteChannel = new WritableByteChannelMock(1024); final DataStreamChannel streamChannel = new BasicDataStreamChannel(byteChannel); producer.produce(streamChannel); Assert.assertTrue(byteChannel.isOpen()); Assert.assertEquals(\"\", byteChannel.dump(StandardCharsets.US_ASCII)); producer.produce(streamChannel); Assert.assertTrue(byteChannel.isOpen()); Assert.assertEquals(\"\", byteChannel.dump(StandardCharsets.US_ASCII)); producer.produce(streamChannel); Assert.assertTrue(byteChannel.isOpen()); Assert.assertEquals(\"\", byteChannel.dump(StandardCharsets.US_ASCII)); producer.produce(streamChannel); Assert.assertTrue(byteChannel.isOpen()); Assert.assertEquals(\"12345\", byteChannel.dump(StandardCharsets.US_ASCII)); producer.produce(streamChannel); Assert.assertTrue(byteChannel.isOpen()); Assert.assertEquals(\"\", byteChannel.dump(StandardCharsets.US_ASCII)); producer.produce(streamChannel); Assert.assertTrue(byteChannel.isOpen()); Assert.assertEquals(\"\", byteChannel.dump(StandardCharsets.US_ASCII)); producer.produce(streamChannel); Assert.assertFalse(byteChannel.isOpen()); Assert.assertEquals(\"67890\", byteChannel.dump(StandardCharsets.US_ASCII)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void setParameters(Query query, Object value) { operator.setParameters(query, name, value, path.getJavaType()); }### Assistant: @Test public void shouldSetParametersForLikeQuery() { Condition condition = new Condition(\"key\", Operator.like, \"value\"); condition.setPath(path); condition.setParameters(query, \"value\"); verify(query).setParameter(\"key\", \"value\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getProxyTicket(String service) { Assert.hasText(service, \"service cannot not be null or blank\"); Assertion assertion = assertionProvider.getAssertion(); AttributePrincipal principal = assertion.getPrincipal(); if (principal == null) { throw new IllegalStateException(String.format(EXCEPTION_MESSAGE, AttributePrincipal.class.getSimpleName())); } return principal.getProxyTicketFor(service); }### Assistant: @Test public void getProxyTicket_NullAttributePrincipal_IllegalStateException() { String service = \"http: Assertion assertion = mock(Assertion.class); when(assertionProvider.getAssertion()).thenReturn(assertion); when(assertion.getPrincipal()).thenReturn(null); assertThatThrownBy(() -> proxyTicketProvider.getProxyTicket(service)) .isInstanceOf(IllegalStateException.class) .hasMessage(\"Unable to provide a proxy ticket with null %s\", AttributePrincipal.class.getSimpleName()); verify(assertionProvider, times(1)).getAssertion(); verify(assertion, times(1)).getPrincipal(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public ViewController findController(String id) { return isSameId(id) ? this : null; }### Assistant: @Test public void findControllerById_SelfOrNull() { assertThat(uut.findController(\"456\")).isNull(); assertThat(uut.findController(\"uut\")).isEqualTo(uut); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings({\"unchecked\"}) public static Reader createReader(String readerSpec, String sensorName) { Assert.argument(readerSpec != null, \"readerSpec == null\"); Assert.argument(sensorName != null, \"sensorName == null\"); return createReader(readerSpec, sensorName, null); }### Assistant: @Test public void testCreateProductReader() throws Exception { final Reader reader = ReaderFactory.createReader(\"ProductReader\", \"\"); assertNotNull(reader); assertTrue(reader instanceof ProductReader); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public static String getDisplayCountry(@Nonnull final String countryISO2) { assert countryISO2 != null; return getDisplayCountry(countryISO2, Locale.ENGLISH); }### Assistant: @Test public void testGetDisplayCountry() { LOG.info(\"testGetDisplayCountry\"); Assert.assertEquals(\"Netherlands\", AddressUtils.getDisplayCountry(\"NL\")); Assert.assertEquals(\"Germany\", AddressUtils.getDisplayCountry(\"DE\")); Assert.assertEquals(\"United Kingdom\", AddressUtils.getDisplayCountry(\"GB\")); Assert.assertEquals(\"\", AddressUtils.getDisplayCountry(\"UK\")); Assert.assertEquals(\"Nederland\", AddressUtils.getDisplayCountry(\"NL\", new Locale(\"NL\"))); Assert.assertEquals(\"Deutschland\", AddressUtils.getDisplayCountry(\"DE\", new Locale(\"DE\"))); Assert.assertEquals(\"United Kingdom\", AddressUtils.getDisplayCountry(\"GB\", new Locale(\"GB\"))); Assert.assertEquals(\"\", AddressUtils.getDisplayCountry(\"UK\", new Locale(\"UK\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @JsonIgnore @Override public ItemIdValue getGlobeItemId() { return ItemIdValueImpl.fromIri(this.value.getGlobe()); }### Assistant: @Test(expected = IllegalArgumentException.class) public void getGlobeItemIdInvalidIri() { c3.getGlobeItemId(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Optional<String> clientCorrelationId() { return getString(metadata, CLIENT_CORRELATION_PATH); }### Assistant: @Test public void shouldReturnClientCorrelationId() throws Exception { assertThat(metadata.clientCorrelationId().isPresent(), is(true)); assertThat(metadata.clientCorrelationId().get(), equalTo(UUID_CLIENT_CORRELATION)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void parse(T type) { var information = environment.resolver.any(type, Information.class); check(information, type); parse(information); }### Assistant: @Test void parse_information() { parser.parse(InformationParserTest.class.getAnnotation(Information.class)); var mappings = environment.mappings; assertArrayEquals(new String[] {\"Pante\"}, (String[]) mappings.get(\"authors\")); assertEquals(\"description\", mappings.get(\"description\")); assertEquals(\"http: assertEquals(\"prefix\", mappings.get(\"prefix\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure public static float getAttributeFloat(Node document, boolean caseSensitive, String... path) { assert document != null : AssertMessages.notNullParameter(0); return getAttributeFloatWithDefault(document, caseSensitive, 0f, path); }### Assistant: @Test public void getAttributeFloatNodeBooleanStringArray() { assertEpsilonEquals(12.56e4f, XMLUtil.getAttributeFloat(this.document, true, \"catalog\", \"book\", \"description\", \"number1\")); assertEpsilonEquals(0.f, XMLUtil.getAttributeFloat(this.document, true, \"catalog\", \"book\", \"description\", \"Number1\")); assertEpsilonEquals(12.56e4f, XMLUtil.getAttributeFloat(this.document, false, \"catalog\", \"book\", \"description\", \"number1\")); assertEpsilonEquals(12.56e4f, XMLUtil.getAttributeFloat(this.document, false, \"catalog\", \"book\", \"description\", \"Number1\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Object put(String key, Object value) { return request.put(key, value); }### Assistant: @Test public void testPutStringObject() { expect(request.put(\"key\", \"value\")).andReturn(\"oldValue\"); replay(request); assertEquals(\"oldValue\", map.put(\"key\", \"value\")); verify(request); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Account authenticate(AuthenticationToken authenticationToken) { readCredentialsFile(); return super.authenticate(authenticationToken); }### Assistant: @Test public void testAuthenticate() { htpasswd.setAllowClearTextPasswords(true); Account account = htpasswd.authenticate(\"user1\", \"pass1\"); assertNotNull(account); assertEquals(\"user1\", account.getUsername()); account = htpasswd.authenticate(\"user2\", \"pass2\"); assertNotNull(account); assertEquals(\"user2\", account.getUsername()); account = htpasswd.authenticate(\"plain\", \"passWord\"); assertNotNull(account); assertEquals(\"plain\", account.getUsername()); htpasswd.setAllowClearTextPasswords(false); account = htpasswd.authenticate(\"crypt\", \"password\"); assertNotNull(account); assertEquals(\"crypt\", account.getUsername()); account = htpasswd.authenticate(\"md5\", \"password\"); assertNotNull(account); assertEquals(\"md5\", account.getUsername()); account = htpasswd.authenticate(\"sha\", \"password\"); assertNotNull(account); assertEquals(\"sha\", account.getUsername()); account = htpasswd.authenticate(\"trailing\", \"whitespace\"); assertNotNull(account); assertEquals(\"trailing\", account.getUsername()); account = htpasswd.authenticate(\"tabbed\", \"frontAndBack\"); assertNotNull(account); assertEquals(\"tabbed\", account.getUsername()); account = htpasswd.authenticate(\"leading\", \"whitespace\"); assertNotNull(account); assertEquals(\"leading\", account.getUsername()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void gatherConfig(Revapi revapi, AnalysisContext.Builder ctxBld) throws MojoExecutionException { if (analysisConfigurationFiles != null && analysisConfigurationFiles.length > 0) { for (Object pathOrConfigFile : analysisConfigurationFiles) { ConfigurationFile configFile; if (pathOrConfigFile instanceof String) { configFile = new ConfigurationFile(); configFile.setPath((String) pathOrConfigFile); } else { configFile = (ConfigurationFile) pathOrConfigFile; } String path = configFile.getPath(); String resource = configFile.getResource(); if (path == null && resource == null) { throw new MojoExecutionException( \"Either 'path' or 'resource' has to be specified in a configurationFile definition.\"); } else if (path != null && resource != null) { throw new MojoExecutionException( \"Either 'path' or 'resource' has to be specified in a configurationFile definition but\" + \" not both.\"); } String readErrorMessage = \"Error while processing the configuration file on \" + (path == null ? \"classpath \" + resource : \"path \" + path); Supplier<Iterator<InputStream>> configFileContents; if (path != null) { File f = new File(path); if (!f.isAbsolute()) { f = new File(relativePathBaseDir, path); } if (!f.isFile() || !f.canRead()) { String message = \"Could not locate analysis configuration file '\" + f.getAbsolutePath() + \"'.\"; if (failOnMissingConfigurationFiles) { throw new MojoExecutionException(message); } else { log.debug(message); continue; } } final File ff = f; configFileContents = () -> { try { return Collections.<InputStream>singletonList(new FileInputStream(ff)).iterator(); } catch (FileNotFoundException e) { throw new IllegalArgumentException(\"Failed to read the configuration file '\" + ff.getAbsolutePath() + \"'.\", e); } }; } else { configFileContents = () -> { try { return Collections.list(getClass().getClassLoader().getResources(resource)) .stream() .map(url -> { try { return url.openStream(); } catch (IOException e) { throw new IllegalArgumentException( \"Failed to read the classpath resource '\" + url + \"'.\"); } }).iterator(); } catch (IOException e) { throw new IllegalArgumentException( \"Failed to locate classpath resources on path '\" + resource + \"'.\"); } }; } Iterator<InputStream> it = configFileContents.get(); List<Integer> nonJsonIndexes = new ArrayList<>(4); int idx = 0; while (it.hasNext()) { ModelNode config; try (InputStream in = it.next()) { config = readJson(in); } catch (IllegalArgumentException | IOException e) { throw new MojoExecutionException(readErrorMessage, e.getCause()); } if (config == null) { nonJsonIndexes.add(idx); continue; } expandVariables(config); mergeJsonConfigFile(ctxBld, configFile, config); idx++; } if (!nonJsonIndexes.isEmpty()) { idx = 0; it = configFileContents.get(); while (it.hasNext()) { try (Reader rdr = new InputStreamReader(it.next())) { if (nonJsonIndexes.contains(idx)) { mergeXmlConfigFile(revapi, ctxBld, configFile, rdr); } } catch (IllegalArgumentException | IOException | XmlPullParserException e) { throw new MojoExecutionException(readErrorMessage, e.getCause()); } idx++; } } } } if (analysisConfiguration != null) { String text = analysisConfiguration.getValue(); if (text == null || text.isEmpty()) { convertNewStyleConfigFromXml(ctxBld, revapi); } else { ctxBld.mergeConfiguration(expandVariables(ModelNode.fromJSONString(JSONUtil.stripComments(text)))); } } }### Assistant: @Test public void testReadingConfigurationFromFile() throws Exception { InputStream data = getClass().getResourceAsStream(\"/test-configuration-file.json\"); assertNotNull(\"Could not read the test configuration file.\", data); File f = File.createTempFile(\"revapi-maven-plugin-test\", null); Files.copy(data, f.toPath(), StandardCopyOption.REPLACE_EXISTING); try { AnalysisConfigurationGatherer gatherer = new AnalysisConfigurationGatherer(null, new Object[] { f.getAbsolutePath() }, false, false, new PropertyValueInterpolator(new Properties()), null, null); Revapi revapi = Revapi.builder() .withFilters(TestExtension.class) .build(); AnalysisContext.Builder ctxBld = AnalysisContext.builder(); gatherer.gatherConfig(revapi, ctxBld); AnalysisContext ctx = ctxBld.build(); ModelNode cfg = ctx.getConfiguration(); String json = \"[{\\\"extension\\\": \\\"test\\\", \\\"configuration\\\": \\\"yes\\\"}]\"; ModelNode expected = ModelNode.fromJSONString(json); assertEquals(expected, cfg); } finally { f.delete(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getIdentifier() { return ID; }### Assistant: @Test void getIdentifier_test(){ CredentialProtectionExtensionAuthenticatorOutput target = new CredentialProtectionExtensionAuthenticatorOutput(CredentialProtectionPolicy.USER_VERIFICATION_OPTIONAL_WITH_CREDENTIAL_ID_LIST); assertThat(target.getIdentifier()).isEqualTo(CredentialProtectionExtensionAuthenticatorOutput.ID); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static FileOutputStream createForWrite(File f, int permissions) throws IOException { if (skipSecurity) { return insecureCreateForWrite(f, permissions); } else { return NativeIO.getCreateForWriteFileOutputStream(f, permissions); } }### Assistant: @Test(timeout = 10000) public void testCreateForWrite() throws IOException { try { SecureIOUtils.createForWrite(testFilePathIs, 0777); fail(\"Was able to create file at \" + testFilePathIs); } catch (SecureIOUtils.AlreadyExistsException aee) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void clearProgress() { if (contextMap != null) { contextMap.remove(attributeName); } }### Assistant: @Test public void testClearProgress() throws Exception { Map<String, Object> contextMap = Maps.newHashMap(); ProgressControl control = new ProgressControl(UPLOAD_ID, 100); control.setContextMap(contextMap); assertNull(contextMap.get(ATTRIBUTE_NAME)); control.advance(50); assertNotNull(contextMap.get(ATTRIBUTE_NAME)); control.clearProgress(); assertNull(contextMap.get(ATTRIBUTE_NAME)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public java.util.Map.Entry<K, V> pollFirstEntry() { long[] stamps = grabAllSegmentWriteLocks(); try { sort(); return sorted.pollFirstEntry(); } finally { releaseSegmentLocks(stamps); } }### Assistant: @Test public void testPollFirstEntry() { IncrementalSortMap<Integer, String> map = map5(); Map.Entry e = map.pollFirstEntry(); assertEquals(one, e.getKey()); assertEquals(\"A\", e.getValue()); e = map.pollFirstEntry(); assertEquals(two, e.getKey()); map.put(one, \"A\"); e = map.pollFirstEntry(); assertEquals(one, e.getKey()); assertEquals(\"A\", e.getValue()); e = map.pollFirstEntry(); assertEquals(three, e.getKey()); map.remove(four); e = map.pollFirstEntry(); assertEquals(five, e.getKey()); try { e.setValue(\"A\"); shouldThrow(); } catch (UnsupportedOperationException success) {} e = map.pollFirstEntry(); assertNull(e); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: String getCreateSql() { String triggerSql = format(CREATE_TRIGGER_TEMPLATE, triggerName, triggerTime, triggerEvent, triggerTable); String mainBody = MAIN_BODY_TEMPLATE .replace(\"{oldJson}\", oldJson()) .replace(\"{newJson}\", newJson()) .replace(\"{tableName}\", triggerTable) .replace(\"{eventType}\", triggerEvent.toString()); return triggerSql.replace(\"{mainBody}\", mainBody); }### Assistant: @Test(groups = SMALL) public void testGetCreateSqlContainsOnlyOldColumnValuesForDelete() { ReactiveTrigger trigger = new ReactiveTrigger(TRIGGER_NAME, TRIGGER_TABLE, DELETE, AFTER, TABLE_COLS); String triggerSql = trigger.getCreateSql(); assertFalse(triggerSql.contains(\"NEW.ID\")); assertFalse(triggerSql.contains(\"NEW.TXT\")); assertTrue(triggerSql.contains(\"OLD.ID\")); assertTrue(triggerSql.contains(\"OLD.TXT\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String resolve(Token token, QueryContext ctx) { if (token.getType() != TokenType.JOINS) { throw new DalRuntimeException(\"Internal error: only JOINS token is supported by \" + getClass()); } switch (ctx.getQuery().getType()) { case SELECT: EntityInfo entityInfo = ctx.getEntityInfo(); SubObjects subobject = entityInfo.getSubobjects(ctx.getReadset()); StringBuilder sb = new StringBuilder(256); if (subobject != null) { String[] names = subobject.value(); for (String name : names) { if (name != null && name.length() > 0) { Relation relation = entityInfo.getRelation(name); if (sb.length() > 0) { sb.append(\" and \"); } sb.append(relation.join()); } } } if (sb.length() == 0) { sb.append(\"1=1\"); } return sb.toString(); case INSERT: throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType()); case UPDATE: throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType()); case DELETE: throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType()); default: throw new DalRuntimeException(\"TABLES token does not support query type: \" + ctx.getQuery().getType()); } }### Assistant: @Test public void testInsert() throws Exception { QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.INSERT, \"<JOINS/>\"); User user = new User(); QueryContext ctx = getSelectContext(query, user, null); try { m_queryResolver.resolve(ctx); Assert.fail(\"DalRuntimeException expected\"); } catch (DalRuntimeException e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @When(\"^SSM block network port (\\\\d+) on (\\\\d+) instances$\") public SSMStepDefinitions blockPort(int portNum, int numHosts) { this.executeCommand(numHosts, Command.BLOCKPORT, String.valueOf(portNum)); executionStateCache.setBlockPort(true); executionStateCache.addPortNum(portNum); return this; }### Assistant: @Test public void testBlockPort() throws Exception { executionStateCache.setInstances(createInstances()); try { ssmStepDefinitions.blockPort(8080, 1); } catch (Throwable t) { } Assert.assertEquals(executionStateCache.getCommandId(), \"1234\"); Assert.assertTrue(executionStateCache.getInstances().size()>0); Assert.assertTrue(executionStateCache.getPortNums().contains(8080)); Assert.assertTrue(executionStateCache.isBlockPort()); Assert.assertTrue(executionStateCache.getSsmCommandInvocationInstances().size() > 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean normalize(IAtomContainer ac, Document doc) throws InvalidSmilesException, CDKException { NodeList nl = doc.getElementsByTagName(\"replace-set\"); SmilesParser sp = new SmilesParser(ac.getBuilder()); boolean change = false; for (int i = 0; i < nl.getLength(); i++) { Element child = (Element) nl.item(i); NodeList replaces = child.getElementsByTagName(\"replace\"); NodeList replacement = child.getElementsByTagName(\"replacement\"); String replacementstring = replacement.item(0).getFirstChild().getNodeValue(); if (replacementstring.indexOf('\\n') > -1 || replacementstring.length() < 1) { replacementstring = replacement.item(0).getFirstChild().getNextSibling().getNodeValue(); } IAtomContainer replacementStructure = sp.parseSmiles(replacementstring); for (int k = 0; k < replaces.getLength(); k++) { Element replace = (Element) replaces.item(k); String replacestring = replace.getFirstChild().getNodeValue(); if (replacestring.indexOf('\\n') > -1 || replacestring.length() < 1) { replacestring = replace.getFirstChild().getNextSibling().getNodeValue(); } IAtomContainer replaceStructure = sp.parseSmiles(replacestring); List<RMap> l = null; UniversalIsomorphismTester universalIsomorphismTester = new UniversalIsomorphismTester(); while ((l = universalIsomorphismTester.getSubgraphMap(ac, replaceStructure)) != null) { List<RMap> l2 = universalIsomorphismTester.makeAtomsMapOfBondsMap(l, ac, replaceStructure); Iterator<RMap> bondit = l.iterator(); while (bondit.hasNext()) { RMap rmap = bondit.next(); IBond acbond = ac.getBond(rmap.getId1()); IBond replacebond = replacementStructure.getBond(rmap.getId2()); acbond.setOrder(replacebond.getOrder()); change = true; } Iterator<RMap> atomit = l2.iterator(); while (atomit.hasNext()) { RMap rmap = atomit.next(); IAtom acatom = ac.getAtom(rmap.getId1()); IAtom replaceatom = replacementStructure.getAtom(rmap.getId2()); acatom.setFormalCharge(replaceatom.getFormalCharge()); change = true; } } } } return (change); }### Assistant: @Test public void testNormalize() throws Exception { IAtomContainer ac = new AtomContainer(); ac.addAtom(new Atom(\"C\")); ac.addAtom(new Atom(\"N\")); ac.addAtom(new Atom(\"O\")); ac.addAtom(new Atom(\"O\")); ac.addBond(new Bond(ac.getAtom(0), ac.getAtom(1))); ac.addBond(new Bond(ac.getAtom(1), ac.getAtom(2), IBond.Order.DOUBLE)); ac.addBond(new Bond(ac.getAtom(1), ac.getAtom(3), IBond.Order.DOUBLE)); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder(); Document doc = db.newDocument(); Element set = doc.createElement(\"replace-set\"); doc.appendChild(set); Element replace = doc.createElement(\"replace\"); set.appendChild(replace); replace.appendChild(doc.createTextNode(\"O=N=O\")); Element replacement = doc.createElement(\"replacement\"); set.appendChild(replacement); replacement.appendChild(doc.createTextNode(\"[O-][N+]=O\")); Normalizer.normalize(ac, doc); Assert.assertTrue(ac.getBond(1).getOrder() == IBond.Order.SINGLE ^ ac.getBond(2).getOrder() == IBond.Order.SINGLE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <K, V> Map<K, V> getOrderedMap() { return new LinkedHashMap<>(); }### Assistant: @Test void getOrderedMap() { Map<Double, Integer> result = this.tool.getOrderedMap(); assertNotNull(result, \"Returned null instead of a map\"); assertTrue(result.isEmpty(), \"Returned map wasn't initially empty\"); Random r = new Random(); for (int i = 0; i < 100; ++i) { result.put(r.nextDouble(), i); } int i = 0; for (Map.Entry<Double, Integer> e : result.entrySet()) { assertEquals(i++, e.getValue().intValue(), \"Map doesn't preserve the insertion order\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected String doInBackground(Void... params) { String resourceXml = null; try { resourceXml = getXml(mapName); parseBoundingBox(resourceXml); parseZoomLevels(resourceXml); publishResourceData(); } catch (IOException e) { Log.e(TAG, \"Failed to download tileMapResource.xml: \" + e); success = false; } catch (NicException e) { Log.e(TAG, \"Failed to download tileMapResource.xml: \" + e); success = false; } success = true; return resourceXml; }### Assistant: @Test public void testEmptyXMLMapView() throws NicException, IOException { when(clientMock.getTilemapresourceXml(\"myMap\")).thenReturn(\"\"); DownloadMapResourceTask task = new DownloadMapResourceTask(null, clientMock, mapViewMock, \"myMap\"); task.doInBackground(); verifyZeroInteractions(mapViewMock); verifyZeroInteractions(indoorMapMock); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void init(TimeFrame tf, Command onChangeCommand) { this.onChangeCommand = onChangeCommand; this.timeFrame = tf != null ? tf : TimeFrame.parse(\"begin[year] till end[year]\"); this.fromEditor = beanManager.lookupBean(TimeInstantEditor.class).newInstance(); this.fromEditor.init(timeFrame.getFrom(), new Command() { public void execute() { fromEditor.getTimeInstant().setFirstMonthOfYear(getFirstMonthOfYear()); timeFrame.setFrom(fromEditor.getTimeInstant()); changeFirstMonthAvailability(); fireChanges(); } }); this.toEditor = beanManager.lookupBean(TimeInstantEditor.class).newInstance(); this.toEditor.init(timeFrame.getTo(), new Command() { public void execute() { toEditor.getTimeInstant().setFirstMonthOfYear(getFirstMonthOfYear()); timeFrame.setTo(toEditor.getTimeInstant()); changeFirstMonthAvailability(); fireChanges(); } }); view.init(this); initFirstMonthSelector(); changeFirstMonthAvailability(); }### Assistant: @Test public void testChangeTimeAmountType() { TimeFrame timeFrame = TimeFrame.parse(\"now -1year till now\"); timeFrameEditor.init(timeFrame, changeCommand); when(timeAmountView.getSelectedTypeIndex()).thenReturn(3); fromAmountEditor.changeIntervalType(); DateIntervalType type = timeFrame.getFrom().getTimeAmount().getType(); verify(changeCommand).execute(); assertEquals(type, DateIntervalType.DAY); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute(GetMapConfigurationRequest request, GetMapConfigurationResponse response) throws Exception { if (null == request.getApplicationId()) { throw new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"applicationId\"); } String mapId = request.getMapId(); if (null == mapId) { throw new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"mapId\"); } ClientApplicationInfo application = context.getBean(request.getApplicationId(), ClientApplicationInfo.class); for (ClientMapInfo map : application.getMaps()) { if (mapId.equals(map.getId())) { response.setMapInfo(securityClone(map)); } } if (response.getMapInfo() == null) { throw new GeomajasException(ExceptionCode.MAP_NOT_FOUND, request.getMapId(), request.getApplicationId()); } }### Assistant: @Test public void testServerSideOnlyInfo() throws Exception { GetMapConfigurationRequest request = new GetMapConfigurationRequest(); request.setApplicationId(\"appServerSideOnly\"); request.setMapId(\"mapServerSideOnly\"); GetMapConfigurationResponse response = (GetMapConfigurationResponse) dispatcher.execute( GetMapConfigurationRequest.COMMAND, request, null, \"en\"); if (response.isError()) { response.getErrors().get(0).printStackTrace(); } Assert.assertFalse(response.isError()); ClientMapInfo mapInfo = response.getMapInfo(); Assert.assertNotNull(mapInfo); ClientUserDataInfo info = mapInfo.getUserData(); Assert.assertNull(info); Assert.assertNotNull(mapInfo.getWidgetInfo()); Assert.assertNull(mapInfo.getWidgetInfo(\"appDummy\")); Assert.assertNotNull(mapInfo.getWidgetInfo(\"layerTree\")); Assert.assertNull(mapInfo.getWidgetInfo(\"mapDummy\")); Assert.assertEquals(BoundsLimitOption.COMPLETELY_WITHIN_MAX_BOUNDS, mapInfo.getViewBoundsLimitOption()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setTessdataPath(String tessdataPath) { tessdataPath = FilenameUtils.normalize(tessdataPath); if (!tessdataPath.isEmpty() && !tessdataPath.endsWith(File.separator)) tessdataPath += File.separator; this.tessdataPath = tessdataPath; }### Assistant: @Test(expected=IllegalArgumentException.class) public void testDataPathCheck() { TesseractOCRConfig config = new TesseractOCRConfig(); config.setTessdataPath(\"blah\\u0000deblah\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String oneAdder (String operand) { if (operand.indexOf(\"0\")==-1){ return ALU.repeatedString(\"0\", operand.length()+1); } char rightmostBit = charOp(booleanXOR, operand.charAt(operand.length()-1), '1'); char carry = operand.charAt(operand.length()-1); StringBuilder result = new StringBuilder(String.valueOf(rightmostBit)); for(int i=operand.length()-2;i>=0;i--){ result.append(charOp(booleanXOR, operand.charAt(i), carry)); carry = charOp(booleanAnd, operand.charAt(i), carry); } boolean isOverflow = charOp(booleanXOR, operand.charAt(0), result.charAt(result.length()-1)) == '1'; result.append(isOverflow?\"1\":\"0\"); result.reverse(); return result.toString(); }### Assistant: @Test public void testOneAdder1(){ assertEquals(\"010011011\",ALU.oneAdder(\"10011010\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean finishAndReleaseAll() { return finish(true); }### Assistant: @Test public void testFinishAndReleaseAll() { ByteBuf in = Unpooled.buffer(); ByteBuf out = Unpooled.buffer(); try { EmbeddedChannel channel = new EmbeddedChannel(); assertTrue(channel.writeInbound(in)); assertEquals(1, in.refCnt()); assertTrue(channel.writeOutbound(out)); assertEquals(1, out.refCnt()); assertTrue(channel.finishAndReleaseAll()); assertEquals(0, in.refCnt()); assertEquals(0, out.refCnt()); assertNull(channel.readInbound()); assertNull(channel.readOutbound()); } finally { release(in, out); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<IndexVolume> getAll() { return JooqUtil.contextResult(indexDbConnProvider, context -> context .select() .from(INDEX_VOLUME) .fetch() .map(RECORD_TO_INDEX_VOLUME_MAPPER::apply)); }### Assistant: @Test void testGetAll() { final var indexVolumeGroup01 = createGroup(TestData.createVolumeGroupName()); final var indexVolumeGroup02 = createGroup(TestData.createVolumeGroupName()); final var indexVolumeGroup03 = createGroup(TestData.createVolumeGroupName()); createVolume(indexVolumeGroup01.getId()); createVolume(indexVolumeGroup01.getId()); createVolume(indexVolumeGroup02.getId()); createVolume(indexVolumeGroup02.getId()); createVolume(indexVolumeGroup02.getId()); createVolume(indexVolumeGroup02.getId()); createVolume(indexVolumeGroup03.getId()); final var indexVolumes = indexVolumeDao.getAll(); BiConsumer<Integer, Integer> checkTheNewVolumeExists = (id, expectedCount) -> { final var foundIndexVolumesForGroup = indexVolumes.stream() .filter(indexVolume -> indexVolume.getIndexVolumeGroupId().equals(id)).collect(Collectors.toList()); assertThat(foundIndexVolumesForGroup.size()).isEqualTo(expectedCount); }; checkTheNewVolumeExists.accept(indexVolumeGroup01.getId(), 2); checkTheNewVolumeExists.accept(indexVolumeGroup02.getId(), 4); checkTheNewVolumeExists.accept(indexVolumeGroup03.getId(), 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ConsentDto makeConsentDto() { return new ConsentDto(); }### Assistant: @Test public void testMakeConsentDto_return_correct_class() { Object object = cst.makeConsentDto(); assertEquals(\"gov.samhsa.consent2share.service.dto.ConsentDto\", object .getClass().getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public double getValue(final int index) { return this.internalVector.get(index); }### Assistant: @Test public void testGetValue() { double expectedValue = 2; double[] data = { 2, 2 }; IVector vector = new DenseDoubleVector(data); assertEquals(expectedValue, vector.getValue(0), DOUBLE_COMPARISON_DELTA); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void ensureIndexes() { TableDescription desc = getTable().describe(); List<AttributeDefinition> actualAttribs = desc.getAttributeDefinitions(); List<GlobalSecondaryIndexDescription> actualIndexes = desc.getGlobalSecondaryIndexes(); List<AttributeDefinition> desiredAttribs = getAttributeDefinitions(); List<GlobalSecondaryIndex> desiredIndexes = getGlobalSecondaryIndexes(); for (GlobalSecondaryIndex index : desiredIndexes) { if (!checkIndex(actualIndexes, index)) { CreateGlobalSecondaryIndexAction create = new CreateGlobalSecondaryIndexAction() .withIndexName(index.getIndexName()) .withKeySchema(index.getKeySchema()) .withProvisionedThroughput(index.getProvisionedThroughput()) .withProjection(index.getProjection()); AttributeDefinition attrHash = getAttribute(desiredAttribs, index.getKeySchema(), KeyType.HASH); AttributeDefinition attrRange = getAttribute(desiredAttribs, index.getKeySchema(), KeyType.RANGE); Index created; if (attrRange == null) { created = getTable().createGSI(create, attrHash); } else { created = getTable().createGSI(create, attrHash, attrRange); } try { created.waitForActive(); } catch (InterruptedException e) { LOGGER.warn(\"InterruptedException while waiting for index creation: \" + created, e); } } } }### Assistant: @Test public void testEnsureIndexes() throws Exception { dao.ensureIndexes(); Index index = dao.getTable().getIndex(\"orgId_createAt\"); assertNotNull(index); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting int comparePluginsByDependencyGraph(Class<? extends Plugin> p1, Class<? extends Plugin> p2) { if (requires(p1, p2)) { if (requires(p2, p1)) { throw new IllegalStateException( \"Cyclical dependency detected! \" + p1.getName() + \" <-> \" + p2.getName()); } return 1; } else if (requires(p2, p1)) { return -1; } else { return 0; } }### Assistant: @Test public void testOrderPluginsNoDependencies() { assertEquals(0, loader.comparePluginsByDependencyGraph(MockPlugin.class, NewerVersionPlugin.class)); assertEquals(0, loader.comparePluginsByDependencyGraph(NewerVersionPlugin.class, MockPlugin.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String parse(String text) { StringBundler sb = new StringBundler(); List<BBCodeItem> bbCodeItems = _bbCodeParser.parse(text); Stack<String> tags = new Stack<>(); IntegerWrapper marker = new IntegerWrapper(); for (; marker.getValue() < bbCodeItems.size(); marker.increment()) { BBCodeItem bbCodeItem = bbCodeItems.get(marker.getValue()); int type = bbCodeItem.getType(); if (type == BBCodeParser.TYPE_DATA) { handleData(sb, bbCodeItems, tags, marker, bbCodeItem); } else if (type == BBCodeParser.TYPE_TAG_END) { handleTagEnd(sb, tags); } else if (type == BBCodeParser.TYPE_TAG_START) { handleTagStart(sb, bbCodeItems, tags, marker, bbCodeItem); } } return sb.toString(); }### Assistant: @Test public void testUnorderedList() { String expected = \"<ul style=\\\"list-style: circle outside;\\\">\" + \"<li>line1</li><li>line2</li></ul>\"; String actual = _htmlBBCodeTranslatorImpl.parse( \"[list type=\\\"circle\\\"][*]line1[*]line2[/list]\"); Assert.assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"resource\") @Override public TextIndex open(Assembler a, Resource root, Mode mode) { try { if ( !GraphUtils.exactlyOneProperty(root, pDirectory) ) throw new TextIndexException(\"No 'text:directory' property on \" + root) ; Directory directory ; RDFNode n = root.getProperty(pDirectory).getObject() ; if ( n.isLiteral() ) { String literalValue = n.asLiteral().getLexicalForm() ; if (literalValue.equals(\"mem\")) { directory = new ByteBuffersDirectory() ; } else { File dir = new File(literalValue) ; directory = FSDirectory.open(dir.toPath()) ; } } else { Resource x = n.asResource() ; String path = IRILib.IRIToFilename(x.getURI()) ; File dir = new File(path) ; directory = FSDirectory.open(dir.toPath()) ; } String queryParser = null; Statement queryParserStatement = root.getProperty(pQueryParser); if (null != queryParserStatement) { RDFNode qpNode = queryParserStatement.getObject(); if (! qpNode.isResource()) { throw new TextIndexException(\"Text query parser property is not a resource : \" + qpNode); } Resource parserResource = (Resource) qpNode; queryParser = parserResource.getLocalName(); } boolean isMultilingualSupport = false; Statement mlSupportStatement = root.getProperty(pMultilingualSupport); if (null != mlSupportStatement) { RDFNode mlsNode = mlSupportStatement.getObject(); if (! mlsNode.isLiteral()) { throw new TextIndexException(\"text:multilingualSupport property must be a boolean : \" + mlsNode); } isMultilingualSupport = mlsNode.asLiteral().getBoolean(); } int maxBasicQueries = 1024; Statement maxBasicQueriesStatement = root.getProperty(pMaxBasicQueries); if (null != maxBasicQueriesStatement) { RDFNode mbqNode = maxBasicQueriesStatement.getObject(); if (! mbqNode.isLiteral()) { throw new TextIndexException(\"text:maxBasicQueries property must be a int : \" + mbqNode); } try { maxBasicQueries = mbqNode.asLiteral().getInt(); } catch (RuntimeException ex) { throw new TextIndexException(\"text:maxBasicQueries property must be a int : \" + mbqNode+ \"(\"+ex.getMessage()+\")\"); } } Statement propListsStmt = root.getProperty(pPropLists); if (null != propListsStmt) { RDFNode aNode = propListsStmt.getObject(); if (! aNode.isResource()) { throw new TextIndexException(\"text:propLists property is not a resource (list) : \" + aNode); } PropListsAssembler.open(a, (Resource) aNode); } Statement defAnalyzersStatement = root.getProperty(pDefAnalyzers); if (null != defAnalyzersStatement) { RDFNode aNode = defAnalyzersStatement.getObject(); if (! aNode.isResource()) { throw new TextIndexException(\"text:defineAnalyzers property is not a resource (list) : \" + aNode); } DefineFiltersAssembler.open(a, (Resource) aNode); DefineTokenizersAssembler.open(a, (Resource) aNode); boolean addedLangs = DefineAnalyzersAssembler.open(a, (Resource) aNode); if (addedLangs) { if (!isMultilingualSupport) { Log.warn(this, \"Multilingual support implicitly enabled by text:defineAnalyzers\"); } isMultilingualSupport = true; } } Analyzer analyzer = null; Statement analyzerStatement = root.getProperty(pAnalyzer); if (null != analyzerStatement) { RDFNode aNode = analyzerStatement.getObject(); if (! aNode.isResource()) { throw new TextIndexException(\"Text analyzer property is not a resource : \" + aNode); } Resource analyzerResource = (Resource) aNode; analyzer = (Analyzer) a.open(analyzerResource); } Analyzer queryAnalyzer = null; Statement queryAnalyzerStatement = root.getProperty(pQueryAnalyzer); if (null != queryAnalyzerStatement) { RDFNode qaNode = queryAnalyzerStatement.getObject(); if (! qaNode.isResource()) { throw new TextIndexException(\"Text query analyzer property is not a resource : \" + qaNode); } Resource analyzerResource = (Resource) qaNode; queryAnalyzer = (Analyzer) a.open(analyzerResource); } boolean storeValues = false; Statement storeValuesStatement = root.getProperty(pStoreValues); if (null != storeValuesStatement) { RDFNode svNode = storeValuesStatement.getObject(); if (! svNode.isLiteral()) { throw new TextIndexException(\"text:storeValues property must be a boolean : \" + svNode); } storeValues = svNode.asLiteral().getBoolean(); } boolean ignoreIndexErrs = false; Statement ignoreIndexErrsStatement = root.getProperty(pIgnoreIndexErrors); if (null != ignoreIndexErrsStatement) { RDFNode iieNode = ignoreIndexErrsStatement.getObject(); if (! iieNode.isLiteral()) { throw new TextIndexException(\"text:ignoreIndexErrors property must be a boolean : \" + iieNode); } ignoreIndexErrs = iieNode.asLiteral().getBoolean(); } boolean cacheQueries = true; Statement cacheQueriesStatement = root.getProperty(pCacheQueries); if (null != cacheQueriesStatement) { RDFNode cqNode = cacheQueriesStatement.getObject(); if (! cqNode.isLiteral()) { throw new TextIndexException(\"text:cacheQueries property must be a boolean : \" + cqNode); } cacheQueries = cqNode.asLiteral().getBoolean(); } Resource r = GraphUtils.getResourceValue(root, pEntityMap) ; EntityDefinition docDef = (EntityDefinition)a.open(r) ; TextIndexConfig config = new TextIndexConfig(docDef); config.setAnalyzer(analyzer); config.setQueryAnalyzer(queryAnalyzer); config.setQueryParser(queryParser); config.setMultilingualSupport(isMultilingualSupport); config.setMaxBasicQueries(maxBasicQueries); config.setValueStored(storeValues); config.setIgnoreIndexErrors(ignoreIndexErrs); docDef.setCacheQueries(cacheQueries); return TextDatasetFactory.createLuceneIndex(directory, config) ; } catch (IOException e) { IO.exception(e) ; return null ; } }### Assistant: @Test public void testLiteralDirectory() { TextIndexLuceneAssembler assembler = new TextIndexLuceneAssembler(); Resource root = SIMPLE_INDEX_SPEC_LITERAL_DIR; Assembler a = Assembler.general; TextIndexLucene index = (TextIndexLucene)assembler.open(a, root, null); try { assertNotNull(index); } finally { index.close(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String setParams(String soql) { String result = soql; for (Object param : getParameters()) { String paramRepresentation = convertToSoqlParam(param); result = result.replaceFirst(\"\\\\?\", paramRepresentation); } return result; }### Assistant: @Test public void testSetParams() { ForcePreparedStatement statement = new ForcePreparedStatement(null, \"\"); String query = \"SELECT Something FROM Anything WERE name = ? AND age > ?\"; statement.addParameter(1, \"one\"); statement.addParameter(2, 123); String actual = statement.setParams(query); assertEquals(\"SELECT Something FROM Anything WERE name = 'one' AND age > 123\", actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> T resolve( final UnitOfWork transaction, final Object object, final Class<T> resolvedClass ) throws KException { ArgCheck.isNotNull( transaction, \"transaction\" ); ArgCheck.isTrue( ( transaction.getState() == org.komodo.spi.repository.Repository.UnitOfWork.State.NOT_STARTED ), \"transaction state is not NOT_STARTED\" ); AdapterFactory adapter = new AdapterFactory( ); T kobject = adapter.adapt(transaction, object, resolvedClass); return kobject; }### Assistant: @Test public void shouldResolveTable() throws Exception { final Table table = createTable(); final KomodoObject kobject = new ObjectImpl(_repo, table.getAbsolutePath(), table.getIndex()); assertThat(this.wsMgr.resolve(getTransaction(), kobject, Table.class), is(instanceOf(Table.class))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<ParameterEntry> list(QueryRunner queryRunner, JdbcParameter parameter, ParameterEntriesFilter filters) { SelectQuery query = QueryFactory.selectAll().from(configuration.parameterEntryEntityName()) .where(\"fk_parameter = :parameterId\") .withArgument(\"parameterId\", parameter.getId()); int maxDistinctLevels = configuration.levelColumnCount(); int levelIndex = 0; for (Level level : parameter.getLevels()) { if (levelIndex >= maxDistinctLevels) { break; } if (filters.hasFilter(level.getName())) { LevelFilter filter = filters.levelFilter(level.getName()); query.append(\" and (upper(\" + level(levelIndex) + \")\").append(levelSearchCondition(filter, levelIndex)).append(\")\"); query.withArgument(level(levelIndex), FilterConverter.parseAntMatcher(filter.value())); } levelIndex++; } Map<String, Integer> levelIndexMap = createLevelIndex(parameter); for (LevelSorting levelSorting : filters.sorting()) { if (levelIndexMap.containsKey(levelSorting.level())) { levelIndex = levelIndexMap.get(levelSorting.level()); if(levelIndex < maxDistinctLevels) { query.orderBy(level(levelIndex), parseSortOrder(levelSorting.direction())); } } } if (filters.applyPaging()) { query.limit(filters.pageSize(), filters.offset()); } else if (filters.applyLimits()) { query.limit(filters.pageSize()); } return queryRunner.queryList(query, new ParameterEntryMapper(configuration)); }### Assistant: @Test public void shouldSelectEntriesWithGivenOffset() { database().withParameter(\"parameter\").withParameterEntries(\"parameter\", 9).build(); ParameterEntryDAO parameterEntryDAO = get(ParameterEntryDAO.class); QueryRunner runner = queryRunner(); JdbcParameter parameter = get(ParameterDAO.class).getParameter(runner, \"parameter\"); List<ParameterEntry> entries = parameterEntryDAO.list(runner, parameter, new ParameterEntriesFilter(1, 5)); runner.close(); assertThat(entries).hasSize(4); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected int getYinTMSFormat(final int zoom, final int y) { final int reverseY = (1 << zoom) - y - 1; return reverseY; }### Assistant: @Test public void getY_TMS() { assertEquals(0, toTest.getYinTMSFormat(0, 0)); assertEquals(63, toTest.getYinTMSFormat(6, 0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean shouldOverwrite() { return overwrite; }### Assistant: @Test public void testSetOverwrite() { final DistCpOptions.Builder builder = new DistCpOptions.Builder( Collections.singletonList(new Path(\"hdfs: new Path(\"hdfs: Assert.assertFalse(builder.build().shouldOverwrite()); builder.withOverwrite(true); Assert.assertTrue(builder.build().shouldOverwrite()); try { builder.withSyncFolder(true).build(); Assert.fail(\"Update and overwrite aren't allowed together\"); } catch (IllegalArgumentException ignore) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FEELFnResult<Object> invoke(@ParameterName(\"list\") List list) { if ( list == null || list.isEmpty() ) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"cannot be null or empty\")); } else { try { return FEELFnResult.ofResult(Collections.max(list, new InterceptNotComparableComparator())); } catch (ClassCastException e) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"contains items that are not comparable\")); } } }### Assistant: @Test public void invokeListOfIntegers() { FunctionTestUtil.assertResult(maxFunction.invoke(Collections.singletonList(1)), 1); FunctionTestUtil.assertResult(maxFunction.invoke(Arrays.asList(1, 2, 3)), 3); FunctionTestUtil.assertResult(maxFunction.invoke(Arrays.asList(1, 3, 2)), 3); FunctionTestUtil.assertResult(maxFunction.invoke(Arrays.asList(3, 1, 2)), 3); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void close() throws DocumentException, IOException { if (stamper.closed) return; if (!hasSignature) { mergeVerification(); stamper.close(moreInfo); } else { throw new DocumentException(\"Signature defined. Must be closed in PdfSignatureAppearance.\"); } }### Assistant: @Test public void setPageContentTest01() throws IOException, DocumentException, InterruptedException { String outPdf = DEST_FOLDER + \"out1.pdf\"; String testFile = RESOURCE_FOLDER + \"in.pdf\"; PdfReader reader = new PdfReader(testFile); PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(outPdf)); reader.eliminateSharedStreams(); int total = reader.getNumberOfPages() + 1; for (int i = 1; i < total; i++) { byte[] bb = reader.getPageContent(i); reader.setPageContent(i, bb); } stamper.close(); Assert.assertNull(new CompareTool().compareByContent(outPdf, RESOURCE_FOLDER + \"cmp_out1.pdf\", DEST_FOLDER, \"diff_\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static JBBPCompiledBlock compile(final String script) throws IOException { return compile(script, null); }### Assistant: @Test public void testCompile_SingleAlignFieldWithValue() throws Exception { final byte[] compiled = JBBPCompiler.compile(\"align:9;\").getCompiledData(); assertEquals(2, compiled.length); assertEquals(JBBPCompiler.CODE_ALIGN, compiled[0]); assertEquals(9, compiled[1]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void alterTable(String tableName, Schema schema, int version) throws MetaStoreException { try { Table table = metaStoreClient.getTable(databaseName, tableName); Table alteredTable = hiveTableStrategy.alterHiveTable(table, schema, version); metaStoreClient.alter_table(databaseName, tableName, alteredTable); } catch (TException e) { throw new MetaStoreException(e); } }### Assistant: @Test public void alterTable() throws Exception { when(metaStoreClient.getTable(DATABASE, TABLE)).thenReturn(table); when(hiveTableStrategy.alterHiveTable(any(Table.class), any(Schema.class), anyInt())).thenReturn(table); underTest.alterTable(TABLE, schema, 1); verify(hiveTableStrategy).alterHiveTable(table, schema, 1); verify(metaStoreClient).alter_table(DATABASE, TABLE, table); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void enableCreateCollectionContainer(boolean toEnable) { showCreateCollectionContainer(toEnable); showDefineCollectionContainer(!toEnable); showAddItemButton(toEnable); createCollectionRadio.setChecked(toEnable); defineCollectionRadio.setChecked(!toEnable); if (listWidget) { createLabel.setInnerText(ScenarioSimulationEditorConstants.INSTANCE.createLabelList()); } else { createLabel.setInnerText(ScenarioSimulationEditorConstants.INSTANCE.createLabelMap()); } }### Assistant: @Test public void enableCreateCollectionContainer_CreateList() { enableCreateCollectionContainer(true, true); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Operation parse(InputStream in) throws SxmpParsingException, IOException, SAXException, ParserConfigurationException { SAXParserFactory factory = SAXParserFactory.newInstance(); SAXParser parser = factory.newSAXParser(); parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: Handler handler = new Handler(); XMLReader reader = parser.getXMLReader(); reader.setContentHandler(handler); reader.setErrorHandler(handler); reader.setEntityResolver(handler); try { parser.parse(new InputSource(in), handler); } catch (com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException e) { throw new SxmpParsingException(SxmpErrorCode.INVALID_XML, \"XML encoding mismatch\", null); } if (handler.error != null) { throw handler.error; } if (handler.getOperation() == null) { throw new SxmpParsingException(SxmpErrorCode.MISSING_REQUIRED_ELEMENT, \"The operation type [\" + handler.operationType.getValue() + \"] requires a request element\", new PartialOperation(handler.operationType)); } try { handler.getOperation().validate(); } catch (SxmpErrorException e) { throw new SxmpParsingException(e.getErrorCode(), e.getErrorMessage(), handler.getOperation()); } return handler.getOperation(); }### Assistant: @Test public void parseSubmitRequestWithPushDestination() throws Exception { StringBuilder string0 = new StringBuilder(200) .append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\") .append(\"<operation type=\\\"submit\\\">\\n\") .append(\" <account username=\\\"customer1\\\" password=\\\"test1\\\"/>\\n\") .append(\" <submitRequest referenceId=\\\"MYREF102020022\\\">\\n\") .append(\" <operatorId>10</operatorId>\\n\") .append(\" <destinationAddress type=\\\"push_destination\\\">abcd01234fghij</destinationAddress>\\n\") .append(\" <text encoding=\\\"ISO-8859-1\\\">48656c6c6f20576f726c64</text>\\n\") .append(\" </submitRequest>\\n\") .append(\"</operation>\\n\") .append(\"\"); ByteArrayInputStream is = new ByteArrayInputStream(string0.toString().getBytes(\"UTF-8\")); SxmpParser parser = new SxmpParser(); Operation operation = parser.parse(is); logger.debug(\"{}\", operation); Assert.assertEquals(Operation.Type.SUBMIT, operation.getType()); Assert.assertEquals(true, operation.isRequest()); SubmitRequest submitReq = (SubmitRequest)operation; Assert.assertEquals(\"customer1\", submitReq.getAccount().getUsername()); Assert.assertEquals(\"test1\", submitReq.getAccount().getPassword()); Assert.assertNull(submitReq.getApplication()); Assert.assertEquals(\"MYREF102020022\", submitReq.getReferenceId()); Assert.assertEquals(new Integer(10), submitReq.getOperatorId()); Assert.assertEquals(new Boolean(false), submitReq.getDeliveryReport()); Assert.assertEquals(null, submitReq.getSourceAddress()); Assert.assertEquals(MobileAddress.Type.PUSH_DESTINATION, submitReq.getDestinationAddress().getType()); Assert.assertEquals(\"abcd01234fghij\", submitReq.getDestinationAddress().getAddress()); Assert.assertEquals(\"Hello World\", submitReq.getText()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static QueryContext getQueryContext(String expression, Long relativeTo) { try { QueryContextHolder contextHolder = new QueryContextHolder(); metricReader.parse(expression, relativeTo, Metric.class, contextHolder, true); return contextHolder.getCurrentQueryContext(); }catch(ParseException e) { throw new RuntimeException(e); } }### Assistant: @Test public void testGetQueryContextWithSingleExpression() { long relativeTo = System.currentTimeMillis(); QueryContext context = QueryUtils.getQueryContext(\"-1h:argus.core:alerts.scheduled:zimsum:1m-sum\", relativeTo); assertNull(context.getTransform()); assertNull(context.getConstants()); assertEquals(context.getChildContexts().size(),0); assertNotNull(context.getExpression()); TSDBQueryExpression expression = context.getExpression(); assertEquals(expression.getScope(), \"argus.core\"); assertEquals(expression.getMetric(), \"alerts.scheduled\"); assertEquals(expression.getAggregator().toString(), \"ZIMSUM\"); assertEquals(expression.getDownsampler().toString(), \"SUM\"); assertEquals(expression.getDownsamplingPeriod(), new Long(60000)); assertEquals(expression.getStartTimestamp(),new Long(((relativeTo - 3600*1000)/1000)*1000)); assertEquals(expression.getEndTimestamp(),new Long(relativeTo)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean analyzeJar(Analyzer analyzer) throws Exception { boolean modified = false; for (AnalyzerPlugin analyzerPlugin : _analyzerPlugins) { if (analyzerPlugin.analyzeJar(analyzer)) { modified = true; } } return modified; }### Assistant: @Test public void testAggregateResourceBundlesInstructionMultiple() throws Exception { ResourceBundleLoaderAnalyzerPlugin resourceBundleLoaderAnalyzerPlugin = new ResourceBundleLoaderAnalyzerPlugin(); InputStream inputStream = ResourceBundleLoaderAnalyzerPluginTest.class.getResourceAsStream( \"dependencies/resources.test1.jar\"); try (Jar jar = new Jar(\"dot\", inputStream); Analyzer analyzer = new Analyzer()) { analyzer.setBundleSymbolicName(\"resources.test\"); analyzer.setJar(jar); analyzer.setProperty( \"-liferay-aggregate-resource-bundles\", \"resources.lang1,resources.lang2,resources.lang3\"); Assert.assertTrue( resourceBundleLoaderAnalyzerPlugin.analyzeJar(analyzer)); Parameters requireCapabilityHeaders = new Parameters( analyzer.getProperty(Constants.REQUIRE_CAPABILITY)); Collection<Attrs> requires = requireCapabilityHeaders.values(); Assert.assertEquals(requires.toString(), 3, requires.size()); String provideCapabilityProperty = analyzer.getProperty( Constants.PROVIDE_CAPABILITY); Assert.assertFalse( provideCapabilityProperty.contains(\"service.ranking:\")); Parameters provideCapabilityHeaders = new Parameters( provideCapabilityProperty); List<Map.Entry<String, Attrs>> provides = new ArrayList<>( provideCapabilityHeaders.entrySet()); Assert.assertEquals(provides.toString(), 2, provides.size()); Map.Entry<String, Attrs> aggregateEntry = provides.get(0); Assert.assertEquals( ResourceBundleLoaderAnalyzerPlugin.LIFERAY_RESOURCE_BUNDLE, aggregateEntry.getKey()); Attrs aggregateEntryAttrs = aggregateEntry.getValue(); Assert.assertEquals(6, aggregateEntryAttrs.size()); Assert.assertEquals(\"true\", aggregateEntryAttrs.get(\"aggregate\")); StringBuilder sb = new StringBuilder(); sb.append( \"(&(bundle.symbolic.name=resources.test)(!(aggregate=true))),\"); sb.append(\"(bundle.symbolic.name=resources.lang1),\"); sb.append(\"(bundle.symbolic.name=resources.lang2),\"); sb.append(\"(bundle.symbolic.name=resources.lang3)\"); Assert.assertEquals( sb.toString(), aggregateEntryAttrs.get(\"resource.bundle.aggregate\")); Assert.assertEquals( \"resources.test\", aggregateEntryAttrs.get(\"bundle.symbolic.name\")); Assert.assertEquals( \"content.Language\", aggregateEntryAttrs.get(\"resource.bundle.base.name\")); Assert.assertEquals( \"resources.test\", aggregateEntryAttrs.get(\"servlet.context.name\")); Map.Entry<String, Attrs> liferayResourceBundleEntry = provides.get( 1); Assert.assertEquals( ResourceBundleLoaderAnalyzerPlugin.LIFERAY_RESOURCE_BUNDLE + \"~\", liferayResourceBundleEntry.getKey()); Attrs liferayResourceBundleAttrs = liferayResourceBundleEntry.getValue(); Assert.assertEquals(2, liferayResourceBundleAttrs.size()); Assert.assertEquals( \"resources.test\", liferayResourceBundleAttrs.get(\"bundle.symbolic.name\")); Assert.assertEquals( \"content.Language\", liferayResourceBundleAttrs.get(\"resource.bundle.base.name\")); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T9> get9() { return getAndCast(9); }### Assistant: @Test void get9() { assertEquals(m9, instance.get9()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Line removeEndingCRLF(final Line line) { Matcher matcher = PATTERN_LAST_CRLF.matcher(line.toString()); if (matcher.matches()) { return new Line(matcher.group(1), line.getLineNumber()); } else { return line; } }### Assistant: @Test public void removeEndingCRLF() { String line = \"Test\" + CRLF; assertEquals(\"Test\", BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Pattern first(String str) { if (str.length() == 1) { return first(str.charAt(0)); } return new Pattern() { @Override Match match(String input, int fromIndex) { int index = input.indexOf(str, fromIndex); return index >= 0 ? new Match(input, index, str.length()) : null; } @Override public String toString() { return \"first('\" + str + \"')\"; } }; }### Assistant: @Test public void firstChar_noMatch() { assertThat(first('f').in(\"bar\")).isEmpty(); assertThat(first('f').in(\"\")).isEmpty(); assertThat(first('f').iterateIn(\"bar\")).isEmpty(); assertThat(first('f').iterateIn(\"\")).isEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ThingModifyCommandResponseAdapter of(final HeaderTranslator headerTranslator) { return new ThingModifyCommandResponseAdapter(requireNonNull(headerTranslator)); }### Assistant: @Test public void modifyFeatureDefinitionResponseFromAdaptable() { final TopicPath topicPath = topicPath(TopicPath.Action.MODIFY); final JsonPointer path = JsonPointer.of(\"/features/\" + TestConstants.FEATURE_ID + \"/definition\"); final ModifyFeatureDefinitionResponse expectedCreated = ModifyFeatureDefinitionResponse .created(TestConstants.THING_ID, TestConstants.FEATURE_ID, TestConstants.FEATURE_DEFINITION, TestConstants.DITTO_HEADERS_V_2); final Adaptable adaptableCreated = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path) .withStatus(HttpStatusCode.CREATED) .withValue(TestConstants.FEATURE_DEFINITION_JSON) .build()) .withHeaders(TestConstants.HEADERS_V_2) .build(); final ThingModifyCommandResponse<?> actualCreated = underTest.fromAdaptable(adaptableCreated); assertWithExternalHeadersThat(actualCreated).isEqualTo(expectedCreated); final ModifyFeatureDefinitionResponse expectedModified = ModifyFeatureDefinitionResponse.modified(TestConstants.THING_ID, TestConstants.FEATURE_ID, TestConstants.DITTO_HEADERS_V_2); final Adaptable adaptableModified = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path) .withStatus(HttpStatusCode.NO_CONTENT) .build()) .withHeaders(TestConstants.HEADERS_V_2) .build(); final ThingModifyCommandResponse<?> actualModified = underTest.fromAdaptable(adaptableModified); assertWithExternalHeadersThat(actualModified).isEqualTo(expectedModified); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getEncodedParameter(String name) { Matcher matcher = Pattern.compile(Pattern.quote(name) + \"=([^&#]+)\").matcher(queryString); if (matcher.find()) { return matcher.group(1); } else { return Util.urlEncoder(getParameter(name)); } }### Assistant: @Test public void testGetEncodedParameter_stopsAtUrlFragment() throws Exception { final String url = \"url\"; final String queryString = \"first=&foo=bar#ignore\"; final HttpRequest request = new HttpRequest(url, queryString); assertThat(request.getEncodedParameter(\"foo\"), equalTo(\"bar\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure @Override public boolean getAttribute(String name, boolean defaultValue) { final AttributeValue value = getAttribute(name); if (value != null) { try { return value.getBoolean(); } catch (AttributeException exception) { } } return defaultValue; }### Assistant: @Test public void getAttributeStringBoolean() throws Exception { assertTrue(this.testData.getAttribute(\"A\",true)); assertTrue(this.testData.getAttribute(\"B\",false)); assertTrue(this.testData.getAttribute(\"C\",false)); assertTrue(this.testData.getAttribute(\"D\",true)); assertFalse(this.testData.getAttribute(\"E\",false)); assertFalse(this.testData.getAttribute(\"F\",true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void run() { try { Map<String, Object> metaData; metaData = new HashMap<String, Object>(); for (DataPostbox<ChangeContainer> source : sources) { metaData.putAll(source.outputInitialize()); } changeSink.initialize(metaData); for (DataPostbox<ChangeContainer> source : sources) { while (source.hasNext()) { changeSink.process(source.getNext()); } } changeSink.complete(); for (DataPostbox<ChangeContainer> source : sources) { source.outputComplete(); } } finally { changeSink.close(); for (DataPostbox<ChangeContainer> source : sources) { source.outputRelease(); } } }### Assistant: @Test public void testAppend() throws IOException { File sourceFile1; File sourceFile2; File expectedOutputFile; File actualOutputFile; sourceFile1 = dataUtils.createDataFile(\"v0_6/append-change-in1.osc\"); sourceFile2 = dataUtils.createDataFile(\"v0_6/append-change-in2.osc\"); expectedOutputFile = dataUtils.createDataFile(\"v0_6/append-change-out.osc\"); actualOutputFile = dataUtils.newFile(); Osmosis.run( new String[] { \"-q\", \"--read-xml-change-0.6\", sourceFile2.getPath(), \"--read-xml-change-0.6\", sourceFile1.getPath(), \"--append-change-0.6\", \"--write-xml-change-0.6\", actualOutputFile.getPath() } ); dataUtils.compareFiles(expectedOutputFile, actualOutputFile); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @PostMapping(value = \"{processId}/instances/{processInstanceId}/skip\", produces = APPLICATION_JSON_VALUE) public ResponseEntity skipInstanceInError(@PathVariable(\"processId\") String processId, @PathVariable(\"processInstanceId\") String processInstanceId) { return doSkipInstanceInError(processId, processInstanceId); }### Assistant: @Test void skipInstanceInError() { tested.skipInstanceInError(PROCESS_ID, PROCESS_INSTANCE_ID); verify(tested).doSkipInstanceInError(PROCESS_ID, PROCESS_INSTANCE_ID); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> Codec<T> create(AnnotatedElement metadata, Class<T> type, ResolverContext context) { if (Map.class.isAssignableFrom(type)) { BoundList boundList = metadata.getAnnotation(BoundList.class); if (boundList != null && typeIsGuaranteedToBeEntry(boundList)) { Codec<List> listCodec = codecFactory.create(metadata, List.class, context); if (listCodec != null) { return new ListBasedMapCodec(listCodec); } else { return null; } } } return null; }### Assistant: @Test public void shouldReturnCodecForObjectAnnotatedWithMultipleTypes() { when(annotations.getAnnotation(BoundList.class)).thenReturn(boundList); when(delegate.create(annotations, List.class, context)).thenReturn(codec); when(boundList.types()).thenReturn(new Class<?>[] { Map.Entry.class }); MapCodecFactory factory = new MapCodecFactory(delegate); Codec<Map> mapCodec = factory.create(annotations, Map.class, context); assertThat(mapCodec, is(not(nullValue()))); verify(delegate).create(annotations, List.class, context); verify(annotations).getAnnotation(BoundList.class); verifyNoMoreInteractions(annotations, delegate, codec); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void writeFooter(FileFooter footer, long currentPosition) throws IOException { ThriftWriter thriftWriter = openThriftWriter(filePath); footer.setVersion(VERSION_NUMBER); try { thriftWriter.write(footer); thriftWriter.writeOffset(currentPosition); } catch (Exception e) { throw e; } finally { thriftWriter.close(); } }### Assistant: @Test public void testWriteFactMetadata() throws IOException { deleteFile(); createFile(); CarbonFooterWriter writer = new CarbonFooterWriter(filePath); List<BlockletInfoColumnar> infoColumnars = getBlockletInfoColumnars(); int[] cardinalities = new int[] { 2, 4, 5, 7, 9, 10 }; List<ColumnSchema> columnSchema = Arrays.asList(new ColumnSchema[]{getDimensionColumn(\"IMEI1\"), getDimensionColumn(\"IMEI2\"), getDimensionColumn(\"IMEI3\"), getDimensionColumn(\"IMEI4\"), getDimensionColumn(\"IMEI5\"), getDimensionColumn(\"IMEI6\")}); List<org.apache.carbondata.core.carbon.metadata.schema.table.column.ColumnSchema> wrapperColumnSchema = Arrays.asList(new org.apache.carbondata.core.carbon.metadata.schema.table.column.ColumnSchema[]{getWrapperDimensionColumn(\"IMEI1\"), getWrapperDimensionColumn(\"IMEI2\"), getWrapperDimensionColumn(\"IMEI3\"), getWrapperDimensionColumn(\"IMEI4\"), getWrapperDimensionColumn(\"IMEI5\"), getWrapperDimensionColumn(\"IMEI6\")}); int[] colCardinality = CarbonUtil.getFormattedCardinality(cardinalities, wrapperColumnSchema); SegmentProperties segmentProperties = new SegmentProperties(wrapperColumnSchema, colCardinality); writer.writeFooter(CarbonMetadataUtil.convertFileFooter( infoColumnars, 6, cardinalities,columnSchema, segmentProperties ), 0); CarbonFooterReader metaDataReader = new CarbonFooterReader(filePath, 0); assertTrue(metaDataReader.readFooter() != null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String transform(String html) throws PortalException { if (html == null) { return null; } if (!html.contains(AMImageHTMLConstants.ATTRIBUTE_NAME_FILE_ENTRY_ID)) { return html; } return super.transform(html); }### Assistant: @Test public void testReplacesAnAdaptableImgAfterANonadaptableOne() throws Exception { Mockito.when( _amImageHTMLTagFactory.create( \"<img data-fileentryid=\\\"1989\\\" src=\\\"adaptable\\\"/>\", _fileEntry) ).thenReturn( \"<whatever></whatever>\" ); Assert.assertEquals( \"<img src=\\\"not-adaptable\\\"/><whatever></whatever>\", _htmlContentTransformerImpl.transform( \"<img src=\\\"not-adaptable\\\"/>\" + \"<img data-fileentryid=\\\"1989\\\" src=\\\"adaptable\\\"/>\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setState(final InterpreterState newState) { if (state == newState) { return; } state = newState; LOGGER.info(\"entered state \" + state); }### Assistant: @Test public void testSetState() { interpreter.setState(InterpreterState.TRANSITIONING); Assert.assertEquals(InterpreterState.TRANSITIONING, interpreter.getState()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FEELFnResult<String> invoke(@ParameterName(\"string\") String string, @ParameterName(\"start position\") Number start) { return invoke(string, start, null); }### Assistant: @Test public void invokeLengthNegative() { FunctionTestUtil.assertResultError(substringFunction.invoke(\"test\", 1, -3), InvalidParametersEvent.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void transferFunds(Accounts accounts, String senderAddress, String receiverAddress, BigInteger value, BigInteger nonce, ShardOperation operation) throws IOException, ClassNotFoundException { logger.traceEntry(\"params: {} {} {} {} {}\", accounts, senderAddress, receiverAddress, value, nonce); Util.check(accounts != null, \"accounts!=null\"); Util.check(!(senderAddress == null || senderAddress.isEmpty()), \"senderAddress!=null\"); Util.check(!(receiverAddress == null || receiverAddress.isEmpty()), \"receiverAddress!=null\"); Util.check(value.compareTo(BigInteger.ZERO) >= 0, \"value>=0\"); Util.check(nonce.compareTo(BigInteger.ZERO) >= 0, \"nonce>=0\"); if (operation.isCheckSource()) { if (!(hasFunds(accounts, senderAddress, value) && hasCorrectNonce(accounts, senderAddress, nonce))) { IllegalArgumentException ex = new IllegalArgumentException(\"Validation of Sender Account failed!\"); logger.throwing(ex); throw ex; } } if (operation.isCheckTarget()) { AccountAddress receiver = AccountAddress.fromHexString(receiverAddress); AccountState receiverAccountState = AppServiceProvider.getAccountStateService().getOrCreateAccountState(receiver, accounts); logger.trace(\"Transfer asset > adding\"); receiverAccountState.setBalance(receiverAccountState.getBalance().add(value)); AppServiceProvider.getAccountStateService().setAccountState(receiver, receiverAccountState, accounts); } if (operation.isCheckSource()) { AccountAddress sender = AccountAddress.fromHexString(senderAddress); AccountState senderAccountState = AppServiceProvider.getAccountStateService().getOrCreateAccountState(sender, accounts); logger.trace(\"Transfer asset > substracting\"); senderAccountState.setBalance(senderAccountState.getBalance().subtract(value)); logger.trace(\"Transfer asset > increasing sender nonce\"); senderAccountState.setNonce(senderAccountState.getNonce().add(BigInteger.ONE)); logger.trace(\"Transfer asset > saving\"); AppServiceProvider.getAccountStateService().setAccountState(sender, senderAccountState, accounts); } logger.traceExit(); }### Assistant: @Test public void testTransferFundsWithNegativeNonceShouldThrowException() throws IOException, ClassNotFoundException { expected(IllegalArgumentException.class, \"nonce>=0\"); accountsManager.transferFunds(accounts, \"Sender\", \"Receiver\", BigInteger.TEN, BigInteger.valueOf(-1), operation); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String idFromNameQuery(String name) { return \"SELECT id FROM project WHERE name = '\" + name + \"'\"; }### Assistant: @Test public void testIdFromNameQuery() { List<Map<String, Object>> result; String name = \"projectName\"; String anotherProject = \"anotherProject\"; String url = \"my/url\"; result = persistence.query(queries.idFromNameQuery(name)); assertTrue(result.isEmpty()); executeSuccess(queries.projectInsertStatement(name, url)); result = persistence.query(queries.idFromNameQuery(anotherProject)); assertTrue(result.isEmpty()); result = persistence.query(queries.idFromNameQuery(name)); assertFalse(result.isEmpty()); assertEquals(1, result.get(0).get(\"id\")); executeSuccess(queries.projectInsertStatement(anotherProject, null)); result = persistence.query(queries.idFromNameQuery(anotherProject)); assertFalse(result.isEmpty()); assertEquals(2, result.get(0).get(\"id\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int deleteServerByServerGroupId(Long serverGroupId) throws SQLException { String sql = \"DELETE FROM server WHERE server_group_id = ?\"; return this.updataBysql(sql, Parameter.integerOf(StringUtils.EMPTY, serverGroupId)); }### Assistant: @Test public void deleteServerByServerGroupId() throws Exception { Long id = 1L; int _id = serverDao.deleteServerByServerGroupId(id); System.out.println(\"deleteServerByServerGroupId :-------> \" + _id); Assert.assertTrue(_id > 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onCreate(@Nullable final Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (annotationHandler != null) { final ActionBarFragmentAnnotationHandler annotationHandler = (ActionBarFragmentAnnotationHandler) this.annotationHandler; if (annotationHandler.hasOptionsMenu()) { setHasOptionsMenu(true); } } }### Assistant: @Test public void testOnCreate() { final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get(); final FragmentManager fragmentManager = activity.getSupportFragmentManager(); final ActionBarFragment fragment = new TestFragment(); fragmentManager.beginTransaction().add(fragment, null).commit(); fragmentManager.executePendingTransactions(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String parseExpressions(final String value) { return parseExpressions(value, new SystemPropertyResolver()); }### Assistant: @Test public void should_return_default_value_if_no_sys_prop() { assertThat(RunnerExpressionParser.parseExpressions(\"${myprop2:myvalue}\")).isEqualTo(\"myvalue\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Set<String> getConsumedModelClasses() { final Set<String> factTypes = new HashSet<String>(); for (CompositeColumn<?> cc : model.getConditions()) { if (cc instanceof BRLConditionColumn) { final List<IPattern> definition = ((BRLConditionColumn) cc).getDefinition(); factTypes.addAll(getConditionFactTypesFromRuleModel(definition)); } else if (cc instanceof Pattern52) { factTypes.add(((Pattern52) cc).getFactType()); } } for (ActionCol52 c : model.getActionCols()) { if (c instanceof BRLActionColumn) { final List<IAction> definition = ((BRLActionColumn) c).getDefinition(); factTypes.addAll(getActionFactTypesFromRuleModel(definition)); } else if (c instanceof ActionInsertFactCol52) { factTypes.add(((ActionInsertFactCol52) c).getFactType()); } } final Set<String> fullyQualifiedClassNames = new HashSet<String>(); for (String factType : factTypes) { fullyQualifiedClassNames.add(convertToFullyQualifiedClassName(factType)); } return fullyQualifiedClassNames; }### Assistant: @Test @Ignore(\"DROOLS-4457\") public void differentPackagesSameNames() { final GuidedDecisionTable52 model = new GuidedDecisionTable52(); model.getImports().addImport(new Import(\"org.test.demo.Person\")); model.getImports().addImport(new Import(\"org.test.Person\")); final Pattern52 pattern52 = mock(Pattern52.class); doReturn(\"Person\").when(pattern52).getFactType(); model.getConditions().add(pattern52); final Set<String> consumedModelClasses = new GuidedDecisionTableModelVisitor(model).getConsumedModelClasses(); assertTrue(consumedModelClasses.contains(\"org.test.Person\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] unpackToNibbles(byte[] str) { byte[] base = binToNibbles(str); base = copyOf(base, base.length - 1); if (base[0] >= 2) { base = appendByte(base, TERMINATOR); } if (base[0] % 2 == 1) { base = copyOfRange(base, 1, base.length); } else { base = copyOfRange(base, 2, base.length); } return base; }### Assistant: @Test public void testCompactDecodeEvenCompact() { byte[] test = new byte[]{0x00, 0x01, 0x23, 0x45}; byte[] expected = new byte[]{0, 1, 2, 3, 4, 5}; assertArrayEquals(\"even compact decode fail\", expected, CompactEncoder.unpackToNibbles(test)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final MutateBatchJobResponse mutateBatchJob( String customerId, BatchJobOperation operation) { MutateBatchJobRequest request = MutateBatchJobRequest.newBuilder() .setCustomerId(customerId) .setOperation(operation) .build(); return mutateBatchJob(request); }### Assistant: @Test @SuppressWarnings(\"all\") public void mutateBatchJobExceptionTest() throws Exception { StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT); mockBatchJobService.addException(exception); try { String customerId = \"customerId-1772061412\"; BatchJobOperation operation = BatchJobOperation.newBuilder().build(); client.mutateBatchJob(customerId, operation); Assert.fail(\"No exception raised\"); } catch (InvalidArgumentException e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CarbonTable getCarbonTable(String tableUniqueName) { return tableInfoMap.get(convertToLowerCase(tableUniqueName)); }### Assistant: @Test public void testGetCarbonTableReturingProperCarbonTable() { assertTrue(null != carbonMetadata.getCarbonTable(tableUniqueName)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getCurrentUserPublicName() { RangerSecurityContext context = RangerContextHolder.getSecurityContext(); if (context != null) { UserSessionBase userSession = context.getUserSession(); if (userSession != null) { return userSession.getXXPortalUser().getPublicScreenName(); } } return null; }### Assistant: @SuppressWarnings(\"static-access\") @Test public void testGetCurrentUserPublicName(){ String expectedName = \"rangerAdmin\"; gjUser.setPublicScreenName(\"rangerAdmin\"); String publicName = contextUtil.getCurrentUserPublicName(); Assert.assertEquals(expectedName, publicName); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ListenableFuture<ServiceDescriptors> getServices(String type) { requireNonNull(type, \"type is null\"); return lookup(type, null, null); }### Assistant: @Test public void testGetServicesHttpException() throws Exception { final Exception testingException = new Exception(\"testing exception\"); ListenableFuture<ServiceDescriptors> future = createClient( request -> { throw testingException; }) .getServices(\"testService\", \"testPool\"); try { future.get(); fail(\"Expected ExecutionException\"); } catch (ExecutionException e) { assertInstanceOf(e.getCause(), DiscoveryException.class); assertEquals(e.getCause().getCause(), testingException); assertEquals(e.getCause().getMessage(), \"Lookup of testService failed\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder builder() { return new Builder(); }### Assistant: @Test public void hasMember() { MemberShape member = MemberShape.builder().id(\"ns.foo#bar$member\").target(\"ns.foo#bam\").build(); ListShape shape = ListShape.builder() .id(\"ns.foo#bar\") .member(member) .build(); assertEquals(member, shape.getMember()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void render(PebbleTemplateImpl self, Writer writer, EvaluationContextImpl context) throws IOException { boolean satisfied = false; for (Pair<Expression<?>, BodyNode> ifStatement: this.conditionsWithBodies) { Expression<?> conditionalExpression = ifStatement.getLeft(); try { Object result = conditionalExpression.evaluate(self, context); if (result != null) { if (result instanceof Boolean || result instanceof Number || result instanceof String) { satisfied = compatibleCast(result, Boolean.class); } else { throw new PebbleException( null, String.format( \"Unsupported value type %s. Expected Boolean, String, Number in \\\"if\\\" statement\", result.getClass().getSimpleName()), this.getLineNumber(), self.getName()); } } else if (context.isStrictVariables()) { throw new PebbleException(null, \"null value given to if statement and strict variables is set to true\", this.getLineNumber(), self.getName()); } } catch (RuntimeException ex) { throw new PebbleException(ex, \"Wrong operand(s) type in conditional expression\", this.getLineNumber(), self.getName()); } if (satisfied) { ifStatement.getRight().render(self, writer, context); break; } } if (!satisfied && this.elseBody != null) { this.elseBody.render(self, writer, context); } }### Assistant: @Test void testIfNotZeroFloat() throws IOException { assertEquals(\"yes\", this.render(1.1), \"Not zero float should be interpreted as TRUE\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Api(1.0) @NonNull public String requestUrl(@NonNull String endpointId, @NonNull String apiCall) { return mClient.endpoints().getEndpoint(endpointId).buildUrl(apiCall); }### Assistant: @Test public void thatRequestUrlWithoutPinningSHA(){ mNetworkApi = new HaloNetworkApi(mFramework,givenNetClientWithoutPinning()); assertThat(mNetworkApi.requestUrl(\"1\",\"get\")).contains(\"HaloNetClientTest\"); assertThat(mNetworkApi.requestUrl(\"1\",\"get\")).contains(\"get\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public synchronized <T extends Object> Collection<T> loadObjects( final Class<T> baseClass, final String root) throws ConfigurationException { final Collection<T> beans = new java.util.ArrayList<T>(); final Collection<File> files; try { files = getConfigurationFiles(root); } catch (IOException e) { throw new ConfigurationException(e.getMessage(), e); } for (File file : files) { try { LOGGER.info(\"loading configuration '\" + file.getCanonicalPath() + \"'...\"); final Resource resource = getResource(file); if (resource == null) { continue; } final DefaultListableBeanFactory factory = new DefaultListableBeanFactory(); final XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(factory); reader.loadBeanDefinitions(resource); final ClasspathExtractor extractor = getClassPathExtractor(file); if (extractor == null) { continue; } final String repository = extractor.getLoaderRepostory(); final JVoiceXmlClassLoader loader = getClassLoader(repository); final URL[] urls = extractor.getClasspathEntries(); loader.addURLs(urls); if (LOGGER.isDebugEnabled()) { for (URL url : urls) { LOGGER.debug(\"using classpath entry '\" + url + \"'\"); } } factory.setBeanClassLoader(loader); final String[] names = factory.getBeanNamesForType(baseClass); if (names.length == 0) { LOGGER.info(\"no loadable objects of type '\" + baseClass + \"' in file '\" + file.getCanonicalPath() + \"'\"); } else { for (String name : names) { LOGGER.info(\"loading '\" + name + \"'\"); final Object o = factory.getBean(name, baseClass); final T bean = baseClass.cast(o); beans.add(bean); if (bean instanceof ExtendedConfiguration) { final ExtendedConfiguration config = (ExtendedConfiguration) bean; config.setConfigurationFile(file); } } } } catch (IOException | BeansException e) { throw new ConfigurationException(e.getMessage(), e); } } return beans; }### Assistant: @Test @SuppressWarnings(\"rawtypes\") public void testLoadObjects() throws Exception { JVoiceXmlConfiguration config = new JVoiceXmlConfiguration(); final Collection<ResourceFactory> factories = config.loadObjects(ResourceFactory.class, \"implementation\"); Assert.assertEquals(1, factories.size()); final ResourceFactory factory = factories.iterator().next(); Assert.assertEquals(DesktopTelephonySupportFactory.class, factory.getClass()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Enumeration<String> getKeys() { PortletSession session = request.getPortletSession(false); if (session != null) { return session.getAttributeNames(scope); } return null; }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void testGetKeys() { Enumeration<String> keys = createMock(Enumeration.class); expect(request.getPortletSession(false)).andReturn(session); expect(session.getAttributeNames(PortletSession.PORTLET_SCOPE)).andReturn(keys); replay(request, session, keys); assertEquals(keys, extractor.getKeys()); verify(request, session, keys); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String formatAll(Object[] parameters) { return super.formatAll(Arrays.asList(parameters)); }### Assistant: @Test public void testFormatAllHandleNullSpecially() { final Object[] parameters = new Object[] { null }; String result = underTest.formatAll(parameters); assertThat(result).isEqualTo(STRING_NULL); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void onDelete() { validationService.call((validationMessages) -> { if (((List<ValidationMessage>) validationMessages).isEmpty()) { showDeletePopup(getVersionRecordManager().getCurrentPath()); } else { validationPopup.showDeleteValidationMessages(() -> showDeletePopup(versionRecordManager.getCurrentPath()), () -> { }, (List<ValidationMessage>) validationMessages); } }).validateForDelete(versionRecordManager.getCurrentPath()); }### Assistant: @Test public void deleteValidationErrors() { when(validationService.validateForDelete(any(Path.class))).thenReturn(Arrays.asList(new ValidationMessage())); presenter.onDelete(); verify(validationService, times(1)).validateForDelete(any(Path.class)); verify(validationPopup, times(1)).showDeleteValidationMessages(any(Command.class), any(Command.class), anyListOf(ValidationMessage.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public static ModifyFeaturesLiveCommandImpl of(final Command<?> command) { return new ModifyFeaturesLiveCommandImpl((ModifyFeatures) command); }### Assistant: @SuppressWarnings(\"ConstantConditions\") @Test public void tryToGetModifyFeaturesLiveCommandForNull() { assertThatExceptionOfType(NullPointerException.class) .isThrownBy(() -> ModifyFeaturesLiveCommandImpl.of(null)) .withMessage(MessageFormat.format(\"The {0} must not be null!\", \"command\")) .withNoCause(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Time clone() { return new Time(this.data.clone()); }### Assistant: @Test public void testClone() { Time clone = t1.clone(); assertEquals(t1.toString(), clone.toString()); assertEquals(t1.toJsonObject(), clone.toJsonObject()); assertEquals(t1.getMessageType(), clone.getMessageType()); assertEquals(t1.getData(), clone.getData()); assertNotSame(t1, clone); assertNotSame(t1.toString(), clone.toString()); assertNotSame(t1.toJsonObject(), clone.toJsonObject()); assertNotSame(t1.getData(), clone.getData()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public EditableProperty(@NotNull JTextComponent textComponent) { myTextComponent = textComponent; myTextComponent.addPropertyChangeListener(\"editable\", this); }### Assistant: @Test public void testEditableProperty() { JTextField field = new JTextField(); EditableProperty editableProperty = new EditableProperty(field); CountListener listener = new CountListener(); editableProperty.addListener(listener); assertThat(editableProperty.get()).isTrue(); assertThat(listener.getCount()).isEqualTo(0); field.setEditable(false); assertThat(editableProperty.get()).isFalse(); assertThat(listener.getCount()).isEqualTo(1); editableProperty.set(true); assertThat(field.isEditable()).isTrue(); assertThat(listener.getCount()).isEqualTo(2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void ensureValidRedhatVersion(String version) throws EnforcerRuleException { if (version.endsWith(\"SNAPSHOT\")) { return; } if (version.contains(\"-\")) { throw new EnforcerRuleException(\"The version \\\"\" + version + \"\\\" does not conform to the Redhat (linux packaging) version requirements. \" + \"It can't have the '-' character as it has a special meaning reserved for the RPM process.\"); } String reserved[] = { \"noarch\", \"nosrc\", \"src\", \"fat\", \"i386\", \"i486\", \"i586\", \"i686\", \"pentium\", \"athlon\", \"ia64\", \"x86_64\", \"amd64\", \"ia32e\", \"alpha\", \"sparc\", \"m68k\", \"ppc\", \"parisc\", \"hppa\", \"mips\", \"mipsel\", \"armv\", \"atari\", \"falcon\", \"milan\", \"hades\", \"s390\", \"aix\", \"amigaos\", \"bsd\", \"cygwin\", \"darwin\", \"freebsd\", \"freemint\", \"hp\", \"hpux\", \"irix\", \"linux\", \"machten\", \"macosx\", \"mint\", \"mp_ras\", \"nextstep\", \"os/390\", \"osf1\", \"osf3.2\", \"osf4.0\", \"sco_sv\", \"solaris\", \"sunos\", \"unix\", \"ux\", \"vm\", \"esa\", \"sun\", \"xtensa\", \"rs6000\", \"sgi\" }; String lversion = version.toLowerCase(); for (String id : reserved) { if (lversion.contains(id)) { throw new EnforcerRuleException(\"The version \\\"\" + version + \"\\\" does not conform to the Redhat (linux packaging) version requirements. \" + \"It can't use the RPM reserved word \\\"\" + id + \"\\\".\"); } } }### Assistant: @Test public void testValidRedhatVersions() throws EnforcerRuleException { RequireRedhatCompatibleVersionRule rule = new RequireRedhatCompatibleVersionRule(); rule.ensureValidRedhatVersion( \"1.0.0\" ); rule.ensureValidRedhatVersion( \"7.0.2.RC0\" ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String toString() { return writer.toString(); }### Assistant: @Test public void testBasic() throws Exception { String input = TestFileUtils.getTestFile(\"/Xslt/AnyXml/in.xml\"); String expected = input; XmlWriter xmlWriter = new XmlWriter(); XmlUtils.parseXml(input, xmlWriter); assertEquals(expected,xmlWriter.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void afterPropertiesSet() { initialize(); removeValve(authPipeline); addValve(authPipeline, position, positionAfter, positionBefore); }### Assistant: @Test public void testPositionAtTheEnd() { int count = pipeline.getValves().length; MyAuthValve myValve = new MyAuthValve(\"myAuthValve1\", pipeline); myValve.afterPropertiesSet(); assertEquals(\"Valve count is wrong\", count + 1, pipeline.getValves().length); assertEquals(\"Valve is not appended to the end\", pipeline.getValves().length - 1, getPosition(myValve.getId())); count = pipeline.getValves().length; myValve.afterPropertiesSet(); assertEquals(\"Valve count is wrong\", count, pipeline.getValves().length); assertEquals(\"Valve is not at the end\", count - 1, getPosition(myValve.getId())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void remove(String symbol, String providerCode) { var pe = pairRepo.findBySymbolAndProviderCode(symbol, providerCode); if(pe == null) { throw PairException.notFound(symbol, providerCode); } pairRepo.delete(pe); }### Assistant: @Test public void testRemove() { String code = \"UBI.PA\"; pairService.remove(code, YAHOO); assertThat(pairService.getForCodeAndProvider(code, YAHOO)).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean debug() { return (debug != null) && debug; }### Assistant: @Test void testDebugNull() { mojo.setDebug(null); boolean result = mojo.debug(); assertFalse(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CallSpec<List<String>, HttpError> addQualification(String description) { return Resource.<List<String>, HttpError>newPostSpec( api, \"/v1/users/me/educational_background/qualifications\", false) .responseAs(list(String.class, \"qualifications\")) .queryParam(\"description\", description) .build(); }### Assistant: @Test public void addQualification() throws Exception { server.enqueue(new MockResponse().setResponseCode(201).setBody(\"{\\n\" + \" \\\"qualifications\\\": [\\n\" + \" \\\"API programming champion 2016\\\",\\n\" + \" \\\"Linux Daemons\\\"\\n\" + \" ]\\n\" + '}')); Response<List<String>, HttpError> response = resource.addQualification(\"Some desc\").execute(); assertThat(response.body().size()).isEqualTo(2); assertThat(response.body().get(1)).isEqualTo(\"Linux Daemons\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected static void adapt(HTableDescriptor desc, CreateTableRequest request) { if (request != null) { for (HColumnDescriptor column : desc.getColumnFamilies()) { String columnName = column.getNameAsString(); request.addFamily(columnName, buildGarbageCollectionRule(column)); } } }### Assistant: @Test public void testAdaptForTable() { GCRule gcRule = GCRULES.maxVersions(1); ColumnFamily columnFamily = ColumnFamily.newBuilder().setGcRule(gcRule.toProto()).build(); Table table = Table.newBuilder() .setName(TABLE_NAME) .putColumnFamilies(COLUMN_FAMILY, columnFamily) .build(); HTableDescriptor actualTableDesc = TableAdapter.adapt(com.google.cloud.bigtable.admin.v2.models.Table.fromProto(table)); HTableDescriptor expected = new HTableDescriptor(TableName.valueOf(TABLE_ID)); expected.addFamily(new HColumnDescriptor(COLUMN_FAMILY)); Assert.assertEquals(expected, actualTableDesc); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Authorized({ PrivilegeConstants.MANAGE_BILLS }) @Transactional public Bill save(Bill bill) { if (bill == null) { throw new NullPointerException(\"The bill must be defined.\"); } if (bill.getTotal().compareTo(BigDecimal.ZERO) < 0 && !Context.hasPrivilege(PrivilegeConstants.REFUND_MONEY)) { throw new AccessControlException(\"Access denied to give a refund.\"); } IReceiptNumberGenerator generator = ReceiptNumberGeneratorFactory.getGenerator(); if (generator == null) { LOG.warn(\"No receipt number generator has been defined. Bills will not be given a receipt number until one is\" + \" defined.\"); } else { if (StringUtils.isEmpty(bill.getReceiptNumber())) { bill.setReceiptNumber(generator.generateNumber(bill)); } } return super.save(bill); }### Assistant: @Test(expected = APIException.class) public void save_shouldThrowAPIExceptionIfReceiptNumberCannotBeGenerated() throws Exception { Bill bill = createEntity(true); bill.setReceiptNumber(null); when(receiptNumberGenerator.generateNumber(bill)) .thenThrow(new APIException(\"Test exception\")); service.save(bill); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void map() { if (this.lifecycleMethods != null) { this.lifecycleMethods.clear(); LifecycleAction.populateMethods(clazz, this.lifecycleMethods); } if (this.lifecycleFields != null) { this.lifecycleFields.clear(); LifecycleAction.populateFields(clazz, this.lifecycleFields); } List<Field> allFields = Search.getAllFields(this.clazz, new EntitySearchCriteria()); for (Field field : allFields) { if (Modifier.isStatic(field.getModifiers())) { continue; } insert(field); } }### Assistant: @Test void map() { TestTransformer transformer = new TestTransformer(); TestMappedEntity entity = new TestMappedEntity(transformer, StandardEntity.class); entity.map(); entity = new TestMappedEntity(transformer, LifecycleEntity.class); entity.map(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static JsonValue newValue(final boolean value) { return value ? ImmutableJsonBoolean.TRUE : ImmutableJsonBoolean.FALSE; }### Assistant: @Test public void newValueFromMaxLongReturnsExpected() { final long longValue = Long.MAX_VALUE; final JsonValue underTest = JsonFactory.newValue(longValue); assertThat(underTest).isNumber(); assertThat(underTest.asLong()).isEqualTo(longValue); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public HeterolyticCleavagePBReaction() {}### Assistant: @Test public void testHeterolyticCleavagePBReaction() throws Exception { IReactionProcess type = new HeterolyticCleavagePBReaction(); Assert.assertNotNull(type); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String apply(String definitionName) { String defaultResolver = super.apply(definitionName); if (defaultResolver != null && config.isSeparatedDefinitionsEnabled()) return defaultString(config.getInterDocumentCrossReferencesPrefix()) + markupDocBuilder.addFileExtension(normalizeName(definitionName)); else return defaultResolver; }### Assistant: @Test public void testWithSeparatedDefinitionsAndInterDocumentCrossReferences() { Swagger2MarkupConfig config = new Swagger2MarkupConfigBuilder() .withSeparatedDefinitions() .withInterDocumentCrossReferences() .build(); Swagger2MarkupConverter.SwaggerContext context = createContext(config); context.setOutputPath(Paths.get(\"/tmp\")); assertThat(new DefinitionDocumentResolverFromDefinition(context).apply(\"DefinitionName\")) .isEqualTo(\"DefinitionName.adoc\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int generate( final MasterReport report, final int acceptedPage, final OutputStream outputStream, final int yieldRate ) throws ReportProcessingException, IOException, ContentIOException { final IAsyncReportListener listener = ReportListenerThreadHolder.getListener(); final ReportStructureValidator validator = new ReportStructureValidator(); if ( validator.isValidForFastProcessing( report ) == false ) { return super.generate( report, acceptedPage, outputStream, yieldRate ); } final FastCsvExportProcessor reportProcessor = new FastCsvExportProcessor( report, outputStream ); doProcess( listener, reportProcessor ); outputStream.flush(); return 0; }### Assistant: @Test public void testGenerateFast() throws Exception { try { ClassicEngineBoot.getInstance().start(); ReportListenerThreadHolder.clear(); PentahoSessionHolder.setSession( new StandaloneSession() ); final File file = new File( \"target/test/resource/solution/test/reporting/limit10.prpt\" ); final MasterReport report = (MasterReport) new ResourceManager().createDirectly( file.getPath(), MasterReport.class ).getResource(); try ( ByteArrayOutputStream baos = new ByteArrayOutputStream() ) { fastCSVOutput.generate( report, 1, baos, 1 ); assertTrue( baos.size() > 0 ); } verify( listener, times( 0 ) ).reportProcessingStarted( any( ReportProgressEvent.class ) ); verify( listener, times( 0 ) ).reportProcessingFinished( any( ReportProgressEvent.class ) ); verify( listener, times( 0 ) ).reportProcessingUpdate( any( ReportProgressEvent.class ) ); } finally { PentahoSessionHolder.removeSession(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <C> C combine(C origin, C override) { if (origin == null) { return override; } if (override == null) { return origin; } Class<C> originClass = (Class<C>) origin.getClass(); Class<C> overrideClass = (Class<C>) override.getClass(); if (String.class.isAssignableFrom(originClass)) { if (Strings.isNullOrEmpty((String) origin)) { return override; } if (Strings.isNullOrEmpty((String) override)) { return origin; } } if (!overrideClass.equals(originClass)) { throw new IllegalStateException( String.format(\"Objects types don't match. Found: [%s] and [%s].\", overrideClass, originClass)); } if (overrideClass.isPrimitive() || overrideClass.isEnum()) { return override; } if (List.class.isAssignableFrom(originClass)) { return mergeList(origin, override); } if (Set.class.isAssignableFrom(originClass)) { return mergeSet(origin, override); } if (Map.class.isAssignableFrom(originClass)) { return mergeMap(origin, override); } if (originClass.isArray()) { return mergeArray(origin, override); } String fcqn = overrideClass.getCanonicalName(); if (fcqn.startsWith(\"java\") || fcqn.startsWith(\"com.sun\") || fcqn.startsWith(\"sun.\")) { return override; } try { final C result = originClass.newInstance(); for (Field f : getAllFields(originClass)) { try { String name = f.getName(); f.setAccessible(true); Object value = combine(f.get(origin), f.get(override)); f.set(result, value); } catch (Exception e) { throw DekorateException.launderThrowable(e); } } return result; } catch (Exception e) { throw DekorateException.launderThrowable(e); } }### Assistant: @Test public void shouldCombineSynteticObjects() throws Exception { Person captain = new Person(\"Jim\", null, null); Person member1 = new Person(\"Joe\", null, null); Team team1 = new Team(\"A\", captain, null); List<Person> members = new ArrayList<>(); members.add(member1); Team team2 = new Team(\"A\", null, members); Team combined = Beans.combine(team1, team2); assertNotNull(combined); assertEquals(\"A\", combined.getName()); assertEquals(captain, combined.getCaptain()); assertNotNull(combined.getMembers()); assertEquals(member1, combined.getMembers().get(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public long getHeight(String date) { SimpleDateFormat parser = new SimpleDateFormat(\"yyyy-MM-dd\"); parser.setTimeZone(TimeZone.getTimeZone(\"UTC\")); parser.setLenient(false); try { return getHeight(parser.parse(date)); } catch (ParseException ex) { throw new IllegalArgumentException(ex); } }### Assistant: @Test public void test20160324() { assertTrue(isInRange(getHeight(\"2016-03-23\"), 998955, 1006105)); assertTrue(isInRange(getHeight(\"2016-03-24\"), 1000414, 1007486)); assertTrue(isInRange(getHeight(\"2016-03-25\"), 1001800, 1008900)); assertTrue(isInRange(getHeight(\"2016-03-26\"), 1003243, 1009985)); assertTrue(isInRange(getHeight(\"2016-03-27\"), 1004694, 1010746)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void put(CacheKey key, CacheValue value) { init(); defaultCache.put(key, value); try (PreparedStatement statement = dbConnection.prepareStatement(SQL_PUT_CACHE_VALUE)) { statement.setString(1, key.getGroupName()); statement.setString(2, key.getType().toString()); statement.setString(3, value.getHash()); statement.setString(4, value.getRawContent()); statement.execute(); } catch (SQLException e) { throw new WroRuntimeException(\"Error putting a value into the cache\", e); } }### Assistant: @Test public void testPut() throws Exception { CacheKey key = new CacheKey(\"groupName\", ResourceType.CSS); CacheValue value = CacheValue.valueOf(\"rawContent\", \"hash\"); final URL classFile = DiskbackedCacheTest.class.getResource(DiskbackedCache.class.getSimpleName() + \".class\"); final Path path = Paths.get(classFile.toURI()).getParent().resolve(\"db\"); try (DirectoryStream<Path> paths = Files.newDirectoryStream(path.getParent(), \"cache*.db\")) { for (Path path1 : paths) { Files.deleteIfExists(path1); } } try (DiskbackedCache cache = new DiskbackedCache(100, path.toString())) { cache.put(key, value); CacheValue loaded = cache.get(key); assertEquals(value.getHash(), loaded.getHash()); assertEquals(value.getRawContent(), loaded.getRawContent()); assertArrayEquals(value.getGzippedContent(), loaded.getGzippedContent()); } try (DiskbackedCache cache2 = new DiskbackedCache(100, path.toString())) { CacheValue loaded = cache2.get(key); assertEquals(value.getHash(), loaded.getHash()); assertEquals(value.getRawContent(), loaded.getRawContent()); assertArrayEquals(value.getGzippedContent(), loaded.getGzippedContent()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static ModifyFeatureProperty of(final String thingId, final String featureId, final JsonPointer propertyJsonPointer, final JsonValue propertyValue, final DittoHeaders dittoHeaders) { return of(ThingId.of(thingId), featureId, propertyJsonPointer, propertyValue, dittoHeaders); }### Assistant: @Test(expected = NullPointerException.class) public void tryToCreateInstanceWithNullThingId() { ModifyFeatureProperty.of((ThingId) null, TestConstants.Feature.FLUX_CAPACITOR_ID, PROPERTY_JSON_POINTER, PROPERTY_VALUE, TestConstants.EMPTY_DITTO_HEADERS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void postProcessEnvironment(final ConfigurableEnvironment environment, final SpringApplication application) { final Map<String, Object> source = new ConcurrentHashMap<>(); if (!environment.containsProperty(\"eureka.instance.asg-name\")) { final String asgName = environment.getProperty(\"evcache.asg-name\", \"DEFAULT\"); source.put(\"eureka.instance.asg-name\", asgName); LOGGER.warn(\"`eureka.instance.asg-name` is Missing, set `{}`\", asgName); } putMetadataIfAbsent(source, environment, \"evcache.port\"); putMetadataIfAbsent(source, environment, \"evcache.secure.port\"); putMetadataIfAbsent(source, environment, \"rend.port\"); putMetadataIfAbsent(source, environment, \"rend.batch.port\"); putMetadataIfAbsent(source, environment, \"udsproxy.memcached.port\"); putMetadataIfAbsent(source, environment, \"udsproxy.memento.port\"); environment.getPropertySources() .addLast(new MapPropertySource(\"evcache-server\", source)); }### Assistant: @Test void should_be_not_set_when_not_exist_udsproxy_memento_port() { processor.postProcessEnvironment(environment, null); assertThat(environment.containsProperty(\"eureka.instance.metadata-map.udsproxy.memento.port\")).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final void setProperty(final String relPath, final Value value) throws RepositoryException { throw new ListenerReadOnlyException(); }### Assistant: @Test(expected = ListenerReadOnlyException.class) public void testROSetPropertyValue() throws Exception { Authorizable delegate = mock(Authorizable.class); AuthorizableFacade<Authorizable> facade = getFacade(delegate); facade.setProperty(\"\", (Value) null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkAttributeSyntax(PerunSessionImpl perunSession, Resource resource, Attribute attribute) throws WrongAttributeValueException { if (attribute.getValue() == null) return; List<String> values = attribute.valueAsList(); for (String value : values) { if (!PATTERN.matcher(value).matches()) { throw new WrongAttributeValueException(attribute, resource.getName() + \" has attribute whose value is not valid. Example of valid value: res:RESOURCE[:CHILD-RESOURCE1][:CHILD-RESOURCE2]...[:act:ACTION[,ACTION]...]\"); } } }### Assistant: @Test(expected= WrongAttributeValueException.class) public void checkAttributeWrongSyntax3() throws Exception { System.out.println(\"checkAttributeWrongSyntax3()\"); testedValues.set(0, \"res:a,:b\"); module.checkAttributeSyntax(ps, resource, attribute); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Iterable<PerPage> listChildren() { return getChildren(allFilter, false); }### Assistant: @Test public void listChildren() throws Exception { PerPage root = createPage(null, \"root\"); PerPage child = createPage(root, \"child\"); PerPage child1 = createPage(child, \"child-1\"); PerPage child2 = createPage(child, \"child-2\"); assertEquals(\"Only expected one child of root\", 1, countIterable(root.listChildren())); assertEquals(\"Only expected two grand children of child\", 2, countIterable(child.listChildren())); assertEquals(\"Did not expected any children of grand child 1\", 0, countIterable(child1.listChildren())); assertEquals(\"Did not expected any children of grand child 2\", 0, countIterable(child2.listChildren())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public org.modeshape.jcr.api.query.Query createQuery( String statement, String language ) throws InvalidQueryException, RepositoryException { CheckArg.isNotNull(statement, \"statement\"); CheckArg.isNotNull(language, \"language\"); return createQuery(statement, language, null, null); }### Assistant: @Test @FixFor( \"MODE-1900\" ) public void shouldSelectDistinctNodesWhenJoiningMultiValueReferenceProperties() throws Exception { Node nodeA = session.getRootNode().addNode(\"A\", \"test:node\"); nodeA.setProperty(\"test:name\", \"A\"); Node nodeB = session.getRootNode().addNode(\"B\", \"test:node\"); nodeB.setProperty(\"test:name\", \"B\"); JcrValue nodeBRef = session.getValueFactory().createValue(nodeB); Node nodeC = session.getRootNode().addNode(\"C\", \"test:node\"); nodeC.setProperty(\"test:name\", \"C\"); JcrValue nodeCRef = session.getValueFactory().createValue(nodeC); try { Node relationship = nodeA.addNode(\"relationship\", \"test:relationship\"); relationship.setProperty(\"test:target\", new JcrValue[] {nodeBRef, nodeCRef}); session.save(); QueryManager queryManager = session.getWorkspace().getQueryManager(); String queryString = \"SELECT relationship.[test:target] FROM [test:relationship] AS relationship\"; Query query = queryManager.createQuery(queryString, Query.JCR_SQL2); validateQuery().rowCount(1).validate(query, query.execute()); queryString = \"SELECT [jcr:uuid], [jcr:path] FROM [test:node]\"; query = queryManager.createQuery(queryString, Query.JCR_SQL2); validateQuery().rowCount(3).onEachRow(new Predicate() { @Override public void validate( int rowNumber, Row row ) throws RepositoryException { assertNotNull(row.getValue(\"jcr:uuid\")); } }).validate(query, query.execute()); queryString = \"SELECT relationship.[test:target], target.[jcr:path] \" + \" FROM [test:relationship] AS relationship \" + \" JOIN [test:node] AS target ON relationship.[test:target] = target.[jcr:uuid] \"; query = queryManager.createQuery(queryString, Query.JCR_SQL2); validateQuery().rowCount(2).validate(query, query.execute()); queryString = \"SELECT node.[jcr:path], relationship.[test:target], target.[jcr:path] FROM [test:node] AS node \" + \" JOIN [test:relationship] AS relationship ON ISCHILDNODE(relationship, node) \" + \" JOIN [test:node] AS target ON relationship.[test:target] = target.[jcr:uuid] \" + \" WHERE node.[test:name] = 'A'\"; query = queryManager.createQuery(queryString, Query.JCR_SQL2); validateQuery().rowCount(2).validate(query, query.execute()); queryString = \"SELECT DISTINCT target.* FROM [test:node] AS node \" + \" JOIN [test:relationship] AS relationship ON ISCHILDNODE(relationship, node) \" + \" JOIN [test:node] AS target ON relationship.[test:target] = target.[jcr:uuid] \" + \" WHERE node.[test:name] = 'A'\"; query = queryManager.createQuery(queryString, Query.JCR_SQL2); validateQuery().rowCount(2).validate(query, query.execute()); } finally { nodeA.remove(); nodeB.remove(); nodeC.remove(); session.save(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void closeRow() { listGroupItemHeader.removeClassName(LIST_VIEW_PF_EXPAND_ACTIVE); listGroupItemContainer.addClassName(HIDDEN); faAngleRight.removeClassName(FA_ANGLE_DOWN); }### Assistant: @Test public void closeRow() { listGroupItemViewSpy.closeRow(); verify(listGroupItemHeaderMock, times(1)).removeClassName(eq(LIST_VIEW_PF_EXPAND_ACTIVE)); verify(listGroupItemContainerMock, times(1)).addClassName(eq(HIDDEN)); verify(faAngleRightMock, times(1)).removeClassName(eq(FA_ANGLE_DOWN)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T1> get1() { return getAndCast(1); }### Assistant: @Test void get1() { assertEquals(m1, instance.get1()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected RequestBuilder getChangeHostnameInAuthorizedKeysCommand( String oldHostname, String newHostname ) { return new RequestBuilder( String.format( \"chmod 700 %3$s && sed -i 's/\\\\b%1$s\\\\b/%2$s/g' %3$s && chmod 644 %3$s\", oldHostname, newHostname, Common.CONTAINER_SSH_FILE ) ); }### Assistant: @Test public void testGetChangeHostnameInAuthorizedKeysCommand() throws Exception { assertEquals( \"chmod 700 /root/.ssh/authorized_keys && sed -i 's/\\\\bOLD\\\\b/NEW/g' /root/.ssh/authorized_keys \" + \"&& chmod 644 /root/.ssh/authorized_keys\", localPeerCommands.getChangeHostnameInAuthorizedKeysCommand( \"OLD\", \"NEW\" ).build( \"ID\" ).getCommand() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<NumberElement> parse(String number) { CharStream cs = CharStreams.fromString(number); InternalNumberLexer lexer = new InternalNumberLexer(cs); lexer.removeErrorListeners(); CommonTokenStream tokens = new CommonTokenStream(lexer); InternalNumberParser parser = new InternalNumberParser(tokens); parser.removeErrorListeners(); InternalNumberParser.NumbersContext ctx = parser.numbers(); if (ctx.exception != null || parser.getNumberOfSyntaxErrors() > 0 || ctx.elements.isEmpty()) { return Collections.singletonList(new NumberElement(number)); } return ctx.elements; }### Assistant: @Test public void simple() { assertEquals(Collections.singletonList( new NumberElement(\"10\")), NumberParser.parse(\"10\")); assertEquals(Collections.singletonList( new NumberElement(\"10\")), NumberParser.parse(\" 10 \")); assertEquals(Collections.singletonList( new NumberElement(\"10a\")), NumberParser.parse(\"10a\")); assertEquals(Collections.singletonList( new NumberElement(\"foo\")), NumberParser.parse(\"foo\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static SubscriptionEventAdapter of(final HeaderTranslator headerTranslator, final ErrorRegistry<?> errorRegistry) { return new SubscriptionEventAdapter(checkNotNull(headerTranslator, \"headerTranslator\"), checkNotNull(errorRegistry, \"errorRegistry\")); }### Assistant: @Test public void subscriptionCompleteToAdaptable() { final TopicPath topicPath = TopicPath.fromNamespace(\"_\") .things() .twin() .search() .complete() .build(); final JsonPointer path = JsonPointer.empty(); final Adaptable expected = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path) .withValue(JsonObject.of( String.format(\"{\\\"subscriptionId\\\": \\\"%s\\\"}\", TestConstants.SUBSCRIPTION_ID))) .build()) .withHeaders(TestConstants.DITTO_HEADERS_V_2_NO_STATUS) .build(); final SubscriptionComplete subscriptionComplete = SubscriptionComplete.of(TestConstants.SUBSCRIPTION_ID, TestConstants.DITTO_HEADERS_V_2_NO_STATUS); final Adaptable actual = underTest.toAdaptable(subscriptionComplete, TopicPath.Channel.TWIN); assertWithExternalHeadersThat(actual).isEqualTo(expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Term parse(InputStream source) { ExpressionLexer lexer; try { lexer = new ExpressionLexer(CharStreams.fromStream(source)); } catch (IOException e) { throw new RuntimeException(e); } ExpressionStringListener listener = new ExpressionStringListener(); new ParseTreeWalker().walk(listener, new ExpressionParser(new CommonTokenStream(lexer)).expressionString()); return listener.getRoot(); }### Assistant: @Test void parseSimple() { Term term = SUT.parse(IOUtils.toInputStream(\"payload.lengthInBytes+4\", Charset.defaultCharset())); assertThat(term, not(nullValue())); assertThat(term, instanceOf(BinaryTerm.class)); BinaryTerm binaryTerm = (BinaryTerm) term; assertVariableLiteral( binaryTerm.getA(), \"payload\", null, lengthInBytesVariableLiteral -> assertVariableLiteral( lengthInBytesVariableLiteral, \"lengthInBytes\" ) ); assertNumericLiteral(binaryTerm.getB(), 4L); assertThat(binaryTerm.getOperation(), is(\"+\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = {\"/ms_dictionary/save_location\"}, method = {RequestMethod.POST}) public ModelAndView saveMicroServiceLocationDictionary(HttpServletRequest request, HttpServletResponse response) throws IOException { DictionaryUtils utils = getDictionaryUtilsInstance(); try { boolean fromAPI = utils.isRequestFromAPI(request); ObjectMapper mapper = new ObjectMapper(); mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); JsonNode root = mapper.readTree(request.getReader()); MicroServiceLocation microServiceLocation; if (fromAPI) { microServiceLocation = mapper.readValue(root.get(dictionaryFields).toString(), MicroServiceLocation.class); } else { microServiceLocation = mapper.readValue(root.get(\"microServiceLocationDictionaryData\").toString(), MicroServiceLocation.class); } List<Object> duplicateData = commonClassDao.checkDuplicateEntry(microServiceLocation.getName(), \"name\", MicroServiceLocation.class); boolean duplicateflag = false; if (duplicateData != null && !duplicateData.isEmpty()) { MicroServiceLocation data = (MicroServiceLocation) duplicateData.get(0); if (request.getParameter(operation) != null && \"update\".equals(request.getParameter(operation))) { microServiceLocation.setId(data.getId()); } else if ((request.getParameter(operation) != null && !\"update\".equals(request.getParameter(operation))) || (request.getParameter(operation) == null && (data.getId() != microServiceLocation.getId()))) { duplicateflag = true; } } String responseString = null; if (!duplicateflag) { if (microServiceLocation.getId() == 0) { commonClassDao.save(microServiceLocation); } else { commonClassDao.update(microServiceLocation); } responseString = mapper.writeValueAsString(commonClassDao.getData(MicroServiceLocation.class)); } else { responseString = duplicateResponseString; } if (fromAPI) { return utils.getResultForApi(responseString); } else { utils.setResponseData(response, microServiceLocationDatas, responseString); } } catch (Exception e) { utils.setErrorResponseData(response, e); } return null; }### Assistant: @Test public void testSaveMicroServiceLocationDictionary() { logger.info(\"testSaveMicroServiceLocationDictionary: Entering\"); MockHttpServletResponse response = new MockHttpServletResponse(); request = mock(HttpServletRequest.class); try { jsonString = \"{\\\"microServiceLocationDictionaryData\\\": {\\\"modelName\\\": \\\"test\\\",\\\"inprocess\\\": false,\" + \"\\\"model\\\": {\\\"name\\\": \\\"testingdata\\\",\\\"subScopename\\\": \\\"\\\",\\\"path\\\": [],\" + \"\\\"type\\\": \\\"dir\\\",\\\"size\\\": 0,\\\"date\\\": \\\"2017-04-12T21:26:57.000Z\\\",\" + \"\\\"version\\\": \\\"\\\",\\\"createdBy\\\": \\\"someone\\\",\\\"modifiedBy\\\": \\\"someone\\\",\" + \"\\\"content\\\": \\\"\\\",\\\"recursive\\\": false},\\\"tempModel\\\": \" + \"{\\\"name\\\": \\\"testingdata\\\",\\\"subScopename\\\": \\\"\\\"},\" + \" \\\"policy\\\": {\\\"policyType\\\": \\\"Config\\\",\\\"configPolicyType\\\": \\\"Micro Service\\\",\" + \"\\\"policyName\\\": \\\"may1501\\\",\\\"policyDescription\\\": \\\"testing input\\\",\" + \"\\\"onapName\\\": \\\"RaviTest\\\",\\\"guard\\\": \\\"False\\\",\\\"riskType\\\": \\\"Risk12345\\\",\" + \"\\\"riskLevel\\\": \\\"2\\\",\\\"priority\\\": \\\"6\\\",\\\"serviceType\\\": \\\"DkatPolicyBody\\\",\" + \"\\\"version\\\": \\\"1707.41.02\\\",\\\"ruleGridData\\\": [[\\\"fileId\\\"]],\\\"ttlDate\\\": null}},\" + \"\\\"policyJSON\\\": {\\\"pmTableName\\\": \\\"test\\\",\\\"dmdTopic\\\": \\\"1\\\",\\\"fileId\\\": \\\"56\\\"}}\"; BufferedReader br = new BufferedReader(new StringReader(jsonString)); when(request.getReader()).thenReturn(br); controller.saveMicroServiceLocationDictionary(request, response); logger.info(\"response.getContentAsString(): \" + response.getContentAsString()); assertTrue(response.getContentAsString() != null && response.getContentAsString().contains(\"microServiceLocationDictionaryDatas\")); } catch (Exception e) { fail(\"Exception: \" + e); } logger.info(\"testSaveMicroServiceLocationDictionary: exit\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public JSONObject values() throws JSONException { List<Object> names = asList(names()); Iterable<Object> systemFields = Iterables.transform(ChildTableColumn.systemFields(), new Function<ChildTableColumn, Object>() { @Override public Object apply(ChildTableColumn childTableColumn) { return childTableColumn.getColumnName(); } }); Iterables.removeAll(names, Lists.newArrayList(systemFields)); return new JSONObject(this, names.toArray(new String[names.size()])); }### Assistant: @Test public void shouldRemoveFieldIfBlank() throws JSONException { Child child = new Child(); child.put(\"name\", \"test\"); assertThat(child.values().names().length(), equalTo(1)); child.put(\"name\", \"\\r \\n \\r \\n\"); assertNull(child.values().names()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String username() { return username; }### Assistant: @Test public void username() throws Exception { assertEquals(HttpUrl.parse(\"http: assertEquals(HttpUrl.parse(\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int read(final ByteBuffer dst) throws IOException { Args.notNull(dst, \"Byte buffer\"); if (this.state == State.COMPLETED) { return -1; } int totalRead = 0; while (this.state != State.COMPLETED) { if (!this.buffer.hasData() || this.chunkSize == -1L) { final int bytesRead = fillBufferFromChannel(); if (bytesRead == -1) { this.endOfStream = true; } } switch (this.state) { case READ_CONTENT: if (this.chunkSize == -1L) { readChunkHead(); if (this.chunkSize == -1L) { return totalRead; } if (this.chunkSize == 0L) { this.chunkSize = -1L; this.state = State.READ_FOOTERS; break; } } final long maxLen = this.chunkSize - this.pos; final int len = this.buffer.read(dst, (int) Math.min(maxLen, Integer.MAX_VALUE)); if (len > 0) { this.pos += len; totalRead += len; } else { if (!this.buffer.hasData() && this.endOfStream) { this.state = State.COMPLETED; setCompleted(); throw new TruncatedChunkException( \"Truncated chunk (expected size: %d; actual size: %d)\", chunkSize, pos); } } if (this.pos == this.chunkSize) { this.chunkSize = -1L; this.pos = 0L; this.endOfChunk = true; break; } return totalRead; case READ_FOOTERS: if (this.lineBuf == null) { this.lineBuf = new CharArrayBuffer(32); } else { this.lineBuf.clear(); } if (!this.buffer.readLine(this.lineBuf, this.endOfStream)) { if (this.endOfStream) { this.state = State.COMPLETED; setCompleted(); } return totalRead; } if (this.lineBuf.length() > 0) { final int maxHeaderCount = this.http1Config.getMaxHeaderCount(); if (maxHeaderCount > 0 && trailerBufs.size() >= maxHeaderCount) { throw new MessageConstraintException(\"Maximum header count exceeded\"); } parseHeader(); } else { this.state = State.COMPLETED; setCompleted(); processFooters(); } break; } } return totalRead; }### Assistant: @Test public void testReadingWitSmallBuffer() throws Exception { final String s = \"10\\r\\n1234567890123456\\r\\n\" + \"40\\r\\n12345678901234561234567890123456\" + \"12345678901234561234567890123456\\r\\n0\\r\\n\"; final ReadableByteChannel channel = new ReadableByteChannelMock( new String[] {s}, StandardCharsets.US_ASCII); final SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, 0, StandardCharsets.US_ASCII); final BasicHttpTransportMetrics metrics = new BasicHttpTransportMetrics(); final ChunkDecoder decoder = new ChunkDecoder(channel, inbuf, metrics); final ByteBuffer dst = ByteBuffer.allocate(1024); final ByteBuffer tmp = ByteBuffer.allocate(10); int bytesRead = 0; while (dst.hasRemaining() && !decoder.isCompleted()) { final int i = decoder.read(tmp); if (i > 0) { bytesRead += i; tmp.flip(); dst.put(tmp); tmp.compact(); } } Assert.assertEquals(80, bytesRead); Assert.assertEquals(\"12345678901234561234567890123456\" + \"12345678901234561234567890123456\" + \"1234567890123456\", CodecTestUtils.convert(dst)); Assert.assertTrue(decoder.isCompleted()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Table read(CsvReadOptions options) throws IOException { return read(options, false); }### Assistant: @Test public void testBoundary1() throws IOException { Table table = Table.read().csv(\"../data/boundaryTest1.csv\"); assertEquals(2, table.rowCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public java.sql.Date getCurrentJavaSqlDate() { return new java.sql.Date(new DateTime().getMillis()); }### Assistant: @Test public void testGetCurrentJavaSqlDate() { DateTimeService dateTimeService = new DateTimeService(); DateTime dateTime = new DateTime(2008,1,1,12,0,0,0); dateTimeService.setCurrentDateTimeFixed(dateTime); DateTime javaSqlDateTime = new DateTime(dateTimeService.getCurrentJavaSqlDate().getTime()); Assert.assertEquals(\"Dates should be equal\", dateTime.toLocalDate(), javaSqlDateTime.toLocalDate()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T4> get4() { return getAndCast(4); }### Assistant: @Test void get4() { assertEquals(m4, instance.get4()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getPageUrl(int pageIndex) { Map<String, Object> attr = createAttributeMap(pageIndex, page.getSize(), page.getSort()); StringBuilder pageUriBuilder = new StringBuilder(pageUri.expand(attr) .encode().toUriString()); if (StringUtils.hasLength(criteriaQuery)) { if (pageUri.getQueryParams().isEmpty()) { pageUriBuilder.append(\"?\"); } else { pageUriBuilder.append(\"&\"); } pageUriBuilder.append(criteriaQuery); } return pageUriBuilder.toString(); }### Assistant: @Test public void issue12_testGetPageUrl_criteriaQueryIsEmpty() { PaginationInfo info = new PaginationInfo(page, pathTmpl, queryTmpl, \"\", false, 10); String expectedURL = \"terasoluna?value=test&page=0&size=5\"; assertThat(info.getPageUrl(0), is(expectedURL)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static float coerceNumberObjectToFloatPrimitive(Object numberObject) { if (numberObject == null) { return 0; } if (numberObject instanceof Integer) { Integer number = (Integer) numberObject; return number.floatValue(); } else if (numberObject instanceof Double) { Double number = (Double) numberObject; return number.floatValue(); } else if (numberObject instanceof Long) { Long number = (Long) numberObject; return number.floatValue(); } else { float finalValue; try { finalValue = (float) numberObject; } catch (ClassCastException e) { finalValue = 0f; } return finalValue; } }### Assistant: @Test public void coerceNumberObjectToFloatPrimitiveWhenGivenDoublePrimitiveShouldReturnDoublePrimitive() { float expectedFloat = 8923.23099F; double doublePrimitive = new Double(8923.23099F); assertEquals(expectedFloat, ObjectCoercer.coerceNumberObjectToFloatPrimitive(expectedFloat), 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int compareDate(Date first, Date second) { if ((first == null) && (second == null)) { return 0; } if (first == null) { return -1; } if (second == null) { return 1; } if (first.before(second)) { return -1; } if (first.after(second)) { return 1; } return 0; }### Assistant: @Test public void compareDate() { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public PublicKey derivePublicKey(PrivateKey privateKey) { if (privateKey == null) { throw new IllegalArgumentException(\"PrivateKey must not be null.\"); } PublicKeyDelegate delegate = schemeProvider.getPublicKeyDelegate(); byte[] publicKeySeed = delegate.generatePublicKeySeed(privateKey); return new PublicKey(publicKeySeed); }### Assistant: @Test(expected = IllegalArgumentException.class) public void failure_GeneratePublicKey_Curve25519() { KeyGenerator generator = new Edwards().getKeyGenerator(); generator.derivePublicKey(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void setSecurityContext(ApplicationUser applicationUser) { userNamespaceAuthorizationHelper.buildNamespaceAuthorizations(applicationUser); SecurityContextHolder.getContext().setAuthentication(new PreAuthenticatedAuthenticationToken( new SecurityUserWrapper(applicationUser.getUserId(), \"\", true, true, true, true, Collections.emptyList(), applicationUser), null)); }### Assistant: @Test public void testSetSecurityContext() throws Exception { String jobDefinitionNamespace = \"jobDefinitionNamespace\"; String jobDefinitionName = \"jobDefinitionName\"; String processDefinitionId = \"processDefinitionId\"; String processDefinitionKey = String.format(\"%s.%s\", jobDefinitionNamespace, jobDefinitionName); String updatedBy = \"updatedBy\"; JobDefinitionEntity jobDefinitionEntity = new JobDefinitionEntity(); jobDefinitionEntity.setUpdatedBy(updatedBy); when(delegateExecution.getProcessDefinitionId()).thenReturn(processDefinitionId); ProcessDefinition processDefinition = mock(ProcessDefinition.class); when(processDefinition.getKey()).thenReturn(processDefinitionKey); when(activitiService.getProcessDefinitionById(any())).thenReturn(processDefinition); when(jobDefinitionDaoHelper.getJobDefinitionEntity(any(), any())).thenReturn(jobDefinitionEntity); SecurityContextHolder.clearContext(); baseJavaDelegate.setSecurityContext(baseJavaDelegate.getApplicationUser(delegateExecution)); InOrder inOrder = inOrder(activitiService, jobDefinitionDaoHelper, userNamespaceAuthorizationHelper); inOrder.verify(activitiService).getProcessDefinitionById(processDefinitionId); inOrder.verify(jobDefinitionDaoHelper).getJobDefinitionEntity(jobDefinitionNamespace, jobDefinitionName); inOrder.verify(userNamespaceAuthorizationHelper).buildNamespaceAuthorizations(applicationUserUserIdEq(updatedBy)); inOrder.verifyNoMoreInteractions(); verifyNoMoreInteractions(activitiService, jobDefinitionDaoHelper, userNamespaceAuthorizationHelper); Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); assertAuthenticationUserIdEquals(updatedBy, authentication); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void addProperty(String key, Object value) throws ProcessBagException { if (properties.containsKey(key)) { throw new ProcessBagException(key + \" already used!\"); } else { properties.put(key, value); } }### Assistant: @Test(expected = ProcessBagException.class) public void testAddProperty_shouldReturnException() { pb.addProperty(\"test\", \"42\"); pb.addProperty(\"test\", \"42\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CompositeData startBundles(long[] bundleIdentifiers) throws IOException { if (bundleIdentifiers == null) { return new BatchActionResult(\"Failed to start bundles, bundle id's can't be null\").toCompositeData(); } for (int i = 0; i < bundleIdentifiers.length; i++) { try { startBundle(bundleIdentifiers[i]); } catch (Throwable t) { return createFailedBatchActionResult(bundleIdentifiers, i, t); } } return new BatchActionResult(bundleIdentifiers).toCompositeData(); }### Assistant: @Test public void testStartBundles() throws Exception { Bundle bundle = Mockito.mock(Bundle.class); Mockito.when(context.getBundle(5)).thenReturn(bundle); CompositeData data = mbean.startBundles(new long[] { 5 }); Mockito.verify(bundle).start(); BatchActionResult batch = BatchActionResult.from(data); Assert.assertEquals(5, batch.getCompleted()[0]); Assert.assertTrue(batch.isSuccess()); Assert.assertNull(batch.getError()); Assert.assertNull(batch.getRemainingItems()); CompositeData data2 = mbean.startBundles(null); BatchActionResult batch2 = BatchActionResult.from(data2); Assert.assertNull(batch2.getCompleted()); Assert.assertFalse(batch2.isSuccess()); Assert.assertNotNull(batch2.getError()); Assert.assertNull(batch2.getRemainingItems()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<String> keyNames() { return keyNames; }### Assistant: @Test public void twoFunctions_keyNames() { assertThat(twoFunctions.keyNames()).containsExactly(\"one\", \"two\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = \"/catalogs\") public ServiceResult<List<String>> getDBCatalogs(@RequestParam(\"dbset_id\") Long dbsetId) throws Exception { return databaseService.getDBCatalogs(dbsetId); }### Assistant: @Test public void getDBCatalogs() throws Exception { mockMvc.perform(MockMvcRequestBuilders.get(\"/db/catalogs\") .contentType(MediaType.APPLICATION_JSON_UTF8) .accept(MediaType.APPLICATION_JSON_UTF8)) .andExpect(MockMvcResultMatchers.status().isOk()) .andDo(MockMvcResultHandlers.print()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<PublicStrategy> getAllPublicStrateges() throws SQLException { PublicStrategy.PublicStrategyDefinition p = PublicStrategy.PUBLICSTRATEGY; SqlBuilder builder = SqlBuilder.selectAllFrom(p).into(PublicStrategy.class); return this.getDasClient().query(builder); }### Assistant: @Test public void getAllPublicStrateges() throws Exception { List<PublicStrategy> list = publicStrategyDao.getAllPublicStrateges(); System.out.println(\"getAllPublicStrateges :-------> \" + list); Assert.assertTrue(list.size() > 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<String> getDelimitedConfigurationValue(ConfigurationValue configurationValue) { return splitStringWithDefaultDelimiter(configurationHelper.getProperty(configurationValue)); }### Assistant: @Test public void testGetDelimitedConfigurationValueWhenValueIsNullAssertResultIsEmpty() throws Exception { Map<String, Object> overrideMap = new HashMap<>(); overrideMap.put(ConfigurationValue.EMR_SPOT_PRICE_HISTORY_PRODUCT_DESCRIPTIONS.getKey(), null); modifyPropertySourceInEnvironment(overrideMap); try { List<String> actualList = herdStringHelper.getDelimitedConfigurationValue(ConfigurationValue.EMR_SPOT_PRICE_HISTORY_PRODUCT_DESCRIPTIONS); assertEquals(Arrays.asList(), actualList); } finally { restorePropertySourceInEnvironment(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void clear() { segments.clear(); }### Assistant: @Test public void clear() { FinderPath path = new FinderPath().append(\"foo\", \"bar\"); assertFalse(path.isEmpty()); assertEquals(1, path.size()); path.clear(); assertTrue(path.isEmpty()); assertEquals(0, path.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public synchronized StubDescriptor buildStubDescriptor(final InputStream inputStream) { try { Document document = xmlDocumentBuilder.buildDocument(inputStream, stubConfigSchema.getSchema()); validate(document); stubResourceHolderUpdater.initializeTemporaryResourceHolder(); configurationAccess.setProperties(); StubDescriptor stubDescriptor = descriptorParser.parse(document); stubResourceHolderUpdater.updateResourceHolder(); stubResourceHolderUpdater.clearTemporaryResourceHolder(); StubDescriptorAttributes attributes = stubDescriptor.getAttributes(); stubResourceHolderUpdater.addDocumentToResourceHolder(attributes.getGroupName(), document); return stubDescriptor; } catch (DocumentBuilderException e) { throw new DescriptorCannotBeParsedException(\"Stub descriptor cannot be parsed.\", e); } }### Assistant: @Test public final void testBuildStubDescriptorShouldCallUpdaterInitialize() throws Exception { given(xmlDocumentBuilder.buildDocument(inputStream, schema)).willReturn(document); given(descriptorBuilder.parse(document)).willReturn(stubDescriptor); underTest.buildStubDescriptor(inputStream); verify(stubResourceHolderUpdater).initializeTemporaryResourceHolder(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String buildUrl(TileCode tileCode, String baseTmsUrl) { return buildUrl(tileCode, tileMap, baseTmsUrl); }### Assistant: @Test public void testBuildUrlCornerCases() throws TmsLayerException { try { new TileMapUrlBuilder(null); Assert.fail(); } catch (IllegalStateException e) { } TmsLayer tmsLayer = new TmsLayer(); tmsLayer.setBaseTmsUrl(\"classpath:/org/geomajas/layer/tms/tileMapCapa2.xml\"); TileMap tileMap = configurationService .getCapabilities(tmsLayer); TileMapUrlBuilder builder = new TileMapUrlBuilder(tileMap); try { builder.buildUrl(null, BASE_TMS_URL); Assert.fail(); } catch (IllegalArgumentException e) { } try { builder.buildUrl(new TileCode(), null); Assert.fail(); } catch (IllegalArgumentException e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static float atan(float fValue) { return (float) Math.atan(fValue); }### Assistant: @Test public void testAtan() { assertEquals(0.0f, FastMath.atan2(0.0f, 0.0f), 0.0f); assertEquals(0.076f, FastMath.atan2(1.0f, 13.0f), 0.01f); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String[] sanitize(final String size) { LOG.debug(\"Sanitizing '{}'\", size); final Pattern patternClass = Pattern.compile(\"([0-9.]+)\\\\s*?([kMGTP]?B)\"); final Matcher m = patternClass.matcher(size); String[] s = new String[]{size, \"B\"}; if (m.find()) { final String pureSize = m.group(1); final String sizeClass = m.group(2); s = new String[]{pureSize, sizeClass}; } if(LOG.isDebugEnabled()) { LOG.debug(\"Sanitized: {}\", Arrays.deepToString(s)); } return s; }### Assistant: @Test public void sanitizeKilobytes() { assertArrayEquals(new String[]{\"123456789\", \"kB\"}, HumanReadableSize.sanitize(\"123456789kB\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected static String[] extractTargetVars(String command, String valueName) { String[] targetVars = new String[] {}; int valueIndex = command.indexOf(valueName); if (valueIndex > -1) { String subCmd = command.substring(0, valueIndex).toLowerCase(); int valuesIndex = subCmd.lastIndexOf(VALUES_KEYWORD); int openBracesIndex = subCmd.lastIndexOf(\"{\"); int closeBracesIndex = subCmd.lastIndexOf(\"}\"); if (valuesIndex > -1 && valuesIndex < openBracesIndex && closeBracesIndex < valuesIndex) { String vars = command.substring(valuesIndex + VALUES_KEYWORD.length(), openBracesIndex); targetVars = vars.replaceAll(\"[(?$)]\", \"\").trim().split(\" \"); } } return targetVars; }### Assistant: @Test public void test_extract_target_vars_missing_brace() { String cmd = \"SELECT * WHERE { VALUES ?o ?objs} ?s ?p ?o }\"; String valueName = \"objs\"; String[] res = ParameterizedSparqlString.extractTargetVars(cmd, valueName); String[] exp = new String[]{}; Assert.assertArrayEquals(exp, res); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean verifySignature( ContentAndSignatures contentAndSignatures, PGPPublicKey publicKey ) throws PGPException { Preconditions.checkNotNull( contentAndSignatures ); Preconditions.checkNotNull( publicKey ); try { for ( int i = 0; i < contentAndSignatures.getOnePassSignatureList().size(); i++ ) { PGPOnePassSignature ops = contentAndSignatures.getOnePassSignatureList().get( 0 ); ops.init( new JcaPGPContentVerifierBuilderProvider().setProvider( provider ), publicKey ); ops.update( contentAndSignatures.getDecryptedContent() ); PGPSignature signature = contentAndSignatures.getSignatureList().get( i ); if ( !ops.verify( signature ) ) { return false; } } return true; } catch ( Exception e ) { throw new PGPException( \"Error in verifySignature\", e ); } }### Assistant: @Test public void verifySignature() throws Exception { String message = getSignedMessage(); PGPPublicKeyRing pubKeyRing = PGPKeyUtil.readPublicKeyRing( getPublicKey() ); assertTrue( PGPEncryptionUtil.verifyClearSign( message.getBytes(), pubKeyRing ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static float acos(float fValue) { if (-1.0f < fValue) { if (fValue < 1.0f) { return (float) Math.acos(fValue); } return 0.0f; } return PI; }### Assistant: @Test public void testAcos() { assertEquals((float)Math.PI, FastMath.acos(-2.0f), 0.01f); assertEquals(0.0f, FastMath.acos(2.0f), 0.0f); assertEquals(1.57f, FastMath.acos(0.0f), 0.01f); assertEquals(1.047f, FastMath.acos(0.5f), 0.01f); assertEquals(0.0f, FastMath.acos(Float.POSITIVE_INFINITY), 0.0f); assertEquals(0x1.921fb6p+1f, FastMath.acos(-0x1p+113f), 0.01f); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public VariantAnnotation annotate(String contig, int pos, String ref, String alt) { AllelePosition trimmedAllele = AllelePosition.trim(pos, ref, alt); VariantAnnotations variantAnnotations = jannovarAnnotationService.annotateVariant(contig, trimmedAllele.getPos(), trimmedAllele .getRef(), trimmedAllele.getAlt()); return buildVariantAlleleAnnotation(genomeAssembly, contig, trimmedAllele, variantAnnotations); }### Assistant: @Test public void testGetAnnotationsForUnTrimmedDeletionTrimmedWithAllelePosition() { int pos = 118608470; String ref = \"AGTT\"; String alt = \"AGT\"; AllelePosition trimmed = AllelePosition.trim(pos, ref, alt); VariantAnnotation variantAnnotation = instance.annotate(\"X\", pos, ref, alt); System.out.println(variantAnnotation); System.out.printf(\"AnnotationList{pos=%d, ref='%s', alt='%s'}%n\", variantAnnotation.getPosition(), variantAnnotation .getRef(), variantAnnotation.getAlt()); System.out.println(\"Trimmed: \" + trimmed); assertThat(variantAnnotation.getChromosome(), equalTo(23)); assertThat(variantAnnotation.getPosition(), equalTo(trimmed.getPos())); assertThat(variantAnnotation.getRef(), equalTo(trimmed.getRef())); assertThat(variantAnnotation.getAlt(), equalTo(trimmed.getAlt())); assertThat(variantAnnotation.hasTranscriptAnnotations(), is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<PrivilegedOperation> postComplete(ContainerId containerId) throws ResourceHandlerException { cGroupsHandler.deleteCGroup(CPU, containerId.toString()); return null; }### Assistant: @Test public void testPostComplete() throws Exception { String id = \"container_01_01\"; ContainerId mockContainerId = mock(ContainerId.class); when(mockContainerId.toString()).thenReturn(id); Assert.assertNull(cGroupsCpuResourceHandler.postComplete(mockContainerId)); verify(mockCGroupsHandler, times(1)) .deleteCGroup(CGroupsHandler.CGroupController.CPU, id); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall( final MethodDescriptor<ReqT, RespT> method, final CallOptions callOptions, final Channel delegateChannel) { if (resourceLimiter == null) { return delegateChannel.newCall(method, callOptions); } return new ClientCall<ReqT, RespT>() { private boolean cancelledEarly; private ClientCall.Listener<RespT> delegateListener = null; private ClientCall<ReqT, RespT> delegateCall; private Metadata headers; private int numMessagesRequested = 0; private Long id = null; @Override public void start(ClientCall.Listener<RespT> listener, Metadata headers) { Preconditions.checkState(!cancelledEarly, \"Call already cancelled\"); Preconditions.checkState( this.delegateListener == null && this.headers == null, \"Call already started\"); this.delegateListener = Preconditions.checkNotNull(listener); this.headers = Preconditions.checkNotNull(headers); } @Override public void request(int numMessages) { if (delegateCall != null) { delegateCall.request(numMessages); return; } Preconditions.checkState(!cancelledEarly, \"Call already cancelled\"); numMessagesRequested += numMessages; } @Override public void cancel(@Nullable String message, @Nullable Throwable cause) { if (delegateCall != null) { delegateCall.cancel(message, cause); return; } cancelledEarly = true; if (message == null && cause == null) { cause = new CancellationException(\"Cancelled without a message or cause\"); } if (delegateListener != null) { delegateListener.onClose( Status.CANCELLED.withDescription(message).withCause(cause), new Metadata()); } } @Override public void sendMessage(ReqT message) { Preconditions.checkState( delegateCall == null, \"ThrottlingClientInterceptor only supports unary operations\"); Preconditions.checkState( delegateListener != null && headers != null, \"start() has to be called before sendMessage().\"); Preconditions.checkState(!cancelledEarly, \"Call already cancelled\"); try { id = resourceLimiter.registerOperationWithHeapSize( ((MessageLite) message).getSerializedSize()); } catch (InterruptedException e) { delegateListener.onClose( Status.INTERNAL.withDescription(\"Operation was interrupted\"), new Metadata()); return; } delegateCall = delegateChannel.newCall(method, callOptions); SimpleForwardingClientCallListener<RespT> markCompletionListener = new SimpleForwardingClientCallListener<RespT>(this.delegateListener) { @Override public void onClose(io.grpc.Status status, Metadata trailers) { resourceLimiter.markCanBeCompleted(id); delegate().onClose(status, trailers); } }; delegateCall.start(markCompletionListener, headers); delegateCall.request(numMessagesRequested); delegateCall.sendMessage(message); delegateCall.halfClose(); } @Override public void halfClose() { } }; }### Assistant: @Test public void testCallProxy() { final ThrottlingClientInterceptor underTest = new ThrottlingClientInterceptor(mockResourceLimiter); ClientCall call = underTest.interceptCall(methodDescriptor, CallOptions.DEFAULT, mockChannel); call.start(mockListener, new Metadata()); call.sendMessage(request); call.halfClose(); call.request(1); verify(mockClientCall).start(any(ClientCall.Listener.class), any(Metadata.class)); verify(mockClientCall).sendMessage(request); verify(mockClientCall).halfClose(); verify(mockClientCall).request(1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"/uuid/{id}\") @Produces(MediaType.APPLICATION_JSON) @ApiOperation( value = \"Retrieve a Fact by its UUID.\", notes = \"This operation returns a Fact identified by its UUID. The request will be rejected with a 403 if a \" + \"user does not have access to the requested Fact.\\n\\n\" + \"If the access mode is Public the Fact will be available to everyone. If the access mode is Explicit \" + \"only users in the Fact's access control list will have access to the Fact. If the access mode is \" + \"RoleBased (the default mode) a user must be either in the Fact's ACL or have general role-based \" + \"access to the Organization owning the Fact. A user who created a Fact will always have access to it.\", response = Fact.class ) @ApiResponses({ @ApiResponse(code = 401, message = \"User could not be authenticated.\"), @ApiResponse(code = 403, message = \"User is not allowed to perform this operation.\"), @ApiResponse(code = 404, message = \"Requested Fact does not exist.\"), @ApiResponse(code = 412, message = \"Any parameter has an invalid format.\") }) @RolesAllowed(\"viewThreatIntelFact\") public Response getFactById( @PathParam(\"id\") @ApiParam(value = \"UUID of the requested Fact.\") @NotNull @Valid UUID id ) throws AccessDeniedException, AuthenticationFailedException, InvalidArgumentException, ObjectNotFoundException { return buildResponse(service.getFact(credentialsResolver.getRequestHeader(), new GetFactByIdRequest().setId(id))); }### Assistant: @Test public void testGetFactById() throws Exception { UUID id = UUID.randomUUID(); when(getTiService().getFact(any(), isA(GetFactByIdRequest.class))).then(i -> { assertEquals(id, i.<GetFactByIdRequest>getArgument(1).getId()); return Fact.builder().setId(id).build(); }); Response response = target(String.format(\"/v1/fact/uuid/%s\", id)).request().get(); assertEquals(200, response.getStatus()); assertEquals(id.toString(), getPayload(response).get(\"id\").textValue()); verify(getTiService(), times(1)).getFact(notNull(), isA(GetFactByIdRequest.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> Serializer from(T object) { return from(object, null); }### Assistant: @Test public void whenThereIsNoFormatGivenShouldForwardToDefaultPage() throws Exception { when(formatResolver.getAcceptFormat()).thenReturn(null); Serializer serializer = representation.from(new Object()); assertThat(serializer, is(instanceOf(IgnoringSerializer.class))); verify(status).notAcceptable(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean accept(final File file) { return file.isFile() && isMatchWithRegExp(file); }### Assistant: @Test public void testAcceptShouldReturnTrueWhenParameterFileAndNameMatchWithRegExp() { String fileName = \"20130701132107.0025req.txt\"; given(file.isFile()).willReturn(true); given(file.getName()).willReturn(fileName); boolean result = underTest.accept(file); assertTrue(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public byte[] allocDecodeBuffer(int size) { byte[] buf = decodingBuffer; if (buf == null || buf.length < size) { buf = new byte[size]; } else { decodingBuffer = null; } return buf; }### Assistant: @Test public void allocDecodeBuffer() { byte[] b = BufferRecycler.instance().allocDecodeBuffer(10); Assert.assertEquals(10, b.length); BufferRecycler.instance().releaseDecodeBuffer(b); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setCurrentSpeedData(@Nullable GuidanceSpeedData data) { populateUi(data); if (data == null || !data.isValid()) { mGuidanceSpeedData = data; return; } boolean refreshBackground = false; if (mGuidanceSpeedData == null || !mGuidanceSpeedData.isValid() || data.isSpeeding() != mGuidanceSpeedData.isSpeeding()) { refreshBackground = true; } mGuidanceSpeedData = data; if (refreshBackground) { post(this::refreshDrawableState); } }### Assistant: @Test public void testUiWhenDataIsNull() { mCurrentGuidanceSpeedView.setCurrentSpeedData(null); final View container = mCurrentGuidanceSpeedView.findViewById(R.id.guidance_current_speed_container); assertThat(container.getVisibility(), is(View.VISIBLE)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public synchronized int readChar() throws IOException { if (hasLowSurrogate) { hasLowSurrogate = false; return lowSurrogate; } if (buf.remaining() < maxCharWidth) { buf.clear(); buf.flip(); refillBuf(); } int start = buf.position(); charBuf.clear(); charBuf.limit(1); boolean isEndOfInput = false; if (position >= fileSize) { isEndOfInput = true; } CoderResult res = decoder.decode(buf, charBuf, isEndOfInput); if (res.isMalformed() || res.isUnmappable()) { res.throwException(); } int delta = buf.position() - start; charBuf.flip(); if (charBuf.hasRemaining()) { char c = charBuf.get(); incrPosition(delta, true); return c; } if (buf.hasRemaining()) { charBuf.clear(); charBuf.limit(2); res = decoder.decode(buf, charBuf, isEndOfInput); if (res.isMalformed() || res.isUnmappable()) { res.throwException(); } charBuf.flip(); if (charBuf.remaining() == 2) { char highSurrogate = charBuf.get(); lowSurrogate = charBuf.get(); if (!Character.isHighSurrogate(highSurrogate) || !Character.isLowSurrogate(lowSurrogate)) { logger.warn(\"Decoded a pair of chars, but it does not seem to be a surrogate pair: {} {}\", (int)highSurrogate, (int)lowSurrogate); } hasLowSurrogate = true; delta = buf.position() - start; incrPosition(delta, true); return highSurrogate; } } incrPosition(delta, false); return -1; }### Assistant: @Test public void testLatin1DecodeErrorHandlingReplace() throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream(); generateLatin1InvalidSequence(out); Files.write(out.toByteArray(), file); ResettableInputStream in = initInputStream(DecodeErrorPolicy.REPLACE); int c; StringBuilder sb = new StringBuilder(); while ((c = in.readChar()) != -1) { sb.append((char)c); } assertEquals(\"Invalid: (X)\\n\".replaceAll(\"X\", \"\\ufffd\"), sb.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void process(final HttpRequest request, final HttpContext context) throws HttpException, IOException { if (request == null) { throw new IllegalArgumentException(\"HTTP request may not be null\"); } String method = request.getRequestLine().getMethod(); if (method.equalsIgnoreCase(\"CONNECT\")) { return; } @SuppressWarnings(\"unchecked\") Collection<Header> defHeaders = (Collection<Header>) request.getParams().getParameter( ClientPNames.DEFAULT_HEADERS); if (defHeaders != null) { for (Header defHeader : defHeaders) { request.addHeader(defHeader); } } }### Assistant: @Test public void testDefaultHeaders() throws Exception { HttpRequest request = new BasicHttpRequest(\"GET\", \"/\"); request.addHeader(\"custom\", \"stuff\"); List<Header> defheaders = new ArrayList<Header>(); defheaders.add(new BasicHeader(\"custom\", \"more stuff\")); request.getParams().setParameter(AllClientPNames.DEFAULT_HEADERS, defheaders); HttpContext context = new BasicHttpContext(); HttpRequestInterceptor interceptor = new RequestDefaultHeaders(); interceptor.process(request, context); Header[] headers = request.getHeaders(\"custom\"); Assert.assertNotNull(headers); Assert.assertEquals(2, headers.length); Assert.assertEquals(\"stuff\", headers[0].getValue()); Assert.assertEquals(\"more stuff\", headers[1].getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer) throws Py4JException, IOException { String targetObjectId = reader.readLine(); String methodName = reader.readLine(); List<Object> arguments = getArguments(reader); ReturnObject returnObject = invokeMethod(methodName, targetObjectId, arguments); String returnCommand = Protocol.getOutputCommand(returnObject); logger.finest(\"Returning command: \" + returnCommand); writer.write(returnCommand); writer.flush(); }### Assistant: @Test public void testMethodWithParams() { String inputCommand = target + \"\\nmethod3\\ni1\\nbtrue\\ne\\n\"; try { command.execute(\"c\", new BufferedReader(new StringReader(inputCommand)), writer); assertEquals(\"!ysHello World\\n\", sWriter.toString()); } catch (Exception e) { e.printStackTrace(); fail(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public OutputSettings parseOutputSettings(Path analysisScript) { Map settingsMap = loadMap(analysisScript); return constructOutputSettingsFromMap(settingsMap); }### Assistant: @Test public void testParseOutputSettingsNoOutputFormats() { OutputSettings outputSettings = instance.parseOutputSettings( \"outputOptions:\\n\" + \" outputPassVariantsOnly: true\\n\" + \" numGenes: 1\\n\" + \" outputPrefix: results/Pfeiffer-hiphive\\n\" + \" outputFormats:\\n\"); Set<OutputFormat> outputFormats = EnumSet.noneOf(OutputFormat.class); assertThat(outputSettings.getOutputFormats(), equalTo((outputFormats))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean fence(HAServiceTarget fromSvc) { LOG.info(\"====== Beginning Service Fencing Process... ======\"); int i = 0; for (FenceMethodWithArg method : methods) { LOG.info(\"Trying method \" + (++i) + \"/\" + methods.size() +\": \" + method); try { if (method.method.tryFence(fromSvc, method.arg)) { LOG.info(\"====== Fencing successful by method \" + method + \" ======\"); return true; } } catch (BadFencingConfigurationException e) { LOG.error(\"Fencing method \" + method + \" misconfigured\", e); continue; } catch (Throwable t) { LOG.error(\"Fencing method \" + method + \" failed with an unexpected error.\", t); continue; } LOG.warn(\"Fencing method \" + method + \" was unsuccessful.\"); } LOG.error(\"Unable to fence service by any configured method.\"); return false; }### Assistant: @Test public void testArglessFencer() throws BadFencingConfigurationException { NodeFencer fencer = setupFencer( AlwaysSucceedFencer.class.getName()); assertTrue(fencer.fence(MOCK_TARGET)); assertEquals(1, AlwaysSucceedFencer.fenceCalled); assertSame(MOCK_TARGET, AlwaysSucceedFencer.fencedSvc); assertEquals(null, AlwaysSucceedFencer.callArgs.get(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac) { double polarizability; try { String originalAtomtypeName = atom.getAtomTypeName(); Integer originalNeighborCount = atom.getFormalNeighbourCount(); Integer originalHCount = atom.getImplicitHydrogenCount(); Integer originalValency = atom.getValency(); IAtomType.Hybridization originalHybridization = atom.getHybridization(); boolean originalFlag = atom.getFlag(CDKConstants.VISITED); Double originalBondOrderSum = atom.getBondOrderSum(); Order originalMaxBondOrder = atom.getMaxBondOrder(); polarizability = pol.calculateGHEffectiveAtomPolarizability(ac, atom, 100, true); atom.setAtomTypeName(originalAtomtypeName); atom.setFormalNeighbourCount(originalNeighborCount); atom.setValency(originalValency); atom.setImplicitHydrogenCount(originalHCount); atom.setFlag(CDKConstants.VISITED, originalFlag); atom.setHybridization(originalHybridization); atom.setMaxBondOrder(originalMaxBondOrder); atom.setBondOrderSum(originalBondOrderSum); return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult( polarizability), getDescriptorNames()); } catch (Exception ex1) { return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult( Double.NaN), getDescriptorNames(), ex1); } }### Assistant: @Test public void testPolarizabilityDescriptor_Isopentyl_iodide() throws Exception { double[] testResult = {8.3585, 6.1118, 6.1118, 9.081, 10.526, 8.69}; EffectiveAtomPolarizabilityDescriptor descriptor = new EffectiveAtomPolarizabilityDescriptor(); SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer mol = sp.parseSmiles(\"C(C)(C)CCI\"); addExplicitHydrogens(mol); for (int i = 0; i < 6; i++) { double result = ((DoubleResult) descriptor.calculate(mol.getAtom(i), mol).getValue()).doubleValue(); Assert.assertEquals(testResult[i], result, 0.01); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void onProviderTypeSelected(final DataSetProviderTypeWorkflow providerTypeWorkflow) { final DataSetProviderType selectedProviderType = providerTypeWorkflow.getProviderType(); try { clientServices.newDataSet(selectedProviderType, this::basicAttributesEdition); } catch (final Exception e) { showError(e.getCause() != null ? e.getCause().getMessage() : e.getMessage()); } }### Assistant: @Test public void testOnProviderTypeSelected() throws Exception { when(dataSetProviderTypeWorkflow.getProviderType()).thenReturn(DataSetProviderType.SQL); presenter.onProviderTypeSelected(dataSetProviderTypeWorkflow); assertEquals(dataSetBasicAttributesWorkflow, presenter.currentWorkflow); verify(view, times(1)).setWidget(any(IsWidget.class)); verify(dataSetBasicAttributesWorkflow, times(1)).edit(any(DataSetDef.class)); verify(editWorkflow, times(1)).showTestButton(); verify(editWorkflow, times(1)).showBackButton(); verify(editWorkflow, times(0)).showNextButton(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static BufferedImage scale(BufferedImage image, ImageSize size) { if (size == null) { log.error(\"The supplied image size is null.\"); throw new NullPointerException(\"The supplied image size is null.\"); } return scale(image, size.getWidth(), size.getHeight()); }### Assistant: @Test public void testScale() { BufferedImage uut = ImageScaler.scale(img, ImageSizePreset.FULL.getSize()); assertEquals(ImageSizePreset.FULL.getSize().getWidth(), uut.getWidth()); assertEquals(ImageSizePreset.FULL.getSize().getHeight(), uut.getHeight()); uut = ImageScaler.scale(img, ImageSizePreset.ICON.getSize()); assertEquals(ImageSizePreset.ICON.getSize().getWidth(), uut.getWidth()); assertEquals(ImageSizePreset.ICON.getSize().getHeight(), uut.getHeight()); uut = ImageScaler.scale(img, 2.2); assertEquals((int) (widthBefore * 2.2), uut.getWidth()); assertEquals((int) (heightBefore * 2.2), uut.getHeight()); uut = ImageScaler.scale(img, 0.33); assertEquals((int) (widthBefore * 0.33), uut.getWidth()); assertEquals((int) (heightBefore * 0.33), uut.getHeight()); uut = ImageScaler.scale(img, 1.0); assertEquals(widthBefore, uut.getWidth()); assertEquals(heightBefore, uut.getHeight()); uut = ImageScaler.scale(img, 0.001); assertEquals(1, uut.getWidth()); assertEquals(1, uut.getHeight()); uut = ImageScaler.scale(img, 1.0, 2.5); assertEquals(widthBefore, uut.getWidth()); assertEquals((int) (heightBefore * 2.5), uut.getHeight()); uut = ImageScaler.scale(img, 2.5, 1.0); assertEquals((int) (widthBefore * 2.5), uut.getWidth()); assertEquals(heightBefore, uut.getHeight()); uut = ImageScaler.scale(img, 0.5, 4.0); assertEquals((int) (widthBefore * 0.5), uut.getWidth()); assertEquals((int) (heightBefore * 4.0), uut.getHeight()); uut = ImageScaler.scale(img, 4.0, 0.5); assertEquals((int) (widthBefore * 4.0), uut.getWidth()); assertEquals((int) (heightBefore * 0.5), uut.getHeight()); uut = ImageScaler.scale(img, 807); assertEquals(807, uut.getWidth()); assertEquals(807, uut.getHeight()); uut = ImageScaler.scale(img, 122); assertEquals(122, uut.getWidth()); assertEquals(122, uut.getHeight()); uut = ImageScaler.scale(img, widthBefore); assertEquals(widthBefore, uut.getWidth()); assertEquals(widthBefore, uut.getHeight()); uut = ImageScaler.scale(img, widthBefore, 654); assertEquals(widthBefore, uut.getWidth()); assertEquals(654, uut.getHeight()); uut = ImageScaler.scale(img, 654, heightBefore); assertEquals(654, uut.getWidth()); assertEquals(heightBefore, uut.getHeight()); uut = ImageScaler.scale(img, 111, 555); assertEquals(111, uut.getWidth()); assertEquals(555, uut.getHeight()); uut = ImageScaler.scale(img, 555, 111); assertEquals(555, uut.getWidth()); assertEquals(111, uut.getHeight()); uut = ImageScaler.scale(img, 1, 1); assertEquals(1, uut.getWidth()); assertEquals(1, uut.getHeight()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isTypeVariable(TypeToken<?> type) { return type.getType() instanceof TypeVariable; }### Assistant: @Test public void isTypeVariable() throws Exception { final class Foo<T> { @SuppressWarnings(\"unused\") void foo(T t) {} } assertThat(Types.isTypeVariable( TypeToken.of( Foo.class.getDeclaredMethod(\"foo\", Object.class).getGenericParameterTypes()[0]))) .isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public float readFloat(final JBBPByteOrder byteOrder) throws IOException { final int value; if (byteOrder == JBBPByteOrder.BIG_ENDIAN) { value = (readUnsignedShort(byteOrder) << 16) | readUnsignedShort(byteOrder); } else { value = readUnsignedShort(byteOrder) | (readUnsignedShort(byteOrder) << 16); } return Float.intBitsToFloat(value); }### Assistant: @Test public void testReadFloat_LittleEndian() throws Exception { assertEquals(1.7378244E34f, asInputStream(0x12, 0x34, 0x56, 0x78).readFloat(JBBPByteOrder.LITTLE_ENDIAN), TestUtils.FLOAT_DELTA); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Optional<Map<String, Object>> getSingleResult() { List<Map<String, Object>> result = getResultList(); if (result.isEmpty()) { return Optional.empty(); } if (result.size() == 1) { return Optional.of(result.get(0)); } throw new NonUniqueResultException(\"The Edge traversal query returns more than one result\"); }### Assistant: @Test public void shouldReturnErrorWhenThereAreMoreThanOneInGetSingleResult() { assertThrows(NonUniqueResultException.class, () -> graphTemplate.getTraversalVertex() .hasLabel(Person.class).valueMap(\"name\") .getSingleResult()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void unlock(String password) { showLoadingDialog(); new Thread() { @Override public void run() { if (!WalletManager.getInstance().isValidWallet(mWallet, password)) { mHandler.sendEmptyMessage(MSG_PASSWORD_FAILED); return; } else { mHandler.sendEmptyMessage(MSG_OK); } } }.start(); }### Assistant: @Test public void unlock(){ Wallet wallet = new Wallet(); Bech32Address bech32Address = new Bech32Address(\"lat1jxeg784p2vuemglc7cy59mzgq50heg3gjt7fca\",\"lax1jxeg784p2vuemglc7cy59mzgq50heg3gawvxkj\"); wallet.setBech32Address(bech32Address); wallet.setKeystorePath(\"UTC--2020-07-13T14-46-35.629--2fe04afd39ac4bfd9374ee50ee5d3315b33038c81c618e19477d1ecf38d047162c0ca1bb640c864d730a5e1ef09630cb7704c1f564b2b0dd41fc79cf690adfdc.json\"); wallet.setName(\"\u6709\u94b1\"); wallet.setChainId(\"101\"); String key = \"\\\"{\\\"address\\\":{\\\"mainnet\\\":\\\"lat1jxeg784p2vuemglc7cy59mzgq50heg3gjt7fca\\\",\\\"testnet\\\":\\\"lax1jxeg784p2vuemglc7cy59mzgq50heg3gawvxkj\\\"},\\\"id\\\":\\\"d04685eb-8374-40e4-91f2-f7bbad28e83d\\\",\\\"version\\\":3,\\\"crypto\\\":{\\\"cipher\\\":\\\"aes-128-ctr\\\",\\\"cipherparams\\\":{\\\"iv\\\":\\\"2e3868606fff20dd9382c41a52dbd76c\\\"},\\\"ciphertext\\\":\\\"c867aea0d7619cd776419d6973a1250f8cd643787aeb6b707ad8acaf0ac099ec\\\",\\\"kdf\\\":\\\"scrypt\\\",\\\"kdfparams\\\":{\\\"dklen\\\":32,\\\"n\\\":16384,\\\"p\\\":1,\\\"r\\\":8,\\\"salt\\\":\\\"253bf6760852211172ca68f3f01fb7196a7643c5a887385dff3454a6f4da895f\\\"},\\\"mac\\\":\\\"390b4330a3317e7e1f65c12797c874ef73d35c372d36274e70fa6dbe96765c5d\\\"}}\\\"\"; wallet.setKey(key); wallet.setUuid(\"d04685eb-8374-40e4-91f2-f7bbad28e83d\"); presenter.setSelectWallet(wallet); String pws = \"qq123456\"; presenter.unlock(pws); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String join(List<? extends EncodedPair> pairs, char pairSep){ return join(pairs, pairSep, '=', false, false); }### Assistant: @Test public void joinWithWriterIteratorPairNameSepsQuoteNameValuesShouldJoinParamsAccordingly() throws IOException { StringWriter actual = new StringWriter(); Pairs.join(actual, PAIRS.iterator(), 's', 'e', true, true); assertEquals(\"\\\"p1\\\"e\\\"v1\\\"s\\\"p2\\\"e\\\"v2\\\"\", actual.toString()); actual = new StringWriter(); Pairs.join(actual, PAIRS.iterator(), 's', 'e', false, true); assertEquals(\"p1e\\\"v1\\\"sp2e\\\"v2\\\"\", actual.toString()); actual = new StringWriter(); Pairs.join(actual, PAIRS.iterator(), 's', 'e', true, false); assertEquals(\"\\\"p1\\\"ev1s\\\"p2\\\"ev2\", actual.toString()); actual = new StringWriter(); Pairs.join(actual, PAIRS.iterator(), 's', 'e', false, false); assertEquals(\"p1ev1sp2ev2\", actual.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void populateDAG(DAG dag, Configuration c) { int topNtupleCount = 10; LogstreamPropertyRegistry registry = new LogstreamPropertyRegistry(); dag.setAttribute(DAG.APPLICATION_NAME, \"Logstream Application\"); dag.setAttribute(DAG.STREAMING_WINDOW_SIZE_MILLIS, 500); RabbitMQLogsInputOperator logInput = dag.addOperator(\"LogInput\", new RabbitMQLogsInputOperator()); logInput.setRegistry(registry); logInput.addPropertiesFromString(new String[] {\"localhost:5672\", \"logsExchange\", \"direct\", \"apache:mysql:syslog:system\"}); JsonByteArrayOperator jsonToMap = dag.addOperator(\"JsonToMap\", new JsonByteArrayOperator()); jsonToMap.setConcatenationCharacter('_'); FilterOperator filterOperator = dag.addOperator(\"FilterOperator\", new FilterOperator()); filterOperator.setRegistry(registry); filterOperator.addFilterCondition(new String[] {\"type=apache\", \"response\", \"response.equals(\\\"404\\\")\"}); filterOperator.addFilterCondition(new String[] {\"type=apache\", \"agentinfo_name\", \"agentinfo_name.equals(\\\"Firefox\\\")\"}); filterOperator.addFilterCondition(new String[] {\"type=apache\", \"default=true\"}); filterOperator.addFilterCondition(new String[] {\"type=mysql\", \"default=true\"}); filterOperator.addFilterCondition(new String[] {\"type=syslog\", \"default=true\"}); filterOperator.addFilterCondition(new String[] {\"type=system\", \"default=true\"}); DimensionOperator dimensionOperator = dag.addOperator(\"DimensionOperator\", new DimensionOperator()); dimensionOperator.setRegistry(registry); String[] dimensionInputString1 = new String[] {\"type=apache\", \"timebucket=s\", \"dimensions=request\", \"dimensions=clientip\", \"dimensions=clientip:request\", \"values=bytes.sum:bytes.avg\"}; String[] dimensionInputString2 = new String[] {\"type=system\", \"timebucket=s\", \"dimensions=disk\", \"values=writes.avg\"}; String[] dimensionInputString3 = new String[] {\"type=syslog\", \"timebucket=s\", \"dimensions=program\", \"values=pid.count\"}; dimensionOperator.addPropertiesFromString(dimensionInputString1); dimensionOperator.addPropertiesFromString(dimensionInputString2); dimensionOperator.addPropertiesFromString(dimensionInputString3); LogstreamTopN topN = dag.addOperator(\"TopN\", new LogstreamTopN()); topN.setN(topNtupleCount); topN.setRegistry(registry); LogstreamWidgetOutputOperator widgetOut = dag.addOperator(\"WidgetOut\", new LogstreamWidgetOutputOperator()); widgetOut.logstreamTopNInput.setN(topNtupleCount); widgetOut.setRegistry(registry); ConsoleOutputOperator consoleOut = dag.addOperator(\"ConsoleOut\", new ConsoleOutputOperator()); dag.addStream(\"inputJSonToMap\", logInput.outputPort, jsonToMap.input); dag.addStream(\"toFilterOper\", jsonToMap.outputFlatMap, filterOperator.input); dag.addStream(\"toDimensionOper\", filterOperator.outputMap, dimensionOperator.in); dag.addStream(\"toTopN\", dimensionOperator.aggregationsOutput, topN.data); dag.addStream(\"toWS\", topN.top, widgetOut.logstreamTopNInput, consoleOut.input); dag.setInputPortAttribute(jsonToMap.input, PortContext.PARTITION_PARALLEL, true); dag.setInputPortAttribute(filterOperator.input, PortContext.PARTITION_PARALLEL, true); dag.setInputPortAttribute(consoleOut.input, PortContext.PARTITION_PARALLEL, true); }### Assistant: @Test @Ignore public void testSomeMethod() throws Exception { Configuration conf = new Configuration(false); LocalMode lma = LocalMode.newInstance(); Application1 application = new Application1(); application.populateDAG(lma.getDAG(), conf); lma.cloneDAG(); lma.getController().run(60000); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: String urlDecode(String name, String encoding) throws UnsupportedEncodingException { return URLDecoder.decode(name, encoding); }### Assistant: @Test(expected= UnsupportedEncodingException.class) public void testUrlDecodeThrowsUnsupportedEncodingException() throws Exception { sanitizer.urlDecode(\"some_string_with_encoding_%2F\", \"unsupported_encoding\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: String ensureServiceAccountKeySecret(String workflowId, String serviceAccount) { final long epoch = epochProvider.epoch(clock.millis(), serviceAccount); final String secretName = buildSecretName(serviceAccount, epoch); LOG.info(\"[AUDIT] Workflow {} refers to secret {} storing keys of {}\", workflowId, secretName, serviceAccount); try { return serviceAccountSecretCache.get(serviceAccount, () -> getOrCreateSecret(workflowId, serviceAccount, epoch, secretName)); } catch (ExecutionException | UncheckedExecutionException e) { final Throwable cause = e.getCause(); if (cause instanceof InvalidExecutionException) { throw (InvalidExecutionException) cause; } else if (GcpUtil.isPermissionDenied(cause)) { throw new InvalidExecutionException(String.format( \"Permission denied when creating keys for service account: %s. Styx needs to be Service Account Key Admin.\", serviceAccount)); } else if (GcpUtil.isResourceExhausted(cause)) { throw new InvalidExecutionException(String.format( \"Maximum number of keys on service account reached: %s. Styx requires 4 keys to operate.\", serviceAccount)); } else { throw new RuntimeException(e); } } }### Assistant: @Test public void shouldNotConcurrentlyCreateServiceAccountKeysAndSecrets() throws IOException, ExecutionException, InterruptedException { final ServiceAccountKey jsonKey = new ServiceAccountKey(); jsonKey.setName(\"key.json\"); jsonKey.setPrivateKeyData(\"json-private-key-data\"); final ServiceAccountKey p12Key = new ServiceAccountKey(); p12Key.setName(\"key.p12\"); p12Key.setPrivateKeyData(\"p12-private-key-data\"); CompletableFuture<Boolean> accountExistsFuture = new CompletableFuture<>(); when(serviceAccountKeyManager.serviceAccountExists(SERVICE_ACCOUNT)).thenAnswer(a -> accountExistsFuture.get()); when(serviceAccountKeyManager.createJsonKey(any(String.class))).thenReturn(jsonKey); when(serviceAccountKeyManager.createP12Key(any(String.class))).thenReturn(p12Key); final Future<String> f1 = executor.submit( () -> sut.ensureServiceAccountKeySecret(WORKFLOW_ID.toString(), SERVICE_ACCOUNT)); final Future<String> f2 = executor.submit( () -> sut.ensureServiceAccountKeySecret(WORKFLOW_ID.toString(), SERVICE_ACCOUNT)); verify(serviceAccountKeyManager, timeout(30_000)).serviceAccountExists(SERVICE_ACCOUNT); Thread.sleep(5000); verify(serviceAccountKeyManager, times(1)).serviceAccountExists(SERVICE_ACCOUNT); accountExistsFuture.complete(true); final String secret1 = f1.get(); final String secret2 = f2.get(); verify(k8sClient, times(1)).createSecret(secretCaptor.capture()); final Secret createdSecret = secretCaptor.getValue(); assertThat(secret1, is(createdSecret.getMetadata().getName())); assertThat(secret2, is(createdSecret.getMetadata().getName())); verify(serviceAccountKeyManager, times(1)).createJsonKey(SERVICE_ACCOUNT); verify(serviceAccountKeyManager, times(1)).createP12Key(SERVICE_ACCOUNT); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public V get(Object key) { return null; }### Assistant: @Test public void testGet() { Map<String, String> map = NoOpMap.instance(); map.put(\"hello\", \"world\"); assertNull(map.get(\"hello\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public InterpreterResult interpret(String st, InterpreterContext context) { return helper.interpret(session, st, context); }### Assistant: @Test public void should_execute_bound_statement_with_no_bound_value() throws Exception { String queries = \"@prepare[select_no_bound_value]=SELECT name,country,styles FROM zeppelin.artists LIMIT 3\\n\" + \"@bind[select_no_bound_value]\"; final InterpreterResult actual = interpreter.interpret(queries, intrContext); assertThat(actual.code()).isEqualTo(Code.SUCCESS); assertThat(actual.message()).isEqualTo(\"name\\tcountry\\tstyles\\n\" + \"Bogdan Raczynski\\tPoland\\t[Dance, Electro]\\n\" + \"Krishna Das\\tUSA\\t[Unknown]\\n\" + \"Sheryl Crow\\tUSA\\t[Classic, Rock, Country, Blues, Pop, Folk]\\n\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String format(Date then) { if (then == null) then = now(); Duration d = approximateDuration(then); return format(d); }### Assistant: @Test public void testHoursAgo() throws Exception { PrettyTime t = new PrettyTime(new Date(1000 * 60 * 60 * 3)); Assert.assertEquals(\"3 hours ago\", t.format(new Date(0))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Point decode() throws DecodeException { byte readTarget = value[value.length - 1]; int x0 = ByteUtils.readBit(readTarget, 7); Coordinate y = recoverY(this.value); Coordinate x = recoverX(y, x0); return PointEd448.fromAffine(x, y); }### Assistant: @Test(expected = DecodeException.class) public void success_DecodePoint_12() throws DecodeException { byte[] value = HexEncoder.getBytes(\"00000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\"); EncodedPoint encodedPoint = new EncodedPointEd448(value); encodedPoint.decode(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor) throws SpreadsheetReadException { Workbook workbook; try { workbook = WorkbookFactory.create(inputStream); } catch (InvalidFormatException e) { throw new SpreadsheetReadException( \"The file does not have a compatible spreadsheet format\", e); } catch (IOException e) { throw new SpreadsheetReadException(\"The spreadsheet stream could not be read\", e); } catch (IllegalArgumentException e) { throw new SpreadsheetReadException(\"The spreadsheet stream could not be read\", e); } DataFormatter dataFormatter = new DataFormatter(); workbook.setMissingCellPolicy(Row.CREATE_NULL_AS_BLANK); Sheet sheet = workbook.getSheetAt(0); if (rowRange.getEnd() < 0) { rowRange.setEnd(sheet.getLastRowNum()); logger.debug(\"No end of row range specified, setting to \" + rowRange.getEnd()); } SortedMap<Integer, String> currentDataRow = new TreeMap<Integer, String>(); for (int rowIndex = rowRange.getStart(); rowIndex <= rowRange.getEnd(); rowIndex++) { boolean blankRow = true; if (rowRange.contains(rowIndex)) { Row row = sheet.getRow(rowIndex); for (int columnIndex = columnRange.getStart(); columnIndex <= columnRange.getEnd(); columnIndex++) { if (columnRange.contains(columnIndex)) { String value = null; if (row != null) { Cell cell = row.getCell(columnIndex); if (cell != null) { value = getCellValue(cell, dataFormatter); } } if (value != null) { blankRow = false; } currentDataRow.put(columnIndex, value); if (columnIndex == columnRange.getEnd()) { if (!ignoreBlankRows || !blankRow) { rowProcessor.processRow(rowIndex, currentDataRow); } currentDataRow = new TreeMap<Integer, String>(); } } } } } }### Assistant: @Test(expected=SpreadsheetReadException.class) public void testReadInvalidFormatException() throws Exception { spreadsheetReader.read(getClass().getResourceAsStream(\"/test-spreadsheet.ods\"), new Range(0,1), new Range(0,1), false, new SpreadsheetRowProcessor() { public void processRow(int rowIndex, SortedMap<Integer, String> rowData) { } }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @JsonCreator public static ModifyClientRequestV2 forName(@JsonProperty(\"name\") String name) { return new AutoValue_ModifyClientRequestV2(name); }### Assistant: @Test public void deserializesCorrectly() throws Exception { ModifyClientRequestV2 modifyClientRequest = ModifyClientRequestV2.forName(\"client-name\"); assertThat( fromJson(jsonFixture(\"fixtures/v2/modifyClientRequest.json\"), ModifyClientRequestV2.class)) .isEqualTo(modifyClientRequest); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CompletableFuture<HRegionLocation> getRegionLocation(byte[] row, boolean reload) { return FutureUtils.toCompletableFuture(getRegionsAsync(reload)) .thenApplyAsync( result -> { for (HRegionLocation region : result) { if (region.getRegion().containsRow(row)) { hRegionLocation = region; break; } } return hRegionLocation; }); }### Assistant: @Test public void testGetRegionLocation() throws ExecutionException, InterruptedException { List<KeyOffset> keyOffsets = ImmutableList.of( KeyOffset.create(ByteString.copyFromUtf8(\"a\"), 100L), KeyOffset.create(ByteString.copyFromUtf8(\"b\"), 100L), KeyOffset.create(ByteString.copyFromUtf8(\"y\"), 100L), KeyOffset.create(ByteString.copyFromUtf8(\"z\"), 100L)); when(mockDataClient.sampleRowKeysAsync(TABLE_NAME.getNameAsString())) .thenReturn(ApiFutures.immediateFuture(keyOffsets)); HRegionLocation regionLocationFuture = regionLocator.getRegionLocation(Bytes.toBytes(\"rowKey\"), 1, false).get(); assertEquals(\"b\", Bytes.toString(regionLocationFuture.getRegion().getStartKey())); assertEquals(\"y\", Bytes.toString(regionLocationFuture.getRegion().getEndKey())); assertEquals(TABLE_NAME, regionLocator.getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean weakCompareTo(final EntityTag otherEntityTag) { return Objects.equals(getOpaqueTag(), otherEntityTag.getOpaqueTag()); }### Assistant: @Test public void weakComparisonEvaluatesToFalseForDifferentWeakTags() { softly.assertThat(WEAK_1.weakCompareTo(WEAK_2)).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { if (request instanceof HttpServletRequest) { HttpServletRequest httpRequest = (HttpServletRequest) request; request = new HttpServletRequestWrapper(httpRequest) { @Override public String getRemoteAddr() { String xForwardedFor = httpRequest.getHeader(X_FORWARDED_FOR); if (xForwardedFor != null) { log.debug(\"Request included {} address: {}\", X_FORWARDED_FOR, xForwardedFor); return xForwardedFor; } String remoteAddr = httpRequest.getRemoteAddr(); log.debug(\"Request did not include {} address, falling back to remote address: {}\", X_FORWARDED_FOR, remoteAddr); return remoteAddr; } }; } chain.doFilter(request, response); }### Assistant: @Test public void notAnHttpServletRequest() throws Exception { ServletRequest request = mock(ServletRequest.class); underTest.doFilter(request, response, chain); verify(chain).doFilter(request, response); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @PermitAll @Override public ContainerHost getContainerHostByHostName( String hostname ) throws HostNotFoundException { Preconditions.checkArgument( !StringUtils.isBlank( hostname ), \"Container hostname shouldn't be null\" ); for ( ResourceHost resourceHost : getResourceHosts() ) { try { return resourceHost.getContainerHostByHostName( hostname ); } catch ( HostNotFoundException ignore ) { } } throw new HostNotFoundException( String.format( \"No container host found for hostname %s\", hostname ) ); }### Assistant: @Test( expected = HostNotFoundException.class ) public void testGetContainerHostByName() throws Exception { assertEquals( containerHost, localPeer.getContainerHostByHostName( CONTAINER_HOST_NAME ) ); doThrow( new HostNotFoundException( \"\" ) ).when( resourceHost ) .getContainerHostByHostName( CONTAINER_HOST_NAME ); localPeer.getContainerHostByHostName( CONTAINER_HOST_NAME ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<MetricAlarm> getCloudWatchAlarmByName(String alarmName) { return cloudWatchDelegator.getAmazonCloudWatch().describeAlarms(new DescribeAlarmsRequest().withAlarmNamePrefix(alarmName)) .getMetricAlarms(); }### Assistant: @Test public void testGetCloudWatchAlarmByName() { List<MetricAlarm> alarms = cwRaiderImplUnderTest.getCloudWatchAlarmByName(\"test-alarm\"); Assert.assertEquals(alarms.get(0).getAlarmName(),\"test-alarm\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void save(Tweet tweet) { tweetsDatabase.put(tweet.getId(), tweet); System.out.println(\"Created tweet: '\" + tweet.getText() + \"' - ID Nr.: \" + tweet.getId()); }### Assistant: @Test public void saveTest() { tweetService.save(tweet1); assertEquals(\"hola gente!!!\", tweetService.findById(tweet1.getId()).getText()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public OAuthJwtAccessTokenException() { super(); }### Assistant: @Test public void testOAuthJwtAccessTokenException() { OAuthJwtAccessTokenException ex; ex = new OAuthJwtAccessTokenException(); assertNotNull(ex); ex = new OAuthJwtAccessTokenException(\"err msg\"); assertEquals(ex.getMessage(), \"err msg\"); Throwable t = new Throwable(); ex = new OAuthJwtAccessTokenException(t); assertSame(ex.getCause(), t); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String unEscapeString(String str) { return unEscapeString(str, ESCAPE_CHAR, COMMA); }### Assistant: @Test (timeout = 30000) public void testUnescapeString() throws Exception { assertEquals(NULL_STR, StringUtils.unEscapeString(NULL_STR)); assertEquals(EMPTY_STR, StringUtils.unEscapeString(EMPTY_STR)); assertEquals(STR_WO_SPECIAL_CHARS, StringUtils.unEscapeString(STR_WO_SPECIAL_CHARS)); try { StringUtils.unEscapeString(STR_WITH_COMMA); fail(\"Should throw IllegalArgumentException\"); } catch (IllegalArgumentException e) { } assertEquals(STR_WITH_COMMA, StringUtils.unEscapeString(ESCAPED_STR_WITH_COMMA)); try { StringUtils.unEscapeString(STR_WITH_ESCAPE); fail(\"Should throw IllegalArgumentException\"); } catch (IllegalArgumentException e) { } assertEquals(STR_WITH_ESCAPE, StringUtils.unEscapeString(ESCAPED_STR_WITH_ESCAPE)); try { StringUtils.unEscapeString(STR_WITH_BOTH2); fail(\"Should throw IllegalArgumentException\"); } catch (IllegalArgumentException e) { } assertEquals(STR_WITH_BOTH2, StringUtils.unEscapeString(ESCAPED_STR_WITH_BOTH2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean getBoolean(String key, boolean def) { String value = get(key); if (value == null) { return def; } value = value.trim().toLowerCase(); if (value.isEmpty()) { return def; } if (\"true\".equals(value) || \"yes\".equals(value) || \"1\".equals(value)) { return true; } if (\"false\".equals(value) || \"no\".equals(value) || \"0\".equals(value)) { return false; } logger.warn( \"Unable to parse the boolean system property '{}':{} - using the default value: {}\", key, value, def ); return def; }### Assistant: @Test public void testGetBooleanDefaultValueWithPropertyNull() { assertTrue(SystemPropertyUtil.getBoolean(\"key\", true)); assertFalse(SystemPropertyUtil.getBoolean(\"key\", false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Class<?> getBeanPropertyType(Object bean, String property) throws PropertyAccessException { try { Class<?> type = null; if (bean instanceof DynaBean) { DynaProperty descriptor = ((DynaBean) bean).getDynaClass() .getDynaProperty(property); if (descriptor != null){ type = descriptor.getType(); } } else{ type = PropertyUtils.getPropertyType(bean, property); } return type; } catch (IllegalArgumentException e) { throw new PropertyAccessException(e); } catch (IllegalAccessException e) { throw new PropertyAccessException(e); } catch (InvocationTargetException e) { throw new PropertyAccessException(e); } catch (NoSuchMethodException e) { throw new PropertyAccessException(e); } }### Assistant: @Test public void testGetBeanPropertyType07() throws Exception { @SuppressWarnings(\"rawtypes\") Map<?, ?> map = new HashMap(); try { BeanUtil.getBeanPropertyType(map, \"aa.(a)\"); fail(); } catch (PropertyAccessException e) { assertEquals(NestedNullException.class.getName(), e.getCause() .getClass().getName()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: Set<Long> removeInvalidContexts(List<Long> subscriberIds) { log.debug(\"removeInvalidContexts started\"); Set<Long> unaccessibleCourseIds = new HashSet<Long>(); for (Long subscriberId : subscriberIds) { List<NotificationSubscriptionContext> notificationCourseAccessTOs = notificationLearnServiceImpl.getNotificationSubscriptionContexts(subscriberId); Set<Long> subscribedCourseIds = getSubscribedCourseIds(notificationCourseAccessTOs); addUnaccessibleCourseIds(subscribedCourseIds, unaccessibleCourseIds); notificationLearnServiceImpl.removePublishers(unaccessibleCourseIds); } log.debug(\"removeInvalidContexts finished\"); return unaccessibleCourseIds; }### Assistant: @Test public void removeInvalidContexts_5_InvalidContextsFound() { when(okCourseMock.getAccess()).thenReturn(RepositoryEntry.ACC_OWNERS_AUTHORS); Set<Long> invalidContextsIds = notificationCourseAccessManager.removeInvalidContexts(subscriberIds); assertEquals(5, invalidContextsIds.size()); assertTrue(invalidContextsIds.contains(contextId_privateCourse1)); assertTrue(invalidContextsIds.contains(contextId_ok)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String toJSON( Object obj ) { return toJSON(obj, (JSONConfig)null); }### Assistant: @Test public void testIterable() throws ScriptException, NoSuchMethodException { Map<String,Object> jsonObj = new HashMap<>(); jsonObj.put(\"x\", Arrays.asList(1,2,3)); String json = JSONUtil.toJSON(jsonObj); validateJSON(json); assertThat(json, is(\"{\\\"x\\\":[1,2,3]}\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Object addArray(Object list, Object[] array) { for (int i = 0; array != null && i < array.length; i++) list = LazyList.add(list, array[i]); return list; }### Assistant: @Test void testAddArray_NullInput_EmptyArray() { String[] arr = new String[0]; Object list = LazyList.addArray(null, arr); if (STRICT) { assertNotNull(list); assertTrue(list instanceof List); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TagsComponent(Swagger2MarkupConverter.SwaggerContext context) { super(context); }### Assistant: @Test public void testTagsComponent() throws URISyntaxException { List<Tag> tags = new ArrayList<>(); tags.add(new Tag().name(\"Tag1\").description(\"description\")); tags.add(new Tag().name(\"Tag2\")); Swagger2MarkupConverter.SwaggerContext context = createContext(); MarkupDocBuilder markupDocBuilder = context.createMarkupDocBuilder(); markupDocBuilder = new TagsComponent(context).apply(markupDocBuilder, TagsComponent.parameters(tags, OverviewDocument.SECTION_TITLE_LEVEL)); markupDocBuilder.writeToFileWithoutExtension(outputDirectory, StandardCharsets.UTF_8); Path expectedFile = getExpectedFile(COMPONENT_NAME); DiffUtils.assertThatFileIsEqual(expectedFile, outputDirectory, getReportName(COMPONENT_NAME)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public RegisterNodeManagerResponse registerNodeManager( RegisterNodeManagerRequest request) throws YarnException, IOException { NodeId nodeId = request.getNodeId(); String host = nodeId.getHost(); int cmPort = nodeId.getPort(); int httpPort = request.getHttpPort(); Resource capability = request.getResource(); String nodeManagerVersion = request.getNMVersion(); if (!request.getContainerStatuses().isEmpty()) { LOG.info(\"received container statuses on node manager register :\" + request.getContainerStatuses()); for (ContainerStatus containerStatus : request.getContainerStatuses()) { handleContainerStatus(containerStatus); } } RegisterNodeManagerResponse response = recordFactory .newRecordInstance(RegisterNodeManagerResponse.class); if (!minimumNodeManagerVersion.equals(\"NONE\")) { if (minimumNodeManagerVersion.equals(\"EqualToRM\")) { minimumNodeManagerVersion = YarnVersionInfo.getVersion(); } if ((nodeManagerVersion == null) || (VersionUtil.compareVersions(nodeManagerVersion,minimumNodeManagerVersion)) < 0) { String message = \"Disallowed NodeManager Version \" + nodeManagerVersion + \", is less than the minimum version \" + minimumNodeManagerVersion + \" sending SHUTDOWN signal to \" + \"NodeManager.\"; LOG.info(message); response.setDiagnosticsMessage(message); response.setNodeAction(NodeAction.SHUTDOWN); return response; } } if (!this.nodesListManager.isValidNode(host)) { String message = \"Disallowed NodeManager from \" + host + \", Sending SHUTDOWN signal to the NodeManager.\"; LOG.info(message); response.setDiagnosticsMessage(message); response.setNodeAction(NodeAction.SHUTDOWN); return response; } if (capability.getMemory() < minAllocMb || capability.getVirtualCores() < minAllocVcores) { String message = \"NodeManager from \" + host + \" doesn't satisfy minimum allocations, Sending SHUTDOWN\" + \" signal to the NodeManager.\"; LOG.info(message); response.setDiagnosticsMessage(message); response.setNodeAction(NodeAction.SHUTDOWN); return response; } response.setContainerTokenMasterKey(containerTokenSecretManager .getCurrentKey()); response.setNMTokenMasterKey(nmTokenSecretManager .getCurrentKey()); RMNode rmNode = new RMNodeImpl(nodeId, rmContext, host, cmPort, httpPort, resolve(host), ResourceOption.newInstance(capability, RMNode.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT), nodeManagerVersion); RMNode oldNode = this.rmContext.getRMNodes().putIfAbsent(nodeId, rmNode); if (oldNode == null) { this.rmContext.getDispatcher().getEventHandler().handle( new RMNodeEvent(nodeId, RMNodeEventType.STARTED)); } else { LOG.info(\"Reconnect from the node at: \" + host); this.nmLivelinessMonitor.unregister(nodeId); this.rmContext.getDispatcher().getEventHandler().handle( new RMNodeReconnectEvent(nodeId, rmNode)); } this.nmTokenSecretManager.removeNodeKey(nodeId); this.nmLivelinessMonitor.register(nodeId); String message = \"NodeManager from node \" + host + \"(cmPort: \" + cmPort + \" httpPort: \" + httpPort + \") \" + \"registered with capability: \" + capability + \", assigned nodeId \" + nodeId; LOG.info(message); response.setNodeAction(NodeAction.NORMAL); response.setRMIdentifier(ResourceManager.getClusterTimeStamp()); response.setRMVersion(YarnVersionInfo.getVersion()); return response; }### Assistant: @Test public void testNodeRegistrationSuccess() throws Exception { writeToHostsFile(\"host2\"); Configuration conf = new Configuration(); conf.set(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, hostFile .getAbsolutePath()); rm = new MockRM(conf); rm.start(); ResourceTrackerService resourceTrackerService = rm.getResourceTrackerService(); RegisterNodeManagerRequest req = Records.newRecord( RegisterNodeManagerRequest.class); NodeId nodeId = NodeId.newInstance(\"host2\", 1234); Resource capability = BuilderUtils.newResource(1024, 1); req.setResource(capability); req.setNodeId(nodeId); req.setHttpPort(1234); req.setNMVersion(YarnVersionInfo.getVersion()); RegisterNodeManagerResponse response = resourceTrackerService.registerNodeManager(req); Assert.assertEquals(NodeAction.NORMAL,response.getNodeAction()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CacheControl getCacheControlFor( CacheStrategy cacheStrategy ) { final CacheControl cacheControl; if ( RESPECT_SYSTEM_SETTING == cacheStrategy ) { cacheStrategy = (CacheStrategy) systemSettingManager.getSystemSetting( CACHE_STRATEGY ); } final boolean cacheStrategyHasExpirationTimeSet = cacheStrategy != null && cacheStrategy != NO_CACHE; if ( cacheStrategyHasExpirationTimeSet ) { cacheControl = maxAge( cacheStrategy.toSeconds(), SECONDS ); setCacheabilityFor( cacheControl ); } else { cacheControl = noCache(); } return cacheControl; }### Assistant: @Test( expected = UnsupportedOperationException.class ) public void testGetCacheControlForWhenCacheStrategyIsRespectSystemSettingNotUsedInObjectBasis() { final CacheStrategy theInputCacheStrategy = RESPECT_SYSTEM_SETTING; final CacheStrategy theCacheStrategySet = RESPECT_SYSTEM_SETTING; when( systemSettingManager.getSystemSetting( CACHEABILITY ) ).thenReturn( PUBLIC ); when( systemSettingManager.getSystemSetting( CACHE_STRATEGY ) ).thenReturn( theCacheStrategySet ); webCache.getCacheControlFor( theInputCacheStrategy ); fail( \"Should not reach here. Exception was expected: \" ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int requireInRangeClosed(int val, int first, int lastInclusive) { if (val < first || val > lastInclusive) { throw new IllegalArgumentException(val + IS_NOT_IN_THE_RANGE + first + \", \" + lastInclusive + \"]\"); } return val; }### Assistant: @Test void testRequireInRangeClosed2() { assertThrows(RuntimeException.class, () -> IntRangeUtil.requireInRangeClosed(-1,0,1, RuntimeException::new)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String sayHello(Person person) { Greeting greeting = helloWorldJaxWsProxy.sayHello(person); String result = greeting.getText(); LOGGER.info(\"result={}\", result); return result; }### Assistant: @Test public void testSayHello() { Person person = new Person(); person.setFirstName(\"Sherlock\"); person.setLastName(\"Holmes\"); assertEquals(\"Hello Sherlock Holmes!\", helloWorldClientImpl.sayHello(person)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Table rightOuter(Table... tables) { return rightOuter(false, tables); }### Assistant: @Test public void rightJoinHouseBoatOnStyleTypeBedroomsOwner() { Table table1 = createHOUSE(); Table table2 = createBOAT(); Table joined = table1 .joinOn(\"Style\", \"Bedrooms\", \"Owner\") .rightOuter(table2, new String[] {\"Type\", \"Bedrooms\", \"Owner\"}); assertEquals(5, joined.columnCount()); assertEquals(5, joined.rowCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String view() { id = \"11\"; name = \"test-11\"; return SUCCESS; }### Assistant: @Test public void testView() throws Exception { ActionProxy proxy = getActionProxy(\"/view\"); String result = proxy.execute(); assertEquals(\"success\", result); System.out.println(response.getContentAsString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DescriptorValue calculate(IAtomContainer atomContainer) { int hBondAcceptors = 0; IAtomContainer ac; try { ac = (IAtomContainer) atomContainer.clone(); } catch (CloneNotSupportedException e) { return getDummyDescriptorValue(e); } if (checkAromaticity) { try { AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(ac); Aromaticity.cdkLegacy().apply(ac); } catch (CDKException e) { return getDummyDescriptorValue(e); } } atomloop: for (IAtom atom : ac.atoms()) { if (atom.getAtomicNumber() == IElement.N && atom.getFormalCharge() <= 0) { List<IBond> bonds = ac.getConnectedBondsList(atom); int nPiBonds = 0; for (IBond bond : bonds) { if (bond.getOther(atom).getAtomicNumber() == IElement.O) continue atomloop; if (IBond.Order.DOUBLE.equals(bond.getOrder())) nPiBonds++; } if (atom.getFlag(CDKConstants.ISAROMATIC) && nPiBonds == 0) continue; hBondAcceptors++; } else if (atom.getAtomicNumber() == IElement.O && atom.getFormalCharge() <= 0) { List<IBond> neighbours = ac.getConnectedBondsList(atom); for (IBond bond : neighbours) { IAtom neighbor = bond.getOther(atom); if (neighbor.getAtomicNumber() == IElement.N || (neighbor.getAtomicNumber() == IElement.C && neighbor.isAromatic() && bond.getOrder() != IBond.Order.DOUBLE)) continue atomloop;; } hBondAcceptors++; } } return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult( hBondAcceptors), getDescriptorNames()); }### Assistant: @Test public void exocyclicOxygenInAromaticRing() throws InvalidSmilesException { SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer m = sp.parseSmiles(\"Cn1c2nc([nH]c2c(=O)n(c1=O)C)C1CCCC1\"); HBondAcceptorCountDescriptor hbond_acceptor_desc = new HBondAcceptorCountDescriptor(); int actual = ((IntegerResult)hbond_acceptor_desc.calculate(m).getValue()).intValue(); org.hamcrest.MatcherAssert.assertThat(actual, CoreMatchers.is(3)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Liquid mixLiquids(LinkedList<Liquid> inflow) { if (inflow == null || inflow.isEmpty()) { throw new IllegalArgumentException(\"Must at least mix one liquid\"); } float fullAmount = 0; for (Liquid liquid : inflow) { fullAmount += liquid.getAmount(); } if (Math.abs(fullAmount) < 0.000001) { return new Liquid(0, inflow.peekFirst().getTemperature(), inflow.peekFirst().getColor()); } double c = 0; double m = 0; double y = 0; float temperature = 0; for (Liquid liquid : inflow) { c += (liquid.getAmount() / fullAmount) * liquid.getColor().getCyan(); m += (liquid.getAmount() / fullAmount) * liquid.getColor().getMagenta(); y += (liquid.getAmount() / fullAmount) * liquid.getColor().getYellow(); temperature += (liquid.getAmount() / fullAmount) * liquid.getTemperature(); } c = Math.min(1, c); m = Math.min(1, m); y = Math.min(1, y); temperature = Math.min(SimulationConstants.MAX_TEMPERATURE, Math.max(SimulationConstants.MIN_TEMPERATURE, temperature)); return new Liquid(fullAmount, temperature, new Color(c, m, y)); }### Assistant: @Test public void testMixingTwoLiquidsDifferentAmounts() { LinkedList<Liquid> liquids = new LinkedList<>(); liquids.add(new Liquid(300, 340, new Color(0x880000))); liquids.add(new Liquid(100, 300, new Color(0x440000))); Liquid result = new SubtractiveMixingStrategy().mixLiquids(liquids); assertEquals(new Liquid(400, 330, new Color(0x770000)), result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int compute(final float[][] in, final int getNumNodesInput, final float[][] out, final int getNumNodesOutput, final int width, final int[] mask, final int errmask, final float[] a) { final int rcheck[]; final int nodes_input = 18; final int nodes_output = 1; final int nodes_input_bias = 1; final int nodes_input_pca = 1; final int nodes_hidden = 40; final int nodes_hidden_bias = 1; final double nodes_hidden_temperature = 1.000000; final double t_input = nodes_hidden_temperature / (double) (nodes_input); final double t_hidden = nodes_hidden_temperature / (double) (nodes_hidden); final double[] vt; final double[] vt1; if (getNumNodesInput <= 0) { return (nodes_input); } if (getNumNodesOutput <= 0) { return (nodes_output); } if (getNumNodesInput != nodes_input) { return (-1); } if (getNumNodesOutput != nodes_output) { return (-2); } vt = new double[nodes_input + nodes_input_bias]; vt1 = new double[nodes_hidden + nodes_hidden_bias]; rcheck = new int[width]; for (int x = 0; x < width; x++) { rcheck[x] = 0; if (a[x] < 0.0f) { rcheck[x] = 1; } a[x] = 1.0f; } for (int x = 0; x < width; x++) { if (mask[x] == 0) { if (rcheck[x] != 0) { for (int i = 0; i < nodes_input && a[x] > 0.0f; i++) { if ((in[i][x] < (float) NN_General.NODES_INPUT_SCALE_LIMITS[i][0]) || (in[i][x] > (float) NN_General.NODES_INPUT_SCALE_LIMITS[i][1])) { a[x] -= 3.0f; } } if (a[x] < 0.0f) { mask[x] |= errmask; } } for (int i = 0; i < nodes_input; i++) { if (NN_General.NODES_INPUT_SCALE_FLAG[i] == -1) { in[i][x] = (float) Math.log((double) in[i][x]); } if (NN_General.NODES_INPUT_SCALE_FLAG[i] == -2) { in[i][x] = (float) Math.exp((double) in[i][x]); } } for (int i = 0; i < nodes_input; i++) { in[i][x] = (float) NN_General.NODES_INPUT_SCALE_OFF[i] + (in[i][x] - (float) nodes_input_scale_run38[i][0]) / (float) nodes_input_scale_run38[i][1]; } if (nodes_input_pca != 0) { for (int i = 0; i < nodes_input; i++) { vt[i] = (double) in[i][x]; if (NN_General.NODES_INPUT_SCALE_FLAG[i] == 1) { vt[i] = 0.0; for (int j = 0; j < nodes_input; j++) { if (NN_General.NODES_INPUT_SCALE_FLAG[j] == 1) { vt[i] += (double) in[j][x] * nodes_input_pca_evec_run38[j][i]; } } } } for (int i = 0; i < nodes_input; i++) { in[i][x] = (float) vt[i]; } } for (int i = 0; i < nodes_input; i++) { vt[i] = (double) in[i][x]; } for (int i = nodes_input; i < nodes_input + nodes_input_bias; i++) { vt[i] = 1.0; } for (int i = 0; i < nodes_hidden; i++) { vt1[i] = 0.0; for (int j = 0; j < nodes_input + nodes_input_bias; j++) { vt1[i] += vt[j] * nodes_hidden_weights_run38[j][i]; } } for (int i = 0; i < nodes_hidden; i++) { vt1[i] = 1.0 / (1.0 + Math.exp(-t_input * vt1[i])); } for (int i = nodes_hidden; i < nodes_hidden + nodes_hidden_bias; i++) { vt1[i] = 1.0f; } for (int i = 0; i < nodes_output; i++) { out[i][x] = 0.0f; for (int j = 0; j < nodes_hidden + nodes_hidden_bias; j++) { out[i][x] += (float) (vt1[j] * nodes_output_weights_run38[j][i]); } } for (int i = 0; i < nodes_output; i++) { out[i][x] = (float) (1.0 / (1.0 + Math.exp(-t_hidden * out[i][x]))); out[i][x] = (float) nodes_output_scale_run38[i][0] + (out[i][x] - (float) nodes_output_scale_off_run38[i]) * (float) nodes_output_scale_run38[i][1]; if (nodes_output_scale_flag_run38[i] == -1) { out[i][x] = (float) Math.log((double) out[i][x]); } if (nodes_output_scale_flag_run38[i] == -2) { out[i][x] = (float) Math.exp((double) out[i][x]); } } if (rcheck[x] != 0) { for (int i = 0; i < nodes_output && a[x] >= -2.0f; i++) { if ((out[i][x] < (float) nodes_output_scale_limits_run38[i][0]) || (out[i][x] > (float) nodes_output_scale_limits_run38[i][1])) { a[x] -= 20.0f; } } if (a[x] < 0.0f) { mask[x] |= errmask; } } } } return 0; }### Assistant: @Test public void testNN_AtmCorrCheckInputNode() throws Exception { int numNodesInput = 11; int numNodesOutput = 1; int checkOutputNode = NN_YellowSubstance.compute(in, numNodesInput, out, numNodesOutput, width, mask, 0, a); assertEquals(-1, checkOutputNode); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String consolidateObjectsToXML( ArrayList<AbstractWitsmlObject> witsmlObjects, String version, String objectType ) throws ValveException { if(!\"1.3.1.1\".equals(version) && !\"1.4.1.1\".equals(version)) { throw new ValveException(\"Unsupported client version <\" + version + \"> in DoT GET\"); } String xmlString; switch (objectType.toLowerCase()) { case \"well\": xmlString = consolidateWellsToXML(witsmlObjects, version); break; case \"wellbore\": xmlString = consolidateWellboresToXML(witsmlObjects, version); break; case \"trajectory\": xmlString = consolidateTrajectoriesToXML(witsmlObjects, version); break; case \"log\": xmlString = consolidateLogsToXML(witsmlObjects, version); break; case \"fluidsreport\": xmlString = consolidateFluidsReportsToXML(witsmlObjects, version); break; default: throw new ValveException(\"Unsupported object type: \" + witsmlObjects.get(0).getObjectType()); } return xmlString; }### Assistant: @Test public void consolidateObjectsToXMLWellTest() throws ValveException { ArrayList<AbstractWitsmlObject> witsmlObjects = new ArrayList<>(); ObjWell well = new ObjWell(); well.setName(\"well-1\"); well.setUid(\"well-1\"); witsmlObjects.add(well); String clientVersion = \"1.3.1.1\"; String objectType = \"well\"; String expected = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?><wells version=\\\"1.3.1.1\\\" xmlns=\\\"http: String actual = DotTranslator.consolidateObjectsToXML(witsmlObjects, clientVersion, objectType); assertEquals(expected, actual); witsmlObjects = new ArrayList<>(); com.hashmapinc.tempus.WitsmlObjects.v1411.ObjWell well1411 = new com.hashmapinc.tempus.WitsmlObjects.v1411.ObjWell(); well1411.setName(\"well-1\"); well1411.setUid(\"well-1\"); witsmlObjects.add(well1411); clientVersion = \"1.4.1.1\"; objectType = \"well\"; expected = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?><wells version=\\\"1.4.1.1\\\" xmlns=\\\"http: actual = DotTranslator.consolidateObjectsToXML(witsmlObjects, clientVersion, objectType); assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String className(Class<?> valueClass) { String name = valueClass.getName(); int index = name.lastIndexOf('.'); if (index < 0) return name; return name.substring(index + 1); }### Assistant: @Test void className() { assertThat(Classes.className(TestBean.class)).isEqualTo(\"ClassesTest$TestBean\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public NetworkAddressEntity transformInverse(NetworkAddress networkAddress) { if (networkAddress == null) { return null; } return NetworkAddressEntity.builder() .ip(networkAddress.ip()) .port(networkAddress.port()) .build(); }### Assistant: @Test public void shouldReturnNullNetworkAddressEntityGivenNullNetworkAddress() throws Exception { NetworkAddress networkAddress = null; NetworkAddressEntity networkAddressEntity = networkAddressEntityDataMapper.transformInverse(networkAddress); assertThat(networkAddressEntity, nullValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T extends State> @Nullable T as(@Nullable Class<T> target) { if (target == OnOffType.class) { return target.cast(equals(ZERO) ? OnOffType.OFF : OnOffType.ON); } else if (target == PercentType.class) { return target.cast(new PercentType(toBigDecimal().multiply(BigDecimal.valueOf(100)))); } else if (target == UpDownType.class) { if (equals(ZERO)) { return target.cast(UpDownType.UP); } else if (toBigDecimal().compareTo(BigDecimal.valueOf(1)) == 0) { return target.cast(UpDownType.DOWN); } else { return null; } } else if (target == OpenClosedType.class) { if (equals(ZERO)) { return target.cast(OpenClosedType.CLOSED); } else if (toBigDecimal().compareTo(BigDecimal.valueOf(1)) == 0) { return target.cast(OpenClosedType.OPEN); } else { return null; } } else if (target == HSBType.class) { return target.cast(new HSBType(DecimalType.ZERO, PercentType.ZERO, new PercentType(this.toBigDecimal().multiply(BigDecimal.valueOf(100))))); } else if (target == DateTimeType.class) { return target.cast(new DateTimeType(value.toString())); } else { return defaultConversion(target); } }### Assistant: @Test public void testConversionToHSBType() { assertEquals(new HSBType(\"0,0,0\"), new DecimalType(\"0.0\").as(HSBType.class)); assertEquals(new HSBType(\"0,0,100\"), new DecimalType(\"1.0\").as(HSBType.class)); assertEquals(new HSBType(\"0,0,50\"), new DecimalType(\"0.5\").as(HSBType.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte [] sha256(byte [] data) throws CryptoException { MessageDigest sha256; try { sha256 = MessageDigest.getInstance(\"SHA-256\"); } catch (NoSuchAlgorithmException e) { LOG.error(\"sha256: Caught NoSuchAlgorithmException, check to make sure the algorithm is supported by the provider.\"); throw new CryptoException(e); } return sha256.digest(data); }### Assistant: @Test public void testSHA256() { byte [] checkByte = Crypto.sha256(\"check\"); assertNotNull(checkByte); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Connection fromJson(final JsonObject jsonObject) { final ConnectionType type = getConnectionTypeOrThrow(jsonObject); final MappingContext mappingContext = jsonObject.getValue(JsonFields.MAPPING_CONTEXT) .map(ConnectivityModelFactory::mappingContextFromJson) .orElse(null); final PayloadMappingDefinition payloadMappingDefinition = jsonObject.getValue(JsonFields.MAPPING_DEFINITIONS) .map(ImmutablePayloadMappingDefinition::fromJson) .orElse(ConnectivityModelFactory.emptyPayloadMappingDefinition()); final ConnectionBuilder builder = new Builder(type) .id(ConnectionId.of(jsonObject.getValueOrThrow(JsonFields.ID))) .connectionStatus(getConnectionStatusOrThrow(jsonObject)) .uri(jsonObject.getValueOrThrow(JsonFields.URI)) .sources(getSources(jsonObject)) .targets(getTargets(jsonObject)) .name(jsonObject.getValue(JsonFields.NAME).orElse(null)) .mappingContext(mappingContext) .payloadMappingDefinition(payloadMappingDefinition) .specificConfig(getSpecificConfiguration(jsonObject)) .tags(getTags(jsonObject)); jsonObject.getValue(Connection.JsonFields.LIFECYCLE) .flatMap(ConnectionLifecycle::forName).ifPresent(builder::lifecycle); jsonObject.getValue(JsonFields.CREDENTIALS).ifPresent(builder::credentialsFromJson); jsonObject.getValue(JsonFields.CLIENT_COUNT).ifPresent(builder::clientCount); jsonObject.getValue(JsonFields.FAILOVER_ENABLED).ifPresent(builder::failoverEnabled); jsonObject.getValue(JsonFields.VALIDATE_CERTIFICATES).ifPresent(builder::validateCertificate); jsonObject.getValue(JsonFields.PROCESSOR_POOL_SIZE).ifPresent(builder::processorPoolSize); jsonObject.getValue(JsonFields.TRUSTED_CERTIFICATES).ifPresent(builder::trustedCertificates); return builder.build(); }### Assistant: @Test public void fromInvalidJsonFails() { final JsonObject INVALID_JSON = KNOWN_JSON.remove(Connection.JsonFields.SOURCES.getPointer()) .remove(Connection.JsonFields.TARGETS.getPointer()); assertThatExceptionOfType(ConnectionConfigurationInvalidException.class) .isThrownBy(() -> ImmutableConnection.fromJson(INVALID_JSON)) .withMessageContaining(\"source\") .withMessageContaining(\"target\") .withNoCause(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String executeDockerCommand(DockerCommand dockerCommand, String containerId, Map<String, String> env, PrivilegedOperationExecutor privilegedOperationExecutor, boolean disableFailureLogging, Context nmContext) throws ContainerExecutionException { PrivilegedOperation dockerOp = dockerCommand.preparePrivilegedOperation( dockerCommand, containerId, env, nmContext); if (disableFailureLogging) { dockerOp.disableFailureLogging(); } LOG.debug(\"Running docker command: {}\", dockerCommand); try { String result = privilegedOperationExecutor .executePrivilegedOperation(null, dockerOp, null, env, true, false); if (result != null && !result.isEmpty()) { result = result.trim(); } return result; } catch (PrivilegedOperationException e) { throw new ContainerExecutionException(\"Docker operation failed\", e.getExitCode(), e.getOutput(), e.getErrorOutput()); } }### Assistant: @Test public void testExecuteDockerKillSIGKILL() throws Exception { DockerKillCommand dockerKillCommand = new DockerKillCommand(MOCK_CONTAINER_ID) .setSignal(ContainerExecutor.Signal.KILL.name()); DockerCommandExecutor.executeDockerCommand(dockerKillCommand, MOCK_CONTAINER_ID, env, mockExecutor, false, nmContext); List<PrivilegedOperation> ops = MockPrivilegedOperationCaptor .capturePrivilegedOperations(mockExecutor, 1, true); List<String> dockerCommands = getValidatedDockerCommands(ops); assertEquals(1, ops.size()); assertEquals(PrivilegedOperation.OperationType.RUN_DOCKER_CMD.name(), ops.get(0).getOperationType().name()); assertEquals(4, dockerCommands.size()); assertEquals(\"[docker-command-execution]\", dockerCommands.get(0)); assertEquals(\" docker-command=kill\", dockerCommands.get(1)); assertEquals(\" name=\" + MOCK_CONTAINER_ID, dockerCommands.get(2)); assertEquals(\" signal=\" + ContainerExecutor.Signal.KILL.name(), dockerCommands.get(3)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void compute(String applicationId, String attemptId, String containerId, DataAccessEventProtos.FsEvent fsEvent) { try { FsAction action = FsAction.valueOf(fsEvent.getAction()); switch (action) { case DELETE: deleted.forApp(applicationId, attemptId).increment(); break; case READ: read.forApp(applicationId, attemptId).increment(); break; case WRITE: written.forApp(applicationId, attemptId).increment(); break; case RENAME: renamed.forApp(applicationId, attemptId).increment(); break; case APPEND: append.forApp(applicationId, attemptId).increment(); break; case ADD_BLOCK: addBlock.forApp(applicationId, attemptId).increment(); break; case LIST_STATUS: listStatus.forApp(applicationId, attemptId).increment(); break; case GET_CONTENT_SUMMARY: getContentSummary.forApp(applicationId, attemptId).increment(); break; default: throw new IllegalArgumentException(\"Received a non managed FsEvent.Action \" + action.name()); } } catch (IllegalArgumentException ex) { if (LOGGER.isWarnEnabled()) { LOGGER.warn(\"received an unexpected FsEvent.Action {}\", ex.getMessage()); } } }### Assistant: @Test public void FileHeuristic_should_update_delete_counter_for_every_FileEvent_delete_whatever_the_container() { DataAccessEventProtos.FsEvent event = newFsEvent(FsAction.DELETE); heuristic.compute(\"app_1\", \"att_1\", \"cid_1\", event); assertThat(heuristic.deleted.forApp(\"app_1\", \"att_1\").getCount(), is(1)); heuristic.compute(\"app_1\", \"att_1\", \"cid_2\", event); assertThat(heuristic.deleted.forApp(\"app_1\", \"att_1\").getCount(), is(2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Term parse( String fullTextSearchExpression ) { CheckArg.isNotNull(fullTextSearchExpression, \"fullTextSearchExpression\"); Tokenizer tokenizer = new TermTokenizer(); TokenStream stream = new TokenStream(fullTextSearchExpression, tokenizer, false); return parse(stream.start()); }### Assistant: @Test( expected = IllegalArgumentException.class ) public void shouldFailToParseNullString() { parser.parse((String)null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public HelmInit tillerTLSKey(String key) { return withFlags(Arguments.of(\"--tiller-tls-key\", key)); }### Assistant: @Test public void shouldAddTillerTlsKeyOption() { HelmInit command = Helm.init(); HelmInit copy = command.tillerTLSKey(\"bar\"); assertThat(copy, is(not(sameInstance(command)))); assertCommand(copy, \"init\", \"--tiller-tls-key\", \"bar\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Map jsonToMap(String str) throws IOException { if (str != null) { JsonParser jsonParser = jsonFactory.createParser(str); jsonParser.enable(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES); jsonParser.enable(JsonParser.Feature.ALLOW_COMMENTS); return mapper.readValue(jsonParser, HashMap.class); } return null; }### Assistant: @Test public void jsonToMap() throws Exception { Map map = JsonUtil.jsonToMap(\"{}\"); assertEquals(map.size(), 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Optional<DialogIntent> renderDialogIntent(IntentDefinition intentDefinition, IntentData intentData) { if (hasDialogInformation(intentData)) { DialogIntent intent = DialogIntent.builder() .withName(intentDefinition.getName()) .withSlots(renderDialogSlots(intentDefinition, intentData).orElse(null)) .withConfirmationRequired(intentData.getConfirmationRequired()) .withPrompts(resolveConfirmationPrompt(intentDefinition, intentData)) .build(); return Optional.of(intent); } return Optional.empty(); }### Assistant: @Test public void testRenderDialogIntent_NoDialogInformation() { assertEquals(Optional.empty(), underTest.renderDialogIntent(intent, IntentData.builder().build())); assertEquals(Optional.empty(), underTest.renderDialogIntent( intent, IntentData.builder().addSlot(\"slot_name\", IntentSlotData.builder().build()).build())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isValidUsbDeviceCandidate(@Nonnull final File file) { final boolean retVal; if (!file.exists()) { retVal = false; } else if (!file.isDirectory()) { retVal = false; } else if (\".\".equals(file.getName()) || \"..\".equals(file.getName())) { retVal = false; } else { retVal = true; } return retVal; }### Assistant: @Test public void isValidUsbDeviceCandidate_not_existent() { final File mockFile = Mockito.mock(File.class); Mockito.when(mockFile.exists()).thenReturn(false); assertFalse(cut.isValidUsbDeviceCandidate(mockFile)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public IJsonNode evaluate(final IJsonNode node) { this.result.clear(); for (final IJsonNode nextNode : (IArrayNode<?>) node) if (nextNode != NullNode.getInstance()) { final IArrayNode<?> array = (IArrayNode<?>) nextNode; for (int index = 0; index < array.size(); index++) if (this.result.size() <= index) this.result.add(array.get(index)); else if (this.isNull(this.result.get(index)) && !this.isNull(array.get(index))) this.result.set(index, array.get(index)); } return this.result; }### Assistant: @Test public void shouldFillNullValuesWithValuesFromOtherArrays() { final IJsonNode result = new ArrayMerger().evaluate( createArrayNode(createArrayNode(null, createObjectNode(\"fieldName\", 2), createObjectNode(\"fieldName\", 3), createObjectNode(\"fieldName\", 4), createObjectNode(\"fieldName\", 5)), createArrayNode(createObjectNode(\"fieldName\", 1)))); Assert.assertEquals(createArrayNode(createObjectNode(\"fieldName\", 1), createObjectNode(\"fieldName\", 2), createObjectNode(\"fieldName\", 3), createObjectNode(\"fieldName\", 4), createObjectNode(\"fieldName\", 5)), result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<GoogleCloudStorageItemInfo> listBucketInfo() throws IOException { logger.atFine().log(\"%s.listBucketInfo()\", delegateClassName); return delegate.listBucketInfo(); }### Assistant: @Test public void testListBucketInfo() throws IOException { gcs.listBucketInfo(); verify(mockGcsDelegate).listBucketInfo(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public KTable<K, Long> count(String name) { return this.aggregate( new Initializer<Long>() { @Override public Long apply() { return 0L; } }, new Aggregator<K, V, Long>() { @Override public Long apply(K aggKey, V value, Long aggregate) { return aggregate + 1L; } }, new Aggregator<K, V, Long>() { @Override public Long apply(K aggKey, V value, Long aggregate) { return aggregate - 1L; } }, Serdes.Long(), name); }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void testGroupedCountOccurences() throws IOException { final KStreamBuilder builder = new KStreamBuilder(); final String input = \"count-test-input\"; final MockProcessorSupplier processorSupplier = new MockProcessorSupplier<>(); builder.table(Serdes.String(), Serdes.String(), input) .groupBy(new KeyValueMapper<String, String, KeyValue<String, String>>() { @Override public KeyValue<String, String> apply(final String key, final String value) { return new KeyValue<>(value, value); } }, Serdes.String(), Serdes.String()) .count(\"count\") .toStream() .process(processorSupplier); final KStreamTestDriver driver = new KStreamTestDriver(builder, stateDir); driver.process(input, \"A\", \"green\"); driver.process(input, \"B\", \"green\"); driver.process(input, \"A\", \"blue\"); driver.process(input, \"C\", \"yellow\"); driver.process(input, \"D\", \"green\"); final List<String> expected = Arrays.asList(\"green:1\", \"green:2\", \"blue:1\", \"green:1\", \"yellow:1\", \"green:2\"); final List<String> actual = processorSupplier.processed; assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String findStorageProperty( Map<String,String> targetProperties, String storageId, String propertyPrefix ) { String property = propertyPrefix + storageId; String value = targetProperties.get( property ); return Utils.isEmptyOrWhitespaces( value ) ? DEFAULTS.get( propertyPrefix ) : value.trim(); }### Assistant: @Test public void testFindStorageProperty() { Map<String,String> targetProperties = new HashMap<>(); String s = findStorageProperty( targetProperties, \"a\", VOLUME_NAME_PREFIX ); Assert.assertEquals( DEFAULTS.get( VOLUME_NAME_PREFIX ), s ); Assert.assertNotNull( DEFAULTS.get( VOLUME_NAME_PREFIX )); targetProperties.put( VOLUME_NAME_PREFIX + \"a\", \"\" ); s = findStorageProperty( targetProperties, \"a\", VOLUME_NAME_PREFIX ); Assert.assertEquals( DEFAULTS.get( VOLUME_NAME_PREFIX ), s ); targetProperties.put( VOLUME_NAME_PREFIX + \"a\", \"name\" ); s = findStorageProperty( targetProperties, \"a\", VOLUME_NAME_PREFIX ); Assert.assertEquals( \"name\", s ); targetProperties.put( VOLUME_NAME_PREFIX + \"a\", \"name with space after \" ); s = findStorageProperty( targetProperties, \"a\", VOLUME_NAME_PREFIX ); Assert.assertEquals( \"name with space after\", s ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public PomModel setArtifact(String artifactInfo) { checkForBlankString(\"artifactInfo\", artifactInfo); String[] artifactInfoArray = artifactInfo.split(\":\"); if (artifactInfoArray.length != 3) { throw new TransformationDefinitionException(\"Artifact info should be specified as [groupId]:[artifactId]:[version]\"); } setGroupId(artifactInfoArray[0]); setArtifactId(artifactInfoArray[1]); setVersion(artifactInfoArray[2]); return this; }### Assistant: @Test public void nullArtifactInfoTest() { try { new PomModel().setArtifact(null); assertTrue(false); } catch (TransformationDefinitionException e) { assertEquals(e.getMessage(), \"artifactInfo cannot be blank\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteServerGroup.class) @RequestBody ServerGroup serverGroup, @CurrentUser LoginUser user, Errors errors) throws Exception { ValidateResult validateRes = serverGroupService.validatePermision(user, errors) .addAssert(() -> serverGroupService.deleteCheck(serverGroup.getId())) .addAssert(() -> serverGroupService.deleteDataCenter(user, serverGroup)) .addAssert(() -> serverGroupService.deleteServerGroup(serverGroup)).validate(); if (!validateRes.isValid()) { return ServiceResult.fail(validateRes.getSummarize()); } return ServiceResult.success(); }### Assistant: @Test public void delete() throws Exception { mockMvc.perform(MockMvcRequestBuilders.delete(\"/serverGroup/delete\") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(requestJson) .accept(MediaType.APPLICATION_JSON_UTF8)) .andExpect(MockMvcResultMatchers.status().isOk()) .andDo(MockMvcResultHandlers.print()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Graph strict(String str) throws InvalidSmilesException { return new Parser(CharBuffer.fromString(str), true).molecule(); }### Assistant: @Test(expected = InvalidSmilesException.class) public void rejectMultipleUpBonds() throws Exception { Parser.strict(\"C/C=C(/C)/C\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<IReductionOpportunity> getReductionOpportunities( ShaderJob shaderJob, ReducerContext context, ShaderJobFileOperations fileOps) { final List<IReductionOpportunity> opportunities = new ArrayList<>(); for (IReductionOpportunityFinder<?> ros : Arrays.asList( IReductionOpportunityFinder.loopMergeFinder(), IReductionOpportunityFinder.removeStructFieldFinder(), IReductionOpportunityFinder.destructifyFinder(), IReductionOpportunityFinder.inlineStructFieldFinder(), IReductionOpportunityFinder.outlinedStatementFinder(), IReductionOpportunityFinder.variableDeclFinder(), IReductionOpportunityFinder.globalVariablesDeclarationFinder(), IReductionOpportunityFinder.globalPrecisionDeclarationFinder(), IReductionOpportunityFinder.unwrapFinder(), IReductionOpportunityFinder.unswitchifyFinder(), IReductionOpportunityFinder.vectorizationFinder(), IReductionOpportunityFinder.functionFinder(), IReductionOpportunityFinder.stmtFinder(), IReductionOpportunityFinder.exprToConstantFinder(), IReductionOpportunityFinder.compoundExprToSubExprFinder(), IReductionOpportunityFinder.mutationFinder(), IReductionOpportunityFinder.flattenControlFlowFinder(), IReductionOpportunityFinder.inlineInitializerFinder(), IReductionOpportunityFinder.inlineFunctionFinder(), IReductionOpportunityFinder.liveFragColorWriteFinder(), IReductionOpportunityFinder.unusedParamFinder(), IReductionOpportunityFinder.foldConstantFinder(), IReductionOpportunityFinder.inlineUniformFinder(), IReductionOpportunityFinder.redundantUniformMetadataFinder(), IReductionOpportunityFinder.variableDeclToExprFinder(), IReductionOpportunityFinder.switchToLoopFinder(), IReductionOpportunityFinder.globalVariableDeclToExprFinder())) { final List<? extends IReductionOpportunity> currentOpportunities = ros .findOpportunities(shaderJob, context); if (ReductionDriver.DEBUG_REDUCER) { opportunities.addAll(currentOpportunities.stream() .map(item -> new CheckValidReductionOpportunityDecorator(item, shaderJob, context.getShadingLanguageVersion(), fileOps)) .collect(Collectors.toList())); } else { opportunities.addAll(currentOpportunities); } } return opportunities; }### Assistant: @Test public void testRemoveLoopLimiter2() throws Exception { TranslationUnit tu = ParseHelper.parse(\"\" + \"void main() {\\n\" + \" int GLF_live3_looplimiter0 = 0;\\n\" + \" for(\\n\" + \" float GLF_live3sphereNo = 0.0;\\n\" + \" GLF_live3sphereNo < 10.0;\\n\" + \" GLF_live3sphereNo ++\\n\" + \" )\\n\" + \" {\\n\" + \" if(GLF_live3_looplimiter0 >= 5)\\n\" + \" {\\n\" + \" break;\\n\" + \" }\\n\" + \" GLF_live3_looplimiter0 ++;\\n\" + \" }\\n\" + \"}\\n\"); while (true) { List<IReductionOpportunity> ops = ReductionOpportunities .getReductionOpportunities(MakeShaderJobFromFragmentShader.make(tu), new ReducerContext(false, ShadingLanguageVersion.GLSL_440, new RandomWrapper(0), new IdGenerator()), fileOps); if (ops.isEmpty()) { break; } ops.get(0).applyReduction(); } final String expected = \"\" + \"void main() {\\n\" + \"}\\n\"; CompareAsts.assertEqualAsts(expected, tu); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Expression parse(String filterString) throws ExpressionVisitException { if (_log.isDebugEnabled()) { _log.debug(\"Parsing filter: \" + filterString); } if (Validator.isNull(filterString)) { throw new ExpressionVisitException(\"Filter is null\"); } UriInfo uriInfo = _getUriInfo(filterString); FilterOption filterOption = uriInfo.getFilterOption(); org.apache.olingo.server.api.uri.queryoption.expression.Expression expression = filterOption.getExpression(); try { return expression.accept(new ExpressionVisitorImpl()); } catch (Exception exception) { throw new ExpressionVisitException( exception.getMessage(), exception); } }### Assistant: @Test public void testParseWithNotUnaryExpressionWithEqBinaryExpression() throws ExpressionVisitException { Expression expression = _filterParserImpl.parse( \"not (booleanExternal eq true)\"); Assert.assertNotNull(expression); UnaryExpression unaryExpression = (UnaryExpression)expression; Assert.assertEquals( UnaryExpression.Operation.NOT, unaryExpression.getOperation()); BinaryExpression binaryExpression = (BinaryExpression)unaryExpression.getExpression(); MemberExpression memberExpression = (MemberExpression)binaryExpression.getLeftOperationExpression(); PrimitivePropertyExpression primitivePropertyExpression = (PrimitivePropertyExpression)memberExpression.getExpression(); Assert.assertEquals( \"booleanExternal\", primitivePropertyExpression.getName()); LiteralExpression literalExpression = (LiteralExpression)binaryExpression.getRightOperationExpression(); Assert.assertEquals(\"true\", literalExpression.getText()); Assert.assertEquals( LiteralExpression.Type.BOOLEAN, literalExpression.getType()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String toJSON( Object obj ) { return toJSON(obj, (JSONConfig)null); }### Assistant: @Test public void testEscapePassThrough() throws ScriptException, NoSuchMethodException { Map<String,Object> jsonObj = new HashMap<>(); JSONConfig cfg = new JSONConfig().setUnEscapeWherePossible(false) .setPassThroughEscapes(true) .setUseECMA6(true); String[] strs = { \"\\\\u1234\", \"a\\\\u{41}\", \"\\\\\\\"\", \"\\\\/\", \"\\\\b\", \"\\\\f\", \"\\\\n\", \"\\\\r\", \"\\\\t\", \"\\\\\\\\\", \"\\\\v\" }; for ( String str : strs ){ jsonObj.clear(); jsonObj.put(\"x\", str); String json = JSONUtil.toJSON(jsonObj, cfg); String result = \"\\\\v\".equals(str) ? \"\\\\u{B}\" : str; if ( result.indexOf('{') < 0 ){ validateJSON(json); } assertThat(json, is(\"{\\\"x\\\":\\\"\"+result+\"\\\"}\")); } String str = \"a\\\\u{41}\"; jsonObj.clear(); jsonObj.put(\"x\", str); cfg.setUseECMA6(false); String json = JSONUtil.toJSON(jsonObj, cfg); validateJSON(json); assertThat(json, is(\"{\\\"x\\\":\\\"aA\\\"}\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static TaskId toTaskID(String tid) { return TypeConverter.toYarn(TaskID.forName(tid)); }### Assistant: @Test(timeout = 120000, expected=IllegalArgumentException.class) public void testTaskIDBadType() { MRApps.toTaskID(\"task_0_0000_x_000000\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean evaluate(Facts facts) { if (!rules.isEmpty()) { for (Rule rule : rules) { if (!rule.evaluate(facts)) { return false; } } return true; } return false; }### Assistant: @Test public void whenNoComposingRulesAreRegistered_thenUnitRuleGroupShouldEvaluateToFalse() { unitRuleGroup = new UnitRuleGroup(); boolean evaluationResult = unitRuleGroup.evaluate(facts); assertThat(evaluationResult).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Calendar toCalendar(final String iso8601String) throws ParseException { Pattern pattern = Pattern.compile(REGEX_ISO8601); Matcher matcher = pattern.matcher(iso8601String); if (matcher.matches()) { int year = matcher.group(1) != null ? Integer.valueOf(matcher.group(1)) : 0; int month = matcher.group(2) != null ? Integer.valueOf(matcher.group(2)) - 1 : 0; int day = matcher.group(3) != null ? Integer.valueOf(matcher.group(3)) : 0; int h = matcher.group(4) != null ? Integer.valueOf(matcher.group(4)) : 0; int m = matcher.group(5) != null ? Integer.valueOf(matcher.group(5)) : 0; int s = matcher.group(6) != null ? Integer.valueOf(matcher.group(6)) : 0; int ms = Math.round(Float.parseFloat(\"0.\" + (matcher.group(7) != null ? matcher.group(7) : \"0\")) * 1000); TimeZone timeZone = TimeZone.getTimeZone(\"GMT\" + (matcher.group(8) != null ? matcher.group(8) : \"\")); Calendar calendar = GregorianCalendar.getInstance(timeZone); calendar.set(Calendar.YEAR, year); calendar.set(Calendar.MONTH, month); calendar.set(Calendar.DAY_OF_MONTH, day); calendar.set(Calendar.HOUR_OF_DAY, h); calendar.set(Calendar.MINUTE, m); calendar.set(Calendar.SECOND, s); calendar.set(Calendar.MILLISECOND, ms); return calendar; } else throw new java.text.ParseException(\"Unparseable ISO8601 date format: \" + iso8601String, 0); }### Assistant: @Test public void shouldParseDateTimeExtendFormat() throws ParseException { Calendar parseIso8601 = iso8601.toCalendar(\"1982-06-10T05:35:10.000-03:00\"); Calendar date = GregorianCalendar.getInstance(TimeZone.getTimeZone(\"GMT-03:00\")); date.set(1982, 5, 10, 5, 35, 10); date.set(Calendar.MILLISECOND, 0); assertThat(parseIso8601, is(date)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<AnalysisStep> check(List<AnalysisStep> analysisSteps) { if (analysisSteps.size() < 2) { return analysisSteps; } moveInheritanceModeDependentStepsAfterLastVariantFilter(analysisSteps); removePriorityScoreFiltersWithoutMatchingPrioritiser(analysisSteps); movePriorityScoreFiltersNextToMatchingPrioritiser(analysisSteps); analysisSteps.sort(new AnalysisStepComparator()); return analysisSteps; }### Assistant: @Test public void testCheckEverythingWrongGetsMadeRightMoreInsanity() { analysisSteps.add(INHERITANCE_FILTER); analysisSteps.add(PHIVE_PRIORITISER); analysisSteps.add(OMIM_PRIORITISER); analysisSteps.add(FREQUENCY_FILTER); analysisSteps.add(NONE_TYPE_PRIORITY_SCORE_FILTER); analysisSteps.add(PHIVE_PRIORITY_SCORE_FILTER); analysisSteps.add(KNOWN_VARIANT_FILTER); analysisSteps.add(OMIM_PRIORITY_SCORE_FILTER); expectedSteps.add(PHIVE_PRIORITISER); expectedSteps.add(PHIVE_PRIORITY_SCORE_FILTER); expectedSteps.add(FREQUENCY_FILTER); expectedSteps.add(KNOWN_VARIANT_FILTER); expectedSteps.add(INHERITANCE_FILTER); expectedSteps.add(OMIM_PRIORITISER); expectedSteps.add(OMIM_PRIORITY_SCORE_FILTER); assertThat(instance.check(analysisSteps), equalTo(expectedSteps)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<String> getDiagnostics() { readLock.lock(); try { return diagnostics; } finally { readLock.unlock(); } }### Assistant: @Test public void testMetaInfoSizeOverMax() throws Exception { Configuration conf = new Configuration(); JobID jobID = JobID.forName(\"job_1234567890000_0001\"); JobId jobId = TypeConverter.toYarn(jobID); MRAppMetrics mrAppMetrics = MRAppMetrics.create(); JobImpl job = new JobImpl(jobId, ApplicationAttemptId.newInstance( ApplicationId.newInstance(0, 0), 0), conf, mock(EventHandler.class), null, new JobTokenSecretManager(), new Credentials(), null, null, mrAppMetrics, null, true, null, 0, null, null, null, null); InitTransition initTransition = new InitTransition() { @Override protected TaskSplitMetaInfo[] createSplits(JobImpl job, JobId jobId) { throw new YarnRuntimeException(EXCEPTIONMSG); } }; JobEvent mockJobEvent = mock(JobEvent.class); JobStateInternal jobSI = initTransition.transition(job, mockJobEvent); Assert.assertTrue(\"When init fails, return value from InitTransition.transition should equal NEW.\", jobSI.equals(JobStateInternal.NEW)); Assert.assertTrue(\"Job diagnostics should contain YarnRuntimeException\", job.getDiagnostics().toString().contains(\"YarnRuntimeException\")); Assert.assertTrue(\"Job diagnostics should contain \" + EXCEPTIONMSG, job.getDiagnostics().toString().contains(EXCEPTIONMSG)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Attribute getAttributeValue(PerunSessionImpl sess, Group group, AttributeDefinition attributeDefinition) { Attribute attribute = new Attribute(attributeDefinition); String defaultAdDisplayName = getStringValueOfGroupAttribute(sess, group, A_G_D_AD_DISPLAY_NAME_O365MU); if(defaultAdDisplayName != null) { attribute.setValue(defaultAdDisplayName); return attribute; } String cispr = getStringValueOfGroupAttribute(sess, group, A_G_D_INET_CISPR); if (cispr == null) return attribute; String typeOfWorkplaces = getStringValueOfGroupAttribute(sess, group, A_G_D_INET_WORKPLACES_TYPE_CS); if (typeOfWorkplaces == null) return attribute; String finalName = null; Matcher partOfUniversityMatcher = partOfUniversityPattern.matcher(cispr); Matcher otherWorkplacesMatcher = otherWorkplacesPattern.matcher(cispr); if (cispr.equals(TOP_LEVEL_GROUP_CISPR)) { finalName = TOP_LEVEL_PREFIX + \", \" + typeOfWorkplaces; } else if (partOfUniversityMatcher.matches()) { String groupNameCS = getStringValueOfGroupAttribute(sess, group, A_G_D_INET_GROUP_NAME_CS); if(groupNameCS == null) return attribute; finalName = groupNameCS + \", \" + typeOfWorkplaces; } else if (otherWorkplacesMatcher.matches()) { String groupNameCS = getStringValueOfGroupAttribute(sess, group, A_G_D_INET_GROUP_NAME_CS); if (groupNameCS != null) { String abbreviation = getParentGroupAbbreviation(sess, group); if (abbreviation != null) { finalName = groupNameCS + \", \" + abbreviation + \", \" + typeOfWorkplaces; } else { finalName = groupNameCS + \", \" + typeOfWorkplaces; } } } attribute.setValue(finalName); return attribute; }### Assistant: @Test public void getAttributeValueForGroupF() { String attributeValue = classInstance.getAttributeValue(sess, groupF, adDisplayNameO365MuAttrDef).valueAsString(); assertNotNull(attributeValue); assertEquals(groupF.getName() + \", \" + typeOfWorkplacesB, attributeValue); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void prepare(final IObject query) throws TaskPrepareException { try { deleteTask = IOC.resolve( Keys.getOrAdd(\"db.collection.delete\"), connection, collectionNameField.in(query), documentField.in(query) ); } catch (Exception e) { throw new TaskPrepareException(\"Failed to delete async operation\", e); } }### Assistant: @Test public void MustInCorrectPrepareWhenKeysGetOrAddThrowException() throws ResolutionException { IObject query = mock(IObject.class); when(Keys.getOrAdd(\"db.collection.delete\")).thenThrow(new ResolutionException(\"\")); try { testTask.prepare(query); } catch (TaskPrepareException e) { verifyStatic(); Keys.getOrAdd(\"db.collection.delete\"); return; } assertTrue(false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void execute(Runnable runnable) { getExecutor().execute(runnable); }### Assistant: @Test public void testAsyncRun() throws Throwable { ExecutorSvc svc = run(new ExecutorSvc()); ServiceTerminatingRunnable runnable = new ServiceTerminatingRunnable(svc, new SimpleRunnable()); svc.execute(runnable); Thread.sleep(1000); assertStopped(svc); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getFactField() { return editingWrapper().getFactField(); }### Assistant: @Test public void testGetFactField() throws Exception { final String expectedFactField = \"factField\"; doReturn(expectedFactField).when(editingWrapper).getFactField(); final String actualFactField = plugin.getFactField(); assertEquals(expectedFactField, actualFactField); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void poll(FlyteExecutionId flyteExecutionId, RunState runState) throws PollingException { requireNonNull(flyteExecutionId, \"flyteExecutionId\"); requireNonNull(runState, \"runState\"); try { final ExecutionOuterClass.Execution execution = flyteAdminClient.getExecution(flyteExecutionId.project(), flyteExecutionId.domain(), flyteExecutionId.name()); emitFlyteEvents(execution, runState); } catch (StatusRuntimeException e) { if (e.getStatus().getCode() == Status.Code.NOT_FOUND) { throw new ExecutionNotFoundException(flyteExecutionId, e); } throw new PollingException(flyteExecutionId, e); } catch (Exception e) { throw new PollingException(flyteExecutionId, e); } }### Assistant: @Test public void testTransitionRunningToRunningNoEventEmit() throws Exception { when(flyteAdminClient.getExecution(\"flyte-test\", \"testing\", \"execution-name\")).thenReturn( ExecutionOuterClass.Execution .newBuilder() .setClosure(ExecutionOuterClass.ExecutionClosure.newBuilder() .setPhase(Execution.WorkflowExecution.Phase.RUNNING).build()) .build()); RunState state = runState(RunState.State.RUNNING); flyteRunner.poll(FLYTE_EXECUTION_ID, state); verify(stateManager, never()).receive(Event.started(WORKFLOW_INSTANCE)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void submitHistogram(PrincipalUser submitter, Histogram histogram) { submitHistograms(submitter, Arrays.asList(new Histogram[] { histogram })); }### Assistant: @Test public void testSubmitHistogramBucketsWrongBounds() { Histogram histogram = TestUtils.createHistogramWrongBounds(2); collectionService.submitHistogram(user, histogram); verify(monitorService).modifyCounter(MonitorService.Counter.HISTOGRAM_DROPPED, 1, null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int score() { return scoreKeeper.getScore(); }### Assistant: @Test public void allOnesIsTwenty() throws Exception { rollMany(20, 1); assertThat(bowlingGame.score()).isEqualTo(20); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CompileResult compile() throws Exception { if (BuckHotDeployBuilder.FetchMode.AUTOMATIC.equals(fetchMode)) { runProcess(5, TimeUnit.MINUTES, \"buck\", \"fetch\", buildTarget); } return runProcess(2, TimeUnit.MINUTES, \"buck\", \"build\", buildTarget); }### Assistant: @Test public void build() throws Exception { final BuckPathResolver pathResolver = new BuckPathResolver( new HotDeployParameters() .withVerticleReference(\"io.dazraf.vertx.buck.test.App\") .withBuildOutputDirectories(singletonList(\"buck-out/gen/test-project.jar\")) .withCompileSourcePaths(singletonList(\"java\")), of(\"target/test-classes/project\"), \" ); final BuckCompiler compiler = new BuckCompiler( \" BuckHotDeployBuilder.FetchMode.MANUAL, pathResolver ); final CompileResult actual = compiler.compile(); assertEquals(pathResolver.getClasspath(), actual.getClassPath()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void postEmptyIntermediateResponse(BallRequest request, BallResponse.ResponseSource responseSource) { request.addMarker(MARKER_POST_EMPTY_INTERMEDIATE_RESPONSE); mResponsePoster.execute(new EmptyIntermediateDeliveryRunnable(request, responseSource, mNetworkQueue)); }### Assistant: @Test public void shouldIgnoreEmptyIntermediateResponseWhenFinalIsNotDelivered() { when(mRequest.isFinished()).thenReturn(false); when(mRequest.isIntermediateResponseDelivered()).thenReturn(false); when(mRequest.isFinalResponseDelivered()).thenReturn(false); mResponseDelivery.postEmptyIntermediateResponse(mRequest, BallResponse.ResponseSource.LOCAL); verify(mRequest).setIntermediateResponseDelivered(true); verify(mRequest, never()).deliverError(any(VolleyError.class)); verify(mRequest, never()).finish(anyString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Rule> parseRules(Buffer buffer) throws ValidationException { String replacedConfig; try { replacedConfig = StringUtils.replaceWildcardConfigs(buffer.toString(\"UTF-8\"), properties); } catch (Exception e) { throw new ValidationException(e); } ValidationResult validationResult = Validator.validateStatic(Buffer.buffer(replacedConfig), routingRulesSchema, log); if (validationResult.isSuccess()) { return createRules(new JsonObject(replacedConfig)); } else { throw new ValidationException(validationResult); } }### Assistant: @Test public void testValidProxyOptions(TestContext context) throws ValidationException { String rules = \"{\\n\" + \" \\\"/gateleen/rule/1\\\": {\\n\" + \" \\\"description\\\": \\\"Test rule 1\\\",\\n\" + \" \\\"proxyOptions\\\": {\\n\" + \" \\\"type\\\": \\\"HTTP\\\",\\n\" + \" \\\"host\\\": \\\"someHost\\\",\\n\" + \" \\\"port\\\": 1234\\n\" + \" }\\n\" + \" },\\n\" + \" \\\"/gateleen/rule/2\\\": {\\n\" + \" \\\"description\\\": \\\"Test rule 2\\\",\\n\" + \" \\\"proxyOptions\\\": {\\n\" + \" \\\"type\\\": \\\"SOCKS5\\\",\\n\" + \" \\\"host\\\": \\\"someHost\\\",\\n\" + \" \\\"port\\\": 1234,\\n\" + \" \\\"username\\\": \\\"johndoe\\\",\\n\" + \" \\\"password\\\": \\\"secret\\\"\\n\" + \" }\\n\" + \" },\\n\" + \" \\\"/gateleen/rule/3\\\": {\\n\" + \" \\\"description\\\": \\\"Test rule 3\\\",\\n\" + \" \\\"proxyOptions\\\": {\\n\" + \" \\\"host\\\": \\\"someOtherHost\\\",\\n\" + \" \\\"port\\\": 5678\\n\" + \" }\\n\" + \" },\\n\" + \" \\\"/gateleen/rule/4\\\": {\\n\" + \" \\\"description\\\": \\\"Test rule 4 (without proxyOptions)\\\"\\n\" + \" }\\n\" + \"}\"; List<Rule> rulesList = new RuleFactory(properties, routingRulesSchema).parseRules(Buffer.buffer(rules)); context.assertEquals(4, rulesList.size()); context.assertNotNull(rulesList.get(0).getProxyOptions()); context.assertEquals(ProxyType.HTTP, rulesList.get(0).getProxyOptions().getType()); context.assertEquals(\"someHost\", rulesList.get(0).getProxyOptions().getHost()); context.assertEquals(1234, rulesList.get(0).getProxyOptions().getPort()); context.assertNull(rulesList.get(0).getProxyOptions().getUsername()); context.assertNull(rulesList.get(0).getProxyOptions().getPassword()); context.assertNotNull(rulesList.get(1).getProxyOptions()); context.assertEquals(ProxyType.SOCKS5, rulesList.get(1).getProxyOptions().getType()); context.assertEquals(\"someHost\", rulesList.get(1).getProxyOptions().getHost()); context.assertEquals(1234, rulesList.get(1).getProxyOptions().getPort()); context.assertEquals(\"johndoe\", rulesList.get(1).getProxyOptions().getUsername()); context.assertEquals(\"secret\", rulesList.get(1).getProxyOptions().getPassword()); context.assertNotNull(rulesList.get(2).getProxyOptions()); context.assertEquals(ProxyType.HTTP, rulesList.get(2).getProxyOptions().getType()); context.assertEquals(\"someOtherHost\", rulesList.get(2).getProxyOptions().getHost()); context.assertEquals(5678, rulesList.get(2).getProxyOptions().getPort()); context.assertNull(rulesList.get(2).getProxyOptions().getUsername()); context.assertNull(rulesList.get(2).getProxyOptions().getPassword()); context.assertNull(rulesList.get(3).getProxyOptions()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting public static String expandEnvironment(String var, Path containerLogDir) { var = var.replace(ApplicationConstants.LOG_DIR_EXPANSION_VAR, containerLogDir.toString()); var = var.replace(ApplicationConstants.CLASS_PATH_SEPARATOR, File.pathSeparator); if (Shell.WINDOWS) { var = var.replaceAll(\"(\\\\{\\\\{)|(\\\\}\\\\})\", \"%\"); } else { var = var.replace(ApplicationConstants.PARAMETER_EXPANSION_LEFT, \"$\"); var = var.replace(ApplicationConstants.PARAMETER_EXPANSION_RIGHT, \"\"); } return var; }### Assistant: @Test(timeout = 10000) public void testEnvExpansion() throws IOException { Path logPath = new Path(\"/nm/container/logs\"); String input = Apps.crossPlatformify(\"HADOOP_HOME\") + \"/share/hadoop/common/*\" + ApplicationConstants.CLASS_PATH_SEPARATOR + Apps.crossPlatformify(\"HADOOP_HOME\") + \"/share/hadoop/common/lib/*\" + ApplicationConstants.CLASS_PATH_SEPARATOR + Apps.crossPlatformify(\"HADOOP_LOG_HOME\") + ApplicationConstants.LOG_DIR_EXPANSION_VAR; String res = ContainerLaunch.expandEnvironment(input, logPath); if (Shell.WINDOWS) { Assert.assertEquals(\"%HADOOP_HOME%/share/hadoop/common/*;\" + \"%HADOOP_HOME%/share/hadoop/common/lib/*;\" + \"%HADOOP_LOG_HOME%/nm/container/logs\", res); } else { Assert.assertEquals(\"$HADOOP_HOME/share/hadoop/common/*:\" + \"$HADOOP_HOME/share/hadoop/common/lib/*:\" + \"$HADOOP_LOG_HOME/nm/container/logs\", res); } System.out.println(res); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Stream<Location> search(String query) { Stream<LocationInfo> locals = api.search(query); return locals.map(this::toLocation); }### Assistant: @Test public void testCollapseTemperatures() { WeatherService service = new WeatherService(new WeatherRestfullApi()); Stream<Location> locals = service.search(\"oporto\"); Stream<Integer> temps = locals .skip(1) .findFirst() .get() .getPast30daysWeather() .map(WeatherInfo::getTempC); temps = StreamUtil.collapse(temps); String res = temps .map(Object::toString) .collect(Collectors.joining(\",\")); String expected = \"16,13,14,12,11,14,19,16,18,15,14,17,21,19,14,17,19,21,22,20,22,23,21,24,25,21,20,18\"; assertEquals(expected, res); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ConfigurableResource parseResourceConfigValue(String value) throws AllocationConfigurationException { return parseResourceConfigValue(value, Long.MAX_VALUE); }### Assistant: @Test public void testParseNewStyleResourceWithPercentagesVcoresNegativeWithSpaces() throws Exception { expectNegativePercentageNewStyle(); parseResourceConfigValue(\"vcores=-75%, memory-mb=40%\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public RangerServiceList searchRangerServices(SearchFilter searchFilter) { RangerServiceList retList = new RangerServiceList(); int startIndex = searchFilter.getStartIndex(); int pageSize = searchFilter.getMaxRows(); searchFilter.setStartIndex(0); searchFilter.setMaxRows(Integer.MAX_VALUE); List<T> xSvcList = searchResources(searchFilter, searchFields, sortFields, retList); List<T> permittedServices = new ArrayList<T>(); for (T xSvc : xSvcList) { if(bizUtil.hasAccess(xSvc, null)){ permittedServices.add(xSvc); } } if(!permittedServices.isEmpty()) { populatePageList(permittedServices, startIndex, pageSize, retList); } return retList; }### Assistant: @Test public void test3searchRangerServices() { SearchFilter searchFilter = new SearchFilter(); searchFilter.setParam(SearchFilter.POLICY_NAME, \"policyName\"); searchFilter.setParam(SearchFilter.SERVICE_NAME, \"serviceName\"); RangerServiceList dbRangerServiceList = rangerServiceService .searchRangerServices(searchFilter); Assert.assertNotNull(dbRangerServiceList); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Field setName(String name) { this.name = requireNonNull(name); return this; }### Assistant: @Test void setName() { instance().setName(\"Z\"); assertNotEquals(NAME, instance().getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Attribute getAttributeValue(PerunSessionImpl sess, Member member, Group group, AttributeDefinition attributeDefinition) { List<User> userAdminList; User newUser; Attribute attribute = new Attribute(attributeDefinition); userAdminList = sess.getPerunBl().getGroupsManagerBl().getAdmins(sess, group, false); newUser = sess.getPerunBl().getUsersManagerBl().getUserByMember(sess, member); if (userAdminList.contains(newUser)) { attribute.setValue(true); return attribute; } attribute.setValue(false); return attribute; }### Assistant: @Test public void testGetAttributeValueNotGroupAdmin() throws Exception{ System.out.println(\"testGetAttributeValue() - isNotGroupAdmin\"); attribute.setValue(false); groupsManager.removeAdmin(sess, group, user); Attribute testAttr = classInstance.getAttributeValue(session, member, group, attrDef); assertEquals(testAttr, attribute); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = \"/datasets/{id}/content\", method = RequestMethod.GET) @ApiOperation(value = \"Get a data set by id\", notes = \"Get a data set content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content.\") @Timed @ResponseBody public Callable<DataSet> get( @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\", value = \"Include metadata information in the response\") boolean metadata, @RequestParam(defaultValue = \"false\") @ApiParam(name = \"includeInternalContent\", value = \"Include internal content in the response\") boolean includeInternalContent, @RequestParam(defaultValue = \"-1\") @ApiParam(name = STORAGE_LIMIT, value = STORAGE_LIMIT) long limit, @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\", defaultValue = \"\") String filter, @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the requested data set\") String dataSetId) { return () -> { final Marker marker = Markers.dataset(dataSetId); LOG.debug(marker, \"Get data set #{}\", dataSetId); Stream<DataSetRow> stream = null; try { DataSetMetadata dataSetMetadata = dataSetMetadataRepository.get(dataSetId); assertDataSetMetadata(dataSetMetadata, dataSetId); DataSet dataSet = new DataSet(); if (metadata) { dataSet.setMetadata(conversionService.convert(dataSetMetadata, UserDataSetMetadata.class)); } stream = contentStore.stream(dataSetMetadata, limit); if (dataSetMetadata.getRowMetadata().getColumns().stream().anyMatch( c -> c.getStatistics().getWordPatternFrequencyTable().isEmpty())) { stream = insertWordPatternAnalysis(dataSetMetadata, stream); } if (!includeInternalContent) { LOG.debug(\"Skip internal content when serving data set #{} content.\", dataSetId); stream = stream.map(r -> { final Map<String, Object> values = r.values(); final Map<String, Object> filteredValues = new HashMap<>(values); values.forEach((k, v) -> { if (k != null && k.startsWith(FlagNames.INTERNAL_PROPERTY_PREFIX)) { filteredValues.remove(k); } }); filteredValues.put(FlagNames.TDP_ID, r.getTdpId()); return new DataSetRow(r.getRowMetadata(), filteredValues); }); } stream = stream.filter(filterService.build(filter, dataSetMetadata.getRowMetadata())); dataSet.setRecords(stream); return dataSet; } catch (Exception e) { if (stream != null) { stream.close(); } throw e; } finally { LOG.debug(marker, \"Get done.\"); } }; }### Assistant: @Test public void compatibleDatasetsListIllegalOrder() throws Exception { when().get(\"/datasets/{id}/compatibledatasets?order=aaaa\", \"0000\").then().statusCode( HttpStatus.BAD_REQUEST.value()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static FEEL_1_1Parser parse(FEELEventListenersManager eventsManager, String source, Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, Collection<FEELFunction> additionalFunctions, List<FEELProfile> profiles, FEELTypeRegistry typeRegistry) { CharStream input = CharStreams.fromString(source); FEEL_1_1Lexer lexer = new FEEL_1_1Lexer( input ); CommonTokenStream tokens = new CommonTokenStream( lexer ); FEEL_1_1Parser parser = new FEEL_1_1Parser( tokens ); ParserHelper parserHelper = new ParserHelper(eventsManager); additionalFunctions.forEach(f -> parserHelper.getSymbolTable().getBuiltInScope().define(f.getSymbol())); parser.setHelper(parserHelper); parser.setErrorHandler( new FEELErrorHandler() ); parser.removeErrorListeners(); parser.addErrorListener( new FEELParserErrorListener( eventsManager ) ); defineVariables( inputVariableTypes, inputVariables, parser ); if (typeRegistry != null) { parserHelper.setTypeRegistry(typeRegistry); } return parser; }### Assistant: @Test public void testVariableWithInKeyword() { String inputExpression = \"{ a variable with in keyword : 10, \" + \" another variable : a variable with in keyword + 20, \" + \" another in variable : an external in variable / 2 }\"; BaseNode ctxbase = parse( inputExpression, mapOf(entry(\"an external in variable\", BuiltInType.NUMBER)) ); assertThat( ctxbase, is( instanceOf( ContextNode.class ) ) ); assertThat( ctxbase.getText(), is( inputExpression ) ); ContextNode ctx = (ContextNode) ctxbase; assertThat( ctx.getEntries().size(), is( 3 ) ); ContextEntryNode entry = ctx.getEntries().get( 0 ); assertThat( entry.getName(), is( instanceOf( NameDefNode.class ) ) ); NameDefNode name = (NameDefNode) entry.getName(); assertThat( name.getParts(), is( notNullValue() ) ); assertThat( name.getParts().size(), is( 5 ) ); assertThat( entry.getName().getText(), is(\"a variable with in keyword\") ); assertThat( entry.getValue(), is( instanceOf( NumberNode.class ) ) ); assertThat( entry.getResultType(), is( BuiltInType.NUMBER ) ); assertThat( entry.getValue().getText(), is(\"10\") ); entry = ctx.getEntries().get( 1 ); assertThat( entry.getName(), is( instanceOf( NameDefNode.class ) ) ); name = (NameDefNode) entry.getName(); assertThat( name.getParts(), is( notNullValue() ) ); assertThat( name.getParts().size(), is( 2 ) ); assertThat( entry.getName().getText(), is(\"another variable\") ); assertThat( entry.getValue(), is( instanceOf( InfixOpNode.class ) ) ); assertThat( entry.getResultType(), is( BuiltInType.NUMBER ) ); assertThat( entry.getValue().getText(), is( \"a variable with in keyword + 20\" ) ); entry = ctx.getEntries().get( 2 ); assertThat( entry.getName(), is( instanceOf( NameDefNode.class ) ) ); name = (NameDefNode) entry.getName(); assertThat( name.getParts(), is( notNullValue() ) ); assertThat( name.getParts().size(), is( 3 ) ); assertThat( entry.getName().getText(), is(\"another in variable\") ); assertThat( entry.getValue(), is( instanceOf( InfixOpNode.class ) ) ); assertThat( entry.getResultType(), is( BuiltInType.NUMBER ) ); assertThat( entry.getValue().getText(), is( \"an external in variable / 2\" ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static double degreesLonToMetersAtLat(final double lonDegrees, final double lat) { return lonDegrees * METERS_PER_DEGREE_LON_EQUATOR * Math.cos(Math.toRadians(lat)); }### Assistant: @Test public void testDegreesLonToMeters() { LOG.info(\"testDegreesLonToMeters\"); assertEquals(0, compare(0, degreesLonToMetersAtLat(0, 0))); assertEquals(0, compare(METERS_PER_DEGREE_LON_EQUATOR / 2.0, degreesLonToMetersAtLat(0.5, 0))); assertEquals(0, compare(METERS_PER_DEGREE_LON_EQUATOR, degreesLonToMetersAtLat(1, 0))); assertEquals(0, compare(METERS_PER_DEGREE_LON_EQUATOR * 180, degreesLonToMetersAtLat(180, 0))); assertEquals(0, compare(-METERS_PER_DEGREE_LON_EQUATOR * 180, degreesLonToMetersAtLat(-180, 0))); assertEquals(METERS_PER_DEGREE_LON_EQUATOR / 2.0, degreesLonToMetersAtLat(1, 60), DELTA); assertEquals(METERS_PER_DEGREE_LON_EQUATOR / 2.0, degreesLonToMetersAtLat(1, -60), DELTA); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String fetch( String location ) throws Exception { File fetchFile = checkCache( location ); if ( fetchFile == null ) { URL url = new URL(location); fetchFile = cache(location,url.openStream()); } return toString(new FileInputStream(fetchFile)); }### Assistant: @Test public void testSourceFetch() throws Exception { SourceFetchExtension srcFetch = new SourceFetchExtension(); String src = srcFetch.fetch(\"https: Assert.assertNotNull(src); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String telnet(Channel channel, String message) { StringBuilder buf = new StringBuilder(); String service = null; boolean detail = false; if (message.length() > 0) { String[] parts = message.split(\"\\\\s+\"); for (String part : parts) { if (\"-l\".equals(part)) { detail = true; } else { if (!StringUtils.isEmpty(service)) { return \"Invalid parameter \" + part; } service = part; } } } else { service = (String) channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY); if (StringUtils.isNotEmpty(service)) { buf.append(\"Use default service \").append(service).append(\".\\r\\n\"); } } if (StringUtils.isEmpty(service)) { printAllServices(buf, detail); } else { printSpecifiedService(service, buf, detail); if (buf.length() == 0) { buf.append(\"No such service: \").append(service); } } return buf.toString(); }### Assistant: @Test public void testList() throws RemotingException { mockChannel = mock(Channel.class); given(mockChannel.getAttribute(\"telnet.service\")).willReturn(null); registerProvider(DemoService.class.getName(), new DemoServiceImpl(), DemoService.class); String result = list.telnet(mockChannel, \"\"); assertEquals(\"PROVIDER:\\r\\norg.apache.dubbo.qos.legacy.service.DemoService\\r\\n\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static List<StmtReductionOpportunity> findOpportunities(ShaderJob shaderJob, ReducerContext context) { return shaderJob.getShaders() .stream() .map(item -> findOpportunitiesForShader(item, context)) .reduce(Arrays.asList(), ListConcat::concatenate); }### Assistant: @Test public void testSideEffectingTypeInitializerNotRemoved() throws Exception { final String program = \"void main() { float x; vec4(0.0, x++, 0.0, 0.0); }\"; final TranslationUnit tu = ParseHelper.parse(program); List<? extends IReductionOpportunity> ops = StmtReductionOpportunities.findOpportunities(MakeShaderJobFromFragmentShader.make(tu), new ReducerContext(false, ShadingLanguageVersion.ESSL_100, new RandomWrapper(0), new IdGenerator())); assertEquals(0, ops.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void updateAlarm(final Alarm alarm) { alarm.setLastCheck(null); LOGGER.debug(\"Updating alarm {}\", alarm.getId()); restTemplate.put(seyrenUrl + API_ALARMS + \"/\" + alarm.getId(), alarm, String.class); }### Assistant: @Test public void testUpdateAlarm() { Alarm alarm = TestUtils.getDefaultAlarm(); doNothing().when(restTemplate).put(anyString(), anyObject(), any(String.class)); repository.updateAlarm(alarm); verify(restTemplate).put(DEFAULT_SEYREN_URL + SeyrenRepository.API_ALARMS+\"/\"+alarm.getId(), alarm, String.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Header[] parseHttpHeaders(final String headers) { if (headers == null || headers.length() == 0) { return null; } final String[] headerArray = headers.split(HEADER_ELEMENT_DELIMITER); final List<Header> headerList = new ArrayList<>(headerArray.length); for (int i = 0; i < headerArray.length; i++) { final String headerPair = headerArray[i]; final int index = headerPair.indexOf(HEADER_NAME_VALUE_DELIMITER); if (index != -1) { headerList.add(new BasicHeader(headerPair.substring(0, index), headerPair.substring(index + 1))); } } return headerList.toArray(new BasicHeader[0]); }### Assistant: @Test public void partialHeaderElementTest() { final String name1 = \"Content-type\"; final String value1 = \"application/json\"; final String name2 = \"Accept\"; final String value2 = \"\"; final String name3 = \"User-Agent\"; final String value3 = \"Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/21.0\"; String headers = makeHeaderElement(name1, value1); headers += JobCallbackConstants.HEADER_ELEMENT_DELIMITER; headers += makeHeaderElement(name2, value2); headers += JobCallbackConstants.HEADER_ELEMENT_DELIMITER; headers += makeHeaderElement(name3, value3); System.out.println(\"headers: \" + headers); final Header[] headerArr = JobCallbackUtil.parseHttpHeaders(headers); Assert.assertNotNull(headerArr); Assert.assertEquals(3, headerArr.length); Assert.assertEquals(name1, headerArr[0].getName()); Assert.assertEquals(value1, headerArr[0].getValue()); Assert.assertEquals(name2, headerArr[1].getName()); Assert.assertEquals(value2, headerArr[1].getValue()); Assert.assertEquals(name3, headerArr[2].getName()); Assert.assertEquals(value3, headerArr[2].getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public URI transform(final String resourcePath) throws TransformationException { if (resourcePath == null) { throw new IllegalArgumentException( \"Path to the resource must not be null.\"); } try { return getClass().getResource(resourcePath).toURI(); } catch (final Throwable cause) { throw new TransformationException(cause); } }### Assistant: @Test(expectedExceptions=TransformationException.class) public void testTransformIfIncorrectPath() throws Exception { transformer.transform(\"/incorrect/path\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getLeftFromDelimiterNumber( String fpsSource, String fpsDelimiter, Integer fpiCount ) throws XPathExpressionException { String lvsReturn = \"\"; ArrayList<String> lvLsSplitedSource = null; int RangeMin = 1; int RangeMax = 1; try { Log.LogFunctionStartDebug(\"OKW_Helper.GetLeftFromDelimiterNumber\", \"fpsSource\", fpsSource, \"fpsDelimiter\", fpsDelimiter, \"fpiCount\", fpiCount.toString()); if ( ! \"\".equals( fpsDelimiter ) ) { lvLsSplitedSource = splitString(fpsSource, fpsDelimiter); RangeMax = lvLsSplitedSource.size() - 1; RangeMin = 1; if ((RangeMin <= fpiCount) & (fpiCount <= RangeMax)) { lvsReturn = lvLsSplitedSource.get(0); for (int i = 1; i < fpiCount; i++) { lvsReturn = lvsReturn + fpsDelimiter + lvLsSplitedSource.get(i); } } else { String lvsLM = LM.GetMessage(\"GetLeftFromDelimiterNumber\", \"OKWDelimiterCountOutOfRangeException\", fpiCount, RangeMax); throw new IndexOutOfBoundsException(lvsLM); } } else { String lvsLM = LM.GetMessage(\"GetLeftFromDelimiterNumber\", \"OKWDelimiterIsEmptyException\"); throw new IllegalArgumentException(lvsLM); } } finally { Log.LogFunctionEndDebug(lvsReturn); } return lvsReturn; }### Assistant: @Test public void tcGetLeftFromDelimiterNumber_2() throws XPathExpressionException { assertEquals(\"AAAACBBBB\", OKW_Helper.getLeftFromDelimiterNumber(\"AAAACBBBBCDDDD\", \"C\", 2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public E convert( String value ) { for ( E each : valueType().getEnumConstants() ) { if ( each.name().equalsIgnoreCase( value ) ) { return each; } } throw new ValueConversionException( message( value ) ); }### Assistant: @Test public void convertsEnumValuesToEnum() { assertEquals( TestEnum.A, converter.convert( \"A\" ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean needsToActivateHost(CloudResources cloudCapacity) { return false; }### Assistant: @Test public void needsToActivateHostTest() { CloudResources cloudCapacity = Mockito.mock(CloudResources.class); Assert.assertFalse(spyAlgorithm.needsToActivateHost(cloudCapacity)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static TransactionAware create(byte[] fenceId) { return new ReadFence(fenceId); }### Assistant: @Test public void testFence1() throws Exception { byte[] fenceId = \"test_table\".getBytes(Charsets.UTF_8); TransactionAware readFenceCase16 = VisibilityFence.create(fenceId); TransactionContext readTxContextCase16 = new TransactionContext(new InMemoryTxSystemClient(txManager), readFenceCase16); readTxContextCase16.start(); readTxContextCase16.finish(); TransactionAware readFenceCase17 = VisibilityFence.create(fenceId); TransactionContext readTxContextCase17 = new TransactionContext(new InMemoryTxSystemClient(txManager), readFenceCase17); readTxContextCase17.start(); TransactionAware readFenceCase18 = VisibilityFence.create(fenceId); TransactionContext readTxContextCase18 = new TransactionContext(new InMemoryTxSystemClient(txManager), readFenceCase18); readTxContextCase18.start(); TransactionAware writeFence = new WriteFence(fenceId); TransactionContext writeTxContext = new TransactionContext(new InMemoryTxSystemClient(txManager), writeFence); writeTxContext.start(); TransactionAware readFenceCase20 = VisibilityFence.create(fenceId); TransactionContext readTxContextCase20 = new TransactionContext(new InMemoryTxSystemClient(txManager), readFenceCase20); readTxContextCase20.start(); readTxContextCase17.finish(); assertTxnConflict(writeTxContext); writeTxContext.start(); writeTxContext.finish(); TransactionAware readFenceCase21 = VisibilityFence.create(fenceId); TransactionContext readTxContextCase21 = new TransactionContext(new InMemoryTxSystemClient(txManager), readFenceCase21); readTxContextCase21.start(); assertTxnConflict(readTxContextCase18); readTxContextCase20.finish(); readTxContextCase21.finish(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FDProcessor create(final String flowId, final String processGroupId, final VersionedProcessor requestComponentConfig) { final FDFlow currentFlow = getFlowOrNotFound(flowId); validateRequestValues(requestComponentConfig); final String requestType = requestComponentConfig.getType(); final Bundle requestBundle = requestComponentConfig.getBundle(); final FDProcessor createdComponent = createExtensionComponent( currentFlow, processGroupId, requestType, requestComponentConfig, (em) -> em.createProcessor(requestType, requestBundle), VersionedProcessGroup::getProcessors, this::validate ); ComponentUtils.populateControllerServicePropertyDescriptors(currentFlow, processGroupId, createdComponent.getComponentDefinition()); return createdComponent; }### Assistant: @Test(expected = IllegalArgumentException.class) public void testCreateProcessorWithInvalidPenaltyDuration() { final String flowId = \"1\"; final String processGroupId = \"child-level-2\"; when(flowManager.getFlow(flowId)).thenReturn(Optional.of(flow)); when(extensionManagers.getExtensionManager(flow.getFlowMetadata().getAgentClass())) .thenReturn(Optional.of(extensionManager)); final VersionedProcessor requestProcessor = createVersionedProcessor(); requestProcessor.setPenaltyDuration(\"INVALID\"); final FDProcessor resultProcessor = new FDProcessor(); resultProcessor.setComponentConfiguration(requestProcessor); resultProcessor.setComponentDefinition(new ProcessorDefinition()); when(extensionManager.createProcessor( requestProcessor.getType(), requestProcessor.getBundle())) .thenReturn(resultProcessor); processorService.create(flowId, processGroupId, requestProcessor); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Stanza> handle(Query query, ServerRuntimeContext serverRuntimeContext, SessionContext sessionContext) { try { return doHandle(query, serverRuntimeContext, sessionContext); } catch (XMLSemanticError xmlSemanticError) { Stanza internalServerError = ServerErrorResponses.getStanzaError(StanzaErrorCondition.INTERNAL_SERVER_ERROR, query.iqStanza(), StanzaErrorType.CANCEL, null, null, null); return Collections.singletonList(internalServerError); } }### Assistant: @Test public void unexistingArchiveLeadsToItemNotFound() throws XMLSemanticError { List<Stanza> stanzas = tested.handle(untargetedQuery, serverRuntimeContext, sessionContext); assertError(stanzas, StanzaErrorCondition.ITEM_NOT_FOUND); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void assertConsentDto(ConsentDto consentDto) throws IllegalArgumentException { int countProvidersDisclosureIsMadeTo = 0; int countProvidersPermittedToDisclose = 0; try { countProvidersDisclosureIsMadeTo += consentDto .getOrganizationalProvidersDisclosureIsMadeTo().size(); } catch (NullPointerException e) { } try { countProvidersDisclosureIsMadeTo += consentDto .getProvidersDisclosureIsMadeTo().size(); } catch (NullPointerException e) { } try { countProvidersPermittedToDisclose += consentDto .getOrganizationalProvidersPermittedToDisclose().size(); } catch (NullPointerException e) { } try { countProvidersPermittedToDisclose += consentDto .getProvidersPermittedToDisclose().size(); } catch (NullPointerException e) { } Assert.isTrue( countProvidersDisclosureIsMadeTo == 1, \"'countProvidersDisclosureIsMadeTo' must be 1 in order to be a one-to-one policy.\"); Assert.isTrue( countProvidersPermittedToDisclose == 1, \"'countProvidersPermittedToDisclose' must be 1 in order to be a one-to-one policy.\"); }### Assistant: @Test public void testAssertConsentDto_Success_With_To_Ind_From_Ind() { Set<String> mockProvidersDisclosureIsMadeTo = Sets .newSet(\"mockProvidersDisclosureIsMadeTo\"); Set<String> mockProvidersPermittedToDisclose = Sets .newSet(\"mockProvidersPermittedToDisclose\"); ConsentDto mockConsentDto = new ConsentDto(); mockConsentDto .setProvidersDisclosureIsMadeTo(mockProvidersDisclosureIsMadeTo); mockConsentDto .setProvidersPermittedToDisclose(mockProvidersPermittedToDisclose); sut.assertConsentDto(mockConsentDto); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DataAccessor createAccessor(Config<?> initialConfig) { return new S3FileFetcher(initialConfig, false); }### Assistant: @Test public void testNullInitialConfig() { Throwable exception = assertThrows( IllegalArgumentException.class, () -> provider.createAccessor(null)); assertEquals(\"Invalid S3Config\", exception.getMessage()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public T evaluate() throws DDMExpressionException { Map<String, DDMExpressionFunctionFactory> ddmExpressionFunctions = _ddmExpressionFunctionTracker.getDDMExpressionFunctionFactories( _ddmExpressionFunctionNames); try { Set<String> undefinedFunctionNames = new HashSet<>( _ddmExpressionFunctionNames); undefinedFunctionNames.removeAll(ddmExpressionFunctions.keySet()); if (!undefinedFunctionNames.isEmpty()) { throw new DDMExpressionException.FunctionNotDefined( undefinedFunctionNames); } DDMExpressionEvaluatorVisitor ddmExpressionEvaluatorVisitor = new DDMExpressionEvaluatorVisitor( ddmExpressionFunctions, _variables, _ddmExpressionActionHandler, _ddmExpressionFieldAccessor, _ddmExpressionObserver, _ddmExpressionParameterAccessor); return (T)_expressionContext.accept(ddmExpressionEvaluatorVisitor); } catch (DDMExpressionException ddmExpressionException) { throw ddmExpressionException; } catch (Exception exception) { throw new DDMExpressionException(exception); } }### Assistant: @Test(expected = DDMExpressionException.InvalidSyntax.class) public void testInvalidSyntax2() throws Exception { DDMExpressionImpl<BigDecimal> ddmExpressionImpl = createDDMExpression( \"(1 * 2\"); ddmExpressionImpl.evaluate(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean relate(GeometryWrapper sourceGeometry, GeometryWrapper targetGeometry) throws FactoryException, MismatchedDimensionException, TransformException { return sourceGeometry.relate(targetGeometry, EgenhoferIntersectionPattern.CONTAINS); }### Assistant: @Test public void testRelate_polygon_point() throws FactoryException, MismatchedDimensionException, TransformException { GeometryWrapper subjectGeometryWrapper = GeometryWrapper.extract(ResourceFactory.createTypedLiteral(\"<http: GeometryWrapper objectGeometryWrapper = GeometryWrapper.extract(ResourceFactory.createTypedLiteral(\"<http: EhContainsFF instance = new EhContainsFF(); Boolean expResult = true; Boolean result = instance.relate(subjectGeometryWrapper, objectGeometryWrapper); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isLastPage() { return current == page.getTotalPages() - 1; }### Assistant: @Test public void testIsLastPage_Last() { List<String> mockedList = new ArrayList<String>(); PageRequest pageable = PageRequest.of(2, 2); page = new PageImpl<String>(mockedList, pageable, 6L); PaginationInfo info = new PaginationInfo(page, pathTmpl, queryTmpl, 0); boolean result = info.isLastPage(); assertThat(result, is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TemplateResource() { }### Assistant: @Test void testTemplateResource() { mockResource.setResourceFormat(\"image/tiff\"); mockResource.setResourceId(\"trellis:data/12345\"); mockResource.setResourceLabel(\"00001111\"); mockResource.setService(mockService); mockResource.setResourceHeight(200); mockResource.setResourceWidth(200); final Optional<String> json = ManifestSerializer.serialize(mockResource); assertTrue(json.isPresent()); out.println(json.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getStartVersion() { return startVersion; }### Assistant: @Test public void testStartVersion() { assertThat(new VersionRange(range).getStartVersion(), equalTo(startVersion)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> removeGroupFromServiceAccount(String token, ServiceAccountGroup serviceAccountGroup, UserDetails userDetails) { OIDCGroup oidcGroup = new OIDCGroup(); log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove Group from Service Account\"). put(LogMessage.MESSAGE, String.format (\"Trying to remove Group from Service Account\")). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); if (!userDetails.isAdmin()) { token = tokenUtils.getSelfServiceToken(); } if(!isSvcaccPermissionInputValid(serviceAccountGroup.getAccess())) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Invalid value specified for access. Valid values are read, reset, deny\\\"]}\"); } if (serviceAccountGroup.getAccess().equalsIgnoreCase(\"reset\")) { serviceAccountGroup.setAccess(TVaultConstants.WRITE_POLICY); } String groupName = serviceAccountGroup.getGroupname().toLowerCase(); String svcAccName = serviceAccountGroup.getSvcAccName(); String access = serviceAccountGroup.getAccess(); boolean isAuthorized = true; if (userDetails != null) { isAuthorized = hasAddOrRemovePermission(userDetails, svcAccName, token); } if(isAuthorized){ if (!ifInitialPwdReset(token, userDetails, serviceAccountGroup.getSvcAccName())) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove Group from ServiceAccount\"). put(LogMessage.MESSAGE, \"Failed to remove group permission from Service account. Initial password reset is pending for this Service Account.\"). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Failed to remove group permission from Service account. Initial password reset is pending for this Service Account. Please reset the password and try again.\\\"]}\"); } String r_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.READ_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String w_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.WRITE_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String d_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.DENY_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String o_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.SUDO_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove group from Service Account\"). put(LogMessage.MESSAGE, String.format (\"Policies are, read - [%s], write - [%s], deny -[%s], owner - [%s]\", r_policy, w_policy, d_policy, o_policy)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); Response groupResp = new Response(); if (TVaultConstants.LDAP.equals(vaultAuthMethod)) { groupResp = reqProcessor.process(\"/auth/ldap/groups\", \"{\\\"groupname\\\":\\\"\" + groupName + \"\\\"}\", token); } else if (TVaultConstants.OIDC.equals(vaultAuthMethod)) { oidcGroup = oidcUtil.getIdentityGroupDetails(groupName, token); if (oidcGroup != null) { groupResp.setHttpstatus(HttpStatus.OK); groupResp.setResponse(oidcGroup.getPolicies().toString()); } else { groupResp.setHttpstatus(HttpStatus.BAD_REQUEST); } } log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove group from ServiceAccount\"). put(LogMessage.MESSAGE, String.format (\"userResponse status is [%s]\", groupResp.getHttpstatus())). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); String responseJson=\"\"; List<String> policies = new ArrayList<>(); List<String> currentpolicies = new ArrayList<>(); String policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(access)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); if(HttpStatus.OK.equals(groupResp.getHttpstatus())){ responseJson = groupResp.getResponse(); try { ObjectMapper objMapper = new ObjectMapper(); if (TVaultConstants.LDAP.equals(vaultAuthMethod)) { currentpolicies = ControllerUtil.getPoliciesAsListFromJson(objMapper, responseJson); } else if (TVaultConstants.OIDC.equals(vaultAuthMethod)) { currentpolicies.addAll(oidcGroup.getPolicies()); } } catch (IOException e) { log.error(e); log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove group from ServiceAccount\"). put(LogMessage.MESSAGE, String.format (\"Exception while creating currentpolicies or groups\")). put(LogMessage.STACKTRACE, Arrays.toString(e.getStackTrace())). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); } policies.addAll(currentpolicies); policies.remove(r_policy); policies.remove(w_policy); policies.remove(d_policy); } String policiesString = org.apache.commons.lang3.StringUtils.join(policies, \",\"); String currentpoliciesString = org.apache.commons.lang3.StringUtils.join(currentpolicies, \",\"); Response ldapConfigresponse = new Response(); if (TVaultConstants.LDAP.equals(vaultAuthMethod)) { ldapConfigresponse = ControllerUtil.configureLDAPGroup(groupName, policiesString, token); } else if (TVaultConstants.OIDC.equals(vaultAuthMethod)) { ldapConfigresponse = oidcUtil.updateGroupPolicies(token, groupName, policies, currentpolicies, oidcGroup.getId()); oidcUtil.renewUserToken(userDetails.getClientToken()); } if(ldapConfigresponse.getHttpstatus().equals(HttpStatus.NO_CONTENT) || ldapConfigresponse.getHttpstatus().equals(HttpStatus.OK)){ String path = new StringBuffer(TVaultConstants.SVC_ACC_ROLES_PATH).append(svcAccName).toString(); Map<String,String> params = new HashMap<String,String>(); params.put(\"type\", \"groups\"); params.put(\"name\",groupName); params.put(\"path\",path); params.put(\"access\",\"delete\"); Response metadataResponse = ControllerUtil.updateMetadata(params,token); if(metadataResponse !=null && (HttpStatus.NO_CONTENT.equals(metadataResponse.getHttpstatus()) || HttpStatus.OK.equals(metadataResponse.getHttpstatus()))){ log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove Group to Service Account\"). put(LogMessage.MESSAGE, \"Group configuration Success.\"). put(LogMessage.STATUS, metadataResponse.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"Group is successfully removed from Service Account\\\"]}\"); } if (TVaultConstants.LDAP.equals(vaultAuthMethod)) { ldapConfigresponse = ControllerUtil.configureLDAPGroup(groupName, currentpoliciesString, token); } else if (TVaultConstants.OIDC.equals(vaultAuthMethod)) { ldapConfigresponse = oidcUtil.updateGroupPolicies(token, groupName, currentpolicies, currentpolicies, oidcGroup.getId()); oidcUtil.renewUserToken(userDetails.getClientToken()); } if(ldapConfigresponse.getHttpstatus().equals(HttpStatus.NO_CONTENT)){ log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to Service Account\"). put(LogMessage.MESSAGE, \"Reverting, group policy update success\"). put(LogMessage.RESPONSE, (null!=metadataResponse)?metadataResponse.getResponse():TVaultConstants.EMPTY). put(LogMessage.STATUS, (null!=metadataResponse)?metadataResponse.getHttpstatus().toString():TVaultConstants.EMPTY). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Group configuration failed. Please try again\\\"]}\"); }else{ log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add Group to Service Account\"). put(LogMessage.MESSAGE, \"Reverting group policy update failed\"). put(LogMessage.RESPONSE, (null!=metadataResponse)?metadataResponse.getResponse():TVaultConstants.EMPTY). put(LogMessage.STATUS, (null!=metadataResponse)?metadataResponse.getHttpstatus().toString():TVaultConstants.EMPTY). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Group configuration failed. Contact Admin \\\"]}\"); } } else { return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Failed to remove the group from the Service Account\\\"]}\"); } } else { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Access denied: No permission to remove groups from this service account\\\"]}\"); } }### Assistant: @Test public void test_removeGroupFromServiceAccount_metadata_failure() { String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; ServiceAccountGroup serviceAccountGroup = new ServiceAccountGroup(\"svc_vault_test7\", \"group1\", \"reset\"); UserDetails userDetails = getMockUser(false); ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Group configuration failed. Please try again\\\"]}\"); ResponseEntity<String> response = ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Group configuration failed. Please try again\\\"]}\"); Response responseNoContent = getMockResponse(HttpStatus.NO_CONTENT, true, \"\"); Response response404 = getMockResponse(HttpStatus.NOT_FOUND, true, \"\"); String [] policies = {\"o_svcacct_svc_vault_test7\"}; when(policyUtils.getCurrentPolicies(token, userDetails.getUsername(), userDetails)).thenReturn(policies); Response groupResp = getMockResponse(HttpStatus.OK, true, \"{\\\"data\\\":{\\\"bound_cidrs\\\":[],\\\"max_ttl\\\":0,\\\"policies\\\":[\\\"default\\\",\\\"w_shared_mysafe01\\\",\\\"w_shared_mysafe02\\\"],\\\"ttl\\\":0,\\\"groups\\\":\\\"admin\\\"}}\"); when(reqProcessor.process(\"/auth/ldap/groups\",\"{\\\"groupname\\\":\\\"group1\\\"}\",token)).thenReturn(groupResp); ObjectMapper objMapper = new ObjectMapper(); String responseJson = groupResp.getResponse(); try { List<String> resList = new ArrayList<>(); resList.add(\"default\"); resList.add(\"w_shared_mysafe01\"); resList.add(\"w_shared_mysafe02\"); when(ControllerUtil.getPoliciesAsListFromJson(objMapper, responseJson)).thenReturn(resList); } catch (IOException e) { e.printStackTrace(); } when(ControllerUtil.configureLDAPGroup(any(),any(),any())).thenReturn(responseNoContent); when(ControllerUtil.updateMetadata(any(),eq(token))).thenReturn(response404); when(tokenUtils.getSelfServiceToken()).thenReturn(token); when(reqProcessor.process(eq(\"/sdb\"),Mockito.any(),eq(token))).thenReturn(getMockResponse(HttpStatus.OK, true, \"{\\\"data\\\":{\\\"initialPasswordReset\\\":true,\\\"managedBy\\\":\\\"smohan11\\\",\\\"name\\\":\\\"svc_vault_test5\\\",\\\"users\\\":{\\\"smohan11\\\":\\\"sudo\\\"}}}\")); ResponseEntity<String> responseEntity = serviceAccountsService.removeGroupFromServiceAccount(token, serviceAccountGroup, userDetails); assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST\", justification = \"The ServletRequest is cast to an HttpServletRequest which is always the case since all requests use the HTTP protocol.\") public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { doHttpFilter((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse, filterChain); }### Assistant: @Test public void testHttpHeaderAuthenticationFilterRegularUser() throws Exception { namespaceDaoTestHelper.createNamespaceEntity(NAMESPACE); userNamespaceAuthorizationDaoTestHelper .createUserNamespaceAuthorizationEntity(USER_ID, namespaceDaoTestHelper.createNamespaceEntity(NAMESPACE_2), SUPPORTED_NAMESPACE_PERMISSIONS); userNamespaceAuthorizationDaoTestHelper .createUserNamespaceAuthorizationEntity(USER_ID, namespaceDaoTestHelper.createNamespaceEntity(NAMESPACE_3), SUPPORTED_NAMESPACE_PERMISSIONS); Set<NamespaceAuthorization> expectedNamespaceAuthorizations = new HashSet<>(); expectedNamespaceAuthorizations.add(new NamespaceAuthorization(NAMESPACE_2, SUPPORTED_NAMESPACE_PERMISSIONS)); expectedNamespaceAuthorizations.add(new NamespaceAuthorization(NAMESPACE_3, SUPPORTED_NAMESPACE_PERMISSIONS)); setupTestFunctions(\"testRole\"); modifyPropertySourceInEnvironment(getDefaultSecurityEnvironmentVariables()); try { MockHttpServletRequest request = getRequestWithHeaders(USER_ID, \"testFirstName\", \"testLastName\", \"testEmail\", \"testRole\", \"Wed, 11 Mar 2015 10:24:09\"); invalidateApplicationUser(request); httpHeaderAuthenticationFilter.init(new MockFilterConfig()); httpHeaderAuthenticationFilter.doFilter(request, new MockHttpServletResponse(), new MockFilterChain()); validateHttpHeaderApplicationUser(USER_ID, \"testFirstName\", \"testLastName\", \"testEmail\", \"testRole\", \"Wed, 11 Mar 2015 10:24:09\", TEST_FUNCTIONS, expectedNamespaceAuthorizations); httpHeaderAuthenticationFilter.doFilter(request, new MockHttpServletResponse(), new MockFilterChain()); validateHttpHeaderApplicationUser(USER_ID, \"testFirstName\", \"testLastName\", \"testEmail\", \"testRole\", \"Wed, 11 Mar 2015 10:24:09\", TEST_FUNCTIONS, expectedNamespaceAuthorizations); } finally { restorePropertySourceInEnvironment(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) { logger.debug(\"\u5f00\u59cb\u626b\u63cf\u6a21\u5757\"); Map<String, Object> beans = contextRefreshedEvent.getApplicationContext().getBeansWithAnnotation(Module.class); List<com.carl.wolf.core.bean.Module> modules = new ArrayList<>(); for (Object value : beans.values()) { try { if (scanStrategy.support(value)) { modules.add(scanStrategy.process(value)); } } catch (ModuleScanException e) { logger.error(\"\u6a21\u5757\u626b\u63cf\u5f02\u5e38\", e); } } }### Assistant: @Test public void onApplicationEvent() throws Exception { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void delete(String badgeId) { cassandraOperation.deleteRecord(Util.KEY_SPACE_NAME, BADGE_CLASS_EXT_TABLE_NAME, badgeId); }### Assistant: @Test public void testDeleteSuccess() { PowerMockito.when( mockDBService.deleteRecord( Mockito.anyString(), Mockito.anyString(), Mockito.anyString())) .thenReturn(new Response()); boolean thrown = false; try { badgeClassExtensionServiceImpl.delete(VALUE_BADGE_ID); } catch (Exception e) { thrown = true; } Assert.assertEquals(false, thrown); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public synchronized void onUpgrade(@NonNull SQLiteDatabase db, int oldVersion, int newVersion, @NonNull TableDefaultsCustomizer customizer) { super.onUpgrade(db, oldVersion, newVersion, customizer); if (oldVersion <= 6) { Cursor tripsCursor = null; try { tripsCursor = db.query(TripsTable.TABLE_NAME, new String[]{TripsTable.COLUMN_NAME}, null, null, null, null, null); if (tripsCursor != null && tripsCursor.moveToFirst()) { final int nameIndex = tripsCursor.getColumnIndex(TripsTable.COLUMN_NAME); do { String absPath = tripsCursor.getString(nameIndex); if (absPath.endsWith(File.separator)) { absPath = absPath.substring(0, absPath.length() - 1); } final String relPath = absPath.substring(absPath.lastIndexOf(File.separatorChar) + 1, absPath.length()); Logger.debug(\"Updating Abs. Trip Path: {} => {}\", absPath, relPath); final ContentValues tripValues = new ContentValues(1); tripValues.put(TripsTable.COLUMN_NAME, relPath); if (db.update(TripsTable.TABLE_NAME, tripValues, TripsTable.COLUMN_NAME + \" = ?\", new String[]{absPath}) == 0) { Logger.error(this, \"Trip Update Error Occurred\"); } } while (tripsCursor.moveToNext()); } } finally { if (tripsCursor != null) { tripsCursor.close(); } } } if (oldVersion <= 8) { final String alterTrips1 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_FROM_TIMEZONE + \" TEXT\"; final String alterTrips2 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_TO_TIMEZONE + \" TEXT\"; Logger.debug(this, alterTrips1); Logger.debug(this, alterTrips2); db.execSQL(alterTrips1); db.execSQL(alterTrips2); } if (oldVersion <= 10) { final String alterTrips1 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_COMMENT + \" TEXT\"; final String alterTrips2 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_DEFAULT_CURRENCY + \" TEXT\"; Logger.debug(this, alterTrips1); Logger.debug(this, alterTrips2); db.execSQL(alterTrips1); db.execSQL(alterTrips2); } if (oldVersion <= 11) { final String alterTrips = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_FILTERS + \" TEXT\"; Logger.debug(this, alterTrips); db.execSQL(alterTrips); } if (oldVersion <= 12) { final String alterTripsWithCostCenter = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_COST_CENTER + \" TEXT\"; final String alterTripsWithProcessingStatus = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + TripsTable.COLUMN_PROCESSING_STATUS + \" TEXT\"; Logger.debug(this, alterTripsWithCostCenter); Logger.debug(this, alterTripsWithProcessingStatus); db.execSQL(alterTripsWithCostCenter); db.execSQL(alterTripsWithProcessingStatus); } if (oldVersion <= 14) { onUpgradeToAddSyncInformation(db, oldVersion, newVersion); } if (oldVersion <= 18) { final String copyTable = \"CREATE TABLE \" + getTableName() + \"_copy\" + \" (\" + COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" + COLUMN_NAME + \" TEXT UNIQUE, \" + COLUMN_FROM + \" DATE, \" + COLUMN_TO + \" DATE, \" + COLUMN_FROM_TIMEZONE + \" TEXT, \" + COLUMN_TO_TIMEZONE + \" TEXT, \" + COLUMN_COMMENT + \" TEXT, \" + COLUMN_COST_CENTER + \" TEXT, \" + COLUMN_DEFAULT_CURRENCY + \" TEXT, \" + COLUMN_PROCESSING_STATUS + \" TEXT, \" + COLUMN_FILTERS + \" TEXT, \" + AbstractSqlTable.COLUMN_DRIVE_SYNC_ID + \" TEXT, \" + AbstractSqlTable.COLUMN_DRIVE_IS_SYNCED + \" BOOLEAN DEFAULT 0, \" + AbstractSqlTable.COLUMN_DRIVE_MARKED_FOR_DELETION + \" BOOLEAN DEFAULT 0, \" + AbstractSqlTable.COLUMN_LAST_LOCAL_MODIFICATION_TIME + \" DATE\" + \");\"; Logger.debug(this, copyTable); db.execSQL(copyTable); final String baseColumns = TextUtils.join(\", \", new String[]{ COLUMN_NAME, COLUMN_FROM, COLUMN_TO, COLUMN_FROM_TIMEZONE, COLUMN_TO_TIMEZONE, COLUMN_COMMENT, COLUMN_COST_CENTER, COLUMN_DEFAULT_CURRENCY, COLUMN_PROCESSING_STATUS, COLUMN_FILTERS, COLUMN_DRIVE_SYNC_ID, COLUMN_DRIVE_IS_SYNCED, COLUMN_DRIVE_MARKED_FOR_DELETION, COLUMN_LAST_LOCAL_MODIFICATION_TIME}); final String insertData = \"INSERT INTO \" + getTableName() + \"_copy\" + \" (\" + baseColumns + \") \" + \"SELECT \" + baseColumns + \" FROM \" + getTableName() + \";\"; Logger.debug(this, insertData); db.execSQL(insertData); final String dropOldTable = \"DROP TABLE \" + getTableName() + \";\"; Logger.debug(this, dropOldTable); db.execSQL(dropOldTable); final String renameTable = \"ALTER TABLE \" + getTableName() + \"_copy\" + \" RENAME TO \" + getTableName() + \";\"; Logger.debug(this, renameTable); db.execSQL(renameTable); onUpgradeToAddUUID(db, oldVersion); } if (oldVersion <= 19) { final String alterReceipts = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + COLUMN_NAME_HIDDEN_AUTO_COMPLETE + \" BOOLEAN DEFAULT 0\"; final String alterReceipts2 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE + \" BOOLEAN DEFAULT 0\"; final String alterReceipts3 = \"ALTER TABLE \" + TripsTable.TABLE_NAME + \" ADD \" + COLUMN_COSTCENTER_HIDDEN_AUTO_COMPLETE + \" BOOLEAN DEFAULT 0\"; Logger.debug(this, alterReceipts); Logger.debug(this, alterReceipts2); Logger.debug(this, alterReceipts3); db.execSQL(alterReceipts); db.execSQL(alterReceipts2); db.execSQL(alterReceipts3); } }### Assistant: @Test public void onUpgradeFromV18() { final int oldVersion = 18; final int newVersion = DatabaseHelper.DATABASE_VERSION; final TableDefaultsCustomizer customizer = mock(TableDefaultsCustomizer.class); mTripsTable.onUpgrade(mSQLiteDatabase, oldVersion, newVersion, customizer); verifyZeroInteractions(customizer); verifyV8Upgrade(never()); verifyV10Upgrade(never()); verifyV11Upgrade(never()); verifyV12Upgrade(never()); verifyV14Upgrade(never()); verifyV18Upgrade(times(1)); verifyV19Upgrade(times(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Map<String, Set<String>> getClusterHostInfo(Cluster cluster) throws AmbariException { Set<String> hostsSet = new LinkedHashSet<String>(); List<Integer> portsList = new ArrayList<Integer>(); List<String> rackList = new ArrayList<String>(); List<String> ipV4List = new ArrayList<String>(); Collection<Host> allHosts = cluster.getHosts(); for (Host host : allHosts) { hostsSet.add(host.getHostName()); Integer currentPingPort = host.getCurrentPingPort(); portsList.add(currentPingPort == null ? DEFAULT_PING_PORT : currentPingPort); String rackInfo = host.getRackInfo(); rackList.add(StringUtils.isEmpty(rackInfo) ? DEFAULT_RACK : rackInfo ); String iPv4 = host.getIPv4(); ipV4List.add(StringUtils.isEmpty(iPv4) ? DEFAULT_IPV4_ADDRESS : iPv4 ); } Map<String, Collection<String>> pendingHostComponents = topologyManager.getPendingHostComponents(); for (String hostname : pendingHostComponents.keySet()) { if (!hostsSet.contains(hostname)) { hostsSet.add(hostname); portsList.add(DEFAULT_PING_PORT); rackList.add(DEFAULT_RACK); ipV4List.add(DEFAULT_IPV4_ADDRESS); } } List<String> hostsList = new ArrayList<String>(hostsSet); Map<String, String> additionalComponentToClusterInfoKeyMap = new HashMap<String, String>(); Map<String, SortedSet<Integer>> hostRolesInfo = new HashMap<String, SortedSet<Integer>>(); for (Map.Entry<String, Service> serviceEntry : cluster.getServices().entrySet()) { Service service = serviceEntry.getValue(); for (Map.Entry<String, ServiceComponent> serviceComponentEntry : service.getServiceComponents().entrySet()) { ServiceComponent serviceComponent = serviceComponentEntry.getValue(); String componentName = serviceComponent.getName(); String roleName = componentToClusterInfoKeyMap.get(componentName); if(null == roleName) { roleName = additionalComponentToClusterInfoKeyMap.get(componentName); } if (null == roleName && !serviceComponent.isClientComponent()) { roleName = componentName.toLowerCase() + \"_hosts\"; additionalComponentToClusterInfoKeyMap.put(componentName, roleName); } String decomRoleName = decommissionedToClusterInfoKeyMap.get(componentName); if (roleName == null && decomRoleName == null) { continue; } for (String hostName : serviceComponent.getServiceComponentHosts().keySet()) { if (roleName != null) { SortedSet<Integer> hostsForComponentsHost = hostRolesInfo.get(roleName); if (hostsForComponentsHost == null) { hostsForComponentsHost = new TreeSet<Integer>(); hostRolesInfo.put(roleName, hostsForComponentsHost); } int hostIndex = hostsList.indexOf(hostName); hostsForComponentsHost.add(hostIndex); } if (decomRoleName != null) { ServiceComponentHost scHost = serviceComponent.getServiceComponentHost(hostName); if (scHost.getComponentAdminState() == HostComponentAdminState.DECOMMISSIONED) { SortedSet<Integer> hostsForComponentsHost = hostRolesInfo.get(decomRoleName); if (hostsForComponentsHost == null) { hostsForComponentsHost = new TreeSet<Integer>(); hostRolesInfo.put(decomRoleName, hostsForComponentsHost); } int hostIndex = hostsList.indexOf(hostName); hostsForComponentsHost.add(hostIndex); } } } } } for (Map.Entry<String, Collection<String>> entry : pendingHostComponents.entrySet()) { String hostname = entry.getKey(); Collection<String> hostComponents = entry.getValue(); for (String hostComponent : hostComponents) { String roleName = componentToClusterInfoKeyMap.get(hostComponent); if (null == roleName) { roleName = additionalComponentToClusterInfoKeyMap.get(hostComponent); } if (null == roleName) { for (Service service : cluster.getServices().values()) { for (ServiceComponent sc : service.getServiceComponents().values()) { if (!sc.isClientComponent() && sc.getName().equals(hostComponent)) { roleName = hostComponent.toLowerCase() + \"_hosts\"; additionalComponentToClusterInfoKeyMap.put(hostComponent, roleName); } } } } if (roleName != null) { SortedSet<Integer> hostsForComponentsHost = hostRolesInfo.get(roleName); if (hostsForComponentsHost == null) { hostsForComponentsHost = new TreeSet<Integer>(); hostRolesInfo.put(roleName, hostsForComponentsHost); } int hostIndex = hostsList.indexOf(hostname); if (hostIndex != -1) { if (!hostsForComponentsHost.contains(hostIndex)) { hostsForComponentsHost.add(hostIndex); } } else { throw new RuntimeException(\"Unable to get host index for host: \" + hostname); } } } } Map<String, Set<String>> clusterHostInfo = new HashMap<String, Set<String>>(); for (Map.Entry<String, SortedSet<Integer>> entry : hostRolesInfo.entrySet()) { TreeSet<Integer> sortedSet = new TreeSet<Integer>(entry.getValue()); Set<String> replacedRangesSet = replaceRanges(sortedSet); clusterHostInfo.put(entry.getKey(), replacedRangesSet); } clusterHostInfo.put(HOSTS_LIST, hostsSet); clusterHostInfo.put(PORTS, replaceMappedRanges(portsList)); clusterHostInfo.put(IPV4_ADDRESSES, replaceMappedRanges(ipV4List)); clusterHostInfo.put(RACKS, replaceMappedRanges(rackList)); clusterHostInfo.put(AMBARI_SERVER_HOST, Sets.newHashSet(getHostName())); boolean serverUseSsl = configuration.getApiSSLAuthentication(); int port = serverUseSsl ? configuration.getClientSSLApiPort() : configuration.getClientApiPort(); clusterHostInfo.put(AMBARI_SERVER_PORT, Sets.newHashSet(Integer.toString(port))); clusterHostInfo.put(AMBARI_SERVER_USE_SSL, Sets.newHashSet(Boolean.toString(serverUseSsl))); return clusterHostInfo; }### Assistant: @Test public void testGetClusterHostInfo() throws Exception { final HashMap<String, String> hostAttributes = new HashMap<String, String>() {{ put(\"os_family\", \"redhat\"); put(\"os_release_version\", \"5.9\"); }}; final Clusters clusters = createNiceMock(Clusters.class); List<Host> hosts = new ArrayList<Host>(); List<String> hostNames = new ArrayList<String>(); List<Integer> pingPorts = Arrays.asList(StageUtils.DEFAULT_PING_PORT, StageUtils.DEFAULT_PING_PORT, StageUtils.DEFAULT_PING_PORT, 8671, 8671, null, 8672, 8672, null, 8673); for (int i = 0; i < 10; i++) { String hostname = String.format(\"h%d\", i); Host host = createNiceMock(Host.class); expect(host.getHostName()).andReturn(hostname).anyTimes(); expect(host.getHostAttributes()).andReturn(hostAttributes).anyTimes(); expect(host.getCurrentPingPort()).andReturn(pingPorts.get(i)).anyTimes(); hosts.add(host); hostNames.add(hostname); expect(clusters.getHost(hostname)).andReturn(host).anyTimes(); } final ServiceComponentHost nnh0ServiceComponentHost = createMock(ServiceComponentHost.class); expect(nnh0ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost snnh1ServiceComponentHost = createMock(ServiceComponentHost.class); expect(snnh1ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost dnh0ServiceComponentHost = createMock(ServiceComponentHost.class); expect(dnh0ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost dnh1ServiceComponentHost = createMock(ServiceComponentHost.class); expect(dnh1ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost dnh2ServiceComponentHost = createMock(ServiceComponentHost.class); expect(dnh2ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost dnh3ServiceComponentHost = createMock(ServiceComponentHost.class); expect(dnh3ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost dnh5ServiceComponentHost = createMock(ServiceComponentHost.class); expect(dnh5ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost dnh7ServiceComponentHost = createMock(ServiceComponentHost.class); expect(dnh7ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost dnh8ServiceComponentHost = createMock(ServiceComponentHost.class); expect(dnh8ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost dnh9ServiceComponentHost = createMock(ServiceComponentHost.class); expect(dnh9ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost hbm5ServiceComponentHost = createMock(ServiceComponentHost.class); expect(hbm5ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost hbrs1ServiceComponentHost = createMock(ServiceComponentHost.class); expect(hbrs1ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost hbrs3ServiceComponentHost = createMock(ServiceComponentHost.class); expect(hbrs3ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost hbrs5ServiceComponentHost = createMock(ServiceComponentHost.class); expect(hbrs5ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost hbrs8ServiceComponentHost = createMock(ServiceComponentHost.class); expect(hbrs8ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost hbrs9ServiceComponentHost = createMock(ServiceComponentHost.class); expect(hbrs9ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost mrjt5ServiceComponentHost = createMock(ServiceComponentHost.class); expect(mrjt5ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost mrtt1ServiceComponentHost = createMock(ServiceComponentHost.class); expect(mrtt1ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost mrtt2ServiceComponentHost = createMock(ServiceComponentHost.class); expect(mrtt2ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.DECOMMISSIONED).anyTimes(); final ServiceComponentHost mrtt3ServiceComponentHost = createMock(ServiceComponentHost.class); expect(mrtt3ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.DECOMMISSIONED).anyTimes(); final ServiceComponentHost mrtt4ServiceComponentHost = createMock(ServiceComponentHost.class); expect(mrtt4ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost mrtt5ServiceComponentHost = createMock(ServiceComponentHost.class); expect(mrtt5ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost mrtt7ServiceComponentHost = createMock(ServiceComponentHost.class); expect(mrtt7ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost mrtt9ServiceComponentHost = createMock(ServiceComponentHost.class); expect(mrtt9ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); final ServiceComponentHost nns7ServiceComponentHost = createMock(ServiceComponentHost.class); expect(nns7ServiceComponentHost.getComponentAdminState()).andReturn(HostComponentAdminState.INSERVICE).anyTimes(); Map<String, Collection<String>> projectedTopology = new HashMap<String, Collection<String>>(); final HashMap<String, ServiceComponentHost> nnServiceComponentHosts = new HashMap<String, ServiceComponentHost>() { { put(\"h0\", nnh0ServiceComponentHost); } }; insertTopology(projectedTopology, \"NAMENODE\", nnServiceComponentHosts.keySet()); final HashMap<String, ServiceComponentHost> snnServiceComponentHosts = new HashMap<String, ServiceComponentHost>() { { put(\"h1\", snnh1ServiceComponentHost); } }; insertTopology(projectedTopology, \"SECONDARY_NAMENODE\", snnServiceComponentHosts.keySet()); final Map<String, ServiceComponentHost> dnServiceComponentHosts = new HashMap<String, ServiceComponentHost>() { { put(\"h0\", dnh0ServiceComponentHost); put(\"h1\", dnh1ServiceComponentHost); put(\"h2\", dnh2ServiceComponentHost); put(\"h3\", dnh3ServiceComponentHost); put(\"h5\", dnh5ServiceComponentHost); put(\"h7\", dnh7ServiceComponentHost); put(\"h8\", dnh8ServiceComponentHost); put(\"h9\", dnh9ServiceComponentHost); } }; insertTopology(projectedTopology, \"DATANODE\", dnServiceComponentHosts.keySet()); final Map<String, ServiceComponentHost> hbmServiceComponentHosts = new HashMap<String, ServiceComponentHost>() { { put(\"h5\", hbm5ServiceComponentHost); } }; insertTopology(projectedTopology, \"HBASE_MASTER\", hbmServiceComponentHosts.keySet()); final Map<String, ServiceComponentHost> hbrsServiceComponentHosts = new HashMap<String, ServiceComponentHost>() { { put(\"h1\", hbrs1ServiceComponentHost); put(\"h3\", hbrs3ServiceComponentHost); put(\"h5\", hbrs5ServiceComponentHost); put(\"h8\", hbrs8ServiceComponentHost); put(\"h9\", hbrs9ServiceComponentHost); } }; insertTopology(projectedTopology, \"HBASE_REGIONSERVER\", hbrsServiceComponentHosts.keySet()); final Map<String, ServiceComponentHost> mrjtServiceComponentHosts = new HashMap<String, ServiceComponentHost>() { { put(\"h5\", mrjt5ServiceComponentHost); } }; insertTopology(projectedTopology, \"JOBTRACKER\", mrjtServiceComponentHosts.keySet()); final Map<String, ServiceComponentHost> mrttServiceComponentHosts = new HashMap<String, ServiceComponentHost>() { { put(\"h1\", mrtt1ServiceComponentHost); put(\"h2\", mrtt2ServiceComponentHost); put(\"h3\", mrtt3ServiceComponentHost); put(\"h4\", mrtt4ServiceComponentHost); put(\"h5\", mrtt5ServiceComponentHost); put(\"h7\", mrtt7ServiceComponentHost); put(\"h9\", mrtt9ServiceComponentHost); } }; insertTopology(projectedTopology, \"TASKTRACKER\", mrttServiceComponentHosts.keySet()); final Map<String, ServiceComponentHost> nnsServiceComponentHosts = new HashMap<String, ServiceComponentHost>() { { put(\"h7\", nns7ServiceComponentHost); } }; insertTopology(projectedTopology, \"NONAME_SERVER\", nnsServiceComponentHosts.keySet()); final ServiceComponent nnComponent = createMock(ServiceComponent.class); expect(nnComponent.getName()).andReturn(\"NAMENODE\").anyTimes(); expect(nnComponent.getServiceComponentHost(anyObject(String.class))) .andAnswer(new IAnswer<ServiceComponentHost>() { @Override public ServiceComponentHost answer() throws Throwable { Object[] args = getCurrentArguments(); return nnServiceComponentHosts.get(args[0]); } }).anyTimes(); expect(nnComponent.getServiceComponentHosts()).andReturn(nnServiceComponentHosts).anyTimes(); expect(nnComponent.isClientComponent()).andReturn(false).anyTimes(); final ServiceComponent snnComponent = createMock(ServiceComponent.class); expect(snnComponent.getName()).andReturn(\"SECONDARY_NAMENODE\").anyTimes(); expect(snnComponent.getServiceComponentHost(anyObject(String.class))) .andAnswer(new IAnswer<ServiceComponentHost>() { @Override public ServiceComponentHost answer() throws Throwable { Object[] args = getCurrentArguments(); return snnServiceComponentHosts.get(args[0]); } }).anyTimes(); expect(snnComponent.getServiceComponentHosts()).andReturn(snnServiceComponentHosts).anyTimes(); expect(snnComponent.isClientComponent()).andReturn(false).anyTimes(); final ServiceComponent dnComponent = createMock(ServiceComponent.class); expect(dnComponent.getName()).andReturn(\"DATANODE\").anyTimes(); expect(dnComponent.getServiceComponentHost(anyObject(String.class))) .andAnswer(new IAnswer<ServiceComponentHost>() { @Override public ServiceComponentHost answer() throws Throwable { Object[] args = getCurrentArguments(); return dnServiceComponentHosts.get(args[0]); } }).anyTimes(); expect(dnComponent.getServiceComponentHosts()).andReturn(dnServiceComponentHosts).anyTimes(); expect(dnComponent.isClientComponent()).andReturn(false).anyTimes(); final ServiceComponent hbmComponent = createMock(ServiceComponent.class); expect(hbmComponent.getName()).andReturn(\"HBASE_MASTER\").anyTimes(); expect(hbmComponent.getServiceComponentHost(anyObject(String.class))) .andAnswer(new IAnswer<ServiceComponentHost>() { @Override public ServiceComponentHost answer() throws Throwable { Object[] args = getCurrentArguments(); return hbmServiceComponentHosts.get(args[0]); } }).anyTimes(); expect(hbmComponent.getServiceComponentHosts()).andReturn(hbmServiceComponentHosts).anyTimes(); expect(hbmComponent.isClientComponent()).andReturn(false).anyTimes(); final ServiceComponent hbrsComponent = createMock(ServiceComponent.class); expect(hbrsComponent.getName()).andReturn(\"HBASE_REGIONSERVER\").anyTimes(); expect(hbrsComponent.getServiceComponentHost(anyObject(String.class))) .andAnswer(new IAnswer<ServiceComponentHost>() { @Override public ServiceComponentHost answer() throws Throwable { Object[] args = getCurrentArguments(); return hbrsServiceComponentHosts.get(args[0]); } }).anyTimes(); Map<String, ServiceComponentHost> hbrsHosts = Maps.filterKeys(hbrsServiceComponentHosts, new Predicate<String>() { @Override public boolean apply(String s) { return s.equals(\"h1\"); } }); expect(hbrsComponent.getServiceComponentHosts()).andReturn(hbrsServiceComponentHosts).anyTimes(); expect(hbrsComponent.isClientComponent()).andReturn(false).anyTimes(); final ServiceComponent mrjtComponent = createMock(ServiceComponent.class); expect(mrjtComponent.getName()).andReturn(\"JOBTRACKER\").anyTimes(); expect(mrjtComponent.getServiceComponentHost(anyObject(String.class))) .andAnswer(new IAnswer<ServiceComponentHost>() { @Override public ServiceComponentHost answer() throws Throwable { Object[] args = getCurrentArguments(); return mrjtServiceComponentHosts.get(args[0]); } }).anyTimes(); expect(mrjtComponent.getServiceComponentHosts()).andReturn(mrjtServiceComponentHosts).anyTimes(); expect(mrjtComponent.isClientComponent()).andReturn(false).anyTimes(); final ServiceComponent mrttCompomnent = createMock(ServiceComponent.class); expect(mrttCompomnent.getName()).andReturn(\"TASKTRACKER\").anyTimes(); expect(mrttCompomnent.getServiceComponentHost(anyObject(String.class))) .andAnswer(new IAnswer<ServiceComponentHost>() { @Override public ServiceComponentHost answer() throws Throwable { Object[] args = getCurrentArguments(); return mrttServiceComponentHosts.get(args[0]); } }).anyTimes(); expect(mrttCompomnent.getServiceComponentHosts()).andReturn(mrttServiceComponentHosts).anyTimes(); expect(mrttCompomnent.isClientComponent()).andReturn(false).anyTimes(); final ServiceComponent nnsComponent = createMock(ServiceComponent.class); expect(nnsComponent.getName()).andReturn(\"NONAME_SERVER\").anyTimes(); expect(nnsComponent.getServiceComponentHost(anyObject(String.class))) .andAnswer(new IAnswer<ServiceComponentHost>() { @Override public ServiceComponentHost answer() throws Throwable { Object[] args = getCurrentArguments(); return nnsServiceComponentHosts.get(args[0]); } }).anyTimes(); expect(nnsComponent.getServiceComponentHosts()).andReturn(nnsServiceComponentHosts).anyTimes(); expect(nnsComponent.isClientComponent()).andReturn(false).anyTimes(); final Service hdfsService = createMock(Service.class); expect(hdfsService.getServiceComponents()).andReturn(new HashMap<String, ServiceComponent>() {{ put(\"NAMENODE\", nnComponent); put(\"SECONDARY_NAMENODE\", snnComponent); put(\"DATANODE\", dnComponent); }}).anyTimes(); final Service hbaseService = createMock(Service.class); expect(hbaseService.getServiceComponents()).andReturn(new HashMap<String, ServiceComponent>() {{ put(\"HBASE_MASTER\", hbmComponent); put(\"HBASE_REGIONSERVER\", hbrsComponent); }}).anyTimes(); final Service mrService = createMock(Service.class); expect(mrService.getServiceComponents()).andReturn(new HashMap<String, ServiceComponent>() { { put(\"JOBTRACKER\", mrjtComponent); put(\"TASKTRACKER\", mrttCompomnent); } }).anyTimes(); final Service nnService = createMock(Service.class); expect(nnService.getServiceComponents()).andReturn(new HashMap<String, ServiceComponent>() { { put(\"NONAME_SERVER\", nnsComponent); } }).anyTimes(); Cluster cluster = createMock(Cluster.class); expect(cluster.getHosts()).andReturn(hosts).anyTimes(); expect(cluster.getServices()).andReturn(new HashMap<String, Service>() {{ put(\"HDFS\", hdfsService); put(\"HBASE\", hbaseService); put(\"MAPREDUCE\", mrService); put(\"NONAME\", nnService); }}).anyTimes(); final TopologyManager topologyManager = injector.getInstance(TopologyManager.class); topologyManager.getPendingHostComponents(); expectLastCall().andReturn(projectedTopology).once(); replayAll(); injector.getInstance(AmbariMetaInfo.class).init(); Map<String, Set<String>> info = StageUtils.getClusterHostInfo(cluster); verifyAll(); Set<String> allHosts = info.get(StageUtils.HOSTS_LIST); assertEquals(hosts.size(), allHosts.size()); for (Host host : hosts) { assertTrue(allHosts.contains(host.getHostName())); } checkServiceHostIndexes(info, \"DATANODE\", \"slave_hosts\", projectedTopology, hostNames); checkServiceHostIndexes(info, \"NAMENODE\", \"namenode_host\", projectedTopology, hostNames); checkServiceHostIndexes(info, \"SECONDARY_NAMENODE\", \"snamenode_host\", projectedTopology, hostNames); checkServiceHostIndexes(info, \"HBASE_MASTER\", \"hbase_master_hosts\", projectedTopology, hostNames); checkServiceHostIndexes(info, \"HBASE_REGIONSERVER\", \"hbase_rs_hosts\", projectedTopology, hostNames); checkServiceHostIndexes(info, \"JOBTRACKER\", \"jtnode_host\", projectedTopology, hostNames); checkServiceHostIndexes(info, \"TASKTRACKER\", \"mapred_tt_hosts\", projectedTopology, hostNames); checkServiceHostIndexes(info, \"NONAME_SERVER\", \"noname_server_hosts\", projectedTopology, hostNames); Set<String> actualPingPorts = info.get(StageUtils.PORTS); if (pingPorts.contains(null)) { assertEquals(new HashSet<Integer>(pingPorts).size(), actualPingPorts.size() + 1); } else { assertEquals(new HashSet<Integer>(pingPorts).size(), actualPingPorts.size()); } List<Integer> pingPortsActual = getRangeMappedDecompressedSet(actualPingPorts); List<Integer> reindexedPorts = getReindexedList(pingPortsActual, new ArrayList<String>(allHosts), hostNames); List<Integer> expectedPingPorts = new ArrayList<Integer>(pingPorts); for (int i = 0; i < expectedPingPorts.size(); i++) { if (expectedPingPorts.get(i) == null) { expectedPingPorts.set(i, StageUtils.DEFAULT_PING_PORT); } } assertEquals(expectedPingPorts, reindexedPorts); assertTrue(info.containsKey(\"decom_tt_hosts\")); Set<String> decommissionedHosts = info.get(\"decom_tt_hosts\"); assertEquals(2, decommissionedHosts.toString().split(\",\").length); assertTrue(info.containsKey(StageUtils.AMBARI_SERVER_HOST)); Set<String> serverHost = info.get(StageUtils.AMBARI_SERVER_HOST); assertEquals(1, serverHost.size()); assertEquals(StageUtils.getHostName(), serverHost.iterator().next()); assertTrue(getDecompressedSet(info.get(\"hbase_rs_hosts\")).contains(9)); info = StageUtils.substituteHostIndexes(info); checkServiceHostNames(info, \"DATANODE\", \"slave_hosts\", projectedTopology); checkServiceHostNames(info, \"NAMENODE\", \"namenode_host\", projectedTopology); checkServiceHostNames(info, \"SECONDARY_NAMENODE\", \"snamenode_host\", projectedTopology); checkServiceHostNames(info, \"HBASE_MASTER\", \"hbase_master_hosts\", projectedTopology); checkServiceHostNames(info, \"HBASE_REGIONSERVER\", \"hbase_rs_hosts\", projectedTopology); checkServiceHostNames(info, \"JOBTRACKER\", \"jtnode_host\", projectedTopology); checkServiceHostNames(info, \"TASKTRACKER\", \"mapred_tt_hosts\", projectedTopology); checkServiceHostNames(info, \"NONAME_SERVER\", \"noname_server_hosts\", projectedTopology); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FieldElement sqrt() { return create(MathUtils.modularSqrt(value, getModulus())); }### Assistant: @Test public void sqrt() { FieldElement element = MersennePrimeFieldElement.create(2, modulus); FieldElement sqrt = element.sqrt(); BigInteger value = MersennePrimeFieldElement.extractValue(sqrt); assertThat(value, Is.is(BigInteger.valueOf(62))); element = MersennePrimeFieldElement .create(\"180740608519057052622341767564917758093\", bigModulus); BigInteger expected = MersennePrimeFieldElement.extractValue(element); sqrt = element.sqrt(); value = MersennePrimeFieldElement.extractValue(sqrt); assertThat(value.pow(2).mod(bigModulus.getPrime()), Is.is(expected)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void init(ExecutionContext context) { super.init(context); functionExecutionService = context.get(FunctionExecutionService.class); functionAccessor = context.get(FunctionAccessor.class); functionRouter = context.get(FunctionRouter.class); reportNodeAttachmentManager = new ReportNodeAttachmentManager(context); dynamicJsonObjectResolver = new DynamicJsonObjectResolver(new DynamicJsonValueResolver(context.getExpressionHandler())); this.selectorHelper = new SelectorHelper(dynamicJsonObjectResolver); this.functionLocator = new FunctionLocator(functionAccessor, selectorHelper, context); }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void testDrainOutputToDataSetHandle() { ExecutionContext executionContext = buildExecutionContext(); Function function = newFunction(FUNCTION_ID_SUCCESS); ((InMemoryFunctionAccessorImpl)executionContext.get(FunctionAccessor.class)).save(function); CallFunctionHandler handler = new CallFunctionHandler(); handler.init(executionContext); List<Object> addedRows = new ArrayList<>(); DataSetHandle dataSetHandle = new DataSetHandle() { @Override public Object next() { return null; } @Override public void addRow(Object row) { addedRows.add(row); } }; executionContext.getVariablesManager().putVariable(executionContext.getReport(),\"dataSet\", dataSetHandle); CallFunction callFunction = new CallFunction(); callFunction.setFunctionId(function.getId().toString()); callFunction.setResultMap(new DynamicValue<String>(\"dataSet\")); CallFunctionReportNode node = (CallFunctionReportNode) execute(callFunction); Assert.assertEquals(ReportNodeStatus.PASSED, node.getStatus()); Assert.assertEquals(\"Value1\", ((Map<String, String>)addedRows.get(0)).get(\"Output1\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String validifyUrl(String url) { if (url == null) { throw new IllegalArgumentException(\"Must give a valid URL to connect to the websocket\"); } boolean usesSSL = true; if (url.startsWith(\"http: url = url.substring(\"http: usesSSL = false; } else if (url.startsWith(\"https: url = url.substring(\"https: } if (!url.startsWith(\"ws: String prefix = \"wss: if (!usesSSL) { prefix = \"ws: } url = prefix + url; } if (!url.matches(\".*/api/v[0-9]+/wsock/websocket\")) { if (!url.endsWith(\"/\")) { url = url + \"/\"; } url = url + \"api/v1/wsock/websocket\"; } return url; }### Assistant: @Test public void testValidifyUrl() { String url = \"ws: url = client.validifyUrl(url); assert url.equals(\"ws: url = \"http: url = client.validifyUrl(url); assert url.equals(\"ws: url = \"http: url = client.validifyUrl(url); assert url.equals(\"ws: url = \"http: url = client.validifyUrl(url); assert url.equals(\"ws: url = \"http: url = client.validifyUrl(url); assert url.equals(\"ws: url = \"https: url = client.validifyUrl(url); assert url.equals(\"wss: url = \"https: url = client.validifyUrl(url); assert url.equals(\"wss: url = \"dev.vantiq.com\"; url = client.validifyUrl(url); assert url.equals(\"wss: url = \"https: url = client.validifyUrl(url); assert url.equals(\"wss: url = \"https: url = client.validifyUrl(url); assert url.equals(\"wss: url = \"https: url = client.validifyUrl(url); assert url.equals(\"wss: url = \"https: url = client.validifyUrl(url); assert url.equals(\"wss: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object readResolve() throws ObjectStreamException { try { Constructor<? extends SerializableObject> constructor = this.getClass().getConstructor(this.getClass()); try { constructor.setAccessible(true); } catch (SecurityException ex) { logger.warn(\"Accessing copy constructor {} failed.\", constructor, ex); } try { return constructor.newInstance(this); } catch (ReflectiveOperationException | IllegalArgumentException ex) { throw new RuntimeException(\"Instantiation using copy constructor failed!\", ex); } } catch (NoSuchMethodException snme) { logger.debug(\"No copy constructor detected for class {}, trying default constructor.\", this.getClass().getSimpleName()); try { SerializableObject newInstance = this.getClass().newInstance(); transferStateTo(newInstance); return newInstance; } catch (ReflectiveOperationException ex) { throw new RuntimeException(\"Deserialization using default constructor failed!\", ex); } } }### Assistant: @Test public void testReadResolve() throws Exception { SerializableOperator<Object> pre = new SerializableOperator<>(); pre.setI(10); FileOutputStream fos = new FileOutputStream(filename); ObjectOutputStream oos = new ObjectOutputStream(fos); oos.writeObject(pre); oos.close(); FileInputStream fis = new FileInputStream(filename); ObjectInputStream ois = new ObjectInputStream(fis); Object post = ois.readObject(); ois.close(); assertEquals(\"Serialized Deserialized Objects\", pre, post); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final <U> CompletionStage<U> thenCompose(Function<? super T, ? extends CompletionStage<U>> fn) { return of(delegate.thenCompose(fn), defaultExecutor); }### Assistant: @Test public void testThenCompose() throws InterruptedException { CompletionStage<Void> firstCompletionStage = Async.supplyAsync(latchSupplier(latch1), executorA); latch1.countDown(); firstCompletionStage.toCompletableFuture().join(); assertHits(executorA, 1); Function<Void, CompletableFuture<Void>> fn = x -> CompletableFuture.completedFuture(x); CompletionStage<Void> secondCompletionStage = firstCompletionStage.thenCompose(fn); secondCompletionStage.toCompletableFuture().join(); assertHits(executorA, 1); Function<Void, CompletableFuture<Void>> fn2 = Unchecked.function(x -> { latch2.await(); return CompletableFuture.completedFuture(x); }); CompletionStage<Void> thirdCompletionStage = secondCompletionStage.thenComposeAsync(fn2); latch2.countDown(); thirdCompletionStage.toCompletableFuture().join(); assertHits(executorA, 2); Function<Void, CompletableFuture<Void>> fn3 = Unchecked.function(x -> { latch3.await(); return CompletableFuture.completedFuture(x); }); CompletionStage<Void> fourthCompletionStage = thirdCompletionStage.thenComposeAsync(fn3, executorB); latch3.countDown(); fourthCompletionStage.toCompletableFuture().join(); assertHits(executorA, 2); assertHits(executorB, 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TestResult analyzeIntegrationTests(SoftwareProjectId projectId) { checkConnected(); checkSoftwareProjectId(projectId); TestResult integrationTestResult = new TestResult(); try { String artifactId = projectId.getProjectId(); if (Strings.isNullOrEmpty(artifactId)) { if (LOG.isDebugEnabled()) { LOG.debug(\"can't analyze project \" + projectId + \" without artifactId. Is it a maven project ?\"); } } else { Measure itCoverageMeasure = sonarClient.findMeasure(artifactId, \"it_coverage\"); if (itCoverageMeasure != null) { Double itCoverage = itCoverageMeasure.getValue(); integrationTestResult.setCoverage(itCoverage); } } } catch (SonarMeasureNotFoundException e) { if (LOG.isDebugEnabled()) { LOG.debug(\"Integration tests informations are not available for project \" + projectId + \", cause \" + e.getMessage()); } } return integrationTestResult; }### Assistant: @Test public void should_not_fail_if_quality_measures_are_not_found() throws SonarMeasureNotFoundException { SoftwareProjectId projectId = new SoftwareProjectId(\"artifactId\"); when(sonarClient.findMeasure(anyString(), anyString())).thenThrow( new SonarMeasureNotFoundException(\"not found\")); sonar.analyzeIntegrationTests(projectId); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public abstract void add(double x, int w);### Assistant: @Test public void testIntEncoding() { Random gen = getRandom(); ByteBuffer buf = ByteBuffer.allocate(10000); List<Integer> ref = Lists.newArrayList(); for (int i = 0; i < 3000; i++) { int n = gen.nextInt(); n = n >>> (i / 100); ref.add(n); AbstractTDigest.encode(buf, n); } buf.flip(); for (int i = 0; i < 3000; i++) { int n = AbstractTDigest.decode(buf); assertEquals(String.format(\"%d:\", i), ref.get(i).intValue(), n); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean delete(TaskDO taskDO) { try { NamingService sourceNamingService = nacosServerHolder.get(taskDO.getSourceClusterId(), taskDO.getGroupName()); EventListener eventListener = nacosListenerMap.remove(taskDO.getTaskId()); PathChildrenCache pathChildrenCache = pathChildrenCacheMap.get(taskDO.getTaskId()); sourceNamingService.unsubscribe(taskDO.getServiceName(), eventListener); CloseableUtils.closeQuietly(pathChildrenCache); Set<String> instanceUrlSet = instanceBackupMap.get(taskDO.getTaskId()); CuratorFramework client = zookeeperServerHolder.get(taskDO.getDestClusterId(), taskDO.getGroupName()); for (String instanceUrl : instanceUrlSet) { client.delete().quietly().forPath(instanceUrl); } } catch (Exception e) { log.error(\"delete task from nacos to zk was failed, taskId:{}\", taskDO.getTaskId(), e); metricsManager.recordError(MetricsStatisticsType.DELETE_ERROR); return false; } return true; }### Assistant: @Test(expected = Exception.class) public void testNacosDeleteToZookeeperWithException() throws Exception { Assert.assertFalse(nacosSyncToZookeeperService.delete(null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<DetectorDocument> findByCreatedBy(String user) { val queryBuilder = QueryBuilders.termQuery(\"createdBy\", user); val searchSourceBuilder = elasticsearchUtil.getSourceBuilder(queryBuilder).size(DEFAULT_ES_RESULTS_SIZE); val searchRequest = elasticsearchUtil.getSearchRequest(searchSourceBuilder, DETECTOR_INDEX, DETECTOR_DOC_TYPE); return getDetectorsFromElasticSearch(searchRequest); }### Assistant: @Test public void testFindByCreatedBy() { List<DetectorDocument> actualDetectors = repoUnderTest.findByCreatedBy(\"kashah\"); assertNotNull(actualDetectors); assertCheck(actualDetectors); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ModulesState getModulesState() { return modulesState; }### Assistant: @Test public void getModulesState() throws Exception { String request = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<rpc xmlns=\\\"urn:ietf:params:xml:ns:netconf:base:1.0\\\" message-id=\\\"1520261367256\\\">\\n\" + \" <get>\\n\" + \" <source>\\n\" + \" <running />\\n\" + \" </source>\\n\" + \" <filter type=\\\"subtree\\\">\\n\" + \" <modules-state xmlns=\\\"urn:ietf:params:xml:ns:yang:ietf-yang-library\\\">\\n\" + \" </modules-state>\\n\" + \" </filter>\\n\" + \" </get>\\n\" + \"</rpc>\\n\"; YangLibraryMessage yangLibraryMessage = new YangLibraryMessage(request); assertTrue(yangLibraryMessage.getModulesState() != null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static long toMilliseconds(long ts) throws IllegalArgumentException { int length = (int) (Math.log10(ts) + 1); switch (length) { case 10: return ts * 1000; case 13: return ts; case 16: return ts / 1000; case 19: return ts / 1000000; default: throw new IllegalArgumentException(\"Timestamp is out of valid range\"); } }### Assistant: @Test public void testFromMicroseconds() { assertEquals(1484802359000L, Time.toMilliseconds(1484802359000000L)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void refreshAddressCache() { Address oldOne = addressHolder.get(); Address newOne = addressService.getAgentServerHost(); if (newOne == null) { logger.debug(\"No gateway address found!\"); return; } try { boolean ok = sendGetRequest( new HttpGet(String.format(\"http: if (!ok) { return; } if (oldOne == null) { addressHolder.set(newOne); } else if (!newOne.ip().equals(oldOne.ip())) { addressHolder.compareAndSet(oldOne, newOne); } addressLastModifiedTime = System.currentTimeMillis(); logger.debug(\"change gateway address ,from {} to {} .\", oldOne, newOne); return; } catch (Throwable e) { logger.debug(\"check gateway address {} fail:{}. old address:{}!\", newOne.ip(), e.getMessage(), oldOne == null ? \"\" : oldOne.ip()); } }### Assistant: @Test public void testRefreshAddressCache() { addressService.setAgentServerVip(\"10.0.0.1\"); reportDecider.refreshAddressCache(); Assert.assertEquals(\"10.0.0.1\", reportDecider.getAvailableAddress().ip()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void writeRawVarInt32Bytes(OutputStream out, int value) throws IOException { while (true) { if ((value & ~0x7F) == 0) { out.write(value); return; } else { out.write((value & 0x7F) | 0x80); value >>>= 7; } } }### Assistant: @Test public void testWriteRawVarInt32Bytes() throws IOException { ByteArrayOutputStream testOutput = new ByteArrayOutputStream(); ProtobufOutput.writeRawVarInt32Bytes(testOutput, 0x00000001); Assert.assertArrayEquals(new byte[]{1}, testOutput.toByteArray()); testOutput.reset(); ProtobufOutput.writeRawVarInt32Bytes(testOutput, 0x01010101); Assert.assertArrayEquals(new byte[]{-127, -126, -124, 8}, testOutput.toByteArray()); testOutput.reset(); ProtobufOutput.writeRawVarInt32Bytes(testOutput, 0xFFFFFF00); Assert.assertArrayEquals(new byte[]{-128, -2, -1, -1, 15}, testOutput.toByteArray()); testOutput.reset(); DataOutput testDataOutput = new DataOutputStream(testOutput); ProtobufOutput.writeRawVarInt32Bytes(testDataOutput, 0x00000001); Assert.assertArrayEquals(new byte[]{1}, testOutput.toByteArray()); testOutput.reset(); ProtobufOutput.writeRawVarInt32Bytes(testDataOutput, 0x01010101); Assert.assertArrayEquals(new byte[]{-127, -126, -124, 8}, testOutput.toByteArray()); testOutput.reset(); ProtobufOutput.writeRawVarInt32Bytes(testDataOutput, 0xFFFFFF00); Assert.assertArrayEquals(new byte[]{-128, -2, -1, -1, 15}, testOutput.toByteArray()); testOutput.reset(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public static UUID getInstanceId(@Nonnull AgentDescription agentDescription) { requireNonNull(agentDescription, \"Agent description cannot be null.\"); return tryParseAsUUID(getEnvParameter(agentDescription, ENV_INSTANCE_ID)); }### Assistant: @Test public void getInstanceIdWithNoEnvVariable() { AgentDescription description = new TestSBuildAgent(); assertThat(DockerCloudUtils.getInstanceId(description)).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int run(String[] args) throws Exception { addInputOption(); addOutputOption(); addOption(\"similarityClassname\", \"s\", \"Name of distributed similarity measures class to instantiate, \" + \"alternatively use one of the predefined similarities (\" + VectorSimilarityMeasures.list() + ')'); addOption(\"maxSimilaritiesPerItem\", \"m\", \"try to cap the number of similar items per item to this number \" + \"(default: \" + DEFAULT_MAX_SIMILAR_ITEMS_PER_ITEM + ')', String.valueOf(DEFAULT_MAX_SIMILAR_ITEMS_PER_ITEM)); addOption(\"maxPrefsPerUser\", \"mppu\", \"max number of preferences to consider per user, \" + \"users with more preferences will be sampled down (default: \" + DEFAULT_MAX_PREFS_PER_USER + ')', String.valueOf(DEFAULT_MAX_PREFS_PER_USER)); addOption(\"minPrefsPerUser\", \"mp\", \"ignore users with less preferences than this \" + \"(default: \" + DEFAULT_MIN_PREFS_PER_USER + ')', String.valueOf(DEFAULT_MIN_PREFS_PER_USER)); addOption(\"booleanData\", \"b\", \"Treat input as without pref values\", String.valueOf(Boolean.FALSE)); addOption(\"threshold\", \"tr\", \"discard item pairs with a similarity value below this\", false); Map<String,List<String>> parsedArgs = parseArguments(args); if (parsedArgs == null) { return -1; } String similarityClassName = getOption(\"similarityClassname\"); int maxSimilarItemsPerItem = Integer.parseInt(getOption(\"maxSimilaritiesPerItem\")); int maxPrefsPerUser = Integer.parseInt(getOption(\"maxPrefsPerUser\")); int minPrefsPerUser = Integer.parseInt(getOption(\"minPrefsPerUser\")); boolean booleanData = Boolean.valueOf(getOption(\"booleanData\")); double threshold = hasOption(\"threshold\") ? Double.parseDouble(getOption(\"threshold\")) : RowSimilarityJob.NO_THRESHOLD; Path similarityMatrixPath = getTempPath(\"similarityMatrix\"); Path prepPath = getTempPath(\"prepareRatingMatrix\"); AtomicInteger currentPhase = new AtomicInteger(); if (shouldRunNextPhase(parsedArgs, currentPhase)) { ToolRunner.run(getConf(), new PreparePreferenceMatrixJob(), new String[] { \"--input\", getInputPath().toString(), \"--output\", prepPath.toString(), \"--maxPrefsPerUser\", String.valueOf(maxPrefsPerUser), \"--minPrefsPerUser\", String.valueOf(minPrefsPerUser), \"--booleanData\", String.valueOf(booleanData), \"--tempDir\", getTempPath().toString(), }); } if (shouldRunNextPhase(parsedArgs, currentPhase)) { int numberOfUsers = HadoopUtil.readInt(new Path(prepPath, PreparePreferenceMatrixJob.NUM_USERS), getConf()); ToolRunner.run(getConf(), new RowSimilarityJob(), new String[] { \"--input\", new Path(prepPath, PreparePreferenceMatrixJob.RATING_MATRIX).toString(), \"--output\", similarityMatrixPath.toString(), \"--numberOfColumns\", String.valueOf(numberOfUsers), \"--similarityClassname\", similarityClassName, \"--maxSimilaritiesPerRow\", String.valueOf(maxSimilarItemsPerItem), \"--excludeSelfSimilarity\", String.valueOf(Boolean.TRUE), \"--threshold\", String.valueOf(threshold), \"--tempDir\", getTempPath().toString(), }); } if (shouldRunNextPhase(parsedArgs, currentPhase)) { Job mostSimilarItems = prepareJob(similarityMatrixPath, getOutputPath(), SequenceFileInputFormat.class, MostSimilarItemPairsMapper.class, EntityEntityWritable.class, DoubleWritable.class, MostSimilarItemPairsReducer.class, EntityEntityWritable.class, DoubleWritable.class, TextOutputFormat.class); Configuration mostSimilarItemsConf = mostSimilarItems.getConfiguration(); mostSimilarItemsConf.set(ITEM_ID_INDEX_PATH_STR, new Path(prepPath, PreparePreferenceMatrixJob.ITEMID_INDEX).toString()); mostSimilarItemsConf.setInt(MAX_SIMILARITIES_PER_ITEM, maxSimilarItemsPerItem); boolean succeeded = mostSimilarItems.waitForCompletion(true); if (!succeeded) { return -1; } } return 0; }### Assistant: @Test public void testCompleteJob() throws Exception { File inputFile = getTestTempFile(\"prefs.txt\"); File outputDir = getTestTempDir(\"output\"); outputDir.delete(); File tmpDir = getTestTempDir(\"tmp\"); writeLines(inputFile, \"2,1,1\", \"1,2,1\", \"3,4,1\", \"1,3,2\", \"2,3,1\"); ItemSimilarityJob similarityJob = new ItemSimilarityJob(); Configuration conf = new Configuration(); conf.set(\"mapred.input.dir\", inputFile.getAbsolutePath()); conf.set(\"mapred.output.dir\", outputDir.getAbsolutePath()); conf.setBoolean(\"mapred.output.compress\", false); similarityJob.setConf(conf); similarityJob.run(new String[] { \"--tempDir\", tmpDir.getAbsolutePath(), \"--similarityClassname\", CosineSimilarity.class.getName() }); File outPart = outputDir.listFiles(new FilenameFilter() { @Override public boolean accept(File dir, String name) { return name.startsWith(\"part-\"); } })[0]; BufferedReader reader = Files.newReader(outPart, Charsets.UTF_8); String line; int currentLine = 1; while ( (line = reader.readLine()) != null) { String[] tokens = TAB.split(line); long itemAID = Long.parseLong(tokens[0]); long itemBID = Long.parseLong(tokens[1]); double similarity = Double.parseDouble(tokens[2]); if (currentLine == 1) { assertEquals(1L, itemAID); assertEquals(3L, itemBID); assertEquals(0.45, similarity, 0.01); } if (currentLine == 2) { assertEquals(2L, itemAID); assertEquals(3L, itemBID); assertEquals(0.89, similarity, 0.01); } currentLine++; } int linesWritten = currentLine-1; assertEquals(2, linesWritten); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull @Override public Date toConverted(@Nullable Long supported) { if (supported == null) { return new Date(); } return new Date(supported); }### Assistant: @Test public void toConvertedShouldReturnCurrentDateWhenTimestampIsNegative() throws Exception { final Date actual = underTest.toConverted(Long.MIN_VALUE); assertThat(actual) .isNotNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SSLCertificateMetadataDetails getCertificateMetaData(String token, String certificateName, String certificateType){ String metaDataPath = (certificateType.equalsIgnoreCase(\"internal\"))? SSLCertificateConstants.SSL_CERT_PATH :SSLCertificateConstants.SSL_EXTERNAL_CERT_PATH; String certificatePath = metaDataPath + '/' + certificateName; log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER)). put(LogMessage.ACTION, \"Get Certificate Info\"). put(LogMessage.MESSAGE, String.format (\"Trying to get Info for [%s]\", certificatePath)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL)). build())); Response response = ControllerUtil.getReqProcessor().process(\"/certmanager\",\"{\\\"path\\\":\\\"\"+certificatePath+\"\\\"}\",token); SSLCertificateMetadataDetails certificateMetadataDetails = null; if(HttpStatus.OK.equals(response.getHttpstatus())){ try { ObjectMapper objMapper = new ObjectMapper(); JsonNode dataNode = objMapper.readTree(response.getResponse()).get(\"data\"); certificateMetadataDetails = getCertificateInfo(dataNode); } catch (IOException e) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER)). put(LogMessage.ACTION, \"getCertificateMetaData\"). put(LogMessage.MESSAGE, \"Error while trying to get details about the certificate\"). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL)). build())); } }else { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER)). put(LogMessage.ACTION, \"getCertificateMetaData\"). put(LogMessage.MESSAGE, \"Error while trying to get certificate metadata\"). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL)). build())); } log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER)). put(LogMessage.ACTION, \"Get Certificate metadata Info\"). put(LogMessage.MESSAGE, \"Getting metaDataInfo completed\"). put(LogMessage.STATUS, response.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL)). build())); return certificateMetadataDetails; }### Assistant: @Test public void testGetExternalCertificateMetaDataSuccessfully() { UserDetails userDetails = getMockUser(true); userDetails.setUsername(ADMIN_USER); String certificatePath = SSLCertificateConstants.SSL_EXTERNAL_CERT_PATH + '/' + CERT_NAME; Response responseObj = getMockResponse(HttpStatus.OK, true, \"{ \\\"data\\\": {\\\"akmid\\\":\\\"103001\\\",\\\"applicationName\\\":\\\"tvt\\\", \" + \" \\\"applicationOwnerEmailId\\\":\\\"appowneremail@test.com\\\", \\\"applicationTag\\\":\\\"T-Vault\\\", \" + \" \\\"authority\\\":\\\"T-Mobile Issuing CA 01 - SHA2\\\", \\\"certCreatedBy\\\": \\\"testuser1\\\", \" + \" \\\"certOwnerEmailId\\\":\\\"owneremail@test.com\\\", \\\"certOwnerNtid\\\": \\\"testuser1\\\", \\\"certType\\\": \\\"external\\\", \" + \" \\\"certificateId\\\":\\\"62765\\\",\\\"certificateName\\\":\\\"certificatename.t-mobile.com\\\", \" + \" \\\"certificateStatus\\\":\\\"Active\\\", \\\"containerName\\\":\\\"VenafiBin_12345\\\", \\\"containerId\\\": \\\"99\\\", \" + \" \\\"createDate\\\":\\\"2020-06-24\\\", \\\"expiryDate\\\":\\\"2021-06-24\\\", \\\"requestStatus\\\": \\\"Approved\\\", \" + \" \\\"dnsNames\\\":\\\"test.t-mobile.com, test1.t-mobile.com, certtestest.t-mobile.com\\\",\" + \" \\\"projectLeadEmailId\\\":\\\"project@email.com\\\"}}\"); when(ControllerUtil.getReqProcessor().process(GET_CERT_DETAIL, GET_CERT_DETAIL_VAL + certificatePath + \"\\\"}\", userDetails.getClientToken())).thenReturn(responseObj); SSLCertificateMetadataDetails certificateMetadata = getSSLCertificateMetadataDetails(); certificateMetadata.setRequestStatus(\"Approved\"); certificateMetadata.setCertType(\"external\"); certificateMetadata.setContainerId(99); String certType = \"external\"; SSLCertificateMetadataDetails certificateMetadataObj = certificateUtils .getCertificateMetaData(userDetails.getClientToken(), CERT_NAME, certType); assertEquals(certificateMetadataObj.getCertificateName(), certificateMetadata.getCertificateName()); assertEquals(certificateMetadataObj.getAkmid(), certificateMetadata.getAkmid()); assertEquals(certificateMetadataObj.getApplicationName(), certificateMetadata.getApplicationName()); assertEquals(certificateMetadataObj.getCreateDate(), certificateMetadata.getCreateDate()); assertEquals(certificateMetadataObj.getApplicationTag(), certificateMetadata.getApplicationTag()); assertEquals(certificateMetadataObj.getCertOwnerNtid(), certificateMetadata.getCertOwnerNtid()); assertEquals(certificateMetadataObj.getRequestStatus(), certificateMetadata.getRequestStatus()); assertEquals(certificateMetadataObj.getContainerId(), certificateMetadata.getContainerId()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean hasStorageFor(long size) { return size <= getFreeSpace(); }### Assistant: @Test public void testHasStorageFor() { AbstractCacheWrapper uut = new AbstractCacheWrapper(entries, null, 6500, predicate -> true); assertTrue(uut.hasStorageFor(c0.getByteSize())); assertTrue(uut.hasStorageFor(c1.getByteSize())); assertTrue(uut.hasStorageFor(c2.getByteSize())); assertTrue(uut.hasStorageFor(c3.getByteSize())); uut.cacheData(c0); uut.cacheData(c1); assertTrue(uut.hasStorageFor(c0.getByteSize())); assertTrue(uut.hasStorageFor(c1.getByteSize())); assertTrue(uut.hasStorageFor(c2.getByteSize())); assertFalse(uut.hasStorageFor(c3.getByteSize())); uut.cacheData(c2); assertFalse(uut.hasStorageFor(c0.getByteSize())); assertFalse(uut.hasStorageFor(c1.getByteSize())); assertFalse(uut.hasStorageFor(c2.getByteSize())); assertFalse(uut.hasStorageFor(c3.getByteSize())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public V remove(Object key) { if (key == null) { throw new NullPointerException(\"Key is null\"); } IK innerKey = mapKeyForQuery((K)key); IV innerValue = innerConcurrentMap.remove(innerKey); if (innerValue == null) { return null; } return unmapValue(innerValue); }### Assistant: @Test public void testRemove() { try { _concurrentMap.remove(null); Assert.fail(); } catch (NullPointerException nullPointerException) { Assert.assertEquals( \"Key is null\", nullPointerException.getMessage()); } Assert.assertNull(_concurrentMap.remove(_testKey)); _assertEventQueue(Event.MAP_KEY_FOR_QUERY); Assert.assertNull(_concurrentMap.put(_testKey, _testValue1)); _assertEventQueue(Event.MAP_KEY, Event.MAP_VALUE); Assert.assertSame(_testValue1, _concurrentMap.remove(_testKey)); _assertEventQueue(Event.MAP_KEY_FOR_QUERY, Event.UNMAP_VALUE); Assert.assertNull(_concurrentMap.remove(_testKey)); _assertEventQueue(Event.MAP_KEY_FOR_QUERY); Assert.assertNull(_concurrentMap.get(_testKey)); _assertEventQueue(Event.MAP_KEY_FOR_QUERY); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public T value(final Field<T> field) { return field.addition().inverse(field.actual(this.inverse)); }### Assistant: @Test public void addInverseDelegatesToFieldAddition() { final MkAddition<Object> add = new MkAddition<>(new String()); final SpyField<Object> field = new SpyField<>( new MkField<Object>(new Object(), add) ); final Scalar<Object> scalar = new Scalar.Default<>(new Object()); new AddInverse<>(scalar).value(field); MatcherAssert.assertThat( add.inverted(), Matchers.is(true) ); MatcherAssert.assertThat( field.calls().additioned(), Matchers.is(true) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void updateQualityOf(Item item) { if ((!isAgedBrie(item)) && !\"Backstage passes to a TAFKAL80ETC concert\".equals(item.getName())) { if (item.getQuality() > 0) { if (!\"Sulfuras, Hand of Ragnaros\".equals(item.getName())) { item.setQuality(item.getQuality() - 1); } } } else { if (item.getQuality() < 50) { item.setQuality(item.getQuality() + 1); if (\"Backstage passes to a TAFKAL80ETC concert\".equals(item.getName())) { if (item.getSellIn() < 11) { if (item.getQuality() < 50) { item.setQuality( item.getQuality() + 1); } } if (item.getSellIn() < 6) { if ( item.getQuality() < 50) { item.setQuality(item.getQuality() + 1); } } } } } if (!\"Sulfuras, Hand of Ragnaros\".equals(item.getName())) { item.setSellIn(item.getSellIn() - 1); } if (item.getSellIn() < 0) { if (!isAgedBrie(item)) { if (!\"Backstage passes to a TAFKAL80ETC concert\".equals(item.getName())) { if (item.getQuality() > 0) { if (!\"Sulfuras, Hand of Ragnaros\".equals(item.getName())) { item.setQuality(item.getQuality() - 1); } } } else { item.setQuality(item.getQuality() - item.getQuality()); } } else { if (item.getQuality() < 50) { item.setQuality(item.getQuality() + 1); } } } }### Assistant: @Test public void testThatQualityOfItemDecreasesByOneIfSellDateDidNotPass() { Item item = new Item(\"An item\", 1, 50); GildedRose.updateQualityOf(item); assertThat(item.getQuality()).isEqualTo(49); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public RequestStatus createResources(final Request request) throws SystemException, UnsupportedPropertyException, ResourceAlreadyExistsException, NoSuchParentResourceException { Set<Map<String, Object>> requestMaps = request.getProperties(); if (requestMaps.size() > 1) { throw new SystemException(\"Can only initiate one upgrade per request.\"); } final Map<String, Object> requestMap = requestMaps.iterator().next(); final String clusterName = (String) requestMap.get(UPGRADE_CLUSTER_NAME); final Cluster cluster; try { cluster = getManagementController().getClusters().getCluster(clusterName); } catch (AmbariException e) { throw new NoSuchParentResourceException( String.format(\"Cluster %s could not be loaded\", clusterName)); } if (!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER, cluster.getResourceId(), EnumSet.of(RoleAuthorization.CLUSTER_UPGRADE_DOWNGRADE_STACK))) { throw new AuthorizationException(\"The authenticated user does not have authorization to \" + \"manage upgrade and downgrade\"); } UpgradeEntity entity = createResources(new Command<UpgradeEntity>() { @Override public UpgradeEntity invoke() throws AmbariException, AuthorizationException { final String directionProperty = (String) requestMap.get(UPGRADE_DIRECTION); if (StringUtils.isEmpty(directionProperty)) { throw new AmbariException(String.format(\"%s is required\", UPGRADE_DIRECTION)); } final Direction direction = Direction.valueOf(directionProperty); UpgradeType upgradeType = UpgradeType.ROLLING; if (requestMap.containsKey(UPGRADE_TYPE)) { try { upgradeType = UpgradeType.valueOf(requestMap.get(UPGRADE_TYPE).toString()); } catch (Exception e) { throw new AmbariException(String.format(\"Property %s has an incorrect value of %s.\", UPGRADE_TYPE, requestMap.get(UPGRADE_TYPE))); } } final String version = (String) requestMap.get(UPGRADE_VERSION); final UpgradeContext upgradeContext = s_upgradeContextFactory.create(cluster, upgradeType, direction, version, requestMap); UpgradePack upgradePack = validateRequest(upgradeContext); upgradeContext.setUpgradePack(upgradePack); try { return createUpgrade(upgradeContext); } catch (Exception e) { LOG.error(\"Error appears during upgrade task submitting\", e); clusters.get().invalidate(cluster); throw e; } } }); if (null == entity) { throw new SystemException(\"Could not load upgrade\"); } notifyCreate(Resource.Type.Upgrade, request); Resource res = new ResourceImpl(Resource.Type.Upgrade); res.setProperty(UPGRADE_REQUEST_ID, entity.getRequestId()); return new RequestStatusImpl(null, Collections.singleton(res)); }### Assistant: @Test public void testCreateResourcesWithAutoSkipAll() throws Exception { Cluster cluster = clusters.getCluster(\"c1\"); Map<String, Object> requestProps = new HashMap<>(); requestProps.put(UpgradeResourceProvider.UPGRADE_CLUSTER_NAME, \"c1\"); requestProps.put(UpgradeResourceProvider.UPGRADE_VERSION, \"2.2.0.0\"); requestProps.put(UpgradeResourceProvider.UPGRADE_PACK, \"upgrade_test\"); requestProps.put(UpgradeResourceProvider.UPGRADE_TYPE, UpgradeType.ROLLING.toString()); requestProps.put(UpgradeResourceProvider.UPGRADE_SKIP_FAILURES, Boolean.TRUE.toString()); requestProps.put(UpgradeResourceProvider.UPGRADE_SKIP_SC_FAILURES, Boolean.TRUE.toString()); requestProps.put(UpgradeResourceProvider.UPGRADE_SKIP_MANUAL_VERIFICATION, Boolean.TRUE.toString()); requestProps.put(UpgradeResourceProvider.UPGRADE_SKIP_PREREQUISITE_CHECKS, Boolean.TRUE.toString()); requestProps.put(UpgradeResourceProvider.UPGRADE_DIRECTION, Direction.UPGRADE.name()); ResourceProvider upgradeResourceProvider = createProvider(amc); Request request = PropertyHelper.getCreateRequest(Collections.singleton(requestProps), null); upgradeResourceProvider.createResources(request); List<UpgradeEntity> upgrades = upgradeDao.findUpgrades(cluster.getClusterId()); assertEquals(1, upgrades.size()); UpgradeEntity entity = upgrades.get(0); assertEquals(cluster.getClusterId(), entity.getClusterId().longValue()); List<UpgradeGroupEntity> upgradeGroups = entity.getUpgradeGroups(); assertEquals(2, upgradeGroups.size()); UpgradeGroupEntity zookeeperGroup = upgradeGroups.get(0); assertEquals(\"ZOOKEEPER\", zookeeperGroup.getName()); List<UpgradeItemEntity> zookeeperUpgradeItems = zookeeperGroup.getItems(); assertEquals(4, zookeeperUpgradeItems.size()); assertEquals(\"Restarting ZooKeeper Server on h1\", zookeeperUpgradeItems.get(0).getText()); assertEquals(\"Updating configuration zookeeper-newconfig\", zookeeperUpgradeItems.get(1).getText()); assertEquals(\"Service Check ZooKeeper\", zookeeperUpgradeItems.get(2).getText()); assertTrue(zookeeperUpgradeItems.get(3).getText().contains(\"There are failures that were automatically skipped\")); UpgradeItemEntity skippedFailureCheck = zookeeperUpgradeItems.get(zookeeperUpgradeItems.size() - 1); skippedFailureCheck.getTasks().contains(AutoSkipFailedSummaryAction.class.getName()); UpgradeGroupEntity postClusterGroup = upgradeGroups.get(1); assertEquals(\"POST_CLUSTER\", postClusterGroup.getName()); List<UpgradeItemEntity> postClusterUpgradeItems = postClusterGroup.getItems(); assertEquals(1, postClusterUpgradeItems.size()); assertEquals(\"Save Cluster State\", postClusterUpgradeItems.get(0).getText()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Document toDocument(SOAPEnvelope envelope) { try { if (envelope instanceof Element) { return ((Element) envelope).getOwnerDocument(); } else { ByteArrayOutputStream bos = new ByteArrayOutputStream(); envelope.build(); envelope.serialize(bos); ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactoryUtils.newInstance(); documentBuilderFactory.setNamespaceAware(true); return documentBuilderFactory.newDocumentBuilder().parse(bis); } } catch (Exception ex) { throw new IllegalArgumentException(\"Error in converting SOAP Envelope to Document\", ex); } }### Assistant: @Test @SuppressWarnings(\"Since15\") public void testToDocument() throws Exception { Resource resource = new ClassPathResource(\"org/springframework/ws/soap/soap11/soap11.xml\"); DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactoryUtils.newInstance(); documentBuilderFactory.setNamespaceAware(true); DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder(); Document expected = documentBuilder.parse(SaxUtils.createInputSource(resource)); SOAPModelBuilder builder = OMXMLBuilderFactory.createSOAPModelBuilder(resource.getInputStream(), null); SOAPMessage soapMessage = builder.getSOAPMessage(); Document result = AxiomUtils.toDocument(soapMessage.getSOAPEnvelope()); assertXMLEqual(\"Invalid document generated from SOAPEnvelope\", expected, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Event> convert(Message message) throws JMSException { Event event = new SimpleEvent(); Map<String, String> headers = event.getHeaders(); @SuppressWarnings(\"rawtypes\") Enumeration propertyNames = message.getPropertyNames(); while (propertyNames.hasMoreElements()) { String name = propertyNames.nextElement().toString(); String value = message.getStringProperty(name); headers.put(name, value); } if (message instanceof BytesMessage) { BytesMessage bytesMessage = (BytesMessage)message; long length = bytesMessage.getBodyLength(); if (length > 0L) { if (length > Integer.MAX_VALUE) { throw new JMSException(\"Unable to process message \" + \"of size \" + length); } byte[] body = new byte[(int)length]; int count = bytesMessage.readBytes(body); if (count != length) { throw new JMSException(\"Unable to read full message. \" + \"Read \" + count + \" of total \" + length); } event.setBody(body); } } else if (message instanceof TextMessage) { TextMessage textMessage = (TextMessage)message; String text = textMessage.getText(); if (text != null) { event.setBody(text.getBytes(charset)); } } else if (message instanceof ObjectMessage) { ObjectMessage objectMessage = (ObjectMessage)message; Object object = objectMessage.getObject(); if (object != null) { ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutput out = null; try { out = new ObjectOutputStream(bos); out.writeObject(object); event.setBody(bos.toByteArray()); } catch (IOException e) { throw new FlumeException(\"Error serializing object\", e); } finally { try { if (out != null) { out.close(); } } catch (IOException e) { throw new FlumeException(\"Error closing ObjectOutputStream\", e); } try { if (bos != null) { bos.close(); } } catch (IOException e) { throw new FlumeException(\"Error closing ByteArrayOutputStream\", e); } } } } List<Event> events = new ArrayList<Event>(1); events.add(event); return events; }### Assistant: @Test(expected = JMSException.class) public void testBytesMessagePartialReturn() throws Exception { createBytesMessage(); when(((BytesMessage)message).readBytes(any(byte[].class))) .thenReturn(BYTES.length + 1); createHeaders(); converter.convert(message); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void shutdown() { shuttingDown.set(true); }### Assistant: @Test public void networkPartitionTest() throws Exception { assumeThat(System.getProperty(\"NodeCollectionWatcher.SlowTests\"), is(\"ok\")); final int maxPropagationTime = 10; final String pathPrefix = \"/foo/partition\"; curator.create().creatingParentsIfNeeded().forPath(pathPrefix); final int nodeCount = 10; final ListenerCounter listener = new ListenerCounter(nodeCount, nodeCount, nodeCount); final NodeCollectionWatcher nodeCollectionWatcher = new NodeCollectionWatcher(zooKeeper, pathPrefix, listener); for (int i = 0; i < nodeCount; i++) { curator.create().forPath(pathPrefix + \"/node\" + i, getData()); } assertTrue(listener.createLatch.await(maxPropagationTime, TimeUnit.MILLISECONDS)); assertThat(listener.createCount.get(), is(nodeCount)); assertThat(listener.removeCount.get(), is(0)); assertThat(listener.dataCount.get(), is(0)); final InstanceSpec firstInstance = zkServer.findConnectionInstance(zooKeeper); zkServer.killServer(firstInstance); listener.createLatch = new CountDownLatch(1); curator.create().forPath(pathPrefix + \"/stillalive\", getData()); assertTrue(listener.createLatch.await(10, TimeUnit.SECONDS)); assertThat(listener.createCount.get(), is(nodeCount + 1)); assertThat(listener.removeCount.get(), is(0)); assertThat(listener.dataCount.get(), is(0)); final InstanceSpec secondInstance = zkServer.findConnectionInstance(zooKeeper); assertThat(firstInstance, is(not(secondInstance))); zkServer.killServer(secondInstance); boolean retry; do { System.out.println(\"Checking node with Curator... This might take a while...\"); try { final Stat stat = curator.checkExists().forPath(pathPrefix); retry = false; assertThat(stat, is(notNullValue())); } catch (CuratorConnectionLossException ex) { System.out.println(\"Missing connection. Retrying\"); retry = true; } } while (retry); zkServer.restartServer(firstInstance); zkServer.restartServer(secondInstance); listener.createLatch = new CountDownLatch(1); System.out.println(\"Creating node via Curator... This might take a while...\"); curator.create().forPath(pathPrefix + \"/imback\", getData()); assertTrue(listener.createLatch.await(maxPropagationTime, TimeUnit.MILLISECONDS)); assertThat(listener.createCount.get(), is(nodeCount + 2)); assertThat(listener.removeCount.get(), is(0)); assertThat(listener.dataCount.get(), is(0)); for (int i = 0; i < nodeCount; i++) { final Stat stat = curator.setData().forPath(pathPrefix + \"/node\" + i, getData()); assertThat(stat, is(notNullValue())); } assertTrue(listener.dataLatch.await(maxPropagationTime, TimeUnit.MILLISECONDS)); assertThat(listener.createCount.get(), is(nodeCount + 2)); assertThat(listener.removeCount.get(), is(0)); assertThat(listener.dataCount.get(), is(nodeCount)); for (int i = 0; i < nodeCount; i++) { curator.delete().forPath(pathPrefix + \"/node\" + i); } assertTrue(listener.removeLatch.await(maxPropagationTime, TimeUnit.MILLISECONDS)); assertThat(listener.createCount.get(), is(nodeCount + 2)); assertThat(listener.removeCount.get(), is(nodeCount)); assertThat(listener.dataCount.get(), is(nodeCount)); nodeCollectionWatcher.shutdown(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isInteger( char[] digitChars ) { return isInteger ( digitChars, 0, digitChars.length ); }### Assistant: @Test public void verifyNonFittingNegativeIntWithSameLengthAsMinInt() { assertFalse(CharScanner.isInteger(\"-2147483649\".toCharArray())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull public Observable<Boolean> containsStream(@NonNull String key) { return containsOnce(key) .toObservable() .mergeWith(Observable.create(emitter -> { RxPreferenceContainsListener listener = new RxPreferenceContainsListener(key, emitter); registerRxPreferenceListener(listener, emitter); })); }### Assistant: @Test public void containsStream_unregistersListenerOnUnsubscribe() { final String testKey = \"Test contains key\"; when(mockSharedPreferences.contains(testKey)).thenReturn(true); final TestObserver<Boolean> subscription = rxPreferences.containsStream(testKey).test(); subscriptions.add(subscription); final ArgumentCaptor<SharedPreferences.OnSharedPreferenceChangeListener> listenerCaptor = ArgumentCaptor.forClass(SharedPreferences.OnSharedPreferenceChangeListener.class); verify(mockSharedPreferences).registerOnSharedPreferenceChangeListener(listenerCaptor.capture()); final SharedPreferences.OnSharedPreferenceChangeListener listener = listenerCaptor.getValue(); verify(mockSharedPreferences, never()).unregisterOnSharedPreferenceChangeListener(any()); subscription.dispose(); verify(mockSharedPreferences).unregisterOnSharedPreferenceChangeListener(listener); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public WorkflowOperationResult start(WorkflowInstance workflowInstance, JobContext context) throws WorkflowOperationException { logger.info(\"Running analyze-tracks workflow operation on workflow {}\", workflowInstance.getId()); final MediaPackage mediaPackage = workflowInstance.getMediaPackage(); final String sourceFlavor = getConfig(workflowInstance, OPT_SOURCE_FLAVOR); Map<String, String> properties = new HashMap<>(); final MediaPackageElementFlavor flavor = MediaPackageElementFlavor.parseFlavor(sourceFlavor); final Track[] tracks = mediaPackage.getTracks(flavor); if (tracks.length <= 0) { if (BooleanUtils.toBoolean(getConfig(workflowInstance, OPT_FAIL_NO_TRACK, \"false\"))) { throw new WorkflowOperationException(\"No matching tracks for flavor \" + sourceFlavor); } logger.info(\"No tracks with specified flavors ({}) to analyse.\", sourceFlavor); return createResult(mediaPackage, properties, Action.CONTINUE, 0); } List<Fraction> aspectRatios = getAspectRatio(getConfig(workflowInstance, OPT_VIDEO_ASPECT, \"\")); for (Track track : tracks) { final String varName = toVariableName(track.getFlavor()); properties.put(varName + \"_media\", \"true\"); properties.put(varName + \"_video\", Boolean.toString(track.hasVideo())); properties.put(varName + \"_audio\", Boolean.toString(track.hasAudio())); if (track.hasVideo()) { for (VideoStream video: ((TrackImpl) track).getVideo()) { properties.put(varName + \"_resolution_x\", video.getFrameWidth().toString()); properties.put(varName + \"_resolution_y\", video.getFrameHeight().toString()); Fraction trackAspect = Fraction.getReducedFraction(video.getFrameWidth(), video.getFrameHeight()); properties.put(varName + \"_aspect\", trackAspect.toString()); properties.put(varName + \"_framerate\", video.getFrameRate().toString()); if (!aspectRatios.isEmpty()) { trackAspect = getNearestAspectRatio(trackAspect, aspectRatios); properties.put(varName + \"_aspect_snap\", trackAspect.toString()); } } } } logger.info(\"Finished analyze-tracks workflow operation adding the properties: {}\", properties); return createResult(mediaPackage, properties, Action.CONTINUE, 0); }### Assistant: @Test public void testStart() throws MediaPackageException, WorkflowOperationException { MediaPackage mediaPackage = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder().createNew(); VideoStreamImpl videoStream = new VideoStreamImpl(\"234\"); videoStream.setFrameWidth(1280); videoStream.setFrameHeight(720); videoStream.setFrameRate(30.0f); TrackImpl track = new TrackImpl(); track.setFlavor(MediaPackageElementFlavor.parseFlavor(\"presenter/source\")); track.addStream(videoStream); JobContext jobContext = EasyMock.createMock(JobContext.class); EasyMock.replay(jobContext); WorkflowOperationInstance operationInstance = EasyMock.createMock(WorkflowOperationInstance.class); String[][] config = { {AnalyzeTracksWorkflowOperationHandler.OPT_SOURCE_FLAVOR, \"*/source\"}, {AnalyzeTracksWorkflowOperationHandler.OPT_VIDEO_ASPECT, \"4/3,16/9\"}}; for (String[] cfg: config) { EasyMock.expect(operationInstance.getConfiguration(cfg[0])).andReturn(cfg[1]).anyTimes(); } EasyMock.expect(operationInstance.getConfiguration(AnalyzeTracksWorkflowOperationHandler.OPT_FAIL_NO_TRACK)) .andReturn(\"true\"); EasyMock.expect(operationInstance.getConfiguration(AnalyzeTracksWorkflowOperationHandler.OPT_FAIL_NO_TRACK)) .andReturn(\"false\").anyTimes(); EasyMock.replay(operationInstance); WorkflowInstance workflowInstance = EasyMock.createMock(WorkflowInstance.class); EasyMock.expect(workflowInstance.getMediaPackage()).andReturn(mediaPackage).anyTimes(); EasyMock.expect(workflowInstance.getId()).andReturn(0L).anyTimes(); EasyMock.expect(workflowInstance.getCurrentOperation()).andReturn(operationInstance).anyTimes(); EasyMock.replay(workflowInstance); try { operationHandler.start(workflowInstance, jobContext); fail(); } catch (WorkflowOperationException e) { logger.info(\"Fail on no tracks works\"); } WorkflowOperationResult workflowOperationResult = operationHandler.start(workflowInstance, jobContext); Map<String, String> properties = workflowOperationResult.getProperties(); assertTrue(properties.isEmpty()); mediaPackage.add(track); workflowOperationResult = operationHandler.start(workflowInstance, jobContext); properties = workflowOperationResult.getProperties(); String[][] props = { {\"presenter_source_media\", \"true\"}, {\"presenter_source_audio\", \"false\"}, {\"presenter_source_aspect\", \"16/9\"}, {\"presenter_source_resolution_y\", \"720\"}, {\"presenter_source_resolution_x\", \"1280\"}, {\"presenter_source_aspect_snap\", \"16/9\"}, {\"presenter_source_video\", \"true\"}, {\"presenter_source_framerate\", \"30.0\"}}; for (String[] prop: props) { assertEquals(prop[1], properties.get(prop[0])); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Message.Builder concatToProtobuf(long timestampMillis, long kafkaOffset, Collection<Message> messages) { try { final DynamicMessage.Builder messageBuilder = concatInner(messages, keys -> { try { return buildMessageBuilder(\"GeneratedObject\", keys); } catch (Descriptors.DescriptorValidationException e) { LOGGER.error(\"Couldn't build concatenated Protobuf\", e); throw new IllegalArgumentException(e); } }, (entry, builder) -> { String fieldName = entry.getKey().getName(); Descriptors.Descriptor descriptorForType = builder.getDescriptorForType(); Descriptors.FieldDescriptor dstFieldDescriptor = descriptorForType.findFieldByName(fieldName); if (dstFieldDescriptor == null) { throw new IllegalArgumentException(\"Tried to fill a non-existing field: \" + fieldName); } if (dstFieldDescriptor.isRepeated()) { setRepeatedField(builder, dstFieldDescriptor, entry); } else { builder.setField(dstFieldDescriptor, entry.getValue()); } }); messageBuilder.setField(messageBuilder.getDescriptorForType().findFieldByName(TIMESTAMP_FIELD_NAME), timestampMillis); messageBuilder.setField(messageBuilder.getDescriptorForType().findFieldByName(KAFKA_OFFSET), kafkaOffset); return messageBuilder; } catch (IllegalArgumentException e) { LOGGER.error(\"Could not flatten Protobuf event\", e); return null; } }### Assistant: @Test public void concatenateMessageWithItself() throws Descriptors.DescriptorValidationException { long kafkaOffset = 0L; DynamicMessage.Builder headerMessageBuilder = createHeaderMessageBuilder(); Descriptors.Descriptor headerMsgDesc = headerMessageBuilder.getDescriptorForType(); headerMessageBuilder.setField(headerMsgDesc.findFieldByName(\"id\"), 1) .setField(headerMsgDesc.findFieldByName(\"name\"), \"one\"); Map<String, Object> expectedValues = new HashMap<>(); expectedValues.put(\"id\", 1); expectedValues.put(\"name\", \"one\"); expectedValues.put(ProtoConcatenator.TIMESTAMP_FIELD_NAME, 0L); expectedValues.put(ProtoConcatenator.KAFKA_OFFSET, kafkaOffset); Assert.assertNull(ProtoConcatenator.concatToProtobuf(0, 0, Arrays.asList(headerMessageBuilder.build(), headerMessageBuilder.build()))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Long count(final Map<String, Object> parameters) { return shopCooperationCouponDAO.count(parameters); }### Assistant: @Test public void testCount() { fail(\"Not yet implemented\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String toString() { return toJson(obj); }### Assistant: @Test public void nullsAreSerializedOnPretty() { JSONObject obj = new JSONObject(\"{\\\"key1\\\": \\\"value\\\", \\\"key2\\\": null}\"); assertEquals(\"{\\n\" + \" \\\"key1\\\": \\\"value\\\",\\n\" + \" \\\"key2\\\": null\\n\" + \"}\", obj.toString(3)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: List<Dependency> getDependenciesList(Manifest manifest, ManifestField field) throws ManifestException { Optional<String> value = Optional.ofNullable(getField(manifest, field)); if (!value.isPresent()) { return Collections.emptyList(); } List<String> rawDependencies = Arrays.asList(value.get().split(DEPENDENCY_DELIMITER)); List<Dependency> dependenciesList = new ArrayList<>(); for (String rawDependency : rawDependencies) { dependenciesList.add(getDependency(rawDependency.trim())); } return dependenciesList; }### Assistant: @Test public void testGetEmptyDependenciesList() throws ManifestException { assertThat(getDependenciesList(new Manifest(), ManifestField.DEPENDS), empty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void run() { LOGGER.info(\"Processing scheduled tasks\"); this.processScheduledTasks(ScheduledTaskStatusType.NEW); this.processScheduledTasks(ScheduledTaskStatusType.RETRY); }### Assistant: @Test public void testRunFunctionalException() throws FunctionalException, UnknownHostException { final List<ScheduledTask> scheduledTasks = new ArrayList<>(); final ScheduledTask scheduledTask = new ScheduledTask(DEVICE_MESSAGE_DATA, DOMAIN, DOMAIN, DATA_OBJECT, SCHEDULED_TIME); scheduledTasks.add(scheduledTask); when(this.scheduledTaskRepository.findByStatusAndScheduledTimeLessThan(any(ScheduledTaskStatusType.class), any(Timestamp.class), any(Pageable.class))).thenReturn(scheduledTasks) .thenReturn(new ArrayList<ScheduledTask>()); final Device device = new Device(); device.updateRegistrationData(InetAddress.getByName(\"127.0.0.1\"), \"deviceType\"); when(this.deviceRepository.findByDeviceIdentification(anyString())).thenReturn(device); when(this.scheduledTaskRepository.save(any(ScheduledTask.class))).thenReturn(scheduledTask); when(this.schedulingConfig.scheduledTaskPageSize()).thenReturn(30); doThrow(new FunctionalException(FunctionalExceptionType.ARGUMENT_NULL, ComponentType.OSGP_CORE)) .when(this.deviceRequestMessageService).processMessage(any(ProtocolRequestMessage.class)); this.scheduler.run(); verify(this.scheduledTaskRepository).delete(scheduledTask); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ContainerNode getBody() { return body; }### Assistant: @Test public void getBodyTest() { assertEquals(\"String has not been created correctly.\", containerNodeBodyMock, topicDOMNotification.getBody()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { if (hostValidatorService.isRequestFromAdmin(request)) { chain.doFilter(request, response); } else { if (request instanceof HttpServletRequest) { logger.info(urlAccessLogMessageAssembler.assembleDenyMessage((HttpServletRequest) request)); } sendBackNoAccessResponse(response); } }### Assistant: @Test public void testdoFilterShouldPassRequestResponseToChainIfIsAdmin() throws IOException, ServletException { given(hostValidatorService.isRequestFromAdmin(servletRequest)).willReturn(true); underTest.doFilter(servletRequest, servletResponse, filterChain); verify(filterChain).doFilter(servletRequest, servletResponse); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Optional<JmxCredentials> getJmxCredentialsForCluster(Optional<Cluster> cluster) { JmxCredentials credentials = cluster.flatMap(Cluster::getJmxCredentials).orElse(null); String clusterName = cluster.map(Cluster::getName).orElse(\"\"); if (credentials == null && jmxCredentials != null) { if (jmxCredentials.containsKey(clusterName)) { credentials = jmxCredentials.get(clusterName); } else if (jmxCredentials.containsKey(Cluster.toSymbolicName(clusterName))) { credentials = jmxCredentials.get(Cluster.toSymbolicName(clusterName)); } } if (credentials == null && jmxAuth != null) { credentials = jmxAuth; } return Optional.ofNullable(credentials); }### Assistant: @Test public void fetchingJmxCredentialsIsntPresentWhenNotDefinedAnywhere() { Cluster cluster = Cluster.builder().withName(\"FooCluster\") .withSeedHosts(ImmutableSet.of(\"127.0.0.1\")).build(); JmxConnectionFactory connectionFactory = new JmxConnectionFactory(mock(AppContext.class), mock(Cryptograph.class)); Optional<JmxCredentials> jmxCredentials = connectionFactory.getJmxCredentialsForCluster(Optional.of(cluster)); assertFalse(jmxCredentials.isPresent()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override Set<Integer> find(long[] invariants, IAtomContainer container, int[][] graph) { int n = invariants.length; RingSearch ringSearch = new RingSearch(container, graph); Map<Long, Set<Integer>> equivalent = new TreeMap<Long, Set<Integer>>(); for (int i = 0; i < invariants.length; i++) { Long invariant = invariants[i]; Set<Integer> set = equivalent.get(invariant); if (set == null) { if (ringSearch.cyclic(i)) { set = new HashSet<Integer>(n / 2); set.add(i); equivalent.put(invariant, set); } } else { set.add(i); } } int minSize = Integer.MAX_VALUE; Set<Integer> min = Collections.emptySet(); for (Map.Entry<Long, Set<Integer>> e : equivalent.entrySet()) { Set<Integer> vertices = e.getValue(); if (vertices.size() < minSize && vertices.size() > 1) { min = vertices; minSize = vertices.size(); } } return min; }### Assistant: @Test public void testFind_OneChoice() throws Exception { IAtomContainer dummy = mock(IAtomContainer.class); int[][] g = new int[][]{{1, 5, 6}, {0, 2}, {1, 3}, {2, 4, 7}, {3, 5}, {0, 4}, {0}, {3}}; long[] values = new long[]{1, 0, 0, 1, 0, 0, 2, 2}; EquivalentSetFinder finder = new MinimumEquivalentCyclicSet(); Set<Integer> set = finder.find(values, dummy, g); assertThat(set.size(), is(2)); assertTrue(set.contains(0)); assertTrue(set.contains(3)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure @SuppressWarnings(\"checkstyle:npathcomplexity\") public static File convertURLToFile(URL url) { URL theUrl = url; if (theUrl == null) { return null; } if (URISchemeType.RESOURCE.isURL(theUrl)) { theUrl = Resources.getResource(decodeHTMLEntities(theUrl.getFile())); if (theUrl == null) { theUrl = url; } } URI uri; try { uri = theUrl.toURI(); } catch (URISyntaxException e) { try { uri = new URI(theUrl.getProtocol(), theUrl.getUserInfo(), theUrl.getHost(), theUrl.getPort(), decodeHTMLEntities(theUrl.getPath()), decodeHTMLEntities(theUrl.getQuery()), theUrl.getRef()); } catch (URISyntaxException e1) { throw new IllegalArgumentException(Locale.getString(\"E1\", theUrl)); } } if (uri != null && URISchemeType.FILE.isURI(uri)) { final String auth = uri.getAuthority(); String path = uri.getPath(); if (path == null) { path = uri.getRawPath(); } if (path == null) { path = uri.getSchemeSpecificPart(); } if (path == null) { path = uri.getRawSchemeSpecificPart(); } if (path != null) { if (auth == null || \"\".equals(auth)) { path = decodeHTMLEntities(path); } else { path = decodeHTMLEntities(auth + path); } if (Pattern.matches(\"^\" + Pattern.quote(URL_PATH_SEPARATOR) + \"[a-zA-Z][:|].*$\", path)) { path = path.substring(URL_PATH_SEPARATOR.length()); } return new File(path); } } throw new IllegalArgumentException(Locale.getString(\"E2\", theUrl)); }### Assistant: @Test public void convertURLToFile() throws Exception { try { FileSystem.convertURLToFile(new URL(\"http: fail(\"not a file URL\"); } catch(IllegalArgumentException exception) { } assertEquals(new File(\"toto\").getCanonicalPath(), FileSystem.convertURLToFile(new URL(\"file:./toto\")).getCanonicalPath()); assertEquals(new File(\"toto\").getCanonicalPath(), FileSystem.convertURLToFile(new URL(\"file:toto\")).getCanonicalPath()); assertEquals(new File(\"toto\").getCanonicalPath(), FileSystem.convertURLToFile(new URL(\"file:./abs/../toto\")).getCanonicalPath()); assertEquals(new File(\"/toto\").getCanonicalPath(), FileSystem.convertURLToFile(new URL(\"file:/toto\")).getCanonicalPath()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void main(String[] args) throws Exception { SentryShellSolr sentryShell = new SentryShellSolr(); try { sentryShell.executeShell(args); } catch (Exception e) { LOGGER.error(e.getMessage(), e); Throwable current = e; while (current != null && current.getMessage() == null) { current = current.getCause(); } String error = \"\"; if (current != null && current.getMessage() != null) { error = \"Message: \" + current.getMessage(); } System.out.println(\"The operation failed. \" + error); System.exit(1); } }### Assistant: @Test public void testCreateDropRole() throws Exception { runTestAsSubject(new TestOperation() { @Override public void runTestAsSubject() throws Exception { String[] args = { \"-cr\", \"-r\", TEST_ROLE_NAME_1, \"-conf\", confPath.getAbsolutePath() }; SentryShellSolr.main(args); args = new String[] { \"--create_role\", \"-r\", TEST_ROLE_NAME_2, \"-conf\", confPath.getAbsolutePath() }; SentryShellSolr.main(args); args = new String[] { \"-lr\", \"-conf\", confPath.getAbsolutePath() }; SentryShellSolr sentryShell = new SentryShellSolr(); Set<String> roleNames = getShellResultWithOSRedirect(sentryShell, args, true); validateRoleNames(roleNames, TEST_ROLE_NAME_1, TEST_ROLE_NAME_2); args = new String[] { \"--list_role\", \"-conf\", confPath.getAbsolutePath() }; sentryShell = new SentryShellSolr(); roleNames = getShellResultWithOSRedirect(sentryShell, args, true); validateRoleNames(roleNames, TEST_ROLE_NAME_1, TEST_ROLE_NAME_2); args = new String[] { \"-dr\", \"-r\", TEST_ROLE_NAME_1, \"-conf\", confPath.getAbsolutePath() }; SentryShellSolr.main(args); args = new String[] { \"--drop_role\", \"-r\", TEST_ROLE_NAME_2, \"-conf\", confPath.getAbsolutePath() }; SentryShellSolr.main(args); Set<TSentryRole> roles = client.listAllRoles(requestorName, SOLR); assertEquals(\"Incorrect number of roles\", 0, roles.size()); } }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static long requireNegative(long val) { if (val > -1) { throw new IllegalArgumentException(val + IS_NOT_NEGATIVE); } return val; }### Assistant: @Test void testRequireNegative() { assertEquals(-1, LongRangeUtil.requireNegative(-1, RuntimeException::new)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private static void parse(String paramName, LinkFormat lf, CharSequence val) throws ParseException, NumberFormatException { if (paramName.equals(LINK_MAXIMUM_SIZE)) { lf.setMaximumSize(Integer.parseInt(val.toString())); } else if (paramName.equals(LINK_CONTENT_TYPE)) { lf.setContentType(Short.parseShort(val.toString().split(\" \")[0])); } else if (paramName.equals(LINK_HREFLANG)) { lf.setHRefLang(((PToken) val).toString()); } else if (paramName.equals(LINK_RELATIONS)) { lf.set(LINK_RELATIONS, ((String) val)); } else if (paramName.equals(LINK_TITLE)) { lf.setTitle(((String) val).toString()); } else if (paramName.equals(LINK_ANCHOR)) { lf.setAnchor(((String) val).toString()); } else if (paramName.equals(LINK_REV)) { lf.set(LINK_REV, ((String) val).toString()); } else if (paramName.equals(LINK_RESOURCE_TYPE)) { lf.set(LINK_RESOURCE_TYPE, ((String) val).toString()); } else if (paramName.equals(LINK_INTERFACE_DESCRIPTION)) { lf.set(LINK_INTERFACE_DESCRIPTION, ((String) val).toString()); } else if (paramName.equals(LINK_OBSERVABLE)) { if (val != null) { throw new ParseException(\"Parameter 'obs' is a flag, not expected value\", 0); } lf.setObservable(Boolean.TRUE); } else if (paramName.equals(LINK_MEDIA)) { lf.setMedia(val.toString()); } else if (paramName.equals(LINK_TYPE)) { lf.setType(val.toString()); } else if (paramName.equals(LINK_RESOURCE_INSTANCE)) { lf.setResourceInstance(((String) val).toString()); } else if (paramName.equals(LINK_EXPORT)) { if (val != null) { throw new ParseException(\"Parameter 'exp' is a flag, not expected value\", 0); } lf.setExport(Boolean.TRUE); } else { if (val == null) { lf.set(paramName, Boolean.TRUE); } else if (val instanceof PToken) { lf.set(paramName, (PToken) val); } else { lf.set(paramName, (String) val); } } }### Assistant: @Test(expected = ParseException.class) public void testFailParse7() throws ParseException { LinkFormatBuilder.parse(\"</fds>;title=\\\"tytul\\\"dfdss\\\"\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DateTimeUnit minusDays( DateTimeUnit dateTimeUnit, int days ) { int curYear = dateTimeUnit.getYear(); int curMonth = dateTimeUnit.getMonth(); int curDay = dateTimeUnit.getDay(); int dayOfWeek = dateTimeUnit.getDayOfWeek(); int newDays = days; while ( newDays != 0 ) { curDay--; if ( curDay == 0 ) { curMonth--; if ( curMonth == 0 ) { curYear--; curMonth = 12; } curDay = getDaysFromMap( curYear, curMonth ); } dayOfWeek--; if ( dayOfWeek == 0 ) { dayOfWeek = 7; } newDays--; } return new DateTimeUnit( curYear, curMonth, curDay, dayOfWeek ); }### Assistant: @Test public void testMinusDays() { DateTimeUnit dateTimeUnit = new DateTimeUnit( 1371, 1, 1 ); DateTimeUnit testDateTimeUnit = calendar.minusDays( dateTimeUnit, 1 ); assertEquals( 1370, testDateTimeUnit.getYear() ); assertEquals( 12, testDateTimeUnit.getMonth() ); assertEquals( 30, testDateTimeUnit.getDay() ); testDateTimeUnit = calendar.minusDays( dateTimeUnit, 366 ); assertEquals( 1370, testDateTimeUnit.getYear() ); assertEquals( 1, testDateTimeUnit.getMonth() ); assertEquals( 1, testDateTimeUnit.getDay() ); dateTimeUnit = new DateTimeUnit( 1371, 7, 1 ); testDateTimeUnit = calendar.minusDays( dateTimeUnit, 1 ); assertEquals( 1371, testDateTimeUnit.getYear() ); assertEquals( 6, testDateTimeUnit.getMonth() ); assertEquals( 31, testDateTimeUnit.getDay() ); dateTimeUnit = new DateTimeUnit( 1371, 8, 1 ); testDateTimeUnit = calendar.minusDays( dateTimeUnit, 1 ); assertEquals( 1371, testDateTimeUnit.getYear() ); assertEquals( 7, testDateTimeUnit.getMonth() ); assertEquals( 30, testDateTimeUnit.getDay() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void writeNotCondition( final QueryStatement query, final QueryWriterResolver resolver, final FieldPath contextFieldPath, final Object queryParameter ) throws QueryBuildException { writeCompositeCondition(\"(NOT(\", \"))\", \"AND\", query, resolver, contextFieldPath, queryParameter); }### Assistant: @Test public void testNotOnList() throws QueryBuildException, InvalidArgumentException { queryParameter = new ArrayList() {{ add(\"a\"); add(\"b\"); }}; Conditions.writeNotCondition(query, resolver, fieldPath, queryParameter); assertEquals(\"(NOT( resolver, fieldPath, a, [a] AND resolver, fieldPath, b, [a, b] ))\", body.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @SuppressWarnings(\"ReferenceEquality\") public boolean handleBuffer(ByteBuffer buffer, long presentationTimeUs) throws InitializationException, WriteException { Assertions.checkArgument(inputBuffer == null || buffer == inputBuffer); if (pendingConfiguration != null) { if (!drainAudioProcessorsToEndOfStream()) { return false; } else if (!pendingConfiguration.canReuseAudioTrack(configuration)) { playPendingData(); if (hasPendingData()) { return false; } flush(); } else { configuration = pendingConfiguration; pendingConfiguration = null; } applyPlaybackParameters(playbackParameters, presentationTimeUs); } if (!isInitialized()) { initialize(presentationTimeUs); if (playing) { play(); } } if (!audioTrackPositionTracker.mayHandleBuffer(getWrittenFrames())) { return false; } if (inputBuffer == null) { if (!buffer.hasRemaining()) { return true; } if (!configuration.isInputPcm && framesPerEncodedSample == 0) { framesPerEncodedSample = getFramesPerEncodedSample(configuration.outputEncoding, buffer); if (framesPerEncodedSample == 0) { return true; } } if (afterDrainPlaybackParameters != null) { if (!drainAudioProcessorsToEndOfStream()) { return false; } PlaybackParameters newPlaybackParameters = afterDrainPlaybackParameters; afterDrainPlaybackParameters = null; applyPlaybackParameters(newPlaybackParameters, presentationTimeUs); } if (startMediaTimeState == START_NOT_SET) { startMediaTimeUs = Math.max(0, presentationTimeUs); log.i(\"Setting StartMediaTimeUs = \" + startMediaTimeUs); startMediaTimeState = START_IN_SYNC; } else { long expectedPresentationTimeUs = startMediaTimeUs + configuration.inputFramesToDurationUs( getSubmittedFrames() - trimmingAudioProcessor.getTrimmedFrameCount()); if (startMediaTimeState == START_IN_SYNC && Math.abs(expectedPresentationTimeUs - presentationTimeUs) > 200000) { log.w(\"Discontinuity detected [expected \" + expectedPresentationTimeUs + \", got \" + presentationTimeUs + \"]\"); startMediaTimeState = START_NEED_SYNC; } if (startMediaTimeState == START_NEED_SYNC) { long adjustmentUs = presentationTimeUs - expectedPresentationTimeUs; startMediaTimeUs += adjustmentUs; startMediaTimeState = START_IN_SYNC; if (listener != null && adjustmentUs != 0) { listener.onPositionDiscontinuity(); } } } if (configuration.isInputPcm) { submittedPcmBytes += buffer.remaining(); } else { submittedEncodedFrames += framesPerEncodedSample; } inputBuffer = buffer; } if (configuration.processingEnabled) { processBuffers(presentationTimeUs); } else { writeBuffer(inputBuffer, presentationTimeUs); } if (!inputBuffer.hasRemaining()) { inputBuffer = null; return true; } if (audioTrackPositionTracker.isStalled(getWrittenFrames())) { Log.w(TAG, \"Resetting stalled audio track\"); flush(); return true; } return false; }### Assistant: @Test public void trimsStartFrames() throws Exception { configureDefaultAudioSink( CHANNEL_COUNT_STEREO, TRIM_100_MS_FRAME_COUNT, 0); defaultAudioSink.handleBuffer(createDefaultSilenceBuffer(), 0); assertThat(arrayAudioBufferSink.output) .hasLength( (BYTES_PER_FRAME_16_BIT * CHANNEL_COUNT_STEREO * (SAMPLE_RATE_44_1 - TRIM_100_MS_FRAME_COUNT))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object convertParameterValue(String parameterName, String type) throws NumberFormatException, UnhandledParameterTypeException { String[] valueList = parameterMap.get(parameterName); if (valueList == null || valueList.length == 0) return null; String value = valueList[0]; if (value.equals(\"<null>\")) return null; if (type.equals(\"java.lang.String\")) return value; if (type.equals(\"boolean\")) return Boolean.parseBoolean(value); if (type.equals(\"int\")) return Integer.parseInt(value); if (type.equals(\"long\")) return Long.parseLong(value); if (type.equals(\"float\")) return Float.parseFloat(value); if (type.equals(\"double\")) return Double.parseDouble(value); throw new UnhandledParameterTypeException(\"Cannot convert \" + value + \" into type \" + type + \" for parameter \" + parameterName); }### Assistant: @Test public void testNonProvidedValue() throws Exception { assertEquals(null, converter.convertParameterValue(\"not_in_the_map\", \"\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static <T> Optional<T> load(final String strategy, final Iterable<StrategyService> loader, final BiFunction<StrategyService, String, Optional<T>> provider) { return StreamUtil.toStream(loader) .map(iss -> processStrategyService(iss, strategy, provider)) .flatMap(Optional::stream) .findFirst(); }### Assistant: @Test void loading() { final InvestmentStrategy is = (availableLoans, portfolio, restrictions) -> Stream.empty(); final StrategyService iss = new StrategyService() { @Override public Optional<InvestmentStrategy> toInvest(final String strategy) { return Optional.of(is); } @Override public Optional<SellStrategy> toSell(final String strategy) { return Optional.empty(); } @Override public Optional<PurchaseStrategy> toPurchase(final String strategy) { return Optional.empty(); } @Override public Optional<ReservationStrategy> forReservations(final String strategy) { return Optional.empty(); } }; assertThat(StrategyLoader.load(\"\", Collections.singleton(iss), StrategyService::toInvest)) .contains(is); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static RemoteWebDriver fromReusedSession(URL remoteAddress, Capabilities desiredCapabilities, SessionId sessionId) throws UnableReuseSessionException { RemoteWebDriver driver = new ReusableRemoteWebDriver(remoteAddress, desiredCapabilities, sessionId); checkReusability(sessionId, driver); return driver; }### Assistant: @Test public void whenBrowserIsCreatedAndQuitAndTriedToReuseThenItShouldThrowException( @Drone @Reusable RemoteWebDriver driver) { driver.navigate().to(SERVER_URL.toString()); new AugmentingEnhancer().deenhance(driver, Reusable.class); ReusableCapabilities reusedCapabilities = serializeDeserialize(ReusedSession.createReusableCapabilities(driver .getCapabilities())); SessionId reusedSessionId = new SessionId(serializeDeserialize(driver.getSessionId().toString())); driver.quit(); try { ReusableRemoteWebDriver.fromReusedSession(HUB_URL, reusedCapabilities.getDesiredCapabilities(), reusedSessionId); fail(\"Original driver had quited before, so session should not be reusable\"); } catch (UnableReuseSessionException e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isSameDay(Date a, Date b) { return a.getTime() / DAY_MS * DAY_MS == b.getTime() / DAY_MS * DAY_MS; }### Assistant: @Test (expected=NullPointerException.class) public void toLabel_null_first() { assertEquals(null, DateUtils.isSameDay(null, new Date())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void writeFileContentToResponse(final HttpServletRequest req, final HttpServletResponse resp, final String pathInfo, final Path path) throws IOException { String requestedFilename = pathInfo.substring(1); InputStream messageFileInputStream = messageFileReader.readFile(requestedFilename, path); if (messageFileExists(messageFileInputStream)) { writeFileToResponse(req, resp, requestedFilename, messageFileInputStream); } else { writeErrorToResponse(resp); } }### Assistant: @Test public final void testWriteFileContentToResponseShouldSendFileAsAttachmentWhenPathIsAValidFileName() throws IOException { given(request.getPathInfo()).willReturn(\"/filename\"); given(messageFileReader.readFile(\"filename\", path)).willReturn(fileInputStream); given(request.getHeader(\"User-Agent\")).willReturn(\"windows\"); underTest.writeFileContentToResponse(request, response, \"/filename\", path); verify(response).setContentType(\"text/plain\"); verify(response).setHeader(\"Content-Disposition\", \"attachment;filename=filename\"); verify(printWriter).write(FILE_CONTENT); verify(printWriter).flush(); verify(printWriter).close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void reassignGeneToMostPhenotypicallySimilarGeneInAnnotations(VariantEvaluation variantEvaluation) { if (isInUnknownGene(variantEvaluation)) { return; } List<String> geneSymbols = new ArrayList<>(); List<VariantEffect> variantEffects = new ArrayList<>(); List<TranscriptAnnotation> newAnnotations = new ArrayList<>(); for (TranscriptAnnotation annotation : variantEvaluation.getTranscriptAnnotations()) { String geneSymbol = annotation.getGeneSymbol(); geneSymbols.add(geneSymbol); variantEffects.add(annotation.getVariantEffect()); newAnnotations.add(annotation); if (isValidFusionProtein(geneSymbol)) { String[] separateGeneSymbols = geneSymbol.split(\"-\"); for (String separateGeneSymbol : separateGeneSymbols) { geneSymbols.add(separateGeneSymbol); variantEffects.add(VariantEffect.CUSTOM); newAnnotations.add(null); } } } Gene currentlyAssignedGene = getCurrentlyAssignedGene(variantEvaluation); double bestScore = prioritiserScore(currentlyAssignedGene); Gene geneWithHighestPhenotypeScore = null; VariantEffect variantEffectForTopHit = null; TranscriptAnnotation bestAnnotation = null; for (int i = 0; i < geneSymbols.size(); i++) { Gene gene = allGenes.get(geneSymbols.get(i)); double geneScore = prioritiserScore(gene); if (geneScore > bestScore) { bestScore = geneScore; geneWithHighestPhenotypeScore = gene; variantEffectForTopHit = variantEffects.get(i); bestAnnotation = newAnnotations.get(i); } } List<TranscriptAnnotation> finalAnnotations = new ArrayList<>(); if (bestAnnotation != null) { finalAnnotations.add(bestAnnotation); } if (prioritiserScore(currentlyAssignedGene) == bestScore) { return; } if (geneWithHighestPhenotypeScore == null) { return; } if (variantEffectForTopHit == null) { return; } if (variantEvaluation.getVariantEffect() != VariantEffect.REGULATORY_REGION_VARIANT) { variantEvaluation.setVariantEffect(variantEffectForTopHit); } assignVariantToGene(variantEvaluation, geneWithHighestPhenotypeScore, finalAnnotations); }### Assistant: @Test public void testReassignGeneToMostPhenotypicallySimilarGeneInAnnotationsAnnotationsOverlapTwoGenesShouldOnlyHaveTopPhenotypeGeneMatchAnnotations() { Stream<VariantContext> variantContext = TestVcfParser.forSamples(\"Adam\", \"Eve\") .parseVariantContext(\"1 145510730 . T C,A 123.15 PASS GENE=GNRHR2 GT 1/1 0/2\"); VariantFactory variantFactory = TestFactory.buildDefaultVariantFactory(); List<VariantEvaluation> variants = variantFactory.createVariantEvaluations(variantContext) .collect(toList()); Gene topPhenotypeMatchGene = TestFactory.newGeneRBM8A(); Gene GNRHR2 = TestFactory.newGeneGNRHR2(); allGenes.put(topPhenotypeMatchGene.getGeneSymbol(), topPhenotypeMatchGene); allGenes.put(GNRHR2.getGeneSymbol(), GNRHR2); addPriorityResultWithScore(topPhenotypeMatchGene, 1d); addPriorityResultWithScore(GNRHR2, 0d); TopologicalDomain topologicalDomain = makeTad(1, 1, 20000, GNRHR2, topPhenotypeMatchGene); instance = makeInstance(PriorityType.HIPHIVE_PRIORITY, topologicalDomain); variants.forEach(variantEvaluation -> { logger.info(\"Before re-assigning variant to best phenotype match ({})\", topPhenotypeMatchGene.getGeneSymbol()); logger.info(\"{} {}:{} {} {} {} {}\", variantEvaluation.getGeneSymbol(), variantEvaluation.getChromosome(), variantEvaluation .getPosition(), variantEvaluation.getRef(), variantEvaluation.getAlt(), variantEvaluation.getVariantEffect(), variantEvaluation .getTranscriptAnnotations() .size()); assertThat(variantEvaluation, isAssignedTo(GNRHR2)); assertThat(variantEvaluation.getVariantEffect(), equalTo(VariantEffect.MISSENSE_VARIANT)); variantEvaluation.getTranscriptAnnotations() .forEach(transcriptAnnotation -> logger.info(\"{}\", transcriptAnnotation)); List<TranscriptAnnotation> reassignedAnnotations = variantEvaluation.getTranscriptAnnotations().stream() .filter(transcriptAnnotation -> transcriptAnnotation.getGeneSymbol() .equals(topPhenotypeMatchGene.getGeneSymbol())) .collect(toList()); instance.reassignGeneToMostPhenotypicallySimilarGeneInAnnotations(variantEvaluation); logger.info(\"After re-assigning variant to best phenotype match ({})\", topPhenotypeMatchGene.getGeneSymbol()); logger.info(\"{} {}:{} {} {} {} {}\", variantEvaluation.getGeneSymbol(), variantEvaluation.getChromosome(), variantEvaluation .getPosition(), variantEvaluation.getRef(), variantEvaluation.getAlt(), variantEvaluation.getVariantEffect(), variantEvaluation .getTranscriptAnnotations() .size()); assertThat(variantEvaluation, isAssignedTo(topPhenotypeMatchGene)); assertThat(variantEvaluation.getVariantEffect(), equalTo(VariantEffect.THREE_PRIME_UTR_EXON_VARIANT)); assertThat(variantEvaluation.getTranscriptAnnotations(), equalTo(reassignedAnnotations)); variantEvaluation.getTranscriptAnnotations() .forEach(transcriptAnnotation -> logger.info(\"{}\", transcriptAnnotation)); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure public boolean isSignificant() { return this.busStops.size() >= 2; }### Assistant: @Test public void testIsSignificant() { assertFalse(this.hub.isSignificant()); this.hub.addBusStop(new BusStopStub(this.busNetwork, \"STOP1\")); assertFalse(this.hub.isSignificant()); this.hub.addBusStop(new BusStopStub(this.busNetwork, \"STOP2\")); assertTrue(this.hub.isSignificant()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void changePoolMasterHost(Connection conn, String hostUuid) throws BadServerResponse, XenAPIException, XmlRpcException { for (Host host : Host.getAll(conn)) { if (hostUuid.equals(host.getUuid(conn))) { continue; } if (hostUtils.isHostReachable(host.getAddress(conn))) { Pool.designateNewMaster(conn, host); return; } } }### Assistant: @Test public void changePoolMasterHostTestFulExecution() throws Exception { setChangePoolMasterHost(\"uuid\", true); xenHypervisor.changePoolMasterHost(conn, \"hostUuid\"); verifyChangePoolMasterHostCalledMethods(1, 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isThresholdExceeded() { return (count >= threshold); }### Assistant: @Test public void count_01() { ThresholdPolicyCount<String> policy = new ThresholdPolicyCount<>(0); assertTrue(policy.isThresholdExceeded()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public synchronized List<String> getGroups(String user) throws IOException { List<String> emptyResults = new ArrayList<String>(); try { return doGetGroups(user); } catch (CommunicationException e) { LOG.warn(\"Connection is closed, will try to reconnect\"); } catch (NamingException e) { LOG.warn(\"Exception trying to get groups for user \" + user, e); return emptyResults; } int retryCount = 0; while (retryCount ++ < RECONNECT_RETRY_COUNT) { this.ctx = null; try { return doGetGroups(user); } catch (CommunicationException e) { LOG.warn(\"Connection being closed, reconnecting failed, retryCount = \" + retryCount); } catch (NamingException e) { LOG.warn(\"Exception trying to get groups for user \" + user, e); return emptyResults; } } return emptyResults; }### Assistant: @Test public void testGetGroups() throws IOException, NamingException { when(mockContext.search(anyString(), anyString(), any(Object[].class), any(SearchControls.class))) .thenReturn(mockUserNamingEnum, mockGroupNamingEnum); doTestGetGroups(Arrays.asList(testGroups), 2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean initOutPathLocalFS(String outPath, WriteMode writeMode, boolean createDirectory) throws IOException { return initOutPathLocalFS(new Path(outPath), writeMode, createDirectory); }### Assistant: @Test public void initOutPathLocalFS() throws IOException { final String sign = \"file_init_output_path\"; FilePath folderWrite = new FilePath(new Path(folder.getRoot().toPath().toString(), sign)); FilePath fileWrite = new FilePath(new Path(folderWrite.getPathStr(), \"1\"), folderWrite.getFileSystem()); folderWrite.getFileSystem().mkdirs(folderWrite.getPathStr()); writeFile(fileWrite, sign); folderWrite.getFileSystem().initOutPathLocalFS(folderWrite.getPathStr(), FileSystem.WriteMode.OVERWRITE, true); Assert.assertTrue(fileWrite.getFileSystem().exists(fileWrite.getPathStr())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int getNumberOfClusters(Path clusterOutputPath, Configuration conf) throws IOException { FileSystem fileSystem = clusterOutputPath.getFileSystem(conf); FileStatus[] clusterFiles = fileSystem.listStatus(clusterOutputPath, PathFilters.finalPartFilter()); int numberOfClusters = 0; Iterator<?> it = new SequenceFileDirValueIterator<>(clusterFiles[0].getPath(), PathType.LIST, PathFilters.partFilter(), null, true, conf); while (it.hasNext()) { it.next(); numberOfClusters++; } return numberOfClusters; }### Assistant: @Test public void testGetNumberOfClusters() throws Exception { List<VectorWritable> points = getPointsWritable(REFERENCE); Path pointsPath = getTestTempDirPath(\"points\"); Configuration conf = getConfiguration(); ClusteringTestUtils.writePointsToFile(points, new Path(pointsPath, \"file1\"), fs, conf); ClusteringTestUtils.writePointsToFile(points, new Path(pointsPath, \"file2\"), fs, conf); outputPathForCanopy = getTestTempDirPath(\"canopy\"); outputPathForKMeans = getTestTempDirPath(\"kmeans\"); topLevelClustering(pointsPath, conf); int numberOfClusters = ClusterCountReader.getNumberOfClusters(outputPathForKMeans, conf); Assert.assertEquals(2, numberOfClusters); verifyThatNumberOfClustersIsCorrect(conf, new Path(outputPathForKMeans, new Path(\"clusteredPoints\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void save(String table, Document document) throws QueryStoreException { table = ElasticsearchUtils.getValidTableName(table); try { if (!tableMetadataManager.exists(table)) { throw new QueryStoreException(QueryStoreException.ErrorCode.NO_SUCH_TABLE, \"No table exists with the name: \" + table); } if (new DateTime().plusDays(1).minus(document.getTimestamp()).getMillis() < 0) { return; } dataStore.save(tableMetadataManager.get(table), document); long timestamp = document.getTimestamp(); Stopwatch stopwatch = new Stopwatch(); stopwatch.start(); connection.getClient() .prepareIndex() .setIndex(ElasticsearchUtils.getCurrentIndex(table, timestamp)) .setType(ElasticsearchUtils.TYPE_NAME) .setId(document.getId()) .setTimestamp(Long.toString(timestamp)) .setSource(mapper.writeValueAsBytes(document.getData())) .setConsistencyLevel(WriteConsistencyLevel.QUORUM) .execute() .get(2, TimeUnit.SECONDS); logger.info(String.format(\"ES took : %d table : %s\", stopwatch.elapsedMillis(), table)); } catch (QueryStoreException ex) { throw ex; } catch (DataStoreException ex) { DataStoreException.ErrorCode code = ex.getErrorCode(); if (code.equals(DataStoreException.ErrorCode.STORE_INVALID_REQUEST) || code.equals(DataStoreException.ErrorCode.STORE_INVALID_DOCUMENT)) { throw new QueryStoreException(QueryStoreException.ErrorCode.INVALID_REQUEST, ex.getMessage(), ex); } else { throw new QueryStoreException(QueryStoreException.ErrorCode.DOCUMENT_SAVE_ERROR, ex.getMessage(), ex); } } catch (JsonProcessingException ex) { throw new QueryStoreException(QueryStoreException.ErrorCode.INVALID_REQUEST, ex.getMessage(), ex); } catch (Exception ex) { throw new QueryStoreException(QueryStoreException.ErrorCode.DOCUMENT_SAVE_ERROR, ex.getMessage(), ex); } }### Assistant: @Test public void testSaveSingleInvalidTable() throws Exception { Document expectedDocument = new Document(); expectedDocument.setId(UUID.randomUUID().toString()); expectedDocument.setTimestamp(System.currentTimeMillis()); JsonNode data = mapper.valueToTree(Collections.singletonMap(\"TEST_NAME\", \"SINGLE_SAVE_TEST\")); expectedDocument.setData(data); try { queryStore.save(TestUtils.TEST_TABLE + \"-missing\", expectedDocument); fail(); } catch (QueryStoreException qse) { assertEquals(QueryStoreException.ErrorCode.NO_SUCH_TABLE, qse.getErrorCode()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected Map<String, Object> executeScenario(KieContainer kieContainer, ScenarioRunnerData scenarioRunnerData, ExpressionEvaluatorFactory expressionEvaluatorFactory, ScesimModelDescriptor scesimModelDescriptor, Settings settings) { if (!Type.RULE.equals(settings.getType())) { throw new ScenarioException(\"Impossible to run a not-RULE simulation with RULE runner\"); } RuleScenarioExecutableBuilder ruleScenarioExecutableBuilder = createBuilderWrapper(kieContainer, settings); if (settings.getRuleFlowGroup() != null) { ruleScenarioExecutableBuilder.setActiveRuleFlowGroup(settings.getRuleFlowGroup()); } loadInputData(scenarioRunnerData.getBackgrounds(), ruleScenarioExecutableBuilder); loadInputData(scenarioRunnerData.getGivens(), ruleScenarioExecutableBuilder); scenarioRunnerData.getExpects().stream() .filter(ScenarioExpect::isNewFact) .flatMap(output -> output.getExpectedResult().stream() .map(ScenarioResult::new)) .forEach(scenarioResult -> { Class<?> clazz = ScenarioBeanUtil.loadClass(scenarioResult.getFactIdentifier().getClassName(), kieContainer.getClassLoader()); ExpressionEvaluator expressionEvaluator = expressionEvaluatorFactory.getOrCreate(scenarioResult.getFactMappingValue()); scenarioRunnerData.addResult(scenarioResult); ruleScenarioExecutableBuilder.addInternalCondition(clazz, createExtractorFunction(expressionEvaluator, scenarioResult.getFactMappingValue(), scesimModelDescriptor), scenarioResult); }); return ruleScenarioExecutableBuilder.run(); }### Assistant: @Test public void executeScenario() { ArgumentCaptor<Object> insertCaptor = ArgumentCaptor.forClass(Object.class); ScenarioRunnerData scenarioRunnerData = new ScenarioRunnerData(); scenarioRunnerData.addBackground(new InstanceGiven(personFactIdentifier, new Person())); scenarioRunnerData.addBackground(new InstanceGiven(disputeFactIdentifier, new Dispute())); scenarioRunnerData.addGiven(new InstanceGiven(personFactIdentifier, new Person())); FactMappingValue factMappingValue = new FactMappingValue(personFactIdentifier, firstNameExpectedExpressionIdentifier, NAME); scenarioRunnerData.addExpect(new ScenarioExpect(personFactIdentifier, singletonList(factMappingValue), false)); scenarioRunnerData.addExpect(new ScenarioExpect(personFactIdentifier, singletonList(factMappingValue), true)); int inputObjects = scenarioRunnerData.getBackgrounds().size() + scenarioRunnerData.getGivens().size(); String ruleFlowGroup = \"ruleFlowGroup\"; settings.setRuleFlowGroup(ruleFlowGroup); runnerHelper.executeScenario(kieContainerMock, scenarioRunnerData, expressionEvaluatorFactory, simulation.getScesimModelDescriptor(), settings); verify(ruleScenarioExecutableBuilderMock, times(1)).setActiveRuleFlowGroup(eq(ruleFlowGroup)); verify(ruleScenarioExecutableBuilderMock, times(inputObjects)).insert(insertCaptor.capture()); for (Object value : insertCaptor.getAllValues()) { assertTrue(value instanceof Person || value instanceof Dispute); } verify(ruleScenarioExecutableBuilderMock, times(1)).addInternalCondition(eq(Person.class), any(), any()); verify(ruleScenarioExecutableBuilderMock, times(1)).run(); assertEquals(1, scenarioRunnerData.getResults().size()); settings.setType(ScenarioSimulationModel.Type.DMN); assertThatThrownBy(() -> runnerHelper.executeScenario(kieContainerMock, scenarioRunnerData, expressionEvaluatorFactory, simulation.getScesimModelDescriptor(), settings)) .isInstanceOf(ScenarioException.class) .hasMessageStartingWith(\"Impossible to run\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Completion> getCompletionsAtIndex(JTextComponent jTextComponent, int charIndex) { UpdateParserThread fetchingParserTmp = fetchingParser; if(fetchingParserTmp != null) { if(!fetchingParserTmp.isDone()) { try { fetchingParserTmp.get(UPDATE_TIMEOUT, TimeUnit.MILLISECONDS); } catch (Exception ex) { return new ArrayList<>(); } } else { parser = fetchingParserTmp.getParser(); } } if(parser == null) { return new ArrayList<>(); } List<Completion> completionList = new LinkedList<Completion>(); DocumentSQLReader documentReader = new DocumentSQLReader(jTextComponent.getDocument(), true); String statement = \"\"; while(documentReader.hasNext() && documentReader.getPosition() + statement.length() < charIndex) { statement = documentReader.next(); } int completionPosition = charIndex - documentReader.getPosition(); String partialStatement = LTRIM.matcher(statement.substring(0, completionPosition)).replaceAll(\"\"); Map<String,String> autoComplete = parser.getNextTokenList(partialStatement); for(Map.Entry<String, String> entry : autoComplete.entrySet()) { String token = entry.getKey().substring(entry.getKey().indexOf(\"#\") + 1); Completion completion = new BnfAutoCompletion(this, token, entry.getValue()); completionList.add(completion); } long now = System.currentTimeMillis(); if(lastUpdate + UPDATE_INTERVAL < now) { try { updateParser(dataSource, false); } catch (Exception ex) { log.warn(\"Could not update auto-completion engine\", ex); } } return completionList; }### Assistant: @Test public void testBounds() throws Exception { assumeTrue(!GraphicsEnvironment.isHeadless()); org.h2.Driver driver = org.h2.Driver.load(); OsgiDataSourceFactory dataSourceFactory = new OsgiDataSourceFactory(driver); Properties properties = new Properties(); properties.setProperty(OsgiDataSourceFactory.JDBC_URL, RSyntaxSQLParserTest.DATABASE_PATH); RSyntaxDocument document = new RSyntaxDocument(\"sql\"); RSyntaxTextArea rSyntaxTextArea = new RSyntaxTextArea(document); rSyntaxTextArea.setText(\"alte\"); rSyntaxTextArea.setSize(new Dimension(420, 240)); rSyntaxTextArea.setCaretPosition(4); SQLCompletionProvider autoComplete = new SQLCompletionProvider(dataSourceFactory.createDataSource(properties), true); List completions = autoComplete.getCompletionsAtIndex(rSyntaxTextArea, 4); assertEquals(1, completions.size()); assertEquals(\"ALTER\", ((Completion)completions.get(0)).getReplacementText()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @PublicEvolving public static <IN, OUT> TypeInformation<OUT> getMapReturnTypes(MapFunction<IN, OUT> mapInterface, TypeInformation<IN> inType) { return getMapReturnTypes(mapInterface, inType, null, false); }### Assistant: @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Test public void testDuplicateValue() { TypeInformation<?> ti = TypeExtractor.getMapReturnTypes((MapFunction) new DuplicateValue<String>(), TypeInfoParser.parse(\"Tuple1<String>\")); Assert.assertTrue(ti.isTupleType()); Assert.assertEquals(2, ti.getArity()); TupleTypeInfo<?> tti = (TupleTypeInfo<?>) ti; Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO, tti.getTypeAt(0)); Assert.assertEquals(BasicTypeInfo.STRING_TYPE_INFO, tti.getTypeAt(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute( EnforcerRuleHelper helper ) throws EnforcerRuleException { try { MavenProject project = (MavenProject) helper.evaluate( \"${project}\" ); if ( \"pom\".equals( project.getPackaging() ) ) { helper.getLog().debug( \"Packaging is pom, skipping requirePrerequisite rule\" ); return; } if ( packagings != null && !packagings.contains( project.getPackaging() ) ) { helper.getLog().debug( \"Packaging is \" + project.getPackaging() + \", skipping requirePrerequisite rule\" ); return; } Prerequisites prerequisites = project.getPrerequisites(); if ( prerequisites == null ) { throw new EnforcerRuleException( \"Requires prerequisite not set\" ); } if ( mavenVersion != null ) { VersionRange requiredVersionRange = VersionRange.createFromVersionSpec( mavenVersion ); if ( !requiredVersionRange.hasRestrictions() ) { requiredVersionRange = VersionRange.createFromVersionSpec( \"[\" + mavenVersion + \",)\" ); } VersionRange specifiedVersion = VersionRange.createFromVersionSpec( prerequisites.getMaven() ); VersionRange restrictedVersionRange = requiredVersionRange.restrict( specifiedVersion ); if ( restrictedVersionRange.getRecommendedVersion() == null ) { throw new EnforcerRuleException( \"The specified Maven prerequisite( \" + specifiedVersion + \" ) doesn't match the required version: \" + mavenVersion ); } } } catch ( ExpressionEvaluationException e ) { throw new EnforcerRuleException( e.getMessage(), e ); } catch ( InvalidVersionSpecificationException e ) { throw new EnforcerRuleException( e.getMessage(), e ); } }### Assistant: @Test public void testNoSpecifiedPrerequisite() throws Exception { when( project.getPrerequisites() ).thenReturn( new Prerequisites() ); RequirePrerequisite rule = new RequirePrerequisite(); rule.execute( helper ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Serializer createSerializer(CRestConfig crestConfig, Class<?> source){ String prefix = source.getName(); Serializer serializer = crestConfig.get(prefix + SERIALIZER); if(serializer != null) { return serializer; } Map<Class, Transform> registry = new HashMap<Class, Transform>(); registry.put(Date.class, new DateMatcher(crestConfig.getDateFormat())); registry.put(Boolean.class, new BooleanMatcher(crestConfig.getBooleanTrue(), crestConfig.getBooleanFalse())); registry.put(boolean.class, registry.get(Boolean.class)); return new Persister(new MatcherRegistry(registry)); }### Assistant: @Test public void shouldUseConfigSerializer() throws Exception { Serializer mock = mock(Serializer.class); when(config.get(getClass().getName() + SimpleXmlFactory.SERIALIZER)).thenReturn(mock); assertSame(mock, SimpleXmlFactory.createSerializer(config, getClass())); verify(config, never()).getBooleanFalse(); verify(config, never()).getBooleanTrue(); verify(config, never()).getDateFormat(); verify(config).get(getClass().getName() + SimpleXmlFactory.SERIALIZER); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static int getIndexAfterFirstAppearanceOf(int startIndex, char character, String searchedString) { var queryCharCount = searchedString.length(); if(startIndex >= queryCharCount) { return -1; } var indexAfterFirstAppearance = searchedString.substring(startIndex).indexOf(character) + startIndex + 1; if(indexAfterFirstAppearance > 0 && indexAfterFirstAppearance < queryCharCount) { return indexAfterFirstAppearance; } return -1; }### Assistant: @Test public void getIndexAfterFirstAppearanceOfReturnsMinusOneWhenStartIndexGreaterThanInputLength() { var input = \"test\"; var character = '\"'; var expectedIndex = -1; var startIndex = input.length(); var actualIndex = HibernateSimpleQueryUtils.getIndexAfterFirstAppearanceOf(startIndex, character, input); assertThat(actualIndex).isEqualTo(expectedIndex); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isReady() { return true; }### Assistant: @Test public void isReady() { boolean result = underTest.isReady(); assertThat(result, is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<ComponentDescriptor> findByScopeAndTypeAndPageLink(ComponentScope scope, ComponentType type, TextPageLink pageLink) { return DaoUtil.convertDataList(componentDescriptorRepository .findByScopeAndType( type, scope, Objects.toString(pageLink.getTextSearch(), \"\"), pageLink.getIdOffset() == null ? NULL_UUID_STR : UUIDConverter.fromTimeUUID(pageLink.getIdOffset()), new PageRequest(0, pageLink.getLimit()))); }### Assistant: @Test public void findByTypeAndSocpe() { for (int i = 0; i < 20; i++) { createComponentDescriptor(ComponentType.ENRICHMENT, ComponentScope.SYSTEM, i); createComponentDescriptor(ComponentType.ACTION, ComponentScope.TENANT, i + 20); createComponentDescriptor(ComponentType.FILTER, ComponentScope.SYSTEM, i + 40); } TextPageLink pageLink1 = new TextPageLink(15, \"COMPONENT_\"); List<ComponentDescriptor> components1 = componentDescriptorDao.findByScopeAndTypeAndPageLink( ComponentScope.SYSTEM, ComponentType.FILTER, pageLink1); assertEquals(15, components1.size()); TextPageLink pageLink2 = new TextPageLink(15, \"COMPONENT_\", components1.get(14).getId().getId(), null); List<ComponentDescriptor> components2 = componentDescriptorDao.findByScopeAndTypeAndPageLink( ComponentScope.SYSTEM, ComponentType.FILTER, pageLink2); assertEquals(5, components2.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public static JobContext cloneContext(JobContext original, Configuration conf ) throws IOException, InterruptedException { try { if (original instanceof MapContext<?,?,?,?>) { return cloneMapContext((Mapper.Context) original, conf, null, null); } else if (original instanceof ReduceContext<?,?,?,?>) { throw new IllegalArgumentException(\"can't clone ReduceContext\"); } else if (original instanceof TaskAttemptContext) { TaskAttemptContext spec = (TaskAttemptContext) original; return (JobContext) TASK_CONTEXT_CONSTRUCTOR.newInstance(conf, spec.getTaskAttemptID()); } else { return (JobContext) JOB_CONTEXT_CONSTRUCTOR.newInstance(conf, original.getJobID()); } } catch (InstantiationException e) { throw new IllegalArgumentException(\"Can't clone object\", e); } catch (IllegalAccessException e) { throw new IllegalArgumentException(\"Can't clone object\", e); } catch (InvocationTargetException e) { throw new IllegalArgumentException(\"Can't clone object\", e); } }### Assistant: @Test public void testCloneContext() throws Exception { ContextFactory.cloneContext(jobContext, conf); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Integer> emit(final String streamId, final Collection<Tuple> anchors, final List<Object> tuple) { return this.tansformAndEmit(streamId, tuple); }### Assistant: @SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @Test public void testBoltStormCollectorWithTaskId() throws InstantiationException, IllegalAccessException { for (int numberOfAttributes = 0; numberOfAttributes < 25; ++numberOfAttributes) { final Output flinkCollector = mock(Output.class); final int taskId = 42; final String streamId = \"streamId\"; HashMap<String, Integer> attributes = new HashMap<String, Integer>(); attributes.put(streamId, numberOfAttributes); BoltCollector<?> collector = new BoltCollector(attributes, taskId, flinkCollector); final Values tuple = new Values(); final Tuple flinkTuple = Tuple.getTupleClass(numberOfAttributes + 1).newInstance(); for (int i = 0; i < numberOfAttributes; ++i) { tuple.add(new Integer(this.r.nextInt())); flinkTuple.setField(tuple.get(i), i); } flinkTuple.setField(taskId, numberOfAttributes); final Collection anchors = mock(Collection.class); final List<Integer> taskIds; taskIds = collector.emit(streamId, anchors, tuple); Assert.assertNull(taskIds); verify(flinkCollector).collect(flinkTuple); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static NetworkParameters getParametersFromAddress(String address) throws AddressFormatException { try { return Address.fromBase58(null, address).getParameters(); } catch (WrongNetworkException e) { throw new RuntimeException(e); } }### Assistant: @Test public void getAltNetwork() throws Exception { class AltNetwork extends MainNetParams { AltNetwork() { super(); id = \"alt.network\"; addressHeader = 48; p2shHeader = 5; acceptableAddressCodes = new int[] { addressHeader, p2shHeader }; } } AltNetwork altNetwork = new AltNetwork(); Networks.register(altNetwork); NetworkParameters params = Address.getParametersFromAddress(\"LLxSnHLN2CYyzB5eWTR9K9rS9uWtbTQFb6\"); assertEquals(altNetwork.getId(), params.getId()); params = Address.getParametersFromAddress(\"Xtqn4ks8sJS7iG7S7r1Jf37eFFSJGwh8a8\"); assertEquals(MainNetParams.get().getId(), params.getId()); Networks.unregister(altNetwork); try { Address.getParametersFromAddress(\"LLxSnHLN2CYyzB5eWTR9K9rS9uWtbTQFb6\"); fail(); } catch (AddressFormatException e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int getNumberOfSyllables(String input) { int count = 0; boolean vowelFound = false; for (char c : input.toCharArray()) { if (!vowelFound && isVowel(String.valueOf(c))) { count++; vowelFound = true; } else { vowelFound = false; } } return count; }### Assistant: @Test public void testCountIsSevenForValidInput() throws Exception { String input = \"eating bugs in the marshes\"; int count = HaikuReview.getNumberOfSyllables(input); assertThat(count).isEqualTo(7); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void selectAll() { performAll(Action.SELECT); }### Assistant: @Test public void givenThreeItemWhenSelectAllThenAllSelected() throws Exception { int expectedCount = 3; when(mMockItemList.size()).thenReturn(expectedCount); HashSet<Integer> value = new HashSet<>(); value.add(0); value.add(1); value.add(2); when(mMockItemList.keySet()).thenReturn(value); mMultiChoiceAdapter.selectAll(); verify(mMockItemList, times(expectedCount)).put(anyInt(), eq(MultiChoiceAdapter.State.ACTIVE)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> void save(Property<? extends T> property, Preferences preferences, Function<? super T, String> serializer) { T value = property.getValue(); if (value == null) { throw new IllegalArgumentException(\"The property must have a value\"); } preferences.put(property.getName(), serializer.apply(value)); }### Assistant: @Test public void testSaveThrowsWithNullValue() { Property<?> property = new SimpleObjectProperty<>(null); assertThrows(IllegalArgumentException.class, () -> PreferencesUtils.save(property, preferences, null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public MessageSendStatus send(){ final boolean useInstitutionalEmail = false; final Emailer emailer = new Emailer(getFromIdentity(), useInstitutionalEmail, getMailTemplate()); MessageSendStatus messageSendStatus = createSuccessfullSentEmailMessageStatus(); boolean sendEmailSuccess = false; try { sendEmailSuccess = doSend(emailer); } catch (final AddressException e) { messageSendStatus = handleAddressException(sendEmailSuccess); } catch (final SendFailedException e) { messageSendStatus = handleSendFailedException(e); } catch (final MessagingException e) { messageSendStatus = handleMessagingException(); } return messageSendStatus; }### Assistant: @Test public void shouldFailWithSendFailedExceptionWithAnAuthenticationFailedException(){ ExceptionHandlingMailSendingTemplate doSendWithSendFailedException = new ExceptionHandlingMailSendingTemplate() { @Override protected boolean doSend(Emailer emailer) throws AddressException, SendFailedException, MessagingException { assertNotNull(\"emailer was constructed\", emailer); MessagingException firstInnerException = new AuthenticationFailedException(\"<some authentication failed message from the mailsystem>\"); throw new SendFailedException(BY_OLAT_UNHANDLED_TEXT, firstInnerException); } @Override protected MailTemplate getMailTemplate() { return emptyMailTemplate; }; @Override protected List<ContactList> getTheToContactLists() { return theContactLists; } @Override protected Identity getFromIdentity() { return theFromIdentity; } }; MessageSendStatus sendStatus = doSendWithSendFailedException.send(); assertEquals(MessageSendStatusCode.SMTP_AUTHENTICATION_FAILED, sendStatus.getStatusCode()); verifyStatusCodeIndicateSendFailedOnly(sendStatus); verifySendStatusIsError(sendStatus); assertTrue(sendStatus.canProceedWithWorkflow()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) { final int height = options.outHeight; final int width = options.outWidth; int inSampleSize = 1; if (height > reqHeight || width > reqWidth) { final int heightRatio = Math.round((float) height / (float) reqHeight); final int widthRatio = Math.round((float) width / (float) reqWidth); inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio; } float totalPixels = width * height; float totalReqPixelsCap = reqWidth * reqHeight * 2; while (totalPixels / (inSampleSize * inSampleSize) > totalReqPixelsCap) { inSampleSize++; } return inSampleSize; }### Assistant: @Test public void should_return_sample_size_when_give_smaller_req_width_and_height() throws Exception { BitmapFactory.Options options = createBitmapFactoryOptions(4, 4); int actual = calculateInSampleSize(options, 3, 3); assertThat(\"Should return 1 when ratio is smaller than 2.\", actual, is(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public V get(Object o) { if (o == null) return null; int i = arrayIndexOfKey(o); return i != -1 ? value(i + 1) : null; }### Assistant: @Test public void equalValues() { array[0] = \"1\"; array[1] = \"1\"; array[2] = \"2\"; array[3] = \"2\"; array[4] = \"3\"; array[5] = \"3\"; Map<String, String> map = builder.build(array); assertSize(map, 3); assertBaseCase(map); assertThat(map).containsOnly( entry(\"1\", \"1\"), entry(\"2\", \"2\"), entry(\"3\", \"3\") ); assertThat(map).hasToString( \"UnsafeArrayMap{1=1,2=2,3=3}\" ); assertThat(map.get(\"1\")).isEqualTo(\"1\"); assertThat(map.get(\"2\")).isEqualTo(\"2\"); assertThat(map.get(\"3\")).isEqualTo(\"3\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public User authenticate(HttpServletRequest request) { Attribute attr = Attribute.from(request); if (attr.isEnabled(Attribute.SKIP_TOKEN_AUTH)) { return null; } String token = GoogleAuth.getAuthToken(request); if (!GoogleAuth.isJwt(token)) { return null; } GoogleIdToken idToken = verifyToken(token); if (idToken == null) { return null; } attr.set(Attribute.ID_TOKEN, idToken); String clientId = idToken.getPayload().getAuthorizedParty(); String audience = (String) idToken.getPayload().getAudience(); ApiMethodConfig config = attr.get(Attribute.API_METHOD_CONFIG); if ((attr.isEnabled(Attribute.ENABLE_CLIENT_ID_WHITELIST) && !GoogleAuth.checkClientId(clientId, config.getClientIds(), false))) { logger.atWarning().log(\"ClientId is not allowed: %s\", clientId); return null; } if (!GoogleAuth.checkAudience(audience, config.getAudiences(), clientId)) { logger.atWarning().log(\"Audience is not allowed: %s\", audience); return null; } String userId = idToken.getPayload().getSubject(); String email = idToken.getPayload().getEmail(); User user = (userId == null && email == null) ? null : new User(userId, email); if (attr.isEnabled(Attribute.REQUIRE_APPENGINE_USER)) { com.google.appengine.api.users.User appEngineUser = (email == null) ? null : new com.google.appengine.api.users.User(email, \"\"); attr.set(Attribute.AUTHENTICATED_APPENGINE_USER, appEngineUser); logger.atFine().log(\"appEngineUser = %s\", appEngineUser); } else { logger.atFine().log(\"user = %s\", user); } return user; }### Assistant: @Test public void testAuthenticate_clientIdNotAllowed() throws Exception { when(verifier.verify(TOKEN)).thenReturn(token); when(config.getClientIds()).thenReturn(ImmutableList.of(\"clientId2\")); assertNull(authenticator.authenticate(request)); assertNotNull(attr.get(Attribute.ID_TOKEN)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public IRenderingElement generate(IAtomContainer container, RendererModel model) { ElementGroup numbers = new ElementGroup(); if (!model.getParameter(WillDrawAtomNumbers.class).getValue()) return numbers; Vector2d offset = new Vector2d(this.offset.getValue().x, -this.offset.getValue().y); offset.scale(1 / model.getParameter(Scale.class).getValue()); int number = 1; for (IAtom atom : container.atoms()) { Point2d point = new Point2d(atom.getPoint2d()); point.add(offset); numbers.add(new TextElement(point.x, point.y, String.valueOf(number), colorByType.getValue() ? atomColorer .getValue().getAtomColor(atom) : textColor.getValue())); number++; } return numbers; }### Assistant: @Test public void testEmptyContainer() { IAtomContainer emptyContainer = super.builder.newInstance(IAtomContainer.class); IRenderingElement root = generator.generate(emptyContainer, model); List<IRenderingElement> elements = elementUtil.getAllSimpleElements(root); Assert.assertEquals(0, elements.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public StartingPoint getStartingPoint() { return startingPoint; }### Assistant: @Test public void testGetStartingPoint() throws Exception { PageRequest pageRequest = new PageRequestImpl(PageRequest.StartingPoint.Beginning, 20, 99, null, null); Assert.assertEquals(PageRequest.StartingPoint.Beginning, pageRequest.getStartingPoint()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void dispatch(String path) throws IOException { if (isForceInclude()) { doInclude(path); } else { setForceInclude(true); doForward(path); } }### Assistant: @Test public void testDispatch() throws IOException { Map<String, Object> requestScope = new HashMap<String, Object>(); expect(request.getContext(Request.REQUEST_SCOPE)).andReturn(requestScope).anyTimes(); request.doForward(\"/my/path.html\"); request.doInclude(\"/my/path2.html\"); replay(request, applicationContext); request.dispatch(\"/my/path.html\"); request.dispatch(\"/my/path2.html\"); verify(request, applicationContext); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void main(String[] args) throws Exception { ToolRunner.run(new Configuration(), new SequenceFilesFromMailArchives(), args); }### Assistant: @Test public void testSequential() throws Exception { File outputDir = this.getTestTempDir(\"mail-archives-out\"); String[] args = { \"--input\", inputDir.getAbsolutePath(), \"--output\", outputDir.getAbsolutePath(), \"--charset\", \"UTF-8\", \"--keyPrefix\", \"TEST\", \"--method\", \"sequential\", \"--body\", \"--subject\", \"--separator\", \"\" }; SequenceFilesFromMailArchives.main(args); File expectedChunkFile = new File(outputDir, \"chunk-0\"); String expectedChunkPath = expectedChunkFile.getAbsolutePath(); Assert.assertTrue(\"Expected chunk file \" + expectedChunkPath + \" not found!\", expectedChunkFile.isFile()); Configuration conf = getConfiguration(); SequenceFileIterator<Text, Text> iterator = new SequenceFileIterator<Text, Text>(new Path(expectedChunkPath), true, conf); Assert.assertTrue(\"First key/value pair not found!\", iterator.hasNext()); Pair<Text, Text> record = iterator.next(); File parentFile = new File(new File(new File(\"TEST\"), \"subdir\"), \"mail-messages.gz\"); Assert.assertEquals(new File(parentFile, testVars[0][0]).toString(), record.getFirst().toString()); Assert.assertEquals(testVars[0][1] + testVars[0][2], record.getSecond().toString()); Assert.assertTrue(\"Second key/value pair not found!\", iterator.hasNext()); record = iterator.next(); Assert.assertEquals(new File(parentFile, testVars[1][0]).toString(), record.getFirst().toString()); Assert.assertEquals(testVars[1][1] + testVars[1][2], record.getSecond().toString()); record = iterator.next(); File parentFileSubSubDir = new File(new File(new File(new File(\"TEST\"), \"subdir\"), \"subsubdir\"), \"mail-messages-2.gz\"); Assert.assertEquals(new File(parentFileSubSubDir, testVars[0][0]).toString(), record.getFirst().toString()); Assert.assertEquals(testVars[0][1] + testVars[0][2], record.getSecond().toString()); Assert.assertTrue(\"Second key/value pair not found!\", iterator.hasNext()); record = iterator.next(); Assert.assertEquals(new File(parentFileSubSubDir, testVars[1][0]).toString(), record.getFirst().toString()); Assert.assertEquals(testVars[1][1] + testVars[1][2], record.getSecond().toString()); Assert.assertFalse(\"Only two key/value pairs expected!\", iterator.hasNext()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Iterable<K> keys() { return Collections.unmodifiableSet(state.keySet()); }### Assistant: @Test(expected = UnsupportedOperationException.class) public void testKeys() { assertTrue(mapState.contains(1L)); long value = mapState.get(1L); assertEquals(5L, value); assertTrue(mapState.contains(2L)); value = mapState.get(2L); assertEquals(5L, value); Iterator<Long> iterator = mapState.keys().iterator(); while (iterator.hasNext()) { iterator.remove(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void waitForUserToIdentify(final int userCode) { int counter = 0; while (waitingList.isWaitingUser(userCode) && counter < 40) { counter++; sleeper.sleep(50); } }### Assistant: @Test public void waitForUserToIdentifyShouldNeverSleepIfUserIsIdentified() { when(waitingList.isWaitingUser(100)).thenReturn(false); wrapper.waitForUserToIdentify(100); verifyZeroInteractions(sleeper); verify(waitingList).isWaitingUser(100); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static BigDecimal getAsBigDecimal(Map<String, Object> map, String key) { Object value = map.get(key); if (value instanceof BigDecimal) { return (BigDecimal) value; } if (value == null) { return BigDecimal.ZERO; } if (value instanceof String) { return new BigDecimal((String) value); } throw new WrongTypeException(key, BigDecimal.class, value); }### Assistant: @Test(expected = WrongTypeException.class) public void testBigDecimalWrongType() { map.put(\"value\", true); MapValueGetter.getAsBigDecimal(map, \"value\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T> Optional<T> sanitize(T entity) { T sanitized = entitySanitizer.sanitize(entity).orElse(entity); if (sanitized instanceof com.netflix.titus.api.jobmanager.model.job.JobDescriptor) { sanitized = (T) sanitizeJobDescriptor((JobDescriptor) sanitized); } return entity == sanitized ? Optional.empty() : Optional.of(sanitized); }### Assistant: @Test public void testJobsWithCommandAreNotMarkedNonCompliant() { JobDescriptor<?> jobDescriptor = newBatchJob() .map(jd -> jd.but(d -> d.getContainer().toBuilder() .withEntryPoint(Collections.singletonList(\"a binary with spaces\")) .withCommand(asList(\"some\", \"arguments\")))) .getValue(); ExtendedJobSanitizer sanitizer = new ExtendedJobSanitizer(configuration, jobAssertions, entitySanitizer, disruptionBudgetSanitizer, jd -> false, jd -> false, titusRuntime); Optional<JobDescriptor<?>> sanitized = sanitizer.sanitize(jobDescriptor); assertThat(sanitized).isNotPresent(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void reallocate(Treatment source, Treatment destination, int size) { final Iterator<Allocation> iter = allocations.iterator(); final List<Allocation> pieces = Lists.newArrayList(); int sizeLeft = size; int lastOffset = 0; while (iter.hasNext() && sizeLeft > 0) { final Allocation next = iter.next(); lastOffset = next.getOffset() + next.getSize(); if (!next.getTreatment().equals(source)) { continue; } sizeLeft -= next.getSize(); iter.remove(); if (sizeLeft < 0) { pieces.add(new Allocation(destination, next.getOffset(), next.getSize() + sizeLeft)); pieces.add(new Allocation(source, next.getOffset() + next.getSize() + sizeLeft, -sizeLeft)); } else { pieces.add(new Allocation(destination, next.getOffset(), next.getSize())); } } if (sizeLeft > 0) { pieces.add(new Allocation(destination, lastOffset, sizeLeft)); } allocations.addAll(pieces); sortAllocations(); mergeAdjacentAllocations(); rebuildAllocationTables(); }### Assistant: @Test public void testReallocate() { final Allocations allocations = new Allocations(Lists.<Allocation>newArrayList()); allocations.allocate(control, 5); allocations.allocate(withLogin, 5); allocations.reallocate(withLogin, control, 3); assertEquals( \"reallocation should have partly replaced second allocation and merged with first allocation\", Lists.newArrayList( new Allocation(control, 0, 8), new Allocation(withLogin, 8, 2) ), allocations.getAllocations() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void send(Object message) throws RemotingException { send(message, false); }### Assistant: @Test public void sendTest01() throws RemotingException { boolean sent = true; String message = \"this is a test message\"; header.send(message, sent); List<Object> objects = channel.getSentObjects(); Assertions.assertEquals(objects.get(0), \"this is a test message\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public long estimateSize() { final int size = minChunkSize + (maxChunkSize - minChunkSize) / 2; return string.length() / size + Integer.signum(string.length() % size); }### Assistant: @Test void shouldEstimateSizeWithTrailingPart() { assertThat(new ChunkingSpliterator(\"Hello World\", 5, 5).estimateSize(), is(3L)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void makeHttpRequest(final String jobId, final Logger logger, final List<HttpRequestBase> httpRequestList) { if (httpRequestList == null || httpRequestList.isEmpty()) { logger.info(\"No HTTP requests to make for: \" + jobId); return; } for (final HttpRequestBase httpRequest : httpRequestList) { logger.debug(\"Job callback http request for \" + jobId + \": \" + httpRequest.toString()); logger.debug(\"headers [\"); for (final Header header : httpRequest.getAllHeaders()) { logger.debug(String.format(\" %s : %s\", header.getName(), header.getValue())); } logger.debug(\"]\"); final HttpRequestFutureTask<Integer> task = this.futureRequestExecutionService.execute(httpRequest, HttpClientContext.create(), new LoggingResponseHandler(logger)); try { final Integer statusCode = task.get(this.responseWaitTimeoutMS, TimeUnit.MILLISECONDS); logger.info(\"http callback status code for \" + jobId + \": \" + statusCode); } catch (final TimeoutException timeOutEx) { logger .warn(\"Job callback target took longer \" + (this.responseWaitTimeoutMS / 1000) + \" seconds to respond for: \" + jobId, timeOutEx); } catch (final ExecutionException ee) { if (ee.getCause() instanceof SocketTimeoutException) { logger.warn(\"Job callback target took longer \" + (this.responseWaitTimeoutMS / 1000) + \" seconds to respond\", ee); } else { logger.warn( \"Failed to execute job callback for: \" + jobId, ee); } } catch (final Throwable e) { logger.warn( \"Failed to execute job callback for: \" + jobId, e); } } }### Assistant: @Test(timeout = 4000) public void unResponsiveGetTest() { final Props props = new Props(); final String url = buildUrlForDelay(10); props.put(\"job.notification.\" + JobCallbackStatusEnum.STARTED.name().toLowerCase() + \".1.url\", url); final List<HttpRequestBase> httpRequestList = JobCallbackUtil.parseJobCallbackProperties(props, JobCallbackStatusEnum.STARTED, contextInfo, 3); jobCBMaker.makeHttpRequest(JOB_NANE, logger, httpRequestList); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public static <T extends Enum<T>> T variantToEnum(final Object variant, final Class<T> enumClazz) { if (variant == null) { return null; } if (variant instanceof String) { return Enum.valueOf(enumClazz, ((String) variant).trim().toUpperCase()); } else if (variant instanceof Number) { final Integer index = variantToInteger(variant); final T[] enumConstants = enumClazz.getEnumConstants(); if (index < 0 || index >= enumConstants.length) { throw new IllegalArgumentException( String.format(\"Variant of type \\\"%s\\\", and value \\\"%s\\\" is out of range [, %d]\", variant.getClass(), variant, enumConstants.length ) ); } return enumConstants[index]; } else if (variant instanceof Enum) { return (T) variant; } throw new IllegalArgumentException(String.format(\"\\\"%s\\\", and value \\\"%s\\\" is not one of %s\", variant.getClass(), variant, Arrays.toString(SUPPORTED_VARIANT_TO_ENUM_TYPES))); }### Assistant: @Test(expectedExceptions = IllegalArgumentException.class) public void testEnumShouldFailUnsupportedType(){ Conversions.variantToEnum(Lists.newArrayList(),MockEnum.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void clear() { if (!cache.isEnabled()) { LOGGER.warn(\"Cache {} is disabled. Cannot clear cache.\", cache.getName()); return; } if (!allowClear) { LOGGER.error(\"Clearing cache '{}' is not allowed. To enable it set allowClear to true. \" + \"Make sure that caches don't overlap (one memcached instance isn't used by more than one cache) \" + \"otherwise clearing one cache will affect another.\", getName()); throw new IllegalStateException(\"Cannot clear cache \" + getName()); } try { LOGGER.info(\"Clear {}\", cache.getName()); cache.flush(); } catch (TimeoutException | CacheException | RuntimeException e) { logOrThrow(e, \"An error has ocurred for cache {}\", getName(), e); } }### Assistant: @Test public void clearNotExecutedWhenCacheDisabled() throws TimeoutException, CacheException { ssmCache = new SSMCache(cache, expiration, true); when(cache.isEnabled()).thenReturn(false); ssmCache.clear(); verify(cache, never()).flush(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Iterable<String> getPackageClassesNames(String packageName) { return getPackageClassesNames(packageName, Thread.currentThread().getContextClassLoader()); }### Assistant: @Test public void shouldReturnNamesOfClassesInsidePackage() { Iterable<String> packageSubclasses = ClassIndex.getPackageClassesNames( ClassIndexTest.class.getPackage().getName()); assertThat(packageSubclasses).contains(FirstComponent.class.getCanonicalName(), Component.class.getCanonicalName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void writeRoadNetwork(Element xmlNode, RoadNetwork primitive, URL geometryURL, MapMetricProjection mapProjection, URL attributeURL, XMLBuilder builder, PathBuilder pathBuilder, XMLResources resources) throws IOException { final ContainerWrapper w = new ContainerWrapper(primitive); w.setElementGeometrySource(geometryURL, mapProjection); w.setElementAttributeSourceURL(attributeURL); writeGISElementContainer(xmlNode, w, NODE_ROAD, builder, pathBuilder, resources); final Rectangle2d bounds = primitive.getBoundingBox(); if (bounds != null) { xmlNode.setAttribute(ATTR_X, Double.toString(bounds.getMinX())); xmlNode.setAttribute(ATTR_Y, Double.toString(bounds.getMinY())); xmlNode.setAttribute(ATTR_WIDTH, Double.toString(bounds.getWidth())); xmlNode.setAttribute(ATTR_HEIGHT, Double.toString(bounds.getHeight())); } }### Assistant: @Test public void writeRoadNetworkElementRoadNetworkURLMapMetricProjectionURLXMLBuilderPathBuilderXMLResources() throws Exception { PathBuilder pathBuilder = new SimplePathBuilder(); XMLResources res = new XMLResources(pathBuilder); DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); DocumentBuilder builder = factory.newDocumentBuilder(); Document doc = builder.newDocument(); XMLBuilder xmlBuilder = new XMLBuilder() { @Override public Document getDocument() throws DOMException { return doc; } }; Element node = xmlBuilder.createElement(\"network\"); doc.appendChild(node); StandardRoadNetwork network = new StandardRoadNetwork(new Rectangle2d(-5, -6, 10, 12)); RoadPolyline road = new RoadPolyline(); road.addGroup(1, 2); road.addPoint(3, 4); road.addPoint(5, 6); road.addGroup(-1, 2); road.addPoint(-3, 4); road.addPoint(-5, -6); road.setName(\"myroad\"); road.setColor(0xFFFF0011); road.setAttribute(\"myattr\", \"thevalue\"); network.addRoadPolyline(road); XMLRoadUtil.writeRoadNetwork(node, network, null, null, null, xmlBuilder, pathBuilder, res); String actual; try (StringWriter sw = new StringWriter()) { XMLUtil.writeXML(doc, sw); sw.close(); actual = sw.toString(); } assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\" + \"<network elementGeometryProjection=\\\"FRANCE_LAMBERT_2_EXTENDED\\\" height=\\\"18.6\\\" width=\\\"16.6\\\" x=\\\"-8.3\\\" y=\\\"-9.3\\\"><elements>\" + \"<road geoId=\\\"0ee8691041f80b41e4957e89239b4ff7#-5;-6;5;6\\\" id=\\\"\" + road.getUUID().toString() + \"\\\" name=\\\"myroad\\\" wide=\\\"true\\\" width=\\\"6.6\\\">\" + \"<points><point x=\\\"1.0\\\" y=\\\"2.0\\\"/><point x=\\\"3.0\\\" y=\\\"4.0\\\"/>\" + \"<point x=\\\"5.0\\\" y=\\\"6.0\\\"/><point x=\\\"-1.0\\\" y=\\\"2.0\\\"/>\" + \"<point x=\\\"-3.0\\\" y=\\\"4.0\\\"/><point x=\\\"-5.0\\\" y=\\\"-6.0\\\"/>\" + \"</points><groups><group firstPointIndex=\\\"0\\\" lastPointIndex=\\\"2\\\"/>\" + \"<group firstPointIndex=\\\"3\\\" lastPointIndex=\\\"5\\\"/></groups>\" + \"<attributes><attribute name=\\\"myattr\\\" type=\\\"STRING\\\" value=\\\"thevalue\\\"/>\" + \"<attribute name=\\\"nom_rue_d\\\" type=\\\"STRING\\\" value=\\\"myroad\\\"/></attributes></road>\" + \"</elements></network>\", actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: Command getSearchPerformedCallback() { return () -> { final Optional<GuidedDecisionTableSearchableElement> current = editorSearchIndex.getCurrentResult(); GuidedDecisionTableSearchableElement value = null; if (current.isPresent()) { value = current.get(); } final SearchPerformedEvent event = new SearchPerformedEvent(value); searchPerformedEvent.fire(event); }; }### Assistant: @Test public void testGetSearchPerformedCallback() { final ArgumentCaptor<SearchPerformedEvent> captor = ArgumentCaptor.forClass(SearchPerformedEvent.class); final GuidedDecisionTableSearchableElement currentResult = mock(GuidedDecisionTableSearchableElement.class); when(editorSearchIndex.getCurrentResult()).thenReturn(Optional.of(currentResult)); presenter.getSearchPerformedCallback().execute(); verify(searchPerformedEvent).fire(captor.capture()); final SearchPerformedEvent value = captor.getValue(); assertEquals(value.getCurrentElement(), currentResult); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final void write(@Nonnull final KyloCatalogClient<T> client, @Nonnull final DataSetOptions options, @Nonnull final T dataSet) { final String url = DataSetUtil.getOptionOrThrow(options, \"url\", \"Option 'url' is required\"); final String table = DataSetUtil.getOptionOrThrow(options, \"dbtable\", \"Option 'dbtable' is required\"); final Properties properties = new Properties(); properties.putAll(options.getOptions()); final DataFrameWriter writer = SparkUtil.prepareDataFrameWriter(getDataFrameWriter(dataSet, options), options, null); writer.jdbc(url, table, properties); }### Assistant: @Test(expected = MissingOptionException.class) public void writeWithoutDbtable() { final DataSetOptions options = new DataSetOptions(); options.setOption(\"url\", \"jdbc:h2:mem:\"); final MockJdbcDataSetProvider provider = new MockJdbcDataSetProvider(); provider.write(Mockito.mock(KyloCatalogClient.class), options, Mockito.mock(DataFrame.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T16> get16() { return getAndCast(16); }### Assistant: @Test void get16() { assertEquals(m16, instance.get16()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void initialize(Configuration config) throws YarnException { setConf(config); this.plugin.initPlugin(config); LOG.info(\"Trying to diagnose FPGA information ...\"); if (!diagnose()) { LOG.warn(\"Failed to pass FPGA devices diagnose\"); } }### Assistant: @Test public void testExecutablePathWithSdkRootSet() throws IOException, YarnException { fakeBinary = new File(getTestParentFolder() + \"/bin/aocl\"); fakeBinary.getParentFile().mkdirs(); touchFile(fakeBinary); Map<String, String> newEnv = new HashMap<String, String>(); newEnv.put(\"ALTERAOCLSDKROOT\", getTestParentFolder()); openclPlugin.setEnvProvider(s -> { return newEnv.get(s); }); fpgaDiscoverer.initialize(conf); assertEquals(\"No configuration but with environment ALTERAOCLSDKROOT set\", getTestParentFolder() + \"/bin/aocl\", openclPlugin.getPathToExecutable()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public String getAsString(@Nonnull String fieldName) { DockerCloudUtils.requireNonNull(fieldName, \"Field name cannot be null.\"); checkObject(); JsonNode value = node.get(fieldName); if (value == null || !value.isTextual()) { throw new NodeProcessingException(\"Child field not found or is not a string value node: \" + node + \" / \" + fieldName); } return value.asText(); }### Assistant: @Test public void getAsString() { AbstractNode<N> node = parentWithChildString(\"A\"); assertThat(node.getAsString(\"child\")).isEqualTo(\"A\"); assertThat(node.getAsString(\"unknownChild\", \"B\")).isEqualTo(\"B\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public Optional<T5> get5() { return Optional.ofNullable((T5) values[5]); }### Assistant: @Test void get5Test() { assertEquals(5, (int) instance.get5().orElseThrow(NoSuchElementException::new)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setXlBoundary(double value) { if (value < 0.9 || value > 1) { throw new SeatsException(\"XL should belong to [0.9, 1]\"); } xl_ = value; }### Assistant: @Test(expected = SeatsException.class) public void testSetXlBoundaryUpperBound() { SeatsSpecification spec = new SeatsSpecification(); spec.setXlBoundary(1.5); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static NamenodeRole convert(NamenodeRoleProto role) { switch (role) { case NAMENODE: return NamenodeRole.NAMENODE; case BACKUP: return NamenodeRole.BACKUP; case CHECKPOINT: return NamenodeRole.CHECKPOINT; } return null; }### Assistant: @Test public void testConvertBlockToken() { Token<BlockTokenIdentifier> token = new Token<BlockTokenIdentifier>( \"identifier\".getBytes(), \"password\".getBytes(), new Text(\"kind\"), new Text(\"service\")); TokenProto tokenProto = PBHelperClient.convert(token); Token<BlockTokenIdentifier> token2 = PBHelperClient.convert(tokenProto); compare(token, token2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void run() { getSafeguardLimits(); String jmxServiceUrl = JMX_SERVICE_PRE_URL + safeguardLimits.getJmxPort() + JMX_SERVICE_POST_URL; if (mBeanServerConnection == null || responseQueue == null || loggerQueue == null || dlqQueue == null || amqObject == null) { mBeanServerConnection = jmxConnectionBuilder.buildMBeanServerConnection(jmxServiceUrl); responseQueue = jmxObjectNameProvider.getObjectName(RESPONSE_QUEUE_OBJECT_NAME); loggerQueue = jmxObjectNameProvider.getObjectName(LOGGER_QUEUE_OBJECT_NAME); dlqQueue = jmxObjectNameProvider.getObjectName(DLQ_QUEUE_OBJECT_NAME); amqObject = jmxObjectNameProvider.getObjectName(AMQ_OBJECT_NAME); } Long totalQueueSize = retrieveQuerySize(); setSafeguardFlags(totalQueueSize); resetDlqAsNecessary(); resetAMQueueAsNecessary(totalQueueSize); }### Assistant: @Test public final void testRunShouldSaveQueueSizesIntoQueueSizeProvider() throws Exception { Whitebox.setInternalState(underTest, \"fIDecompressionEnabled\", true); Whitebox.setInternalState(underTest, \"messageWritingEnabled\", true); QueueSizeProvider queueSizeProvider = new QueueSizeProvider(); Whitebox.setInternalState(underTest, \"queueSizeProvider\", queueSizeProvider); given(mBeanServerConnection.getAttribute(responseQueue, \"QueueSize\")).willReturn(new Long(12)); given(mBeanServerConnection.getAttribute(loggerQueue, \"QueueSize\")).willReturn(new Long(91)); given(mBeanServerConnection.getAttribute(dlqQueue, \"QueueSize\")).willReturn(new Long(0)); given(mBeanServerConnection.getAttribute(amqObject, \"MemoryPercentUsage\")).willReturn(new Integer(0)); underTest.run(); long loggerQueueSize = ((QueueSizeProvider) Whitebox.getInternalState(underTest, \"queueSizeProvider\")).getLoggerQueueSize(); Assert.assertEquals(loggerQueueSize, 91); long responseQueueSize = ((QueueSizeProvider) Whitebox.getInternalState(underTest, \"queueSizeProvider\")).getResponseQueueSize(); Assert.assertEquals(responseQueueSize, 12); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public IntStream zeros() { return IntStream.range(0, length()) .filter(index -> !Bits.get(_genes, index)); }### Assistant: @Test public void zeros() { final BitChromosome c = BitChromosome.of(1000, 0.5); final int zeros = (int)c.zeros().count(); assertEquals(zeros, c.length() - c.bitCount()); assertTrue(c.zeros().noneMatch(c::booleanValue)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Hml read(final Reader reader) throws IOException { checkNotNull(reader); try { JAXBContext context = JAXBContext.newInstance(Hml.class); Unmarshaller unmarshaller = context.createUnmarshaller(); SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); URL schemaURL = HmlReader.class.getResource(\"/org/nmdp/ngs/hml/xsd/hml-1.0.1.xsd\"); Schema schema = schemaFactory.newSchema(schemaURL); unmarshaller.setSchema(schema); return (Hml) unmarshaller.unmarshal(reader); } catch (JAXBException | SAXException e) { throw new IOException(\"could not unmarshal HML\", e); } }### Assistant: @Test(expected=IOException.class) public void testReadInvalidSyntaxFile() throws Exception { read(createFile(\"invalid-syntax.xml\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] shiftBitsToLSB(byte[] inputBytes, int numBits) { int numBytes = inputBytes.length; int numBitstoShift = numBits % NetUtils.NUM_BITS_IN_A_BYTE; byte[] shiftedBytes = new byte[numBytes]; int inputLsb = 0; int inputMsb = 0; if (numBitstoShift == 0) { return inputBytes; } for (int i = 1; i < numBytes; i++) { inputLsb = inputBytes[i - 1] & getLSBMask(NetUtils.NUM_BITS_IN_A_BYTE - numBitstoShift); inputLsb = inputLsb < 0 ? inputLsb + 256 : inputLsb; inputMsb = inputBytes[i] & getMSBMask(numBitstoShift); inputMsb = inputBytes[i] < 0 ? inputBytes[i] + 256 : inputBytes[i]; shiftedBytes[i] = (byte) (inputLsb << numBitstoShift | inputMsb >> NetUtils.NUM_BITS_IN_A_BYTE - numBitstoShift); } inputMsb = inputBytes[0] & getMSBMask(numBitstoShift); inputMsb = inputMsb < 0 ? inputMsb + 256 : inputMsb; shiftedBytes[0] = (byte) (inputMsb >> NetUtils.NUM_BITS_IN_A_BYTE - numBitstoShift); return shiftedBytes; }### Assistant: @Test public void testShiftBitstoLSB() { byte[] data = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; byte[] data2 = { 8, 9, 10 }; byte[] shiftedBytes2 = BitBufferHelper.shiftBitsToLSB(data2, 11); Assert.assertTrue(shiftedBytes2[0] == 0); Assert.assertTrue(shiftedBytes2[1] == 64); Assert.assertTrue(shiftedBytes2[2] == 72); byte[] shiftedBytes = BitBufferHelper.shiftBitsToLSB(data, 49); Assert.assertTrue(shiftedBytes[0] == 0); Assert.assertTrue(shiftedBytes[1] == 2); Assert.assertTrue(shiftedBytes[2] == 4); Assert.assertTrue(shiftedBytes[3] == 6); Assert.assertTrue(shiftedBytes[4] == 8); Assert.assertTrue(shiftedBytes[5] == 10); Assert.assertTrue(shiftedBytes[6] == 12); Assert.assertTrue(shiftedBytes[7] == 14); Assert.assertTrue(shiftedBytes[8] == 16); Assert.assertTrue(shiftedBytes[9] == 18); byte[] data1 = { 1, 2, 3 }; byte[] shiftedBytes1 = BitBufferHelper.shiftBitsToLSB(data1, 18); Assert.assertTrue(shiftedBytes1[0] == 0); Assert.assertTrue(shiftedBytes1[1] == 4); Assert.assertTrue(shiftedBytes1[2] == 8); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static final KeyTemplate aes128CtrHmacSha2564KBTemplate() { return createKeyTemplate(16, HashType.SHA256, 16, HashType.SHA256, 32, 4096); }### Assistant: @Test public void testAes128CtrHmacSha2564KBTemplate() throws Exception { KeyTemplate template = AesCtrHmacStreamingKeyManager.aes128CtrHmacSha2564KBTemplate(); assertThat(template.getTypeUrl()).isEqualTo(new AesCtrHmacStreamingKeyManager().getKeyType()); assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW); AesCtrHmacStreamingKeyFormat format = AesCtrHmacStreamingKeyFormat.parseFrom( template.getValue(), ExtensionRegistryLite.getEmptyRegistry()); assertThat(format.getKeySize()).isEqualTo(16); assertThat(format.getParams().getDerivedKeySize()).isEqualTo(16); assertThat(format.getParams().getHkdfHashType()).isEqualTo(HashType.SHA256); assertThat(format.getParams().getHmacParams().getHash()).isEqualTo(HashType.SHA256); assertThat(format.getParams().getHmacParams().getTagSize()).isEqualTo(32); assertThat(format.getParams().getCiphertextSegmentSize()).isEqualTo(4096); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getName() { return \"LessOperator\"; }### Assistant: @Test public void testGetName() { assertEquals(\"LessOperator\", new LessOperator().getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: Map<String, Object> parseForValidate(Map<String, String> props, Map<String, ConfigValue> configValues) { Map<String, Object> parsed = new HashMap<>(); Set<String> configsWithNoParent = getConfigsWithNoParent(); for (String name: configsWithNoParent) { parseForValidate(name, props, parsed, configValues); } return parsed; }### Assistant: @Test public void testParseForValidate() { Map<String, Object> expectedParsed = new HashMap<>(); expectedParsed.put(\"a\", 1); expectedParsed.put(\"b\", null); expectedParsed.put(\"c\", null); expectedParsed.put(\"d\", 10); Map<String, ConfigValue> expected = new HashMap<>(); String errorMessageB = \"Missing required configuration \\\"b\\\" which has no default value.\"; String errorMessageC = \"Missing required configuration \\\"c\\\" which has no default value.\"; ConfigValue configA = new ConfigValue(\"a\", 1, Collections.<Object>emptyList(), Collections.<String>emptyList()); ConfigValue configB = new ConfigValue(\"b\", null, Collections.<Object>emptyList(), Arrays.asList(errorMessageB, errorMessageB)); ConfigValue configC = new ConfigValue(\"c\", null, Collections.<Object>emptyList(), Arrays.asList(errorMessageC)); ConfigValue configD = new ConfigValue(\"d\", 10, Collections.<Object>emptyList(), Collections.<String>emptyList()); expected.put(\"a\", configA); expected.put(\"b\", configB); expected.put(\"c\", configC); expected.put(\"d\", configD); ConfigDef def = new ConfigDef() .define(\"a\", Type.INT, Importance.HIGH, \"docs\", \"group\", 1, Width.SHORT, \"a\", Arrays.asList(\"b\", \"c\"), new IntegerRecommender(false)) .define(\"b\", Type.INT, Importance.HIGH, \"docs\", \"group\", 2, Width.SHORT, \"b\", new IntegerRecommender(true)) .define(\"c\", Type.INT, Importance.HIGH, \"docs\", \"group\", 3, Width.SHORT, \"c\", new IntegerRecommender(true)) .define(\"d\", Type.INT, Importance.HIGH, \"docs\", \"group\", 4, Width.SHORT, \"d\", Arrays.asList(\"b\"), new IntegerRecommender(false)); Map<String, String> props = new HashMap<>(); props.put(\"a\", \"1\"); props.put(\"d\", \"10\"); Map<String, ConfigValue> configValues = new HashMap<>(); for (String name: def.configKeys().keySet()) { configValues.put(name, new ConfigValue(name)); } Map<String, Object> parsed = def.parseForValidate(props, configValues); assertEquals(expectedParsed, parsed); assertEquals(expected, configValues); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Set<String> getPluginNames() { return plugins.keySet(); }### Assistant: @Test public void testGetPluginNames() { pluginDocTree.addPlugin(\"pluginDoc1\", pluginDoc1); pluginDocTree.addPlugin(\"pluginDoc2\", pluginDoc2); assertThat(pluginDocTree.getPluginNames(), containsInAnyOrder(\"pluginDoc1\", \"pluginDoc2\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public long getUncompressedLen() { return uncompressed_len; }### Assistant: @Test public void testGetUncompressedLen() { assertEquals(TestParameters.VP_RES_TBL_UNCOMP_LENGTH, chmLzxcResetTable.getUncompressedLen()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean hasVersionLabel(String label) throws RepositoryException { return delegate.hasVersionLabel(label); }### Assistant: @Test public void testHasVersionLabel2() throws Exception { VersionHistory delegate = mock(VersionHistory.class); VersionHistoryFacade<Session> facade = getFacade(delegate); final Version version = mock(Version.class); final String arg = \"arg\"; when(delegate.hasVersionLabel(version, arg)).thenReturn(true); assertTrue(\"is true\", facade.hasVersionLabel(version, arg)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Tuple1<Double> calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary) { if (!EvaluationUtil.checkRowFieldNotNull(row)) { return Tuple1.of(0.); } String clusterId = row.getField(0).toString(); Vector vec = VectorUtil.getVector(row.getField(1)); double currentClusterDissimilarity = 0.0; double neighboringClusterDissimilarity = Double.MAX_VALUE; if (clusterMetricsSummary.distance instanceof EuclideanDistance) { double normSquare = vec.normL2Square(); for (int i = 0; i < clusterMetricsSummary.k; i++) { double dissimilarity = clusterMetricsSummary.clusterCnt.get(i) * normSquare - 2 * clusterMetricsSummary.clusterCnt.get(i) * MatVecOp.dot(vec, clusterMetricsSummary.meanVector.get(i)) + clusterMetricsSummary.vectorNormL2Sum.get(i); if (clusterId.equals(clusterMetricsSummary.clusterId.get(i))) { if (clusterMetricsSummary.clusterCnt.get(i) > 1) { currentClusterDissimilarity = dissimilarity / (clusterMetricsSummary.clusterCnt.get(i) - 1); } } else { neighboringClusterDissimilarity = Math.min(neighboringClusterDissimilarity, dissimilarity / clusterMetricsSummary.clusterCnt.get(i)); } } } else { for (int i = 0; i < clusterMetricsSummary.k; i++) { double dissimilarity = 1.0 - MatVecOp.dot(vec, clusterMetricsSummary.meanVector.get(i)); if (clusterId.equals(clusterMetricsSummary.clusterId.get(i))) { if (clusterMetricsSummary.clusterCnt.get(i) > 1) { currentClusterDissimilarity = dissimilarity * clusterMetricsSummary.clusterCnt.get(i) / (clusterMetricsSummary.clusterCnt.get(i) - 1); } } else { neighboringClusterDissimilarity = Math.min(neighboringClusterDissimilarity, dissimilarity); } } } return Tuple1.of(currentClusterDissimilarity < neighboringClusterDissimilarity ? 1 - (currentClusterDissimilarity / neighboringClusterDissimilarity) : (neighboringClusterDissimilarity / currentClusterDissimilarity) - 1); }### Assistant: @Test public void calSilhouetteCoefficientTest(){ Row[] rows0 = new Row[] { Row.of(0, \"0,0,0\"), Row.of(0, \"0.1,0.1,0.1\"), Row.of(0, \"0.2,0.2,0.2\") }; Row[] rows1 = new Row[] { Row.of(1, \"9 9 9\"), Row.of(1, \"9.1 9.1 9.1\"), Row.of(1, \"9.2 9.2 9.2\") }; ClusterMetricsSummary clusterMetricsSummary1 = ClusterEvaluationUtil.getClusterStatistics(Arrays.asList(rows0), new EuclideanDistance()); ClusterMetricsSummary clusterMetricsSummary2 = ClusterEvaluationUtil.getClusterStatistics(Arrays.asList(rows1), new EuclideanDistance()); ClusterMetricsSummary clusterMetricsSummary = clusterMetricsSummary1.merge(clusterMetricsSummary2); for(Row row : rows1){ Assert.assertEquals(0.99, ClusterEvaluationUtil.calSilhouetteCoefficient(row, clusterMetricsSummary).f0, 0.01); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: ObjectSchema.Builder load() { ObjectSchema.Builder builder = ObjectSchema.builder(); ls.schemaJson().maybe(\"minProperties\").map(JsonValue::requireInteger).ifPresent(builder::minProperties); ls.schemaJson().maybe(\"maxProperties\").map(JsonValue::requireInteger).ifPresent(builder::maxProperties); ls.schemaJson().maybe(\"properties\").map(JsonValue::requireObject) .ifPresent(propertyDefs -> populatePropertySchemas(propertyDefs, builder)); ls.schemaJson().maybe(\"additionalProperties\").ifPresent(rawAddProps -> { rawAddProps.canBe(Boolean.class, p -> builder.additionalProperties(p)) .or(JsonObject.class, def -> builder.schemaOfAdditionalProperties(defaultLoader.loadChild(def).build())) .requireAny(); }); ls.schemaJson().maybe(\"required\").map(JsonValue::requireArray) .ifPresent(arr -> arr.forEach((i, val) -> builder.addRequiredProperty(val.requireString()))); ls.schemaJson().maybe(\"patternProperties\").map(JsonValue::requireObject) .ifPresent(patternProps -> { patternProps.keySet().forEach(pattern -> { Schema patternSchema = defaultLoader.loadChild(patternProps.require(pattern)).build(); Regexp regexp = ls.config.regexpFactory.createHandler(pattern); builder.patternProperty(regexp, patternSchema); }); }); ls.schemaJson().maybe(\"dependencies\").map(JsonValue::requireObject) .ifPresent(deps -> addDependencies(builder, deps)); if (ls.specVersion().isAtLeast(DRAFT_6)) { ls.schemaJson().maybe(\"propertyNames\") .map(defaultLoader::loadChild) .map(Schema.Builder::build) .ifPresent(builder::propertyNameSchema); } return builder; }### Assistant: @Test public void emptyDependencyList() { SchemaLoader.load(get(\"emptyDependencyList\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void visitToken(DetailAST ast) { final DetailAST expressionAst = ast.findFirstToken(TokenTypes.EXPR); switch (ast.getType()) { case TokenTypes.LITERAL_RETURN: if (!isEmptyReturn(ast)) { final DetailAST inversionAst = getInversion(expressionAst); if (isAvoidableInversion(inversionAst)) { log(inversionAst); } } break; case TokenTypes.LITERAL_WHILE: case TokenTypes.LITERAL_DO: case TokenTypes.LITERAL_IF: final DetailAST invertedAst = getInversion(expressionAst); if (isAvoidableInversion(invertedAst)) { log(invertedAst); } break; case TokenTypes.FOR_CONDITION: if (!isEmptyForCondition(ast)) { final DetailAST inversionAst = getInversion(expressionAst); if (isAvoidableInversion(inversionAst)) { log(inversionAst); } } break; default: SevntuUtil.reportInvalidToken(ast.getType()); break; } }### Assistant: @Test public void testUnsupportedNode() { final DetailAstImpl sync = new DetailAstImpl(); sync.setType(TokenTypes.LITERAL_SYNCHRONIZED); try { final AvoidConditionInversionCheck check = new AvoidConditionInversionCheck(); check.visitToken(sync); fail(\"exception expected\"); } catch (IllegalArgumentException ex) { Assert.assertEquals(\"Found unsupported token: LITERAL_SYNCHRONIZED\", ex.getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void prependTo(@NotNull final RawSqlBuilder builder) { builder.prepend(\"TO\"); }### Assistant: @Test public void prependTo_prependsProperSql() { ToImpl to = new ToImpl(mock(SqlPart.class)); RawSqlBuilder builder = new RawSqlBuilderImpl(); to.prependTo(builder); assertThat(builder.toString(), is(\"TO\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public AbstractSysSyncConfigDto startSynchronization(AbstractSysSyncConfigDto config) { Assert.notNull(config, \"Configuration is required.\"); Assert.notNull(config.getId(), \"Id of sync config is required!\"); SynchronizationSchedulableTaskExecutor lrt = new SynchronizationSchedulableTaskExecutor(config.getId()); longRunningTaskManager.execute(lrt); return config; }### Assistant: @Test public void doStartSyncF_Unlinked_doLinkByEavAttribute_ChangeValue() { this.doStartSyncB_Linked_doUnLinked(); AbstractSysSyncConfigDto syncConfigCustom = setSyncConfigForEav(SYNC_CONFIG_NAME); Assert.assertFalse(syncConfigService.isRunning(syncConfigCustom)); IdmIdentityDto identityOne = identityService.getByUsername(\"x\" + IDENTITY_USERNAME_ONE); IdmIdentityDto identityTwo = identityService.getByUsername(\"x\" + IDENTITY_USERNAME_TWO); AccIdentityAccountFilter identityAccountFilterOne = new AccIdentityAccountFilter(); identityAccountFilterOne.setIdentityId(identityOne.getId()); Assert.assertEquals(0, identityAccoutnService.find(identityAccountFilterOne, null).getTotalElements()); AccIdentityAccountFilter identityAccountFilterTwo = new AccIdentityAccountFilter(); identityAccountFilterTwo.setIdentityId(identityTwo.getId()); Assert.assertEquals(0, identityAccoutnService.find(identityAccountFilterTwo, null).getTotalElements()); List<Serializable> list = new ArrayList<>(); list.add(\"5\"); formService.saveValues(identityOne.getId(), IdmIdentity.class, EAV_ATTRIBUTE, list); helper.startSynchronization(syncConfigCustom); SysSyncLogFilter logFilter = new SysSyncLogFilter(); logFilter.setSynchronizationConfigId(syncConfigCustom.getId()); List<SysSyncLogDto> logs = syncLogService.find(logFilter, null).getContent(); Assert.assertEquals(1, logs.size()); SysSyncLogDto log = logs.get(0); Assert.assertFalse(log.isRunning()); Assert.assertFalse(log.isContainsError()); SysSyncActionLogFilter actionLogFilter = new SysSyncActionLogFilter(); actionLogFilter.setSynchronizationLogId(log.getId()); List<SysSyncActionLogDto> actions = syncActionLogService.find(actionLogFilter, null).getContent(); Assert.assertEquals(2, actions.size()); SysSyncActionLogDto actionLog = actions.stream().filter(action -> { return SynchronizationActionType.MISSING_ENTITY == action.getSyncAction(); }).findFirst().get(); SysSyncItemLogFilter itemLogFilter = new SysSyncItemLogFilter(); itemLogFilter.setSyncActionLogId(actionLog.getId()); List<SysSyncItemLogDto> items = syncItemLogService.find(itemLogFilter, null).getContent(); Assert.assertEquals(1, items.size()); Assert.assertEquals(0, identityAccoutnService.find(identityAccountFilterOne, null).getTotalElements()); Assert.assertEquals(1, identityAccoutnService.find(identityAccountFilterTwo, null).getTotalElements()); syncLogService.delete(log); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setMinDate(@Nullable LocalDate minDate) { mMinDate = minDate; }### Assistant: @Test public void testSetMinDate() throws Exception { LocalDate min = LocalDate.now().minusMonths(1); mCalendarManager.setMinDate(min); assertEquals(min, mCalendarManager.getMinDate()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void openNode() { }### Assistant: @Test public void outlinesCount() { PDDocumentOutline outline = new PDDocumentOutline(); PDOutlineItem root = new PDOutlineItem(); outline.addLast(root); assertEquals(1, outline.getOpenCount()); root.addLast(new PDOutlineItem()); assertEquals(-1, root.getOpenCount()); assertEquals(1, outline.getOpenCount()); root.addLast(new PDOutlineItem()); assertEquals(-2, root.getOpenCount()); assertEquals(1, outline.getOpenCount()); root.openNode(); assertEquals(2, root.getOpenCount()); assertEquals(3, outline.getOpenCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int read() throws IOException { byte[] b1 = new byte[1]; int n = this.read(b1); if (n == 1) { return b1[0] & 0xff; } return -1; }### Assistant: @Test(timeout = 10000) public void readWithOffsetUndLength() throws IOException { testChannel = new TestPipeChannel(); PipeChannelInputStream input = new PipeChannelInputStream(testChannel, Duration.ofSeconds(2)); byte[] msgBytes = new byte[]{1, 2, 3}; byte[] buffer = new byte[msgBytes.length + 4]; testChannel.putInReadBuffer(msgBytes); int n = input.read(buffer, 2, buffer.length - 2); assertThat(n).isEqualTo(msgBytes.length); assertThat(buffer).containsExactly((byte) 0, (byte) 0, (byte) 1, (byte) 2, (byte) 3, (byte) 0, (byte) 0); Arrays.fill(buffer, (byte) 0); testChannel.exhaustReadBuffer(); testChannel.putInReadBuffer(msgBytes); n = input.read(buffer, 0, 2); assertThat(n).isEqualTo(2); assertThat(buffer).containsExactly((byte) 1, (byte) 2, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0); Arrays.fill(buffer, (byte) 0); testChannel.exhaustReadBuffer(); testChannel.putInReadBuffer(msgBytes); n = input.read(buffer, 2, 2); assertThat(n).isEqualTo(2); assertThat(buffer).containsExactly((byte) 0, (byte) 0, (byte) 1, (byte) 2, (byte) 0, (byte) 0, (byte) 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public org.modeshape.jcr.api.query.Query createQuery( String statement, String language ) throws InvalidQueryException, RepositoryException { CheckArg.isNotNull(statement, \"statement\"); CheckArg.isNotNull(language, \"language\"); return createQuery(statement, language, null, null); }### Assistant: @FixFor( \"MODE-2057\" ) @Test public void shouldBeAbleToCreateAndExecuteJcrSql2QueryWithUnionAndFullTextSearch() throws RepositoryException { String sql = \"SELECT category.[jcr:path] AS p FROM [nt:unstructured] AS category WHERE contains(category.*, 'Utility')\" + \"UNION \" + \"SELECT category.[jcr:path] AS p FROM [nt:unstructured] AS category JOIN [car:Car] AS cars ON ISCHILDNODE(cars,category) WHERE contains(cars.*, 'Toyota') \"; Query query = session.getWorkspace().getQueryManager().createQuery(sql, Query.JCR_SQL2); QueryResult result = query.execute(); validateQuery().rowCount(2).hasColumns(\"p\").validate(query, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Event intercept(Event event) { if (!excludeEvents) { if (regex.matcher(new String(event.getBody())).find()) { return event; } else { return null; } } else { if (regex.matcher(new String(event.getBody())).find()) { return null; } else { return event; } } }### Assistant: @Test public void testDefaultBehavior() throws ClassNotFoundException, InstantiationException, IllegalAccessException { Interceptor.Builder builder = InterceptorBuilderFactory.newInstance( InterceptorType.REGEX_FILTER.toString()); builder.configure(new Context()); Interceptor interceptor = builder.build(); Event event = EventBuilder.withBody(\"test\", Charsets.UTF_8); Event filteredEvent = interceptor.intercept(event); Assert.assertNotNull(filteredEvent); Assert.assertEquals(event, filteredEvent); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ThingQueryCommandResponseAdapter of(final HeaderTranslator headerTranslator) { return new ThingQueryCommandResponseAdapter(requireNonNull(headerTranslator)); }### Assistant: @Test public void retrieveFeaturePropertyResponseFromAdaptable() { final RetrieveFeaturePropertyResponse expected = RetrieveFeaturePropertyResponse.of(THING_ID, FEATURE_ID, TestConstants.FEATURE_PROPERTY_POINTER, TestConstants.FEATURE_PROPERTY_VALUE, DITTO_HEADERS_V_1); final TopicPath topicPath = topicPath(TopicPath.Action.RETRIEVE); final JsonPointer path = JsonPointer.of(\"/features/\" + FEATURE_ID + \"/properties\" + TestConstants.FEATURE_PROPERTY_POINTER); final Adaptable adaptable = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path) .withStatus(HttpStatusCode.OK) .withValue(TestConstants.FEATURE_PROPERTY_VALUE) .build()) .withHeaders(TestConstants.HEADERS_V_1) .build(); final ThingQueryCommandResponse<?> actual = underTest.fromAdaptable(adaptable); assertWithExternalHeadersThat(actual).isEqualTo(expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: <T> Callback createCallback(ResponseProcessor<? extends T> processor, CompletableFuture<T> resultFuture) { return new Callback() { @Override public void onFailure(@NotNull Call call, @NotNull IOException e) { resultFuture.completeExceptionally(e); LOG.error(\"Failed HTTP request {} {}\", call.request().method(), call.request().url(), e); } @Override public void onResponse(@NotNull Call call, @NotNull Response response) { try { LOG.debug(\"HTTP response {} - {} {}\", response.code(), response.request().method(), response.request().url()); T result = processor.process(new ResponseImpl(response)); resultFuture.complete(result); } catch (Exception e) { resultFuture.completeExceptionally(e); LOG.error(\"Failed HTTP request {} {}\", call.request().method(), call.request().url(), e); } finally { response.close(); } } }; }### Assistant: @Test public void testResponseIsClosed() throws IOException { Object result = new Object(); Response response = createResponseMock(); CompletableFuture<Object> future = new CompletableFuture<>(); ResponseProcessor<Object> processor = createProcessorMock(); when(processor.process(any())).thenReturn(result); Callback callback = httpClient.createCallback(processor, future); callback.onResponse(createCallMock(), response); assertThat(future.join()).isEqualTo(result); verify(response).close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ListenableFuture<ServiceDescriptors> refreshServices(ServiceDescriptors serviceDescriptors) { requireNonNull(serviceDescriptors, \"serviceDescriptors is null\"); return lookup(serviceDescriptors.getType(), serviceDescriptors.getPool(), serviceDescriptors); }### Assistant: @Test public void testRefreshServices() throws Exception { ServiceDescriptors descriptors = createClient(createProcessor(null, null, \"testingenvironment\")) .refreshServices(new ServiceDescriptors(\"testService\", \"testPool\", ImmutableList.of(), new Duration(1, HOURS), null)) .get(); assertDescriptorsExpected(descriptors, null, DEFAULT_DELAY); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting Writer<Record> newRecordWriter(Schema schema) { String key = keySupplier.get(); AbortableOutputStream outputStream; try { outputStream = outputStreamFactory.create(key); } catch (IOException e) { throw new RuntimeException(\"Error creating output.\", e); } LongConsumer consumer = x -> byteCounter.getAndAdd(x); ConsumerCountOutputStream output = new ConsumerCountOutputStream(outputStream, consumer); try { return recordWriterFactory.create(schema, output); } catch (IOException e) { throw new RuntimeException(\"Error creating writer.\", e); } }### Assistant: @Test(expected = RuntimeException.class) public void newRecordWriter_newOutputStreamException() throws IOException { doThrow(IOException.class).when(outputStreamFactory).create(LOCATION); underTest.newRecordWriter(schema1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getUsername() { return this.username; }### Assistant: @Test public void getUsername_Returns_username() { final String expected = username; final String actual = user.getUsername(); Assert.assertEquals(actual, expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void send(final JsonEnvelope jsonEnvelope, final String destinationName) { final Destination destination = destinationProvider.getDestination(destinationName); try (final Connection connection = connectionFactory.createConnection(); final Session session = connection.createSession(false, AUTO_ACKNOWLEDGE); final MessageProducer producer = session.createProducer(destination)) { producer.send(envelopeConverter.toMessage(jsonEnvelope, session)); } catch (final JMSException e) { throw new JmsEnvelopeSenderException(format(\"Exception while sending envelope with name %s\", jsonEnvelope.metadata().name()), e); } }### Assistant: @Test public void shouldSendJsonEnvelopeToJmsQueue() throws Exception { final String destinationName = \"destination name\"; final Connection connection = mock(Connection.class); final Session session = mock(Session.class); final MessageProducer messageProducer = mock(MessageProducer.class); final Destination destination = mock(Destination.class); final JsonEnvelope jsonEnvelope = mock(JsonEnvelope.class); final TextMessage textMessage = mock(TextMessage.class); when(destinationProvider.getDestination(destinationName)).thenReturn(destination); when(connectionFactory.createConnection()).thenReturn(connection); when(connection.createSession(false, AUTO_ACKNOWLEDGE)).thenReturn(session); when(session.createProducer(destination)).thenReturn(messageProducer); when(envelopeConverter.toMessage(jsonEnvelope, session)).thenReturn(textMessage); jmsSender.send(jsonEnvelope, destinationName); verify(messageProducer).send(textMessage); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Long keepSignificantFigures( Long value, int numSigFigs ) { if (value == 0l) return value; if (numSigFigs < 0) return value; if (numSigFigs == 0) return 0l; int currentExp = getExponentInScientificNotation(value); int decimalShift = -currentExp + numSigFigs - 1; return roundUp(value, decimalShift); }### Assistant: @Test public void shouldKeepSignificantFigures() { assertThat(ops.keepSignificantFigures(0l, 2), is(0l)); assertThat(ops.keepSignificantFigures(1201234l, 5), is(1201200l)); assertThat(ops.keepSignificantFigures(1201254l, 5), is(1201300l)); assertThat(ops.keepSignificantFigures(1201234l, 4), is(1201000l)); assertThat(ops.keepSignificantFigures(1201234l, 3), is(1200000l)); assertThat(ops.keepSignificantFigures(1201234l, 2), is(1200000l)); assertThat(ops.keepSignificantFigures(1201234l, 1), is(1000000l)); assertThat(ops.keepSignificantFigures(-1320l, 2), is(-1300l)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute(JobContext context) { log.trace(\"Starting CleanRepositoryCache Job\"); long startTime = System.currentTimeMillis(); Repository cacheRepo = repositoryManager.getRepository(repoId) .orElseThrow(() -> new IllegalStateException(\"Ontology Cache Repository\" + repoId + \" must exist\")); try (RepositoryConnection conn = cacheRepo.getConnection()) { List<Statement> statements = RepositoryResults.asList( conn.getStatements(null, vf.createIRI(OntologyDatasets.TIMESTAMP_IRI_STRING), null)); OffsetDateTime now = OffsetDateTime.now(); statements.forEach(statement -> { if (now.isAfter(OffsetDateTime.parse(statement.getObject().stringValue()).plusSeconds(expirySeconds))) { log.debug(\"Evicting expired dataset: \" + statement.getSubject().stringValue()); datasetManager.safeDeleteDataset(statement.getSubject(), repoId, false); } }); } log.trace(\"CleanRepositoryCache Job complete in \" + (System.currentTimeMillis() - startTime) + \" ms\"); }### Assistant: @Test public void executeOneExpiredTest() { try (RepositoryConnection conn = repo.getConnection()) { conn.add(dataset1, vf.createIRI(OntologyDatasets.TIMESTAMP_IRI_STRING), vf.createIRI(OffsetDateTime.now().minusSeconds(10000).toString())); conn.add(dataset2, vf.createIRI(OntologyDatasets.TIMESTAMP_IRI_STRING), vf.createIRI(OffsetDateTime.now().plusSeconds(10000).toString())); } cleanJob.execute(jobContext); verify(repoManager).getRepository(\"ontologyCache\"); verify(datasetManager).safeDeleteDataset(dataset1, \"ontologyCache\", false); verify(datasetManager, never()).safeDeleteDataset(dataset2, \"ontologyCache\", false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static IDifference construct(String name, Double first, Double second) { if (first == null && second == null) { return null; } if (first == null || second == null) { return new DoubleDifference(name, first, second); } if (Math.abs(first - second) < ERROR) { return null; } return new DoubleDifference(name, first, second); }### Assistant: @Test public void testOneNull() { IDifference result = DoubleDifference.construct(\"Foo\", null, 1.0); Assert.assertNotNull(result); result = DoubleDifference.construct(\"Foo\", 3.0, null); Assert.assertNotNull(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML }) public ClusterInfo get() { return getClusterInfo(); }### Assistant: @Test public void testClusterMetricsXML() throws JSONException, Exception { WebResource r = resource(); ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"cluster\") .path(\"metrics\").accept(\"application/xml\").get(ClientResponse.class); assertEquals(MediaType.APPLICATION_XML_TYPE, response.getType()); String xml = response.getEntity(String.class); verifyClusterMetricsXML(xml); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void run() { List<String> types = config.addType; if (types == null || types.isEmpty()) { throw new IllegalArgumentException(\"Must specify a single type to add.\"); } String firstType = types.get(0).toLowerCase().trim(); String name = config.name; if (name == null || !validName(name)) { throw new IllegalArgumentException(format(\"Invalid name, must match %s\", VALID_NAME_PATTERN)); } switch (firstType) { case \"group\": try { keywhizClient.getGroupByName(name); throw new AssertionError(\"Group already exists.\"); } catch (NotFoundException e) { } catch (IOException e) { throw Throwables.propagate(e); } try { keywhizClient.createGroup(name, config.getDescription(), config.getMetadata(mapper)); logger.info(\"Creating group '{}'.\", name); } catch (IOException e) { throw Throwables.propagate(e); } break; case \"secret\": try { keywhizClient.getSanitizedSecretByName(name); throw new AssertionError(\"Secret already exists.\"); } catch (NotFoundException e) { } catch (IOException e) { throw Throwables.propagate(e); } byte[] content = readSecretContent(); ImmutableMap<String, String> metadata = config.getMetadata(mapper); createAndAssignSecret(name, config.getDescription(), content, metadata, config.getExpiry()); break; case \"client\": try { keywhizClient.getClientByName(name); throw new AssertionError(\"Client name already exists.\"); } catch (NotFoundException e) { } catch (IOException e) { throw Throwables.propagate(e); } try { keywhizClient.createClient(name, config.getDescription(), config.getSpiffeId()); logger.info(\"Creating client '{}'.\", name); } catch (IOException e) { throw Throwables.propagate(e); } break; default: throw new AssertionError(\"Invalid add type specified: \" + firstType); } }### Assistant: @Test(expected = IllegalArgumentException.class) public void addThrowsIfNoTypeSpecified() throws Exception { addActionConfig.addType = null; addAction.run(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public DateFormat[] getFormats() { DateFormat[] results = new DateFormat[_formats.length]; System.arraycopy(_formats, 0, results, 0, results.length); return results; }### Assistant: @Test public void testPickerFormatterUIResourceCustomLocale() { Locale locale = Locale.FRENCH; DatePickerFormatter formatter = new DatePickerFormatterUIResource(locale); SimpleDateFormat format = (SimpleDateFormat) formatter.getFormats()[0]; String pattern = UIManagerExt.getString(\"JXDatePicker.longFormat\", locale); assertEquals(\"format pattern must be same as from localized resource\", pattern, format.toPattern()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static MyAttributeValue parseValueFromEncoding(URI encoding, Object attributeValue, EnumAllowedValues eav) { MyAttributeValue ret = parseValueFromEncodingNoCheck(encoding, attributeValue, eav); if(! encoding.equals(ret.getEncodingOrNull())) { throw new RuntimeException(\"Problem with encoding: \" + encoding + \"/\" + ret.getEncodingOrNull()); } return ret; }### Assistant: @Test public void testUriDifferentEncodings() { final URI uriDatatype = URI.create(\"xs:anyURI\"); final BigInteger expectedUtf8 = new BigInteger(\"68C3A96C6CC3B807\", 16); final BigInteger expectedSha = new BigInteger(HASH_OF_TEST_STRING, 16); List<MyAttributeValue> val = new ArrayList<MyAttributeValue>(); val.add(MyAttributeEncodingFactory.parseValueFromEncoding(ENCODING_URI_UTF_8, TEST_STRING_URI, null)); val.add(MyAttributeEncodingFactory.parseValueFromEncoding(ENCODING_URI_SHA, TEST_STRING_URI, null)); val.add(MyAttributeValueFactory.parseValue(uriDatatype, TEST_STRING_URI, null)); for(MyAttributeValue v: val) { assertEquals(expectedUtf8, v.getIntegerValueUnderEncoding(ENCODING_URI_UTF_8)); assertEquals(expectedSha, v.getIntegerValueUnderEncoding(ENCODING_URI_SHA)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public long getLong() throws ValueFormatException { try { long convertedValue = factories().getLongFactory().create(value); return convertedValue; } catch (RuntimeException error) { throw createValueFormatException(long.class); } }### Assistant: @Test( expected = ValueFormatException.class ) public void shouldNotProvideLongForBoolean() throws Exception { value.getLong(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public double autocorrelate(double[] buffer, int lag) { if(lag > -1 && lag < buffer.length) { double result = 0.0; for (int i = lag; i < buffer.length; i++) { result += buffer[i] * buffer[i - lag]; } return result; } else { throw new IndexOutOfBoundsException(\"Lag parameter range is : -1 < lag < buffer size. Received [\" + lag + \"] for buffer size of [\" + buffer.length + \"]\"); } }### Assistant: @Test public void arrayOfTwosAutocorrelationReturnsAValueEqualToLengthMinusLagTimesFour() { for(int i = 0; i < arrayOfTwos.length; i++) { double autocorrelate = autocorrelation.autocorrelate(arrayOfTwos, i); assertThat(autocorrelate, is(equalTo((arrayOfTwos.length - i) * 4.0d))); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public Match matchesSatisfyingQuery(@Nonnull KeyExpression expression) { return matchesSatisfyingQuery(expression, null); }### Assistant: @Test public void testMatchWithFunctionExpression() { final QueryToKeyMatcher matcher = new QueryToKeyMatcher(queryField(\"f1\").equalsValue(\"hello!\")); Match match = matcher.matchesSatisfyingQuery(keyWithValue(function(\"nada\", concatenateFields(\"f1\", \"f2\", \"f3\")), 1)); assertEquals(MatchType.NO_MATCH, match.getType()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Span handleReceive(HttpServerRequest request) { Span span = nextSpan(defaultExtractor.extract(request), request); return handleStart(request, span); }### Assistant: @Test public void handleReceive_requestParserDoesntSeeNullWhenUnwrappedNull() { AtomicBoolean reachedAssertion = new AtomicBoolean(); init(httpTracingBuilder(tracingBuilder()) .serverParser(new HttpServerParser() { @Override public <Req> void request(HttpAdapter<Req, ?> adapter, Req req, SpanCustomizer span) { assertThat(req).isSameAs(NULL_SENTINEL); reachedAssertion.set(true); } })); handler.handleReceive(request); assertThat(reachedAssertion).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { String columnToAdd = request.getParameter(\"columnToAdd\"); HttpSession session = request.getSession(); String tableId = request.getParameter(\"table\"); PagedTable pt = SessionMethods.getResultsTable(session, tableId); if (columnToAdd != null && columnToAdd.length() != 0) { changeView(pt.getWebTable(), columnToAdd, request); } return new ForwardParameters(mapping.findForward(\"results\")) .addParameter(\"table\", tableId) .addParameter(\"page\", \"\" + pt.getPage()) .addParameter(\"trail\", request.getParameter(\"trail\")).forward(); }### Assistant: @Test public void testExecute() throws Exception { HttpServletRequest request = createMock(HttpServletRequest.class); HttpSession session = createMock(HttpSession.class); InterMineAPI api = createMock(InterMineAPI.class); ServletContext servletContext = createMock(ServletContext.class); WebTable webTable = createMock(WebTable.class); @SuppressWarnings(\"deprecation\") PagedTable table = new PagedTable(webTable); @SuppressWarnings(\"deprecation\") Map<String, PagedTable> tableMap = new HashMap<String, PagedTable>(); tableMap.put(\"y\", table); Model model = Model.getInstanceByName(\"testmodel\"); PathQuery pathQuery = new PathQuery(model); pathQuery.addView(\"Employee.name\"); ActionMapping mapping = new ActionMapping(); AddColumnAction action = new AddColumnAction(); List<Path> columnsPath = new ArrayList<Path>(); ForwardConfig conf = new ActionForward(); conf.setName(\"results\"); conf.setPath(\"thataway\"); mapping.addForwardConfig(conf); expect(request.getParameter(\"columnToAdd\")).andReturn(\"Employee.age\"); expect(request.getSession()).andReturn(session).times(2); expect(request.getParameter(\"table\")).andReturn(\"y\"); expect(request.getParameter(\"trail\")).andReturn(\"zoom\"); expect(session.getAttribute(\"TABLE_MAP\")).andReturn(tableMap); expect(webTable.getPathQuery()).andReturn(pathQuery).times(2); expect(session.getServletContext()).andReturn(servletContext); expect(servletContext.getAttribute(\"INTERMINE_API\")).andReturn(api); expect(api.getModel()).andReturn(model); expect(webTable.getColumnsPath()).andReturn(columnsPath); webTable.addColumns(Arrays.asList(new Path(model, \"Employee.age\"))); replay(request); replay(session); replay(webTable); replay(api); replay(servletContext); ActionForward fwd = action.execute(mapping, null, request, null); verify(request); verify(session); verify(webTable); verify(api); verify(servletContext); assertEquals(Arrays.asList(\"Employee.name\", \"Employee.age\"), pathQuery.getView()); assertEquals(\"thataway?table=y&page=0&trail=zoom\", fwd.getPath()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Vector viewColumn(int column) { if (column < 0 || column >= columnSize()) { throw new IndexException(column, columnSize()); } return matrix.viewColumn(column + offset[COL]).viewPart(offset[ROW], rowSize()); }### Assistant: @Test(expected = IndexException.class) public void testViewColumnIndexUnder() { test.viewColumn(-1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Textual cleanUpText(String text) { return new TextualImpl(text); }### Assistant: @Test public void testPassThrough() throws Exception { DictionaryServiceImpl service = new DictionaryServiceImpl(); String in = \"This is a test sentence.\"; Assert.assertEquals(in, service.cleanUpText(in).getText()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void multiply(Atom[] args) { if (args.length == 0) { err(\"multiply needs at least one argument\"); return; } for (Atom atom : args) { if (!atom.isFloat() && !atom.isInt()) { err(\"arguments to multiply must be numbers\"); return; } } for (int i = 0; i < seq.size(); i++) { seq.set(i, seq.get(i).multiply(args[i % args.length])); } onSeqChange(); outputseq(); }### Assistant: @Test public void testMultiply() { seqStub s = makeSeq(1, 2, 3); s.multiply(2); assertEquals(makeSeq(2, 4, 6), s); s.multiply(1); assertEquals(makeSeq(2, 4, 6), s); s.multiply(-1); assertEquals(makeSeq(-2, -4, -6), s); s.multiply(1, 2, 2); assertEquals(makeSeq(-2, -8, -12), s); s.multiply(1, 0, 1); assertEquals(makeSeq(-2, 0, -12), s); s.multiply(2.5f); assertEquals(makeFloatSeq(-2 * 2.5f, 0, -12 * 2.5f), s); s.set(new Atom[] { Atom.newAtom(1), Atom.newAtom(\"a\"), Atom.newAtom(2.5), Atom.newAtom(\"b\") }); s.multiply(2); assertEquals(Atom.newAtom(2), s.seq.get(0).toAtom()); assertEquals(Atom.newAtom(\"a\"), s.seq.get(1).toAtom()); assertEquals(Atom.newAtom(2.5 * 2), s.seq.get(2).toAtom()); assertEquals(Atom.newAtom(\"b\"), s.seq.get(3).toAtom()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object obj) { if (this == obj) { return true; } if (!super.equals(obj)) { return false; } if (getClass() != obj.getClass()) { return false; } DataProviderFrameworkMethod other = (DataProviderFrameworkMethod) obj; if (idx != other.idx) { return false; } if (nameFormat == null) { if (other.nameFormat != null) { return false; } } else if (!nameFormat.equals(other.nameFormat)) { return false; } if (!Arrays.equals(parameters, other.parameters)) { return false; } return true; }### Assistant: @Test public void testEqualsShouldReturnFalseForUnequalIndices() { final Object[] params1 = new Object[] { null, 'a', false }; final Object[] params2 = new Object[] { null, 'a', false }; DataProviderFrameworkMethod m1 = new DataProviderFrameworkMethod(method, 81, params1, \"%p[81]\"); DataProviderFrameworkMethod m2 = new DataProviderFrameworkMethod(method, 82, params2, \"%p[82]\"); boolean result = m1.equals(m2); assertThat(result).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void updateUsers(List<User> users) { for (User user : users) { storeOverwriteExisting(EntryFactory.userStructure(user)); } }### Assistant: @Test public void testUpdateUsers_shouldCreateUser() throws LdapInvalidAttributeValueException, NoSuchNodeException, MissingParentException { User user = createTestUser(); ldapService.updateUsers(Lists.newArrayList(user)); assertThat(ldapDao.exists(DnFactory.user(user)), is(true)); assertCredentialsCorrectlyStored(user); assertAttributesCorrectlyStored(user); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void generateClientLib(String discoveryDoc, String language, String languageVersion, String layout, File file) throws IOException { String boundary = getBoundary(); String form = createForm( discoveryDoc, language.toLowerCase(), languageVersion, layout, boundary); InputStream jar = postRequest(clientLibGenApiUrl, boundary, form); copyJar(jar, file); }### Assistant: @Test public void testGenerateClientLib() throws IOException { testGenerateClientLib(null); testGenerateClientLib(\"lv\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<String, IndexMapping> getIndexMappings(String indexExpression) { try { ClusterState state = clusterService.state(); String[] concreteIndices = resolveIndexExpression(state, new String[] {indexExpression}); return populateIndexMappings( state.metadata().findMappings(concreteIndices, ALL_TYPES, ALL_FIELDS)); } catch (IOException e) { throw new IllegalStateException( \"Failed to read mapping in cluster state for index pattern [\" + indexExpression + \"]\", e); } }### Assistant: @Test public void getIndexMappingsWithIOException() { String indexName = \"test\"; ClusterService clusterService = mockClusterService(indexName, new IOException()); ElasticsearchNodeClient client = new ElasticsearchNodeClient(clusterService, nodeClient); assertThrows(IllegalStateException.class, () -> client.getIndexMappings(indexName)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean matches(final Publisher p, final SubscriptionContext subscriptionContext) { if (!isPublisherValid(p)) { return false; } final boolean ok = (p.getResName().equals(subscriptionContext.getResName()) && p.getResId().equals(subscriptionContext.getResId()) && p.getSubidentifier() .equals(subscriptionContext.getSubidentifier())); return ok; }### Assistant: @Test public void matches_NullPublisher() { SubscriptionContext subscriptionContext = notificationWorld.getSubscriptionContext(); boolean result = notificationService.matches(null, subscriptionContext); assertFalse(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CompletionStage<ClusterComposition> getClusterComposition( Connection connection, DatabaseName databaseName, Bookmark bookmark ) { RoutingProcedureRunner runner; if ( supportsMultiDatabase( connection ) ) { runner = multiDatabaseRoutingProcedureRunner; } else { runner = routingProcedureRunner; } return runner.run( connection, databaseName, bookmark ) .thenApply( this::processRoutingResponse ); }### Assistant: @Test void shouldProtocolErrorWhenNoRecord() { RoutingProcedureRunner mockedRunner = newProcedureRunnerMock(); Connection connection = mock( Connection.class ); ClusterCompositionProvider provider = newClusterCompositionProvider( mockedRunner, connection ); RoutingProcedureResponse noRecordsResponse = newRoutingResponse(); when( mockedRunner.run( eq( connection ), any( DatabaseName.class ), any( InternalBookmark.class ) ) ) .thenReturn( completedFuture( noRecordsResponse ) ); ProtocolException error = assertThrows( ProtocolException.class, () -> await( provider.getClusterComposition( connection, defaultDatabase(), empty() ) ) ); assertThat( error.getMessage(), containsString( \"records received '0' is too few or too many.\" ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int read(ByteBuffer dst) throws IOException { if (this.remaining == -1) { int read = this.channel.read(dst); if (read == -1) { this.remaining = this.zeros; return readPadded(dst); } else { return read; } } else { return readPadded(dst); } }### Assistant: @Test public void testReadAllZeros() throws IOException { final byte[] b = new byte[] {1, 1, 1, 1, 1}; final int zeros = 2; final ReadableByteChannel channel = create(b, zeros); final ByteBuffer buffer = ByteBuffer.allocate(7); assertEquals(b.length, channel.read(buffer)); assertEquals(zeros, channel.read(buffer)); assertArrayEquals(copyOf(b, buffer.capacity()), buffer.array()); buffer.flip(); assertEquals(-1, channel.read(buffer)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int read() throws IOException { checkStream(); return (read(oneByte, 0, oneByte.length) == -1) ? -1 : (oneByte[0] & 0xff); }### Assistant: @Test public void testReadOneByte() throws IOException { for (int i = 0; i < TEST_STRING.length(); ++i) { assertThat(decompressorStream.read(), is((int) TEST_STRING.charAt(i))); } try { int ret = decompressorStream.read(); fail(\"Not reachable but got ret \" + ret); } catch (EOFException e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: String processListRequest(String domainName, AthenzObject objType, Integer limit, String skip, List<String> names) { switch (objType) { case ROLE: names.addAll(dbService.listRoles(domainName)); break; case POLICY: names.addAll(dbService.listPolicies(domainName)); break; case SERVICE_IDENTITY: names.addAll(dbService.listServiceIdentities(domainName)); break; default: return null; } int count = names.size(); if (skip != null) { for (int i = 0; i < count; i++) { String name = names.get(i); if (skip.equals(name)) { names.subList(0, i + 1).clear(); count = names.size(); break; } } } String next = null; if (hasExceededListLimit(limit, count)) { names.subList(limit, count).clear(); next = names.get(limit - 1); } return next; }### Assistant: @Test public void testProcessListRequestNoCollection() { String domainName = \"listrequest\"; List<String> adminUsers = new ArrayList<>(); adminUsers.add(\"user.user\"); zms.dbService.makeDomain(mockDomRsrcCtx, ZMSTestUtils.makeDomainObject(domainName, \"Test Domain\", \"org\", true, null, 0, null, 0), adminUsers, null, auditRef); Role role1 = createRoleObject(domainName, \"role1\", null, \"user.user\", null); zms.dbService.executePutRole(mockDomRsrcCtx, domainName, \"role1\", role1, auditRef, \"unittest\"); Role role2 = createRoleObject(domainName, \"role2\", null, \"user.user\", null); zms.dbService.executePutRole(mockDomRsrcCtx, domainName, \"role2\", role2, auditRef, \"unittest\"); Role role3 = createRoleObject(domainName, \"role3\", null, \"user.user\", null); zms.dbService.executePutRole(mockDomRsrcCtx, domainName, \"role3\", role3, auditRef, \"unittest\"); zms.dbService.executeDeletePolicy(mockDomRsrcCtx, domainName, \"admin\", auditRef, \"unittest\"); List<String> names = new ArrayList<>(); assertNull(zms.processListRequest(domainName, AthenzObject.POLICY, null, null, names)); assertEquals(names.size(), 0); zms.dbService.executeDeleteDomain(mockDomRsrcCtx, domainName, auditRef, \"unittest\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CloseableIterator<Index> getIndices( final Map<StatisticsId, InternalDataStatistics<SimpleFeature, ?, ?>> stats, final QueryConstraints query, final Index[] indices, final DataTypeAdapter<?> adapter, final Map<QueryHint, Object> hints) { return new CloseableIterator<Index>() { Index nextIdx = null; boolean done = false; int i = 0; @Override public boolean hasNext() { long min = Long.MAX_VALUE; Index bestIdx = null; while (!done && (i < indices.length)) { nextIdx = indices[i++]; if (nextIdx.getIndexStrategy().getOrderedDimensionDefinitions().length == 0) { continue; } final List<MultiDimensionalNumericData> constraints = query.getIndexConstraints(nextIdx); boolean containsRowRangeHistograms = false; final StatisticsQuery<NumericHistogram> query = VectorStatisticsQueryBuilder.newBuilder().factory().rowHistogram().indexName( nextIdx.getName()).build(); for (final StatisticsId statsId : stats.keySet()) { if (statsId.getType().equals(query.getStatsType()) && statsId.getExtendedId().startsWith(query.getExtendedId())) { containsRowRangeHistograms = true; break; } } if (!containsRowRangeHistograms) { LOGGER.warn( \"Best Match Heuristic requires statistic RowRangeHistogramStatistics for each index to properly choose an index.\"); } if (IndexUtils.isFullTableScan(constraints)) { if (bestIdx == null) { bestIdx = nextIdx; } } else { final int maxRangeDecomposition; if (hints.containsKey(QueryHint.MAX_RANGE_DECOMPOSITION)) { maxRangeDecomposition = (Integer) hints.get(QueryHint.MAX_RANGE_DECOMPOSITION); } else { LOGGER.warn( \"No max range decomposition hint was provided, this should be provided from the data store options\"); maxRangeDecomposition = 2000; } final QueryRanges ranges = DataStoreUtils.constraintsToQueryRanges( constraints, nextIdx, null, maxRangeDecomposition); final long temp = DataStoreUtils.cardinality(nextIdx, stats, ranges); if (temp < min) { bestIdx = nextIdx; min = temp; } } } nextIdx = bestIdx; done = true; return nextIdx != null; } @Override public Index next() throws NoSuchElementException { if (nextIdx == null) { throw new NoSuchElementException(); } final Index returnVal = nextIdx; nextIdx = null; return returnVal; } @Override public void remove() {} @Override public void close() {} }; }### Assistant: @Test public void testChooseSpatialTemporalWithStats() { final Index temporalindex = new SpatialTemporalIndexBuilder().createIndex(); final Index spatialIndex = new SpatialIndexBuilder().createIndex(); final RowRangeHistogramStatistics<SimpleFeature> rangeTempStats = new RowRangeHistogramStatistics<>(null, temporalindex.getName(), null); final RowRangeHistogramStatistics<SimpleFeature> rangeStats = new RowRangeHistogramStatistics<>(null, spatialIndex.getName(), null); final Map<StatisticsId, InternalDataStatistics<SimpleFeature, ?, ?>> statsMap = new HashMap<>(); statsMap.put( VectorStatisticsQueryBuilder.newBuilder().factory().rowHistogram().indexName( spatialIndex.getName()).build().getId(), rangeStats); statsMap.put( VectorStatisticsQueryBuilder.newBuilder().factory().rowHistogram().indexName( temporalindex.getName()).build().getId(), rangeTempStats); final ChooseBestMatchIndexQueryStrategy strategy = new ChooseBestMatchIndexQueryStrategy(); final ConstraintSet cs1 = new ConstraintSet(); cs1.addConstraint( LatitudeDefinition.class, new ConstraintData(new ConstrainedIndexValue(0.3, 0.5), true)); cs1.addConstraint( LongitudeDefinition.class, new ConstraintData(new ConstrainedIndexValue(0.4, 0.7), true)); final ConstraintSet cs2a = new ConstraintSet(); cs2a.addConstraint( TimeDefinition.class, new ConstraintData(new ConstrainedIndexValue(0.1, 0.2), true)); final ConstraintsByClass constraints = new ConstraintsByClass(Arrays.asList(cs2a)).merge(Collections.singletonList(cs1)); final BasicQueryByClass query = new BasicQueryByClass(constraints); final NumericIndexStrategy temporalIndexStrategy = new SpatialTemporalIndexBuilder().createIndex().getIndexStrategy(); final Random r = new Random(SEED); for (int i = 0; i < ROWS; i++) { final double x = r.nextDouble(); final double y = r.nextDouble(); final double t = r.nextDouble(); final InsertionIds id = temporalIndexStrategy.getInsertionIds( new BasicNumericDataset( new NumericData[] { new NumericValue(x), new NumericValue(y), new NumericValue(t)})); for (final SinglePartitionInsertionIds range : id.getPartitionKeys()) { rangeTempStats.entryIngested( null, new GeoWaveRowImpl( new GeoWaveKeyImpl( new byte[] {1}, (short) 1, range.getPartitionKey(), range.getSortKeys().get(0), 0), new GeoWaveValue[] {})); } } final Index index = new SpatialIndexBuilder().createIndex(); final NumericIndexStrategy indexStrategy = index.getIndexStrategy(); for (int i = 0; i < ROWS; i++) { final double x = r.nextDouble(); final double y = r.nextDouble(); final double t = r.nextDouble(); final InsertionIds id = indexStrategy.getInsertionIds( new BasicNumericDataset( new NumericData[] { new NumericValue(x), new NumericValue(y), new NumericValue(t)})); for (final SinglePartitionInsertionIds range : id.getPartitionKeys()) { rangeStats.entryIngested( null, new GeoWaveRowImpl( new GeoWaveKeyImpl( new byte[] {1}, (short) 1, range.getPartitionKey(), range.getSortKeys().get(0), 0), new GeoWaveValue[] {})); } } final Iterator<Index> it = getIndices(statsMap, query, strategy); assertTrue(it.hasNext()); assertEquals(temporalindex.getName(), it.next().getName()); assertFalse(it.hasNext()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final int size() { return size; }### Assistant: @Test public void testCardinality() { assertEquals(\"size\", 7, test.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void retractObject(final InternalFactHandle handle, final PropagationContext context, final InternalWorkingMemory workingMemory) { EntryPointId entryPoint = context.getEntryPoint(); EntryPointNode node = this.entryPoints.get( entryPoint ); ObjectTypeConf typeConf = ((WorkingMemoryEntryPoint) workingMemory.getWorkingMemoryEntryPoint( entryPoint.getEntryPointId() )).getObjectTypeConfigurationRegistry().getObjectTypeConf( entryPoint, handle.getObject() ); node.retractObject( handle, context, typeConf, workingMemory ); }### Assistant: @Test public void testRetractObject() throws Exception { StatefulKnowledgeSessionImpl ksession = (StatefulKnowledgeSessionImpl)kBase.newKieSession(); final Rete rete = kBase.getRete(); final ObjectTypeNode objectTypeNode = new ObjectTypeNode(1, this.entryPoint, new ClassObjectType(List.class), buildContext); objectTypeNode.attach(buildContext); final MockObjectSink sink1 = new MockObjectSink(); objectTypeNode.addObjectSink(sink1); final String string = \"String\"; final DefaultFactHandle h1 = new DefaultFactHandle(1, string); rete.assertObject(h1, pctxFactory.createPropagationContext(0, PropagationContext.Type.INSERTION, null, null, null), ksession); assertLength(0, sink1.getAsserted()); assertLength(0, sink1.getRetracted()); final List list = new ArrayList(); final DefaultFactHandle h2 = new DefaultFactHandle(1, list); rete.assertObject(h2, pctxFactory.createPropagationContext(0, PropagationContext.Type.INSERTION, null, null, null), ksession); rete.retractObject(h2, pctxFactory.createPropagationContext(0, PropagationContext.Type.INSERTION, null, null, null), ksession); ksession.fireAllRules(); final List retracted = sink1.getRetracted(); assertLength(1, retracted); final Object[] results = (Object[]) retracted.get(0); assertSame(list, ((DefaultFactHandle) results[0]).getObject()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] twoBytesFromInt(int n) { if(n > (2 << 15)-1) { throw new IllegalArgumentException(\"Nr can not fit in two bytes, was\" + n); } else if(n < 0) { throw new IllegalArgumentException(\"Nr can not be below zero, was\" + n); } else { ByteBuffer buff = ByteBuffer.allocate(Integer.BYTES); buff.putInt(n); return Arrays.copyOfRange(buff.array(),2,4); } }### Assistant: @Test public void testByteConvert() { byte[] bt = SignalUtil.twoBytesFromInt((2 << 15)-1); assertEquals(-1,bt[0]); assertEquals(-1,bt[1]); bt = SignalUtil.twoBytesFromInt(0); assertEquals(0,bt[0]); assertEquals(0,bt[1]); bt = SignalUtil.twoBytesFromInt(511); assertEquals(1,bt[0]); assertEquals(-1,bt[1]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute(EmptyCommandRequest request, CopyrightResponse response) throws Exception { response.setCopyrights(new ArrayList<CopyrightInfo>(copyrightMap.values())); }### Assistant: @Test public void testCopyright() throws Exception { CopyrightRequest request = new CopyrightRequest(); CopyrightResponse response = (CopyrightResponse) dispatcher.execute( CopyrightRequest.COMMAND, request, null, \"en\"); if (response.isError()) { response.getErrors().get(0).printStackTrace(); } Assert.assertFalse(response.isError()); List<CopyrightInfo> copyrights = response.getCopyrights(); Assert.assertNotNull(copyrights); Assert.assertTrue(copyrights.size() > 12); contains(\"Geomajas\", copyrights); contains(\"JTS\", copyrights); contains(\"Spring Framework\", copyrights); contains(\"Apache commons\", copyrights); contains(\"slf4j\", copyrights); contains(\"javax.annotation\", copyrights); contains(\"javax.validation\", copyrights); contains(\"GeoTools\", copyrights); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static HFCAClient createNewInstance(String url, Properties properties) throws MalformedURLException { return new HFCAClient(null, url, properties); }### Assistant: @Test public void testNewInstance() throws Exception { HFCAClient memberServices = HFCAClient.createNewInstance(\"http: Assert.assertNotNull(memberServices); Assert.assertSame(HFCAClient.class, memberServices.getClass()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Output getSource() { return (Output) this.getOutput(0); }### Assistant: @Test public void testGetSource() { final Operator<?> fixture = new OpImpl(0); final JsonStream result = fixture.getSource(); assertNotNull(result); assertEquals(0, result.getSource().getIndex()); assertSame(fixture.getOutput(0), result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public T2 get2() { return ((T2) values[2]); }### Assistant: @Test void get2Test() { assertEquals(2, (int) instance.get2()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting static String stateInfo(RunState state) { switch (state.state()) { case NEW: case PREPARE: case ERROR: case DONE: return format(\"tries:%d\", state.data().tries()); case SUBMITTED: case RUNNING: case FAILED: return format(\"tries:%d execId:%s\", state.data().tries(), state.data().executionId()); case TERMINATED: return format(\"tries:%d execId:%s exitCode:%s\", state.data().tries(), state.data().executionId(), state.data().lastExit().map( String::valueOf).orElse(\"-\")); case QUEUED: return format(\"tries:%d delayMs:%s\", state.data().tries(), state.data().retryDelayMillis()); default: return \"\"; } }### Assistant: @Test public void shouldReturnTriesAndExecId() { final StateData stateData = StateData.newBuilder().executionId(\"exec-1\").build(); assertThat(stateInfo(RunState.create(WORKFLOW_INSTANCE, SUBMITTED, stateData)), is(format(\"tries:0 execId:%s\", stateData.executionId()))); assertThat(stateInfo(RunState.create(WORKFLOW_INSTANCE, RUNNING, stateData)), is(format(\"tries:0 execId:%s\", stateData.executionId()))); assertThat(stateInfo(RunState.create(WORKFLOW_INSTANCE, FAILED, stateData)), is(format(\"tries:0 execId:%s\", stateData.executionId()))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CachingTilesContainer(TilesContainer originalContainer) { super(originalContainer); definitionsAttributeName = DEFAULT_DEFINITIONS_ATTRIBUTE_NAME; }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void testCachingTilesContainer() { Request request = createMock(Request.class); Map<String, Definition> definitions = createMock(Map.class); Map<String, Object> scope = createMock(Map.class); Definition definition = createMock(Definition.class); TilesContainer wrapped = createMock(TilesContainer.class); expect(request.getContext(\"request\")).andReturn(scope); expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn( definitions); expect(definitions.get(\"definition\")).andReturn(definition); replay(wrapped, request, definitions, scope, definition); CachingTilesContainer container = new CachingTilesContainer(wrapped, null); assertSame(definition, container.getDefinition(\"definition\", request)); verify(wrapped, request, definitions, scope, definition); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void write(int b) throws IOException { int expected = expectedBytesStream.read(); if (expected == -1) { throw new MismatchException(\"EOF reached in expectedBytesStream\"); } if (expected != b) { throw new MismatchException(\"Data does not match\"); } }### Assistant: @Test public void testWrite_PartialBuffer() throws IOException { for (int x = 0; x < data.length; x++) { outputStream.write(data, x, 1); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected String acquire(final String key, final String storeId, final String token, final long expiration) { final var query = Query.query(Criteria.where(\"_id\").is(key)); final var update = new Update() .setOnInsert(\"_id\", key) .setOnInsert(\"expireAt\", LocalDateTime.now().plus(expiration, ChronoUnit.MILLIS)) .setOnInsert(\"token\", token); final var options = new FindAndModifyOptions().upsert(true).returnNew(true); final var doc = mongoTemplate.findAndModify(query, update, options, LockDocument.class, storeId); final var locked = doc.getToken().equals(token); log.debug(\"Tried to acquire lock for key {} with token {} in store {}. Locked: {}\", key, token, storeId, locked); return locked ? token : null; }### Assistant: @Test public void shouldLock() { final var expectedExpiration = LocalDateTime.now().plus(1000, ChronoUnit.MILLIS); final var token = lock.acquire(Collections.singletonList(\"1\"), \"locks\", 1000); assertThat(token).isEqualTo(\"abc\"); final var document = mongoTemplate.findById(\"1\", LockDocument.class, \"locks\"); assertThat(document.getToken()).isEqualTo(\"abc\"); assertThat(document.getExpireAt()).isCloseTo(expectedExpiration, new TemporalUnitWithinOffset(100, ChronoUnit.MILLIS)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SimpleChromeCustomTabsIntentBuilder withCloseButtonIcon(Bitmap icon) { composers.add(new CloseButtonIconComposer(icon)); return this; }### Assistant: @Test public void givenCloseButtonIconIsSet_thenCloseButtonIconComposerIsAdded() { simpleChromeCustomTabsIntentBuilder.withCloseButtonIcon(ANY_ICON); verify(mockComposers).add(any(CloseButtonIconComposer.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ObjectType createObjectType(RequestHeader rh, CreateObjectTypeRequest request) throws AccessDeniedException, AuthenticationFailedException, InvalidArgumentException { return delegateProvider.get(ObjectTypeCreateDelegate.class).handle(request); }### Assistant: @Test public void testCreateObjectTypeCallsDelegate() throws Exception { ObjectTypeCreateDelegate delegate = mock(ObjectTypeCreateDelegate.class); when(delegateProvider.get(ObjectTypeCreateDelegate.class)).thenReturn(delegate); CreateObjectTypeRequest request = new CreateObjectTypeRequest(); service.createObjectType(RequestHeader.builder().build(), request); verify(delegate).handle(request); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Optional<Map<String, String>> convert(HttpRequest httpRequest) throws MalformedURLException, UnsupportedEncodingException { String requestUri = httpRequest.getUri(); Path requestUriPath = Paths.get(requestUri); if (!((requestUri.startsWith(baseUrl)) || requestUri.startsWith(\"/\"))) { throw new IllegalArgumentException(\"I am not responsible for this request URL: \" + requestUri); } if (requestUri.endsWith(LINK_INTERCEPTOR_MARKER)) { httpRequest.setUri(requestUri.split(LINK_INTERCEPTOR_MARKER)[0]); return Optional.empty(); } for (ApplicationActionConfiguration applicationActionConfiguration: applicationActionConfigurations) { ParameterConfiguration urlParameterConfiguration = applicationActionConfiguration .getWebDriverAction() .getParametersConfiguration() .get(Constants.PAGE); if (!urlParameterConfiguration.isExposed()) { Path expectedPath = Paths.get(baseUrl, urlParameterConfiguration.getValue()); Path relativeExpectedPath = Paths.get(urlParameterConfiguration.getValue()); if (expectedPath.equals(requestUriPath) || relativeExpectedPath.equals(requestUriPath)) { return Optional.of(ImmutableMap.of(EVENT, applicationActionConfiguration.getName())); } } else { String[] urlParts = requestUri.split(baseUrl); if (urlParts.length < 2) { return Optional.empty(); } String urlContinuation = urlParts[1]; return Optional.of(ImmutableMap.of( EVENT, applicationActionConfiguration.getName(), urlParameterConfiguration.getAlias(), urlContinuation )); } } return Optional.empty(); }### Assistant: @Test public void ifActionIsNotExposedButTheUrlIsDifferentThenEmptyOptionalIsReturned() throws MalformedURLException, UnsupportedEncodingException { ActionsFilter actionsFilter = createMocks(false); HttpRequest httpRequest = mock(HttpRequest.class); when(httpRequest.getUri()).thenReturn(URL_THAT_IS_NOT_EQUAL_TO_EXPECTED); RequestToPageLoadingEventConverter requestToPageLoadingEventConverter = new RequestToPageLoadingEventConverter(BASE_URL, actionsFilter); Optional<Map<String, String>> expected = Optional.empty(); Optional<Map<String, String>> actual = requestToPageLoadingEventConverter.convert(httpRequest); assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validateConfiguration(String configuration) throws FragmentEntryConfigurationException { validateConfigurationValues(configuration, null); }### Assistant: @Test public void testValidateConfigurationInvalidFieldColorPaletteExtraProperties() throws Exception { expectedException.expect(FragmentEntryConfigurationException.class); expectedException.expectMessage( new StringContains( \"/fieldSets/0/fields/0: extraneous key [extra] is not \" + \"permitted\")); _fragmentEntryValidatorImpl.validateConfiguration( _read( \"configuration_invalid_field_colorpalette_extra_properties.\" + \"json\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: FilterShapes(Predicate<Shape> predicate) { this.predicate = predicate .or(shape -> Prelude.isPreludeShape(shape.getId())); }### Assistant: @Test public void doesNotFilterListOrMapMembers() { ShapeId stringShapeId = ShapeId.from(\"ns.foo#StringShape\"); StringShape string = StringShape.builder().id(stringShapeId).build(); MemberShape listMember = MemberShape.builder().id(\"ns.foo#List$member\").target(stringShapeId).build(); ListShape list = ListShape.builder().id(\"ns.foo#List\").member(listMember).build(); MemberShape mapKey = MemberShape.builder().id(\"ns.foo#Map$key\").target(stringShapeId).build(); MemberShape mapValue = MemberShape.builder().id(\"ns.foo#Map$value\").target(stringShapeId).build(); MapShape map = MapShape.builder().id(\"ns.foo#Map\").key(mapKey).value(mapValue).build(); Model model = Model.builder() .addShapes(string, list, listMember, map, mapKey, mapValue) .build(); Model result = ModelTransformer.create().filterShapes(model, shape -> !shape.isMemberShape()); assertThat(result.shapes().count(), Matchers.is(6L)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean check(String s1, String s2) { validateInput(s1, s2); if (haveSameLength(s1, s2)) { String s1s1 = s1 + s1; return isSubstring(s1s1, s2); } return false; }### Assistant: @Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullInstancesAsSecondParameter() { isRotation.check(\"\", null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static double[] decode(final String geohash) { if ((geohash == null) || geohash.isEmpty()) { throw new IllegalArgumentException(\"Argument geohash should not be null.\"); } boolean even = true; double latitudeError = 90.0; double longitudeError = 180.0; double latitude; double longitude; final double[] latitudeInterval = { -90.0, 90.0 }; final double[] longitudeInterval = { -180.0, 180.0 }; for (int i = 0; i < geohash.length(); i++) { final int cd = DECODE_MAP.get(geohash.charAt(i)); for (int j = 0; j < bits.length; j++) { final int mask = bits[j]; if (even) { longitudeError /= 2; if ((cd & mask) != 0) { longitudeInterval[0] = (longitudeInterval[0] + longitudeInterval[1]) / 2D; } else { longitudeInterval[1] = (longitudeInterval[0] + longitudeInterval[1]) / 2D; } } else { latitudeError /= 2; if ((cd & mask) != 0) { latitudeInterval[0] = (latitudeInterval[0] + latitudeInterval[1]) / 2D; } else { latitudeInterval[1] = (latitudeInterval[0] + latitudeInterval[1]) / 2D; } } even = !even; } } latitude = (latitudeInterval[0] + latitudeInterval[1]) / 2D; longitude = (longitudeInterval[0] + longitudeInterval[1]) / 2D; return new double[] { latitude, longitude, latitudeError, longitudeError }; }### Assistant: @Test public void testDecode() { double[] actual; double[] expected; String geohash; expected = new double[2]; geohash = GeoHashExtensions.encode(53.5526394, 10.0067103); expected[0] = 53.55263943783939d; expected[1] = 10.006710458546877d; actual = GeoHashExtensions.decode(geohash); assertEquals(expected[0], actual[0]); assertEquals(expected[1], actual[1]); geohash = GeoHashExtensions.encode(30.0, -90.0); expected[0] = 29.999999972060323d; expected[1] = -90.00000016763806d; actual = GeoHashExtensions.decode(geohash); assertEquals(expected[0], actual[0]); assertEquals(expected[1], actual[1]); geohash = GeoHashExtensions.encode(51.4797, -0.0124); expected[0] = 51.47970006801188d; expected[1] = -0.01240001991391182d; actual = GeoHashExtensions.decode(geohash); assertEquals(expected[0], actual[0]); assertEquals(expected[1], actual[1]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public BeanDescription processJavaInput(InputStream in) throws ParseException { final BeanDescription descriptionToFill = new BeanDescription(); CompilationUnit cu = JavaParser.parse(in, \"UTF-8\"); (new VoidVisitorAdapter<Object>() { @Override public void visit(MethodDeclaration m, Object arg) { if (m.getAnnotations() != null) { log.debug(m.getName() + \":\"); String methodName = m.getName(); if (methodName != null && methodName.length() >= 4 && (methodName.startsWith(\"set\") || methodName.startsWith(\"get\"))) { String propName = methodName.substring(3, 4).toLowerCase() + methodName.substring(4); for (AnnotationExpr an : m.getAnnotations()) { log.debug(\" \" + an); String annoName = an.getName().toString(); PropertyDescription newProp = descriptionToFill.getProperty(propName); if (newProp == null) { newProp = new PropertyDescription(descriptionToFill, propName, m.getType().toString()); descriptionToFill.addProperty(newProp); } if (MapProperty.class.getSimpleName().equals(annoName)) { processMapPropertyAnnotation(descriptionToFill, newProp, an); } if (DisplayProperty.class.getSimpleName().equals(annoName)) { processDisplayPropertyAnnotation(descriptionToFill, newProp, an); } } } } if (m.getName().startsWith(\"get\")) { descriptionToFill.addGetter(m.getName()); } if (m.getName().startsWith(\"set\")) { descriptionToFill.addSetter(m.getName()); } super.visit(m, arg); } @Override public void visit(FieldDeclaration f, Object arg) { if (f.getVariables().size() > 0 && f.getAnnotations() != null) { log.debug(f.getVariables().get(0).toString() + \":\"); String fieldName = f.getVariables().get(0).getId().toString(); if (fieldName != null && fieldName.length() >= 1) { for (AnnotationExpr an : f.getAnnotations()) { log.debug(\" \" + an); String annoName = an.getName().toString(); if (MapProperty.class.getSimpleName().equals(annoName)) { PropertyDescription newProp = descriptionToFill.getProperty(fieldName); if (newProp == null) { newProp = new PropertyDescription(descriptionToFill, fieldName, f.getType().toString()); descriptionToFill.addProperty(newProp); } processMapPropertyAnnotation(descriptionToFill, newProp, an); } if (DisplayProperty.class.getSimpleName().equals(annoName)) { PropertyDescription newProp = descriptionToFill.getProperty(fieldName); if (newProp == null) { newProp = new PropertyDescription(descriptionToFill, fieldName, f.getType().toString()); descriptionToFill.addProperty(newProp); } processDisplayPropertyAnnotation(descriptionToFill, newProp, an); } } } } super.visit(f, arg); } private void processMapPropertyAnnotation(final BeanDescription descriptionToFill, PropertyDescription newProp, AnnotationExpr an) { newProp.setMapped(true); if (an instanceof NormalAnnotationExpr) { for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"profileSettings\".equals(pair.getName())) { if (pair.getValue() instanceof ArrayInitializerExpr) { ArrayInitializerExpr array = (ArrayInitializerExpr) pair.getValue(); for (Expression arrayexp : array.getValues()) { processMapPropertyProfileAnnotation(newProp, arrayexp); } } else { processMapPropertyProfileAnnotation(newProp, pair.getValue()); } } else if (\"ignore\".equals(pair.getName())) { newProp.setMapped(!Boolean.valueOf(pair.getValue().toString())); } } } } private void processMapPropertyProfileAnnotation(PropertyDescription newProp, Expression arrayexp) { log.debug(\" \" + arrayexp); String profileName = null; for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"profileName\".equals(innerpair.getName())) { profileName = ((StringLiteralExpr) innerpair.getValue()).getValue(); } } MapPropertyProfileDescription newProfile = newProp.getMapPropertyProfile(profileName); for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"deep\".equals(innerpair.getName())) { newProfile.setDeep(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"exclude\".equals(innerpair.getName())) { newProfile.setExcluded(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"include\".equals(innerpair.getName())) { newProfile.setIncluded(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"mandatory\".equals(innerpair.getName())) { newProfile.setMandatory(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"profileName\".equals(innerpair.getName())) { } else if (\"readonly\".equals(innerpair.getName())) { newProfile.setReadonly(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"targetPropertyName\".equals(innerpair.getName())) { newProfile.setTargetPropertyName(((StringLiteralExpr) innerpair.getValue()).getValue()); } else if (\"targetPropertyClassName\".equals(innerpair.getName())) { newProfile.setTargetPropertyClassName(((StringLiteralExpr) innerpair.getValue()).getValue()); } } } private void processDisplayPropertyAnnotation(final BeanDescription descriptionToFill, PropertyDescription newProp, AnnotationExpr an) { newProp.setDisplayed(true); if (an instanceof NormalAnnotationExpr) { for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"captionProp\".equals(pair.getName())) { newProp.setCaptionProp(((StringLiteralExpr) pair.getValue()).getValue()); } else if (\"converterClassName\".equals(pair.getName())) { newProp.setConverterClassName(((StringLiteralExpr) pair.getValue()).getValue()); descriptionToFill.addImport(createConverterImportString(newProp.getConverterClassName())); } else if (\"captionText\".equals(pair.getName())) { newProp.setCaptionText(((StringLiteralExpr) pair.getValue()).getValue()); } else if (\"profileSettings\".equals(pair.getName())) { if (pair.getValue() instanceof ArrayInitializerExpr) { ArrayInitializerExpr array = (ArrayInitializerExpr) pair.getValue(); for (Expression arrayexp : array.getValues()) { processDisplayPropertyProfileAnnotation(newProp, arrayexp); } } else { processDisplayPropertyProfileAnnotation(newProp, pair.getValue()); } } else if (\"ignore\".equals(pair.getName())) { newProp.setDisplayed(!Boolean.valueOf(pair.getValue().toString())); } else if (\"sortable\".equals(pair.getName())) { newProp.setSortable(Boolean.valueOf(pair.getValue().toString())); } } } } private void processDisplayPropertyProfileAnnotation(PropertyDescription newProp, Expression arrayexp) { log.debug(\" \" + arrayexp); String profileName = Constants.DEFAULT_DISPLAY_PROFILE; for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"profileName\".equals(innerpair.getName())) { profileName = ((StringLiteralExpr) innerpair.getValue()).getValue(); } } DisplayPropertyProfileDescription newProfile = newProp.getDisplayPropertyProfile(profileName); for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"customClassName\".equals(innerpair.getName())) { newProfile.setCustomClassName(((StringLiteralExpr) innerpair.getValue()).getValue()); } else if (\"customAuswahlAusListe\".equals(innerpair.getName())) { newProfile.setCustomAuswahlAusListe(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"customMultiAuswahlAusListe\".equals(innerpair.getName())) { newProfile.setCustomMultiAuswahlAusListe(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"customUnboxed\".equals(innerpair.getName())) { newProfile.setCustomUnboxed(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"exclude\".equals(innerpair.getName())) { newProfile.setExcluded(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"fieldType\".equals(innerpair.getName())) { newProfile.setFieldType(FieldType.valueOf(innerpair.getValue().toString().replace(\"FieldType.\", \"\"))); } else if (\"include\".equals(innerpair.getName())) { newProfile.setIncluded(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"order\".equals(innerpair.getName())) { newProfile.setOrder(Integer.parseInt(innerpair.getValue().toString())); } else if (\"profileName\".equals(innerpair.getName())) { } else if (\"readOnly\".equals(innerpair.getName())) { newProfile.setReadOnly(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"required\".equals(innerpair.getName())) { newProfile.setRequired(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"sectionName\".equals(innerpair.getName())) { newProfile.setSectionName(((StringLiteralExpr) innerpair.getValue()).getValue()); } else if (\"showInDetail\".equals(innerpair.getName())) { newProfile.setShowInDetail(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"showInTable\".equals(innerpair.getName())) { newProfile.setShowInTable(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"tableExpandRatio\".equals(innerpair.getName())) { newProfile.setTableExpandRatio(Float.parseFloat(innerpair.getValue().toString())); } else if (\"allowTextInput\".equals(innerpair.getName())) { newProfile.setAllowTextInput(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"useAsSummary\".equals(innerpair.getName())) { newProfile.setUseAsSummary(Boolean.valueOf(innerpair.getValue().toString())); } } } @Override public void visit(EnumConstantDeclaration c, Object arg) { log.debug(c.toString() + \":\"); String fieldName = c.getName(); if (fieldName != null && fieldName.length() >= 1) { EnumValueDescription newVal = descriptionToFill.getEnumValue(fieldName); if (newVal == null) { newVal = new EnumValueDescription(descriptionToFill, fieldName); descriptionToFill.addEnumValue(newVal); } if (c.getAnnotations() != null) { for (AnnotationExpr an : c.getAnnotations()) { log.debug(\" \" + an); String annoName = an.getName().toString(); if (DisplayEnum.class.getSimpleName().equals(annoName)) { processDisplayEnumAnnotation(descriptionToFill, newVal, an); } } } } } private void processDisplayEnumAnnotation(final BeanDescription descriptionToFill, EnumValueDescription newVal, AnnotationExpr an) { if (an instanceof NormalAnnotationExpr) { for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"captionProp\".equals(pair.getName())) { newVal.setCaptionProp(((StringLiteralExpr) pair.getValue()).getValue()); } else if (\"captionText\".equals(pair.getName())) { newVal.setCaptionText(((StringLiteralExpr) pair.getValue()).getValue()); } } } } @Override public void visit(ClassOrInterfaceDeclaration cls, Object arg) { if (!cls.isInterface()) { if (cls.getAnnotations() != null) { log.debug(\"(class):\"); descriptionToFill.setClassName(cls.getName()); for (AnnotationExpr an : cls.getAnnotations()) { log.debug(\" \" + an); String annoName = an.getName().toString(); if (MapBean.class.getSimpleName().equals(annoName)) { processMapBeanAnnotation(descriptionToFill, an); } if (DisplayBean.class.getSimpleName().equals(annoName)) { processDisplayBeanAnnotation(descriptionToFill, an); } if (ServiceBean.class.getSimpleName().equals(annoName)) { processServiceBeanAnnotation(descriptionToFill, an); } if (WrappedBean.class.getSimpleName().equals(annoName)) { processWrappedBeanAnnotation(descriptionToFill, an); } } } } super.visit(cls, arg); } private void processMapBeanAnnotation(final BeanDescription descriptionToFill, AnnotationExpr an) { descriptionToFill.setMapped(true); for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (an instanceof NormalAnnotationExpr) { if (\"ignore\".equals(pair.getName())) { descriptionToFill.setMapped(!Boolean.valueOf(pair.getValue().toString())); } else if (\"profiles\".equals(pair.getName())) { if (pair.getValue() instanceof ArrayInitializerExpr) { ArrayInitializerExpr array = (ArrayInitializerExpr) pair.getValue(); for (Expression arrayexp : array.getValues()) { processMapBeanProfileAnnotation(descriptionToFill, arrayexp); } } else { processMapBeanProfileAnnotation(descriptionToFill, pair.getValue()); } } } } } private void processMapBeanProfileAnnotation(final BeanDescription descriptionToFill, Expression arrayexp) { log.debug(\" \" + arrayexp); String profileName = null; for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"profileName\".equals(innerpair.getName())) { profileName = ((StringLiteralExpr) innerpair.getValue()).getValue(); } } MapProfileDescription newProfile = descriptionToFill.getMapProfile(profileName); for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"bidirectional\".equals(innerpair.getName())) { newProfile.setBidirectional(Boolean.valueOf(innerpair.getValue().toString())); } else if (\"profileName\".equals(innerpair.getName())) { } else if (\"target\".equals(innerpair.getName())) { newProfile.setTargetClassName(((ClassExpr) innerpair.getValue()).getType().toString()); } } } private void processDisplayBeanAnnotation(final BeanDescription descriptionToFill, AnnotationExpr an) { descriptionToFill.setDisplayed(true); if (an instanceof NormalAnnotationExpr) { descriptionToFill.getDisplayProfile(Constants.DEFAULT_DISPLAY_PROFILE); for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"ignore\".equals(pair.getName())) { descriptionToFill.setDisplayed(!Boolean.valueOf(pair.getValue().toString())); } else if (\"captionProp\".equals(pair.getName())) { descriptionToFill.setCaptionProp(((StringLiteralExpr) pair.getValue()).getValue()); } else if (\"captionText\".equals(pair.getName())) { descriptionToFill.setCaptionText(((StringLiteralExpr) pair.getValue()).getValue()); } else if (\"beanValidation\".equals(pair.getName())) { descriptionToFill.setBeanValidation(((BooleanLiteralExpr) pair.getValue()).getValue()); } else if (\"profiles\".equals(pair.getName())) { if (pair.getValue() instanceof ArrayInitializerExpr) { ArrayInitializerExpr array = (ArrayInitializerExpr) pair.getValue(); for (Expression arrayexp : array.getValues()) { processDisplayBeanProfileAnnotation(descriptionToFill, arrayexp); } } else { processDisplayBeanProfileAnnotation(descriptionToFill, pair.getValue()); } } } } } private void processDisplayBeanProfileAnnotation(final BeanDescription descriptionToFill, Expression arrayexp) { log.debug(\" \" + arrayexp); String profileName = null; for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"profileName\".equals(innerpair.getName())) { profileName = ((StringLiteralExpr) innerpair.getValue()).getValue(); } } DisplayProfileDescription newProfile = descriptionToFill.getDisplayProfile(profileName); for (MemberValuePair innerpair : ((NormalAnnotationExpr) arrayexp).getPairs()) { if (\"profileCaptionText\".equals(innerpair.getName())) { newProfile.setProfileCaptionText(((StringLiteralExpr) innerpair.getValue()).getValue()); } else if (\"profileCaptionProp\".equals(innerpair.getName())) { newProfile.setProfileCaptionProp(((StringLiteralExpr) innerpair.getValue()).getValue()); } else if (\"order\".equals(innerpair.getName())) { newProfile.setOrder(Integer.parseInt(innerpair.getValue().toString())); } else if (\"profileName\".equals(innerpair.getName())) { } else if (\"showOnFirstPage\".equals(innerpair.getName())) { newProfile.setShowOnFirstPage(Boolean.valueOf(innerpair.getValue().toString())); } } } private void processServiceBeanAnnotation(final BeanDescription descriptionToFill, AnnotationExpr an) { descriptionToFill.setService(true); if (an instanceof NormalAnnotationExpr) { for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"ignore\".equals(pair.getName())) { descriptionToFill.setService(!Boolean.valueOf(pair.getValue().toString())); } } } } private void processWrappedBeanAnnotation(final BeanDescription descriptionToFill, AnnotationExpr an) { descriptionToFill.setWrapped(true); if (an instanceof NormalAnnotationExpr) { for (MemberValuePair pair : ((NormalAnnotationExpr) an).getPairs()) { if (\"ignore\".equals(pair.getName())) { descriptionToFill.setWrapped(!Boolean.valueOf(pair.getValue().toString())); } } } } @Override public void visit(ImportDeclaration imp, Object arg) { if (!imp.toString().contains(\"de.akquinet.engineering.vaadinator.annotations.\")) { descriptionToFill.addImport(imp.toString().trim()); } super.visit(imp, arg); } @Override public void visit(ConstructorDeclaration n, Object arg) { ConstructorDescription newCons = new ConstructorDescription(descriptionToFill); if (n.getParameters() != null) { for (Parameter p : n.getParameters()) { newCons.addParam(new ConstructorParamDescription(newCons, p.getId().getName(), p.getType().toString())); } } descriptionToFill.addConstructor(newCons); super.visit(n, arg); } @Override public void visit(EnumDeclaration n, Object arg) { log.debug(\"(enum):\"); descriptionToFill.setClassName(n.getName()); descriptionToFill.setEnumeration(true); super.visit(n, arg); } }).visit(cu, null); return descriptionToFill; }### Assistant: @Test public void testSummaryMethod () throws ParseException { BeanDescription desc = daoUnderTest.processJavaInput(getClass().getResourceAsStream(\"Address.javainput\")); assertEquals(\"getName\", desc.getDisplayProfile(Constants.DEFAULT_DISPLAY_PROFILE).getSummaryMethod()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void validateSignatureHash(HashType hash) throws GeneralSecurityException { switch (hash) { case SHA256: case SHA384: case SHA512: return; default: break; } throw new GeneralSecurityException(\"Unsupported hash: \" + hash.name()); }### Assistant: @Test public void testValidateSignatureHash() throws Exception { try { Validators.validateSignatureHash(HashType.SHA256); Validators.validateSignatureHash(HashType.SHA512); } catch (GeneralSecurityException e) { fail(\"Valid signature algorithm should work \" + e); } try { Validators.validateSignatureHash(HashType.SHA1); fail(\"Expected GeneralSecurityException\"); } catch (GeneralSecurityException e) { TestUtil.assertExceptionContains(e, \"Unsupported hash: SHA1\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FEELFnResult<Boolean> invoke(@ParameterName( \"list\" ) List list) { if ( list == null ) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"cannot be null\")); } boolean result = true; boolean containsNull = false; for ( final Object element : list ) { if (element != null && !(element instanceof Boolean)) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"an element in the list is not a Boolean\")); } else { if (element != null) { result &= (Boolean) element; } else if (!containsNull) { containsNull = true; } } } if (containsNull && result) { return FEELFnResult.ofResult( null ); } else { return FEELFnResult.ofResult( result ); } }### Assistant: @Test public void invokeBooleanParamFalse() { FunctionTestUtil.assertResult(allFunction.invoke(false), false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validate(EbXMLProvideAndRegisterDocumentSetRequest request, ValidationProfile profile) { notNull(request, \"request cannot be null\"); submitObjectsRequestValidator.validate(request, profile); validateDocuments(request); }### Assistant: @Test public void testValidateGoodCase() { validator.validate(transformer.toEbXML(request), profile); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ReactMethod public String getAppToken() { String appToken = \"\"; try { appToken = Instabug.getAppToken(); } catch (Exception e) { e.printStackTrace(); } return appToken; }### Assistant: @Test public void given$getAppToken_whenQuery_thenShouldCallNativeApiAndReturnValue() { PowerMockito.mockStatic(Instabug.class); PowerMockito.when(Instabug.getAppToken()).thenReturn(\"APP_TOKEN\"); String appToken = rnModule.getAppToken(); PowerMockito.verifyStatic(VerificationModeFactory.times(1)); Instabug.getAppToken(); Assert.assertEquals(\"APP_TOKEN\", appToken); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void clearThreadPool() { for (ExecutorService pool:threadPool) { pool.shutdown(); } for (ExecutorService pool:threadPool) { try { pool.awaitTermination(10, TimeUnit.SECONDS); } catch (InterruptedException e) { e.printStackTrace(); } } threadPool.clear(); }### Assistant: @Test public void testClearThreadPool() { ThreadsEngine.setNumberOfThreads(numThreads); ThreadsEngine.clearThreadPool(); assertEquals(\"ThreadsEngine was not shutdown properly.\", 0, ThreadsEngine.getNumberOfThreads()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<PatientProfileDto> findPatientEntries(int pageNumber, int pageSize) { List<Patient> patientList = patientRepository.findAll( new PageRequest(pageNumber, pageSize)).getContent(); List<PatientProfileDto> patientDtoList = new ArrayList<PatientProfileDto>(); for (Patient patient : patientList) { PatientProfileDto patientProfileDto = modelMapper.map(patient, PatientProfileDto.class); patientDtoList.add(patientProfileDto); } return patientDtoList; }### Assistant: @Test public void testFindPatientEntries() { final int pageNumber = 1; final int pageSize = 9; final Patient patient1 = mock(Patient.class); final Patient patient2 = mock(Patient.class); List<Patient> patientList = new ArrayList<Patient>(); patientList.add(patient1); patientList.add(patient2); int numberOfPatients = patientList.size(); Page<Patient> patientPage = mock(Page.class); when(patientPage.getContent()).thenReturn(patientList); ArgumentMatcher<PageRequest> pageRequestArgumentMatcher = new ArgumentMatcher<PageRequest>() { @Override public boolean matches(Object argument) { PageRequest pageRequest = (PageRequest) argument; if (pageRequest == null) { return false; } if (pageRequest.getPageSize() != pageSize) { return false; } if (pageRequest.getPageNumber() != pageNumber) { return false; } return true; } }; when(patientRepository.findAll(argThat(pageRequestArgumentMatcher))) .thenReturn(patientPage); final PatientProfileDto expectedPatientProfileDto1 = mock(PatientProfileDto.class); when(modelMapper.map(patient1, PatientProfileDto.class)).thenReturn( expectedPatientProfileDto1); final PatientProfileDto expectedPatientProfileDto2 = mock(PatientProfileDto.class); when(modelMapper.map(patient2, PatientProfileDto.class)).thenReturn( expectedPatientProfileDto2); List<PatientProfileDto> result = sut.findPatientEntries(pageNumber, pageSize); assertEquals(numberOfPatients, result.size()); for (PatientProfileDto patientProfileDto : result) { assertTrue(patientProfileDto == expectedPatientProfileDto1 || patientProfileDto == expectedPatientProfileDto2); } assertTrue(result.get(0) != result.get(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String signClaims(final String jsonResName) throws Exception { return signClaims(jsonResName, SignatureAlgorithm.RS256); }### Assistant: @Test(groups = TCKConstants.TEST_GROUP_UTILS, description = \"Illustrate validation of a JWT\", expectedExceptions = {InvalidJwtException.class}) public void testSignedByRSKeyVerifiedByECKey() throws Exception { String token = TokenUtils.signClaims(\"/Token1.json\", SignatureAlgorithm.RS256); validateToken(token, SignatureAlgorithm.ES256, null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> void save(Property<? extends T> property, Preferences preferences, Function<? super T, String> serializer) { T value = property.getValue(); if (value == null) { throw new IllegalArgumentException(\"The property must have a value\"); } preferences.put(property.getName(), serializer.apply(value)); }### Assistant: @Test public void testSaveDouble() { String name = \"double\"; double value = Double.MAX_VALUE; DoubleProperty property = new SimpleDoubleProperty(null, name, value); PreferencesUtils.save(property, preferences); double saved = preferences.getDouble(name, -1); assertEquals(value, saved); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final PerformResult perform(File transformedAppFolder, TransformationContext transformationContext) throws TransformationUtilityException { PerformResult performResult = super.perform(transformedAppFolder, transformationContext); if (readFile != null) { readFile.deleteOnExit(); } return performResult; }### Assistant: @Test public void performTest() throws IOException { TransformationOperation transformationOperation = getNewTestTransformationOperation().relative(\"pom.xml\"); assertFalse(transformationOperation.hasBeenPerformed()); PerformResult performResult = transformationOperation.perform(transformedAppFolder, transformationContext); assertTrue(transformationOperation.hasBeenPerformed()); assertNotNull(performResult); assertEquals(performResult.getType(), PerformResult.Type.EXECUTION_RESULT); assertEquals(performResult.getExecutionResult().getType(), TOExecutionResult.Type.NO_OP); TOExecutionResult executionResult = (TOExecutionResult) performResult.getExecutionResult(); assertFalse(executionResult.isExceptionType()); assertEquals(executionResult.getDetails(), \"nothing to be changed\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Integer next() { if (!hasNext) { throw new NoSuchElementException(); } return nextInt(); }### Assistant: @Test void nextIntAfterNext() { instance.next(); assertThrows(NoSuchElementException.class, instance::nextInt); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<List<BinaryNode>> calculate(BinaryNode<Integer> root) { if (root == null) { throw new IllegalArgumentException(\"You can't pass a null instance of BinaryNode\"); } return calculatePathToLeafs(root, new LinkedList<BinaryNode>()); }### Assistant: @Test public void shouldReturnTwoListsIfTheTreeContainsTwoLeafs() { BinaryNode<Integer> root = new BinaryNode<Integer>(1); BinaryNode<Integer> n2 = new BinaryNode<Integer>(2); BinaryNode<Integer> n3 = new BinaryNode<Integer>(3); root.setLeft(n2); root.setRight(n3); List<List<BinaryNode>> paths = pathToEveryLeaf.calculate(root); assertEquals(2, paths.size()); assertPathTo(paths.get(0), root, n2); assertPathTo(paths.get(1), root, n3); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CompletionStage<Void> beginTransaction( Connection connection, Bookmark bookmark, TransactionConfig config ) { try { verifyDatabaseNameBeforeTransaction( connection.databaseName() ); } catch ( Exception error ) { return Futures.failedFuture( error ); } BeginMessage beginMessage = new BeginMessage( bookmark, config, connection.databaseName(), connection.mode() ); if ( bookmark.isEmpty() ) { connection.write( beginMessage, NoOpResponseHandler.INSTANCE ); return Futures.completedWithNull(); } else { CompletableFuture<Void> beginTxFuture = new CompletableFuture<>(); connection.writeAndFlush( beginMessage, new BeginTxResponseHandler( beginTxFuture ) ); return beginTxFuture; } }### Assistant: @Test void shouldBeginTransactionWithoutBookmark() { Connection connection = connectionMock( protocol ); CompletionStage<Void> stage = protocol.beginTransaction( connection, InternalBookmark.empty(), TransactionConfig.empty() ); verify( connection ).write( new BeginMessage( InternalBookmark.empty(), TransactionConfig.empty(), defaultDatabase(), WRITE ), NoOpResponseHandler.INSTANCE ); assertNull( await( stage ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CoapMessage decode(ByteBuffer input, Void context) { LOG.debug(\"decode\"); if (input.remaining() <= 0) { LOG.debug(\"nothing to decode\"); return null; } int byte0 = input.get() & 0xFF; int version = (byte0 >> 6) & 0x3; MessageType type = MessageType.fromCode((byte0 >> 4) & 0x3); byte[] token = new byte[byte0 & 0xF]; int code = input.get() & 0xFF; int id = input.getShort() & 0xFFFF; input.get(token); int optionCode = 0; byte[] payload = EMPTY_PAYLOAD; List<CoapOption> options = new ArrayList<CoapOption>(); while (input.hasRemaining()) { int next = input.get() & 0xFF; if (next == 0xFF) { payload = new byte[input.remaining()]; input.get(payload); break; } else { int optionDeltaQuartet = (next >> 4) & 0xF; optionCode += optionFromQuartet(optionDeltaQuartet, input); int optionLenQuartet = next & 0x0F; int optionLength = optionFromQuartet(optionLenQuartet, input); CoapOptionType optType = CoapOptionType.fromCode(optionCode); if (optType == null) { throw new ProtocolDecoderException(\"unknown option code : \" + optionCode); } byte[] optionValue = new byte[optionLength]; input.get(optionValue); options.add(new CoapOption(optType, optionValue)); } } if (input.hasRemaining()) { throw new ProtocolDecoderException(\"trailling \" + input.remaining() + \" bytes in the UDP datagram\"); } return new CoapMessage(version, type, code, id, token, options.toArray(EMPTY_OPTION), payload); }### Assistant: @Test public void payload_and_one_option() { Assert.assertEquals(PAYLOAD_AND_ONE_OPTION, decoder.decode(ByteBufferDumper.fromHexString(PAYLOAD_AND_ONE_OPTION_HEX), null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] hexStringToByteArray(String hexString) { if (hexString == null) { return null; } int length = hexString.length(); byte[] bytes = new byte[length / 2]; for (int i = 0; i < length; i += 2) { bytes[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4) + Character.digit(hexString.charAt(i + 1), 16)); } return bytes; }### Assistant: @Test public void hexStringToByteArrayShouldReturnCorrectByteArray() { assertThat(Strings.hexStringToByteArray(null)).isNull(); assertThat(Strings.hexStringToByteArray(\"00\")).isEqualTo(new byte[]{ 0 }); assertThat(Strings.hexStringToByteArray(\"010203\")).isEqualTo(new byte[]{ 1, 2, 3 }); assertThat(Strings.hexStringToByteArray(\"CAFEBABE\")).isEqualTo(new byte[]{ -54, -2, -70, -66 }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Set<Resource> getResources(Request request, Predicate predicate) throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException { Set<String> requestedIds = getRequestPropertyIds(request, predicate); Set<Resource> resources = new HashSet<Resource>(); Set<Map<String, Object>> propertyMaps; if (predicate == null) { propertyMaps = Collections.singleton(Collections.<String, Object>emptyMap()); } else { propertyMaps = getPropertyMaps(predicate); } if (propertyMaps != null) { for (Map<String, Object> propertyMap : propertyMaps) { Object object = propertyMap.get(PERMISSION_ID_PROPERTY_ID); Collection<RoleAuthorizationEntity> authorizationEntities; Integer permissionId; if (object instanceof String) { try { permissionId = Integer.valueOf((String) object); } catch (NumberFormatException e) { LOG.warn(PERMISSION_ID_PROPERTY_ID + \" is not a valid integer value\", e); throw new NoSuchResourceException(\"The requested resource doesn't exist: Authorization not found, \" + predicate, e); } } else if (object instanceof Number) { permissionId = ((Number) object).intValue(); } else { permissionId = null; } if (permissionId == null) { authorizationEntities = roleAuthorizationDAO.findAll(); } else { PermissionEntity permissionEntity = permissionDAO.findById(permissionId); if (permissionEntity == null) { authorizationEntities = null; } else { authorizationEntities = permissionEntity.getAuthorizations(); } } if (authorizationEntities != null) { String authorizationId = (String) propertyMap.get(AUTHORIZATION_ID_PROPERTY_ID); if (!StringUtils.isEmpty(authorizationId)) { Iterator<RoleAuthorizationEntity> iterator = authorizationEntities.iterator(); while (iterator.hasNext()) { if (!authorizationId.equals(iterator.next().getAuthorizationId())) { iterator.remove(); } } } for (RoleAuthorizationEntity entity : authorizationEntities) { resources.add(toResource(permissionId, entity, requestedIds)); } } } } return resources; }### Assistant: @Test public void testGetResourcesForPermission() throws Exception { RoleAuthorizationEntity roleAuthorizationEntity = createNiceMock(RoleAuthorizationEntity.class); expect(roleAuthorizationEntity.getAuthorizationId()).andReturn(\"TEST.DO_SOMETHING\").once(); expect(roleAuthorizationEntity.getAuthorizationName()).andReturn(\"Do Something\").once(); List<RoleAuthorizationEntity> authorizationEntities = new ArrayList<RoleAuthorizationEntity>(); authorizationEntities.add(roleAuthorizationEntity); PermissionEntity permissionEntry = createStrictMock(PermissionEntity.class); expect(permissionEntry.getAuthorizations()).andReturn(authorizationEntities).once(); PermissionDAO permissionDAO = injector.getInstance(PermissionDAO.class); expect(permissionDAO.findById(1)).andReturn(permissionEntry).once(); replayAll(); AmbariManagementController managementController = injector.getInstance(AmbariManagementController.class); RoleAuthorizationResourceProvider provider = new RoleAuthorizationResourceProvider(managementController); Predicate predicate = new PredicateBuilder() .property(RoleAuthorizationResourceProvider.PERMISSION_ID_PROPERTY_ID).equals(\"1\") .toPredicate(); Set<Resource> resources = provider.getResources(PropertyHelper.getReadRequest(), predicate); Assert.assertEquals(1, resources.size()); Resource resource = resources.iterator().next(); Assert.assertEquals(\"TEST.DO_SOMETHING\", resource.getPropertyValue(RoleAuthorizationResourceProvider.AUTHORIZATION_ID_PROPERTY_ID)); Assert.assertEquals(\"Do Something\", resource.getPropertyValue(RoleAuthorizationResourceProvider.AUTHORIZATION_NAME_PROPERTY_ID)); Assert.assertEquals(1, resource.getPropertyValue(RoleAuthorizationResourceProvider.PERMISSION_ID_PROPERTY_ID)); verifyAll(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TargetConfigurationResult validateTargetConfig(Map<String, Object> properties) { Map<String, String> stringValuesConfig = new HashMap<String, String>(properties.size()); for (Map.Entry<String, Object> propertyEntry : properties.entrySet()) { stringValuesConfig.put(propertyEntry.getKey(), propertyEntry.getValue().toString()); } try { for (String property : getSetOfDefaultNeededPropertyNames()) { getDispatchProperty(stringValuesConfig, property); } SnmpVersion snmpVersion = getSnmpVersion(stringValuesConfig); switch (snmpVersion) { case SNMPv3: getDispatchProperty(stringValuesConfig, SECURITY_USERNAME_PROPERTY); TrapSecurity securityLevel = getSecurityLevel(stringValuesConfig); switch (securityLevel) { case AUTH_PRIV: getDispatchProperty(stringValuesConfig, SECURITY_PRIV_PASSPHRASE_PROPERTY); getDispatchProperty(stringValuesConfig, SECURITY_AUTH_PASSPHRASE_PROPERTY); break; case AUTH_NOPRIV: getDispatchProperty(stringValuesConfig, SECURITY_AUTH_PASSPHRASE_PROPERTY); break; } break; case SNMPv2c: case SNMPv1: getDispatchProperty(stringValuesConfig, COMMUNITY_PROPERTY); break; } } catch (InvalidSnmpConfigurationException ex) { return TargetConfigurationResult.invalid(ex.getMessage()); } return TargetConfigurationResult.valid(); }### Assistant: @Test public void testValidateAlertValidation_SNMPv2c() throws Exception { Map<String, Object> properties = new HashMap<String, Object>(); properties.put(SNMPDispatcher.SUBJECT_OID_PROPERTY, \"1\"); properties.put(SNMPDispatcher.BODY_OID_PROPERTY, \"2\"); properties.put(SNMPDispatcher.PORT_PROPERTY, \"162\"); properties.put(SNMPDispatcher.SNMP_VERSION_PROPERTY, \"SNMPv2c\"); properties.put(SNMPDispatcher.TRAP_OID_PROPERTY, \"1.3.6.1.6.3.1.1.5.4\"); properties.put(SNMPDispatcher.COMMUNITY_PROPERTY, \"public\"); NotificationDispatcher dispatcher = new SNMPDispatcher(DEFAULT_SNMP_PORT); TargetConfigurationResult configValidationResult = dispatcher.validateTargetConfig(properties); assertEquals(TargetConfigurationResult.Status.VALID, configValidationResult.getStatus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected List<FilterMapping> getFilterMappings(FilterMap fmap, String dm, String filterClass) { String[] urls = fmap.getURLPatterns(); String[] servlets = fmap.getServletNames(); List<FilterMapping> results = new ArrayList<>(urls.length + servlets.length); addFilterMapping(fmap.getFilterName(), dm, filterClass, urls, results, FilterMapType.URL); addFilterMapping(fmap.getFilterName(), dm, filterClass, servlets, results, FilterMapType.SERVLET_NAME); return results; }### Assistant: @Test public void filterMappings() { final Tomcat90ContainerAdapter adapter = new Tomcat90ContainerAdapter(); FilterMap map = new FilterMap(); map.addServletName(\"psi-probe\"); map.addURLPattern(\"/psi-probe\"); assertEquals(2, adapter.getFilterMappings(map, \"dispatcherMap\", \"filterClass\").size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void processResults(List<String> skippedRepos, List<IOException> exceptions, Logger logger) throws IOException { if (!skippedRepos.isEmpty()) { logger.info(REPOS_SKIPPED_MESSAGE, skippedRepos); } if (!exceptions.isEmpty()) { throw new IOException(String.format(\"There were %s errors with changing Dockerfiles.\", exceptions.size())); } }### Assistant: @Test public void testProcessResultsHasNothingToReport() throws IOException { Logger mockLogger = mock(Logger.class); ResultsProcessor.processResults(new ArrayList<>(), new ArrayList<>(), mockLogger); verify(mockLogger, times(0)).info(any(), anyList()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> removeApproleFromSvcAcc(UserDetails userDetails, String token, ServiceAccountApprole serviceAccountApprole) { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove Approle from Service Account\"). put(LogMessage.MESSAGE, String.format (\"Trying to remove approle from Service Account [%s]\", serviceAccountApprole.getApprolename())). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); if (!userDetails.isAdmin()) { token = tokenUtils.getSelfServiceToken(); } if (serviceAccountApprole.getAccess().equalsIgnoreCase(\"reset\")) { serviceAccountApprole.setAccess(TVaultConstants.WRITE_POLICY); } String approleName = serviceAccountApprole.getApprolename(); String svcAccName = serviceAccountApprole.getSvcAccName(); String access = serviceAccountApprole.getAccess(); if (serviceAccountApprole.getApprolename().equals(TVaultConstants.SELF_SERVICE_APPROLE_NAME)) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Access denied: no permission to remove this AppRole to any Service Account\\\"]}\"); } approleName = (approleName !=null) ? approleName.toLowerCase() : approleName; access = (access != null) ? access.toLowerCase(): access; if(StringUtils.isEmpty(access)){ return ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).body(\"{\\\"errors\\\":[\\\"Incorrect access. Valid values are read, reset, deny \\\"]}\"); } boolean isAuthorized = hasAddOrRemovePermission(userDetails, svcAccName, token); if (isAuthorized) { if (!ifInitialPwdReset(token, userDetails, serviceAccountApprole.getSvcAccName())) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove Approle from ServiceAccount\"). put(LogMessage.MESSAGE, \"Failed to remove approle permission from Service account. Initial password reset is pending for this Service Account.\"). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Failed to remove approle permission from Service account. Initial password reset is pending for this Service Account. Please reset the password and try again.\\\"]}\"); } String r_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.READ_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String w_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.WRITE_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String d_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.DENY_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String o_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.SUDO_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove approle from Service Account\"). put(LogMessage.MESSAGE, String.format (\"Policies are, read - [%s], write - [%s], deny -[%s], owner - [%s]\", r_policy, w_policy, d_policy, o_policy)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); String policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(access)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); Response roleResponse = reqProcessor.process(\"/auth/approle/role/read\",\"{\\\"role_name\\\":\\\"\"+approleName+\"\\\"}\",token); String responseJson=\"\"; List<String> policies = new ArrayList<>(); List<String> currentpolicies = new ArrayList<>(); if(HttpStatus.OK.equals(roleResponse.getHttpstatus())){ responseJson = roleResponse.getResponse(); ObjectMapper objMapper = new ObjectMapper(); try { JsonNode policiesArry = objMapper.readTree(responseJson).get(\"data\").get(\"policies\"); if (null != policiesArry) { for (JsonNode policyNode : policiesArry) { currentpolicies.add(policyNode.asText()); } } } catch (IOException e) { log.error(e); } policies.addAll(currentpolicies); policies.remove(r_policy); policies.remove(w_policy); policies.remove(d_policy); } String policiesString = org.apache.commons.lang3.StringUtils.join(policies, \",\"); String currentpoliciesString = org.apache.commons.lang3.StringUtils.join(currentpolicies, \",\"); log.info(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AppRole from Service account\"). put(LogMessage.MESSAGE, \"Remove approle from Service account - policy :\" + policiesString + \" is being configured\" ). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); Response approleControllerResp = appRoleService.configureApprole(approleName,policiesString,token); if(approleControllerResp.getHttpstatus().equals(HttpStatus.NO_CONTENT) || approleControllerResp.getHttpstatus().equals(HttpStatus.OK)){ String path = new StringBuffer(TVaultConstants.SVC_ACC_ROLES_PATH).append(svcAccName).toString(); Map<String,String> params = new HashMap<String,String>(); params.put(\"type\", \"app-roles\"); params.put(\"name\",approleName); params.put(\"path\",path); params.put(\"access\",\"delete\"); Response metadataResponse = ControllerUtil.updateMetadata(params,token); if(metadataResponse !=null && (HttpStatus.NO_CONTENT.equals(metadataResponse.getHttpstatus()) || HttpStatus.OK.equals(metadataResponse.getHttpstatus()))){ log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AppRole from Service Account\"). put(LogMessage.MESSAGE, \"Approle is successfully removed from Service Account\"). put(LogMessage.STATUS, metadataResponse.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"Approle is successfully removed from Service Account\\\"]}\"); } approleControllerResp = appRoleService.configureApprole(approleName,currentpoliciesString,token); if(approleControllerResp.getHttpstatus().equals(HttpStatus.NO_CONTENT)){ log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AppRole from Service Account\"). put(LogMessage.MESSAGE, \"Reverting, approle policy update success\"). put(LogMessage.RESPONSE, (null!=metadataResponse)?metadataResponse.getResponse():TVaultConstants.EMPTY). put(LogMessage.STATUS, (null!=metadataResponse)?metadataResponse.getHttpstatus().toString():TVaultConstants.EMPTY). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Approle configuration failed. Please try again\\\"]}\"); }else{ log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AppRole from Service Account\"). put(LogMessage.MESSAGE, \"Reverting approle policy update failed\"). put(LogMessage.RESPONSE, (null!=metadataResponse)?metadataResponse.getResponse():TVaultConstants.EMPTY). put(LogMessage.STATUS, (null!=metadataResponse)?metadataResponse.getHttpstatus().toString():TVaultConstants.EMPTY). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Approle configuration failed. Contact Admin \\\"]}\"); } } else { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Failed to remove approle from the Service Account\\\"]}\"); } } else { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Access denied: No permission to remove approle from Service Account\\\"]}\"); } }### Assistant: @Test public void test_removeApproleFromSvcAcc_failure_403() throws Exception { ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Access denied: No permission to remove approle from Service Account\\\"]}\"); String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; UserDetails userDetails = getMockUser(false); ServiceAccountApprole serviceAccountApprole = new ServiceAccountApprole(\"testsvcname\", \"role1\", \"write\"); when(tokenUtils.getSelfServiceToken()).thenReturn(token); when(reqProcessor.process(eq(\"/sdb\"),Mockito.any(),eq(token))).thenReturn(getMockResponse(HttpStatus.OK, true, \"{\\\"data\\\":{\\\"initialPasswordReset\\\":true,\\\"managedBy\\\":\\\"smohan11\\\",\\\"name\\\":\\\"svc_vault_test5\\\",\\\"users\\\":{\\\"smohan11\\\":\\\"sudo\\\"}}}\")); ResponseEntity<String> responseEntityActual = serviceAccountsService.removeApproleFromSvcAcc(userDetails, token, serviceAccountApprole); assertEquals(HttpStatus.BAD_REQUEST, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected, responseEntityActual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean parse(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer) { if (cmakeErrorOrWarning.matcher(line).matches()) { List<String> messages = new ArrayList<>(); messages.add(line.trim()); String nextLine; while ((nextLine = reader.readLine()) != null) { if (nextLine.isEmpty() || cmakeErrorOrWarning.matcher(nextLine).matches()) { reader.pushBack(); break; } else { nextLine = nextLine.trim(); if (!nextLine.isEmpty()) { messages.add(nextLine); } } } if (matchesErrorFileAndLineNumberError(messages, reader.getParentEventId(), messageConsumer) || matchesFileAndLineNumberError(messages, reader.getParentEventId(), messageConsumer)) { return true; } if (messages.get(0).startsWith(CMAKE_ERROR)) { messageConsumer.accept( new MessageEventImpl(reader.getParentEventId(), MessageEvent.Kind.ERROR, CMAKE + MESSAGE_GROUP_ERROR_SUFFIX, String.join(\" \", messages), String.join(\"\\n\", messages))); } else { messageConsumer.accept( new MessageEventImpl(reader.getParentEventId(), MessageEvent.Kind.WARNING, CMAKE + MESSAGE_GROUP_WARNING_SUFFIX, String.join(\" \", messages), String.join(\"\\n\", messages))); } return true; } return false; }### Assistant: @Test public void testSingleLineCmakeWarningInFileWithLineNumber() { String prefix = \"CMake Warning: Warning in cmake code at \"; String filePath = sourceFile.getAbsolutePath(); int lineNumber = 13; String fileAndLineNumber = String.format(Locale.getDefault(), \"%s:%d:\\n\", filePath, lineNumber); String err = prefix + fileAndLineNumber; BuildOutputInstantReader reader = new TestBuildOutputInstantReader(err); ArgumentCaptor<BuildEvent> captor = ArgumentCaptor.forClass(BuildEvent.class); assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue(); verify(messageConsumer).accept(captor.capture()); assertThat(captor.getAllValues()).hasSize(1); verifyFileMessageEvent(captor.getAllValues().get(0), filePath, \"CMake warnings\", MessageEvent.Kind.WARNING, lineNumber, 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Transactional(value = Transactional.TxType.REQUIRED, rollbackOn = {RuntimeException.class, Exception.class}) protected Map<ModelNodeId, List<Element>> retrieveStateAttributes(Map<ModelNodeId, Pair<List<QName>, List<FilterNode>>> mapAttributes) throws GetAttributeException { Map<ModelNodeId, List<Element>> stateInfo = new HashMap<>(); try { Document document = DocumentUtils.createDocument(); for (Map.Entry<ModelNodeId, Pair<List<QName>, List<FilterNode>>> entry : mapAttributes.entrySet()) { List<Element> stateElements = new ArrayList<>(); ModelNodeId nodeId = entry.getKey(); List<FilterNode> filters = entry.getValue().getSecond(); Element deviceStateElement = null; Element newDevicesElement = null; Element deviceAdapterElement = null; if (nodeId.matchesTemplate(DEVICE_ID_TEMPLATE)) { Device device = getDevice(nodeId.getRdnValue(\"name\")); if (device != null) { deviceStateElement = buildDeviceStateElement(document, device); } } else if (nodeId.matchesTemplate(NETWORK_MANAGER_ID_TEMPLATE)) { List<NewDeviceInfo> newDeviceInfos = m_connectionManager.getNewDevices(); List<DeviceAdapter> adapters = new ArrayList<>(m_adapterManager.getAllDeviceAdapters()); if (!newDeviceInfos.isEmpty()) { newDevicesElement = buildNewDeviceStateElement(document, newDeviceInfos); } deviceAdapterElement = buildAdaptersStateElement(document, adapters); } for (FilterNode filter : filters) { if (DEVICE_STATE.equals(filter.getNodeName()) && NS.equals(filter.getNamespace())) { Element filteredDeviceStateElement = document.createElementNS(NS, DEVICE_STATE); m_subtreeFilterUtil.doFilter(document, filter, m_schemaRegistry.getDataSchemaNode(MANAGED_DEVICES_SP), deviceStateElement, filteredDeviceStateElement); deviceStateElement = filteredDeviceStateElement; if (deviceStateElement != null) { stateElements.add(deviceStateElement); } } else if (NEW_DEVICES.equals(filter.getNodeName()) && NS.equals(filter.getNamespace())) { Element filteredNewDevicesElement = document.createElementNS(NS, NEW_DEVICES); m_subtreeFilterUtil.doFilter(document, filter, m_schemaRegistry.getDataSchemaNode(NEW_DEVICES_SP), newDevicesElement, filteredNewDevicesElement); newDevicesElement = filteredNewDevicesElement; if (newDevicesElement != null) { stateElements.add(newDevicesElement); } } else if (DEVICE_ADAPTERS.equals(filter.getNodeName()) && NS.equals(filter.getNamespace())) { Element filteredDeviceAdaptersElement = document.createElementNS(NS, DEVICE_ADAPTERS); m_subtreeFilterUtil.doFilter(document, filter, m_schemaRegistry.getDataSchemaNode(DEVICE_ADAPTERS_SP), deviceAdapterElement, filteredDeviceAdaptersElement); deviceAdapterElement = filteredDeviceAdaptersElement; if (deviceAdapterElement != null) { stateElements.add(deviceAdapterElement); } } stateInfo.put(nodeId, stateElements); } } } catch (Exception e) { LOGGER.error(\"Error in retrieveStateAttributes: \", e); throw e; } return stateInfo; }### Assistant: @Test public void retrieveStateAttributesOfDeviceB() throws Exception { Map<ModelNodeId, Pair<List<QName>, List<FilterNode>>> mapAttributes = new HashMap<>(); Document deviceStateFilter = DocumentUtils.loadXmlDocument(DeviceManagementSubsystemTest.class.getResourceAsStream(\"/filter-connection-state-request.xml\")); mapAttributes.put(DEVICE_B_ID_TEMPLATE, new Pair<>(Collections.emptyList(), Arrays.asList(getFilterNode(deviceStateFilter)))); Map<ModelNodeId, List<Element>> stateInfo = m_deviceManagementSubsystem.retrieveStateAttributes(mapAttributes); assertEquals(1, stateInfo.size()); List<Element> deviceBState = stateInfo.get(DEVICE_B_ID_TEMPLATE); assertEquals(1, deviceBState.size()); Document deviceBStatedocument = getDeviceStateDocumentWithConnectionStateFilter(DEVICE_B); TestUtil.assertXMLEquals(deviceBStatedocument.getDocumentElement(), deviceBState.get(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String join(Iterable<?> iterable, String separator) { return join( iterable, separator, null ); }### Assistant: @Test public void testJoin() { assertThat( Strings.join( new ArrayList<String>(), \"-\" ) ).isEqualTo( \"\" ); assertThat( Strings.join( Arrays.asList( \"Hello\", \"World\" ), \"-\" ) ).isEqualTo( \"Hello-World\" ); assertThat( Strings.join( Arrays.asList( \"Hello\" ), \"-\" ) ).isEqualTo( \"Hello\" ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Range parse(String value) { LOG.debug(\"Attempting to parse range: {}\", value); value = value.replace(\"bytes\", \"\").trim(); String[] parts = value.split(\"/\"); if (parts.length != 2) { throw new IllegalArgumentException( \"Must provide <range>/<length> format for range request: \" + value); } String byteRangePart = parts[0]; String contentLengthPart = parts[1]; Long contentLength = contentLengthPart.equals(\"*\") ? null : Long.parseLong(contentLengthPart); String[] byteValues = byteRangePart.split(\"-\", -1); if (byteValues.length != 2) { throw new IllegalArgumentException( \"Must provide <start>-<end> format for range request: \" + value); } Long startByte = StringUtils.isBlank(byteValues[0]) ? null : Long.parseLong(byteValues[0]); Long endByte = StringUtils.isBlank(byteValues[1]) ? null : Long.parseLong(byteValues[1]); if (startByte == null && endByte == null) { throw new IllegalArgumentException( \"Must provide start/end byte for range request: \" + value); } Range range = new Range(startByte, endByte); range.contentLength = contentLength; return range; }### Assistant: @Test public void parse_hasContentLength() { Range range = Range.parse(\"bytes 5-10/25\"); assertEquals(5L, (long) range.getStartByte()); assertEquals(10L, (long) range.getEndByte()); assertEquals(25L, (long) range.getContentLength()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isPredictedPathogenic() { if (whiteListed) { return true; } if (variantEffect == VariantEffect.MISSENSE_VARIANT) { return true; } else { return getPathogenicityScore() >= DEFAULT_PATHOGENICITY_THRESHOLD; } }### Assistant: @Test public void testDownstreamVariantIsPredictedPathogenicIsFalse() { instance = testVariantBuilder().variantEffect(VariantEffect.DOWNSTREAM_GENE_VARIANT).build(); assertThat(instance.isPredictedPathogenic(), is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public Collection<V> filter(Filter filter) { List<Object> filteredObjects = filter.filter((List<Object>) objects); return (Collection<V>) filteredObjects; }### Assistant: @Test @SuppressWarnings(\"unchecked\") public void filter() { Item item = new Item(2); List<Item> items = new ArrayList<Item>(); items.add(item); CollectionItem<Item> collectionItem = new CollectionItem<Item>(items); doReturn(items).when(filter).filter(anyList()); Collection<Item> filteredItems = collectionItem.filter(filter); assertTrue(filteredItems.contains(item)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SendReceipt send(String emailId, Map<String, Object> recipient, Map<String, Object> emailData) throws SendWithUsException { return this.send(emailId, recipient, null, emailData); }### Assistant: @Test public void testSendWithLocale() throws SendWithUsException { String locale = \"en-US\"; SendWithUsSendRequest request = new SendWithUsSendRequest() .setEmailId(EMAIL_ID).setRecipient(defaultRecipientParams) .setSender(defaultSenderParams).setEmailData(defaultDataParams) .setLocale(locale); SendReceipt sendReceipt = sendwithusAPI.send(request); assertSuccessfulAPIReceipt(sendReceipt); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static OMElement getElement(final OMElement parent) { return parent.getFirstChildWithName(Q_ELEMENT_NAME); }### Assistant: @Test public void testGetElement() throws Exception { OMElement dElement = DescriptionElement.getElement(createXML( \"<parent>\" + \" <eb3:Description xml:lang=\\\"en-US\\\"\" + \" xmlns:eb3=\\\"http: \"This is just a test\" + \"</eb3:Description> \" + \"</parent>\")); assertNotNull(dElement); assertEquals(Q_ELEMENT_NAME, dElement.getQName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public MigrationReport migrate(String sourceDeploymentId, Long processInstanceId, String targetDeploymentId, String targetProcessId) { MigrationSpec migrationSpec = new MigrationSpec(sourceDeploymentId, processInstanceId, targetDeploymentId, targetProcessId); MigrationManager migrationManager = new MigrationManager(migrationSpec); org.jbpm.runtime.manager.impl.migration.MigrationReport report = null; try { report = migrationManager.migrate(); } catch (MigrationException e) { report = e.getReport(); } return convert(report); }### Assistant: @Test public void testMigrateSingleProcessInstanceWithNodeMapping() { String activeNodeId = \"_ECEDD1CE-7380-418C-B7A6-AF8ECB90B820\"; String nextNodeId = \"_9EF3CAE0-D978-4E96-9C00-8A80082EB68E\"; Map<String, String> nodeMapping = new HashMap<String, String>(); nodeMapping.put(activeNodeId, nextNodeId); long processInstanceId = processService.startProcess(deploymentUnitV1.getIdentifier(), REMOVEACTIVETASK_ID_V1); assertNotNull(processInstanceId); MigrationReport report = migrationService.migrate(deploymentUnitV1.getIdentifier(), processInstanceId, deploymentUnitV2.getIdentifier(), REMOVEACTIVETASK_ID_V2, nodeMapping); assertNotNull(report); assertTrue(report.isSuccessful()); assertMigratedProcessInstance(REMOVEACTIVETASK_ID_V2, processInstanceId, ProcessInstance.STATE_ACTIVE); assertMigratedTaskAndComplete(REMOVEACTIVETASK_ID_V2, processInstanceId, \"Mapped Task\"); assertMigratedProcessInstance(REMOVEACTIVETASK_ID_V2, processInstanceId, ProcessInstance.STATE_COMPLETED); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<IKVStore> getResultsOfQuery(final String query, final List<String> values) throws SQLException { if (values.isEmpty()) { return this.select(query); } else { throw new UnsupportedOperationException(\"Cannot cope with prepared statements and values to set.\"); } }### Assistant: @Test @Ignore public void testSelectQuery() throws SQLException { List<IKVStore> res = adapter.getResultsOfQuery(\"SELECT * FROM \" + SELECT_TABLE); if (res.isEmpty() || res.size() > 1) { fail(\"No result or too many results returned for select query.\"); } IKVStore store = res.get(0); assertEquals(\"ID not as expected.\", \"1\", store.getAsString(\"id\")); assertEquals(\"Column 'a' not as expected.\", \"1\", store.getAsString(\"a\")); assertEquals(\"Column 'b' not as expected.\", \"y\", store.getAsString(\"b\")); assertEquals(\"Column 'c' not as expected.\", \"3\", store.getAsString(\"c\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void serve(final HttpServletResponse response) throws IOException { response.setStatus(getStatus()); response.setContentType(\"text/html\"); if (StringUtilities.isEmpty(errorDocumentPath)) { serveDocument(response); } else { File file = new File(errorDocumentPath); if (file.exists()) { serveFile(response, file); } else { throw new IOException(getStatus() + \" occurred, specified error handler (\" + errorDocumentPath + \") was not found.\"); } } }### Assistant: @Test public void shouldServeBuiltinDocument() throws Exception { AbstractHtmlErrorHandler handler = new SampleHtmlErrorHanlder(\"500\", \"MSG_TOKEN\", \"EXPLANATION_TOKEN\", null); handler.serve(response); assertThat(response.getStatus(), containsString(\"500\")); assertThat(outputStream.toString(), containsString(\"MSG_TOKEN\")); assertThat(outputStream.toString(), containsString(\"EXPLANATION_TOKEN\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public JsonRedisTemplate(RedisConnectionFactory connectionFactory) { this(); setConnectionFactory(connectionFactory); afterPropertiesSet(); }### Assistant: @Test public void testJsonRedisTemplate(){ String key = \"test:data\"; BoundValueOperations<Object, Object> ops = (BoundValueOperations<Object, Object>)jsonRedisTemplate.boundValueOps(key); JsonData data = new JsonData(); data.setAge(111); data.setName(\"testName\"); ops.set(data); JsonData data2 = (JsonData)ops.get(); assertThat(data2).isEqualTo(data); jsonRedisTemplate.delete(key); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void checkIfArgumentsMatchParameterTypes(Object[] arguments, Class<?>[] parameterTypes) { checkNotNull(arguments, \"'arguments' must not be null\"); checkNotNull(parameterTypes, \"'testMethod' must not be null\"); checkArgument(parameterTypes.length >= arguments.length, \"Expected at most %d arguments for test method but got %d.\", parameterTypes.length, arguments.length); for (int idx = 0; idx < arguments.length; idx++) { Object object = arguments[idx]; if (object != null) { Class<?> paramType = parameterTypes[idx]; if (!paramType.isInstance(object) && !isWrappedInstance(paramType, object) && !isWideningConversion(paramType, object)) { throw new IllegalArgumentException( String.format(\"Parameter number %d is of type '%s' but argument given is '%s' of type '%s'\", idx, paramType.getSimpleName(), object, object.getClass().getSimpleName())); } } } }### Assistant: @Test public void testCheckIfArgumentsMatchParameterTypesShouldBeAwareOfWideningPrimitiveConversionsOfFloat() { Object[] arguments = new Object[] { 1.1f }; Class<?>[] parameterTypes = new Class<?>[] { double.class }; underTest.checkIfArgumentsMatchParameterTypes(arguments, parameterTypes); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String sendRequest(final String sessionId, Request request) throws SDKBadRequestException { if (request.getType() == null) { throw new SDKBadRequestException(SDKErrorEnum.badRequestError, \"Request type (method) is missing!\"); } URI uri = buildURI(request); LOGGER.debug(\"Using URL: \" + uri.toString()); HttpRequestBase requestBase; switch (request.getType()) { case POST: HttpPost post = new HttpPost(uri); fillRequestEntity(post, request); requestBase = post; break; case GET: requestBase = new HttpGet(uri); break; case PATCH: HttpPatch patch = new HttpPatch(uri); fillRequestEntity(patch, request); requestBase = patch; break; case PUT: HttpPut put = new HttpPut(uri); fillRequestEntity(put, request); requestBase = put; break; case DELETE: requestBase = new HttpDelete(uri); break; default: LOGGER.error(\"Request type not supported.\"); throw new SDKBadRequestException(SDKErrorEnum.badRequestError, SdkConstants.APPLIANCE); } for (Header header : request.getHeaders()) { requestBase.addHeader(header); } if (StringUtils.isNotBlank(sessionId)) { requestBase.setHeader(SdkConstants.AUTH_HEADER, sessionId); } return getResponse(sessionId, requestBase, request.isForceReturnTask(), request.getDownloadPath()); }### Assistant: @Test (expected = SDKApplianceNotReachableException.class) public void testSendRequestBadGatewayResponse() { Mockito.when(responseStatus.getStatusCode()).thenReturn(502); restClient.sendRequest(SESSION_ID, new Request(HttpMethod.GET, \"\")); fail(\"Exception should have been raised\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public static String byteArrayToHexString(byte[] raw) { if (raw == null) { return null; } final StringBuilder hex = new StringBuilder(2 * raw.length); for (final byte b : raw) { hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F))); } return hex.toString(); }### Assistant: @Test void testHexString() { byte[] zeroArray = new byte[16]; assertThat(ByteUtils.byteArrayToHexString(zeroArray)).isEqualTo(\"00000000000000000000000000000000\"); byte[] emptyArray = {}; assertThat(ByteUtils.byteArrayToHexString(emptyArray)).isEqualTo(\"\"); byte[] zeroByte = {(byte) 0x00}; assertThat(ByteUtils.byteArrayToHexString(zeroByte)).isEqualTo(\"00\"); byte[] fullByte = {(byte) 0xFF}; assertThat(ByteUtils.byteArrayToHexString(fullByte)).isEqualTo(\"FF\"); byte[] leadingZero = {(byte) 0x0F}; assertThat(ByteUtils.byteArrayToHexString(leadingZero)).isEqualTo(\"0F\"); byte[] longLeadingZero = {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x11}; assertThat(ByteUtils.byteArrayToHexString(longLeadingZero)).isEqualTo(\"00000000000011\"); byte[] trailingZero = {(byte) 0x11, (byte) 0x00}; assertThat(ByteUtils.byteArrayToHexString(trailingZero)).isEqualTo(\"1100\"); byte[] longTrailingZero = new byte[16]; longTrailingZero[0] = (byte) 0xFF; assertThat(ByteUtils.byteArrayToHexString(longTrailingZero)).isEqualTo(\"FF000000000000000000000000000000\"); byte[] basicArray = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xF0, (byte) 0x0F, (byte) 0xFF}; assertThat(ByteUtils.byteArrayToHexString(basicArray)).isEqualTo(\"FFFFFF00FFF00FFF\"); byte[] basicVariedArray = {(byte) 0x82, (byte) 0xF2, (byte) 0xAB, (byte) 0xA4, (byte) 0xDE, (byte) 0x15, (byte) 0x19, (byte) 0x11}; assertThat(ByteUtils.byteArrayToHexString(basicVariedArray)).isEqualTo(\"82F2ABA4DE151911\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"deprecation\") protected static LocalTime toLocalTime(Object obj) { if (obj == null) { return null; } if (obj instanceof LocalTime) { return (LocalTime) obj; } if (obj instanceof LocalDateTime) { return ((LocalDateTime) obj).toLocalTime(); } if (obj instanceof java.sql.Date) { throw new IllegalArgumentException(\"Unable to convert to LocalDate from a java.sql.Date value '\" + obj + \"'\"); } if (obj instanceof java.sql.Time) { java.sql.Time time = (java.sql.Time) obj; long millis = (int) (time.getTime() % Conversions.MILLISECONDS_PER_SECOND); int nanosOfSecond = (int) (millis * Conversions.NANOSECONDS_PER_MILLISECOND); return LocalTime.of(time.getHours(), time.getMinutes(), time.getSeconds(), nanosOfSecond); } if (obj instanceof java.sql.Timestamp) { java.sql.Timestamp timestamp = (java.sql.Timestamp) obj; return LocalTime.of(timestamp.getHours(), timestamp.getMinutes(), timestamp.getSeconds(), timestamp.getNanos()); } if (obj instanceof java.util.Date) { java.util.Date date = (java.util.Date) obj; long millis = (int) (date.getTime() % Conversions.MILLISECONDS_PER_SECOND); int nanosOfSecond = (int) (millis * Conversions.NANOSECONDS_PER_MILLISECOND); return LocalTime.of(date.getHours(), date.getMinutes(), date.getSeconds(), nanosOfSecond); } if (obj instanceof Duration) { Long value = ((Duration) obj).toNanos(); if (value >= 0 && value <= NANOSECONDS_PER_DAY) { return LocalTime.ofNanoOfDay(value); } else { throw new IllegalArgumentException(\"Time values must use number of milliseconds greater than 0 and less than 86400000000000\"); } } throw new IllegalArgumentException(\"Unable to convert to LocalTime from unexpected value '\" + obj + \"' of type \" + obj.getClass().getName()); }### Assistant: @Test public void shouldReturnSameLocalTimeInstanceWhenConvertingToLocalTime() { LocalTime now = LocalTime.now(); assertThat(Conversions.toLocalTime(now)).isSameAs(now); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Object stringToJava(String value) { if(value.isEmpty()) { return value; } char first = value.charAt(0); char last = value.charAt(value.length() - 1); Long record; if(AnyStrings.isWithinQuotes(value, TAG_MARKER)) { return value.substring(1, value.length() - 1); } else if(first == '@' && (record = Longs .tryParse(value.substring(1, value.length()))) != null) { return Link.to(record); } else if(first == '@' && last == '@' && STRING_RESOLVABLE_LINK_REGEX.matcher(value).matches()) { String ccl = value.substring(1, value.length() - 1); return ResolvableLink.create(ccl); } else if(value.equalsIgnoreCase(\"true\")) { return true; } else if(value.equalsIgnoreCase(\"false\")) { return false; } else if(first == TAG_MARKER && last == TAG_MARKER) { return Tag.create(value.substring(1, value.length() - 1)); } else if(first == '|' && last == '|') { value = value.substring(1, value.length() - 1); String[] toks = value.split(\"\\\\|\"); Timestamp timestamp; if(toks.length == 1) { timestamp = Timestamp .fromMicros(NaturalLanguage.parseMicros(value)); } else { DateTimeFormatter formatter = DateTimeFormat .forPattern(toks[1]); timestamp = Timestamp.parse(toks[0], formatter); } return timestamp; } else { if(last == ')') { try { FunctionTree tree = (FunctionTree) ConcourseCompiler.get() .parse(value); FunctionValueSymbol symbol = (FunctionValueSymbol) tree .root(); return symbol.function(); } catch (Exception e) {} } try { return MoreObjects .firstNonNull(AnyStrings.tryParseNumber(value), value); } catch (NumberFormatException e) { return value; } } }### Assistant: @Test public void testConvertEmptyString() { Assert.assertEquals(\"\", Convert.stringToJava(\"\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Iterator<Vector> iterator() { return new LuceneIterator(indexReader, idField, field, terminfo, weight, normPower, maxPercentErrorDocs); }### Assistant: @Test(expected = IllegalStateException.class) public void testIterableNoTermVectors() throws IOException { RAMDirectory directory = createTestIndex(TYPE_NO_TERM_VECTORS); IndexReader reader = DirectoryReader.open(directory); Weight weight = new TFIDF(); TermInfo termInfo = new CachedTermInfo(reader, \"content\", 1, 100); LuceneIterable iterable = new LuceneIterable(reader, \"id\", \"content\", termInfo,weight); Iterator<Vector> iterator = iterable.iterator(); Iterators.advance(iterator, 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getIntProperty(String xPathExp, String tagName, int defaultVal) { return getElementByXPath(xPathExp, tagName, node -> { try { return Integer.parseInt(node.getTextContent()); } catch (NumberFormatException e) { return defaultVal; } }, defaultVal); }### Assistant: @Test public void readSimpleIntProperty() throws Exception { String simpleIntXml = prepareElement(INT_TAG, String.valueOf(intValue)); xsr = new XmlSettingsReader(simpleIntXml); int readIntProperty = xsr.getIntProperty(\"/\", INT_TAG, DEFAULT_INT); assertEquals(intValue, readIntProperty); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public abstract float ratio(Resource a, Resource b);### Assistant: @Test public void testRatioWithNoExtraResource() { Resource resource1 = newResource(1, 1); Resource resource2 = newResource(2, 1); float ratio = resourceCalculator.ratio(resource1, resource2); if (resourceCalculator instanceof DefaultResourceCalculator) { double ratioOfMemories = 0.5; assertEquals(ratioOfMemories, ratio, 0.00001); } else if (resourceCalculator instanceof DominantResourceCalculator) { double ratioOfCPUs = 1.0; assertEquals(ratioOfCPUs, ratio, 0.00001); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void isStrictlyPositive(long value, String message) { isTrue(value > 0, message); }### Assistant: @Test public void testIsStrictlyPositive_trueValue() { isStrictlyPositive(3, \"Blah blah blah\"); isStrictlyPositive(3L, \"Blah blah blah\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> createAppRole(String userToken, AppRole appRole, UserDetails userDetails) { String token = userDetails.getClientToken(); if (userDetails.isAdmin()) { return appRoleService.createAppRole(token, appRole, userDetails); } else { token = userDetails.getSelfSupportToken(); return appRoleService.createAppRole(token, appRole, userDetails); } }### Assistant: @Test public void test_createAppRole_successfully_admin() throws TVaultValidationException { String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; UserDetails userDetails = getMockUser(true); String [] policies = {\"default\"}; AppRole appRole = new AppRole(\"approle1\", policies, true, 1, 100, 0); ResponseEntity<String> response = ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"AppRole created successfully\\\"]}\"); ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"AppRole created successfully\\\"]}\"); when(appRoleService.createAppRole(token, appRole, userDetails)).thenReturn(response); mockIsAuthorized(userDetails, true); ResponseEntity<String> responseEntity = selfSupportService.createAppRole(token, appRole, userDetails); assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Class<?> wrapperFor(Type primitiveType) { return requireNonNull(WRAPPERS.get(primitiveType.getTypeName()), \"No wrapper found for type '\" + primitiveType.getTypeName() + \"'.\" ); }### Assistant: @Test void wrapperFor() { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getLimitString(String sql, int offset, int limit) { return getLimitString(sql,offset,null,limit,null); }### Assistant: @Test(expected=UnsupportedOperationException.class) public void getLimitStringWithException1() { Assert.assertEquals(\"\", dialect.getLimitString(\"select * from user\", 12, 0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int run(String[] args) throws Exception { YarnConfiguration yarnConf = getConf() == null ? new YarnConfiguration() : new YarnConfiguration( getConf()); boolean isHAEnabled = yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED, YarnConfiguration.DEFAULT_RM_HA_ENABLED); if (args.length < 1) { printUsage(\"\", isHAEnabled); return -1; } int exitCode = -1; int i = 0; String cmd = args[i++]; exitCode = 0; if (\"-help\".equals(cmd)) { if (i < args.length) { printUsage(args[i], isHAEnabled); } else { printHelp(\"\", isHAEnabled); } return exitCode; } if (USAGE.containsKey(cmd)) { if (isHAEnabled) { return super.run(args); } System.out.println(\"Cannot run \" + cmd + \" when ResourceManager HA is not enabled\"); return -1; } if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) || \"-refreshNodesResources\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) || \"-refreshUserToGroupsMappings\".equals(cmd) || \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) { if (args.length != 1) { printUsage(cmd, isHAEnabled); return exitCode; } } try { if (\"-refreshQueues\".equals(cmd)) { exitCode = refreshQueues(); } else if (\"-refreshNodes\".equals(cmd)) { exitCode = handleRefreshNodes(args, cmd, isHAEnabled); } else if (\"-refreshNodesResources\".equals(cmd)) { exitCode = refreshNodesResources(); } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) { exitCode = refreshUserToGroupsMappings(); } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) { exitCode = refreshSuperUserGroupsConfiguration(); } else if (\"-refreshAdminAcls\".equals(cmd)) { exitCode = refreshAdminAcls(); } else if (\"-refreshServiceAcl\".equals(cmd)) { exitCode = refreshServiceAcls(); } else if (\"-refreshClusterMaxPriority\".equals(cmd)) { exitCode = refreshClusterMaxPriority(); } else if (\"-getGroups\".equals(cmd)) { String[] usernames = Arrays.copyOfRange(args, i, args.length); exitCode = getGroups(usernames); } else if (\"-updateNodeResource\".equals(cmd)) { exitCode = handleUpdateNodeResource(args, cmd, isHAEnabled); } else if (\"-addToClusterNodeLabels\".equals(cmd)) { exitCode = handleAddToClusterNodeLabels(args, cmd, isHAEnabled); } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) { exitCode = handleRemoveFromClusterNodeLabels(args, cmd, isHAEnabled); } else if (\"-replaceLabelsOnNode\".equals(cmd)) { exitCode = handleReplaceLabelsOnNodes(args, cmd, isHAEnabled); } else { exitCode = -1; System.err.println(cmd.substring(1) + \": Unknown command\"); printUsage(\"\", isHAEnabled); } } catch (IllegalArgumentException arge) { exitCode = -1; System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage()); printUsage(cmd, isHAEnabled); } catch (RemoteException e) { exitCode = -1; try { String[] content; content = e.getLocalizedMessage().split(\"\\n\"); System.err.println(cmd.substring(1) + \": \" + content[0]); } catch (Exception ex) { System.err.println(cmd.substring(1) + \": \" + ex.getLocalizedMessage()); } } catch (Exception e) { exitCode = -1; System.err.println(cmd.substring(1) + \": \" + e.getLocalizedMessage()); } if (null != localNodeLabelsManager) { localNodeLabelsManager.stop(); } return exitCode; }### Assistant: @Test public void testAccessRemoteNodeLabelManager() throws Exception { String[] args = { \"-addToClusterNodeLabels\", \"x,y\" }; assertEquals(0, rmAdminCLI.run(args)); assertTrue(dummyNodeLabelsManager.getClusterNodeLabelNames().isEmpty()); assertTrue(remoteAdminServiceAccessed); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: <T> T createObject(DependencyProvider dependencyProvider, TypeToken<T> typeToken) { try { return createObjectInternal(dependencyProvider, typeToken); } catch (IllegalAccessException | InvocationTargetException | InstantiationException e) { throw new RuntimeException(e); } }### Assistant: @Test public void testSubclassInject() { prep(Inject.class); TestSubclass testObject = mRealObjectMaker.createObject( mDependencyProvider, TypeToken.of(TestSubclass.class)); assertTestObjectNormal(testObject, TestSubclass.class); verifyDependencyProviderCalls(runnableKey, runnableProviderKey); assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <M,I> RowFilter<M,I> regexFilter(String regex, int... indices) { return regexFilter(0, regex, indices); }### Assistant: @Test public void testExist() { RowFilters.regexFilter(\"sometext\"); RowFilters.regexFilter(\"some\", 0, 1, 3); RowFilters.regexFilter(Pattern.compile(\"text\"), 0, 5); RowFilters.regexFilter(Pattern.compile(\"soem\")); RowFilters.regexFilter(0, \"some\"); RowFilters.regexFilter(0, \"some\", 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void doLayout() { myDefaultLayer.setBounds(0, 0, getWidth(), getHeight()); mySplitter.setBounds(0, 0, getWidth(), getHeight()); }### Assistant: @Test public void testDoLayout() { myPanel.setSize(800, 600); myPanel.doLayout(); assertThat(myMainContent.getBounds()).isEqualTo(new Rectangle(0, 0, 800, 600)); assertThat(mySplitter.getBounds()).isEqualTo(new Rectangle(0, 0, 800, 600)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull @Override public byte[] serializeEntries(@Nonnull List<Map.Entry<Tuple, Tuple>> entries) { if (entries.isEmpty()) { throw new BunchedSerializationException(\"cannot serialize empty entry list\"); } List<byte[]> serializedEntries = new ArrayList<>(1 + entries.size()); serializedEntries.add(PREFIX); if (!entries.isEmpty()) { Iterator<Map.Entry<Tuple, Tuple>> iterator = entries.iterator(); Map.Entry<Tuple, Tuple> firstEntry = iterator.next(); serializedEntries.add(Tuple.from(firstEntry.getValue()).pack()); while (iterator.hasNext()) { Map.Entry<Tuple, Tuple> entry = iterator.next(); serializedEntries.add(serializeEntry(entry)); } } return ByteArrayUtil.join(null, serializedEntries); }### Assistant: @Test public void serializeEmptyList() { assertThrows(BunchedSerializationException.class, () -> serializer.serializeEntries(Collections.emptyList())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void collect(SensorContext context, File reportsDir) { File[] xmlFiles = getReports(reportsDir); if (xmlFiles.length > 0) { parseFiles(context, xmlFiles); } }### Assistant: @Test public void shouldMergeInnerClasses() throws URISyntaxException { SensorContextTester context = SensorContextTester.create(new File(\"\")); parser.collect(context, getDir(\"innerClasses\")); assertThat(context.measure(\":org.apache.commons.collections.bidimap.AbstractTestBidiMap\", CoreMetrics.TESTS).value()).isEqualTo(7); assertThat(context.measure(\":org.apache.commons.collections.bidimap.AbstractTestBidiMap\", CoreMetrics.TEST_ERRORS).value()).isEqualTo(1); assertThat(context.measures(\":org.apache.commons.collections.bidimap.AbstractTestBidiMap$TestBidiMapEntrySet\")).isEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void handle() { output.getOutputCommandQueue().queue(Command.HasData, input.getTrackId()); input.setInputResolution(output.getOutputResolution()); }### Assistant: @Test public void setInputSizeToSurface() { MultipleMediaSource multipleMediaSource = create.multipleMediaSource().withFrameSize(400, 300).construct(); VideoDecoder decoder = create.videoDecoder().construct(); ISurface surface = create.surface().construct(); decoder.setOutputSurface(surface); new ConfigureVideoDecoderCommandHandler(multipleMediaSource, decoder).handle(); verify(surface).setInputSize(eq(400), eq(300)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CompletableFuture<SW360Release> createRelease(SW360Release release) { return FutureUtils.wrapInFuture(() -> { if (release.getId() != null) { throw new IllegalArgumentException(\"Release already has the id \" + release.getId()); } return SW360ReleaseAdapterUtils.validateRelease(release); }, \"Cannot create release for \" + release.getName()) .thenCompose(this::assignReleaseToComponent) .thenCompose(getReleaseClient()::createRelease); }### Assistant: @Test public void testCreateReleaseNewComponent() { SW360Component componentForRelease = SW360ComponentAdapterUtils.createFromRelease(release); SW360Component componentCreated = new SW360Component(); componentCreated.setName(release.getName()); componentCreated.getLinks().setSelf(new Self(\"https: when(componentClientAdapter.getComponentByName(release.getName())) .thenReturn(CompletableFuture.completedFuture(Optional.empty())); when(componentClientAdapter.createComponent(componentForRelease)) .thenReturn(CompletableFuture.completedFuture(componentCreated)); SW360Release releaseCreated = new SW360Release(); releaseCreated.setName(release.getName() + \"_new\"); when(releaseClient.createRelease(release)) .thenAnswer(invocationOnMock -> { SW360Release r = invocationOnMock.getArgument(0); assertThat(r.getComponentId()).isEqualTo(ID); return CompletableFuture.completedFuture(releaseCreated); }); SW360Release result = block(releaseClientAdapter.createRelease(release)); assertThat(result).isEqualTo(releaseCreated); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<BaseDimensionalItemObject> slice( final WebOptions options, List<BaseDimensionalItemObject> dimensionalItems ) { state( options.getPage() > 0, \"Current page must be greater than zero.\" ); state( options.getPageSize() > 0, \"Page size must be greater than zero.\" ); if ( options.hasPaging() && isNotEmpty( dimensionalItems ) ) { final int currentPage = options.getPage(); final int totalOfElements = dimensionalItems.size(); final int maxElementsPerPage = options.getPageSize(); final Pager pager = new Pager( currentPage, totalOfElements, maxElementsPerPage ); final int currentElementIndex = pager.getOffset(); final boolean hasMorePages = (totalOfElements - currentElementIndex) > pager.getPageSize(); if ( hasMorePages ) { final int nextElementsWindow = pager.getPageSize() * pager.getPage(); dimensionalItems = dimensionalItems.subList( currentElementIndex, nextElementsWindow ); } else { dimensionalItems = dimensionalItems.subList( pager.getOffset(), totalOfElements ); } } return dimensionalItems; }### Assistant: @Test public void testSliceWhenPageSizeIsZero() { final int pageSize = 0; final int lastPage = 3; final int totalOfItems = 13; final WebOptions theWebOptions = mockWebOptions( pageSize, lastPage ); final List<BaseDimensionalItemObject> anyDimensionalItems = mockDimensionalItems( totalOfItems ); expectedException.expect( IllegalStateException.class ); expectedException.expectMessage( \"Page size must be greater than zero.\" ); slice( theWebOptions, anyDimensionalItems ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Boolean call() throws Exception { systemCommandRunner.run(systemCommand, commandId); return true; }### Assistant: @Test public void shouldRunTheSystemCommand() throws Exception { final UUID commandId = randomUUID(); final SystemCommandRunner systemCommandRunner = mock(SystemCommandRunner.class); final SystemCommand systemCommand = mock(SystemCommand.class); final RunSystemCommandTask runSystemCommandTask = new RunSystemCommandTask( systemCommandRunner, systemCommand, commandId ); runSystemCommandTask.call(); verify(systemCommandRunner).run(systemCommand, commandId); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DescriptorValue calculate(IAtomContainer container) { if (sp == null) sp = new SmilesParser(container.getBuilder()); IAtomContainer localAtomContainer = AtomContainerManipulator.removeHydrogens(container); CDKAtomTypeMatcher matcher = CDKAtomTypeMatcher.getInstance(container.getBuilder()); Iterator<IAtom> atoms = localAtomContainer.atoms().iterator(); while (atoms.hasNext()) { IAtom atom = atoms.next(); IAtomType type; try { type = matcher.findMatchingAtomType(localAtomContainer, atom); AtomTypeManipulator.configure(atom, type); } catch (Exception e) { return getDummyDescriptorValue(new CDKException(\"Error in atom typing: \" + e.getMessage())); } } CDKHydrogenAdder hAdder = CDKHydrogenAdder.getInstance(container.getBuilder()); try { hAdder.addImplicitHydrogens(localAtomContainer); } catch (CDKException e) { return getDummyDescriptorValue(new CDKException(\"Error in hydrogen addition: \" + e.getMessage())); } try { List<List<Integer>> subgraph0 = order0(localAtomContainer); List<List<Integer>> subgraph1 = order1(localAtomContainer); List<List<Integer>> subgraph2 = order2(localAtomContainer); List<List<Integer>> subgraph3 = order3(localAtomContainer); List<List<Integer>> subgraph4 = order4(localAtomContainer); List<List<Integer>> subgraph5 = order5(localAtomContainer); List<List<Integer>> subgraph6 = order6(localAtomContainer); List<List<Integer>> subgraph7 = order7(localAtomContainer); double order0s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph0); double order1s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph1); double order2s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph2); double order3s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph3); double order4s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph4); double order5s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph5); double order6s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph6); double order7s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph7); double order0v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph0); double order1v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph1); double order2v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph2); double order3v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph3); double order4v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph4); double order5v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph5); double order6v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph6); double order7v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph7); DoubleArrayResult retval = new DoubleArrayResult(); retval.add(order0s); retval.add(order1s); retval.add(order2s); retval.add(order3s); retval.add(order4s); retval.add(order5s); retval.add(order6s); retval.add(order7s); retval.add(order0v); retval.add(order1v); retval.add(order2v); retval.add(order3v); retval.add(order4v); retval.add(order5v); retval.add(order6v); retval.add(order7v); return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval, getDescriptorNames()); } catch (CDKException e) { return getDummyDescriptorValue(new CDKException(e.getMessage())); } }### Assistant: @Test public void testDan154() throws Exception { IAtomContainer mol = new AtomContainer(); IAtom a1 = mol.getBuilder().newInstance(IAtom.class, \"C\"); a1.setPoint2d(new Point2d(0.0, 1.5)); mol.addAtom(a1); IAtom a2 = mol.getBuilder().newInstance(IAtom.class, \"C\"); a2.setPoint2d(new Point2d(0.0, 0.0)); mol.addAtom(a2); IAtom a3 = mol.getBuilder().newInstance(IAtom.class, \"C\"); a3.setPoint2d(new Point2d(-1.2990381056766584, -0.7500000000000001)); mol.addAtom(a3); IAtom a4 = mol.getBuilder().newInstance(IAtom.class, \"C\"); a4.setPoint2d(new Point2d(-2.598076211353316, -2.220446049250313E-16)); mol.addAtom(a4); IAtom a5 = mol.getBuilder().newInstance(IAtom.class, \"C\"); a5.setPoint2d(new Point2d(-2.5980762113533165, 1.5)); mol.addAtom(a5); IAtom a6 = mol.getBuilder().newInstance(IAtom.class, \"C\"); a6.setPoint2d(new Point2d(-1.2990381056766582, 2.2500000000000004)); mol.addAtom(a6); IAtom a7 = mol.getBuilder().newInstance(IAtom.class, \"Cl\"); a7.setPoint2d(new Point2d(-1.2990381056766582, 3.7500000000000004)); mol.addAtom(a7); IAtom a8 = mol.getBuilder().newInstance(IAtom.class, \"Cl\"); a8.setPoint2d(new Point2d(1.2990381056766576, -0.7500000000000007)); mol.addAtom(a8); IBond b1 = mol.getBuilder().newInstance(IBond.class, a2, a1, IBond.Order.DOUBLE); mol.addBond(b1); IBond b2 = mol.getBuilder().newInstance(IBond.class, a3, a2, IBond.Order.SINGLE); mol.addBond(b2); IBond b3 = mol.getBuilder().newInstance(IBond.class, a4, a3, IBond.Order.DOUBLE); mol.addBond(b3); IBond b4 = mol.getBuilder().newInstance(IBond.class, a5, a4, IBond.Order.SINGLE); mol.addBond(b4); IBond b5 = mol.getBuilder().newInstance(IBond.class, a6, a5, IBond.Order.DOUBLE); mol.addBond(b5); IBond b6 = mol.getBuilder().newInstance(IBond.class, a6, a1, IBond.Order.SINGLE); mol.addBond(b6); IBond b7 = mol.getBuilder().newInstance(IBond.class, a7, a6, IBond.Order.SINGLE); mol.addBond(b7); IBond b8 = mol.getBuilder().newInstance(IBond.class, a8, a2, IBond.Order.SINGLE); mol.addBond(b8); DoubleArrayResult ret = (DoubleArrayResult) descriptor.calculate(mol).getValue(); Assert.assertEquals(5.9831, ret.get(0), 0.0001); Assert.assertEquals(3.7877, ret.get(1), 0.0001); Assert.assertEquals(3.3769, ret.get(2), 0.0001); Assert.assertEquals(2.1985, ret.get(3), 0.0001); Assert.assertEquals(0.9714, ret.get(5), 0.0001); Assert.assertEquals(0.4512, ret.get(6), 0.0001); Assert.assertEquals(0.0000, ret.get(7), 0.0001); Assert.assertEquals(5.5772, ret.get(8), 0.0001); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void doFilter(@NonNull DetectorRequest detectorRequest, @NonNull DetectorResponse detectorResponse, @NonNull DetectionFilterChain chain) { chain.doFilter(detectorRequest, detectorResponse); DetectorResult result = detectorResponse.getDetectorResult(); if (result instanceof OutlierDetectorResult) { buffer[bufferIndex++] = result.getAnomalyLevel(); if (bufferIndex >= getN()) { bufferIndex = 0; } val outlierDetectorResult = (OutlierDetectorResult) result; val aggregatedResult = new OutlierDetectorResult() .setAnomalyLevel(result.getAnomalyLevel()) .setPredicted(outlierDetectorResult.getPredicted()) .setThresholds(outlierDetectorResult.getThresholds()) .setTrusted(result.isTrusted()); if (numAnomalies() >= getM()) { aggregatedResult.setAnomalyLevel(AnomalyLevel.STRONG); } detectorResponse.setDetectorResult(aggregatedResult); } else { log.warn(String.format(\"%s can only be used with %s types of DetectorResults. Skipping aggregation.\", this.getClass().getSimpleName(), OutlierDetectorResult.class.getSimpleName())); chain.doFilter(detectorRequest, detectorResponse); } }### Assistant: @Test(expected = NullPointerException.class) public void testFilter_nullDetectorResponse() { new MOfNAggregationFilter(3, 5).doFilter(detectorRequest, null, mockFilterChain); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public PrintWriter getPrintWriter() throws IOException { return responseDelegate.getPrintWriter(); }### Assistant: @Test public void testGetPrintWriter() throws IOException { PrintWriter os = createMock(PrintWriter.class); expect(responseDelegate.getPrintWriter()).andReturn(os); replay(applicationContext, request, response, os, portletContext, requestDelegate, responseDelegate); assertEquals(req.getPrintWriter(), os); verify(applicationContext, request, response, os, portletContext, requestDelegate, responseDelegate); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isSuccess() { int statusCode = response.getStatusLine().getStatusCode(); return statusCode >= 200 && statusCode < 300; }### Assistant: @Test public void shouldBeValidTrueForSuccessfulResponse() { HttpResponse response = mock(HttpResponse.class, RETURNS_DEEP_STUBS); given(response.getStatusLine().getStatusCode()).willReturn(100); assertThat(new FluentResponse(response).isSuccess(), equalTo(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<WidgetsBundle> findSystemWidgetsBundles(TextPageLink pageLink) { return DaoUtil.convertDataList( widgetsBundleRepository .findSystemWidgetsBundles( NULL_UUID_STR, Objects.toString(pageLink.getTextSearch(), \"\"), pageLink.getIdOffset() == null ? NULL_UUID_STR : UUIDConverter.fromTimeUUID(pageLink.getIdOffset()), new PageRequest(0, pageLink.getLimit()))); }### Assistant: @Test @DatabaseSetup(value = \"classpath:dbunit/widgets_bundle.xml\", type= DatabaseOperation.DELETE_ALL) public void testFindSystemWidgetsBundles() { createSystemWidgetBundles(30, \"WB_\"); assertEquals(30, widgetsBundleDao.find().size()); TextPageLink textPageLink1 = new TextPageLink(10, \"WB\"); List<WidgetsBundle> widgetsBundles1 = widgetsBundleDao.findSystemWidgetsBundles(textPageLink1); assertEquals(10, widgetsBundles1.size()); TextPageLink textPageLink2 = new TextPageLink(10, \"WB\", widgetsBundles1.get(9).getId().getId(), null); List<WidgetsBundle> widgetsBundles2 = widgetsBundleDao.findSystemWidgetsBundles(textPageLink2); assertEquals(10, widgetsBundles2.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void doHealthCheck(final Health.Builder builder) throws Exception { if (isAvailableSetOperation() && isValidValue()) { builder.up(); } else { builder.outOfService(); } }### Assistant: @Test void should_be_outOfService_when_set_operation_is_false() throws Exception { doReturn(setFuture).when(client).set(\"__com.netflix.evcache.server.healthcheck\", 300, \"Greed is good!\"); doReturn(false).when(setFuture).get(5, TimeUnit.SECONDS); indicator.doHealthCheck(builder); verify(builder).outOfService(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting int formatSchedulerConf(String webAppAddress, WebResource resource) throws Exception { ClientResponse response = null; resource = (resource != null) ? resource : initializeWebResource(webAppAddress); try { Builder builder; if (UserGroupInformation.isSecurityEnabled()) { builder = resource .path(\"ws\").path(\"v1\").path(\"cluster\") .path(\"/scheduler-conf/format\") .accept(MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON); } else { builder = resource .path(\"ws\").path(\"v1\").path(\"cluster\") .path(\"/scheduler-conf/format\").queryParam(\"user.name\", UserGroupInformation.getCurrentUser().getShortUserName()) .accept(MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON); } response = builder.get(ClientResponse.class); if (response != null) { if (response.getStatus() == Status.OK.getStatusCode()) { System.out.println(response.getEntity(String.class)); return 0; } else { System.err.println(\"Failed to format scheduler configuration: \" + response.getEntity(String.class)); } } else { System.err.println(\"Failed to format scheduler configuration: \" + \"null response\"); } return -1; } finally { if (response != null) { response.close(); } destroyClient(); } }### Assistant: @Test(timeout = 10000) public void testFormatSchedulerConf() throws Exception { try { super.setUp(); GuiceServletConfig.setInjector( Guice.createInjector(new WebServletModule())); ResourceScheduler scheduler = rm.getResourceScheduler(); MutableConfigurationProvider provider = ((MutableConfScheduler) scheduler).getMutableConfProvider(); SchedConfUpdateInfo schedUpdateInfo = new SchedConfUpdateInfo(); HashMap<String, String> globalUpdates = new HashMap<>(); globalUpdates.put(\"schedKey1\", \"schedVal1\"); schedUpdateInfo.setGlobalParams(globalUpdates); LogMutation log = provider.logAndApplyMutation( UserGroupInformation.getCurrentUser(), schedUpdateInfo); rm.getRMContext().getRMAdminService().refreshQueues(); provider.confirmPendingMutation(log, true); Configuration schedulerConf = provider.getConfiguration(); assertEquals(\"schedVal1\", schedulerConf.get(\"schedKey1\")); int exitCode = cli.formatSchedulerConf(\"\", resource()); assertEquals(0, exitCode); schedulerConf = provider.getConfiguration(); assertNull(schedulerConf.get(\"schedKey1\")); } finally { cleanUp(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Parser<Relation> union(Parser<Relation> rel) { Parser.Reference<Relation> ref = Parser.newReference(); Parser<Relation> parser = ExpressionParser.paren(ref.lazy()).or(rel).infixl( TerminalParser.term(\"union\").next(TerminalParser.term(\"all\").succeeds()) .label(\"relation\") .map(a -> (l, r) -> new UnionRelation(l, a, r))); ref.set(parser); return parser; }### Assistant: @Test public void testUnion() { Parser<Relation> parser = RelationParser.union(TABLE); TerminalParserTest.assertParser(parser, \"a\", table(\"a\")); TerminalParserTest.assertParser(parser, \"a union b\", new UnionRelation(table(\"a\"), false, table(\"b\"))); TerminalParserTest.assertParser(parser, \"a union all b union (c)\", new UnionRelation( new UnionRelation(table(\"a\"), true, table(\"b\")), false, table(\"c\") ) ); TerminalParserTest.assertParser(parser, \"a union all (b union (c))\", new UnionRelation( table(\"a\"), true, new UnionRelation(table(\"b\"), false, table(\"c\")) ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public double applyStudentDeduction(double taxAmount, int numOfStudents){ return taxAmount - STUDENT_DEDUCTION*numOfStudents; }### Assistant: @Test public void testOneStudentTaxDeductionIs300(){ assertEquals(\"The $300 student discount was not applied\", 2000, tax.applyStudentDeduction(2300, 1), 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void open(final android.app.FragmentManager manager, final Date date) { }### Assistant: @Test public void cancelShouldDismissDialog() { mTravelTimePicker.open(getSupportFragmentManager()); final Dialog dialog = mTravelTimePicker.getDialog(); assertThat(dialog.isShowing(), is(true)); ((AlertDialog) dialog).getButton(AlertDialog.BUTTON_NEGATIVE).performClick(); assertThat(dialog.isShowing(), is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void validate(Iterable<? extends ApiConfig> apiConfigs) throws ApiConfigInvalidException, ApiClassConfigInvalidException, ApiMethodConfigInvalidException, ApiParameterConfigInvalidException { if (Iterables.isEmpty(apiConfigs)) { return; } Map<String, ApiMethodConfig> restfulSignatures = Maps.newHashMap(); Iterator<? extends ApiConfig> i = apiConfigs.iterator(); ApiConfig first = i.next(); validate(first, restfulSignatures); while (i.hasNext()) { ApiConfig config = i.next(); Iterable<ApiConfigInconsistency<Object>> inconsistencies = config.getConfigurationInconsistencies(first); if (!Iterables.isEmpty(inconsistencies)) { throw new InconsistentApiConfigurationException(config, first, inconsistencies); } validate(config, restfulSignatures); } }### Assistant: @Test public void testCollectionOfArrays() throws Exception { class Foo { @SuppressWarnings(\"unused\") public void foo(List<String[]> l) {} } config.getApiClassConfig().getMethods() .get(methodToEndpointMethod(TestEndpoint.class.getMethod(\"getResultNoParams\"))) .addParameter(\"param\", null, false, null, TypeToken.of( Foo.class.getDeclaredMethod(\"foo\", List.class).getGenericParameterTypes()[0])); try { validator.validate(config); fail(\"Expected NestedCollectionException.\"); } catch (NestedCollectionException expected) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int read() throws IOException { final int i = super.read(); if (i >= 0) { this.observer.transferred(1); } return i; }### Assistant: @Test public void testRead() throws IOException { EventLogHttpTransferListener listener = new EventLogHttpTransferListener(); @SuppressWarnings(\"resource\") InputStream in = new ObservableInputStream(new ByteArrayInputStream(new byte[10]), listener); in.read(); in.read(new byte[2]); assertEquals(of(new Transferred(1), new Transferred(2)), listener.getEventLog()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static double getPrecision(final int tp, final int fp) { return (tp + fp == 0) ? 1.0 : (double) tp / (tp + fp); }### Assistant: @Test public void testPrecision() { for (int i = 0; i < a.length; i++) { assertEquals(\"Precision not correct\", precision[i], ConfusionMetrics.getPrecision(tp(a[i], b[i]), fp(a[i], b[i])), 1E-8); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ResetConnectionMetricsResponse of(final ConnectionId connectionId, final DittoHeaders dittoHeaders) { checkNotNull(connectionId, \"Connection ID\"); return new ResetConnectionMetricsResponse(connectionId, dittoHeaders); }### Assistant: @Test public void createInstanceWithNullConnectionId() { assertThatExceptionOfType(NullPointerException.class) .isThrownBy(() -> ResetConnectionMetricsResponse.of(null, DittoHeaders.empty())) .withMessage(\"The %s must not be null!\", \"Connection ID\") .withNoCause(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected int crossover( final MSeq<EnumGene<T>> that, final MSeq<EnumGene<T>> other ) { if (that.length() != other.length()) { throw new IllegalArgumentException(format( \"Required chromosomes with same length: %s != %s\", that.length(), other.length() )); } if (that.length() >= 2) { final Random random = RandomRegistry.random(); final int[] points = Combinatorics.subset(that.length(), 2, random); that.swap(points[0], points[1], other, points[0]); repair(that, other, points[0], points[1]); repair(other, that, points[0], points[1]); } return 1; }### Assistant: @Test(invocationCount = 10) public void crossover() { final PartiallyMatchedCrossover<Integer, Double> pmco = new PartiallyMatchedCrossover<>(1); final int length = 1000; final MSeq<Integer> alleles = MSeq.<Integer>ofLength(length).fill(Int()); final ISeq<Integer> ialleles = alleles.toISeq(); final MSeq<EnumGene<Integer>> that = alleles.map(i -> new EnumGene<>(i, ialleles)); final MSeq<EnumGene<Integer>> other = alleles.map(i -> new EnumGene<>(i, ialleles)); that.shuffle(); other.shuffle(); final PermutationChromosome<Integer> thatChrom1 = new PermutationChromosome<>(that.toISeq()); Assert.assertTrue(thatChrom1.isValid(), \"thatChrom1 not valid\"); final PermutationChromosome<Integer> otherChrom1 = new PermutationChromosome<>(other.toISeq()); Assert.assertTrue(otherChrom1.isValid(), \"otherChrom1 not valid\"); pmco.crossover(that, other); final PermutationChromosome<Integer> thatChrom2 = new PermutationChromosome<>(that.toISeq()); Assert.assertTrue(thatChrom2.isValid(), \"thatChrom2 not valid: \" + thatChrom2); final PermutationChromosome<Integer> otherChrom2 = new PermutationChromosome<>(other.toISeq()); Assert.assertTrue(otherChrom2.isValid(), \"otherChrom2 not valid: \" + otherChrom2); Assert.assertFalse(thatChrom1.equals(thatChrom2), \"That chromosome must not be equal\"); Assert.assertFalse(otherChrom1.equals(otherChrom2), \"That chromosome must not be equal\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void showNisoImageMetadata20(NisoImageMetadata niso) { String margin = getIndent(++_level); String[][] attrs = { { \"xmlns:mix\", \"http: { \"xmlns:xsi\", \"http: { \"xsi:schemaLocation\", \"http: _writer.println(margin + elementStart(\"mix:mix\", attrs)); showNisoBasicDigitalObjectInformation20(niso, margin); showNisoBasicImageInformation20(niso, margin); showNisoImageCaptureMetadata20(niso, margin); showNisoImageAssessmentMetadata20(niso, margin); showChangeHistory20(niso, margin); _writer.println(margin + elementEnd(\"mix:mix\")); _level--; }### Assistant: @Test public void testShowNisoImage2Issue502() throws IOException { File mix20File = new File(this.getClass() .getResource(\"mix20_output3.xml\").getPath()); LOGGER.info(\"testShowNisoImage2Issue502 with file \" + mix20File); assertTrue(mix20File.isFile()); String expectedMix20 = readXmlFile(mix20File); TEST_NISO_IMAGE2_MD.setBrightness(null); this.handler.showNisoImageMetadata20(TEST_NISO_IMAGE2_MD); this.handler.close(); String generatedMix = readXmlFile(outputFile); assertEquals(\"Mix v2.0 generated not conformant\", expectedMix20, generatedMix); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Api(2.0) @NonNull public JobInfo info() { return mBuilder.mJobInfo; }### Assistant: @Test public void thatCanPersistJobInfoToFileAndDelete() throws IOException { Job job = givenAJob(mCallbackFlag,\"job\"); String pathFile = getPathToFileResource(); File fileJobInfo = new File(pathFile); File fileToVerify = new File(pathFile, job.info().mIdentity + \".job\"); job.info().writeToFile(fileJobInfo); job.info().tryDelete(fileJobInfo); assertThat(fileJobInfo.isDirectory()).isTrue(); assertThat(fileToVerify.exists()).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isSameDay(Date a, Date b) { return a.getTime() / DAY_MS * DAY_MS == b.getTime() / DAY_MS * DAY_MS; }### Assistant: @Test public void toLabel_differentday_first_less() throws ParseException { Date first = new SimpleDateFormat(\"yyyy/MM/dd z HH:mm:ss\").parse(\"2011/04/10 EST 12:45:27\"); Date second = new SimpleDateFormat(\"yyyy/MM/dd z HH:mm:ss\").parse(\"2011/05/10 EST 12:45:27\"); assertEquals(false, DateUtils.isSameDay(first, second)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setCountColumn(String countColumn) { this.countColumn = countColumn; }### Assistant: @Test public void testSimpleOrder3() throws Exception { DataFrame df = new DataFrame(); String[] col1 = {\"a1\", \"a2\", \"a1\", \"a1\"}; String[] col2 = {\"b1\", \"b1\", \"b2\", \"b1\"}; String[] col3 = {\"c1\", \"c1\", \"c1\", \"c2\"}; double[] counts = {1, 1, 1, 1}; double[] oCounts = {1, 0, 0, 0}; df.addColumn(\"col1\", col1); df.addColumn(\"col2\", col2); df.addColumn(\"col3\", col3); df.addColumn(\"counts\", counts); df.addColumn(\"oCounts\", oCounts); List<String> explanationAttributes = Arrays.asList( \"col1\", \"col2\", \"col3\" ); APLOutlierSummarizer summ = new APLOutlierSummarizer(true); summ.setCountColumn(\"counts\"); summ.setOutlierColumn(\"oCounts\"); summ.setMinSupport(.1); summ.setMinRatioMetric(3.0); summ.setAttributes(explanationAttributes); summ.process(df); APLExplanation e = summ.getResults(); assertEquals(1, e.getResults().size()); assertTrue(e.prettyPrint().contains(\"col1=a1\")); assertEquals(1, e.numOutliers(), 1e-10); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<Long> starts(final Iterable<Range<Long>> ranges) { List<Long> starts = new ArrayList<Long>(); for (Range<Long> range : ranges) { checkClosedOpen(range); starts.add(range.lowerEndpoint()); } return starts; }### Assistant: @Test public void testStartsRangeSet() { List<Long> starts = starts(rangeSet.asRanges()); assertEquals(1, starts.size()); assertEquals(Long.valueOf(0L), starts.get(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Set<String> doUpdateForClusterCreate() throws ConfigurationTopologyException { Set<String> configTypesUpdated = new HashSet<String>(); Configuration clusterConfig = clusterTopology.getConfiguration(); Map<String, HostGroupInfo> groupInfoMap = clusterTopology.getHostGroupInfo(); doRecommendConfigurations(clusterConfig, configTypesUpdated); doFilterPriorToClusterUpdate(clusterConfig, configTypesUpdated); Map<String, Map<String, String>> clusterProps = clusterConfig.getFullProperties(); for (Map<String, Map<String, PropertyUpdater>> updaterMap : createCollectionOfUpdaters()) { for (Map.Entry<String, Map<String, PropertyUpdater>> entry : updaterMap.entrySet()) { String type = entry.getKey(); for (Map.Entry<String, PropertyUpdater> updaterEntry : entry.getValue().entrySet()) { String propertyName = updaterEntry.getKey(); PropertyUpdater updater = updaterEntry.getValue(); Map<String, String> typeMap = clusterProps.get(type); if (typeMap != null && typeMap.containsKey(propertyName) && typeMap.get(propertyName) != null) { final String originalValue = typeMap.get(propertyName); final String updatedValue = updater.updateForClusterCreate(propertyName, originalValue, clusterProps, clusterTopology); if(updatedValue == null ) { continue; } if (!updatedValue.equals(originalValue)) { configTypesUpdated.add(type); } clusterConfig.setProperty(type, propertyName, updatedValue); } for (HostGroupInfo groupInfo : groupInfoMap.values()) { Configuration hgConfig = groupInfo.getConfiguration(); Map<String, Map<String, String>> hgConfigProps = hgConfig.getFullProperties(1); Map<String, String> hgTypeMap = hgConfigProps.get(type); if (hgTypeMap != null && hgTypeMap.containsKey(propertyName)) { final String originalValue = hgTypeMap.get(propertyName); final String updatedValue = updater.updateForClusterCreate(propertyName, originalValue, hgConfigProps, clusterTopology); if (!updatedValue.equals(originalValue)) { configTypesUpdated.add(type); } hgConfig.setProperty(type, propertyName, updatedValue); } } } } } if (clusterTopology.isNameNodeHAEnabled()) { Map<String, String> hdfsSiteConfig = clusterConfig.getFullProperties().get(\"hdfs-site\"); String nameservices = hdfsSiteConfig.get(\"dfs.nameservices\"); String int_nameservices = hdfsSiteConfig.get(\"dfs.internal.nameservices\"); if(int_nameservices == null && nameservices != null) { clusterConfig.setProperty(\"hdfs-site\", \"dfs.internal.nameservices\", nameservices); } if (! isNameNodeHAInitialActiveNodeSet(clusterProps) && ! isNameNodeHAInitialStandbyNodeSet(clusterProps)) { Collection<String> nnHosts = clusterTopology.getHostAssignmentsForComponent(\"NAMENODE\"); if (nnHosts.size() != 2) { throw new ConfigurationTopologyException(\"NAMENODE HA requires exactly 2 hosts running NAMENODE but there are: \" + nnHosts.size() + \" Hosts: \" + nnHosts); } Iterator<String> nnHostIterator = nnHosts.iterator(); clusterConfig.setProperty(\"hadoop-env\", \"dfs_ha_initial_namenode_active\", nnHostIterator.next()); clusterConfig.setProperty(\"hadoop-env\", \"dfs_ha_initial_namenode_standby\", nnHostIterator.next()); configTypesUpdated.add(\"hadoop-env\"); } } setMissingConfigurations(clusterConfig, configTypesUpdated); trimProperties(clusterConfig, clusterTopology); return configTypesUpdated; }### Assistant: @Test public void testDoUpdateForClusterCreate_DBHostProperty__exportedValue() throws Exception { Map<String, Map<String, String>> properties = new HashMap<String, Map<String, String>>(); Map<String, String> hiveSiteProps = new HashMap<String, String>(); hiveSiteProps.put(\"javax.jdo.option.ConnectionURL\", \"jdbc:mysql: Map<String, String> hiveEnvProps = new HashMap<String, String>(); hiveEnvProps.put(\"hive_database\", \"New MySQL Database\"); properties.put(\"hive-site\", hiveSiteProps); properties.put(\"hive-env\", hiveEnvProps); Configuration clusterConfig = new Configuration(properties, Collections.<String, Map<String, Map<String, String>>>emptyMap()); Collection<String> hgComponents = new HashSet<String>(); hgComponents.add(\"NAMENODE\"); hgComponents.add(\"SECONDARY_NAMENODE\"); hgComponents.add(\"RESOURCEMANAGER\"); hgComponents.add(\"MYSQL_SERVER\"); TestHostGroup group1 = new TestHostGroup(\"group1\", hgComponents, Collections.singleton(\"testhost\")); Collection<String> hgComponents2 = new HashSet<String>(); hgComponents2.add(\"DATANODE\"); hgComponents2.add(\"HDFS_CLIENT\"); TestHostGroup group2 = new TestHostGroup(\"group2\", hgComponents2, Collections.singleton(\"testhost2\")); Collection<TestHostGroup> hostGroups = new HashSet<TestHostGroup>(); hostGroups.add(group1); hostGroups.add(group2); ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups); BlueprintConfigurationProcessor updater = new BlueprintConfigurationProcessor(topology); updater.doUpdateForClusterCreate(); String updatedVal = topology.getConfiguration().getFullProperties().get(\"hive-site\").get(\"javax.jdo.option.ConnectionURL\"); assertEquals(\"jdbc:mysql: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext) { if (attribute != null) { if (!transformationContext.contains(attribute)) { return TOExecutionResult.error(this, new TransformationOperationException(\"Transformation context attribute \" + attribute + \" does not exist\")); } Object modelObj = transformationContext.get(attribute); if (modelObj == null) { return TOExecutionResult.error(this, new TransformationOperationException(\"Transformation context attribute \" + attribute + \" is null\")); } if (!(modelObj instanceof Model)) { return TOExecutionResult.error(this, new TransformationOperationException(\"Transformation context attribute \" + attribute + \" is not a Model object, but \" + modelObj.getClass().getName())); } model = (Model) modelObj; } else if (model == null) { return TOExecutionResult.error(this, new TransformationOperationException(\"Neither transformation context attribute nor Model object were specified\")); } File pomFile = new File(getAbsoluteFile(transformedAppFolder, transformationContext), \"pom.xml\"); TOExecutionResult errorResult; if (pomFile.exists()) { switch (ifPresent) { case Fail: return TOExecutionResult.error(this, new TransformationOperationException(\"There is already a pom file at \" + getRelativePath())); case WarnNotAdd: return TOExecutionResult.warning(this, new TransformationOperationException(\"There is already a pom file at \" + getRelativePath())); case NoOp: return TOExecutionResult.noOp(this, \"There is already a pom file at \" + getRelativePath()); case WarnButAdd: errorResult = writePomFile(pomFile); if (errorResult != null) return errorResult; return TOExecutionResult.warning(this, new TransformationOperationException(\"There is already a pom file at \" + getRelativePath()), \"Pom file overwritten at \" + getRelativePath()); case Overwrite: errorResult = writePomFile(pomFile); if (errorResult != null) return errorResult; return TOExecutionResult.success(this, \"Pom file overwritten at \" + getRelativePath()); } } else { try { pomFile.createNewFile(); } catch (IOException e) { return TOExecutionResult.error(this, new TransformationOperationException(\"There was an error when creating pom.xml file at \" + getRelativePath() + \", double check if that directory exists\")); } } errorResult = writePomFile(pomFile); if (errorResult != null) return errorResult; return TOExecutionResult.success(this, \"Pom file written at \" + getRelativePath()); }### Assistant: @Test public void existentOverwriteTest() { assertTrue(new File(transformedAppFolder, \"pom.xml\").exists()); TOExecutionResult executionResult = new PomFile(model).relative(\"/\").overwriteIfPresent().execution(transformedAppFolder, transformationContext); assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS); assertNull(executionResult.getException()); assertEquals(executionResult.getWarnings().size(), 0); assertEquals(executionResult.getDetails(), \"Pom file overwritten at /\"); checkCreatedPomFile(\"pom.xml\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void calculate() { String inputString = model.input.get(); try { final float input = Float.parseFloat(inputString); subscribe( new Action1<Boolean>() { @Override public void call(Boolean b) { loading.set(b); } }, rateLoader.loadRate(), new Action1<Float>() { @Override public void call(Float rate) { DecimalFormat decimalFormat = new DecimalFormat(\"0.00\", DecimalFormatSymbols.getInstance(Locale.US)); model.output.set(decimalFormat.format(input * rate)); } }, new Action1<Throwable>() { @Override public void call(Throwable throwable) { messageManager.showMessage(activityHolder, R.string.error_loading_rate); } }); } catch (NumberFormatException e) { messageManager.showMessage(activityHolder, R.string.conversion_error); } }### Assistant: @Test public void testConvertCurrency() { when(rateLoader.loadRate()).thenReturn(Observable.just(2f)); CurrencyConverterModel model = viewModel.initAndResume(); model.input.set(\"123\"); viewModel.calculate(); assertThat(model.output.get()).isEqualTo(\"246.00\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<T> query( Query query ) { validateQuery( query ); List<T> list = runQuery( query ); list = runSorter( query, list ); return PagerUtils.pageCollection( list, query.getFirstResult(), query.getMaxResults() ); }### Assistant: @Test public void testDateRange() { Query query = Query.from( schemaService.getDynamicSchema( DataElement.class ) ); query.setObjects( dataElements ); query.add( Restrictions.ge( \"created\", Year.parseYear( \"2002\" ).getStart() ) ); query.add( Restrictions.le( \"created\", Year.parseYear( \"2004\" ).getStart() ) ); List<? extends IdentifiableObject> objects = queryEngine.query( query ); assertEquals( 3, objects.size() ); assertTrue( collectionContainsUid( objects, \"deabcdefghB\" ) ); assertTrue( collectionContainsUid( objects, \"deabcdefghC\" ) ); assertTrue( collectionContainsUid( objects, \"deabcdefghD\" ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<CheckReport> scanPackage(final @NotNull File... file) throws AbortedScanException { return scanPackages(Arrays.asList(file)); }### Assistant: @Test(expected = AbortedScanException.class) public void testBuildAndScanWithInstallHookPolicyAbort() throws Exception { final File testPackage = TestPackageUtil.prepareTestPackage(\"tmp_foo_bar.zip\"); final InstallHookProcessor processor = mock(InstallHookProcessor.class); doThrow(new PackageException(\"abort\")).when(processor) .registerHooks(any(Archive.class), any(ClassLoader.class)); builder().withInstallHookProcessorFactory(() -> processor) .withInstallHookPolicy(InstallHookPolicy.ABORT) .build().scanPackage(testPackage); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String compileString(String input, String includeDirName) throws JSassCompilerException { return compileString(input, \"\", includeDirName, false); }### Assistant: @Test public void testBoxShadowTransparent() throws Exception { try (SassCompiler sassCompiler = new JSassCompiler()) { String expectedOutput = \"foo { box-shadow: 2px 4px 7px rgba(0, 0, 0, 0.5); }\"; String actualOutput = sassCompiler.compileString( \"foo { box-shadow: 2px 4px 7px rgba(0, 0, 0, 0.5); }\", \"\"); Assert.assertEquals( stripNewLines(expectedOutput), stripNewLines(actualOutput)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FilterResult runFilter(VariantEvaluation variantEvaluation) { if (variantEvaluation.isWhiteListed()) { return PASS; } FrequencyData frequencyData = variantEvaluation.getFrequencyData(); if (frequencyData.hasFrequencyOverPercentageValue(maxFreq)) { return FAIL; } return PASS; }### Assistant: @Test public void testFilterFailsVariantEvaluationWithAtLeastFrequencyOverThreshold() { VariantEvaluation variantEvaluation = makeVariantEvaluation( passFrequency(FrequencySource.THOUSAND_GENOMES), failFrequency(FrequencySource.ESP_ALL) ); assertThat(instance.runFilter(variantEvaluation), equalTo(FAIL_FREQUENCY_FILTER_RESULT)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Collection<RoboconfError> findWarnings( Collection<? extends RoboconfError> errors ) { Collection<RoboconfError> result = new ArrayList<> (); for( RoboconfError error : errors ) { if( error.getErrorCode().getLevel() == ErrorLevel.WARNING ) result.add( error ); } return result; }### Assistant: @Test public void testFindWarnings() { Collection<RoboconfError> errors = new ArrayList<> (); Assert.assertEquals( 0, RoboconfErrorHelpers.findWarnings( errors ).size()); errors.add( new RoboconfError( PM_DUPLICATE_PROPERTY )); Assert.assertEquals( 0, RoboconfErrorHelpers.findWarnings( errors ).size()); errors.add( new RoboconfError( PROJ_NO_RESOURCE_DIRECTORY )); errors = RoboconfErrorHelpers.findWarnings( errors ); Assert.assertEquals( 1, errors.size()); Assert.assertEquals( PROJ_NO_RESOURCE_DIRECTORY, errors.iterator().next().getErrorCode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int hashCode(){ return getClass().hashCode(); }### Assistant: @Test public void equalsAndHashcode() throws Exception { LocalTimeConverter conv1 = new LocalTimeConverter(); LocalTimeConverter conv2 = new LocalTimeConverter(); assertThat(conv2).isEqualTo(conv1); assertThat(conv2.hashCode()).isEqualTo(conv1.hashCode()); assertThat(conv2).isNotEqualTo(new LongConverter()); assertThat(conv2).isNotEqualTo(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getEditableValues( String editableValues, long segmentsExperienceId) { JSONObject newEditableValuesJSONObject = JSONFactoryUtil.createJSONObject(); try { JSONObject editableValuesJSONObject = JSONFactoryUtil.createJSONObject(editableValues); Iterator<String> keysIterator = editableValuesJSONObject.keys(); while (keysIterator.hasNext()) { String editableProcessorKey = keysIterator.next(); Object editableProcessorObject = editableValuesJSONObject.get( editableProcessorKey); if (!(editableProcessorObject instanceof JSONObject)) { newEditableValuesJSONObject.put( editableProcessorKey, editableProcessorObject); continue; } JSONObject editableProcessorJSONObject = (JSONObject)editableProcessorObject; if (editableProcessorJSONObject.length() <= 0) { newEditableValuesJSONObject.put( editableProcessorKey, JSONFactoryUtil.createJSONObject()); continue; } if (Objects.equals( editableProcessorKey, _KEY_FREE_MARKER_FRAGMENT_ENTRY_PROCESSOR)) { newEditableValuesJSONObject.put( editableProcessorKey, _getFreeMarkerFragmentEntryProcessorJSONObject( editableProcessorJSONObject, segmentsExperienceId)); continue; } newEditableValuesJSONObject.put( editableProcessorKey, _getFragmentEntryProcessorJSONObject( editableProcessorJSONObject, segmentsExperienceId)); } } catch (JSONException jsonException) { if (_log.isWarnEnabled()) { _log.warn(jsonException, jsonException); } } return newEditableValuesJSONObject.toJSONString(); }### Assistant: @Test public void testGetMappedEditableValues() throws Exception { String editableValues = _read( \"fragment_entry_link_mapped_editable_values.json\"); Assert.assertEquals( _objectMapper.readTree( _read( \"fragment_entry_link_mapped_editable_values_segments_\" + \"experience_0.json\")), _objectMapper.readTree( EditableValuesTransformerUtil.getEditableValues( editableValues, 0))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getVirtualServerName() { return virtualServerName; }### Assistant: @Test void testGetVirtualServerName() { DefaultWebApplication webApp = new DefaultWebApplication(); webApp.setVirtualServerName(\"myname\"); assertEquals(\"myname\", webApp.getVirtualServerName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<NamedEntity> process(Document doc) { Annotations annotations = new Annotations(doc.getId(), getType(), doc.getLanguage()); Matcher matcher = pattern.matcher(doc.getContent()); while (matcher.find()) { String email = matcher.group(0); int start = matcher.start(); annotations.add(NlpStage.NER, start, start + email.length(), NamedEntity.Category.EMAIL); } List<NamedEntity> neList = allFrom(doc.getContent(), annotations); if (\"message/rfc822\".equals(doc.getContentType())) { String metadataString = parsedEmailHeaders.stream().map(key -> doc.getMetadata().getOrDefault(key, \"\").toString()).collect(joining(\" \")); Matcher metaMatcher = pattern.matcher(metadataString); while (metaMatcher.find()) { neList.add(NamedEntity.create(NamedEntity.Category.EMAIL, metaMatcher.group(0), -1, doc.getId(), doc.getRootDocument(), EMAIL, doc.getLanguage())); } } return neList; }### Assistant: @Test public void test_one_email() { String content = \"this is a content with email@domain.com\"; List<NamedEntity> annotations = pipeline.process(createDocument(content, \"docId\", Language.ENGLISH)); assertThat(annotations).hasSize(1); assertThat(annotations.get(0).getOffset()).isEqualTo(23); assertThat(annotations.get(0).getCategory()).isEqualTo(NamedEntity.Category.EMAIL); assertThat(annotations.get(0).getMention()).isEqualTo(\"email@domain.com\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static PDPageLabels removePages(PDPageLabels pageLabels, List<Integer> pagesToRemove, int totalPages) { Map<Integer, PDPageLabelRange> labels = new TreeMap<>(pageLabels.getLabels()); List<Integer> pagesToRemoveSortedLastFirst = new ArrayList<>(pagesToRemove); pagesToRemoveSortedLastFirst.sort(Collections.reverseOrder()); for(int pageToRemove : pagesToRemoveSortedLastFirst) { Map<Integer, PDPageLabelRange> updatedLabels = new TreeMap<>(); int pageIndex = pageToRemove - 1; for(int key : labels.keySet()) { if(key <= pageIndex) { updatedLabels.put(key, labels.get(key)); } else if(key > pageIndex) { int prevKey = key - 1; if (prevKey >= 0) { updatedLabels.put(prevKey, labels.get(key)); } } } labels = updatedLabels; } int newTotalPages = totalPages - pagesToRemove.size(); PDPageLabels result = new PDPageLabels(); for(int index: labels.keySet()) { if(index < newTotalPages) { result.setLabelItem(index, labels.get(index)); } } return result; }### Assistant: @Test public void removeLastPages() throws IOException { PDDocument doc = new DocBuilder().withPages(5) .withPageLabelRange(0, \"r\") .withPageLabelRange(2, \"D\") .get(); removePages(doc, asList(3, 4, 5), result -> { assertPageLabelIndexesAre(result, 0); assertPageLabelRangeIs(result, 0, \"r\"); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Map<String, String> addValuesToNewModel(String type) { Map<String, String> successMap = new HashMap<>(); MsAttributeObject mainClass = null; List<String> dependency = null; String subAttribute = null; if (!classMap.containsKey(this.newModel.getModelName())) { logger.error( \"Model Provided does not contain the service name provided in request. Unable to import new model\"); PolicyLogger.error(MessageCodes.ERROR_DATA_ISSUE, \"AddValuesToNewModel\", \"Unable to pull out required values, file missing service name provided in request\"); successMap.put(\"error\", \"MISSING\"); return successMap; } mainClass = classMap.get(this.newModel.getModelName()); if (\".yml\".equalsIgnoreCase(type)) { newModel.setDependency(\"[]\"); if (mainClass.getSubClass() != null) { String value = new Gson().toJson(mainClass.getSubClass()); newModel.setSubAttributes(value); } if (mainClass.getAttribute() != null) { String attributes = mainClass.getAttribute().toString().replace(\"{\", \"\").replace(\"}\", \"\"); int equalsIndexForAttributes = attributes.indexOf(\"=\"); String atttributesAfterFirstEquals = attributes.substring(equalsIndexForAttributes + 1); this.newModel.setAttributes(atttributesAfterFirstEquals); } if (mainClass.getRefAttribute() != null) { String refAttributes = mainClass.getRefAttribute().toString().replace(\"{\", \"\").replace(\"}\", \"\"); int equalsIndex = refAttributes.indexOf(\"=\"); String refAttributesAfterFirstEquals = refAttributes.substring(equalsIndex + 1); this.newModel.setRefAttributes(refAttributesAfterFirstEquals); } if (mainClass.getEnumType() != null) { this.newModel.setEnumValues(mainClass.getEnumType().toString().replace(\"{\", \"\").replace(\"}\", \"\")); } if (mainClass.getMatchingSet() != null) { this.newModel.setAnnotation(mainClass.getMatchingSet().toString().replace(\"{\", \"\").replace(\"}\", \"\")); } if (mainClass.getRuleFormation() != null) { this.newModel.setRuleFormation(mainClass.getRuleFormation()); } if (mainClass.getDataOrderInfo() != null) { this.newModel.setDataOrderInfo(mainClass.getDataOrderInfo()); } } else { String dependTemp = StringUtils.replaceEach(mainClass.getDependency(), new String[] {\"[\", \"]\", \" \"}, new String[] {\"\", \"\", \"\"}); this.newModel.setDependency(dependTemp); if (this.newModel.getDependency() != null && !this.newModel.getDependency().isEmpty()) { dependency = new ArrayList<String>(Arrays.asList(dependTemp.split(\",\"))); dependency = utils.getFullDependencyList(dependency, classMap); if (!dependency.isEmpty()) { for (String element : dependency) { MsAttributeObject temp = new MsAttributeObject(); if (classMap.containsKey(element)) { temp = classMap.get(element); mainClass.addAllRefAttribute(temp.getRefAttribute()); mainClass.addAllAttribute(temp.getAttribute()); } } } } subAttribute = utils.createSubAttributes(dependency, classMap, this.newModel.getModelName()); this.newModel.setSubAttributes(subAttribute); if (mainClass.getAttribute() != null && !mainClass.getAttribute().isEmpty()) { this.newModel.setAttributes(mainClass.getAttribute().toString().replace(\"{\", \"\").replace(\"}\", \"\")); } if (mainClass.getRefAttribute() != null && !mainClass.getRefAttribute().isEmpty()) { this.newModel .setRefAttributes(mainClass.getRefAttribute().toString().replace(\"{\", \"\").replace(\"}\", \"\")); } if (mainClass.getEnumType() != null && !mainClass.getEnumType().isEmpty()) { this.newModel.setEnumValues(mainClass.getEnumType().toString().replace(\"{\", \"\").replace(\"}\", \"\")); } if (mainClass.getMatchingSet() != null && !mainClass.getMatchingSet().isEmpty()) { this.newModel.setAnnotation(mainClass.getMatchingSet().toString().replace(\"{\", \"\").replace(\"}\", \"\")); } } successMap.put(\"success\", \"success\"); return successMap; }### Assistant: @Test public void testEmptyModel() { CreateNewMicroServiceModel model = new CreateNewMicroServiceModel(\"file.yml\", \"model\", \"desc\", \"1.0\", \"id\"); assertNotNull(model); assertEquals(1, model.addValuesToNewModel(\".yml\").size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getMaxMessages() { return maxMessages; }### Assistant: @Test public void testGetMaxMessages() { final int maxMessages = OBJECT.getMaxMessages(); Assert.assertEquals(MAX_MESSAGES, maxMessages); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean supportsOutput(int channelCount, @C.Encoding int encoding) { if (Util.isEncodingLinearPcm(encoding)) { return encoding != C.ENCODING_PCM_FLOAT || Util.SDK_INT >= 21; } else { return audioCapabilities != null && audioCapabilities.supportsEncoding(encoding) && (channelCount == Format.NO_VALUE || channelCount <= audioCapabilities.getMaxChannelCount()); } }### Assistant: @Config(minSdk = 21, maxSdk = TARGET_SDK) @Test public void supportsFloatOutputFromApi21() { assertThat(defaultAudioSink.supportsOutput(CHANNEL_COUNT_STEREO, C.ENCODING_PCM_FLOAT)) .isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting List<Segment> coalesceTokenRanges( BigInteger targetSegmentSize, Map<List<String>, List<RingRange>> replicasToRange) { List<Segment> coalescedRepairSegments = Lists.newArrayList(); List<RingRange> tokenRangesForCurrentSegment = Lists.newArrayList(); BigInteger tokenCount = BigInteger.ZERO; for (Entry<List<String>, List<RingRange>> tokenRangesByReplica : replicasToRange.entrySet()) { LOG.info(\"Coalescing segments for nodes {}\", tokenRangesByReplica.getKey()); for (RingRange tokenRange : tokenRangesByReplica.getValue()) { if (tokenRange.span(rangeSize).add(tokenCount).compareTo(targetSegmentSize) > 0 && !tokenRangesForCurrentSegment.isEmpty()) { LOG.info( \"Got enough tokens for one segment ({}) : {}\", tokenCount, tokenRangesForCurrentSegment); coalescedRepairSegments.add( Segment.builder().withTokenRanges(tokenRangesForCurrentSegment).build()); tokenRangesForCurrentSegment = Lists.newArrayList(); tokenCount = BigInteger.ZERO; } tokenCount = tokenCount.add(tokenRange.span(rangeSize)); tokenRangesForCurrentSegment.add(tokenRange); } if (!tokenRangesForCurrentSegment.isEmpty()) { coalescedRepairSegments.add( Segment.builder().withTokenRanges(tokenRangesForCurrentSegment).build()); tokenRangesForCurrentSegment = Lists.newArrayList(); } } Preconditions.checkState( allTokensHaveBeenCoalesced(coalescedRepairSegments, replicasToRange), \"Number of coalesced tokens doesn't match with the total number of tokens\"); return coalescedRepairSegments; }### Assistant: @Test public void coalesceTokenRangesBy200TokensPerSegmentTests() throws ReaperException { SegmentGenerator sg = new SegmentGenerator(BigInteger.valueOf(1), BigInteger.valueOf(1500)); Map<List<String>, List<String>> rangeToEndpoint = Maps.newHashMap(); rangeToEndpoint.put(Arrays.asList(\"1\", \"200\"), Arrays.asList(\"node1\", \"node2\", \"node3\")); rangeToEndpoint.put(Arrays.asList(\"200\", \"400\"), Arrays.asList(\"node1\", \"node2\", \"node3\")); rangeToEndpoint.put(Arrays.asList(\"400\", \"600\"), Arrays.asList(\"node1\", \"node2\", \"node3\")); rangeToEndpoint.put(Arrays.asList(\"600\", \"800\"), Arrays.asList(\"node1\", \"node2\", \"node3\")); rangeToEndpoint.put(Arrays.asList(\"800\", \"1000\"), Arrays.asList(\"node1\", \"node2\", \"node3\")); rangeToEndpoint.put(Arrays.asList(\"1100\", \"1200\"), Arrays.asList(\"node1\", \"node2\", \"node3\")); rangeToEndpoint.put(Arrays.asList(\"1200\", \"1300\"), Arrays.asList(\"node1\", \"node2\", \"node3\")); rangeToEndpoint.put(Arrays.asList(\"1300\", \"1400\"), Arrays.asList(\"node1\", \"node2\", \"node3\")); rangeToEndpoint.put(Arrays.asList(\"1400\", \"1500\"), Arrays.asList(\"node1\", \"node2\", \"node3\")); Map<List<String>, List<RingRange>> replicasToRangeMap = RepairRunService.buildReplicasToRangeMap(rangeToEndpoint); List<Segment> segments = sg.coalesceTokenRanges(BigInteger.valueOf(200), replicasToRangeMap); assertEquals(7, segments.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; RsId rsId = (RsId) o; return id == rsId.id; }### Assistant: @Test public void testEquals() { assertThat(instance.equals(RsId.of(ID)), is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Pure public Integer getRawColor() { final AttributeValue val = getAttributeCollection().getAttribute(ATTR_COLOR); if (val != null) { try { return (int) val.getInteger(); } catch (AttributeException e) { } } return null; }### Assistant: @Test public void testGetRawColor() { assertNull(this.primitive.getRawColor()); this.primitive.setColor(0xFF0000); assertEquals(0xFF0000, this.primitive.getRawColor().intValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public Optional<T3> get3() { return Optional.ofNullable((T3) values[3]); }### Assistant: @Test void get3Test() { assertEquals(3, (int) instance.get3().orElseThrow(NoSuchElementException::new)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void run() { List<String> describeType = describeActionConfig.describeType; if (describeType == null || describeType.isEmpty()) { throw new IllegalArgumentException(\"Must specify a single type to describe.\"); } if (describeActionConfig.name == null || !validName(describeActionConfig.name)) { throw new IllegalArgumentException(format(\"Invalid name, must match %s\", VALID_NAME_PATTERN)); } String firstType = describeType.get(0).toLowerCase().trim(); String name = describeActionConfig.name; switch (firstType) { case \"group\": try { Group group = keywhizClient.getGroupByName(name); printing.printGroupWithDetails(group); } catch (NotFoundException e) { throw new AssertionError(\"Group not found.\"); } catch (IOException e) { throw Throwables.propagate(e); } break; case \"client\": try { Client client = keywhizClient.getClientByName(name); printing.printClientWithDetails(client); } catch (NotFoundException e) { throw new AssertionError(\"Client not found.\"); } catch (IOException e) { throw Throwables.propagate(e); } break; case \"secret\": SanitizedSecret sanitizedSecret; try { sanitizedSecret = keywhizClient.getSanitizedSecretByName(name); printing.printSanitizedSecretWithDetails(sanitizedSecret); } catch (NotFoundException e) { throw new AssertionError(\"Secret not found.\"); } catch (IOException e) { throw Throwables.propagate(e); } break; default: throw new IllegalArgumentException(\"Invalid describe type specified: \" + firstType); } }### Assistant: @Test(expected = IllegalArgumentException.class) public void describeThrowsIfTooManyArguments() throws Exception { describeActionConfig.describeType = Arrays.asList(\"group\", \"client\"); describeAction.run(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<Node, Patch<?>> diff(Node left, Node right, XMLDiffConfiguration config) throws DiffException { Map<Node, Patch<?>> patches = new LinkedHashMap<>(); Patch<Node> rootPatch = new DefaultPatch<>(); if (areSimilar(left, right)) { if (left != null) { patches.putAll(diffSimilarNodes(left, right, config)); } } else if (left == null) { rootPatch.add(new InsertDelta<>(new DefaultChunk<>(-1, Collections.<Node>emptyList()), new DefaultChunk<>(XMLDiffUtils.getNodeIndex(right), Collections.singletonList(right)))); } else if (right == null) { rootPatch.add( new DeleteDelta<>(new DefaultChunk<>(XMLDiffUtils.getNodeIndex(left), Collections.singletonList(left)), new DefaultChunk<>(-1, Collections.<Node>emptyList()))); } else { rootPatch.add( new ChangeDelta<>(new DefaultChunk<>(XMLDiffUtils.getNodeIndex(left), Collections.singletonList(left)), new DefaultChunk<>(XMLDiffUtils.getNodeIndex(right), Collections.singletonList(right)))); } if (!rootPatch.isEmpty()) { patches.put(null, rootPatch); } return patches; }### Assistant: @Test void nonSimilarNodeChange() throws Exception { Node child = this.document.getDocumentElement().getFirstChild(); Node text = this.document.getDocumentElement().getLastChild(); Map<Node, Patch<?>> patches = this.defaultXMLDiff.diff(child, text, this.config); assertEquals(1, patches.size()); Patch<?> patch = patches.get(null); assertEquals(1, patch.size()); Delta<?> delta = patch.get(0); assertEquals(Delta.Type.CHANGE, delta.getType()); assertEquals(Collections.singletonList(child), delta.getPrevious().getElements()); assertEquals(Collections.singletonList(text), delta.getNext().getElements()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<BaseDimensionalItemObject> slice( final WebOptions options, List<BaseDimensionalItemObject> dimensionalItems ) { state( options.getPage() > 0, \"Current page must be greater than zero.\" ); state( options.getPageSize() > 0, \"Page size must be greater than zero.\" ); if ( options.hasPaging() && isNotEmpty( dimensionalItems ) ) { final int currentPage = options.getPage(); final int totalOfElements = dimensionalItems.size(); final int maxElementsPerPage = options.getPageSize(); final Pager pager = new Pager( currentPage, totalOfElements, maxElementsPerPage ); final int currentElementIndex = pager.getOffset(); final boolean hasMorePages = (totalOfElements - currentElementIndex) > pager.getPageSize(); if ( hasMorePages ) { final int nextElementsWindow = pager.getPageSize() * pager.getPage(); dimensionalItems = dimensionalItems.subList( currentElementIndex, nextElementsWindow ); } else { dimensionalItems = dimensionalItems.subList( pager.getOffset(), totalOfElements ); } } return dimensionalItems; }### Assistant: @Test public void testSliceWhenFirstPage() { final int pageSize = 5; final int firstPage = 1; final int totalOfItems = 13; final WebOptions theWebOptions = mockWebOptions( pageSize, firstPage ); final List<BaseDimensionalItemObject> anyDimensionalItems = mockDimensionalItems( totalOfItems ); final List<BaseDimensionalItemObject> resultingList = slice( theWebOptions, anyDimensionalItems ); assertThat( resultingList, hasSize( 5 ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<String> findJobNames() { List<String> jobNames = hudsonFinder.findJobNames(); return jobNames; }### Assistant: @Test public void should_get_project_names() { List<String> projectNames = new ArrayList<String>(); projectNames.add(\"project1\"); projectNames.add(\"project2\"); when(hudsonFinder.findJobNames()).thenReturn(projectNames); List<String> names = hudson.findJobNames(); assertEquals(\"project1\", names.get(0)); assertEquals(\"project2\", names.get(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public static <T> Function<T, Tuple0> toTuple() { return (Function<T, Tuple0>) Tuple0MapperImpl.EMPTY_MAPPER; }### Assistant: @Test void toTuple12() { final Function<Integer, Tuple12<Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer>> mapper = Tuples.toTuple(i -> i + 0, i -> i + 1, i -> i + 2, i -> i + 3, i -> i + 4, i -> i + 5, i -> i + 6, i -> i + 7, i -> i + 8, i -> i + 9, i -> i + 10, i -> i + 11); assertTuple(mapper.apply(0), 12); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected Command onValidate() { return () -> { workflow.flush(); if (!workflow.hasErrors()) { notification.fire(new NotificationEvent(DataSetAuthoringConstants.INSTANCE.validationOk(), SUCCESS)); } else { notification.fire(new NotificationEvent(DataSetAuthoringConstants.INSTANCE.validationFailed(), ERROR)); } }; }### Assistant: @Test public void testOnValidateFailed() { when(editWorkflow.hasErrors()).thenReturn(true); presenter.onValidate().execute(); verify(editWorkflow, times(1)).flush(); final ArgumentCaptor<NotificationEvent> dataCaptor = ArgumentCaptor.forClass(NotificationEvent.class); verify(notification, times(1)).fire(dataCaptor.capture()); NotificationEvent ne = dataCaptor.getValue(); assertNotNull(ne); assertEquals(NotificationEvent.NotificationType.ERROR, ne.getType()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void pause() { for (Entry<PhysicalPartition, EventProducer> entry : _producers .entrySet()) { EventProducer producer = entry.getValue(); if (null != producer) { if (producer.isRunning()) { producer.pause(); LOG.info(\"EventProducer :\" + producer.getName() + \" pause sent\"); } else if (producer.isPaused()) { LOG.info(\"EventProducer :\" + producer.getName() + \" already paused\"); } } } }### Assistant: @Test public void testRelayChainingSCNRegress() throws InvalidConfigException, InterruptedException { final Logger log = Logger.getLogger(\"TestDatabusRelayMain.testRelayChainingSCNRegress\"); DatabusRelayTestUtil.RelayRunner r1=null,r2=null,r3 = null; ClientRunner cr = null; log.info(\"start\"); try { String[][] srcNames = { { \"com.linkedin.events.example.Account\", \"com.linkedin.events.example.Settings\" }, }; PhysicalSourceConfig[] srcConfigs = new PhysicalSourceConfig[srcNames.length]; int i = 0; int eventRatePerSec = 10; int largestEventSize = 512*1024; long largestWindowSize = 1*1024*1024; for (String[] srcs : srcNames) { PhysicalSourceConfig src1 = DatabusRelayTestUtil.createPhysicalConfigBuilder( (short) (i + 1),DatabusRelayTestUtil.getPhysicalSrcName(srcs[0]), \"mock\", 500, eventRatePerSec, srcs); srcConfigs[i++] = src1; } int relayPort = 11993; final DatabusRelayMain relay1 = DatabusRelayTestUtil.createDatabusRelayWithSchemaReg(1019, relayPort, 10 * 1024 * 1024, srcConfigs, SCHEMA_REGISTRY_DIR); final DatabusRelayMain relay3 = DatabusRelayTestUtil.createDatabusRelayWithSchemaReg(1020, relayPort, 10 * 1024 * 1024, srcConfigs, SCHEMA_REGISTRY_DIR); Assert.assertNotNull(relay1); Assert.assertNotNull(relay3); r1 = new DatabusRelayTestUtil.RelayRunner(relay1); final DbusEventsTotalStats stats = relay1.getInboundEventStatisticsCollector().getTotalStats(); final DbusEventsTotalStats stats3 = relay3.getInboundEventStatisticsCollector().getTotalStats(); PhysicalSourceConfig[] chainedSrcConfigs = new PhysicalSourceConfig[srcNames.length]; int j = 0; for (String[] srcs : srcNames) { PhysicalSourceConfig src1 = DatabusRelayTestUtil.createPhysicalConfigBuilder( (short) (j + 1),DatabusRelayTestUtil.getPhysicalSrcName(srcs[0]), \"localhost:\" + relayPort, 500, eventRatePerSec,0,largestEventSize,largestWindowSize,srcs); chainedSrcConfigs[j++] = src1; } int chainedRelayPort = relayPort + 1; final DatabusRelayMain relay2 = DatabusRelayTestUtil.createDatabusRelayWithSchemaReg(1021, chainedRelayPort, 10 * 1024 * 1024, chainedSrcConfigs,SCHEMA_REGISTRY_DIR); Assert.assertNotNull(relay2); r2 = new DatabusRelayTestUtil.RelayRunner(relay2); resetSCN(relay2); String srcSubscriptionString = TestUtil.join(srcNames[0], \",\"); String serverName = \"localhost:\" + chainedRelayPort; CountingConsumer countingConsumer = new CountingConsumer(); DatabusSourcesConnection clientConn = RelayEventProducer .createDatabusSourcesConnection(\"testProducer\", serverName, srcSubscriptionString, countingConsumer, 1 * 1024 * 1024, largestEventSize, 30 * 1000, 100, 15 * 1000, 1, true,largestEventSize/10); cr = new ClientRunner(clientConn); r1.start(); Thread.sleep(10*1000); r2.start(); cr.start(); r1.pause(); Thread.sleep(1000); long firstGenDataEvents = stats.getNumDataEvents(); long firstGenMinScn = stats.getMinScn(); long firstGenWindows = stats.getNumSysEvents(); Assert.assertTrue(stats.getNumSysEvents() > 0); log.warn(\"relay1: numDataEvents=\" + firstGenDataEvents + \" numWindows=\" + firstGenWindows + \" minScn=\" + firstGenMinScn + \" maxScn=\" + stats.getMaxScn()); Thread.sleep(4*1000); boolean s = r1.shutdown(2000); Assert.assertTrue(s); DbusEventsTotalStats stats2 = relay2.getInboundEventStatisticsCollector().getTotalStats(); long firstGenChainWindows = stats2.getNumSysEvents(); log.warn(\"relay2: numDataEvents=\" + stats2.getNumDataEvents() + \" numWindows=\" + firstGenChainWindows + \" minScn=\" + stats2.getMinScn() + \" maxScn=\" + stats2.getMaxScn()); Thread.sleep(2*1000); r3 = new DatabusRelayTestUtil.RelayRunner(relay3); r3.start(); Thread.sleep(15*1000); r3.pause(); Thread.sleep(35*1000); log.warn(\"relay3: numDataEvents=\" + stats3.getNumDataEvents() + \" numWindows=\" + stats3.getNumSysEvents() + \" minScn=\" + stats3.getMinScn() + \" maxScn=\" + stats3.getMaxScn()); stats2 = relay2.getInboundEventStatisticsCollector().getTotalStats(); log.warn(\"relay2b: numDataEvents=\" + stats2.getNumDataEvents() + \" numWindows=\" + stats2.getNumSysEvents() + \" minScn=\" + stats2.getMinScn() + \" maxScn=\" + stats2.getMaxScn()); log.warn(\"consumer: \" + countingConsumer); Assert.assertEquals(stats2.getMinScn(), firstGenMinScn) ; Assert.assertEquals(stats2.getMaxScn(), stats3.getMaxScn()); Assert.assertEquals(stats2.getNumSysEvents(), (firstGenChainWindows-1) + stats3.getNumSysEvents()); Assert.assertTrue(stats2.getNumDataEvents() > stats3.getNumDataEvents()); Assert.assertEquals(countingConsumer.getNumSources(), 2); Assert.assertEquals(stats2.getNumSysEvents(), countingConsumer .getNumWindows()); boolean sorted= true; long prev = -1; log.info(\" scn seq on consumer=\"); for (Long l: countingConsumer.getEndScns()) { sorted = sorted && (l >= prev); prev=l; log.info(l+ \" \"); if (!sorted) break; } Assert.assertTrue(sorted); } finally { cleanup ( new DatabusRelayTestUtil.RelayRunner[] {r1,r2,r3} , cr); log.info(\"end\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SchemaAndValue toConnectData(String topic, byte[] value) { JsonNode jsonValue; try { jsonValue = deserializer.deserialize(topic, value); } catch (SerializationException e) { throw new DataException(\"Converting byte[] to Kafka Connect data failed due to serialization error: \", e); } if (enableSchemas && (jsonValue == null || !jsonValue.isObject() || jsonValue.size() != 2 || !jsonValue.has(\"schema\") || !jsonValue.has(\"payload\"))) throw new DataException(\"JsonDeserializer with schemas.enable requires \\\"schema\\\" and \\\"payload\\\" fields and may not contain additional fields\"); if (!enableSchemas) { ObjectNode envelope = JsonNodeFactory.instance.objectNode(); envelope.set(\"schema\", null); envelope.set(\"payload\", jsonValue); jsonValue = envelope; } return jsonToConnect(jsonValue); }### Assistant: @Test public void shortToConnect() { assertEquals(new SchemaAndValue(Schema.INT16_SCHEMA, (short) 12), converter.toConnectData(TOPIC, \"{ \\\"schema\\\": { \\\"type\\\": \\\"int16\\\" }, \\\"payload\\\": 12 }\".getBytes())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private static String getReqProviderName(EidasRequest eidasRequest) { if (eidasRequest.getSectorType() == EidasRequestSectorType.PRIVATE) { if (eidasRequest.getRequesterId() != null) { return eidasRequest.getRequesterId(); } if (eidasRequest.getProviderName() != null) { return eidasRequest.getProviderName(); } } return null; }### Assistant: @Test void whenRequestTypePrivateThenProviderNameIsRequesterId() { Mockito.when(eidasRequest.getSectorType()).thenReturn(EidasRequestSectorType.PRIVATE); Mockito.when(eidasRequest.getRequesterId()).thenReturn(\"private_SP\"); RequestSession requestSession = new RequestSession(\"relayState\", eidasRequest); Assertions.assertEquals(\"private_SP\", requestSession.getReqProviderName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void publish(Application application) { Set<Class<?>> classes = new LinkedHashSet<>(); Set<Class<?>> appClasses = application.getClasses(); if (appClasses != null) { classes.addAll(appClasses); } if (application instanceof EverrestApplication) { EverrestApplication everrest = (EverrestApplication)application; for (Map.Entry<String, Class<?>> e : everrest.getResourceClasses().entrySet()) { Class<?> clazz = e.getValue(); addResource(e.getKey(), clazz); classes.remove(clazz); } for (Map.Entry<String, Object> e : everrest.getResourceSingletons().entrySet()) { addResource(e.getKey(), e.getValue()); } for (ObjectFactory<? extends ObjectModel> factory : everrest.getFactories()) { addFactory(factory); classes.remove(factory.getObjectModel().getObjectClass()); } } for (Class<?> clazz : classes) { addPerRequest(clazz); } Set<Object> singletons = application.getSingletons(); if (singletons != null) { for (Object instance : singletons) { addSingleton(instance); } } }### Assistant: @Test public void publishesMessageBodyWriterWithFactoryAndOverridesPerRequestMessageBodyWriterThroughEverrestApplication() { EverrestApplication application = mock(EverrestApplication.class); ObjectFactory messageBodyWriterFactory = mockObjectFactory(StringEntityProvider.class); when(application.getClasses()).thenReturn(newHashSet(StringEntityProvider.class)); when(application.getFactories()).thenReturn(newHashSet(messageBodyWriterFactory)); publisher.publish(application); verify(providers, never()).addMessageBodyWriter(StringEntityProvider.class); verify(providers).addMessageBodyWriter(messageBodyWriterFactory); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean hasConfiguration(final PersistenceUnitDescriptor descriptor) { for (final ConfigurationFactory factory : CONFIG_FACTORIES) { if (factory.isSupported(descriptor)) { return true; } } return false; }### Assistant: @Test public void testHibernateOgmMongoDbConfigurationIsAvailable() { final Map<String, Object> properties = new HashMap<>(); when(descriptor.getProperties()).thenReturn(properties); properties.put(\"hibernate.ogm.datastore.provider\", \"org.hibernate.ogm.datastore.mongodb.impl.MongoDBDatastoreProvider\"); final boolean hasConfiguration = registry.hasConfiguration(descriptor); assertTrue(hasConfiguration); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int eval(final JBBPBitInputStream inStream, final int currentCompiledBlockOffset, final JBBPCompiledBlock block, final JBBPNamedNumericFieldMap fieldMap) { final int result; if (this.externalFieldName == null) { final JBBPNamedFieldInfo namedField = block.getNamedFields()[this.namedFieldIndex]; final JBBPNumericField numericField = fieldMap.get(namedField); if (numericField == null) { throw new java.lang.ArithmeticException(\"Can't find field '\" + namedField.getFieldName() + \"' among numeric fields\"); } else { result = numericField.getAsInt(); } } else { result = this.externalFieldName.equals(\"$\") ? (int) inStream.getCounter() : fieldMap.getExternalFieldValue(this.externalFieldName, block, this); } return result; }### Assistant: @Test public void testExternalValueNamedAsFirstCharDollar() { final int value = 1234; final JBBPNamedNumericFieldMap map = new JBBPNamedNumericFieldMap((fieldName, numericFieldMap, compiledBlock) -> { if (fieldName.equals(\"$value\")) { return value; } assertNotNull(numericFieldMap); assertNotNull(compiledBlock); fail(\"Unexpected request for value [\" + fieldName + ']'); return -1; }); final List<JBBPNamedFieldInfo> list = new ArrayList<>(); final byte[] compiled = new byte[] {0}; final JBBPCompiledBlock compiledBlock = JBBPCompiledBlock.prepare().setCompiledData(compiled).setSource(\"none\").setNamedFieldData(list).build(); JBBPOnlyFieldEvaluator expr = new JBBPOnlyFieldEvaluator(\"$value\", -1); assertEquals(value, expr.eval(null, 0, compiledBlock, map)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <K, A> void createIndexTable(final String tableName, final Class<K> objectKeyClass, final Class<A> valueClass, final Connection connection){ final String objectKeySQLiteType = DBUtils.getDBTypeForClass(objectKeyClass); final String objectValueSQLiteType = DBUtils.getDBTypeForClass(valueClass); final String sqlCreateTable = String.format( \"CREATE TABLE IF NOT EXISTS cqtbl_%s (objectKey %s, value %s, PRIMARY KEY (objectKey, value)) WITHOUT ROWID;\", tableName, objectKeySQLiteType, objectValueSQLiteType); Statement statement = null; try { statement = connection.createStatement(); statement.executeUpdate(sqlCreateTable); }catch (SQLException e){ throw new IllegalStateException(\"Unable to create index table: \" + tableName, e); }finally { DBUtils.closeQuietly(statement); } }### Assistant: @Test public void testCreateIndexTable() throws SQLException { Connection connection = null; Statement statement = null; try { ConnectionManager connectionManager = temporaryFileDatabase.getConnectionManager(true); connection = spy(connectionManager.getConnection(null, noQueryOptions())); statement = spy(connection.createStatement()); when(connection.createStatement()).thenReturn(statement); DBQueries.createIndexTable(NAME, Integer.class, String.class, connection); assertObjectExistenceInSQLIteMasterTable(TABLE_NAME, \"table\", true, connectionManager); assertObjectExistenceInSQLIteMasterTable(INDEX_NAME, \"index\", false, connectionManager); verify(statement, times(1)).close(); }finally { DBUtils.closeQuietly(connection); DBUtils.closeQuietly(statement); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <ResourceT> Page<ResourceT> empty() { return new Page<ResourceT>() { @Override public boolean hasNextPage() { return false; } @Override public String getNextPageToken() { return \"\"; } @Override public Page<ResourceT> getNextPage() { return null; } @Override public Iterable<ResourceT> iterateAll() { return Collections.emptyList(); } @Override public Iterable<ResourceT> getValues() { return Collections.emptyList(); } }; }### Assistant: @Test public void testEmpty() { assertThat(Pages.<Integer>empty().iterateAll()).isEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ApiException createException( Throwable cause, StatusCode statusCode, boolean retryable) { switch (statusCode.getCode()) { case CANCELLED: return new CancelledException(cause, statusCode, retryable); case NOT_FOUND: return new NotFoundException(cause, statusCode, retryable); case UNKNOWN: return new UnknownException(cause, statusCode, retryable); case INVALID_ARGUMENT: return new InvalidArgumentException(cause, statusCode, retryable); case DEADLINE_EXCEEDED: return new DeadlineExceededException(cause, statusCode, retryable); case ALREADY_EXISTS: return new AlreadyExistsException(cause, statusCode, retryable); case PERMISSION_DENIED: return new PermissionDeniedException(cause, statusCode, retryable); case RESOURCE_EXHAUSTED: return new ResourceExhaustedException(cause, statusCode, retryable); case FAILED_PRECONDITION: return new FailedPreconditionException(cause, statusCode, retryable); case ABORTED: return new AbortedException(cause, statusCode, retryable); case OUT_OF_RANGE: return new OutOfRangeException(cause, statusCode, retryable); case UNIMPLEMENTED: return new UnimplementedException(cause, statusCode, retryable); case INTERNAL: return new InternalException(cause, statusCode, retryable); case UNAVAILABLE: return new UnavailableException(cause, statusCode, retryable); case DATA_LOSS: return new DataLossException(cause, statusCode, retryable); case UNAUTHENTICATED: return new UnauthenticatedException(cause, statusCode, retryable); default: return new UnknownException(cause, statusCode, retryable); } }### Assistant: @Test public void outOfRange() { Truth.assertThat(createException(Code.OUT_OF_RANGE)).isInstanceOf(OutOfRangeException.class); Truth.assertThat(createExceptionWithMessage(Code.OUT_OF_RANGE)) .isInstanceOf(OutOfRangeException.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ODocument toDocument(Map<String, Object> objModel, ODocument docToPopulate, ODatabaseDocumentTx db, String orientDocClass) throws ConflictException { return toDocument(objModel, docToPopulate, db, orientDocClass, false, true); }### Assistant: @Test public void mapToDocNullTest() throws ConflictException { assertNull(DocumentUtil.toDocument(null, null, db, orientDocClass, false, true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TModel createBPEL4WSProcessTModel(QName serviceName, String targetNamespace, Map<QName,PortType> portTypes, String bpelOverviewURL) { TModel tModel = new TModel(); tModel.setTModelKey(keyDomainURI + serviceName.getLocalPart() + \"Process\"); Name name = new Name(); name.setLang(\"en\"); name.setValue(serviceName.getLocalPart()); tModel.setName(name); OverviewURL overviewURL = new OverviewURL(); overviewURL.setValue(\"http: OverviewDoc overviewDoc = new OverviewDoc(); overviewDoc.setOverviewURL(overviewURL); tModel.getOverviewDoc().add(overviewDoc); CategoryBag categoryBag = new CategoryBag(); if (targetNamespace!=null) { KeyedReference namespaceReference = WSDL2UDDI.newKeyedReference( \"uddi:uddi.org:xml:namespace\", \"uddi-org:xml:namespace\", targetNamespace); categoryBag.getKeyedReference().add(namespaceReference); } KeyedReference typesReference = WSDL2UDDI.newKeyedReference( \"uddi:uddi.org:bpel:types\", \"uddi-org:bpel:types\", \"process\"); categoryBag.getKeyedReference().add(typesReference); for (QName qName : portTypes.keySet()) { String portTypeKey = keyDomainURI + qName.getLocalPart(); KeyedReference portTypeReference = WSDL2UDDI.newKeyedReference( \"uddi:uddi.org:wsdl:porttypereference\", \"uddi-org:wsdl:portTypeReference\", portTypeKey); categoryBag.getKeyedReference().add(portTypeReference); } tModel.setCategoryBag(categoryBag); if (log.isDebugEnabled()) { log.debug(new PrintUDDI<TModel>().print(tModel)); } return tModel; }### Assistant: @Test public void testHelloWorld_BPEL4WSProcessTModel() throws WSDLException, JAXBException , Exception{ String targetNamespace = \"http: QName serviceName = new QName (targetNamespace, \"HelloWorld\"); String bpelOverViewUrl = \"http: Definition wsdlDefinition = rw.readWSDL(\"bpel/HelloWorld.wsdl\"); @SuppressWarnings(\"unchecked\") Map<QName,PortType> portTypes= (Map<QName,PortType>) wsdlDefinition.getAllPortTypes(); TModel bpel4WSTModel = bpel2UDDI.createBPEL4WSProcessTModel(serviceName, targetNamespace, portTypes, bpelOverViewUrl); System.out.println(\"***** BPEL4WS Process TModel: \" + bpel4WSTModel.getName().getValue()); if (serialize) System.out.println(pTModel.print(bpel4WSTModel)); Assert.assertNotNull(bpel4WSTModel); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Schema load(final JSONObject schemaJson) { return SchemaLoader.load(schemaJson, new DefaultSchemaClient()); }### Assistant: @Test public void enumSchema() { EnumSchema actual = (EnumSchema) SchemaLoader.load(get(\"enumSchema\")); Map<String, Object> expectedObject = new HashMap<>(); expectedObject.put(\"a\", \"b\"); assertEquals(new HashSet<>(asList(1, 2, \"a\", expectedObject, null)), new HashSet<>(actual.getPossibleValues())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Activate public synchronized void activate(final DiscoveryConfig config, final BundleContext context) { this.config = config; this.context = context; LOG.debug(\"Received configuration update for Zookeeper Discovery: {}\", config); startClient(); }### Assistant: @Test public void testDefaults() throws ConfigurationException, InstantiationException, IllegalAccessException, InterruptedException { Map<String, Object> configuration = new HashMap<>(); zkd.activate(convert(configuration), context); sem.tryAcquire(10, TimeUnit.SECONDS); assertEquals(\"localhost\", config.zookeeper_host()); assertEquals(\"2181\", config.zookeeper_port()); assertEquals(3000, config.zookeeper_timeout()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static DeleteThingResponse of(final String thingId, final DittoHeaders dittoHeaders) { return of(ThingId.of(thingId), dittoHeaders); }### Assistant: @Test public void toJsonReturnsExpected() { final DeleteThingResponse underTest = DeleteThingResponse.of(TestConstants.Thing.THING_ID, DittoHeaders.empty()); final JsonObject actualJsonUpdated = underTest.toJson(FieldType.regularOrSpecial()); assertThat(actualJsonUpdated).isEqualTo(KNOWN_JSON); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> updateCertOwner(String token, String certType,String certName,String certOwnerEmailId, UserDetails userDetails) throws Exception { Map<String, String> metaDataParams = new HashMap<String, String>(); Map<String, String> dataMetaDataParams = new HashMap<String, String>(); SSLCertificateRequest certificateRequest = new SSLCertificateRequest(); token = userDetails.getSelfSupportToken(); boolean isValidEmail = true; String certOwnerNtId =\"\"; Object[] users = null; DirectoryUser dirUser = new DirectoryUser(); if (!isValidInputs(certName, certType) || !validateCertficateEmail(certOwnerEmailId)) { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder() .put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER)) .put(LogMessage.ACTION, \"transferCertificate\") .put(LogMessage.MESSAGE, \"Invalid user inputs\") .put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL)).build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Invalid input values\\\"]}\"); } ResponseEntity<DirectoryObjects> userResponse = directoryService.searchByUPN(certOwnerEmailId); if(userResponse.getStatusCode().equals(HttpStatus.OK)) { users = userResponse.getBody().getData().getValues(); if(!ObjectUtils.isEmpty(users)) { dirUser = (DirectoryUser) users[0]; certOwnerNtId = dirUser.getUserName(); } } if(certOwnerNtId==\"\"){ log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder() .put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER)) .put(LogMessage.ACTION, \"updateCertOwner\") .put(LogMessage.MESSAGE, \"Invalid user inputs\") .put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL)).build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"User unavailable\\\"]}\"); } String endPoint = certName; CertResponse enrollResponse = new CertResponse(); String metaDataPath = (certType.equalsIgnoreCase(\"internal\"))? SSLCertificateConstants.SSL_CERT_PATH + \"/\" + endPoint :SSLCertificateConstants.SSL_EXTERNAL_CERT_PATH + \"/\" + endPoint; String permissionMetaDataPath = (certType.equalsIgnoreCase(\"internal\"))? SSLCertificateConstants.SSL_CERT_PATH_VALUE + endPoint :SSLCertificateConstants.SSL_CERT_PATH_VALUE_EXT + endPoint; Response response = new Response(); Response dataResponse = new Response(); if (!userDetails.isAdmin()) { Boolean isPermission = validateCertOwnerPermissionForNonAdmin(userDetails, certName, certType); if (!isPermission) { return ResponseEntity.status(HttpStatus.UNAUTHORIZED) .body(\"{\\\"errors\\\":[\\\"\" + \"Access denied: No permission to transfer the ownership of this certificate\" + \"\\\"]}\"); } } try { if (userDetails.isAdmin()) { response = reqProcessor.process(\"/read\", \"{\\\"path\\\":\\\"\" + metaDataPath + \"\\\"}\", token); dataResponse = reqProcessor.process(\"/read\", \"{\\\"path\\\":\\\"\" + permissionMetaDataPath + \"\\\"}\", token); } else { response = reqProcessor.process(\"/read\", \"{\\\"path\\\":\\\"\" + metaDataPath + \"\\\"}\", userDetails.getSelfSupportToken()); dataResponse = reqProcessor.process(\"/read\", \"{\\\"path\\\":\\\"\" + permissionMetaDataPath + \"\\\"}\", userDetails.getSelfSupportToken()); } } catch (Exception e) { log.error( JSONUtil.getJSON( ImmutableMap.<String, String> builder() .put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()) .put(LogMessage.ACTION, String.format(\"Exception = [%s] = Message [%s]\", Arrays.toString(e.getStackTrace()), response.getResponse())) .build())); return ResponseEntity.status(response.getHttpstatus()) .body(\"{\\\"messages\\\":[\\\"\" + \"Certificate unavailable\" + \"\\\"]}\"); } if (!HttpStatus.OK.equals(response.getHttpstatus())) { return ResponseEntity.status(response.getHttpstatus()) .body(\"{\\\"errors\\\":[\\\"\" + \"Certificate unavailable\" + \"\\\"]}\"); } JsonParser jsonParser = new JsonParser(); ObjectMapper objMapper = new ObjectMapper(); JsonObject object = ((JsonObject) jsonParser.parse(response.getResponse())).getAsJsonObject(\"data\"); JsonObject dataObject = ((JsonObject) jsonParser.parse(dataResponse.getResponse())).getAsJsonObject(\"data\"); metaDataParams = new Gson().fromJson(object.toString(), Map.class); if(certOwnerEmailId.equalsIgnoreCase(metaDataParams.get(\"certOwnerEmailId\"))) { isValidEmail=false; } if(dataObject!=null) { dataMetaDataParams = new Gson().fromJson(dataObject.toString(), Map.class); dataMetaDataParams.put(\"certOwnerNtid\", certOwnerNtId); dataMetaDataParams.put(\"certOwnerEmailId\", certOwnerEmailId); } if((Objects.nonNull(metaDataParams)) && (Objects.nonNull(metaDataParams.get(\"requestStatus\"))) && metaDataParams.get(\"requestStatus\").equalsIgnoreCase(SSLCertificateConstants.REQUEST_PENDING_APPROVAL)) { return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Certificate may not be approved or rejected from NCLM\\\"]}\"); } if(!isValidEmail) { return ResponseEntity.status(HttpStatus.BAD_REQUEST) .body(\"{\\\"errors\\\":[\\\"\" + \"New owner email id should not be same as owner email id\" + \"\\\"]}\"); } String certificateUser = metaDataParams.get(\"certOwnerNtid\"); boolean sslMetaDataUpdationStatus; metaDataParams.put(\"certOwnerEmailId\", certOwnerEmailId); metaDataParams.put(\"certOwnerNtid\", certOwnerNtId); certificateRequest.setCertificateName(certName); certificateRequest.setCertType(certType); certificateRequest.setCertOwnerEmailId(certOwnerEmailId); certificateRequest.setCertOwnerNtid(certOwnerNtId); try { if (userDetails.isAdmin()) { sslMetaDataUpdationStatus = ControllerUtil.updateMetaData(metaDataPath, metaDataParams, token); if(dataObject!=null) { sslMetaDataUpdationStatus = ControllerUtil.updateMetaData(permissionMetaDataPath, dataMetaDataParams, token); } } else { sslMetaDataUpdationStatus = ControllerUtil.updateMetaData(metaDataPath, metaDataParams, userDetails.getSelfSupportToken()); if(dataObject!=null) { sslMetaDataUpdationStatus = ControllerUtil.updateMetaData(permissionMetaDataPath, dataMetaDataParams, userDetails.getSelfSupportToken()); } } if (sslMetaDataUpdationStatus) { boolean isPoliciesCreated=true; removeSudoPermissionForPreviousOwner( certificateUser.toLowerCase(), certName,userDetails,certType); addSudoPermissionToCertificateOwner(certificateRequest, userDetails, enrollResponse, isPoliciesCreated, true,token,\"transfer\"); sendTransferEmail(metaDataParams,certificateRequest.getCertOwnerNtid(),certificateUser); log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"sendTransferEmail\"). put(LogMessage.MESSAGE, String.format(\"Successfully sent Transfer email notification oldOwner= \" + \"[%s] newOwner =[%s] for certificate [%s] on date = [%s]\", getUserEmail(getUserDetails(certificateUser)), getUserEmail(getUserDetails(certificateRequest.getCertOwnerNtid())) , metaDataParams.get(\"certificateName\"),java.time.LocalDateTime.now())). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.OK) .body(\"{\\\"messages\\\":[\\\"\" + \"Certificate Owner Transferred Successfully\" + \"\\\"]}\"); } else { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder() .put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()) .put(LogMessage.ACTION, \"updateCertOwner\") .put(LogMessage.MESSAGE, \"Certificate owner Transfer failed for CertificateID\") .put(LogMessage.STATUS, HttpStatus.INTERNAL_SERVER_ERROR.toString()) .put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()) .build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST) .body(\"{\\\"errors\\\":[\\\"\" + \"Certificate owner Transfer failed\" + \"\\\"]}\"); } } catch (Exception e) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder() .put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()) .put(LogMessage.ACTION, String.format(\"Inside Exception = [%s] = Message [%s]\", Arrays.toString(e.getStackTrace()), e.getMessage())) .build())); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR) .body(\"{\\\"errors\\\":[\\\"\" + e.getMessage() + \"\\\"]}\"); } }### Assistant: @Test public void transferSSLCertificate_Failure() throws Exception { String jsonStr = \"{ \\\"username\\\": \\\"testusername1\\\", \\\"password\\\": \\\"testpassword1\\\"}\"; String jsonStr2 = \"{\\\"certificates\\\":[{\\\"sortedSubjectName\\\": \\\"CN=CertificateName.t-mobile.com, C=US, \" + \"ST=Washington, \" + \"L=Bellevue, O=T-Mobile USA, Inc\\\",\" + \"\\\"certificateId\\\":57258,\\\"certificateStatus\\\":\\\"Active\\\",\" + \"\\\"containerName\\\":\\\"cont_12345\\\",\\\"NotAfter\\\":\\\"2021-06-15T04:35:58-07:00\\\"}]}\"; SSLCertificateMetadataDetails sslCertificateRequest = getSSLCertificateMetadataDetails(); UserDetails userDetails = new UserDetails(); userDetails.setSelfSupportToken(\"tokentTest\"); userDetails.setUsername(\"normaluser\"); userDetails.setAdmin(true); userDetails.setClientToken(token); userDetails.setSelfSupportToken(token); Map<String, Object> requestMap = new HashMap<>(); requestMap.put(\"access_token\", \"12345\"); requestMap.put(\"token_type\", \"type\"); when(ControllerUtil.parseJson(jsonStr)).thenReturn(requestMap); CertManagerLogin certManagerLogin = new CertManagerLogin(); certManagerLogin.setToken_type(\"token type\"); certManagerLogin.setAccess_token(\"1234\"); String metaDataJson = \"{\\\"data\\\":{\\\"akmid\\\":\\\"102463\\\",\\\"applicationName\\\":\\\"tvs\\\",\\\"applicationOwnerEmailId\\\":\\\"SpectrumClearingTools@T-Mobile.com\\\",\\\"applicationTag\\\":\\\"TVS\\\",\\\"authority\\\":\\\"T-Mobile Issuing CA 01 - SHA2\\\",\\\"certCreatedBy\\\":\\\"nnazeer1\\\",\\\"certOwnerEmailId\\\":\\\"ltest@smail.com\\\",\\\"certType\\\":\\\"internal\\\",\\\"certificateId\\\":59880,\\\"certificateName\\\":\\\"certtest260630.t-mobile.com\\\",\\\"certificateStatus\\\":\\\"Revoked\\\",\\\"containerName\\\":\\\"VenafiBin_12345\\\",\\\"createDate\\\":\\\"2020-06-26T05:10:41-07:00\\\",\\\"expiryDate\\\":\\\"2021-06-26T05:10:41-07:00\\\",\\\"projectLeadEmailId\\\":\\\"Daniel.Urrutia@T-Mobile.Com\\\",\\\"users\\\":{\\\"normaluser\\\":\\\"write\\\",\\\"certuser\\\":\\\"read\\\",\\\"safeadmin\\\":\\\"deny\\\",\\\"testsafeuser\\\":\\\"write\\\",\\\"testuser1\\\":\\\"deny\\\",\\\"testuser2\\\":\\\"read\\\"}}}\"; Response response = new Response(); response.setHttpstatus(HttpStatus.OK); response.setResponse(metaDataJson); response.setSuccess(true); when(reqProcessor.process(eq(\"/read\"), anyObject(), anyString())).thenReturn(response); CertResponse certResponse = new CertResponse(); certResponse.setHttpstatus(HttpStatus.OK); certResponse.setResponse(jsonStr); certResponse.setSuccess(true); when(reqProcessor.processCert(eq(\"/auth/certmanager/login\"), anyObject(), anyString(), anyString())).thenReturn(certResponse); when(ControllerUtil.updateMetaData(anyString(), anyMap(), anyString())).thenReturn(Boolean.TRUE); DirectoryObjects obj =new DirectoryObjects(); DirectoryObjectsList objList = new DirectoryObjectsList(); DirectoryUser user = new DirectoryUser(); user.setDisplayName(\"name\"); user.setUserName(\"213\"); Object[] values = null; objList.setValues(values); obj.setData(objList); when(directoryService.searchByUPN(anyString())). thenReturn(ResponseEntity.status(HttpStatus.OK).body(obj)); ResponseEntity<?> transferCertResponse = sSLCertificateService.updateCertOwner(token,\"internal\",\"certificatename.t-mobile.com\",\"owneremail@test.com\",userDetails); assertNotNull(transferCertResponse); assertEquals(HttpStatus.BAD_REQUEST, transferCertResponse.getStatusCode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Optional<Connector> findByPlugin(String pluginId) { String query = startBaseQuery().append(\" WHERE [\").append(JcrConnector.PLUGIN_ID).append(\"] = '\").append(pluginId).append(\"'\").toString(); return Optional.ofNullable(findFirst(query)); }### Assistant: @Test(dependsOnMethods=\"testDelete\") public void testFindByPlugin() { metadata.read(() -> { Optional<Connector> conn = this.connectorProvider.findByPlugin(\"plugin1\"); assertThat(conn).isNotNull().isPresent(); assertThat(conn.get()).extracting(\"pluginId\", \"systemName\", \"title\", \"description\").contains(\"plugin1\", \"test_1_connector\", \"Test 1 Connector\", \"Test description 1\"); }, MetadataAccess.SERVICE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure public static List<UUID> getAttributeUUIDs(Node document, boolean caseSensitive, String... path) { assert document != null : AssertMessages.notNullParameter(0); final List<UUID> ids = new ArrayList<>(); final String v = getAttributeValue(document, caseSensitive, 0, path); if (v != null && !v.isEmpty()) { for (final String id : v.split(COLUMN_SEPARATOR)) { try { ids.add(UUID.fromString(id)); } catch (Exception e) { } } } return ids; }### Assistant: @Test public void getAttributeUUIDsNodeBooleanStringArray() { UUID id1 = UUID.fromString(\"e48d046f-975c-4a22-92ff-cb23b50716ce\"); UUID id2 = UUID.fromString(\"4f89a62d-04d3-4aec-ab67-8f60bff3d5b0\"); List<UUID> ids = Arrays.asList(id1, id2); assertEquals(ids, XMLUtil.getAttributeUUIDs(this.document, true, \"catalog\", \"book\", \"title\", \"uuids1\")); assertEquals(Collections.emptyList(), XMLUtil.getAttributeUUIDs(this.document, true, \"catalog\", \"book\", \"title\", \"Uuids1\")); assertEquals(ids, XMLUtil.getAttributeUUIDs(this.document, false, \"catalog\", \"book\", \"title\", \"uuids1\")); assertEquals(ids, XMLUtil.getAttributeUUIDs(this.document, false, \"catalog\", \"book\", \"title\", \"Uuids1\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private boolean match(IndexedNodeType module, NodeTemplate offering){ if(module.getProperties() == null) return true; PropertyValue offeringType = getPropertyValue(\"\", offering.getProperties().get(\"resource_type\")); for(String p:module.getProperties().keySet()) { if (!offering.getProperties().containsKey(p) && offeringType.getValue().equals(\"compute\") && p.endsWith(\"_support\")) continue; if (!offering.getProperties().containsKey(p) && p.endsWith(\"_version\")) continue; if(!offering.getProperties().containsKey(p)) return false; PropertyDefinition moduleProperty = module.getProperties().get(p); AbstractPropertyValue offeringProperty = offering.getProperties().get(p); if(!matchProperty(moduleProperty, offeringProperty)) return false; } return true; }### Assistant: @Test public void testMatchmakerOutput() throws Exception { ToscaParser parser = new ToscaParserSupplier().get(); assertNotNull(parser); ParsingResult<ArchiveRoot> aam = parser.parseFile(Paths.get(Resources.getResource(\"aams/atos_aam.yml\").toURI())); ParsingResult<ArchiveRoot> offerings = parser.parseFile(Paths.get(Resources.getResource(\"aams/atos_offerings.yml\").toURI())); Map<String, Pair<NodeTemplate, String>> offeringsToMatch = new HashMap<>(); Map<String, NodeTemplate> offeringsNt = offerings.getResult().getTopology().getNodeTemplates(); for(String ntn : offeringsNt.keySet()){ offeringsToMatch.put(ntn, new Pair<NodeTemplate, String>(offeringsNt.get(ntn), ntn)); } Map<String, HashSet<String>> res = new Matchmaker().match(aam, offeringsToMatch); assertNotNull(res); assertEquals(res.get(\"webservices\").size(), 1); assertEquals(res.get(\"db1\").size(), 4); assertEquals(res.get(\"www\").size(), 3); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T5> get5() { return getAndCast(5); }### Assistant: @Test void get5() { assertEquals(m5, instance.get5()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void createNewException(final String id, final String cause) { long currentMillis = java.lang.System.currentTimeMillis(); final List<Long> timestampsOfExceptionEvents = this.getEvents().stream().filter(e -> e.getEventType().equals(EEventType.EXCEPTION)) .map(Event::getTimestamp).collect(Collectors.toList()); while (timestampsOfExceptionEvents.contains(currentMillis)) { currentMillis++; } this.getEvents().add(new Event(id, currentMillis, EEventType.EXCEPTION, cause)); }### Assistant: @Test public void testCreateNewException() { final long currentMillis = java.lang.System.currentTimeMillis(); final String expectedCause = \"Exception thrown in application 'sampleApplication' by class 'boolean java.sql.Statement.execute(String)':\\\\n ...\"; final Event expectedEvent = new Event(\"4\", currentMillis, EEventType.EXCEPTION, expectedCause); this.l.createNewException(\"4\", expectedCause); final Event actualEvent = this.l.getEvents().get(0); assertEquals(expectedEvent.getEventType(), actualEvent.getEventType()); assertEquals(expectedEvent.getEventMessage(), actualEvent.getEventMessage()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public double getAccelerationAtDistance(double distance) { if (DoubleMath.fuzzyEquals(distance, totalDistance, totalDistance * ROUNDING_ERROR_FRACTION)) { TraversalSection lastSection = Iterables.getLast(sections); return lastSection.getAccelerationAtTime(lastSection.getDuration()); } if (distance < 0) { throw new TraversalCalculationException(\"Negative distance provided.\"); } if (distance >= totalDistance) { throw new TraversalCalculationException(\"Distance beyond end of traversal provided\"); } return SegmentGraphUtilities.getValueAt( sections, TraversalSection::getTotalDistance, TraversalSection::getAccelerationAtDistance, distance); }### Assistant: @Test void getAccelerationAtDistance_returnsExpectedValue() { assertThat(constantAccelerationTraversal.getAccelerationAtDistance(2.4)).isCloseTo(2, within(0.000001)); assertThat(constantAccelerationTraversal.getAccelerationAtDistance(4.4)).isCloseTo(0, within(0.000001)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String[] getUrls() { return urls.getValue().clone(); }### Assistant: @Test public void testEmptyWhenTypeChanges() { final StreamDiscoverer discoverer = new StreamDiscoverer(rootTable, \"Camera\"); String[] urls = {\"foo\", \"bar\"}; rootTable.getEntry(\"Camera/streams\").setStringArray(urls); waitForNtEvents(); rootTable.getEntry(\"Camera/streams\").forceSetBoolean(false); waitForNtEvents(); assertArrayEquals(new String[0], discoverer.getUrls()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Map<String, SampleGenotype> createAlleleSampleGenotypes(VariantContext variantContext, int altAlleleId) { ImmutableMap.Builder<String, SampleGenotype> builder = ImmutableMap.builder(); Allele refAllele = variantContext.getReference(); Allele altAllele = variantContext.getAlternateAllele(altAlleleId); logger.debug(\"Making sample genotypes for altAllele: {} {} {} {}\", altAlleleId, refAllele, altAllele, variantContext); for (Genotype genotype : variantContext.getGenotypes()) { logger.debug(\"Building sample genotype for {}\", genotype); AlleleCall[] alleleCalls = buildAlleleCalls(refAllele, altAllele, genotype.getAlleles()); SampleGenotype sampleGenotype = buildSampleGenotype(genotype, alleleCalls); logger.debug(\"Variant [{} {}] sample {} {} has genotype {}\", variantContext.getReference(), altAllele, genotype, genotype.getType(), sampleGenotype); String sampleName = genotype.getSampleName(); builder.put(sampleName, sampleGenotype); } return builder.build(); }### Assistant: @Test public void testSingleSampleHomRef() { List<Allele> alleles = buildAlleles(\"A\", \"T\"); Genotype genotype = buildUnPhasedSampleGenotype(\"Adam\", alleles.get(0), alleles.get(0)); VariantContext variantContext = buildVariantContext(1, 12345, alleles, genotype); Map<String, SampleGenotype> result = VariantContextSampleGenotypeConverter.createAlleleSampleGenotypes(variantContext, 0); Map<String, SampleGenotype> expected = ImmutableMap.of(\"Adam\", SampleGenotype.of(AlleleCall.REF, AlleleCall.REF)); System.out.println(result); assertThat(result, equalTo(expected)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T extends Component> T copy(T component) { return copy(component, null); }### Assistant: @Test public void testCopyUsingCloningWithDataFieldSucceeds() { DataField dataFieldOriginal = initializeDataField(); DataField dataFieldCopy = CopyUtils.copy(dataFieldOriginal); assertTrue(ComponentCopyPropertiesMatch(dataFieldOriginal, dataFieldCopy)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getLocator() { myLogger.LogFunctionStartDebug( \"getLocator()\" ); String lvsReturn = \"\"; if ( _Locators != null ) { ST st = new ST( _locator, '$', '$' ); Integer i = 1; for ( OKWLocatorBase Locator : _Locators ) { st.add( \"L\" + i.toString(), Locator.getLocator() ); i++; } lvsReturn = st.render(); } else { lvsReturn = _locator; } myLogger.LogFunctionEndDebug( lvsReturn ); return lvsReturn; }### Assistant: @Test public void TC_Kombiniert_2in1() { OKWLocator L1 = new OKWLocator( \">Locator1<\" ); OKWLocator L2 = new OKWLocator( \">Locator2<\" ); OKWLocator Locator_Summe = new OKWLocator( \"Locator1=$L1$ assertEquals( \"Locator1=>Locator1< }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public PhysicalPlan implement(LogicalPlan plan) { ElasticsearchIndexScan indexScan = new ElasticsearchIndexScan(client, settings, indexName, new ElasticsearchExprValueFactory(getFieldTypes())); return plan.accept(new DefaultImplementor<ElasticsearchIndexScan>() { @Override public PhysicalPlan visitFilter(LogicalFilter node, ElasticsearchIndexScan context) { if (!(node.getChild().get(0) instanceof LogicalRelation)) { return super.visitFilter(node, context); } FilterQueryBuilder queryBuilder = new FilterQueryBuilder(new DefaultExpressionSerializer()); QueryBuilder query = queryBuilder.build(node.getCondition()); context.pushDown(query); return visitChild(node, context); } @Override public PhysicalPlan visitAggregation(LogicalAggregation node, ElasticsearchIndexScan context) { if ((node.getChild().get(0) instanceof LogicalRelation) || (node.getChild().get(0) instanceof LogicalFilter && node.getChild().get(0) .getChild().get(0) instanceof LogicalRelation)) { AggregationQueryBuilder builder = new AggregationQueryBuilder(new DefaultExpressionSerializer()); List<AggregationBuilder> aggregationBuilder = builder.buildAggregationBuilder(node.getAggregatorList(), node.getGroupByList()); context.pushDownAggregation(aggregationBuilder); context.pushTypeMapping( builder.buildTypeMapping(node.getAggregatorList(), node.getGroupByList())); return visitChild(node, context); } else { return super.visitAggregation(node, context); } } @Override public PhysicalPlan visitRelation(LogicalRelation node, ElasticsearchIndexScan context) { return indexScan; } }, indexScan); }### Assistant: @Test void implementOtherLogicalOperators() { when(settings.getSettingValue(Settings.Key.QUERY_SIZE_LIMIT)).thenReturn(200); String indexName = \"test\"; NamedExpression include = named(\"age\", ref(\"age\", INTEGER)); ReferenceExpression exclude = ref(\"name\", STRING); ReferenceExpression dedupeField = ref(\"name\", STRING); Expression filterExpr = literal(ExprBooleanValue.of(true)); List<NamedExpression> groupByExprs = Arrays.asList(named(\"age\", ref(\"age\", INTEGER))); List<NamedAggregator> aggregators = Arrays.asList(named(\"avg(age)\", new AvgAggregator(Arrays.asList(ref(\"age\", INTEGER)), DOUBLE))); Map<ReferenceExpression, ReferenceExpression> mappings = ImmutableMap.of(ref(\"name\", STRING), ref(\"lastname\", STRING)); Pair<ReferenceExpression, Expression> newEvalField = ImmutablePair.of(ref(\"name1\", STRING), ref(\"name\", STRING)); Integer sortCount = 100; Pair<Sort.SortOption, Expression> sortField = ImmutablePair.of(Sort.SortOption.PPL_ASC, ref(\"name1\", STRING)); LogicalPlan plan = project( LogicalPlanDSL.dedupe( sort( eval( remove( rename( relation(indexName), mappings), exclude), newEvalField), sortCount, sortField), dedupeField), include); Table index = new ElasticsearchIndex(client, settings, indexName); assertEquals( PhysicalPlanDSL.project( PhysicalPlanDSL.dedupe( PhysicalPlanDSL.sort( PhysicalPlanDSL.eval( PhysicalPlanDSL.remove( PhysicalPlanDSL.rename( new ElasticsearchIndexScan(client, settings, indexName, exprValueFactory), mappings), exclude), newEvalField), sortCount, sortField), dedupeField), include), index.implement(plan)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public User getUser(final String identifier) throws AuthorizationAccessException { Validate.notBlank(identifier); final DatabaseUser databaseUser = getDatabaseUser(identifier); if (databaseUser == null) { return null; } return mapToUser(databaseUser); }### Assistant: @Test public void testGetUserByIdentifierWhenExists() { configureWithInitialUsers(); final String userIdentifier = UUID.randomUUID().toString(); final String userIdentity = \"user1\"; createUser(userIdentifier, userIdentity); final User retrievedUser1 = userGroupProvider.getUser(userIdentifier); assertNotNull(retrievedUser1); assertEquals(userIdentifier, retrievedUser1.getIdentifier()); assertEquals(userIdentity, retrievedUser1.getIdentity()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CallbackRequest handle(HttpServletRequest req) throws LineBotCallbackException, IOException { final String signature = req.getHeader(WebhookParser.SIGNATURE_HEADER_NAME); final byte[] json = ByteStreams.toByteArray(req.getInputStream()); try { return parser.handle(signature, json); } catch (WebhookParseException e) { throw new LineBotCallbackException(e.getMessage(), e); } }### Assistant: @Test public void testNullRequest() { final byte[] requestBody = \"null\".getBytes(StandardCharsets.UTF_8); final MockHttpServletRequest request = new MockHttpServletRequest(); request.addHeader(\"X-Line-Signature\", \"SSSSIGNATURE\"); request.setContent(requestBody); doReturn(true).when(lineSignatureValidator).validateSignature(requestBody, \"SSSSIGNATURE\"); assertThatThrownBy(() -> lineBotCallbackRequestParser.handle(request)) .isInstanceOf(LineBotCallbackException.class) .hasMessage(\"Invalid content\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean permittedTopology(DimensionInfo sourceDimensionInfo, DimensionInfo targetDimensionInfo) { return true; }### Assistant: @Test public void testPermittedTopology_polygon_polygon() { DimensionInfo sourceDimensionInfo = DimensionInfo.XY_POLYGON; DimensionInfo targetDimensionInfo = DimensionInfo.XY_POLYGON; EhEqualsFF instance = new EhEqualsFF(); boolean expResult = true; boolean result = instance.permittedTopology(sourceDimensionInfo, targetDimensionInfo); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Container generateMasterDetailsPattern(NodeBusinessObjectInput nodeBusinessObjectInput, List<List<Element>> rows) { rows.add(Collections.<Element>singletonList(createTitle(nodeBusinessObjectInput.formatName()))); if (isRootOrMultipleInput(nodeBusinessObjectInput)) { TableWidget table = addTableWidget(nodeBusinessObjectInput, rows); rows.add(Collections.<Element>singletonList(table.toComponent(dimensionFactory))); } else { if (nodeBusinessObjectInput.getDataReference() != null && nodeBusinessObjectInput.getDataReference().getLoadingType().equals(BusinessDataReference.LoadingType.LAZY)) { BusinessDataLazyRef content = generateVariable(nodeBusinessObjectInput); businessObjectContainer.addVariable(nodeBusinessObjectInput.getPageDataName(), new Variable(DataType.URL, content.create().getValue().toString())); } } List<Element> row = createDetailsRow(nodeBusinessObjectInput); rows.add(row); return (Container) row.get(1); }### Assistant: @Test public void should_generate_title_and_table_widgets_pattern_when_node_is_read() { BusinessObjectContainer boc = new BusinessObjectContainer(); BusinessDataToWidgetMapper businessDataToWidgetMapper = makeBusinessDataToWidgetMapper(boc); NodeBusinessObjectInput node = new NodeBusinessObjectInput(\"com.company.model.person\", \"person\"); node.addInput(aContractInput(\"addresses\").mulitple().withType(String.class.getName()).build()); node.addInput(aContractInput(\"firstName\").withType(String.class.getName()).build()); node.addInput(aContractInput(\"lastName\").withType(String.class.getName()).build()); businessDataToWidgetMapper.generateMasterDetailsPattern(node, boc.getContainer().getRows()); Component title = (Component) boc.getContainer().getRows().get(0).get(0); assertThat(title.getId()).isEqualTo(\"pbTitle\"); PropertyValue titleCollectionPropertyValue = title.getPropertyValues().get(\"text\"); assertThat(titleCollectionPropertyValue.getType()).isEqualTo(\"interpolation\"); assertThat(titleCollectionPropertyValue.getValue()).isEqualTo(\"Person\"); Component tableWidget = (Component) boc.getContainer().getRows().get(1).get(0); assertThat(tableWidget.getId()).isEqualTo(\"pbTable\"); Map<String, Variable> variables = boc.getBusinessObjectVariable(); assertThat(variables.size()).isEqualTo(1); assertThat(variables.get(\"person_selected\")).isNotNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean add(String key, TObject value, long record) { return add(key, value, record, true, true, true); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testCannotWriteFunction() { add(\"foo\", Convert.javaToThrift(new IndexFunction(\"average\", \"age\")), 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String peekLine() throws IOException { fillNextLine(); return nextLine; }### Assistant: @Test public void peekLine() throws IOException { try (LookAheadReader reader = new LookAheadReader(new StringReader(\"one\\rtwo\"))) { assertEquals(\"one\", reader.peekLine()); assertEquals(\"one\", reader.peekLine()); assertEquals(\"one\", reader.readLine()); assertEquals(\"two\", reader.peekLine()); assertEquals(\"two\", reader.readLine()); assertEquals(null, reader.readLine()); assertEquals(null, reader.readLine()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void close() { finished(); if (logAtInfo) { log.info(\"{}\", this); } else { if (log.isDebugEnabled()) { log.debug(\"{}\", this); } } }### Assistant: @Test public void testDurationInfoWithMultipleClose() throws Exception { DurationInfo info = new DurationInfo(log, \"test\"); Thread.sleep(1000); info.close(); info.close(); Assert.assertTrue(info.value() > 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings({\"rawtypes\" }) public List query(final Map<String, Object> parameters) { return super.queryForList(\"SMS_CONTENT_LOG.query\", parameters); }### Assistant: @Test public void testQuery() throws Exception { Map<String,Object> parameters = new HashMap<String,Object>(); smsContentLogDAO.query(parameters); parameters.put(\"status\", \"9\"); smsContentLogDAO.query(parameters); parameters.put(\"id\", \"12\"); smsContentLogDAO.query(parameters); parameters.put(\"mobile\", \"13917677725\"); smsContentLogDAO.query(parameters); parameters.put(\"startDate\",\"2010-09-12\"); smsContentLogDAO.query(parameters); parameters.put(\"endDate\", \"2010-12-12\"); smsContentLogDAO.query(parameters); parameters.clear(); parameters.put(\"condition\", \"1=1\"); smsContentLogDAO.query(parameters); parameters.put(\"startIndex\", \"0\"); parameters.put(\"endIndex\", \"10\"); smsContentLogDAO.query(parameters); parameters.clear(); parameters.put(\"startIndex\", \"0\"); parameters.put(\"endIndex\", \"3\"); Assert.assertEquals(3, smsContentLogDAO.query(parameters).size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void initialize( Instance instance ) throws PluginException { this.logger.fine(this.agentId + \": initializing the plugin for \" + instance); File instanceDirectory = InstanceHelpers.findInstanceDirectoryOnAgent( instance ); ScriptUtils.setScriptsExecutable( new File( instanceDirectory, SCRIPTS_FOLDER_NAME )); }### Assistant: @Test public void testInitialize() throws Exception { Instance inst = new Instance(\"whatever\").component(new Component(\"whatever\").installerName( PluginScript.PLUGIN_NAME )); this.plugin.initialize( inst ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getPrefix(String namespace) { return getNamespaceProperties(Objects.isNull(namespace) ? \"\" : namespace).getPrefix(); }### Assistant: @Test public void getNamespacePrefix() { String systemTmpDir = System.getProperty(\"java.io.tmpdir\"); File f = new File(systemTmpDir + \"/org.eclipse.winery.test/namespace.json\"); f.delete(); JsonBasedNamespaceManager namespaceManager = new JsonBasedNamespaceManager(f); String prefix = namespaceManager.getPrefix(Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE); assertEquals(\"winery\", prefix); assertFalse(f.exists()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void port(Tracker tracker) { SharedPreferences newSettings = tracker.getPreferences(); if (mLegacyPrefs.getBoolean(LEGACY_PREF_OPT_OUT, false)) { newSettings.edit().putBoolean( Tracker.PREF_KEY_TRACKER_OPTOUT, true ).apply(); mLegacyPrefs.edit().remove(LEGACY_PREF_OPT_OUT).apply(); } if (mLegacyPrefs.contains(LEGACY_PREF_USER_ID)) { newSettings.edit().putString( Tracker.PREF_KEY_TRACKER_USERID, mLegacyPrefs.getString(LEGACY_PREF_USER_ID, UUID.randomUUID().toString()) ).apply(); mLegacyPrefs.edit().remove(LEGACY_PREF_USER_ID).apply(); } if (mLegacyPrefs.contains(LEGACY_PREF_FIRST_VISIT)) { newSettings.edit().putLong( Tracker.PREF_KEY_TRACKER_FIRSTVISIT, mLegacyPrefs.getLong(LEGACY_PREF_FIRST_VISIT, -1L) ).apply(); mLegacyPrefs.edit().remove(LEGACY_PREF_FIRST_VISIT).apply(); } if (mLegacyPrefs.contains(LEGACY_PREF_VISITCOUNT)) { newSettings.edit().putLong( Tracker.PREF_KEY_TRACKER_VISITCOUNT, mLegacyPrefs.getInt(LEGACY_PREF_VISITCOUNT, 0) ).apply(); mLegacyPrefs.edit().remove(LEGACY_PREF_VISITCOUNT).apply(); } if (mLegacyPrefs.contains(LEGACY_PREF_PREV_VISIT)) { newSettings.edit().putLong( Tracker.PREF_KEY_TRACKER_PREVIOUSVISIT, mLegacyPrefs.getLong(LEGACY_PREF_PREV_VISIT, -1) ).apply(); mLegacyPrefs.edit().remove(LEGACY_PREF_PREV_VISIT).apply(); } final Iterator<? extends Map.Entry<String, ?>> it = mLegacyPrefs.getAll().entrySet().iterator(); while (it.hasNext()) { final Map.Entry<String, ?> oldEntry = it.next(); if (oldEntry.getKey().startsWith(\"downloaded:\")) { newSettings.edit().putBoolean(oldEntry.getKey(), true).apply(); mLegacyPrefs.edit().remove(oldEntry.getKey()).apply(); } } }### Assistant: @Test public void testPort_previousVisit_empty() { when(mPrefs.contains(LegacySettingsPorter.LEGACY_PREF_PREV_VISIT)).thenReturn(false); mPorter.port(mTracker); verify(mTrackerPrefs, never()).edit(); verify(mPrefs, never()).edit(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Case update(ItemValuesMap itemValues, List<String> photoBitPaths) throws IOException { setCurrentDateIfRegistrationNotExist(itemValues); Gson gson = new Gson(); Blob caseBlob = new Blob(gson.toJson(itemValues.getValues()).getBytes()); Blob audioFileDefault = getAudioBlob(); Case child = caseDao.getCaseByUniqueId(itemValues.getAsString(CASE_ID)); child.setLastUpdatedDate(new Date(Calendar.getInstance().getTimeInMillis())); child.setContent(caseBlob); child.setName(getName(itemValues)); String location = itemValues.has(LOCATION) ? itemValues.getAsString(LOCATION) : \"\"; child.setLocation(location); int age = itemValues.getAsInt(AGE) != null ? itemValues.getAsInt(AGE) : EMPTY_AGE; child.setAge(age); child.setCaregiver(getCaregiverName(itemValues)); child.setRegistrationDate(Utils.getRegisterDateByYyyyMmDd(itemValues.getAsString(REGISTRATION_DATE))); child.setAudio(audioFileDefault); child.setSynced(false); child = caseDao.update(child); updatePhoto(child, photoBitPaths); return child; }### Assistant: @Test public void should_update_case_when_give_item_values() throws Exception { ItemValuesMap itemValues = new ItemValuesMap(); itemValues.addStringItem(CASE_ID, \"existedUniqueId\"); itemValues.addNumberItem(AGE, 18); itemValues.addStringItem(REGISTRATION_DATE, \"2016/12/25\"); Case expected = new Case(); when(caseDao.getCaseByUniqueId(\"existedUniqueId\")).thenReturn(expected); expected.setContent(new Blob(new String(\"\").getBytes())); when(caseDao.update(expected)).thenReturn(expected); Case actual = caseService.update(itemValues, Collections.EMPTY_LIST); verify(caseDao, times(1)).update(actual); verify(casePhotoDao, times(1)).getIdsByCaseId(actual.getId()); assertFalse(\"Sync status should be false\", actual.isSynced()); assertThat(\"Age should be 18\", actual.getAge(), is(18)); assertThat(\"Registration date should be 2016/12/25\", actual.getRegistrationDate(), is (Utils.getRegisterDateByYyyyMmDd(\"2016/12/25\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Long create( String value ) { if (value == null) return null; try { return Long.valueOf(value.trim()); } catch (NumberFormatException err) { throw new ValueFormatException(value, getPropertyType(), GraphI18n.errorConvertingType.text(String.class.getSimpleName(), Long.class.getSimpleName(), value), err); } }### Assistant: @Test( expected = ValueFormatException.class ) public void shouldNotCreateLongFromReference() { factory.create(mock(Reference.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void commandSucceeded(CommandSucceededEvent event) { MongoDBCommandTraceContext commandContext = contexts.get(); if (commandContext == null || commandContext.getRequestId() != event.getRequestId()) { contexts.remove(); return; } Labels.Builder labels = Labels.builder(); labels.add(MongoLabels.STATUS, \"SUCCESS\"); tracer.annotateSpan(commandContext.getContext(), labels.build()); tracer.endSpan(commandContext.getContext()); contexts.remove(); }### Assistant: @Test public void testCommandSucceeded() { commandListener.commandStarted(findStartEvent); StartSpanEvent startEvent = tracer.startSpanEvents.get(0); tracer.reset(); commandListener.commandSucceeded(findSucceededEvent); assertThat(tracer.endSpanEvents).hasSize(1); EndSpanEvent endSpanEvent = tracer.endSpanEvents.get(0); assertThat(endSpanEvent.getTraceContext()).isEqualTo(startEvent.getTraceContext()); assertThat(endSpanEvent.getEndSpanOptions()).isNull(); assertThat(tracer.annotateEvents).hasSize(1); AnnotateEvent annotateEvent = tracer.annotateEvents.get(0); assertThat(annotateEvent.getTraceContext()).isEqualTo(endSpanEvent.getTraceContext()); assertThat(annotateEvent.getLabels().getLabels()).contains( new Label(\"/mongodb/status\", \"SUCCESS\") ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void accept(Long revision, List<WatchEvent> allWatchEvents) throws EtcdException { Builder<ByteSequence, List<WatchEvent>> listsBuilder = builderWithExpectedSize(splitConsumers.size()); ImmutableSet<ByteSequence> prefixes = splitConsumers.keySet(); for (ByteSequence keyPrefix : prefixes) { listsBuilder.put(keyPrefix, new ArrayList<WatchEvent>()); } ImmutableMap<ByteSequence, List<WatchEvent>> lists = listsBuilder.build(); for (WatchEvent watchEvent : allWatchEvents) { for (ByteSequence keyPrefix : prefixes) { if (watchEvent.getKeyValue().getKey().startsWith(keyPrefix)) { lists.get(keyPrefix).add(watchEvent); } } } for (Map.Entry<ByteSequence, List<WatchEvent>> list: lists.entrySet()) { List<WatchEvent> eventsList = list.getValue(); if (!eventsList.isEmpty()) { splitConsumers.get(list.getKey()).accept(eventsList); } } revAwaiter.ifPresent(revAwait -> revAwait.update(revision)); }### Assistant: @Test public void testOnlyOper() throws EtcdException { EtcdWatcherSplittingConsumer splitter = new EtcdWatcherSplittingConsumer(empty(), consumers); splitter.accept(1L, Lists.newArrayList(newWatchEvent(append(OPERATIONAL_PREFIX, (byte)123)))); assertThat(configConsumer.counter.get()).isEqualTo(0L); assertThat(operConsumer.counter.get()).isEqualTo(1L); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GetMapping(\"/log\") @ApiOperation(\"\u4e0b\u8f7d\u670d\u52a1\u5668\u65e5\u5fd7\") @PreAuthorize(\"hasAnyRole('ADMIN')\") public void downloadLogFile(HttpServletResponse response) throws IOException { fileInfoService.downloadLogFile(response); }### Assistant: @Test void downloadLogFile() { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DDMFormInstanceRecordWriterResponse write( DDMFormInstanceRecordWriterRequest ddmFormInstanceRecordWriterRequest) throws Exception { Map<String, String> ddmFormFieldsLabel = ddmFormInstanceRecordWriterRequest.getDDMFormFieldsLabel(); int rowIndex = 0; try (ByteArrayOutputStream byteArrayOutputStream = createByteArrayOutputStream(); Workbook workbook = createWorkbook()) { Sheet sheet = workbook.createSheet(); CellStyle headerCellStyle = createCellStyle( workbook, true, \"Courier New\", (short)14); createRow( rowIndex++, headerCellStyle, ddmFormFieldsLabel.values(), sheet); CellStyle rowCellStyle = createCellStyle( workbook, false, \"Courier New\", (short)12); List<Map<String, String>> ddmFormFieldsValueList = ddmFormInstanceRecordWriterRequest.getDDMFormFieldValues(); for (Map<String, String> ddmFormFieldsValue : ddmFormFieldsValueList) { createRow( rowIndex++, rowCellStyle, ddmFormFieldsValue.values(), sheet); } workbook.write(byteArrayOutputStream); DDMFormInstanceRecordWriterResponse.Builder builder = DDMFormInstanceRecordWriterResponse.Builder.newBuilder( byteArrayOutputStream.toByteArray()); return builder.build(); } }### Assistant: @Test public void testWrite() throws Exception { Map<String, String> ddmFormFieldsLabel = Collections.emptyMap(); List<Map<String, String>> ddmFormFieldValues = new ArrayList<Map<String, String>>() { { add( HashMapBuilder.put( \"field1\", \"2\" ).build()); add( HashMapBuilder.put( \"field1\", \"1\" ).build()); } }; DDMFormInstanceRecordWriterRequest.Builder builder = DDMFormInstanceRecordWriterRequest.Builder.newBuilder( ddmFormFieldsLabel, ddmFormFieldValues); DDMFormInstanceRecordWriterRequest ddmFormInstanceRecordWriterRequest = builder.build(); DDMFormInstanceRecordXLSWriter ddmFormInstanceRecordXLSWriter = mock( DDMFormInstanceRecordXLSWriter.class); ByteArrayOutputStream byteArrayOutputStream = mock( ByteArrayOutputStream.class); when( ddmFormInstanceRecordXLSWriter.createByteArrayOutputStream() ).thenReturn( byteArrayOutputStream ); when( byteArrayOutputStream.toByteArray() ).thenReturn( new byte[] {1, 2, 3} ); Workbook workbook = mock(Workbook.class); when( ddmFormInstanceRecordXLSWriter.createWorkbook() ).thenReturn( workbook ); Mockito.doNothing( ).when( workbook ).write( byteArrayOutputStream ); when( ddmFormInstanceRecordXLSWriter.write( ddmFormInstanceRecordWriterRequest) ).thenCallRealMethod(); DDMFormInstanceRecordWriterResponse ddmFormInstanceRecordWriterResponse = ddmFormInstanceRecordXLSWriter.write(builder.build()); Assert.assertArrayEquals( new byte[] {1, 2, 3}, ddmFormInstanceRecordWriterResponse.getContent()); InOrder inOrder = Mockito.inOrder( ddmFormInstanceRecordXLSWriter, workbook, byteArrayOutputStream); inOrder.verify( workbook, Mockito.times(1) ).createSheet(); inOrder.verify( ddmFormInstanceRecordXLSWriter, Mockito.times(1) ).createCellStyle( Matchers.any(Workbook.class), Matchers.anyBoolean(), Matchers.anyString(), Matchers.anyByte() ); inOrder.verify( ddmFormInstanceRecordXLSWriter, Mockito.times(1) ).createRow( Matchers.anyInt(), Matchers.any(CellStyle.class), Matchers.anyCollection(), Matchers.any(Sheet.class) ); inOrder.verify( ddmFormInstanceRecordXLSWriter, Mockito.times(1) ).createCellStyle( Matchers.any(Workbook.class), Matchers.anyBoolean(), Matchers.anyString(), Matchers.anyByte() ); inOrder.verify( ddmFormInstanceRecordXLSWriter, Mockito.times(2) ).createRow( Matchers.anyInt(), Matchers.any(CellStyle.class), Matchers.anyCollection(), Matchers.any(Sheet.class) ); inOrder.verify( workbook, Mockito.times(1) ).write( byteArrayOutputStream ); inOrder.verify( byteArrayOutputStream, Mockito.times(1) ).toByteArray(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public JBBPOut Bit(final boolean value) throws IOException { assertNotEnded(); if (this.processCommands) { this.outStream.writeBits(value ? 1 : 0, JBBPBitNumber.BITS_1); } return this; }### Assistant: @Test public void testBit() throws Exception { assertArrayEquals(new byte[] {1}, BeginBin().Bit(1).End().toByteArray()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onValueChange(final ValueChangeEvent<String> event) { if (Arrays.asList(OperatorsOracle.EXPLICIT_LIST_OPERATORS).contains(constraint.getOperator())) { constraint.setValue(replaceQuotes(event.getValue())); } else { constraint.setValue(event.getValue()); } if (onChangeCommand != null) { onChangeCommand.execute(); } }### Assistant: @Test public void alterValueForLists() { doReturn(\"in\").when(constraint).getOperator(); doReturn(\"a,\\\\\\\"b,c\\\\\\\",d\").when(valueChangeEvent).getValue(); handler.onValueChange(valueChangeEvent); verify(onChangeCommand).execute(); verify(constraint).setValue(\"a,\\\"b,c\\\",d\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String build(DataForm form) { if (form == null) return \"\"; StringBuilder sb = new StringBuilder(); List<String> instructions = form.getInstructions(); for (String instruction: instructions) { sb.append(\"<p class='instruction'>\" + instruction + \"</p>\"); } Iterator<FormField> fields = form.getFields().iterator(); while (fields.hasNext()) { FormField field = fields.next(); FormField.Type type = field.getType(); sb.append(\"<p>\"); if (type == FormField.Type.hidden) { sb.append(hiddenFieldToHtml(field)); } else if (type == FormField.Type.fixed) { sb.append(fixedFieldToHtml(field)); } else if (type == FormField.Type.jid_single) { sb.append(jidSingleFieldToHtml(field)); } else if (type == FormField.Type.text_single || type == null) { sb.append(textSingleFieldToHtml(field)); } else if (type == FormField.Type.text_private) { sb.append(textPrivateFieldToHtml(field)); } else if (type == FormField.Type.text_multi) { sb.append(textMultiFieldToHtml(field)); } else if (type == FormField.Type.list_single) { sb.append(listSingleFieldToHtml(field)); } else if (type == FormField.Type.list_multi) { sb.append(listMultiFieldToHtml(field)); } else if (type == FormField.Type.jid_multi) { sb.append(textMultiFieldToHtml(field)); } else if (type == FormField.Type.bool) { sb.append(booleanFieldToHtml(field)); } else { throw new RuntimeException(\"Unknown field type: \" + type); } sb.append(descToHtml(field)); sb.append(\"</p>\"); } return sb.toString(); }### Assistant: @Test public void testTextPrivateField() { FormField field = new FormField(\"abc def\"); field.setType(FormField.Type.text_private); field.addValue(VALUE1); form.addField(field); String actual = builder.build(form); String expected = \"<p><input id='abc-def' name='abc def' value='Value 1' type='password' /></p>\"; Assert.assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getPLUSPLUS() { return \"++\"; }### Assistant: @Test public void testGetPLUSPLUS() { String actual = table.getPLUSPLUS(); String expected = \"++\"; assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean validateDirContext(DirContextType contextType, DirContext dirContext) { Assert.notNull(contextType, \"contextType may not be null\"); Assert.notNull(dirContext, \"dirContext may not be null\"); try { final NamingEnumeration<SearchResult> searchResults = dirContext.search(this.base, this.filter, this.searchControls); if (searchResults.hasMore()) { this.logger.debug(\"DirContext '{}' passed validation.\", dirContext); return true; } } catch (Exception e) { this.logger.debug(\"DirContext '{}' failed validation with an exception.\", dirContext, e); return false; } this.logger.debug(\"DirContext '{}' failed validation.\", dirContext); return false; }### Assistant: @Test public void testValidateDirContextAssertions() throws Exception { final DefaultDirContextValidator dirContextValidator = new DefaultDirContextValidator(); try { dirContextValidator.validateDirContext(DirContextType.READ_ONLY, null); fail(\"IllegalArgumentException expected\"); } catch (IllegalArgumentException expected) { assertThat(true).isTrue(); } try { dirContextValidator.validateDirContext(null, dirContextMock); fail(\"IllegalArgumentException expected\"); } catch (IllegalArgumentException expected) { assertThat(true).isTrue(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CompletableFuture<SW360License> enrichSparseLicense(SW360SparseLicense sparseLicense) { return getLicenseClient().getLicenseByName(sparseLicense.getShortName()); }### Assistant: @Test public void testEnrichSparseLicense() { SW360License license = prepareLicenseClientGetLicenseByName(); SW360SparseLicense sparseLicense = new SW360SparseLicense() .setShortName(LICENSE_NAME); SW360License licenseDetails = block(licenseClientAdapter.enrichSparseLicense(sparseLicense)); assertThat(licenseDetails).isEqualTo(license); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String toSimpleString(byte[] bytes) { SimpleString simpleString = new SimpleString(bytes); String value = simpleString.toString(); for (char c : value.toCharArray()) { if (c < ' ' || c > 127) { return NON_ASCII_STRING; } } return value; }### Assistant: @Test public void testNonASCII() { assertEquals(\"aA\", ByteUtil.toSimpleString(new byte[]{97, 0, 65, 0})); assertEquals(ByteUtil.NON_ASCII_STRING, ByteUtil.toSimpleString(new byte[]{0, 97, 0, 65})); log.debug(ByteUtil.toSimpleString(new byte[]{0, 97, 0, 65})); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public EnvironmentContainerHost getContainerHostByHostname( String hostname ) throws ContainerHostNotFoundException { Preconditions.checkArgument( !StringUtils.isBlank( hostname ), \"Invalid hostname\" ); for ( final EnvironmentContainerHost containerHost : getContainerHosts() ) { if ( containerHost.getHostname().equalsIgnoreCase( hostname ) ) { return containerHost; } } throw new ContainerHostNotFoundException( String.format( \"Container host not found by name %s\", hostname ) ); }### Assistant: @Test public void testGetContainerHostByHostname() throws Exception { assertNotNull( environment.getContainerHostByHostname( CONTAINER_HOSTNAME ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public BundleMetadata build(final AnnotatedBundle annotatedBundle, final Bundle bundle, final List<Entity> dependentEntities, ProjectInfo projectInfo) { if (annotatedBundle != null && annotatedBundle.getAnnotatedEntity() != null) { AnnotatedEntity<? extends GatewayEntity> annotatedEntity = annotatedBundle.getAnnotatedEntity(); final String bundleName = annotatedBundle.getBundleName(); String name = bundleName; if (StringUtils.isNotBlank(projectInfo.getVersion())) { name = bundleName.substring(0, bundleName.indexOf(projectInfo.getVersion()) - 1); } BundleMetadata.Builder builder = new BundleMetadata.Builder(annotatedEntity.getEntityType(), name, projectInfo.getName(), projectInfo.getGroupName(), projectInfo.getVersion()); builder.description(annotatedEntity.getDescription()); final Collection<Metadata> referencedEntities = getEnvironmentDependenciesMetadata(dependentEntities); builder.referencedEntities(referencedEntities); if (!referencedEntities.isEmpty()) { annotatedBundle.getDependentBundles().add(generateDependentEnvBundleFromProject(projectInfo)); } builder.dependencies(annotatedBundle.getDependentBundles()); builder.tags(annotatedEntity.getTags()); builder.redeployable(annotatedEntity.isRedeployable() || (MappingActions.NEW_OR_UPDATE.equals(EntityBuilderHelper.getDefaultEntityMappingAction()) && !isBundleContainsSharedEntity(annotatedBundle))); builder.l7Template(annotatedEntity.isL7Template()); builder.hasRouting(hasRoutingAssertion(dependentEntities)); final List<Metadata> definedEntities = new ArrayList<>(); definedEntities.add(annotatedEntity.getEntity().getMetadata()); return builder.definedEntities(definedEntities).build(); } else { return buildFullBundleMetadata(dependentEntities, bundle, projectInfo); } }### Assistant: @Test public void testUnAnnotatedBundleMetadata() throws JsonProcessingException { BundleEntityBuilder builder = createBundleEntityBuilder(); Bundle bundle = createBundle(ENCASS_POLICY_WITH_ENV_DEPENDENCIES, true, false, false, projectInfo); Encass encass = buildTestEncassWithAnnotation(TEST_ENCASS, TEST_ENCASS_ID, TEST_GUID, TEST_ENCASS_POLICY, Collections.emptySet()); bundle.putAllEncasses(ImmutableMap.of(TEST_ENCASS, encass)); Map<String, BundleArtifacts> bundles = builder.build(bundle, EntityBuilder.BundleType.DEPLOYMENT, DocumentTools.INSTANCE.getDocumentBuilder().newDocument(), projectInfo); assertNotNull(bundles); assertEquals(1, bundles.size()); BundleMetadata metadata = bundles.get(projectInfo.getName() + \"-1.0\").getBundleMetadata(); assertNotNull(metadata); assertEquals(projectInfo.getName(), metadata.getName()); assertEquals(projectInfo.getGroupName(), metadata.getGroupName()); assertEquals(BUNDLE_TYPE_ALL, metadata.getType()); assertEquals(StringUtils.EMPTY, metadata.getDescription()); assertEquals(Collections.emptyList(), metadata.getTags()); assertTrue(metadata.isRedeployable()); assertFalse(metadata.isL7Template()); Collection<Metadata> definedEntities = metadata.getDefinedEntities(); assertEquals(2, definedEntities.size()); definedEntities.stream().forEach(definedEntityData -> { switch (definedEntityData.getType()) { case EntityTypes.ENCAPSULATED_ASSERTION_TYPE: assertEquals(TEST_ENCASS, definedEntityData.getName()); assertEquals(TEST_ENCASS_ID, definedEntityData.getId()); assertEquals(TEST_GUID, definedEntityData.getGuid()); break; case EntityTypes.POLICY_TYPE: assertEquals(TEST_ENCASS_POLICY, definedEntityData.getName()); assertEquals(TEST_POLICY_ID, definedEntityData.getId()); assertEquals(TEST_GUID, definedEntityData.getGuid()); break; default: break; } }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected List<File> getSpillFiles() { List<File> toReturn = new ArrayList<>(super.getSpillFiles()); if (null != firstSpillFile) { toReturn.add(firstSpillFile); } return toReturn; }### Assistant: @Test public void testTemporaryFilesAreCleanedUpAfterCompletion() { List<Binding> undistinct = new ArrayList<>(); random = new Random(); Var[] vars = new Var[]{ Var.alloc(\"1\"), Var.alloc(\"2\"), Var.alloc(\"3\"), Var.alloc(\"4\"), Var.alloc(\"5\"), Var.alloc(\"6\"), Var.alloc(\"7\"), Var.alloc(\"8\"), Var.alloc(\"9\"), Var.alloc(\"0\") }; for(int i = 0; i < 500; i++){ undistinct.add(randomBinding(vars)); } DistinctDataNet<Binding> db = new DistinctDataNet<>( new ThresholdPolicyCount<Binding>(10), SerializationFactoryFinder.bindingSerializationFactory(), new BindingComparator(new ArrayList<SortCondition>())); List<File> spillFiles = new ArrayList<>(); try { db.addAll(undistinct); spillFiles.addAll(db.getSpillFiles()); int count = 0; for (File file : spillFiles) { if (file.exists()) { count++; } } assertEquals(49, count); Iterator<Binding> iter = db.iterator(); while (iter.hasNext()) { iter.next(); } Iter.close(iter); } finally { db.close(); } int count = 0; for (File file : spillFiles) { if (file.exists()) { count++; } } assertEquals(0, count); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void checkPreconditions() throws ResourceUnavailableException { if (guestNetwork.getState() != Network.State.Implemented && guestNetwork.getState() != Network.State.Setup && guestNetwork.getState() != Network.State.Implementing) { throw new ResourceUnavailableException(\"Network is not yet fully implemented: \" + guestNetwork, Network.class, guestNetwork.getId()); } if (guestNetwork.getTrafficType() != TrafficType.Guest) { throw new ResourceUnavailableException(\"Network is not type Guest as expected: \" + guestNetwork, Network.class, guestNetwork.getId()); } }### Assistant: @Test public void testCheckPreconditions() throws ResourceUnavailableException { final Network.State states[] = { Network.State.Implemented, Network.State.Setup, Network.State.Implementing }; when(deployment.guestNetwork.getTrafficType()).thenReturn(TrafficType.Guest); for (final Network.State state : states) { driveTestCheckPreconditionsCorrectNwState(state); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Optional<FeatureRow>> getOnlineFeatures( List<EntityRow> entityRows, FeatureSetRequest featureSetRequest) { FeatureSetSpec featureSetSpec = featureSetRequest.getSpec(); List<RedisKey> redisKeys = buildRedisKeys(entityRows, featureSetSpec); FeatureRowDecoder decoder = new FeatureRowDecoder(generateFeatureSetStringRef(featureSetSpec), featureSetSpec); List<Optional<FeatureRow>> featureRows = new ArrayList<>(); try { featureRows = getFeaturesFromRedis(redisKeys, decoder); } catch (InvalidProtocolBufferException | ExecutionException e) { throw Status.INTERNAL .withDescription(\"Unable to parse protobuf while retrieving feature\") .withCause(e) .asRuntimeException(); } return featureRows; }### Assistant: @Test public void shouldReturnResponseWithValuesIfKeysPresent() { byte[] serializedKey1 = serializer.serialize(redisKeys.get(0)); byte[] serializedKey2 = serializer.serialize(redisKeys.get(1)); KeyValue<byte[], byte[]> keyValue1 = KeyValue.from(serializedKey1, Optional.of(featureRows.get(0).toByteArray())); KeyValue<byte[], byte[]> keyValue2 = KeyValue.from(serializedKey2, Optional.of(featureRows.get(1).toByteArray())); List<KeyValue<byte[], byte[]>> featureRowBytes = Lists.newArrayList(keyValue1, keyValue2); OnlineRetriever redisClusterOnlineRetriever = new RedisClusterOnlineRetriever.Builder(connection, serializer) .withFallbackSerializer(fallbackSerializer) .build(); when(syncCommands.mget(serializedKey1, serializedKey2)).thenReturn(featureRowBytes); List<Optional<FeatureRow>> expected = Lists.newArrayList( Optional.of( FeatureRow.newBuilder() .setEventTimestamp(Timestamp.newBuilder().setSeconds(100)) .setFeatureSet(\"project/featureSet\") .addAllFields( Lists.newArrayList( Field.newBuilder().setName(\"feature1\").setValue(intValue(1)).build(), Field.newBuilder().setName(\"feature2\").setValue(intValue(1)).build())) .build()), Optional.of( FeatureRow.newBuilder() .setEventTimestamp(Timestamp.newBuilder().setSeconds(100)) .setFeatureSet(\"project/featureSet\") .addAllFields( Lists.newArrayList( Field.newBuilder().setName(\"feature1\").setValue(intValue(2)).build(), Field.newBuilder().setName(\"feature2\").setValue(intValue(2)).build())) .build())); List<Optional<FeatureRow>> actual = redisClusterOnlineRetriever.getOnlineFeatures(entityRows, featureSetRequest); assertThat(actual, equalTo(expected)); verify(syncCommands, never()).mget(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isAuthorised(Authentication authentication) { if (paverAuthorities.contains(\"*\")) { log.debug(\"Paver allows all\"); return true; } List<String> userAuthorities = Mono .justOrEmpty(authentication) .flatMapIterable(Authentication::getAuthorities) .map(GrantedAuthority::getAuthority) .collectList() .block(); log.debug(\"Checking user authorities: {}\", userAuthorities); for (String userAuthority : userAuthorities) { if (paverAuthorities.contains(userAuthority)) { log.debug(\"User authority {} is allowed by paver\", userAuthority); return true; } } log.debug(\"User has no allowable authorities. Paver allows: {}\", paverAuthorities); log.debug(\"Falling back to CIDR authorisation\"); WebAuthenticationDetails details = (WebAuthenticationDetails) authentication.getDetails(); boolean cidrAuthorised = cidrBlockAuthorisation.isAuthorised(cidrBlocks, details.getRemoteAddress()); if (!cidrAuthorised) { log.debug(\"IP {} is not in the allowable range: {}\", details.getRemoteAddress(), cidrBlocks); } return cidrAuthorised; }### Assistant: @Test public void cidr_list_is_parsed_correctly() throws Exception { paverAuthorities.add(\"AUTHORIZED\"); cidrBlocks = \"1.0.0.0/8,2.0.0.0/8\"; PaverAuthorisation underTest = new PaverAuthorisation(paverAuthorities, cidrBlocks, cidrBlockAuthorisation); doReturn(singletonList(new SimpleGrantedAuthority(\"FOO\"))).when(authentication).getAuthorities(); doReturn(details).when(authentication).getDetails(); String address = \"1.0.0.10\"; doReturn(address).when(details).getRemoteAddress(); doReturn(true).when(cidrBlockAuthorisation).isAuthorised(asList(\"1.0.0.0/8\", \"2.0.0.0/8\"), address); boolean result = underTest.isAuthorised(authentication); assertThat(result, is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static RetrieveFeatureProperty of(final String thingId, final String featureId, final JsonPointer propertyJsonPointer, final DittoHeaders dittoHeaders) { return of(ThingId.of(thingId), featureId, propertyJsonPointer, dittoHeaders); }### Assistant: @Test(expected = NullPointerException.class) public void tryToCreateInstanceWithNullThingId() { RetrieveFeatureProperty.of((ThingId) null, TestConstants.Feature.FLUX_CAPACITOR_ID, PROPERTY_JSON_POINTER, TestConstants.EMPTY_DITTO_HEADERS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: SortMembers(Comparator<MemberShape> comparator) { this.comparator = comparator; }### Assistant: @Test public void sortsModelMembers() { ModelAssembler assembler = Model.assembler(); UnionShape u = UnionShape.builder() .id(\"com.foo#U\") .addMember(\"zoo\", ShapeId.from(\"smithy.api#String\")) .addMember(\"abc\", ShapeId.from(\"smithy.api#String\")) .build(); StructureShape s = StructureShape.builder() .id(\"com.foo#S\") .addMember(\"zoo\", ShapeId.from(\"smithy.api#String\")) .addMember(\"abc\", ShapeId.from(\"smithy.api#String\")) .build(); assembler.addShapes(u, s); Model model = assembler.assemble().unwrap(); ModelTransformer transformer = ModelTransformer.create(); Model sortedModel = transformer.sortMembers(model, Comparator.comparing(MemberShape::getMemberName)); assertThat(u.getMemberNames(), Matchers.contains(\"zoo\", \"abc\")); assertThat(s.getMemberNames(), Matchers.contains(\"zoo\", \"abc\")); assertThat(sortedModel.expectShape(u.getId(), UnionShape.class).getMemberNames(), Matchers.contains(\"abc\", \"zoo\")); assertThat(sortedModel.expectShape(s.getId(), StructureShape.class).getMemberNames(), Matchers.contains(\"abc\", \"zoo\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] createAndWriteBeanClass(String fqcn, List<TupleSchemaRegistry.SQLFieldInfo> fieldList) throws IOException, JSONException { return createAndWriteBeanClass(fqcn, fieldList, null); }### Assistant: @Test public void testPrimitive() throws IOException, JSONException, IllegalAccessException, InstantiationException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException { String addressClassName = TupleSchemaRegistry.FQCN_PACKAGE + \"Energy_v1\"; TupleSchemaRegistry.Schema schema = new TupleSchemaRegistry.Schema(); schema.addField(\"streetNumber\", Integer.class); schema.addField(\"houseNumber\", Long.class); schema.addField(\"condo\", Boolean.class); schema.addField(\"water-usage\", Float.class); schema.addField(\"electricity-usage\", Double.class); schema.addField(\"startDate\", Date.class); byte[] beanClass = BeanClassGenerator.createAndWriteBeanClass(addressClassName, schema.fieldList); Class<?> clazz = ClassLoaderUtils.readBeanClass(addressClassName, beanClass); Object o = clazz.newInstance(); Field f = clazz.getDeclaredField(\"streetNumber\"); Assert.assertNotNull(f); Method m = clazz.getDeclaredMethod(\"setStreetNumber\", Integer.class); m.invoke(o, 343); m = clazz.getMethod(\"getStreetNumber\"); Integer result = (Integer)m.invoke(o); assertEquals(\"reflect getStreetNumber invoke\", 343, result.intValue()); m = clazz.getDeclaredMethod(\"setHouseNumber\", Long.class); m.invoke(o, 123L); m = clazz.getMethod(\"getHouseNumber\"); Long houseNum = (Long)m.invoke(o); assertEquals(\"reflect getHouseNumber invoke\", 123L, houseNum.longValue()); m = clazz.getDeclaredMethod(\"setCondo\", Boolean.class); m.invoke(o, true); m = clazz.getMethod(\"getCondo\"); Boolean isCondo = (Boolean)m.invoke(o); assertEquals(\"reflect getCondo invoke\", true, isCondo); m = clazz.getDeclaredMethod(\"setWater-usage\", Float.class); m.invoke(o, 88.34F); m = clazz.getMethod(\"getWater-usage\"); Float waterUsage = (Float)m.invoke(o); assertEquals(\"reflect getWaterUsage invoke\", 88.34F, waterUsage.floatValue(), 0); m = clazz.getDeclaredMethod(\"setElectricity-usage\", Double.class); m.invoke(o, 88.343243); m = clazz.getMethod(\"getElectricity-usage\"); Double electricityUsage = (Double)m.invoke(o); assertEquals(\"reflect getWaterUsage invoke\", 88.343243, electricityUsage, 0); Date now = new Date(); m = clazz.getDeclaredMethod(\"setStartDate\", Date.class); m.invoke(o, now); m = clazz.getMethod(\"getStartDate\"); Date startDate = (Date)m.invoke(o); assertEquals(\"reflect getStartDate invoke\", now, startDate); m = clazz.getMethod(\"getStartDateMs\"); long startDateMs = (long)m.invoke(o); assertEquals(\"reflect getStartDateMs invoke\", now.getTime(), startDateMs, 0); m = clazz.getMethod(\"getStartDateSec\"); int startDateSec = (int)m.invoke(o); assertEquals(\"reflect getStartDateSec invoke\", now.getTime() / 1000, startDateSec, 0); m = clazz.getDeclaredMethod(\"setStartDateMs\", Long.class); m.invoke(o, now.getTime()); m = clazz.getMethod(\"getStartDate\"); startDate = (Date)m.invoke(o); assertEquals(\"reflect getStartDate invoke\", now, startDate); m = clazz.getMethod(\"getStartDateMs\"); startDateMs = (long)m.invoke(o); assertEquals(\"reflect getStartDateMs invoke\", now.getTime(), startDateMs, 0); m = clazz.getMethod(\"getStartDateSec\"); startDateSec = (int)m.invoke(o); assertEquals(\"reflect getStartDateSec invoke\", now.getTime() / 1000, startDateSec, 0); m = clazz.getDeclaredMethod(\"setStartDateSec\", Integer.class); m.invoke(o, (int)(now.getTime() / 1000)); now = new Date(now.getTime() / 1000 * 1000); m = clazz.getMethod(\"getStartDate\"); startDate = (Date)m.invoke(o); assertEquals(\"reflect getStartDate invoke\", now, startDate); m = clazz.getMethod(\"getStartDateMs\"); startDateMs = (long)m.invoke(o); assertEquals(\"reflect getStartDateMs invoke\", now.getTime(), startDateMs, 0); m = clazz.getMethod(\"getStartDateSec\"); startDateSec = (int)m.invoke(o); assertEquals(\"reflect getStartDateSec invoke\", now.getTime() / 1000, startDateSec, 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String toString() { return name + \":\" + (first == null ? \"NA\" : first) + \"/\" + (second == null ? \"NA\" : second); }### Assistant: @Test public void testToString() { IDifference result = DoubleDifference.construct(\"Foo\", 1.0, 2.0); String diffString = result.toString(); Assert.assertNotNull(diffString); assertOneLiner(diffString); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte buildAidRefDo(short dataOffset, short dataOffsetMax, byte[] buf, short ofs, RuleEntry entry) { if (ofs >= dataOffset && ofs < dataOffsetMax) { buf[(short) (ofs - dataOffset)] = (byte) 0x4F; } ofs++; if (ofs >= dataOffset && ofs < dataOffsetMax) { buf[(short) (ofs - dataOffset)] = entry.getAidLength(); } ofs++; entry.getAid(buf, ofs, dataOffset, dataOffsetMax); return (byte) (entry.getAidLength() + 2); }### Assistant: @Test public void aidRefDoTest() throws CardException { byte[] data = new byte[AramConstTest.VALID_AID_REF_DO.length]; assertEquals(AramConstTest.VALID_AID_REF_DO.length, AramUtils.buildAidRefDo(DEFAULT_DATA_OFFSET, DEFAULT_DATA_OFFSET_MAX, data, (short) 0, entry)); assertArrayEquals(AramConstTest.VALID_AID_REF_DO, data); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Result execute() { final FormattingResultLog resultLog = new FormattingResultLog(); checkServiceResolver(resultLog); if (resultLog.getAggregateStatus().equals(Status.CRITICAL)) { return new Result(resultLog); } checkHistoryNodeAccess(resultLog); checkHookHistoryNodeAccess(resultLog); return new Result(resultLog); }### Assistant: @Test public void checkServiceResolver_failServiceException() throws LoginException { when(resolverService.getServiceResourceResolver()).thenThrow(LoginException.class); Result result = check.execute(); assertEquals(Result.Status.CRITICAL, result.getStatus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static File findTemplateDirectory( ApplicationTemplate tpl, File configurationDirectory ) { StringBuilder sb = new StringBuilder( TEMPLATES ); sb.append( \"/\" ); sb.append( tpl.getName()); if( ! Utils.isEmptyOrWhitespaces( tpl.getVersion())) { sb.append( \" - \" ); sb.append( tpl.getVersion()); } return new File( configurationDirectory, sb.toString()); }### Assistant: @Test public void testFindTemplateDirectory() { File configurationDirectory = new File( \"somewhere\" ); ApplicationTemplate tpl = new ApplicationTemplate( \"test\" ); Assert.assertEquals( \"test\", ConfigurationUtils.findTemplateDirectory( tpl, configurationDirectory ).getName()); tpl.setVersion( \"v2\" ); Assert.assertEquals( \"test - v2\", ConfigurationUtils.findTemplateDirectory( tpl, configurationDirectory ).getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Type lookupType(Expr expr) { return types.get(expr); }### Assistant: @Test public void testHexUnsignedIntLiteralTyped() throws Exception { final TranslationUnit tu = ParseHelper.parse(\"#version 300 es\\n\" + \"void main() {\" + \" int x = 0xA03Bu;\" + \"}\"); new NullCheckTyper(tu) { @Override public void visitInitializer(Initializer initializer) { super.visitInitializer(initializer); assertSame(lookupType(initializer.getExpr()), BasicType.UINT); } }.visit(tu); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String convertValue(String value) { if (valid) { try { if (inputFormatter == null) { if (isInputUnixTimestamp(value)) { long lValue = Long.parseLong(value); lValue *= 1000; return outputFormatter.print(lValue); } else { long lValue = Long.parseLong(value); return outputFormatter.print(lValue); } } DateTime dt = inputFormatter.parseDateTime(value); return outputFormatter.print(dt); } catch (IllegalInstantException e) { if ((inputTimezone == null && !JodaUtils.formatContainsTime(this.inputDateFormat)) && outputFormat == OutputFormats.DATE_ONLY) { DateTime dt = LocalDate.parse(value, inputFormatter).toDateTimeAtStartOfDay(); return outputFormatter.print(dt); } else { throw e; } } catch (IllegalArgumentException e) { log.debug(\"Failed to convert string [{}] to date pattern [{}], value, inputDateFormat\"); } } return value; }### Assistant: @Test public void testUnixTimestamp() { String unixTime = \"1466627584\"; DateTimeStandardizer unixTimestampStandardizer = new DateTimeStandardizer(null, OutputFormats.DATETIME, null, \"PST\"); String convertedValue = unixTimestampStandardizer.convertValue(unixTime); assertEquals(\"2016-06-22 13:33:04.000\", convertedValue); int i = 0; }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getString(final int row) { final double value = getDouble(row); if (DoubleColumnType.valueIsMissing(value)) { return \"\"; } return String.valueOf(printFormatter.format(value)); }### Assistant: @Test public void testIndexColumn() { IntColumn numberColumn = IntColumn.indexColumn(\"index\", 12424, 0); assertEquals(\"12423\", numberColumn.getString(numberColumn.size() - 1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ThingQueryCommandAdapter of(final HeaderTranslator headerTranslator) { return new ThingQueryCommandAdapter(requireNonNull(headerTranslator)); }### Assistant: @Test public void retrieveDefinitionToAdaptable() { final TopicPath topicPath = topicPath(TopicPath.Action.RETRIEVE); final JsonPointer path = JsonPointer.of(\"/definition\"); final Adaptable expected = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path).build()) .withHeaders(TestConstants.HEADERS_V_2) .build(); final RetrieveThingDefinition retrieveDefinition = RetrieveThingDefinition.of(TestConstants.THING_ID, TestConstants.HEADERS_V_2_NO_CONTENT_TYPE); final Adaptable actual = underTest.toAdaptable(retrieveDefinition, channel); assertWithExternalHeadersThat(actual).isEqualTo(expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isValidatedSearch(String usstate, String city, String zipcode, String gender, String specialty, String phone, String firstname, String lastname, String facilityName) { boolean validateCall = true; if (usstate == null && city == null && zipcode == null && phone == null && specialty == null && firstname == null && lastname == null && facilityName == null && gender == null) validateCall = false; if (usstate != null && zipcode != null) validateCall = false; if (lastname == null && facilityName == null) { validateCall = false; } if (zipcode == null && city == null && usstate == null) { validateCall = false; } if (usstate != null) { if (usstate.matches(\"[a-zA-Z][a-zA-Z]\") == true) { List<LookupDto> stateCodes = stateCodeService .findAllStateCodes(); boolean isValidStateCode = false; for (LookupDto stateCode : stateCodes) { if (usstate.compareToIgnoreCase(stateCode.getCode()) == 0) { isValidStateCode = true; break; } } if (isValidStateCode != true) { validateCall = false; } } else validateCall = false; } if (city != null && city.length() < 2) validateCall = false; if (zipcode != null && zipcode.length() < 5) validateCall = false; if (specialty != null && specialty.length() < 3) validateCall = false; if (phone != null && phone.length() != 10) validateCall = false; if (firstname != null && firstname.length() < 2) validateCall = false; if (lastname != null && lastname.length() < 2) validateCall = false; if (facilityName != null && facilityName.length() < 2) validateCall = false; if (city != null && usstate == null) validateCall = false; return validateCall; }### Assistant: @Test public void testIsValidatedSearch_All_Field_Is_Blank() { Boolean validateCall = providerSearchLookupServiceImpl .isValidatedSearch(null, null, null, null, null, null, null, null, null); assertEquals(false, validateCall); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int[] multiply(int[] input) { if (input == null) { throw new IllegalArgumentException(\"You can't pass a null array as input.\"); } if (input.length == 0) { return input; } int[] front = new int[input.length]; int[] rear = new int[input.length]; int[] output = new int[input.length]; front[0] = 1; rear[input.length - 1] = 1; for (int i = 1; i < input.length; i++) { front[i] = front[i - 1] * input[i - 1]; } for (int i = input.length - 2; i >= 0; i--) { rear[i] = rear[i + 1] * input[i + 1]; } for (int i = 0; i < input.length; i++) { output[i] = front[i] * rear[i]; } return output; }### Assistant: @Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullArrays() { multiplyArrayElements.multiply(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public static <T, R> R[] map( @Nullable T[] array, @NonNull Class<R> resultElementType, @NonNull Function<T, R> mapper) { if (array == null) { return null; } val mappedArray = _Casts.<R[]>uncheckedCast( Array.newInstance(resultElementType, array.length)); int i = 0; for (val element : array) { mappedArray[i++] = mapper.apply(element); } return mappedArray; }### Assistant: @Test void testMapTArrayClassOfRFunctionOfTR() { assertEquals(null, _Arrays.map((Integer[])null, Long.class, Long::valueOf)); assertArrayEquals(new Long[] {}, _Arrays.map(new Integer[] {}, Long.class, Long::valueOf)); assertArrayEquals(new Long[] {1L, 2L, 3L}, _Arrays.map(new Integer[] {1, 2, 3}, Long.class, Long::valueOf)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public EPerson getSubmitter() throws SQLException { return item.getSubmitter(); }### Assistant: @Test public void testGetSubmitter() throws Exception { assertThat(\"testGetSubmitter 0\", wi.getSubmitter(), notNullValue()); assertThat(\"testGetSubmitter 1\", wi.getSubmitter(), equalTo(context.getCurrentUser())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AppRole readAppRoleBasicDetails(String token, String rolename) { AppRole appRole = null; if (TVaultConstants.HIDEMASTERAPPROLE && rolename.equals(TVaultConstants.SELF_SERVICE_APPROLE_NAME)) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"getAppRole\"). put(LogMessage.MESSAGE, \"Access denied: Not enough permission to read the AppRole information\"). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return appRole; } Response readResponse = reqProcessor.process(\"/auth/approle/role/read\",\"{\\\"role_name\\\":\\\"\"+rolename+\"\\\"}\",token); Map<String, Object> responseMap = null; if(HttpStatus.OK.equals(readResponse.getHttpstatus())) { responseMap = ControllerUtil.parseJson(readResponse.getResponse()); if(responseMap.isEmpty()) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"getAppRole\"). put(LogMessage.MESSAGE, \"Reading AppRole failed\"). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return appRole; } Map<String,Object> appRoleMap = (Map<String,Object>) responseMap.get(\"data\"); if (appRoleMap != null) { String[] policies = null; if (appRoleMap.get(\"policies\") != null && ((ArrayList<String>)appRoleMap.get(\"policies\")) != null) { ArrayList<String> policiesList = ((ArrayList<String>)appRoleMap.get(\"policies\")); policies = policiesList.toArray(new String[policiesList.size()]); } appRole = new AppRole(rolename, policies, ((Boolean)appRoleMap.get(\"bind_secret_id\")).booleanValue(), ((Integer) appRoleMap.get(\"secret_id_num_uses\")), ((Integer) appRoleMap.get(\"secret_id_ttl\")), (Integer)appRoleMap.get(\"token_num_uses\"), (Integer)appRoleMap.get(\"token_ttl\"), (Integer)appRoleMap.get(\"token_max_ttl\") ); } return appRole; } log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"getAppRole\"). put(LogMessage.MESSAGE, \"Reading AppRole failed\"). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return appRole; }### Assistant: @Test public void test_readAppRoleBasicDetails_successfully() throws Exception{ String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; String role_name = \"testapprole01\"; ArrayList<String> policiesList = new ArrayList<String>(); policiesList.add(\"r_shared_safe01\"); String[] policies = policiesList.toArray(new String[policiesList.size()]); AppRole appRoleExpected = new AppRole(role_name, policies, true, 0, 0, 0); String responseJson = new ObjectMapper().writeValueAsString(appRoleExpected); Response response = getMockResponse(HttpStatus.OK, true, responseJson); Map<String, Object> responseMap = new HashMap<>(); Map<String, Object> dataMap = new HashMap<>(); responseMap.put(\"data\", dataMap); dataMap.put(\"policies\",policiesList); dataMap.put(\"bind_secret_id\",new Boolean(true)); dataMap.put(\"secret_id_num_uses\", new Integer(0)); dataMap.put(\"secret_id_ttl\", new Integer(0)); dataMap.put(\"token_num_uses\", new Integer(0)); dataMap.put(\"token_ttl\", new Integer(0)); dataMap.put(\"token_max_ttl\", new Integer(0)); when(ControllerUtil.parseJson(responseJson)).thenReturn(responseMap); when(reqProcessor.process(\"/auth/approle/role/read\", \"{\\\"role_name\\\":\\\"\"+role_name+\"\\\"}\",token)).thenReturn(response); AppRole approleActual = appRoleService.readAppRoleBasicDetails(token, role_name); assertNotNull(approleActual); assertNotNull(approleActual.getRole_name()); assertEquals(role_name, approleActual.getRole_name()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void updateHiveConfig() throws AmbariException { AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class); for (final Cluster cluster : getCheckedClusterMap(ambariManagementController.getClusters()).values()) { Config hiveSiteConfig = cluster.getDesiredConfigByType(HIVE_SITE_CONFIG); Config atlasConfig = cluster.getDesiredConfigByType(ATLAS_APPLICATION_PROPERTIES_CONFIG); StackId stackId = cluster.getCurrentStackVersion(); boolean isStackNotLess23 = (stackId != null && stackId.getStackName().equals(\"HDP\") && VersionUtils.compareVersions(stackId.getStackVersion(), \"2.3\") >= 0); List<ServiceComponentHost> atlasHost = cluster.getServiceComponentHosts(\"ATLAS\", \"ATLAS_SERVER\"); Map<String, String> updates = new HashMap<String, String>(); if (isStackNotLess23 && atlasHost.size() != 0 && hiveSiteConfig != null) { updates.put(ATLAS_HOOK_HIVE_MINTHREADS_PROPERTY, \"1\"); updates.put(ATLAS_HOOK_HIVE_MAXTHREADS_PROPERTY, \"1\"); updates.put(ATLAS_CLUSTER_NAME_PROPERTY, \"primary\"); if (atlasConfig != null && atlasConfig.getProperties().containsKey(ATLAS_ENABLETLS_PROPERTY)) { String atlasEnableTLSProperty = atlasConfig.getProperties().get(ATLAS_ENABLETLS_PROPERTY); String atlasScheme = \"http\"; String atlasServerHttpPortProperty = atlasConfig.getProperties().get(ATLAS_SERVER_HTTP_PORT_PROPERTY); if (atlasEnableTLSProperty.toLowerCase().equals(\"true\")) { atlasServerHttpPortProperty = atlasConfig.getProperties().get(ATLAS_SERVER_HTTPS_PORT_PROPERTY); atlasScheme = \"https\"; } updates.put(ATLAS_REST_ADDRESS_PROPERTY, String.format(\"%s: } updateConfigurationPropertiesForCluster(cluster, HIVE_SITE_CONFIG, updates, false, false); } } }### Assistant: @Test public void testHiveSiteUpdateConfigs() throws AmbariException { EasyMockSupport easyMockSupport = new EasyMockSupport(); final AmbariManagementController mockAmbariManagementController = easyMockSupport.createNiceMock(AmbariManagementController.class); final Clusters mockClusters = easyMockSupport.createStrictMock(Clusters.class); final Cluster mockClusterExpected = easyMockSupport.createNiceMock(Cluster.class); final Config hiveSiteConfigs = easyMockSupport.createNiceMock(Config.class); final Config AtlasSiteConfigs = easyMockSupport.createNiceMock(Config.class); final ServiceComponentHost atlasHost = easyMockSupport.createNiceMock(ServiceComponentHost.class); final List<ServiceComponentHost> atlasHosts = new ArrayList<>(); atlasHosts.add(atlasHost); StackId stackId = new StackId(\"HDP\",\"2.3\"); final Map<String, String> propertiesAtlasSiteConfigs = new HashMap<String, String>() {{ put(\"atlas.enableTLS\", \"true\"); put(\"atlas.server.https.port\", \"21443\"); }}; final Injector mockInjector = Guice.createInjector(new AbstractModule() { @Override protected void configure() { bind(AmbariManagementController.class).toInstance(mockAmbariManagementController); bind(Clusters.class).toInstance(mockClusters); bind(EntityManager.class).toInstance(entityManager); bind(ServiceComponentHost.class).toInstance(atlasHost); bind(DBAccessor.class).toInstance(createNiceMock(DBAccessor.class)); bind(OsFamily.class).toInstance(createNiceMock(OsFamily.class)); } }); expect(mockClusterExpected.getCurrentStackVersion()).andReturn(stackId).once(); expect(mockClusterExpected.getServiceComponentHosts(\"ATLAS\", \"ATLAS_SERVER\")).andReturn(atlasHosts).once(); expect(atlasHost.getHostName()).andReturn(\"c6401\").once(); expect(mockAmbariManagementController.getClusters()).andReturn(mockClusters).once(); expect(mockClusters.getClusters()).andReturn(new HashMap<String, Cluster>() {{ put(\"normal\", mockClusterExpected); }}).atLeastOnce(); expect(mockClusterExpected.getDesiredConfigByType(\"hive-site\")).andReturn(hiveSiteConfigs).atLeastOnce(); expect(mockClusterExpected.getDesiredConfigByType(\"application-properties\")).andReturn(AtlasSiteConfigs).anyTimes(); expect(AtlasSiteConfigs.getProperties()).andReturn(propertiesAtlasSiteConfigs).anyTimes(); UpgradeCatalog222 upgradeCatalog222 = createMockBuilder(UpgradeCatalog222.class) .withConstructor(Injector.class) .withArgs(mockInjector) .addMockedMethod(\"updateConfigurationPropertiesForCluster\", Cluster.class, String.class, Map.class, boolean.class, boolean.class) .createMock(); Map<String, String> expectedUpdates = new HashMap<>(); expectedUpdates.put(\"atlas.hook.hive.minThreads\", \"1\"); expectedUpdates.put(\"atlas.hook.hive.maxThreads\", \"1\"); expectedUpdates.put(\"atlas.cluster.name\", \"primary\"); expectedUpdates.put(\"atlas.rest.address\", \"https: upgradeCatalog222.updateConfigurationPropertiesForCluster(mockClusterExpected, \"hive-site\", expectedUpdates, false, false); expectLastCall().once(); easyMockSupport.replayAll(); replay(upgradeCatalog222); upgradeCatalog222.updateHiveConfig(); easyMockSupport.verifyAll(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Optional<String> teamWithMinimumGoalDifference() throws IOException { List<TeamResult> extrema = footballFileReader.readFile(); return extrema.stream() .sorted() .findFirst() .map(TeamResult::getTeam); }### Assistant: @Test public void should_find_team_with_the_smallest_goal_difference_in_football_league() throws IOException { List<TeamResult> footballLeagueResults = newArrayList( new TeamResult(\"Arsenal\", 79, 36), new TeamResult(\"Liverpool\", 67, 30)); doReturn(footballLeagueResults).when(footballFileReader).readFile(); Optional<String> teamWithMinimumGoalDifference = smallestGoalDifference.teamWithMinimumGoalDifference(); assertThat(teamWithMinimumGoalDifference).hasValue(\"Liverpool\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public PriceProductCalcRespDTO calcProductPrice(PriceProductCalcReqDTO calcReqDTO) { Map<Integer, PriceProductCalcReqDTO.Item> calcProductItemDTOMap = CollectionUtils.convertMap( calcReqDTO.getItems(), PriceProductCalcReqDTO.Item::getSkuId); CommonResult<List<ProductSkuRespDTO>> listProductSkusResult = productSkuRpc.listProductSkus( new ProductSkuListQueryReqDTO().setProductSkuIds(calcProductItemDTOMap.keySet())); listProductSkusResult.checkError(); if (calcReqDTO.getItems().size() != listProductSkusResult.getData().size()) { throw ServiceExceptionUtil.exception(PRICE_PRODUCT_SKU_NOT_EXISTS); } List<PromotionActivityRespDTO> activityRespDTOs = promotionActivityService.listPromotionActivitiesBySpuIds( CollectionUtils.convertSet(listProductSkusResult.getData(), ProductSkuRespDTO::getSpuId), Collections.singleton(PromotionActivityStatusEnum.RUN.getValue())); PriceProductCalcRespDTO calcRespDTO = new PriceProductCalcRespDTO(); List<PriceProductCalcRespDTO.Item> calcItemRespDTOs = this.initCalcOrderPriceItems( listProductSkusResult.getData(), calcProductItemDTOMap); this.modifyPriceByTimeLimitDiscount(calcItemRespDTOs, activityRespDTOs); List<PriceProductCalcRespDTO.ItemGroup> itemGroups = this.groupByFullPrivilege(calcItemRespDTOs, activityRespDTOs); calcRespDTO.setItemGroups(itemGroups); if (calcReqDTO.getCouponCardId() != null) { Integer result = this.modifyPriceByCouponCard(calcReqDTO.getUserId(), calcReqDTO.getCouponCardId(), itemGroups); calcRespDTO.setCouponCardDiscountTotal(result); } int buyTotal = 0; int discountTotal = 0; int presentTotal = 0; for (PriceProductCalcRespDTO.ItemGroup itemGroup : calcRespDTO.getItemGroups()) { buyTotal += itemGroup.getItems().stream().mapToInt(item -> item.getSelected() ? item.getBuyTotal() : 0).sum(); discountTotal += itemGroup.getItems().stream().mapToInt(item -> item.getSelected() ? item.getDiscountTotal() : 0).sum(); presentTotal += itemGroup.getItems().stream().mapToInt(item -> item.getSelected() ? item.getPresentTotal() : 0).sum(); } Assert.isTrue(buyTotal - discountTotal == presentTotal, String.format(\"\u4ef7\u683c\u5408\u8ba1( %d - %d == %d )\u4e0d\u6b63\u786e\", buyTotal, discountTotal, presentTotal)); calcRespDTO.setFee(new PriceProductCalcRespDTO.Fee(buyTotal, discountTotal, 0, presentTotal)); return calcRespDTO; }### Assistant: @Test public void testCalcProductPrice() { PriceProductCalcReqDTO calcReqDTO = new PriceProductCalcReqDTO(); PriceProductCalcReqDTO.Item item01 = new PriceProductCalcReqDTO.Item(33, 2, true); PriceProductCalcReqDTO.Item item02 = new PriceProductCalcReqDTO.Item(34, 2, true); calcReqDTO.setItems(Arrays.asList(item01, item02)); PriceProductCalcRespDTO calcRespDTO = priceManager.calcProductPrice(calcReqDTO); System.out.println(calcRespDTO); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Predicate parse(Token[] tokens) throws InvalidQueryException { ParseContext ctx = parseExpressions(tokens); List<Expression> listExpressions = ctx.getExpressions(); changeHostNameToLowerCase(listExpressions); List<Expression> listMergedExpressions = mergeExpressions(listExpressions, ctx.getMaxPrecedence()); return listMergedExpressions.isEmpty() ? null : listMergedExpressions.get(0).toPredicate(); }### Assistant: @Test public void testParse_NotOp() throws Exception { List<Token> listTokens = new ArrayList<Token>(); listTokens.add(new Token(Token.TYPE.RELATIONAL_OPERATOR, \"=\")); listTokens.add(new Token(Token.TYPE.PROPERTY_OPERAND, \"a\")); listTokens.add(new Token(Token.TYPE.VALUE_OPERAND, \"1\")); listTokens.add(new Token(Token.TYPE.LOGICAL_OPERATOR, \"&\")); listTokens.add(new Token(Token.TYPE.LOGICAL_UNARY_OPERATOR, \"!\")); listTokens.add(new Token(Token.TYPE.RELATIONAL_OPERATOR, \"=\")); listTokens.add(new Token(Token.TYPE.PROPERTY_OPERAND, \"b\")); listTokens.add(new Token(Token.TYPE.VALUE_OPERAND, \"2\")); QueryParser parser = new QueryParser(); Predicate p = parser.parse(listTokens.toArray(new Token[listTokens.size()])); EqualsPredicate aPred = new EqualsPredicate<String>(\"a\", \"1\"); EqualsPredicate bPred = new EqualsPredicate<String>(\"b\", \"2\"); NotPredicate notPred = new NotPredicate(bPred); AndPredicate andPred = new AndPredicate(aPred, notPred); assertEquals(andPred, p); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static SecurityAnalysisResult merge(SecurityAnalysisResult[] results) { Objects.requireNonNull(results); for (SecurityAnalysisResult subResult : results) { if (!subResult.getPreContingencyResult().isComputationOk()) { return FAILED_SECURITY_ANALYSIS_RESULT; } } final SecurityAnalysisResult res = new SecurityAnalysisResult( results[0].getPreContingencyResult(), new ArrayList<>(results[0].getPostContingencyResults())) .setNetworkMetadata(results[0].getNetworkMetadata()); if (results.length > 1) { Arrays.stream(results, 1, results.length).forEach(r -> res.getPostContingencyResults().addAll(r.getPostContingencyResults())); } return res; }### Assistant: @Test public void testMerge() { SecurityAnalysisResult[] results = new SecurityAnalysisResult[]{ result1, result2 }; SecurityAnalysisResult mergedResult = SecurityAnalysisResultMerger.merge(results); assertEquals(preContingencyResult, mergedResult.getPreContingencyResult()); assertEquals(Arrays.asList(postContingencyResult, postContingencyResult2), mergedResult.getPostContingencyResults()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ImportCount getDataValueCount() { return dataValueCount; }### Assistant: @Test public void unMarshallImportSummary() throws Exception { ClassPathResource resource = new ClassPathResource(\"importSummary.xml\"); JAXBContext jaxbContext = JAXBContext.newInstance(ImportSummary.class); Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller(); ImportSummary importSummary = (ImportSummary) jaxbUnmarshaller .unmarshal(resource.getInputStream()); assertEquals(3, importSummary.getDataValueCount().getImported()); assertEquals(0, importSummary.getDataValueCount().getUpdated()); assertEquals(1, importSummary.getDataValueCount().getIgnored()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> List<T> apply(T[] a) { return apply(Arrays.asList(a)); }### Assistant: @Test public void maxOnlyRange() { Range r = new Range(-1,2); assertEquals(\"[a, b]\", toS(r.apply(array))); assertEquals(\"[a, b]\", toS(r.apply(list))); assertEquals(\"[a, b]\", toS(r.apply(set))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CharSequence getLogs(@Nonnull String serviceId) { StreamHandler handler = client.streamServiceLogs(serviceId, 10000, StdioType.all(), false, !hasTty(serviceId)); return demuxLogs(handler); }### Assistant: @Test public void getCompositeLogs() { SwarmDockerClientFacade facade = new SwarmDockerClientFacade(dockerClient); TestDockerClient.Service service = new TestDockerClient.Service().tty(true); service.getLogStreamHandler(). fragment(\"txt on stdout, \", StdioType.STDOUT). fragment(\"txt on stdin, \", StdioType.STDIN). fragment(\"txt unknown std type\", null); dockerClient.service(service); CharSequence logs = facade.getLogs(service.getId()); assertThat(logs.toString()).isEqualTo(\"txt on stdout, txt on stdin, txt unknown std type\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public CompletableFuture<Void> exclusiveLock() { return updateAndCommitResolverState(StateMutation.EXCLUSIVE_LOCK); }### Assistant: @Test public void testExclusiveLockParallel() { List<CompletableFuture<Void>> parallelGets = new ArrayList<>(); AtomicInteger lockGetCount = new AtomicInteger(); for (int i = 0; i < 20; i++) { parallelGets.add(globalScope.exclusiveLock().handle((ignore, ex) -> { if (ex == null) { lockGetCount.incrementAndGet(); return null; } else if (ex instanceof LocatableResolverLockedException || (ex instanceof CompletionException && ex.getCause() instanceof LocatableResolverLockedException)) { return null; } throw new AssertionError(\"unexpected error\", ex); })); } CompletableFuture.allOf(parallelGets.toArray(new CompletableFuture<?>[0])).join(); assertThat(\"only one exclusiveLock succeeds\", lockGetCount.get(), is(1)); assertLocked(database, globalScope); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @DescribeResult(name = \"result\", description = \"Point features\") public SimpleFeatureCollection execute( @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d, @DescribeParameter(name = \"targetCRS\", description = \"CRS in which the points will be displayed\", min=0) CoordinateReferenceSystem targetCRS, @DescribeParameter(name = \"scale\", description = \"scale\",min=0, defaultValue=\"1.0f\") Float scaleFactor, @DescribeParameter(name = \"interpolation\", description = \"interpolation\",min=0, defaultValue=\"InterpolationNearest\") Interpolation interpolation, @DescribeParameter(name = \"emisphere\", description = \"Add Emishpere\",min=0, defaultValue=\"False\" ) Boolean emisphere) throws ProcessException { if (gc2d ==null) { throw new ProcessException(\"Invalid input, source grid coverage should be not null\"); } GridEnvelope2D gridEnv = gc2d.getGridGeometry().getGridRange2D(); double coverageWidth = gridEnv.getWidth(); double coverageHeight = gridEnv.getHeight(); if (scaleFactor != null && (Math.abs(coverageWidth*(scaleFactor - 1f)) >=1 || Math.abs(coverageHeight*(scaleFactor - 1f)) >= 1) ) { Interpolation interp = interpolation != null ? interpolation : new InterpolationNearest(); double scaleX = scaleFactor; double scaleY = scaleFactor; final RenderedImage imageToBescaled = gc2d.getRenderedImage(); if (imageToBescaled != null) { final SampleModel sampleModel = imageToBescaled.getSampleModel(); final int height = sampleModel.getHeight(); final int width = sampleModel.getWidth(); if (height * scaleFactor < 1) { scaleY = 1d/height; } if (width * scaleFactor < 1) { scaleX = 1d/width; } } gc2d = new AffineProcess().execute(gc2d, scaleX, scaleY, null, null, null, null, null, interp); } try { return new RasterAsPointFeatureCollection(gc2d, emisphere, targetCRS); } catch (IOException e) { throw new ProcessException(\"Unable to wrap provided grid coverage\", e); } }### Assistant: @Test(expected = ProcessException.class) public void testNullCoverage() { process.execute(null, null, null, null, false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void receive(final IMessageProcessor processor) throws MessageReceiveException, AsynchronousOperationException { Throwable syncException = null; if (isBusy.compareAndSet(false, true)) { try { childReceiver.receive(processor); } catch (Throwable e) { syncException = e; } finally { isBusy.set(false); } } else { processor.pauseProcess(); queue.add(processor); } executeDelayed(); if (null != syncException) { throw new MessageReceiveException(\"Failed to execute actor receiver.\", syncException); } }### Assistant: @Test public void Should_executeReceiverImmediately_When_ActorIsNotBusy() throws Exception { receiverFlag.set(false); doAnswer(invocationOnMock -> { assertTrue(receiverFlag.get()); return null; }).when(childReceiverMock).receive(any()); when(receiverQueueMock.isEmpty()).thenReturn(true); ActorReceiver actorReceiver = new ActorReceiver(childReceiverMock); actorReceiver.receive(processorMock); verify(childReceiverMock).receive(same(processorMock)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setUpdate( boolean update ) { this.update = update; }### Assistant: @Test public void testDiffUpdate() { column1.setUpdate(false); column2.setUpdate(true); checkSingleDiff(FIELD_UPDATE, false, true, column1, column2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void close() throws Exception { if (enterUnlessClosed()) { try { try { resourceManagerLeaderElectionService.shutdown(); dispatcher.shutdownNow(); } finally { super.close(); } } finally { exit(); } } }### Assistant: @Test public void testRepeatedClose() throws Exception { final Configuration flinkConfig = new Configuration(); final YarnHighAvailabilityServices services = new YarnIntraNonHaMasterServices(flinkConfig, hadoopConfig); services.closeAndCleanupAllData(); services.close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void setConnectionParametersForRequest(HttpURLConnection connection, Request<?> request) throws IOException { switch (request.getMethod()) { case Method.GET: break; case Method.DELETE: connection.setRequestMethod(\"DELETE\"); break; case Method.POST: connection.setRequestMethod(\"POST\"); addBodyIfExists(connection, request); break; case Method.PUT: connection.setRequestMethod(\"PUT\"); addBodyIfExists(connection, request); break; case Method.HEAD: connection.setRequestMethod(\"HEAD\"); break; case Method.OPTIONS: connection.setRequestMethod(\"OPTIONS\"); break; case Method.TRACE: connection.setRequestMethod(\"TRACE\"); break; case Method.PATCH: connection.setRequestMethod(\"PATCH\"); addBodyIfExists(connection, request); break; default: connection.setRequestMethod(request.getMethod()); addBodyIfExists(connection, request); break; } }### Assistant: @Test public void connectionForHeadRequest() throws Exception { TestRequest.Head request = new TestRequest.Head(); assertEquals(request.getMethod(), Method.HEAD); hurlStack.setConnectionParametersForRequest(mockConnection, request); assertEquals(\"HEAD\", mockConnection.getRequestMethod()); assertFalse(mockConnection.getDoOutput()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @SuppressWarnings( \"unchecked\" ) public List<T> query( Query query ) { Schema schema = query.getSchema(); InternalHibernateGenericStore<?> store = getStore( (Class<? extends IdentifiableObject>) schema.getKlass() ); if ( store == null ) { return new ArrayList<>(); } if ( query.getUser() == null ) { query.setUser( currentUserService.getCurrentUser() ); } if ( !query.isPlannedQuery() ) { QueryPlan queryPlan = queryPlanner.planQuery( query, true ); query = queryPlan.getPersistedQuery(); } DetachedCriteria detachedCriteria = buildCriteria( store.getSharingDetachedCriteria( query.getUser() ), query ); Criteria criteria = store.getCriteria(); if ( criteria == null ) { return new ArrayList<>(); } criteria.setFirstResult( query.getFirstResult() ); criteria.setMaxResults( query.getMaxResults() ); for ( Order order : query.getOrders() ) { criteria.addOrder( getHibernateOrder( order ) ); } return criteria.add( Subqueries.propertyIn( \"id\", detachedCriteria ) ).list(); }### Assistant: @Test public void testIdentifiableSearch1() { Query query = Query.from( schemaService.getDynamicSchema( DataElementGroup.class ), Junction.Type.OR ); query.add( Restrictions.eq( \"name\", \"DataElementGroupA\" ) ); query.add( Restrictions.eq( \"name\", \"DataElementGroupB\" ) ); List<? extends IdentifiableObject> objects = queryEngine.query( query ); assertEquals( 2, objects.size() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<SeriesData<EventAction<LifecycleEvent>>> getDataForRange(@NotNull Range timeCurrentRangeUs) { if (myProfilers.getIdeServices().getFeatureConfig().isUnifiedPipelineEnabled()) { return getTransportData(timeCurrentRangeUs); } else { return getLegacyData(timeCurrentRangeUs); } }### Assistant: @Test public void testActivityDied() { buildActivityEvent(ACTIVITY_NAME, new ActivityStateData[]{ new ActivityStateData(Interaction.ViewData.State.CREATED, TEST_START_TIME_NS), new ActivityStateData(Interaction.ViewData.State.RESUMED, TEST_START_TIME_NS), new ActivityStateData(Interaction.ViewData.State.PAUSED, TEST_END_TIME_NS), new ActivityStateData(Interaction.ViewData.State.STOPPED, TEST_END_TIME_NS), new ActivityStateData(Interaction.ViewData.State.DESTROYED, TEST_END_TIME_NS), }, 0); Range range = new Range(TimeUnit.NANOSECONDS.toMicros(TEST_START_TIME_NS), TimeUnit.NANOSECONDS.toMicros(TEST_END_TIME_NS)); List<SeriesData<EventAction<LifecycleEvent>>> dataList = myActivitySeries.getDataForRange(range); assertThat(dataList).hasSize(1); SeriesData<EventAction<LifecycleEvent>> event = dataList.get(0); verifyActivity(event, TEST_END_TIME_NS); assertThat(event.value.getType()).isEqualTo(LifecycleEvent.COMPLETED); assertThat(((LifecycleAction)event.value).getName()).isEqualTo( String.format(\"%s - %s - %s\", ACTIVITY_NAME, Interaction.ViewData.State.STOPPED.toString().toLowerCase(), Interaction.ViewData.State.DESTROYED.toString().toLowerCase())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T extends Document> List<Cluster<T>> cluster( Stream<? extends T> docStream, LanguageComponents languageComponents) { List<T> documents = docStream.collect(Collectors.toList()); List<Cluster<T>> clusters = new ArrayList<>(); context = preprocessing.preprocess(documents.stream(), queryHint.get(), languageComponents); labelFormatter = context.languageComponents.get(LabelFormatter.class); sb = new GeneralizedSuffixTree.SequenceBuilder(); final int[] tokenIndex = context.allTokens.wordIndex; final short[] tokenType = context.allTokens.type; for (int i = 0; i < tokenIndex.length; i++) { if (tokenIndex[i] == -1) { if ((tokenType[i] & (Tokenizer.TF_SEPARATOR_DOCUMENT | Tokenizer.TF_TERMINATOR)) != 0) { sb.endDocument(); } continue; } final int s = i; while (tokenIndex[i + 1] != -1) i++; final int phraseLength = 1 + i - s; if (phraseLength >= 1) { sb.addPhrase(tokenIndex, s, phraseLength); } } sb.buildSuffixTree(); List<ClusterCandidate> baseClusters = createBaseClusters(sb); List<ClusterCandidate> mergedClusters = createMergedClusters(baseClusters); postProcessing(documents, mergedClusters, clusters); return SharedInfrastructure.reorderByWeightedScoreAndSize(clusters, this.scoreWeight.get()); }### Assistant: @Test public void testMergingBaseClustersWithStemEquivalentPhrases() { List<String> titles = Arrays.asList( \"good programs . foo1\", \"foo2 good programs . foo2\", \"good programs taste good\", \"good programs are good\", \"good programming . foo3\", \"foo4 good programming . foo4\", \"good programming makes you feel better\"); STCClusteringAlgorithm algorithm = algorithm(); algorithm.minBaseClusterScore.set(0d); Stream<TestDocument> documentStream = titles.stream().map(title -> new TestDocument(title)); List<Cluster<Document>> clusters = algorithm.cluster(documentStream, CachedLangComponents.loadCached(\"English\")); Assertions.assertThat(clusters.stream().flatMap(cluster -> cluster.getLabels().stream())) .contains(\"Good Programs\") .doesNotContain(\"Good Programming\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull @Override public NativeUrlGenerator withAdUnitId(final String adUnitId) { mAdUnitId = adUnitId; return this; }### Assistant: @Test public void generateNativeAdUrl_needsButDoesNotHaveReadPhoneState_shouldNotContainOperatorName() { shadowTelephonyManager.setNeedsReadPhoneState(true); shadowTelephonyManager.setReadPhoneStatePermission(false); shadowTelephonyManager.setNetworkOperatorName(\"TEST_CARRIER\"); subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID); String requestString = generateMinimumUrlString(); assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isNullOrEmpty(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> associateApproletoSDB(String token, SafeAppRoleAccess safeAppRoleAccess) { String jsonstr = JSONUtil.getJSON(safeAppRoleAccess); log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Associate AppRole to SDB\"). put(LogMessage.MESSAGE, String.format (\"Trying to associate AppRole to SDB [%s]\", jsonstr)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); Map<String,Object> requestMap = ControllerUtil.parseJson(jsonstr); if(!ControllerUtil.areSafeAppRoleInputsValid(requestMap)) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Invalid input values\\\"]}\"); } if (safeAppRoleAccess.getRole_name().equals(TVaultConstants.SELF_SERVICE_APPROLE_NAME)) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Access denied: no permission to associate this AppRole to any safe\\\"]}\"); } String approle = requestMap.get(\"role_name\").toString().toLowerCase(); String path = requestMap.get(\"path\").toString(); String access = requestMap.get(\"access\").toString(); boolean canAddAppRole = ControllerUtil.canAddPermission(path, token); if(canAddAppRole){ log.info(\"Associate approle to SDB - path :\" + path + \"valid\" ); String folders[] = path.split(\"[/]+\"); String policy =\"\"; switch (access){ case \"read\": policy = \"r_\" + folders[0].toLowerCase() + \"_\" + folders[1] ; break ; case \"write\": policy = \"w_\" + folders[0].toLowerCase() + \"_\" + folders[1] ;break; case \"deny\": policy = \"d_\" + folders[0].toLowerCase() + \"_\" + folders[1] ;break; } String policyPostfix = folders[0].toLowerCase() + \"_\" + folders[1]; Response roleResponse = reqProcessor.process(\"/auth/approle/role/read\",\"{\\\"role_name\\\":\\\"\"+approle+\"\\\"}\",token); String responseJson=\"\"; List<String> policies = new ArrayList<>(); List<String> currentpolicies = new ArrayList<>(); if(HttpStatus.OK.equals(roleResponse.getHttpstatus())){ responseJson = roleResponse.getResponse(); ObjectMapper objMapper = new ObjectMapper(); try { JsonNode policiesArry = objMapper.readTree(responseJson).get(\"data\").get(\"policies\"); if (null != policiesArry) { for(JsonNode policyNode : policiesArry){ currentpolicies.add(policyNode.asText()); } } } catch (IOException e) { log.error(e); } policies.addAll(currentpolicies); policies.remove(\"r_\"+policyPostfix); policies.remove(\"w_\"+policyPostfix); policies.remove(\"d_\"+policyPostfix); } else { return ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).body(\"{\\\"errors\\\":[\\\"Non existing role name. Please configure approle as first step\\\"]}\"); } if(\"\".equals(policy)){ return ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).body(\"{\\\"errors\\\":[\\\"Incorrect access requested. Valid values are read,write,deny \\\"]}\"); } policies.add(policy); String policiesString = StringUtils.join(policies, \",\"); String currentpoliciesString = StringUtils.join(currentpolicies, \",\"); log.info(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Associate AppRole to SDB\"). put(LogMessage.MESSAGE, \"Associate approle to SDB - policy :\" + policiesString + \" is being configured\" ). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); Response approleControllerResp = appRoleService.configureApprole(approle,policiesString,token); if(HttpStatus.OK.equals(approleControllerResp.getHttpstatus()) || (HttpStatus.NO_CONTENT.equals(approleControllerResp.getHttpstatus()))) { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Associate AppRole to SDB\"). put(LogMessage.MESSAGE, \"Associate approle to SDB - policy :\" + policiesString + \" is associated\"). put(LogMessage.STATUS, approleControllerResp.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); Map<String,String> params = new HashMap<String,String>(); params.put(\"type\", \"app-roles\"); params.put(\"name\",approle); params.put(\"path\",path); params.put(\"access\",access); Response metadataResponse = ControllerUtil.updateMetadata(params,token); if(metadataResponse != null && HttpStatus.NO_CONTENT.equals(metadataResponse.getHttpstatus())){ log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add AppRole To SDB\"). put(LogMessage.MESSAGE, \"AppRole is successfully associated\"). put(LogMessage.STATUS, metadataResponse.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"Approle :\" + approle + \" is successfully associated with SDB\\\"]}\"); }else{ String safeType = ControllerUtil.getSafeType(path); String safeName = ControllerUtil.getSafeName(path); List<String> safeNames = ControllerUtil.getAllExistingSafeNames(safeType, token); String newPath = path; if (safeNames != null ) { for (String existingSafeName: safeNames) { if (existingSafeName.equalsIgnoreCase(safeName)) { newPath = safeType + \"/\" + existingSafeName; break; } } } params.put(\"path\",newPath); metadataResponse = ControllerUtil.updateMetadata(params,token); if(HttpStatus.NO_CONTENT.equals(metadataResponse.getHttpstatus())){ log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add AppRole To SDB\"). put(LogMessage.MESSAGE, \"AppRole is successfully associated\"). put(LogMessage.STATUS, metadataResponse.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"Approle :\" + approle + \" is successfully associated with SDB\\\"]}\"); } else { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add AppRole To SDB\"). put(LogMessage.MESSAGE, \"AppRole configuration failed.\"). put(LogMessage.RESPONSE, metadataResponse.getResponse()). put(LogMessage.STATUS, metadataResponse.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); approleControllerResp = appRoleService.configureApprole(approle,currentpoliciesString,token); if(approleControllerResp.getHttpstatus().equals(HttpStatus.NO_CONTENT)){ log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add AppRole To SDB\"). put(LogMessage.MESSAGE, \"Reverting user policy update failed\"). put(LogMessage.RESPONSE, metadataResponse.getResponse()). put(LogMessage.STATUS, metadataResponse.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Role configuration failed.Please try again\\\"]}\"); }else{ log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Add AppRole To SDB\"). put(LogMessage.MESSAGE, \"Reverting user policy update failed\"). put(LogMessage.RESPONSE, metadataResponse.getResponse()). put(LogMessage.STATUS, metadataResponse.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Role configuration failed.Contact Admin \\\"]}\"); } } } }else { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Associate AppRole to SDB\"). put(LogMessage.MESSAGE, \"Association of AppRole to SDB failed\"). put(LogMessage.RESPONSE, approleControllerResp.getResponse()). put(LogMessage.STATUS, approleControllerResp.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); log.error( \"Associate Approle\" +approle + \"to sdb FAILED\"); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"messages\\\":[\\\"Approle :\" + approle + \" failed to be associated with SDB\\\"]}\"); } } else { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Associate AppRole to SDB\"). put(LogMessage.MESSAGE, \"Association of AppRole to SDB failed\"). put(LogMessage.RESPONSE, \"Invalid Path\"). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"messages\\\":[\\\"Approle :\" + approle + \" failed to be associated with SDB.. Invalid Path specified\\\"]}\"); } }### Assistant: @Test public void test_AssociateAppRole_failure_400() throws Exception { ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Access denied: no permission to associate this AppRole to any safe\\\"]}\"); String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; SafeAppRoleAccess safeAppRoleAccess = new SafeAppRoleAccess(\"selfservicesupportrole\", \"shared/mysafe01\", \"write\"); when(ControllerUtil.areSafeAppRoleInputsValid(Mockito.any())).thenReturn(true); ResponseEntity<String> responseEntityActual = safesService.associateApproletoSDB(token, safeAppRoleAccess); assertEquals(HttpStatus.BAD_REQUEST, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected, responseEntityActual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ProgressEvent<ResourceModel, CallbackContext> handleRequest( final AmazonWebServicesClientProxy proxy, final ResourceHandlerRequest<ResourceModel> request, final CallbackContext callbackContext, final Logger logger) { this.clientProxy = proxy; this.logger = logger; final ResourceModel currentModel = request.getDesiredResourceState(); final ResourceModel previousModel = request.getPreviousResourceState(); final String arn = previousModel.getArn(); UpdateImagePipelineResponse response; try { response = proxy.injectCredentialsAndInvokeV2(RequestUtil.generateUpdateImagePipelineRequest(arn, currentModel), ClientBuilder.getImageBuilderClient()::updateImagePipeline); Map<String, String> previousTagMap = previousModel.getTags() == null ? new HashMap<>() : previousModel.getTags(); Map<String, String> currentTagMap = currentModel.getTags() == null ? new HashMap<>() : currentModel.getTags(); if (previousTagMap.isEmpty() && currentTagMap.isEmpty()) { } else if (previousTagMap.isEmpty()) { proxy.injectCredentialsAndInvokeV2(RequestUtil.generateTagDistributionConfigurationRequest( arn, currentTagMap), ClientBuilder.getImageBuilderClient()::tagResource); } else if (currentTagMap.isEmpty()) { List<String> keyList = new LinkedList<>(); for (Map.Entry<String, String> previousTagMapEntry : previousTagMap.entrySet()) { keyList.add(previousTagMapEntry.getKey()); } proxy.injectCredentialsAndInvokeV2(RequestUtil.generateUntagDistributionConfigurationRequest(arn, keyList), ClientBuilder.getImageBuilderClient()::untagResource); } else { List<String> untagKeyList = new LinkedList<>(); for (Map.Entry<String,String> previousTagMapEntry : previousTagMap.entrySet()) { if (! currentTagMap.containsKey(previousTagMapEntry.getKey())) { untagKeyList.add(previousTagMapEntry.getKey()); } } if (!untagKeyList.isEmpty()) { proxy.injectCredentialsAndInvokeV2(RequestUtil.generateUntagDistributionConfigurationRequest(arn, untagKeyList), ClientBuilder.getImageBuilderClient()::untagResource); } Map<String, String> tagKeyMap = new HashMap<>(); for (Map.Entry<String,String> currentTagMapEntry : currentTagMap.entrySet()) { if (! previousTagMap.containsKey(currentTagMapEntry.getKey())) { tagKeyMap.put(currentTagMapEntry.getKey(), currentTagMapEntry.getValue()); } } if (!tagKeyMap.isEmpty()) { proxy.injectCredentialsAndInvokeV2(RequestUtil.generateTagDistributionConfigurationRequest(arn, tagKeyMap), ClientBuilder.getImageBuilderClient()::tagResource); } Map<String, String> updateKeyMap = new HashMap<>(); for (Map.Entry<String,String> currentTagMapEntry : currentTagMap.entrySet()) { String currentTagEntryKey = currentTagMapEntry.getKey(); String currentTagEntryValue = currentTagMapEntry.getValue(); if (previousTagMap.containsKey(currentTagEntryKey) && ! previousTagMap.get(currentTagEntryKey).equals(currentTagEntryValue)) { updateKeyMap.put(currentTagMapEntry.getKey(), currentTagMapEntry.getValue()); } } if (!updateKeyMap.isEmpty()) { proxy.injectCredentialsAndInvokeV2(RequestUtil.generateTagDistributionConfigurationRequest(arn, updateKeyMap), ClientBuilder.getImageBuilderClient()::tagResource); } } currentModel.setArn(arn); } catch (ResourceNotFoundException e) { throw new CfnNotFoundException(ResourceModel.TYPE_NAME, arn); } return ProgressEvent.<ResourceModel, CallbackContext>builder() .resourceModel(currentModel) .status(OperationStatus.SUCCESS) .build(); }### Assistant: @Test public void handleRequest_ResourceNotFound_Failure() { doThrow(ResourceNotFoundException.class) .when(proxy) .injectCredentialsAndInvokeV2(any(), any()); assertThrows(CfnNotFoundException.class, () -> handler.handleRequest(proxy, request, null, logger)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final String getKey() { return key; }### Assistant: @Test public void getKey() { PropertyValue root = PropertyValue.createObject(\"a\"); assertThat(\"a\").isEqualTo(root.getKey()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean containsInt(int elem) { return getIntervalContaining(elem) != null; }### Assistant: @Test public void testContainsInt() throws Exception { assertFalse(rbll.containsInt(4)); rbll.addInterval(0, 2); assertFalse(rbll.containsInt(4)); assertTrue(rbll.containsInt(0)); assertTrue(rbll.containsInt(1)); assertTrue(rbll.containsInt(2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void delete() { deleteEvent.fire(new GroupFunctionDeletedEvent(groupFunction)); }### Assistant: @Test public void testDelete() { GroupFunction groupFunction = new GroupFunction(\"column1\", \"column1\", AggregateFunctionType.COUNT); presenter.init(metadata, groupFunction, null, \"Title\", true, true); presenter.delete(); verify(deleteEvent).fire(any(GroupFunctionDeletedEvent.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public DeviceStatusTaskPluginConfig getDeviceStatusTaskPluginConfig() { return deviceStatusTaskPluginConfig; }### Assistant: @Test (description = \"This test case tests the Device task config retrieval\") public void testDeviceStatusTaskConfig () throws InvocationTargetException, IllegalAccessException { setDeviceStatusTaskPluginConfig .invoke(androidDeviceTypeManagerService, androidDeviceConfiguration.getDeviceStatusTaskConfiguration()); DeviceStatusTaskPluginConfig deviceStatusTaskPuginConfig = androidDeviceTypeManagerService .getDeviceStatusTaskPluginConfig(); DeviceStatusTaskConfiguration deviceStatusTaskConfiguration = androidDeviceConfiguration .getDeviceStatusTaskConfiguration(); Assert.assertEquals(deviceStatusTaskPuginConfig.getFrequency(), deviceStatusTaskConfiguration.getFrequency(), \"Frequency provided in the device task configuration is not set properly.\"); Assert.assertEquals(deviceStatusTaskPuginConfig.getIdleTimeToMarkInactive(), deviceStatusTaskConfiguration.getIdleTimeToMarkInactive(), \"Idle time to mark inactive provided in \" + \"the device task configuration is not set properly.\"); Assert.assertEquals(deviceStatusTaskPuginConfig.getIdleTimeToMarkUnreachable(), deviceStatusTaskConfiguration.getIdleTimeToMarkUnreachable(), \"Idle time to mark un-reachable \" + \"provided in the device task configuration is not set properly.\"); Assert.assertEquals(deviceStatusTaskPuginConfig.isRequireStatusMonitoring(), deviceStatusTaskConfiguration.isEnabled(), \"Enabled status provided in the device task configuration\" + \" is not set properly\"); setDeviceStatusTaskPluginConfig.invoke(rasberrypiDeviceTypeManagerService, rasberrypiDeviceConfiguration.getDeviceStatusTaskConfiguration()); deviceStatusTaskPuginConfig = rasberrypiDeviceTypeManagerService.getDeviceStatusTaskPluginConfig(); Assert.assertEquals(deviceStatusTaskPuginConfig.getFrequency(), 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String adParameter( long customerId, long adGroupId, long criterionId, long parameterIndex) { return AdParameterName.format( String.valueOf(customerId), concatIdentifiers(adGroupId, criterionId, parameterIndex)); }### Assistant: @Test public void testAdParameter() { String expected = \"customers/1234/adParameters/5678~1011~3\"; assertEquals(expected, ResourceNames.adParameter(1234L, 5678L, 1011L, 3L)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static CIP_CHIRALITY getCIPChirality(LigancyFourChirality stereoCenter) { ILigand[] ligands = order(stereoCenter.getLigands()); LigancyFourChirality rsChirality = stereoCenter.project(ligands); boolean allAreDifferent = checkIfAllLigandsAreDifferent(ligands); if (!allAreDifferent) return CIP_CHIRALITY.NONE; if (rsChirality.getStereo() == Stereo.CLOCKWISE) return CIP_CHIRALITY.R; return CIP_CHIRALITY.S; }### Assistant: @Test public void testGetCIPChirality_Anti_ILigancyFourChirality() { ILigand[] antiLigands = new ILigand[]{ligands[0], ligands[1], ligands[3], ligands[2]}; List<IAtom> ligandAtoms = new ArrayList<IAtom>(); for (ILigand ligand : antiLigands) ligandAtoms.add(ligand.getLigandAtom()); ITetrahedralChirality chirality = new TetrahedralChirality(molecule.getAtom(1), (IAtom[]) ligandAtoms.toArray(new IAtom[]{}), Stereo.ANTI_CLOCKWISE); CIP_CHIRALITY rsChirality = CIPTool.getCIPChirality(molecule, chirality); Assert.assertEquals(CIP_CHIRALITY.S, rsChirality); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Entity> build(Bundle bundle, BundleType bundleType, Document document) { if (bundle instanceof AnnotatedBundle) { Map<String, JmsDestination> jmsDestinationMap = Optional.ofNullable(bundle.getJmsDestinations()).orElse(Collections.emptyMap()); return buildEntities(jmsDestinationMap, ((AnnotatedBundle) bundle).getFullBundle(), bundleType, document); } else { return buildEntities(bundle.getJmsDestinations(), bundle, bundleType, document); } }### Assistant: @Test void buildJmsDestination_WebShpereOverLdapProvider_MissingDestinationClientAuthPrivateKey() { JmsDestinationEntityBuilder builder = new JmsDestinationEntityBuilder(ID_GENERATOR); final Bundle bundle = new Bundle(projectInfo); bundle.putAllJmsDestinations(ImmutableMap.of(JMS_DESTINATION_ENTITY_NAME, buildWebShpereMqOverLdapProvider(bundle, false).build())); assertThrows(EntityBuilderException.class, () -> builder.build(bundle, EntityBuilder.BundleType.ENVIRONMENT, DocumentTools.INSTANCE.getDocumentBuilder().newDocument())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isNetworkAvailable(Context context) { try { ConnectivityManager connManager = (ConnectivityManager) context.getSystemService (Context.CONNECTIVITY_SERVICE); if (connManager.getActiveNetworkInfo() != null && connManager.getActiveNetworkInfo() .isAvailable() && connManager.getActiveNetworkInfo().isConnected()) { return true; } } catch (Exception ex) { Logger.e(ex.getMessage()); return false; } return false; }### Assistant: @Test public void isNetworkAvailableTest_excption() { Mockito.when(conManagerMock.getActiveNetworkInfo()).thenReturn(null); Mockito.when(networkInfoMock.isAvailable()).thenReturn(true); Mockito.when(networkInfoMock.isConnected()).thenReturn(true); Assert.assertFalse(Utils.isNetworkAvailable(contextMock)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public EnvironmentBuilder newCloudKeeperEnvironmentBuilder() { return new EnvironmentBuilder(); }### Assistant: @Test public void testProxyFibonacci() throws Exception { CloudKeeperEnvironment cloudKeeperEnvironment = cloudKeeper.newCloudKeeperEnvironmentBuilder() .setCleaningRequested(true) .build(); WorkflowExecution workflowExecution = cloudKeeperEnvironment .newWorkflowExecutionBuilder(new MutableProxyModule().setDeclaration(Fibonacci.class.getName())) .setBundleIdentifiers(Arrays.asList(SimpleRepository.BUNDLE_ID, FibonacciRepository.BUNDLE_ID)) .setInputs(Collections.singletonMap(SimpleName.identifier(\"n\"), (Object) 5)) .start(); int result = (Integer) workflowExecution.getOutput(\"result\").get(WAIT_SECONDS, TimeUnit.SECONDS); Assert.assertEquals(result, 5); workflowExecution.toCompletableFuture().get(WAIT_SECONDS, TimeUnit.SECONDS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Result invoke(Invocation invocation) throws RpcException { Result result = null; String value = directory.getUrl().getMethodParameter(invocation.getMethodName(), Constants.MOCK_KEY, Boolean.FALSE.toString()).trim(); if (value.length() == 0 || value.equalsIgnoreCase(\"false\")) { result = this.invoker.invoke(invocation); } else if (value.startsWith(\"force\")) { if (logger.isWarnEnabled()) { logger.info(\"force-mock: \" + invocation.getMethodName() + \" force-mock enabled , url : \" + directory.getUrl()); } result = doMockInvoke(invocation, null); } else { try { result = this.invoker.invoke(invocation); } catch (RpcException e) { if (e.isBiz()) { throw e; } else { if (logger.isWarnEnabled()) { logger.warn(\"fail-mock: \" + invocation.getMethodName() + \" fail-mock enabled , url : \" + directory.getUrl(), e); } result = doMockInvoke(invocation, e); } } } return result; }### Assistant: @Test public void testMockInvokerFromOverride_Invoke_checkCompatible_ImplMock3() { URL url = URL.valueOf(\"remote: .addParameter(\"mock\", \"force\"); Invoker<IHelloService> cluster = getClusterInvoker(url); RpcInvocation invocation = new RpcInvocation(); invocation.setMethodName(\"getSomething\"); Result ret = cluster.invoke(invocation); Assert.assertEquals(\"somethingmock\", ret.getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Activate protected void activate(BundleContext bundleContext) { ddmStorageAdapterServiceTrackerMap = ServiceTrackerMapFactory.openSingleValueMap( bundleContext, DDMStorageAdapter.class, \"ddm.storage.adapter.type\"); }### Assistant: @Test public void testActivate() { DDMStorageAdapterTrackerImpl ddmStorageAdapterTrackerImpl = new DDMStorageAdapterTrackerImpl(); BundleContext bundleContext = mock(BundleContext.class); when( ServiceTrackerMapFactory.openSingleValueMap( bundleContext, DDMStorageAdapter.class, \"ddm.storage.adapter.type\") ).thenReturn( _ddmStorageAdapterServiceTrackerMap ); ddmStorageAdapterTrackerImpl.activate(bundleContext); Assert.assertNotNull( ddmStorageAdapterTrackerImpl.ddmStorageAdapterServiceTrackerMap); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Double convert(String value, Class<? extends Double> type, ResourceBundle bundle) { if (isNullOrEmpty(value)) { return 0d; } try { final Locale locale = localization.getLocale(); DecimalFormat fmt = (DecimalFormat) DecimalFormat.getInstance(locale); return fmt.parse(value).doubleValue(); } catch (ParseException e) { throw new ConversionError(MessageFormat.format(bundle.getString(\"is_not_a_valid_number\"), value)); } }### Assistant: @Test public void shouldBeAbleToConvertEmpty() { assertThat((Double) converter.convert(\"\", double.class, bundle), is(equalTo(0d))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static AbstractDatabaseBackend getInstance() { String className = AppSettings.getInstance().getString(AppSettings.DATABASE_BACKEND); if (instance == null || !className.equals(instance.getClass().getCanonicalName())) { instance = (AbstractDatabaseBackend) InstanceUtils.invokeConstructor(className); } return instance; }### Assistant: @Test public void testGetInstance() { try(SettingsOverride override = SettingsOverride.apply(Map.of(AppSettings.DATABASE_BACKEND, \"com.example.DoesNotExist\"))) { try { AbstractDatabaseBackend.getInstance(); fail(); } catch (RuntimeException e) { assertEquals(\"java.lang.ClassNotFoundException: com.example.DoesNotExist\", e.getMessage()); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Set<String> getPropertyIds() { return propertyIds; }### Assistant: @Test public void testValidPropertyIds() { Request request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.HostComponent)); Set<String> validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"HostRoles/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"params/run_smoke_test\")); Assert.assertTrue(validPropertyIds.contains(\"HostRoles/actual_configs\")); Assert.assertTrue(validPropertyIds.contains(\"HostRoles/desired_stack_id\")); Assert.assertTrue(validPropertyIds.contains(\"HostRoles/stack_id\")); Assert.assertTrue(validPropertyIds.contains(\"HostRoles/desired_state\")); Assert.assertTrue(validPropertyIds.contains(\"HostRoles/state\")); Assert.assertTrue(validPropertyIds.contains(\"HostRoles/component_name\")); Assert.assertTrue(validPropertyIds.contains(\"HostRoles/host_name\")); Assert.assertTrue(validPropertyIds.contains(\"HostRoles/cluster_name\")); Assert.assertTrue(validPropertyIds.contains(\"HostRoles/role_id\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.Cluster)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"Clusters/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"Clusters/cluster_id\")); Assert.assertTrue(validPropertyIds.contains(\"Clusters/cluster_name\")); Assert.assertTrue(validPropertyIds.contains(\"Clusters/version\")); Assert.assertTrue(validPropertyIds.contains(\"Clusters/state\")); Assert.assertTrue(validPropertyIds.contains(\"Clusters/desired_configs\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.Service)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"ServiceInfo/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"ServiceInfo/service_name\")); Assert.assertTrue(validPropertyIds.contains(\"ServiceInfo/cluster_name\")); Assert.assertTrue(validPropertyIds.contains(\"ServiceInfo/state\")); Assert.assertTrue(validPropertyIds.contains(\"Services/description\")); Assert.assertTrue(validPropertyIds.contains(\"Services/display_name\")); Assert.assertTrue(validPropertyIds.contains(\"Services/attributes\")); Assert.assertTrue(validPropertyIds.contains(\"params/run_smoke_test\")); Assert.assertTrue(validPropertyIds.contains(\"params/reconfigure_client\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.Host)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"Hosts/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/cluster_name\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/host_name\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/ip\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/attributes\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/total_mem\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/cpu_count\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/ph_cpu_count\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/os_arch\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/os_type\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/rack_info\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/last_heartbeat_time\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/last_agent_env\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/last_registration_time\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/disk_info\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/host_status\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/host_health_report\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/public_host_name\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/host_state\")); Assert.assertTrue(validPropertyIds.contains(\"Hosts/desired_configs\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.Component)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"ServiceComponentInfo/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"ServiceComponentInfo/service_name\")); Assert.assertTrue(validPropertyIds.contains(\"ServiceComponentInfo/component_name\")); Assert.assertTrue(validPropertyIds.contains(\"ServiceComponentInfo/cluster_name\")); Assert.assertTrue(validPropertyIds.contains(\"ServiceComponentInfo/state\")); Assert.assertTrue(validPropertyIds.contains(\"ServiceComponents/display_name\")); Assert.assertTrue(validPropertyIds.contains(\"ServiceComponents/description\")); Assert.assertTrue(validPropertyIds.contains(\"params/run_smoke_test\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.Action)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"Action/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"Actions/action_name\")); Assert.assertTrue(validPropertyIds.contains(\"Actions/action_type\")); Assert.assertTrue(validPropertyIds.contains(\"Actions/inputs\")); Assert.assertTrue(validPropertyIds.contains(\"Actions/target_service\")); Assert.assertTrue(validPropertyIds.contains(\"Actions/target_component\")); Assert.assertTrue(validPropertyIds.contains(\"Actions/description\")); Assert.assertTrue(validPropertyIds.contains(\"Actions/target_type\")); Assert.assertTrue(validPropertyIds.contains(\"Actions/default_timeout\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.Request)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"Requests/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"Requests/id\")); Assert.assertTrue(validPropertyIds.contains(\"Requests/cluster_name\")); Assert.assertTrue(validPropertyIds.contains(\"Requests/request_status\")); Assert.assertTrue(validPropertyIds.contains(\"Requests/request_context\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.Task)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"Task/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/id\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/request_id\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/cluster_name\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/stage_id\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/host_name\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/command\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/role\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/status\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/exit_code\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/stderr\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/stdout\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/start_time\")); Assert.assertTrue(validPropertyIds.contains(\"Tasks/attempt_cnt\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.User)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"Users/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"Users/user_name\")); Assert.assertTrue(validPropertyIds.contains(\"Users/password\")); Assert.assertTrue(validPropertyIds.contains(\"Users/old_password\")); Assert.assertTrue(validPropertyIds.contains(\"Users/ldap_user\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.Stack)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"Stacks/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"Stacks/stack_name\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.StackVersion)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"Versions/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"Versions/stack_name\")); Assert.assertTrue(validPropertyIds.contains(\"Versions/stack_version\")); Assert.assertTrue(validPropertyIds.contains(\"Versions/min_upgrade_version\")); request = PropertyHelper.getReadRequest(OperatingSystemResourceProvider.propertyIds); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"OperatingSystems/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"OperatingSystems/stack_name\")); Assert.assertTrue(validPropertyIds.contains(\"OperatingSystems/stack_version\")); Assert.assertTrue(validPropertyIds.contains(\"OperatingSystems/os_type\")); request = PropertyHelper.getReadRequest(RepositoryResourceProvider.propertyIds); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"Repositories/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"Repositories/stack_name\")); Assert.assertTrue(validPropertyIds.contains(\"Repositories/stack_version\")); Assert.assertTrue(validPropertyIds.contains(\"Repositories/os_type\")); Assert.assertTrue(validPropertyIds.contains(\"Repositories/base_url\")); Assert.assertTrue(validPropertyIds.contains(\"Repositories/repo_id\")); Assert.assertTrue(validPropertyIds.contains(\"Repositories/repo_name\")); Assert.assertTrue(validPropertyIds.contains(\"Repositories/mirrors_list\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.StackService)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"StackServices/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"StackServices/stack_name\")); Assert.assertTrue(validPropertyIds.contains(\"StackServices/stack_version\")); Assert.assertTrue(validPropertyIds.contains(\"StackServices/service_name\")); Assert.assertTrue(validPropertyIds.contains(\"StackServices/user_name\")); Assert.assertTrue(validPropertyIds.contains(\"StackServices/comments\")); Assert.assertTrue(validPropertyIds.contains(\"StackServices/service_version\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.StackConfiguration)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"StackConfigurations/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"StackConfigurations/stack_name\")); Assert.assertTrue(validPropertyIds.contains(\"StackConfigurations/stack_version\")); Assert.assertTrue(validPropertyIds.contains(\"StackConfigurations/service_name\")); Assert.assertTrue(validPropertyIds.contains(\"StackConfigurations/property_name\")); Assert.assertTrue(validPropertyIds.contains(\"StackConfigurations/property_description\")); Assert.assertTrue(validPropertyIds.contains(\"StackConfigurations/property_value\")); request = PropertyHelper.getReadRequest(PropertyHelper.getPropertyIds(Resource.Type.StackServiceComponent)); validPropertyIds = request.getPropertyIds(); Assert.assertFalse(validPropertyIds.contains(\"StackServiceComponents/unsupported_property_id\")); Assert.assertTrue(validPropertyIds.contains(\"StackServiceComponents/stack_version\")); Assert.assertTrue(validPropertyIds.contains(\"StackServiceComponents/stack_name\")); Assert.assertTrue(validPropertyIds.contains(\"StackServiceComponents/service_name\")); Assert.assertTrue(validPropertyIds.contains(\"StackServiceComponents/component_name\")); Assert.assertTrue(validPropertyIds.contains(\"StackServiceComponents/component_category\")); Assert.assertTrue(validPropertyIds.contains(\"StackServiceComponents/is_master\")); Assert.assertTrue(validPropertyIds.contains(\"StackServiceComponents/is_client\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"try\") public synchronized Collection<? extends CandidateUnit> completionAt( final File file, int line, int column, String prefix) { try (TelemetryUtils.ScopedSpan scope = TelemetryUtils.startScopedSpan(\"JavaCompletion.completionAt\")) { TelemetryUtils.ScopedSpan.addAnnotation( TelemetryUtils.annotationBuilder() .put(\"file\", file.getPath()) .put(\"line\", line) .put(\"column\", column) .put(\"prefix\", prefix) .build(\"args\")); Collection<? extends CandidateUnit> collection = this.completionAtInternal(file, line, column, prefix); if (nonNull(collection)) { this.hits = collection; } return collection; } }### Assistant: @Test public void testCompletion14() throws Exception { JavaCompletion completion = getCompletion(); File file = new File(project.getProjectRootPath(), \"./src/test/java/meghanada/Anno.java\") .getCanonicalFile(); assertTrue(file.exists()); final Collection<? extends CandidateUnit> units = timeIt(() -> completion.completionAt(file, 3, 21, \"va\")); units.forEach(a -> log.info(a.getDeclaration())); assertEquals(1, units.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setDataProvider(PlantUMLDataProvider provider) { this.provider=provider; }### Assistant: @Test public void data_provider_gives_SVG_so_outputformat_svg() { ContentTransformerData data = new ContentTransformerData(); data.filename=\"filename\"; data.origin=\"origin\"; transformerToTest.setDataProvider(new PlantUMLDataProvider() { @Override public PlantUMLOutputFormat getOutputFormat() { return PlantUMLOutputFormat.SVG; } }); String result = transformerToTest.transform(data); assertEquals(\"[plantuml,filename,svg]\\n\" + \"----\\n\" + \"origin\\n\" + \"----\\n\" + \"\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isFormAvailable() throws PortalException { if (isPreview()) { return true; } DDMFormInstance formInstance = getFormInstance(); if (formInstance != null) { Group group = _groupLocalService.getGroup( formInstance.getGroupId()); Group scopeGroup = _groupLocalService.getGroup( _portal.getScopeGroupId(_renderRequest)); if ((group != null) && (scopeGroup != null) && group.isStagingGroup() && !scopeGroup.isStagingGroup()) { return false; } if ((group != null) && group.isStagedRemotely()) { ThemeDisplay themeDisplay = getThemeDisplay(); if (!DDMFormInstanceStagingUtil. isFormInstancePublishedToRemoteLive( group, themeDisplay.getUser(), formInstance.getUuid())) { return false; } } } if (isSharedURL()) { if (isFormPublished() && isFormShared()) { return true; } return false; } if (formInstance != null) { return true; } return false; }### Assistant: @Test public void testIsFormAvailableForGuest() throws Exception { DDMFormInstance ddmFormInstance = mockDDMFormInstance(); when( _ddmFormInstanceLocalService.fetchFormInstance(Matchers.anyLong()) ).thenReturn( ddmFormInstance ); when( _ddmFormInstanceService.fetchFormInstance(Matchers.anyLong()) ).thenReturn( null ); DDMFormDisplayContext ddmFormDisplayContext = createDDMFormDisplayContext(); Assert.assertFalse(ddmFormDisplayContext.isFormAvailable()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Client provide(ContainerRequest containerRequest, HttpServletRequest httpServletRequest) { int requestPort = httpServletRequest.getLocalPort(); Optional<XfccSourceConfig> possibleXfccConfig = getXfccConfigForPort(requestPort); List<String> xfccHeaderValues = Optional.ofNullable(containerRequest.getRequestHeader(XFCC_HEADER_NAME)).orElse(List.of()); if (possibleXfccConfig.isEmpty() != xfccHeaderValues.isEmpty()) { throw new NotAuthorizedException(format( \"Port %d is configured to %s receive traffic with the %s header set\", requestPort, possibleXfccConfig.isEmpty() ? \"never\" : \"only\", XFCC_HEADER_NAME)); } Principal requestPrincipal = getPrincipal(containerRequest).orElseThrow( () -> new NotAuthorizedException(\"Not authorized as Keywhiz client\")); if (possibleXfccConfig.isEmpty()) { return authenticateClientFromCertificate(requestPrincipal); } else { return authorizeClientFromXfccHeader(possibleXfccConfig.get(), xfccHeaderValues, requestPrincipal); } }### Assistant: @Test(expected = NotAuthorizedException.class) public void rejectsXfcc_requesterSpiffeNotAllowed() { when(httpServletRequest.getLocalPort()).thenReturn(xfccAllowedPort); when(request.getRequestHeader(ClientAuthFactory.XFCC_HEADER_NAME)).thenReturn( List.of(xfccHeader)); when(securityContext.getUserPrincipal()).thenReturn(xfccPrincipal); when(xfccSourceConfig.allowedClientNames()).thenReturn(List.of(xfccName)); when(xfccSourceConfig.allowedSpiffeIds()).thenReturn(List.of()); factory.provide(request, httpServletRequest); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @PUT @Path(\"/zones/{id}\") public RangerSecurityZone updateSecurityZone(@PathParam(\"id\") Long zoneId, RangerSecurityZone securityZone) { if (LOG.isDebugEnabled()) { LOG.debug(\"==> updateSecurityZone(id=\" + zoneId +\", \" + securityZone + \")\"); } if (zoneId != null && zoneId.equals(RangerSecurityZone.RANGER_UNZONED_SECURITY_ZONE_ID)) { throw restErrorUtil.createRESTException(\"Cannot update unzoned zone\"); } ensureUserAllowOperationOnServiceForZone(securityZone); removeEmptyEntries(securityZone); if (securityZone.getId() != null && !zoneId.equals(securityZone.getId())) { throw restErrorUtil.createRESTException(\"zoneId mismatch!!\"); } else { securityZone.setId(zoneId); } RangerSecurityZone ret; try { RangerSecurityZoneValidator validator = validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore); validator.validate(securityZone, RangerValidator.Action.UPDATE); ret = securityZoneStore.updateSecurityZoneById(securityZone); } catch(WebApplicationException excp) { throw excp; } catch(Throwable excp) { LOG.error(\"updateSecurityZone(\" + securityZone + \") failed\", excp); throw restErrorUtil.createRESTException(excp.getMessage()); } if (LOG.isDebugEnabled()) { LOG.debug(\"<== updateSecurityZone(id=\" + zoneId +\", \" + securityZone + \"):\" + ret); } return ret; }### Assistant: @Test public void testUpdateSecurityZone() throws Exception { RangerSecurityZone rangerSecurityZoneToUpdate = createRangerSecurityZone(); Long securityZoneId = 2L; XXServiceDao xServiceDao = Mockito.mock(XXServiceDao.class); XXService xService = Mockito.mock(XXService.class); XXServiceDefDao xServiceDefDao = Mockito.mock(XXServiceDefDao.class); rangerSecurityZoneToUpdate.setId(securityZoneId); when(rangerBizUtil.isAdmin()).thenReturn(true); when(validatorFactory.getSecurityZoneValidator(svcStore, securityZoneStore)).thenReturn(validator); when(daoManager.getXXService()).thenReturn(xServiceDao); when(xServiceDao.findByName(\"test_service_1\")).thenReturn(xService); when(daoManager.getXXServiceDef()).thenReturn(xServiceDefDao); when(xServiceDefDao.getById(xService.getType())).thenReturn(xServiceDef); doNothing().when(validator).validate(rangerSecurityZoneToUpdate, RangerValidator.Action.UPDATE); when(securityZoneStore.updateSecurityZoneById(rangerSecurityZoneToUpdate)) .thenReturn(rangerSecurityZoneToUpdate); RangerSecurityZone updatedRangerSecurityZone = securityZoneREST.updateSecurityZone(securityZoneId, rangerSecurityZoneToUpdate); assertEquals(rangerSecurityZoneToUpdate.getId(), updatedRangerSecurityZone.getId()); verify(validator, times(1)).validate(rangerSecurityZoneToUpdate, RangerValidator.Action.UPDATE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void divideByVectorPairwise(final double[] vectorAsArray) { this.setIsChanged(); SparseVector vector = this.internalVector; int[] indexes = vector.getIndex(); for (int i = 0; i < indexes.length; i++) { vector.set(indexes[i], vector.get(indexes[i]) / vectorAsArray[indexes[i]]); } }### Assistant: @Test public void testDivideByVectorPairwiseFromArrayWithoutCopy() { double[] toDivideData = { 2, 2 }; double[] data = { 8, 8 }; IVector vector = new SparseDoubleVector(data); vector.divideByVectorPairwise(toDivideData); this.assertResultVectorIs4(vector); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public C getConnector() { return connector; }### Assistant: @Test void getConnector() { assertEquals(this.connector, this.manager.getConnector()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable @Override public Policy handle(final T event, @Nullable final Policy policy, final long revision) { if (null != policy) { PolicyBuilder policyBuilder = policy.toBuilder() .setRevision(revision) .setModified(event.getTimestamp().orElse(null)); policyBuilder = applyEvent(event, policy, policyBuilder); return policyBuilder.build(); } return null; }### Assistant: @Test public void testHandleReturnsNullForNullEntity() { assertThat(getStrategyUnderTest().handle(getPolicyEvent(instant, policy), null, 0L)).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean deleteFile(String filePath) throws SecurityException { if (\"\".equals(filePath)) { return false; } return FileHelper.deleteFile(new File(filePath)); }### Assistant: @Test public void testDeleteFileWithNullArgument() { System.out.println(\"Test: \" + \"testDeleteFileWithNullArgument\"); File nullFile = null; boolean result = FileHelper.deleteFile(nullFile); assertFalse(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public double density(RealVector vector) { if (dof == 0) { return 0; } RealVector _diff = vector.subtract(mean); double prob = 1. / dof * _diff.dotProduct(precisionMatrix.operate(_diff)); return multiplier * Math.pow(1 + prob, -(dof + D) / 2); }### Assistant: @Test public void testReductionToStudentT() { double mean = 0; double variance = 1; RealVector meanVector = new ArrayRealVector(1); meanVector.setEntry(0, mean); RealMatrix varianceMatrix = MatrixUtils.createRealIdentityMatrix(1).scalarMultiply(variance); int N = 4300; MultivariateTDistribution multiT = new MultivariateTDistribution(meanVector, varianceMatrix, N); TDistribution uniT = new TDistribution(N); double[] testPoints = {0.5, 1, 2, 3, 15, 13.3, 17.6, 19.2, 300.2, 10.4}; RealVector v = new ArrayRealVector(1); for (double x : testPoints) { v.setEntry(0, x); assertEquals(uniT.density(x), multiT.density(v), 1e-5); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DataFieldMaxValueIncrementer getIncrementer(DataSource dataSource, String incrementerName) { if (dataSource == null) { throw new IllegalArgumentException(\"DataSource must not be null\"); } if (StringUtils.isBlank(incrementerName)) { throw new IllegalArgumentException(\"Incrementer name must not be null or blank\"); } ConcurrentMap<String, DataFieldMaxValueIncrementer> incrementerCache = cache.get(dataSource); if (incrementerCache == null) { cache.put(dataSource, new ConcurrentHashMap<String, DataFieldMaxValueIncrementer>(8, 0.9f, 1)); if (incrementerCache == null) { incrementerCache = cache.get(dataSource); } } DataFieldMaxValueIncrementer incrementer = incrementerCache.get(incrementerName.toUpperCase()); if (incrementer == null) { incrementer = incrementerCache.putIfAbsent(incrementerName.toUpperCase(), createIncrementer(dataSource, incrementerName)); if (incrementer == null) { incrementer = incrementerCache.get(incrementerName.toUpperCase()); } } return incrementer; }### Assistant: @Test(expected = InstantiationError.class) public void testCustomIncrementerDatasourceInvalidClass() throws Exception { SimpleConfig config = new SimpleConfig(); config.putProperty(\"rice.krad.data.platform.incrementer.mysql\", \"org.kuali.rice.krad.data.platform.testincrementers.NonExistent\"); ConfigContext.init(config); DataFieldMaxValueIncrementer mySQLMaxVal = MaxValueIncrementerFactory.getIncrementer(mysql,\"test_mySQL\"); assertTrue(\"Cannot create incrementer\", mySQLMaxVal == null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NotNull public List<Message> parseGradleOutput(@NotNull String output) { return parser.parseToolOutput(output); }### Assistant: @Test public void xmlError3() throws Exception { createTempXmlFile(); String output = \"Relying on packaging to define the extension of the main artifact has been deprecated and is scheduled to be removed in Gradle 2.0\\n\" + \":MyApplication:preBuild UP-TO-DATE\\n\" + \":MyApplication:preDebugBuild UP-TO-DATE\\n\" + \":MyApplication:preReleaseBuild UP-TO-DATE\\n\" + \":MyApplication:prepareComAndroidSupportAppcompatV71800Library UP-TO-DATE\\n\" + \":MyApplication:prepareDebugDependencies\\n\" + \":MyApplication:compileDebugAidl UP-TO-DATE\\n\" + \":MyApplication:compileDebugRenderscript UP-TO-DATE\\n\" + \":MyApplication:generateDebugBuildConfig UP-TO-DATE\\n\" + \":MyApplication:mergeDebugAssets UP-TO-DATE\\n\" + \":MyApplication:mergeDebugResources\\n\" + \"[Fatal Error] :3:17: Open quote is expected for attribute \\\"{1}\\\" associated with an element type \\\"name\\\".\\n\" + sourceFilePath + \":2:16: Error: Open quote is expected for attribute \\\"{1}\\\" associated with an element type \\\"name\\\".\\n\" + \":MyApplication:mergeDebugResources FAILED\\n\" + \"\\n\" + \"FAILURE: Build failed with an exception.\\n\" + \"\\n\" + \"* What went wrong:\\n\" + \"Execution failed for task ':MyApplication:mergeDebugResources'.\\n\" + \"> \" + sourceFilePath + \":2:16: Error: Open quote is expected for attribute \\\"{1}\\\" associated with an element type \\\"name\\\".\\n\" + \"\\n\" + \"* Try:\\n\" + \"Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\\n\" + \"\\n\" + \"BUILD FAILED\\n\" + \"\\n\" + \"Total time: 4.951 secs\"; assertEquals(\"0: Simple::MyApplication:preBuild UP-TO-DATE\\n\" + \"1: Simple::MyApplication:preDebugBuild UP-TO-DATE\\n\" + \"2: Simple::MyApplication:preReleaseBuild UP-TO-DATE\\n\" + \"3: Simple::MyApplication:prepareComAndroidSupportAppcompatV71800Library UP-TO-DATE\\n\" + \"4: Simple::MyApplication:prepareDebugDependencies\\n\" + \"5: Simple::MyApplication:compileDebugAidl UP-TO-DATE\\n\" + \"6: Simple::MyApplication:compileDebugRenderscript UP-TO-DATE\\n\" + \"7: Simple::MyApplication:generateDebugBuildConfig UP-TO-DATE\\n\" + \"8: Simple::MyApplication:mergeDebugAssets UP-TO-DATE\\n\" + \"9: Simple::MyApplication:mergeDebugResources\\n\" + \"10: Error:Open quote is expected for attribute \\\"{1}\\\" associated with an element type \\\"name\\\".\\n\" + \"11: Error:Error: Open quote is expected for attribute \\\"{1}\\\" associated with an element type \\\"name\\\".\\n\" + \"\\t\" + sourceFilePath + \":2:16\\n\" + \"12: Simple::MyApplication:mergeDebugResources FAILED\\n\" + \"13: Error:Execution failed for task ':MyApplication:mergeDebugResources'.\\n\" + \"> \"+ sourceFilePath + \":2:16: Error: Open quote is expected for attribute \\\"{1}\\\" associated with an element type \\\"name\\\".\\n\" + \"14: Info:BUILD FAILED\\n\" + \"15: Info:Total time: 4.951 secs\\n\", toString(parser.parseGradleOutput(output))); sourceFile.delete(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getTagName() { return \"assign\"; }### Assistant: @Test public void tagNameTest() { SetAssignExtension setAssign = new SetAssignExtension(); Assert.assertEquals(\"assign\", setAssign.getTagName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void deleteHiveDestination(String name) throws UnknownRoadException, UnknownDestinationException { getHiveDestination(name).orElseThrow(() -> new UnknownDestinationException(\"Hive\", name)); List<PatchOperation> operations = new ArrayList<>(); operations.add(PatchOperation.remove(DESTINATIONS_HIVE)); PatchSet patchSet = new PatchSet(name, operations); modificationEmitter.emit(patchSet); }### Assistant: @Test(expected = UnknownRoadException.class) public void deleteHiveDestination_deletedRoad() throws Exception { road.setDeleted(true); store.put(NAME, road); underTest.deleteHiveDestination(NAME); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DateRangeAndType fromString(final String dateRange) { Preconditions.checkNotNull(dateRange, \"DateRange cannot be null.\"); Preconditions.checkArgument(!dateRange.isEmpty(), \"DateRange cannot be empty.\"); return dateRange.contains(\",\") ? parseCustomFormat(dateRange) : parseEnumFormat(dateRange); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testEmptyRange() { DateRangeAndType.fromString(\"\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ApplicableSchematron getApplicableSchematron(final int metadataId, final Element md, final MetadataSchema metadataSchema, final Schematron schematron) { final ConfigurableApplicationContext applicationContext = ApplicationContextHolder.get(); SchematronCriteriaGroupRepository criteriaGroupRepository = applicationContext.getBean(SchematronCriteriaGroupRepository.class); List<SchematronCriteriaGroup> criteriaGroups = criteriaGroupRepository.findAllById_SchematronId(schematron.getId()); SchematronRequirement requirement = SchematronRequirement.DISABLED; for (SchematronCriteriaGroup criteriaGroup : criteriaGroups) { List<SchematronCriteria> criteriaList = criteriaGroup.getCriteria(); boolean apply = false; for (SchematronCriteria criteria : criteriaList) { apply = criteria.accepts(applicationContext, metadataId, md, metadataSchema.getSchemaNS()); if (!apply) { break; } } if (apply) { if (Log.isDebugEnabled(Geonet.DATA_MANAGER)) { Log.debug(Geonet.DATA_MANAGER, \" - Schematron group is accepted:\" + criteriaGroup.getId().getName() + \" for schematron: \" + schematron.getRuleName()); } requirement = requirement.highestRequirement(criteriaGroup.getRequirement()); } else { requirement = requirement.highestRequirement(SchematronRequirement.DISABLED); } } return new ApplicableSchematron(requirement, schematron); }### Assistant: @Test public void testGetApplicableSchematron() throws Exception { ApplicableSchematron applicableSchematron = schematronValidator.getApplicableSchematron(id, metadata, schema, schematron); assertEquals(SchematronRequirement.REQUIRED, applicableSchematron.requirement); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object obj) { if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } final PriorityScoreFilter other = (PriorityScoreFilter) obj; if (Float.floatToIntBits(this.minPriorityScore) != Float.floatToIntBits(other.minPriorityScore)) { return false; } return this.priorityType == other.priorityType; }### Assistant: @Test public void testNotEqualNull() { Object object = null; assertThat(instance.equals(object), is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @API(API.Status.MAINTAINED) public void updateRecords(@Nonnull Descriptors.FileDescriptor recordsDescriptor) { context.asyncToSync(FDBStoreTimer.Waits.WAIT_UPDATE_RECORDS_DESCRIPTOR, updateRecordsAsync(recordsDescriptor)); }### Assistant: @Test public void updateRecords() { try (FDBRecordContext context = fdb.openContext()) { openMetaDataStore(context); RecordMetaData metaData = RecordMetaData.build(TestRecords1Proto.getDescriptor()); metaDataStore.saveRecordMetaData(metaData); context.commit(); assertNotNull(metaDataStore.getRecordMetaData().getRecordType(\"MySimpleRecord\")); } try (FDBRecordContext context = fdb.openContext()) { openMetaDataStore(context); assertNotNull(metaDataStore.getRecordMetaData().getRecordType(\"MySimpleRecord\")); metaDataStore.updateRecords(TestRecords1EvolvedProto.getDescriptor()); assertNotNull(metaDataStore.getRecordMetaData().getRecordType(\"MySimpleRecord\")); assertNotNull(metaDataStore.getRecordMetaData().getRecordType(\"MyOtherRecord\")); assertNotNull(metaDataStore.getRecordMetaData().getRecordType(\"AnotherRecord\")); context.commit(); } try (FDBRecordContext context = fdb.openContext()) { openMetaDataStore(context); assertNotNull(metaDataStore.getRecordMetaData().getRecordType(\"MySimpleRecord\")); assertNotNull(metaDataStore.getRecordMetaData().getRecordType(\"MyOtherRecord\")); assertNotNull(metaDataStore.getRecordMetaData().getRecordType(\"AnotherRecord\")); context.commit(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getLimitString(String sql, int offset, int limit) { return getLimitString(sql,offset,null,limit,null); }### Assistant: @Test public void getLimitString() { Assert.assertEquals(\"select top 0 * from user\", dialect.getLimitString(\"select * from user\", 0, 0)); Assert.assertEquals(\"select top 12 * from user\", dialect.getLimitString(\"select * from user\", 0, 12)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static double parseDouble( char[] buffer ) { return parseDouble( buffer, 0, buffer.length ); }### Assistant: @Test public void parseDouble() { String str = \"123456789\"; double num = CharScanner.parseJsonNumber( str.toCharArray(), 0, str.length() ).doubleValue(); boolean ok = num == 123456789d || die(\"\" + num); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getRemainingAttemptCounter() { int attemptCounter; switch (response.getStatusCode()) { case 0x6983: attemptCounter = 0; break; case 0x63C1: attemptCounter = 1; break; case 0x63C2: attemptCounter = 2; break; case 0x9000: attemptCounter = 3; break; default: throw new IllegalStateException( \"Incorrect status word: \" + String.format(\"0x%04X\", response.getStatusCode())); } return attemptCounter; }### Assistant: @Test(expected = CalypsoPoPinException.class) public void verifyPinRespPars_pin_blocked() { VerifyPinRespPars parser = new VerifyPinRespPars(new ApduResponse(PIN_BLOCKED, null), null); assertThat(parser.getRemainingAttemptCounter()).isEqualTo(0); parser.checkStatus(); shouldHaveThrown(CalypsoPoPinException.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Validation range(final int minLength, final int maxLength) { if (minLength <= 0) { throw new IllegalArgumentException(\"minLength must be positive\"); } if (maxLength <= 0) { throw new IllegalArgumentException(\"maxLength must be positive\"); } return new Length(minLength, maxLength); }### Assistant: @Test public void testRange() throws Exception { final Validation validation = Length.range(2, 4); assertFalse(validation.isValid(\"a\")); assertTrue(validation.isValid(\"ab\")); assertTrue(validation.isValid(\"abc\")); assertTrue(validation.isValid(\"abcd\")); assertFalse(validation.isValid(\"abcde\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected Class<? extends SimpleBeanEditorDriver<CSVDataSetDef, CSVDataSetDefAttributesEditor>> getDriverClass() { return CSVDataSetDefAttributesDriver.class; }### Assistant: @Test public void testGetDriverClass() { assertEquals( CSVDataSetDefAttributesDriver.class, presenter.getDriverClass() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static RetrieveFeatureProperties of(final String thingId, final String featureId, final DittoHeaders dittoHeaders) { return of(ThingId.of(thingId), featureId, dittoHeaders); }### Assistant: @Test(expected = NullPointerException.class) public void tryToCreateInstanceWithNullFeatureId() { RetrieveFeatureProperties.of(TestConstants.Thing.THING_ID, null, TestConstants.EMPTY_DITTO_HEADERS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void adapt(Increment operation, ReadModifyWriteRow readModifyWriteRow) { if (!operation.getTimeRange().isAllTime()) { throw new UnsupportedOperationException( \"Setting the time range in an Increment is not implemented\"); } for (Map.Entry<byte[], NavigableMap<byte[], Long>> familyEntry : operation.getFamilyMapOfLongs().entrySet()) { String familyName = Bytes.toString(familyEntry.getKey()); List<Cell> mutationCells = CellDeduplicationHelper.deduplicateFamily(operation, familyEntry.getKey()); for (Cell cell : mutationCells) { readModifyWriteRow.increment( familyName, ByteString.copyFrom( cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength()), Bytes.toLong(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength())); } } }### Assistant: @Test public void testMultipleIncrementWithDuplicateQualifier() { byte[] rowKey = dataHelper.randomData(\"rk1-\"); byte[] family1 = Bytes.toBytes(\"family1\"); byte[] qualifier1 = Bytes.toBytes(\"qualifier1\"); long amount1 = 1234; byte[] family2 = Bytes.toBytes(\"family2\"); byte[] qualifier2 = Bytes.toBytes(\"qualifier2\"); long amount2 = 4321; long amount3 = 5000; Increment incr = new Increment(rowKey); incr.addColumn(family1, qualifier1, amount1); incr.addColumn(family2, qualifier2, amount2); incr.addColumn(family2, qualifier2, amount3); ReadModifyWriteRow readModifyWriteRow = ReadModifyWriteRow.create(TABLE_ID, ByteString.copyFrom(rowKey)); incrementAdapter.adapt(incr, readModifyWriteRow); ReadModifyWriteRowRequest requestBuilder = readModifyWriteRow.toProto(requestContext); Assert.assertEquals(2, requestBuilder.getRulesCount()); ReadModifyWriteRule rule = requestBuilder.getRules(0); Assert.assertEquals(\"family1\", rule.getFamilyName()); Assert.assertEquals(\"qualifier1\", rule.getColumnQualifier().toStringUtf8()); Assert.assertEquals(amount1, rule.getIncrementAmount()); rule = requestBuilder.getRules(1); Assert.assertEquals(\"family2\", rule.getFamilyName()); Assert.assertEquals(\"qualifier2\", rule.getColumnQualifier().toStringUtf8()); Assert.assertEquals(amount3, rule.getIncrementAmount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static MessageHeadersBuilder of(final Map<String, String> headers) { if (headers instanceof MessageHeaders) { return new MessageHeadersBuilder((MessageHeaders) headers); } validateMandatoryHeaders(headers); return new MessageHeadersBuilder(headers); }### Assistant: @Test public void createInstanceFromMinimalMap() { final Map<String, String> validHeaders = new HashMap<>(); validHeaders.put(MessageHeaderDefinition.DIRECTION.getKey(), MessageDirection.TO.toString()); validHeaders.put(MessageHeaderDefinition.SUBJECT.getKey(), SUBJECT); validHeaders.put(MessageHeaderDefinition.THING_ID.getKey(), THING_ID.toString()); final MessageHeaders messageHeaders = MessageHeadersBuilder.of(validHeaders).build(); assertThat(messageHeaders).containsAllEntriesOf(validHeaders); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean exists(JdbcIndex<?> index) { boolean headExists = headTableEngine.exists(index); boolean histExists = historyTableEngine.exists(index); if (headExists ^ histExists) { throw new IllegalStateException(\"Index is inconsitent. Head: \" + headExists + \", history: \" + histExists); } return headExists; }### Assistant: @Test public void exists_onNonExistingIndex_returnsFalse() throws Exception { JdbcIndex<?> index = new JdbcIndex<>(); when(headTableEngine.exists(index)).thenReturn(false); when(historyTableEngine.exists(index)).thenReturn(false); assertFalse(mapper.exists(index)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void addSample(long millis) { final long delta = millis - lastMillis; if (0 <= lastMillis && 0 < delta && delta < 62000L) { final float newRefreshRate = 1000f / delta; final boolean missed = 2 * newRefreshRate - epsilon < refreshRate && refreshRate < 2 * newRefreshRate + epsilon; if (refreshRate == 0) { refreshRate = newRefreshRate; } else if (missed && missedCount == 0) { missedCount++; } else { missedCount = 0; refreshRate += (newRefreshRate - refreshRate) * 0.5f; } if (refreshRate < 0 || Double.isNaN(refreshRate) || Double.isInfinite(refreshRate)) { Exceptions.report(new Exception(\"Invalid refresh rate, delta = \" + delta + \" refreshRate = \" + refreshRate)); refreshRate = 0; } } lastMillis = millis; }### Assistant: @Test public void halfRefreshRate() { RefreshRateEstimator estimator = new RefreshRateEstimator(); estimator.addSample(0); estimator.addSample(500); estimator.addSample(1000); assertEquals(2.0, estimator.refreshRate, 0.01); estimator.addSample(2000); assertEquals(2.0, estimator.refreshRate, 0.01); estimator.addSample(3000); assertEquals(1.0, estimator.refreshRate, 0.5); estimator.addSample(4000); assertEquals(1.0, estimator.refreshRate, 0.25); estimator.addSample(5000); estimator.addSample(6000); assertEquals(1.0, estimator.refreshRate, 0.1); estimator.addSample(7000); estimator.addSample(8000); estimator.addSample(9000); assertEquals(1.0, estimator.refreshRate, 0.01); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int deleteServerGroupAndServerAndServerConfigByServerGroupId(Long serverGroupId) throws SQLException { String sql = \"DELETE t1, t2, t3 \" + \"from `server_group` t1 \" + \"left join `server` t2 on t1.id = t2.server_group_id \" + \"left join `server_config` t3 on t2.id = t3.server_id \" + \"where t1.id = ?\"; return this.updataBysql(sql, Parameter.integerOf(StringUtils.EMPTY, serverGroupId)); }### Assistant: @Test public void deleteServerGroupAndServerAndServerConfigByServerGroupId() throws Exception { serverGroup.setId(3L); int count = serverGroupDao.deleteServerGroupAndServerAndServerConfigByServerGroupId(3L); System.out.println(\"deleteServerGroup :-------> \" + count); Assert.assertTrue(count > 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute(final VoiceXmlInterpreterContext context, final VoiceXmlInterpreter interpreter, final FormInterpretationAlgorithm fia, final FormItem item, final VoiceXmlNode node) throws JVoiceXMLEvent { final DocumentServer server = context.getDocumentServer(); final Session session = context.getSession(); final Application application = context.getApplication(); final URI uri; if (application == null) { uri = src; } else { uri = application.resolve(src); } LOGGER.info(\"obtaining data from '\" + uri + \"'\"); final DocumentDescriptor descriptor = new DocumentDescriptor(uri, method); try { appendVariables(context, descriptor); final FetchAttributes attributes = getFetchAttributes(); descriptor.setAttributes(attributes); final String sessionId = session.getSessionId(); final Document document = (Document) server.getObject(sessionId, descriptor, DocumentServer.TEXT_XML); final String name = (String) getAttribute(Data.ATTRIBUTE_NAME); if (name == null) { return; } final DataModel model = context.getDataModel(); model.updateVariable(name, document); } catch (BadFetchError e) { throw new BadFetchError(\"error reading data from '\" + uri + \"': \" + e.getMessage(), e); } }### Assistant: @Test public void testExecute() throws JVoiceXMLEvent, Exception { final VoiceXmlDocument doc = createDocument(); final Vxml vxml = doc.getVxml(); final Var var = vxml.appendChild(Var.class); final String name = \"quote\"; var.setName(name); final Block block = createBlock(doc); final Data data = block.appendChild(Data.class); data.setSrc(uri); data.setName(name); final DataStrategy strategy = new DataStrategy(); executeTagStrategy(data, strategy); final DataModel model = getDataModel(); Mockito.verify(model).updateVariable(Mockito.eq(name), Mockito.isA(Document.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Set<Resource> getResources(Request request, Predicate predicate) throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException { final Set<StackConfigurationRequest> requests = new HashSet<StackConfigurationRequest>(); if (predicate == null) { requests.add(getRequest(Collections.<String, Object>emptyMap())); } else { for (Map<String, Object> propertyMap : getPropertyMaps(predicate)) { requests.add(getRequest(propertyMap)); } } Set<String> requestedIds = getRequestPropertyIds(request, predicate); Set<StackConfigurationResponse> responses = getResources(new Command<Set<StackConfigurationResponse>>() { @Override public Set<StackConfigurationResponse> invoke() throws AmbariException { return getManagementController().getStackConfigurations(requests); } }); Set<Resource> resources = new HashSet<Resource>(); for (StackConfigurationResponse response : responses) { Resource resource = new ResourceImpl(Resource.Type.StackConfiguration); setResourceProperty(resource, STACK_NAME_PROPERTY_ID, response.getStackName(), requestedIds); setResourceProperty(resource, STACK_VERSION_PROPERTY_ID, response.getStackVersion(), requestedIds); setResourceProperty(resource, SERVICE_NAME_PROPERTY_ID, response.getServiceName(), requestedIds); setResourceProperty(resource, PROPERTY_NAME_PROPERTY_ID, response.getPropertyName(), requestedIds); setResourceProperty(resource, PROPERTY_VALUE_PROPERTY_ID, response.getPropertyValue(), requestedIds); setResourceProperty(resource, PROPERTY_VALUE_ATTRIBUTES_PROPERTY_ID, response.getPropertyValueAttributes(), requestedIds); setResourceProperty(resource, PROPERTY_DEPENDS_ON_PROPERTY_ID, response.getDependsOnProperties(), requestedIds); setResourceProperty(resource, PROPERTY_DESCRIPTION_PROPERTY_ID, response.getPropertyDescription(), requestedIds); if (StringUtils.isNotEmpty(response.getPropertyDisplayName())) { setResourceProperty(resource, PROPERTY_DISPLAY_NAME_PROPERTY_ID, response.getPropertyDisplayName(), requestedIds); } setResourceProperty(resource, PROPERTY_PROPERTY_TYPE_PROPERTY_ID, response.getPropertyType(), requestedIds); setResourceProperty(resource, PROPERTY_TYPE_PROPERTY_ID, response.getType(), requestedIds); setDefaultPropertiesAttributes(resource, requestedIds); for (Map.Entry<String, String> attribute : response.getPropertyAttributes().entrySet()) { setResourceProperty(resource, PropertyHelper.getPropertyId(\"StackConfigurations\", attribute.getKey()), attribute.getValue(), requestedIds); } resources.add(resource); } return resources; }### Assistant: @Test public void testGetResources() throws Exception{ Map<String, String> attributes = new HashMap<String, String>(); attributes.put(\"final\", \"true\"); Resource.Type type = Resource.Type.StackConfiguration; AmbariManagementController managementController = createMock(AmbariManagementController.class); Set<StackConfigurationResponse> allResponse = new HashSet<StackConfigurationResponse>(); allResponse.add(new StackConfigurationResponse(PROPERTY_NAME, PROPERTY_VALUE, PROPERTY_DESC, TYPE, attributes)); expect(managementController.getStackConfigurations( AbstractResourceProviderTest.Matcher.getStackConfigurationRequestSet(null, null, null, null))). andReturn(allResponse).times(1); replay(managementController); ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider( type, PropertyHelper.getPropertyIds(type), PropertyHelper.getKeyPropertyIds(type), managementController); Set<String> propertyIds = new HashSet<String>(); propertyIds.add(StackConfigurationResourceProvider.STACK_NAME_PROPERTY_ID); propertyIds.add(StackConfigurationResourceProvider.STACK_VERSION_PROPERTY_ID); propertyIds.add(StackConfigurationResourceProvider.SERVICE_NAME_PROPERTY_ID); propertyIds.add(StackConfigurationResourceProvider.PROPERTY_NAME_PROPERTY_ID); propertyIds.add(StackConfigurationResourceProvider.PROPERTY_VALUE_PROPERTY_ID); propertyIds.add(StackConfigurationResourceProvider.PROPERTY_DESCRIPTION_PROPERTY_ID); propertyIds.add(StackConfigurationResourceProvider.PROPERTY_TYPE_PROPERTY_ID); propertyIds.add(StackConfigurationResourceProvider.PROPERTY_FINAL_PROPERTY_ID); propertyIds.add(StackConfigurationResourceProvider.PROPERTY_DEPENDS_ON_PROPERTY_ID); Request request = PropertyHelper.getReadRequest(propertyIds); Set<Resource> resources = provider.getResources(request, null); Assert.assertEquals(allResponse.size(), resources.size()); for (Resource resource : resources) { String propertyName = (String) resource.getPropertyValue(StackConfigurationResourceProvider.PROPERTY_NAME_PROPERTY_ID); String propertyValue = (String) resource.getPropertyValue(StackConfigurationResourceProvider.PROPERTY_VALUE_PROPERTY_ID); String propertyDesc = (String) resource.getPropertyValue(StackConfigurationResourceProvider.PROPERTY_DESCRIPTION_PROPERTY_ID); String propertyType = (String) resource.getPropertyValue(StackConfigurationResourceProvider.PROPERTY_TYPE_PROPERTY_ID); String propertyIsFinal = (String) resource.getPropertyValue(StackConfigurationResourceProvider.PROPERTY_FINAL_PROPERTY_ID); String propertyDependencies = (String) resource.getPropertyValue(StackConfigurationResourceProvider.PROPERTY_DEPENDS_ON_PROPERTY_ID); Assert.assertEquals(PROPERTY_NAME, propertyName); Assert.assertEquals(PROPERTY_VALUE, propertyValue); Assert.assertEquals(PROPERTY_DESC, propertyDesc); Assert.assertEquals(TYPE, propertyType); Assert.assertEquals(\"true\", propertyIsFinal); Assert.assertNull(propertyDependencies); } verify(managementController); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T, R> R mapResult(Object o, Query<T, R> query, String[] returnFields) { return query.getEntityClass().equals(query.getReturnType()) ? query.getReturnType().cast(o) : mapper.mapTo(query.getReturnType(), o, returnFields); }### Assistant: @Test public void mapResult_projected2() { when(mapper.mapTo(TestClass.class, input, fields)).thenReturn(test); assertEquals(test, hMapper.mapResult(input, projected2)); verify(mapper).mapTo(TestClass.class, input, fields); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void reschedule(long delay, TimeUnit unit) { boolean needQueue = true; SingletonTaskWorker stw = null; synchronized (context) { if (context.taskRunning || context.taskShouldRun) { if (context.taskRunning) { if (delay > 0) { long now = System.nanoTime(); long then = now + TimeUnit.NANOSECONDS.convert(delay, unit); context.waitingTask.nextschedule = then; logger.debug(\"rescheduled task \" + this + \" for \" + TimeUnit.SECONDS.convert(then, TimeUnit.NANOSECONDS) + \"s. A bunch of these messages -may- indicate you have a blocked task.\"); } else { context.waitingTask.nextschedule = 0; } needQueue = false; } else { context.waitingTask.canceled = true; context.waitingTask = null; } } context.taskShouldRun = true; if (needQueue) { stw = context.waitingTask = new SingletonTaskWorker(this); } } if (needQueue) { if (delay <= 0) { ses.execute(stw); } else { ses.schedule(stw, delay, unit); } } }### Assistant: @Test public void testConcurrentAddNoDelay() throws InterruptedException { ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(); final Object tc = this; SingletonTask st1 = new SingletonTask(ses, new Runnable() { @Override public void run() { synchronized (tc) { ran += 1; } try { Thread.sleep(50); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (tc) { finished += 1; time = System.nanoTime(); } } }); st1.reschedule(0, null); Thread.sleep(20); assertEquals(\"Check that task started\", 1, ran); assertEquals(\"Check that task not finished\", 0, finished); st1.reschedule(0, null); assertTrue(\"Check task running state true\", st1.context.taskRunning); assertTrue(\"Check task should run state true\", st1.context.taskShouldRun); assertEquals(\"Check that task started\", 1, ran); assertEquals(\"Check that task not finished\", 0, finished); Thread.sleep(150); assertTrue(\"Check task running state false\", !st1.context.taskRunning); assertTrue(\"Check task should run state false\", !st1.context.taskShouldRun); assertEquals(\"Check that task ran exactly twice\", 2, ran); assertEquals(\"Check that task finished exactly twice\", 2, finished); ses.shutdown(); ses.awaitTermination(5, TimeUnit.SECONDS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean containsValue(Object value) { for (Object e : values()) { if (ObjectUtils.equals(value, e)) { return true; } } return false; }### Assistant: @Test public void containsValue_objfields_objectns() { ObjectMap objmap = new ObjectMap(new ObjContainsValue()); assertTrue(objmap.containsValue(2000)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void removeIfEndsWith(StringBuilder sb, String ending) { if (endsWith(sb, ending)) { sb.setLength(sb.length() - ending.length()); } }### Assistant: @Test void testRemoveIfEndsWith() { assertRemoveIfEndsWith(\"\", \"foo\", \"\"); assertRemoveIfEndsWith(\"foobar\", \"foo\", \"foobar\"); assertRemoveIfEndsWith(\"barfoo\", \"foo\", \"bar\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean needRejoin() { return subscriptions.partitionsAutoAssigned() && (super.needRejoin() || subscriptions.partitionAssignmentNeeded()); }### Assistant: @Test public void testIllegalGeneration() { client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code())); coordinator.ensureCoordinatorReady(); subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener); subscriptions.assignFromSubscribed(Collections.singletonList(tp)); time.sleep(sessionTimeoutMs); RequestFuture<Void> future = coordinator.sendHeartbeatRequest(); assertEquals(1, consumerClient.pendingRequestCount()); assertFalse(future.isDone()); client.prepareResponse(heartbeatResponse(Errors.ILLEGAL_GENERATION.code())); time.sleep(sessionTimeoutMs); consumerClient.poll(0); assertTrue(future.isDone()); assertTrue(future.failed()); assertEquals(Errors.ILLEGAL_GENERATION.exception(), future.exception()); assertTrue(coordinator.needRejoin()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void publish(Application application) { Set<Class<?>> classes = new LinkedHashSet<>(); Set<Class<?>> appClasses = application.getClasses(); if (appClasses != null) { classes.addAll(appClasses); } if (application instanceof EverrestApplication) { EverrestApplication everrest = (EverrestApplication)application; for (Map.Entry<String, Class<?>> e : everrest.getResourceClasses().entrySet()) { Class<?> clazz = e.getValue(); addResource(e.getKey(), clazz); classes.remove(clazz); } for (Map.Entry<String, Object> e : everrest.getResourceSingletons().entrySet()) { addResource(e.getKey(), e.getValue()); } for (ObjectFactory<? extends ObjectModel> factory : everrest.getFactories()) { addFactory(factory); classes.remove(factory.getObjectModel().getObjectClass()); } } for (Class<?> clazz : classes) { addPerRequest(clazz); } Set<Object> singletons = application.getSingletons(); if (singletons != null) { for (Object instance : singletons) { addSingleton(instance); } } }### Assistant: @Test public void publishesPerResponseResponseFilter() { Application application = mock(Application.class); when(application.getClasses()).thenReturn(newHashSet(AllMatchesResponseFilter.class)); publisher.publish(application); verify(providers).addResponseFilter(AllMatchesResponseFilter.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void step(Program program) { program.fullTrace(); if (CONFIG.vmTrace()) program.saveOpTrace(); try { OpCode op = OpCode.code(program.getCurrentOp()); if (op == null) throw program.new IllegalOperationException(); program.setLastOp(op.val()); long oldMemSize = program.getMemSize(); BigInteger newMemSize = BigInteger.ZERO; Stack<DataWord> stack = program.getStack(); String hint = \"\"; long callGas = 0, memWords = 0; long gasCost = GasCost.STEP; long gasBefore = program.getGas().longValue(); int stepBefore = program.getPC(); program.stackRequire(op.require()); switch (op) { case STOP: case SUICIDE: gasCost = GasCost.STOP; break; case SSTORE: DataWord newValue = stack.get(stack.size()-2); DataWord oldValue = program.storageLoad(stack.peek()); if (oldValue == null && !newValue.isZero()) gasCost = GasCost.SSTORE * 2; else if (oldValue != null && newValue.isZero()) gasCost = GasCost.SSTORE * 0; else gasCost = GasCost.SSTORE; break; case SLOAD: gasCost = GasCost.SLOAD; break; case BALANCE: gasCost = GasCost.BALANCE; break; case MSTORE: newMemSize = memNeeded(stack.peek(), new DataWord(32)); break; case MSTORE8: newMemSize = memNeeded(stack.peek(), new DataWord(1)); break; case MLOAD: newMemSize = memNeeded(stack.peek(), new DataWord(32)); break; case RETURN: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-2)); break; case SHA3: gasCost = GasCost.SHA3; newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-2)); break; case CALLDATACOPY: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-3)); break; case CODECOPY: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-3)); break; case EXTCODECOPY: newMemSize = memNeeded(stack.get(stack.size()-2), stack.get(stack.size()-4)); break; case CALL: case CALLCODE: gasCost = GasCost.CALL; DataWord callGasWord = stack.get(stack.size()-1); if(callGasWord.compareTo(program.getGas()) == 1) { throw program.new OutOfGasException(); } callGas = callGasWord.longValue(); BigInteger in = memNeeded(stack.get(stack.size()-4), stack.get(stack.size()-5)); BigInteger out = memNeeded(stack.get(stack.size()-6), stack.get(stack.size()-7)); newMemSize = in.max(out); break; case CREATE: gasCost = GasCost.CREATE; newMemSize = memNeeded(stack.get(stack.size()-2), stack.get(stack.size()-3)); break; default: break; } program.spendGas(gasCost, op.name()); if(newMemSize.compareTo(MAX_GAS) == 1) { throw program.new OutOfGasException(); } long memoryUsage = (newMemSize.longValue() + 31) / 32 * 32; if (memoryUsage > oldMemSize) { memWords = (memoryUsage - oldMemSize) / 32; long memGas = GasCost.MEMORY * memWords; program.spendGas(memGas, op.name() + \" (memory usage)\"); gasCost += memGas; } if(program.getNumber().intValue() == CONFIG.dumpBlock()) this.dumpLine(op, gasBefore, gasCost+callGas, memWords, program); switch (op) { case STOP:{ program.setHReturn(ByteBuffer.allocate(0)); program.stop(); } break; case ADD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" + \" + word2.value(); word1.add(word2); program.stackPush(word1); program.step(); } break; case MUL:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" * \" + word2.value(); word1.mul(word2); program.stackPush(word1); program.step(); } break; case SUB:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" - \" + word2.value(); word1.sub(word2); program.stackPush(word1); program.step(); } break; case DIV:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" / \" + word2.value(); word1.div(word2); program.stackPush(word1); program.step(); } break; case SDIV:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" / \" + word2.sValue(); word1.sDiv(word2); program.stackPush(word1); program.step(); } break; case MOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" % \" + word2.value(); word1.mod(word2); program.stackPush(word1); program.step(); } break; case SMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" #% \" + word2.sValue(); word1.sMod(word2); program.stackPush(word1); program.step(); } break; case EXP:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" ** \" + word2.value(); word1.exp(word2); program.stackPush(word1); program.step(); } break; case NEG:{ DataWord word1 = program.stackPop(); word1.negate(); if (logger.isInfoEnabled()) hint = \"\" + word1.value(); program.stackPush(word1); program.step(); } break; case LT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" < \" + word2.value(); if (word1.value().compareTo(word2.value()) == -1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case SLT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" < \" + word2.sValue(); if (word1.sValue().compareTo(word2.sValue()) == -1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case SGT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" > \" + word2.sValue(); if (word1.sValue().compareTo(word2.sValue()) == 1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case GT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" > \" + word2.value(); if (word1.value().compareTo(word2.value()) == 1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case EQ:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" == \" + word2.value(); if (word1.xor(word2).isZero()) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case NOT: { DataWord word1 = program.stackPop(); if (word1.isZero()) { word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } if (logger.isInfoEnabled()) hint = \"\" + word1.value(); program.stackPush(word1); program.step(); } break; case AND:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" && \" + word2.value(); word1.and(word2); program.stackPush(word1); program.step(); } break; case OR: { DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" || \" + word2.value(); word1.or(word2); program.stackPush(word1); program.step(); } break; case XOR: { DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" ^ \" + word2.value(); word1.xor(word2); program.stackPush(word1); program.step(); } break; case BYTE:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord result = null; if (word1.value().compareTo(_32_) == -1) { byte tmp = word2.getData()[word1.intValue()]; word2.and(DataWord.ZERO); word2.getData()[31] = tmp; result = word2; } else { result = new DataWord(); } if (logger.isInfoEnabled()) hint = \"\" + result.value(); program.stackPush(result); program.step(); } break; case ADDMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord word3 = program.stackPop(); word1.addmod(word2, word3); program.stackPush(word1); program.step(); } break; case MULMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord word3 = program.stackPop(); word1.mulmod(word2, word3); program.stackPush(word1); program.step(); } break; case SHA3:{ DataWord memOffsetData = program.stackPop(); DataWord lengthData = program.stackPop(); ByteBuffer buffer = program.memoryChunk(memOffsetData, lengthData); byte[] encoded = HashUtil.sha3(buffer.array()); DataWord word = new DataWord(encoded); if (logger.isInfoEnabled()) hint = word.toString(); program.stackPush(word); program.step(); } break; case ADDRESS:{ DataWord address = program.getOwnerAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(address.getLast20Bytes()); program.stackPush(address); program.step(); } break; case BALANCE:{ DataWord address = program.stackPop(); DataWord balance = program.getBalance(address); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(address.getLast20Bytes()) + \" balance: \" + balance.longValue(); program.stackPush(balance); program.step(); } break; case ORIGIN:{ DataWord originAddress = program.getOriginAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(originAddress.getLast20Bytes()); program.stackPush(originAddress); program.step(); } break; case CALLER:{ DataWord callerAddress = program.getCallerAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(callerAddress.getLast20Bytes()); program.stackPush(callerAddress); program.step(); } break; case CALLVALUE:{ DataWord callValue = program.getCallValue(); if (logger.isInfoEnabled()) hint = \"value: \" + callValue; program.stackPush(callValue); program.step(); } break; case CALLDATALOAD:{ DataWord dataOffs = program.stackPop(); DataWord value = program.getDataValue(dataOffs); if (logger.isInfoEnabled()) hint = \"data: \" + value; program.stackPush(value); program.step(); } break; case CALLDATASIZE:{ DataWord dataSize = program.getDataSize(); if (logger.isInfoEnabled()) hint = \"size: \" + dataSize.value(); program.stackPush(dataSize); program.step(); } break; case CALLDATACOPY:{ DataWord memOffsetData = program.stackPop(); DataWord dataOffsetData = program.stackPop(); DataWord lengthData = program.stackPop(); byte[] msgData = program.getDataCopy(dataOffsetData, lengthData); if (logger.isInfoEnabled()) hint = \"data: \" + Hex.toHexString(msgData); program.memorySave(memOffsetData.intValue(), msgData); program.step(); } break; case CODESIZE: case EXTCODESIZE: { int length; if (op == OpCode.CODESIZE) length = program.getCode().length; else { DataWord address = program.stackPop(); length = program.getCodeAt(address).length; } DataWord codeLength = new DataWord(length); if (logger.isInfoEnabled()) hint = \"size: \" + length; program.stackPush(codeLength); program.step(); } break; case CODECOPY: case EXTCODECOPY: { byte[] fullCode; if (op == OpCode.CODECOPY) fullCode = program.getCode(); else { DataWord address = program.stackPop(); fullCode = program.getCodeAt(address); } DataWord memOffsetData = program.stackPop(); BigInteger codeOffsetData = program.stackPop().value(); BigInteger lengthData = program.stackPop().value(); if (fullCode == null || BigInteger.valueOf(fullCode.length).compareTo( codeOffsetData.add(lengthData)) < 0) { program.stop(); break; } int length = lengthData.intValue(); int codeOffset = codeOffsetData.intValue(); byte[] codeCopy = new byte[length]; System.arraycopy(fullCode, codeOffset, codeCopy, 0, length); if (logger.isInfoEnabled()) hint = \"code: \" + Hex.toHexString(codeCopy); program.memorySave(memOffsetData.intValue(), codeCopy); program.step(); } break; case GASPRICE:{ DataWord gasPrice = program.getGasPrice(); if (logger.isInfoEnabled()) hint = \"price: \" + gasPrice.toString(); program.stackPush(gasPrice); program.step(); } break; case PREVHASH: { DataWord prevHash = program.getPrevHash(); if (logger.isInfoEnabled()) hint = \"prevHash: \" + prevHash; program.stackPush(prevHash); program.step(); } break; case COINBASE: { DataWord coinbase = program.getCoinbase(); if (logger.isInfoEnabled()) hint = \"coinbase: \" + Hex.toHexString(coinbase.getLast20Bytes()); program.stackPush(coinbase); program.step(); } break; case TIMESTAMP:{ DataWord timestamp = program.getTimestamp(); if (logger.isInfoEnabled()) hint = \"timestamp: \" + timestamp.value(); program.stackPush(timestamp); program.step(); } break; case NUMBER:{ DataWord number = program.getNumber(); if (logger.isInfoEnabled()) hint = \"number: \" + number.value(); program.stackPush(number); program.step(); } break; case DIFFICULTY:{ DataWord difficulty = program.getDifficulty(); if (logger.isInfoEnabled()) hint = \"difficulty: \" + difficulty; program.stackPush(difficulty); program.step(); } break; case GASLIMIT:{ DataWord gaslimit = program.getGaslimit(); if (logger.isInfoEnabled()) hint = \"gaslimit: \" + gaslimit; program.stackPush(gaslimit); program.step(); } break; case POP:{ program.stackPop(); program.step(); } break; case DUP1: case DUP2: case DUP3: case DUP4: case DUP5: case DUP6: case DUP7: case DUP8: case DUP9: case DUP10: case DUP11: case DUP12: case DUP13: case DUP14: case DUP15: case DUP16:{ int n = op.val() - OpCode.DUP1.val() + 1; DataWord word_1 = stack.get(stack.size() - n); program.stackPush(word_1.clone()); program.step(); } break; case SWAP1: case SWAP2: case SWAP3: case SWAP4: case SWAP5: case SWAP6: case SWAP7: case SWAP8: case SWAP9: case SWAP10: case SWAP11: case SWAP12: case SWAP13: case SWAP14: case SWAP15: case SWAP16:{ int n = op.val() - OpCode.SWAP1.val() + 2; DataWord word_1 = stack.peek(); stack.set(stack.size() - 1, stack.get(stack.size() - n)); stack.set(stack.size() - n, word_1); program.step(); } break; case MLOAD:{ DataWord addr = program.stackPop(); DataWord data = program.memoryLoad(addr); if (logger.isInfoEnabled()) hint = \"data: \" + data; program.stackPush(data); program.step(); } break; case MSTORE:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); if (logger.isInfoEnabled()) hint = \"addr: \" + addr + \" value: \" + value; program.memorySave(addr, value); program.step(); } break; case MSTORE8:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); byte[] byteVal = {value.getData()[31]}; program.memorySave(addr.intValue(), byteVal); program.step(); } break; case SLOAD:{ DataWord key = program.stackPop(); DataWord val = program.storageLoad(key); if (logger.isInfoEnabled()) hint = \"key: \" + key + \" value: \" + val; if (val == null) { val = key.and(DataWord.ZERO); } program.stackPush(val); program.step(); } break; case SSTORE:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); if (logger.isInfoEnabled()) hint = \"addr: \" + addr + \" value: \" + value; program.storageSave(addr, value); program.step(); } break; case JUMP:{ DataWord pos = program.stackPop(); int nextPC = pos.intValue(); if (nextPC != 0 && program.getOp(nextPC-1) != OpCode.JUMPDEST.val()) throw new BadJumpDestinationException(); if (logger.isInfoEnabled()) hint = \"~> \" + nextPC; program.setPC(nextPC); } break; case JUMPI:{ DataWord pos = program.stackPop(); DataWord cond = program.stackPop(); if (!cond.isZero()) { int nextPC = pos.intValue(); if (nextPC != 0 && program.getOp(nextPC-1) != OpCode.JUMPDEST.val()) throw new BadJumpDestinationException(); if (logger.isInfoEnabled()) hint = \"~> \" + nextPC; program.setPC(nextPC); } else { program.step(); } } break; case PC:{ int pc = program.getPC(); DataWord pcWord = new DataWord(pc); if (logger.isInfoEnabled()) hint = pcWord.toString(); program.stackPush(pcWord); program.step(); } break; case MSIZE:{ int memSize = program.getMemSize(); DataWord wordMemSize = new DataWord(memSize); if (logger.isInfoEnabled()) hint = \"\" + memSize; program.stackPush(wordMemSize); program.step(); } break; case GAS:{ DataWord gas = program.getGas(); if (logger.isInfoEnabled()) hint = \"\" + gas; program.stackPush(gas); program.step(); } break; case PUSH1: case PUSH2: case PUSH3: case PUSH4: case PUSH5: case PUSH6: case PUSH7: case PUSH8: case PUSH9: case PUSH10: case PUSH11: case PUSH12: case PUSH13: case PUSH14: case PUSH15: case PUSH16: case PUSH17: case PUSH18: case PUSH19: case PUSH20: case PUSH21: case PUSH22: case PUSH23: case PUSH24: case PUSH25: case PUSH26: case PUSH27: case PUSH28: case PUSH29: case PUSH30: case PUSH31: case PUSH32:{ program.step(); int nPush = op.val() - PUSH1.val() + 1; byte[] data = program.sweep(nPush); hint = \"\" + Hex.toHexString(data); program.stackPush(data); } break; case JUMPDEST:{ program.step(); } break; case CREATE:{ DataWord value = program.stackPop(); DataWord inOffset = program.stackPop(); DataWord inSize = program.stackPop(); if (logger.isInfoEnabled()) logger.info(logString, program.getPC(), String.format(\"%-12s\", op.name()), program.getGas().value(), program.invokeData.getCallDeep(), hint); program.createContract(value, inOffset, inSize); program.step(); } break; case CALL: case CALLCODE: { DataWord gas = program.stackPop(); DataWord codeAddress = program.stackPop(); DataWord value = program.stackPop(); DataWord inDataOffs = program.stackPop(); DataWord inDataSize = program.stackPop(); DataWord outDataOffs = program.stackPop(); DataWord outDataSize = program.stackPop(); if (logger.isInfoEnabled()) { hint = \"addr: \" + Hex.toHexString(codeAddress.getLast20Bytes()) + \" gas: \" + gas.shortHex() + \" inOff: \" + inDataOffs.shortHex() + \" inSize: \" + inDataSize.shortHex(); logger.info(logString, program.getPC(), String.format(\"%-12s\", op.name()), program.getGas().value(), program.invokeData.getCallDeep(), hint); } MessageCall msg = new MessageCall( op.equals(CALL) ? MsgType.CALL : MsgType.STATELESS, gas, codeAddress, value, inDataOffs, inDataSize, outDataOffs, outDataSize); program.callToAddress(msg); program.step(); } break; case RETURN:{ DataWord offset = program.stackPop(); DataWord size = program.stackPop(); ByteBuffer hReturn = program.memoryChunk(offset, size); program.setHReturn(hReturn); if (logger.isInfoEnabled()) hint = \"data: \" + Hex.toHexString(hReturn.array()) + \" offset: \" + offset.value() + \" size: \" + size.value(); program.step(); program.stop(); } break; case SUICIDE:{ DataWord address = program.stackPop(); program.suicide(address); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(program.getOwnerAddress().getLast20Bytes()); program.stop(); } break; default: break; } if (logger.isInfoEnabled() && !op.equals(CALL) && !op.equals(CREATE)) logger.info(logString, stepBefore, String.format(\"%-12s\", op.name()), program.getGas().longValue(), program.invokeData.getCallDeep(), hint); vmCounter++; } catch (RuntimeException e) { if(e instanceof OutOfGasException) program.spendAllGas(); logger.warn(\"VM halted\", e.getMessage()); program.stop(); throw e; } finally { program.fullTrace(); } }### Assistant: @Test public void testEXTCODECOPY_4() { VM vm = new VM(); program = new Program(Hex.decode(\"605E6007600073471FD3AD3E9EEADEEC4608B92D16CE6B500704CC3C6000605f556014600054601e60205463abcddcba6040545b51602001600a5254516040016014525451606001601e5254516080016028525460a052546016604860003960166000f26000603f556103e756600054600053602002351234\"), invoke); vm.step(program); vm.step(program); vm.step(program); vm.step(program); vm.step(program); assertTrue(program.isStopped()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getIMPLIES() { return \"=>\"; }### Assistant: @Test public void testGetIMPLIES() { String actual = table.getIMPLIES(); String expected = \"=>\"; assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isCaseSensitive( int column ) { return getJcrType(column).isCaseSensitive(); }### Assistant: @Test public void shouldReturnCaseSensitiveBasedUponNodeTypeWhenResultIsExtendedJcrQueryResult() { assertThat(extMetadata.isCaseSensitive(1), is(true)); assertThat(extMetadata.isCaseSensitive(2), is(false)); assertThat(extMetadata.isCaseSensitive(3), is(true)); assertThat(extMetadata.isCaseSensitive(4), is(false)); assertThat(extMetadata.isCaseSensitive(5), is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> removeAWSRoleFromSvcacc(UserDetails userDetails, String token, ServiceAccountAWSRole serviceAccountAWSRole) { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AWS Role from Service Account\"). put(LogMessage.MESSAGE, String.format (\"Trying to remove AWS Role from Service Account [%s]\", serviceAccountAWSRole.getRolename())). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); if (!userDetails.isAdmin()) { token = tokenUtils.getSelfServiceToken(); } if(!isSvcaccPermissionInputValid(serviceAccountAWSRole.getAccess())) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Invalid value specified for access. Valid values are read, reset, deny\\\"]}\"); } if (serviceAccountAWSRole.getAccess().equalsIgnoreCase(\"reset\")) { serviceAccountAWSRole.setAccess(TVaultConstants.WRITE_POLICY); } String roleName = serviceAccountAWSRole.getRolename(); String svcAccName = serviceAccountAWSRole.getSvcAccName(); String access = serviceAccountAWSRole.getAccess(); roleName = (roleName !=null) ? roleName.toLowerCase() : roleName; access = (access != null) ? access.toLowerCase(): access; boolean isAuthorized = hasAddOrRemovePermission(userDetails, svcAccName, token); if (isAuthorized) { if (!ifInitialPwdReset(token, userDetails, serviceAccountAWSRole.getSvcAccName())) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AWSRole from ServiceAccount\"). put(LogMessage.MESSAGE, \"Failed to remove awsrole permission from Service account. Initial password reset is pending for this Service Account.\"). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Failed to remove awsrole permission from Service account. Initial password reset is pending for this Service Account. Please reset the password and try again.\\\"]}\"); } String r_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.READ_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String w_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.WRITE_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String d_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.DENY_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); String o_policy = new StringBuffer().append(TVaultConstants.SVC_ACC_POLICIES_PREFIXES.getKey(TVaultConstants.SUDO_POLICY)).append(TVaultConstants.SVC_ACC_PATH_PREFIX).append(\"_\").append(svcAccName).toString(); log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AWS Role from Service Account\"). put(LogMessage.MESSAGE, String.format (\"Policies are, read - [%s], write - [%s], deny -[%s], owner - [%s]\", r_policy, w_policy, d_policy, o_policy)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); Response roleResponse = reqProcessor.process(\"/auth/aws/roles\",\"{\\\"role\\\":\\\"\"+roleName+\"\\\"}\",token); String responseJson=\"\"; String auth_type = TVaultConstants.EC2; List<String> policies = new ArrayList<>(); List<String> currentpolicies = new ArrayList<>(); if(HttpStatus.OK.equals(roleResponse.getHttpstatus())){ responseJson = roleResponse.getResponse(); ObjectMapper objMapper = new ObjectMapper(); try { JsonNode policiesArry =objMapper.readTree(responseJson).get(\"policies\"); for(JsonNode policyNode : policiesArry){ currentpolicies.add(policyNode.asText()); } auth_type = objMapper.readTree(responseJson).get(\"auth_type\").asText(); } catch (IOException e) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AWS Role from Service Account\"). put(LogMessage.MESSAGE, e.getMessage()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); } policies.addAll(currentpolicies); policies.remove(r_policy); policies.remove(w_policy); policies.remove(d_policy); } else{ return ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).body(\"{\\\"errors\\\":[\\\"AppRole doesn't exist\\\"]}\"); } String policiesString = org.apache.commons.lang3.StringUtils.join(policies, \",\"); String currentpoliciesString = org.apache.commons.lang3.StringUtils.join(currentpolicies, \",\"); log.info(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AWS Role from Service account\"). put(LogMessage.MESSAGE, \"Remove AWS Role from Service account - policy :\" + policiesString + \" is being configured\" ). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); Response awsRoleConfigresponse = null; if (TVaultConstants.IAM.equals(auth_type)) { awsRoleConfigresponse = awsiamAuthService.configureAWSIAMRole(roleName,policiesString,token); } else { awsRoleConfigresponse = awsAuthService.configureAWSRole(roleName,policiesString,token); } if(awsRoleConfigresponse.getHttpstatus().equals(HttpStatus.NO_CONTENT) || awsRoleConfigresponse.getHttpstatus().equals(HttpStatus.OK)){ String path = new StringBuffer(TVaultConstants.SVC_ACC_ROLES_PATH).append(svcAccName).toString(); Map<String,String> params = new HashMap<String,String>(); params.put(\"type\", \"aws-roles\"); params.put(\"name\",roleName); params.put(\"path\",path); params.put(\"access\",\"delete\"); Response metadataResponse = ControllerUtil.updateMetadata(params,token); if(metadataResponse !=null && (HttpStatus.NO_CONTENT.equals(metadataResponse.getHttpstatus()) || HttpStatus.OK.equals(metadataResponse.getHttpstatus()))){ log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AWS Role from Service Account\"). put(LogMessage.MESSAGE, \"AWS Role configuration Success.\"). put(LogMessage.STATUS, metadataResponse.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"AWS Role is successfully removed from Service Account\\\"]}\"); } if (TVaultConstants.IAM.equals(auth_type)) { awsRoleConfigresponse = awsiamAuthService.configureAWSIAMRole(roleName,currentpoliciesString,token); } else { awsRoleConfigresponse = awsAuthService.configureAWSRole(roleName,currentpoliciesString,token); } if(awsRoleConfigresponse.getHttpstatus().equals(HttpStatus.NO_CONTENT)){ log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AWS Role from Service Account\"). put(LogMessage.MESSAGE, \"Reverting, AWS Role policy update success\"). put(LogMessage.RESPONSE, (null!=metadataResponse)?metadataResponse.getResponse():TVaultConstants.EMPTY). put(LogMessage.STATUS, (null!=metadataResponse)?metadataResponse.getHttpstatus().toString():TVaultConstants.EMPTY). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"AWS Role configuration failed. Please try again\\\"]}\"); }else{ log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Remove AppRole from Service Account\"). put(LogMessage.MESSAGE, \"Reverting approle policy update failed\"). put(LogMessage.RESPONSE, (null!=metadataResponse)?metadataResponse.getResponse():TVaultConstants.EMPTY). put(LogMessage.STATUS, (null!=metadataResponse)?metadataResponse.getHttpstatus().toString():TVaultConstants.EMPTY). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"AWS Role configuration failed. Contact Admin \\\"]}\"); } } else { return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Failed to remove AWS Role from the Service Account\\\"]}\"); } } else { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Access denied: No permission to remove AWS Role from Service Account\\\"]}\"); } }### Assistant: @Test public void test_removeAWSRoleFromSvcacc_metadata_failure() throws Exception { ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"AWS Role configuration failed. Please try again\\\"]}\"); String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; UserDetails userDetails = getMockUser(false); ServiceAccountAWSRole serviceAccountAWSRole = new ServiceAccountAWSRole(\"testsvcname\", \"role1\", \"reset\"); String [] policies = {\"o_svcacct_testsvcname\"}; when(policyUtils.getCurrentPolicies(token, userDetails.getUsername(), userDetails)).thenReturn(policies); String responseBody = \"{ \\\"bound_account_id\\\": [ \\\"1234567890123\\\"],\\\"bound_ami_id\\\": [\\\"ami-fce3c696\\\" ], \\\"bound_iam_instance_profile_arn\\\": [\\n\" + \" \\\"arn:aws:iam::877677878:instance-profile/exampleinstanceprofile\\\" ], \\\"bound_iam_role_arn\\\": [\\\"arn:aws:iam::8987887:role/test-role\\\" ], \" + \"\\\"bound_vpc_id\\\": [ \\\"vpc-2f09a348\\\"], \\\"bound_subnet_id\\\": [ \\\"subnet-1122aabb\\\"],\\\"bound_region\\\": [\\\"us-east-2\\\"],\\\"policies\\\":\" + \" [ \\\"w_svcacct_testsvcname\\\" ], \\\"auth_type\\\":\\\"ec2\\\"}\"; Response awsRoleResponse = getMockResponse(HttpStatus.OK, true, responseBody); when(reqProcessor.process(\"/auth/aws/roles\",\"{\\\"role\\\":\\\"role1\\\"}\",token)).thenReturn(awsRoleResponse); Response configureAWSRoleResponse = getMockResponse(HttpStatus.NO_CONTENT, true, \"\"); when(awsAuthService.configureAWSRole(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(configureAWSRoleResponse); Response updateMetadataResponse = getMockResponse(HttpStatus.BAD_REQUEST, true, \"\"); when(ControllerUtil.updateMetadata(Mockito.anyMap(),Mockito.anyString())).thenReturn(updateMetadataResponse); when(tokenUtils.getSelfServiceToken()).thenReturn(token); when(reqProcessor.process(eq(\"/sdb\"),Mockito.any(),eq(token))).thenReturn(getMockResponse(HttpStatus.OK, true, \"{\\\"data\\\":{\\\"initialPasswordReset\\\":true,\\\"managedBy\\\":\\\"smohan11\\\",\\\"name\\\":\\\"svc_vault_test5\\\",\\\"users\\\":{\\\"smohan11\\\":\\\"sudo\\\"}}}\")); ResponseEntity<String> responseEntityActual = serviceAccountsService.removeAWSRoleFromSvcacc(userDetails, token, serviceAccountAWSRole); assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntityActual.getStatusCode()); assertEquals(responseEntityExpected, responseEntityActual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void printBackfills(List<BackfillPayload> backfills, boolean ignored) { printJson(backfills); }### Assistant: @Test public void shouldPrintBackfills() { cliOutput.printBackfills(List.of(BackfillPayload.create(BACKFILL, Optional.empty())), true); assertEquals(\"[\" + EXPECTED_OUTPUT_WITH_STATUS + \"]\\n\", outContent.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void finish() { finish(0L); }### Assistant: @Test public void finished_client_annotation() { finish(\"cs\", \"cr\", Kind.CLIENT); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public long extractIdFromFilename(String filename) throws UnrecognisedFilenameException { Matcher matches = pattern.matcher(filename); if (!matches.matches() || matches.groupCount() != 1) throw new UnrecognisedFilenameException(\"Could not extract a change script number from filename: \" + filename); return Long.parseLong(matches.group(1)); }### Assistant: @Test public void throwsWhenFilenameDoesNotStartWithANumber() throws Exception { FilenameParser parser = new FilenameParser(); try { parser.extractIdFromFilename(\"blah blah blah\"); fail(\"expected exception\"); } catch (UnrecognisedFilenameException e) { assertEquals(\"Could not extract a change script number from filename: blah blah blah\", e.getMessage() ); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public BusinessObjectFormatExternalInterface deleteBusinessObjectFormatExternalInterface( BusinessObjectFormatExternalInterfaceKey businessObjectFormatExternalInterfaceKey) { businessObjectFormatExternalInterfaceHelper.validateAndTrimBusinessObjectFormatExternalInterfaceKey(businessObjectFormatExternalInterfaceKey); BusinessObjectFormatExternalInterfaceEntity businessObjectFormatExternalInterfaceEntity = businessObjectFormatExternalInterfaceDaoHelper.getBusinessObjectFormatExternalInterfaceEntity(businessObjectFormatExternalInterfaceKey); businessObjectFormatExternalInterfaceDao.delete(businessObjectFormatExternalInterfaceEntity); return businessObjectFormatExternalInterfaceHelper.createBusinessObjectFormatExternalInterfaceFromEntity(businessObjectFormatExternalInterfaceEntity); }### Assistant: @Test public void testDeleteBusinessObjectFormatExternalInterface() { BusinessObjectFormatExternalInterfaceKey businessObjectFormatExternalInterfaceKey = new BusinessObjectFormatExternalInterfaceKey(NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, EXTERNAL_INTERFACE); BusinessObjectFormatExternalInterface businessObjectFormatExternalInterface = new BusinessObjectFormatExternalInterface(ID, businessObjectFormatExternalInterfaceKey); BusinessObjectFormatExternalInterfaceEntity businessObjectFormatExternalInterfaceEntity = new BusinessObjectFormatExternalInterfaceEntity(); when(businessObjectFormatExternalInterfaceDaoHelper.getBusinessObjectFormatExternalInterfaceEntity(businessObjectFormatExternalInterfaceKey)) .thenReturn(businessObjectFormatExternalInterfaceEntity); when(businessObjectFormatExternalInterfaceHelper.createBusinessObjectFormatExternalInterfaceFromEntity(businessObjectFormatExternalInterfaceEntity)) .thenReturn(businessObjectFormatExternalInterface); BusinessObjectFormatExternalInterface result = businessObjectFormatExternalInterfaceService.deleteBusinessObjectFormatExternalInterface(businessObjectFormatExternalInterfaceKey); assertEquals(businessObjectFormatExternalInterface, result); verify(businessObjectFormatExternalInterfaceHelper).validateAndTrimBusinessObjectFormatExternalInterfaceKey(businessObjectFormatExternalInterfaceKey); verify(businessObjectFormatExternalInterfaceDaoHelper).getBusinessObjectFormatExternalInterfaceEntity(businessObjectFormatExternalInterfaceKey); verify(businessObjectFormatExternalInterfaceDao).delete(businessObjectFormatExternalInterfaceEntity); verify(businessObjectFormatExternalInterfaceHelper).createBusinessObjectFormatExternalInterfaceFromEntity(businessObjectFormatExternalInterfaceEntity); verifyNoMoreInteractionsHelper(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean permittedTopology(DimensionInfo sourceDimensionInfo, DimensionInfo targetDimensionInfo) { return (sourceDimensionInfo.isArea() && targetDimensionInfo.isArea()) || (sourceDimensionInfo.isArea() && targetDimensionInfo.isLine()) || (sourceDimensionInfo.isLine() && targetDimensionInfo.isLine()); }### Assistant: @Test public void testPermittedTopology_point_polygon() { DimensionInfo sourceDimensionInfo = DimensionInfo.XY_POINT; DimensionInfo targetDimensionInfo = DimensionInfo.XY_POLYGON; EhCoversFF instance = new EhCoversFF(); boolean expResult = false; boolean result = instance.permittedTopology(sourceDimensionInfo, targetDimensionInfo); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void pause() { for (Entry<PhysicalPartition, EventProducer> entry : _producers .entrySet()) { EventProducer producer = entry.getValue(); if (null != producer) { if (producer.isRunning()) { producer.pause(); LOG.info(\"EventProducer :\" + producer.getName() + \" pause sent\"); } else if (producer.isPaused()) { LOG.info(\"EventProducer :\" + producer.getName() + \" already paused\"); } } } }### Assistant: @Test public void testRelayChainingPauseResume() { DatabusRelayTestUtil.RelayRunner r1=null,r2=null; ClientRunner cr = null; try { String[][] srcNames = { { \"com.linkedin.events.example.Account\", \"com.linkedin.events.example.Settings\" }, }; PhysicalSourceConfig[] srcConfigs = new PhysicalSourceConfig[srcNames.length]; int i = 0; int eventRatePerSec = 10; for (String[] srcs : srcNames) { PhysicalSourceConfig src1 = DatabusRelayTestUtil.createPhysicalConfigBuilder( (short) (i + 1),DatabusRelayTestUtil.getPhysicalSrcName(srcs[0]), \"mock\", 500, eventRatePerSec, srcs); srcConfigs[i++] = src1; } int relayPort = 11993; DatabusRelayMain relay1 = DatabusRelayTestUtil.createDatabusRelayWithSchemaReg(1014, relayPort, 10 * 1024 * 1024, srcConfigs,SCHEMA_REGISTRY_DIR); Assert.assertTrue(null != relay1); r1 = new DatabusRelayTestUtil.RelayRunner(relay1); PhysicalSourceConfig[] chainedSrcConfigs = new PhysicalSourceConfig[srcNames.length]; int j = 0; for (String[] srcs : srcNames) { PhysicalSourceConfig src1 = DatabusRelayTestUtil.createPhysicalConfigBuilder( (short) (j + 1),DatabusRelayTestUtil.getPhysicalSrcName(srcs[0]), \"localhost:\" + relayPort, eventRatePerSec, 50, srcs); chainedSrcConfigs[j++] = src1; } int chainedRelayPort = relayPort + 1; DatabusRelayMain relay2 = DatabusRelayTestUtil.createDatabusRelayWithSchemaReg(1015, chainedRelayPort, 1 * 1024 * 1024, chainedSrcConfigs,SCHEMA_REGISTRY_DIR); Assert.assertTrue(null != relay2); resetSCN(relay2); r2 = new DatabusRelayTestUtil.RelayRunner(relay2); String srcSubscriptionString = TestUtil.join(srcNames[0], \",\"); String serverName = \"localhost:\" + chainedRelayPort; CountingConsumer countingConsumer = new CountingConsumer(); DatabusSourcesConnection clientConn = RelayEventProducer .createDatabusSourcesConnection(\"testProducer\", serverName, srcSubscriptionString, countingConsumer, 1 * 1024 * 1024, 50000, 30 * 1000, 100, 15 * 1000, 1, true); cr = new ClientRunner(clientConn); r1.start(); r2.start(); cr.start(); Thread.sleep(2 * 1000); r2.pause(); Thread.sleep(2 * 1000); r1.pause(); r2.unpause(); long maxTimeOutMs = 5 * 1000; long startTime = System.currentTimeMillis(); DbusEventsTotalStats stats = relay1 .getInboundEventStatisticsCollector().getTotalStats(); while (countingConsumer.getNumWindows() < stats.getNumSysEvents()) { Thread.sleep(500); if ((System.currentTimeMillis() - startTime) > maxTimeOutMs) { break; } } LOG.info(\"Client stats=\" + countingConsumer); LOG.info(\"Event windows generated=\" + stats.getNumSysEvents()); LOG.info(\"numDataEvents=\" + stats.getNumDataEvents() + \" numWindows=\" + stats.getNumSysEvents() + \" size=\" + stats.getSizeDataEvents()); Assert.assertTrue(stats.getNumDataEvents() == countingConsumer .getNumDataEvents()); Assert.assertTrue(countingConsumer.getNumSources() == 2); Assert.assertTrue(stats.getNumSysEvents() == countingConsumer .getNumWindows()); } catch (Exception e) { LOG.error(\"Exception: \" + e); Assert.assertTrue(false); } finally { cleanup ( new DatabusRelayTestUtil.RelayRunner[] {r1,r2} , cr); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static boolean emulatorSupportsSnapshotManagement(@NotNull AndroidSdkHandler sdkHandler) { return emulatorVersionIsAtLeast(sdkHandler, MIN_SNAPSHOT_MANAGEMENT_VERSION); }### Assistant: @Test public void testEmulatorSupportsSnapshotManagement() { assertThat(emulatorSupportsSnapshotManagement(createMockSdk(\"27.2.4\", FD_EMULATOR))).isFalse(); assertThat(emulatorSupportsSnapshotManagement(createMockSdk(\"27.2.5\", FD_EMULATOR))).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TTopologyTemplate split(TTopologyTemplate topologyTemplate) throws SplittingException { if (!checkValidTopology(topologyTemplate)) { throw new SplittingException(\"Topology is not valid\"); } TTopologyTemplate topologyTemplateCopy = BackendUtils.clone(topologyTemplate); HashSet<TNodeTemplate> nodeTemplatesWhichPredecessorsHasNoPredecessors = new HashSet<>(getNodeTemplatesWhichPredecessorsHasNoPredecessors(topologyTemplateCopy)); while (!nodeTemplatesWhichPredecessorsHasNoPredecessors.isEmpty()) { for (TNodeTemplate currentNode : nodeTemplatesWhichPredecessorsHasNoPredecessors) { List<TNodeTemplate> predecessors = getHostedOnPredecessorsOfNodeTemplate(topologyTemplateCopy, currentNode); Set<String> predecessorsTargetLabel = new HashSet<>(); for (TNodeTemplate predecessor : predecessors) { Optional<String> targetLabel = ModelUtilities.getTargetLabel(predecessor); if (!targetLabel.isPresent()) { LOGGER.error(\"No target label present\"); LOGGER.error(\"id \" + predecessor.getId()); } predecessorsTargetLabel.add(targetLabel.get().toLowerCase()); } if (predecessorsTargetLabel.size() == 1) { ModelUtilities.setTargetLabel(currentNode, ModelUtilities.getTargetLabel(predecessors.get(0)).get()); } else { List<TRelationshipTemplate> incomingRelationships = ModelUtilities.getIncomingRelationshipTemplates(topologyTemplateCopy, currentNode); List<TRelationshipTemplate> outgoingRelationships = ModelUtilities.getOutgoingRelationshipTemplates(topologyTemplateCopy, currentNode); for (String targetLabel : predecessorsTargetLabel) { TNodeTemplate duplicatedNode = BackendUtils.clone(currentNode); duplicatedNode.setId(Util.makeNCName(currentNode.getId() + \"-\" + targetLabel)); duplicatedNode.setName(Util.makeNCName(currentNode.getName() + \"-\" + targetLabel)); topologyTemplate.getNodeTemplateOrRelationshipTemplate().add(duplicatedNode); topologyTemplateCopy.getNodeTemplateOrRelationshipTemplate().add(duplicatedNode); ModelUtilities.setTargetLabel(duplicatedNode, targetLabel); for (TRelationshipTemplate incomingRelationship : incomingRelationships) { Object sourceElementIncommingRel = incomingRelationship.getSourceElement().getRef(); TNodeTemplate sourceNodeTemplate = ModelUtilities.getSourceNodeTemplateOfRelationshipTemplate(topologyTemplateCopy, incomingRelationship); if (((ModelUtilities.getTargetLabel(sourceNodeTemplate).get() .equalsIgnoreCase(ModelUtilities.getTargetLabel(duplicatedNode).get()) && getBasisRelationshipType(incomingRelationship.getType()).getValidTarget().getTypeRef().getLocalPart().equalsIgnoreCase(\"Container\")) || !predecessors.contains(sourceNodeTemplate))) { List<TRelationshipTemplate> reassignRelationship = new ArrayList<>(); reassignRelationship.add(incomingRelationship); List<TRelationshipTemplate> reassignedRelationship = reassignIncomingRelationships(reassignRelationship, duplicatedNode); topologyTemplate.getNodeTemplateOrRelationshipTemplate().addAll(reassignedRelationship); topologyTemplateCopy.getNodeTemplateOrRelationshipTemplate().addAll(reassignedRelationship); } } List<TRelationshipTemplate> newOutgoingRelationships = reassignOutgoingRelationships(outgoingRelationships, duplicatedNode); topologyTemplate.getNodeTemplateOrRelationshipTemplate().addAll(newOutgoingRelationships); topologyTemplateCopy.getNodeTemplateOrRelationshipTemplate().addAll(newOutgoingRelationships); } topologyTemplate.getNodeTemplateOrRelationshipTemplate().remove(currentNode); topologyTemplate.getNodeTemplateOrRelationshipTemplate().removeAll(outgoingRelationships); topologyTemplate.getNodeTemplateOrRelationshipTemplate().removeAll(incomingRelationships); topologyTemplateCopy.getNodeTemplateOrRelationshipTemplate().remove(currentNode); topologyTemplateCopy.getNodeTemplateOrRelationshipTemplate().removeAll(outgoingRelationships); topologyTemplateCopy.getNodeTemplateOrRelationshipTemplate().removeAll(incomingRelationships); } topologyTemplateCopy.getNodeTemplateOrRelationshipTemplate().removeAll(predecessors); List<TRelationshipTemplate> removingRelationships = topologyTemplateCopy.getRelationshipTemplates().stream() .filter(rt -> predecessors.contains(ModelUtilities.getSourceNodeTemplateOfRelationshipTemplate(topologyTemplateCopy, rt)) || predecessors.contains(ModelUtilities.getTargetNodeTemplateOfRelationshipTemplate(topologyTemplateCopy, rt))) .collect(Collectors.toList()); topologyTemplateCopy.getNodeTemplateOrRelationshipTemplate().removeAll(removingRelationships); } nodeTemplatesWhichPredecessorsHasNoPredecessors.clear(); nodeTemplatesWhichPredecessorsHasNoPredecessors.addAll(getNodeTemplatesWhichPredecessorsHasNoPredecessors(topologyTemplateCopy)); } return topologyTemplate; }### Assistant: @Test public void splitSmallTopology() throws Exception { List<String> expectedIds = Arrays.asList(\"NT1\", \"NT1_2\", \"NT1_3-A\", \"NT1_3-B\", \"NT1_4-A\", \"NT1_4-B\", \"NT1_5-A\", \"NT1_5-B\", \"con37\", \"con45\", \"con_91-A-A\", \"con_57-B-B\"); List<TEntityTemplate> NodeTemplates = splitting.split(topologyTemplate).getNodeTemplateOrRelationshipTemplate(); List<String> Ids = new ArrayList<>(); for (TEntityTemplate nodeTemplate : NodeTemplates) { Ids.add(nodeTemplate.getId()); } assertEquals(expectedIds, Ids); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Policies getPolicies(ResourceContext ctx, String domainName, Boolean assertions) { final String caller = ctx.getApiName(); logPrincipal(ctx); validateRequest(ctx.request(), caller); validate(domainName, TYPE_DOMAIN_NAME, caller); domainName = domainName.toLowerCase(); setRequestDomain(ctx, domainName); Policies result = new Policies(); AthenzDomain domain = getAthenzDomain(domainName, false); if (domain == null) { throw ZMSUtils.notFoundError(\"getPolicies: Domain not found: '\" + domainName + \"'\", caller); } result.setList(setupPolicyList(domain, assertions)); return result; }### Assistant: @Test public void testGetPolicies() { final String domainName = \"get-policies\"; TopLevelDomain dom1 = createTopLevelDomainObject(domainName, \"Test Domain1\", \"testOrg\", adminUser); zms.postTopLevelDomain(mockDomRsrcCtx, auditRef, dom1); Policy policy1 = createPolicyObject(domainName, \"policy1\"); zms.putPolicy(mockDomRsrcCtx, domainName, \"policy1\", auditRef, policy1); Policy policy2 = createPolicyObject(domainName, \"policy2\"); zms.putPolicy(mockDomRsrcCtx, domainName, \"policy2\", auditRef, policy2); Policies policyList = zms.getPolicies(mockDomRsrcCtx, domainName, Boolean.TRUE); List<Policy> policies = policyList.getList(); assertEquals(3, policies.size()); boolean policy1Check = false; boolean policy2Check = false; List<Assertion> testAssertions; for (Policy policy : policies) { switch (policy.getName()) { case \"get-policies:policy.policy1\": testAssertions = policy.getAssertions(); assertEquals(testAssertions.size(), 1); policy1Check = true; break; case \"get-policies:policy.policy2\": testAssertions = policy.getAssertions(); assertEquals(testAssertions.size(), 1); policy2Check = true; break; } } assertTrue(policy1Check); assertTrue(policy2Check); zms.deleteTopLevelDomain(mockDomRsrcCtx, domainName, auditRef); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<String> listPrincipals(String domainName) { final String caller = \"listPrincipals\"; List<String> principals = new ArrayList<>(); try (PreparedStatement ps = preparePrincipalScanStatement(domainName)) { try (ResultSet rs = executeQuery(ps, caller)) { while (rs.next()) { principals.add(rs.getString(ZMSConsts.DB_COLUMN_NAME)); } } } catch (SQLException ex) { throw sqlError(ex, caller); } return principals; }### Assistant: @Test public void testListPrincipals() throws Exception { JDBCConnection jdbcConn = new JDBCConnection(mockConn, true); Mockito.when(mockResultSet.next()) .thenReturn(true) .thenReturn(true) .thenReturn(true) .thenReturn(true) .thenReturn(false); Mockito.when(mockResultSet.getString(ZMSConsts.DB_COLUMN_NAME)) .thenReturn(\"user.joe\") .thenReturn(\"user.jane\") .thenReturn(\"user.doe\") .thenReturn(\"user.jack\"); List<String> principals = jdbcConn.listPrincipals(\"user\"); assertEquals(4, principals.size()); assertTrue(principals.contains(\"user.joe\")); assertTrue(principals.contains(\"user.jane\")); assertTrue(principals.contains(\"user.doe\")); assertTrue(principals.contains(\"user.jack\")); jdbcConn.close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] build_lenenc_int(long value) { byte[] packet = null; if (value < 251) { packet = new byte[1]; packet[0] = (byte) ((value >> 0) & 0xFF); } else if (value < 65535) { packet = new byte[3]; packet[0] = (byte) 0xFC; packet[1] = (byte) ((value >> 0) & 0xFF); packet[2] = (byte) ((value >> 8) & 0xFF); } else if (value < 16777215) { packet = new byte[4]; packet[0] = (byte) 0xFD; packet[1] = (byte) ((value >> 0) & 0xFF); packet[2] = (byte) ((value >> 8) & 0xFF); packet[3] = (byte) ((value >> 16) & 0xFF); } else { packet = new byte[9]; packet[0] = (byte) 0xFE; packet[1] = (byte) ((value >> 0) & 0xFF); packet[2] = (byte) ((value >> 8) & 0xFF); packet[3] = (byte) ((value >> 16) & 0xFF); packet[4] = (byte) ((value >> 24) & 0xFF); packet[5] = (byte) ((value >> 32) & 0xFF); packet[6] = (byte) ((value >> 40) & 0xFF); packet[7] = (byte) ((value >> 48) & 0xFF); packet[8] = (byte) ((value >> 56) & 0xFF); } return packet; }### Assistant: @Test public void test14() { byte[] expected = new byte[] { (byte)0xfe, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x02, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, }; assertArrayEquals(expected, Proto.build_lenenc_int(33554432)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Set<T> removeOutliers(final Set<T> candidateSet) { if (candidateSet.size() <= 2) { return candidateSet; } final PointList candidates = new PointList(pointFactory, candidateSet); final List<PointDoublePair> centroidDistances = calculateCentroidDistances(candidates); final List<PointDoublePair> medianDistanceDivergences = calculateDistanceDivergences(centroidDistances); removeOutliers(medianDistanceDivergences, candidateSet); return candidateSet; }### Assistant: @Test public void testThatOutliersFromARealMapAreDetected() throws NicTrackerException { final Set<NicGeoPoint> geoPointsIn = CandidateFixtures.createCandidatesOutliersFromARealMap(); final Set<NicGeoPoint> expected = CandidateFixtures.createCandidatesOutliersFromARealMapExpected(); final Set<NicGeoPoint> geoPointsOut = poe.removeOutliers(geoPointsIn); assertEquals(expected, geoPointsOut); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DescriptorValue calculate(IAtomContainer atomContainer) { IAtomContainer ac; try { ac = (IAtomContainer) atomContainer.clone(); } catch (CloneNotSupportedException e) { return getDummyDescriptorValue(e); } List<String> profiles = new ArrayList<String>(); IRingSet rs; try { rs = (new AllRingsFinder()).findAllRings(ac); } catch (CDKException e) { return getDummyDescriptorValue(e); } if (checkAromaticity) { try { AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(ac); Aromaticity.cdkLegacy().apply(ac); } catch (CDKException e) { return getDummyDescriptorValue(e); } } for (IAtom atom : ac.atoms()) { if (atom.getAtomicNumber() == IElement.N || atom.getAtomicNumber() == IElement.O || atom.getAtomicNumber() == IElement.S || atom.getAtomicNumber() == IElement.P) { int singleBondCount = 0; int doubleBondCount = 0; int tripleBondCount = 0; int aromaticBondCount = 0; double maxBondOrder = 0; double bondOrderSum = 0; int hCount = 0; int isIn3MemberRing = 0; List<IBond> connectedBonds = ac.getConnectedBondsList(atom); for (IBond connectedBond : connectedBonds) { if (connectedBond.getFlag(CDKConstants.ISAROMATIC)) aromaticBondCount++; else if (connectedBond.getOrder() == Order.SINGLE) singleBondCount++; else if (connectedBond.getOrder() == Order.DOUBLE) doubleBondCount++; else if (connectedBond.getOrder() == Order.TRIPLE) tripleBondCount++; } int formalCharge = atom.getFormalCharge(); List<IAtom> connectedAtoms = ac.getConnectedAtomsList(atom); int numberOfNeighbours = connectedAtoms.size(); for (int neighbourIndex = 0; neighbourIndex < numberOfNeighbours; neighbourIndex++) if (((IAtom) connectedAtoms.get(neighbourIndex)).getAtomicNumber() == IElement.H) hCount++; Integer implicitHAtoms = atom.getImplicitHydrogenCount(); if (implicitHAtoms == CDKConstants.UNSET) { implicitHAtoms = 0; } for (int hydrogenIndex = 0; hydrogenIndex < implicitHAtoms; hydrogenIndex++) { hCount++; numberOfNeighbours++; singleBondCount++; } bondOrderSum += singleBondCount * 1.0; bondOrderSum += doubleBondCount * 2.0; bondOrderSum += tripleBondCount * 3.0; bondOrderSum += aromaticBondCount * 1.5; if (singleBondCount > 0) maxBondOrder = 1.0; if (aromaticBondCount > 0) maxBondOrder = 1.5; if (doubleBondCount > 0) maxBondOrder = 2.0; if (tripleBondCount > 0) maxBondOrder = 3.0; if (rs.contains(atom)) { IRingSet rsAtom = rs.getRings(atom); for (int ringSetIndex = 0; ringSetIndex < rsAtom.getAtomContainerCount(); ringSetIndex++) { IRing ring = (IRing) rsAtom.getAtomContainer(ringSetIndex); if (ring.getRingSize() == 3) isIn3MemberRing = 1; } } String profile = atom.getSymbol() + \"+\" + maxBondOrder + \"+\" + bondOrderSum + \"+\" + numberOfNeighbours + \"+\" + hCount + \"+\" + formalCharge + \"+\" + aromaticBondCount + \"+\" + isIn3MemberRing + \"+\" + singleBondCount + \"+\" + doubleBondCount + \"+\" + tripleBondCount; profiles.add(profile); } } double tpsa = 0; for (int profileIndex = 0; profileIndex < profiles.size(); profileIndex++) { if (map.containsKey(profiles.get(profileIndex))) { tpsa += (Double) map.get(profiles.get(profileIndex)); } } profiles.clear(); return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(tpsa), getDescriptorNames()); }### Assistant: @Test public void testTPSA4() throws Exception { IAtomContainer mol = sp.parseSmiles(\"C#N=CC(CNC)N1CC1\"); addExplicitHydrogens(mol); Assert.assertEquals(28.632, ((DoubleResult) descriptor.calculate(mol).getValue()).doubleValue(), 0.01); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void manage(@NonNull CalibrationContract.View v,@NonNull FeatureAutoConfigurable feature) { mView = v; mFeature = feature; feature.addFeatureListener(this); Boolean isConfigured = mFeature.isConfigured(); if(isConfigured == null){ mView.setCalibrationButtonState(false); }else{ if(isConfigured) { mView.setCalibrationButtonState(true); }else { mFeature.startAutoConfiguration(); } } }### Assistant: @Test public void manageFeatureRegisterAListener() { presenter.manage(mView,mFeature); verify(mFeature).addFeatureListener(any(FeatureAutoConfigurationListener.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Map<String, CSLItemData> toItemData(BibTeXDatabase db) { Map<String, CSLItemData> result = new LinkedHashMap<>(); for (Map.Entry<Key, BibTeXEntry> e : db.getEntries().entrySet()) { result.put(e.getKey().getValue(), toItemData(e.getValue())); } return result; }### Assistant: @Test public void singleEntry() throws Exception { BibTeXDatabase db = loadUnixDatabase(); BibTeXEntry e = db.resolveEntry(new Key(\"Ritchie:1974:UTS\")); BibTeXConverter conv = new BibTeXConverter(); CSLItemData cid = conv.toItemData(e); assertEquals(\"Ritchie:1974:UTS\", cid.getId()); assertEquals(CSLType.ARTICLE_JOURNAL, cid.getType()); assertEquals(2, cid.getAuthor().length); assertEquals(\"Ritchie\", cid.getAuthor()[0].getFamily()); assertEquals(\"Dennis W.\", cid.getAuthor()[0].getGiven()); assertEquals(\"Thompson\", cid.getAuthor()[1].getFamily()); assertEquals(\"Ken\", cid.getAuthor()[1].getGiven()); assertEquals(\"Communications of the Association for Computing Machinery\", cid.getCollectionTitle()); assertEquals(\"Communications of the Association for Computing Machinery\", cid.getContainerTitle()); assertEquals(\"17\", cid.getVolume()); assertEquals(\"7\", cid.getIssue()); assertEquals(\"7\", cid.getNumber()); assertEquals(\"11\", cid.getNumberOfPages()); assertEquals(\"365-375\", cid.getPage()); assertEquals(\"365\", cid.getPageFirst()); assertEquals(\"The UNIX Time-Sharing System\", cid.getTitle()); assertArrayEquals(new int[][] { new int[] { 1974, 7 } }, cid.getIssued().getDateParts()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected int getNumSecondsUntilNthHourOfWeek(int nthHour, Calendar fromCalendar) { int day = fromCalendar.get(Calendar.DAY_OF_WEEK) - 1; int hour = fromCalendar.get(Calendar.HOUR_OF_DAY); int currNthHour = day * 24 + hour; int hoursUntil = currNthHour < nthHour ? (nthHour - currNthHour) : (nthHour + 7*24 - currNthHour); int secondsPastHour = fromCalendar.get(Calendar.MINUTE) * 60; return hoursUntil * 60 * 60 - secondsPastHour; }### Assistant: @Test public void testNumHoursUntilNextFlushBloomFilter() { Calendar wedAtSix = Calendar.getInstance(); wedAtSix.set(Calendar.HOUR_OF_DAY, 6); wedAtSix.set(Calendar.DAY_OF_WEEK, 4); for (int dayIndex = 0; dayIndex < 3; dayIndex++) { int nthHour = dayIndex * 24 + 4; int secondsUntil = _esSchemaService.getNumSecondsUntilNthHourOfWeek(nthHour, wedAtSix); int floorHoursUntil = secondsUntil / 60 / 60; int expectedHours = (4 + dayIndex) * 24 - 2; assertTrue(\"hoursUntil should be between \" + (expectedHours - 1) + \" and \" + expectedHours, expectedHours - 1 <= floorHoursUntil && floorHoursUntil <= expectedHours); } for (int dayIndex = 3; dayIndex < 7; dayIndex++) { int nthHour = dayIndex * 24 + 8; int secondsUntil = _esSchemaService.getNumSecondsUntilNthHourOfWeek(nthHour, wedAtSix); int floorHoursUntil = secondsUntil / 60 / 60; int expectedHours = (dayIndex - 3) * 24 + 2; assertTrue(\"hoursUntil should be between \" + (expectedHours - 1) + \" and \" + expectedHours, expectedHours - 1 <= floorHoursUntil && floorHoursUntil <= expectedHours); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Parameter addParameter( final UnitOfWork transaction, final String parameterName ) throws KException { return RelationalModelFactory.createParameter( transaction, getRepository(), this, parameterName ); }### Assistant: @Test( expected = IllegalArgumentException.class ) public void shouldFailAddingNullParameterName() throws Exception { this.procedure.addParameter( getTransaction(), null ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public byte[] getResumeMarker() throws VError { return io.v.syncbase.internal.Database.GetResumeMarker(fullName, \"\"); }### Assistant: @Test public void getResumeMarker() { Id dbId = new Id(\"idp:a:angrybirds\", \"core_get_resume_marker\"); try { Database db = Service.database(dbId); db.create(anyDbPermissions()); BatchDatabase batchDb = db.beginBatch(null); byte[] marker = batchDb.getResumeMarker(); assertNotNull(marker); assertTrue(marker.length > 0); } catch (VError vError) { vError.printStackTrace(); fail(vError.toString()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FieldInfos dedupFieldInfos(FieldInfo[] infos) { FieldInfosKey key = new FieldInfosKey(infos); return this.infosCache.computeIfAbsent(key, (FieldInfosKey k) -> new FieldInfos(k.infos)); }### Assistant: @Test public void testDense() throws NoSuchFieldException, IllegalAccessException { FieldInfo[] infosArray = makeInfosArray(100); FieldInfos orig = new FieldInfos(infosArray); Collection<Object> values = extractValues(orig); assertSame(Collections.unmodifiableCollection(new TreeMap<String, Object>().values()).getClass(), values.getClass()); FieldInfoCache cache = new FieldInfoCache(); FieldInfos fixedFieldInfo = cache.dedupFieldInfos(infosArray); values = extractValues(fixedFieldInfo); assertSame(Collections.unmodifiableCollection(Collections.emptyList()).getClass(), values.getClass()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> Replacement<T> replaceIn(List<T> list) { return new Replacement<>(list); }### Assistant: @Test public void testReplaceAll() { List<String> list = Arrays.asList(foo, foo, bar); ListUtils.replaceIn(list) .replace(foo) .all() .with(bar); assertEquals(Arrays.asList(bar, bar, bar), list); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String componentFrom(final Class<?> aClass) { if (aClass.isAnnotationPresent(ServiceComponent.class)) { return aClass.getAnnotation(ServiceComponent.class).value(); } else if (aClass.isAnnotationPresent(Adapter.class)) { return aClass.getAnnotation(Adapter.class).value(); } else if (aClass.isAnnotationPresent(FrameworkComponent.class)) { return aClass.getAnnotation(FrameworkComponent.class).value(); } else if (aClass.isAnnotationPresent(CustomServiceComponent.class)) { return aClass.getAnnotation(CustomServiceComponent.class).value(); } else if (aClass.isAnnotationPresent(CustomAdapter.class)) { return aClass.getAnnotation(CustomAdapter.class).value(); } else if (aClass.isAnnotationPresent(DirectAdapter.class)) { return aClass.getAnnotation(DirectAdapter.class).value(); } else { throw new IllegalStateException(format(\"No annotation found to define component for class %s\", aClass)); } }### Assistant: @Test public void shouldReturnFieldLevelFrameworkComponent() throws NoSuchFieldException { assertThat(componentNameExtractor.componentFrom(injectionPointWith( FrameworkComponentFieldLevelAnnotation.class.getDeclaredField(FIELD_NAME))), equalTo(\"CUSTOM_NAME_BCD\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right) { CheckEqualSizePreprocessor equalSize = new CheckEqualSizePreprocessor(left, right); equalSize.process(); equalSize = null; PAEMetric metric = new PAEMetric(new SRGBColorConverter(new ConvenientBufferedImageWrapper(left)), new SRGBColorConverter(new ConvenientBufferedImageWrapper(right)), new Point(0, 0), new Point(left.getWidth(), left.getHeight())); return metric.execute(); }### Assistant: @Test public void evaluateTest_equal_solid9924cd() { BufferedImage left = BufferedImageHelper.createSolidImage(new Color(153, 36, 205)); BufferedImage right = BufferedImageHelper.createSolidImage(new Color(153, 36, 205)); PaeQa paeQa = new PaeQa(); TransientOperation<Float, StaticColor> op = paeQa.evaluate(left, right); checkOperationEqual(op, 0.0f); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Document parser(String content) { if (content == null || content.length() == 0) return Document.builder().build(); if (HtmlDocumentParser.isHtml(content)) { return HtmlDocumentParser.parse(content); } else { return new DocumentParser(content).parse(); } }### Assistant: @Test public void multilineBullets() { final String content = \"\" + \"This option causes rsync to set the group of the destination file to be the\\n\" + \"same as the source file. \" + \" - If the receiving program is not running as the super-user\\n\" + \" only groups that the invoking user on the receiving\\n\" + \" side is a member of will be preserved.\\n\" + \" - Without this option, the group is set to the\\n\" + \" default group of the invok- ing user on the receiving side.\\n\" + \"\\n\" + \"The preservation of group information will associate matching names by default, but\\n\" + \"may fall back to using the ID number in some circumstances (see also the --numeric-ids\\n\" + \"option for a full discussion).\"; final Document document = DocumentParser.parser(content); final String actual = Join.join(\"\\n\", document.elements); assertEquals(\"\" + \"Paragraph{content='This option causes rsync to set the group \" + \"of the destination file to be the same as the source file. - If \" + \"the receiving program is not running as the super-user only groups\" + \" that the invoking user on the receiving side is a member of will \" + \"be preserved.'}\\n\" + \"Bullet{content='Without this option, the group is set to the default \" + \"group of the invok- ing user on the receiving side.'}\\n\" + \"Paragraph{content='The preservation of group information will associate \" + \"matching names by default, but may fall back to using the ID number in \" + \"some circumstances (see also the --numeric-ids option for a full \" + \"discussion).'}\", actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Subscribe @AllowConcurrentEvents public void onAmbariEvent(HostComponentVersionAdvertisedEvent event) { LOG.debug(\"Received event {}\", event); Cluster cluster = event.getCluster(); ServiceComponentHost sch = event.getServiceComponentHost(); String newVersion = event.getVersion(); if (StringUtils.isEmpty(newVersion)) { return; } m_stackVersionLock.lock(); if (null != event.getRepositoryVersionId() && null == cluster.getUpgradeInProgress()) { RepositoryVersionEntity rve = repositoryVersionDAO.findByPK(event.getRepositoryVersionId()); if (null != rve) { String currentRepoVersion = rve.getVersion(); if (!StringUtils.equals(currentRepoVersion, newVersion)) { rve.setVersion(newVersion); repositoryVersionDAO.merge(rve); } } } try { AmbariMetaInfo metaInfo = ambariMetaInfo.get(); ComponentInfo componentInfo = metaInfo.getComponent(cluster.getDesiredStackVersion().getStackName(), cluster.getDesiredStackVersion().getStackVersion(), sch.getServiceName(), sch.getServiceComponentName()); ServiceComponent sc = cluster.getService(sch.getServiceName()).getServiceComponent(sch.getServiceComponentName()); if (componentInfo.isVersionAdvertised() && StringUtils.isNotBlank(newVersion) && !UNKNOWN_VERSION.equalsIgnoreCase(newVersion)) { processComponentAdvertisedVersion(cluster, sch, newVersion, sc); } else if(!sc.isVersionAdvertised() && StringUtils.isNotBlank(newVersion) && !UNKNOWN_VERSION.equalsIgnoreCase(newVersion)) { LOG.debug(\"ServiceComponent {} doesn't advertise version, \" + \"however ServiceHostComponent {} on host {} advertised version as {}. Skipping version update\", sc.getName(), sch.getServiceComponentName(), sch.getHostName(), newVersion); } else { if (UNKNOWN_VERSION.equals(sc.getDesiredVersion())) { processUnknownDesiredVersion(cluster, sc, sch, newVersion); } else { processComponentAdvertisedVersion(cluster, sch, newVersion, sc); } } } catch (Exception e) { LOG.error( \"Unable to propagate version for ServiceHostComponent on component: {}, host: {}. Error: {}\", sch.getServiceComponentName(), sch.getHostName(), e.getMessage()); } finally { m_stackVersionLock.unlock(); } }### Assistant: @Test public void testRepositoryVersionNotSetDuringUpgrade() throws Exception { expect(cluster.getUpgradeInProgress()).andReturn(createNiceMock(UpgradeEntity.class)); RepositoryVersionDAO dao = createStrictMock(RepositoryVersionDAO.class); replayAll(); Field field = StackVersionListener.class.getDeclaredField(\"repositoryVersionDAO\"); field.setAccessible(true); field.set(listener, dao); HostComponentVersionAdvertisedEvent event = new HostComponentVersionAdvertisedEvent(cluster, sch, VALID_NEW_VERSION, 1L); Assert.assertNotNull(event.getRepositoryVersionId()); listener.onAmbariEvent(event); verifyAll(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public RequestingServiceProvider getProviderByEntityID(String entityID) { return allProviders.get(entityID); }### Assistant: @Test void testTwoMetadataFiles() throws CertificateException, URISyntaxException, FileNotFoundException { URL metadataDirURL = this.getClass().getResource(\"/twoMetadataFiles\"); Mockito.when(mockConfigHolder.getProviderConfigDir()).thenReturn(new File(metadataDirURL.toURI())); URL sigCertURL = this.getClass().getResource(\"/twoMetadataFiles/sigCert.crt\"); Mockito.when(mockConfigHolder.getMetadataSignatureCert()) .thenReturn(readCertificate(new File(sigCertURL.toURI()))); ServiceProviderConfig config = new ServiceProviderConfig(mockConfigHolder); Assertions.assertNotNull(config.getProviderByEntityID(\"https: \"First metadata expected\"); Assertions.assertNotNull(config.getProviderByEntityID(\"https: \"Second metadata expected\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public JobStatus getJobStatus(List<String> id) { String idString = toUniqueString(id); JobStatus status = this.cache.get(idString); if (status == null) { status = maybeLoadStatus(id, idString); } return status == NOSTATUS ? null : status; }### Assistant: @Test void getJobStatusWithNullId() { JobStatus jobStatus = this.store.getJobStatus(null); assertNotNull(jobStatus); assertNull(jobStatus.getRequest().getId()); assertEquals(JobStatus.State.FINISHED, jobStatus.getState()); assertSame(jobStatus, this.store.getJobStatus(null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> Serializer from(T object) { return from(object, null); }### Assistant: @Test public void shouldExcludeAllThanIncludeAndSerialize() { String expectedResult = \"{\\\"order\\\":{\\\"price\\\":15.0}}\"; Order order = new Order(new Client(\"nykolas lima\"), 15.0, \"gift bags, please\"); serialization.from(order).excludeAll().include(\"price\").serialize(); assertThat(result(), is(equalTo(expectedResult))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void addTopMessage(Forum forum, Message topMessage, Identity creator, PublishEventTO publishEventTO) { topMessage.setForum(forum); topMessage.setParent(null); topMessage.setThreadtop(null); topMessage.setCreator(creator); forumDao.saveMessage(topMessage); publishEventTO.setSourceEntryId(topMessage.getKey().toString()); publishEvent(publishEventTO); }### Assistant: @Test(expected = RuntimeException.class) public void addTopMessageWithNullMessage() { Forum realForum = new ForumImpl(); Identity initiatorIdentity = mock(Identity.class); Message firstMessage = null; publishEventTO = createPublishEventTO(initiatorIdentity); forumService.addTopMessage(realForum, firstMessage, initiatorIdentity, publishEventTO); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected <T> Criterion translate(NativeExpression e, Class<T> entityClass) { Class<?> expressionClass = e.getExpressionClass(); if (expressionClass == String.class) { return Restrictions.sqlRestriction(\"(\" + e.getExpression().toString() + \")\"); } else if (Criterion.class.isAssignableFrom(expressionClass)) { return (Criterion) e.getExpression(); } else { throw unsupported(e); } }### Assistant: @Test public void translate_NativeExpression_String() { String query = \"some SQL query\"; NativeExpression e = new NativeExpression(String.class, query); Criterion expected = Restrictions.sqlRestriction(\"(\" + query + \")\"); Criterion actual = translator.translate(e, Void.class); assertEquals(expected.toString(), actual.toString()); assertEquivalent(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<BaseDimensionalItemObject> slice( final WebOptions options, List<BaseDimensionalItemObject> dimensionalItems ) { state( options.getPage() > 0, \"Current page must be greater than zero.\" ); state( options.getPageSize() > 0, \"Page size must be greater than zero.\" ); if ( options.hasPaging() && isNotEmpty( dimensionalItems ) ) { final int currentPage = options.getPage(); final int totalOfElements = dimensionalItems.size(); final int maxElementsPerPage = options.getPageSize(); final Pager pager = new Pager( currentPage, totalOfElements, maxElementsPerPage ); final int currentElementIndex = pager.getOffset(); final boolean hasMorePages = (totalOfElements - currentElementIndex) > pager.getPageSize(); if ( hasMorePages ) { final int nextElementsWindow = pager.getPageSize() * pager.getPage(); dimensionalItems = dimensionalItems.subList( currentElementIndex, nextElementsWindow ); } else { dimensionalItems = dimensionalItems.subList( pager.getOffset(), totalOfElements ); } } return dimensionalItems; }### Assistant: @Test public void testSliceWhenLastPage() { final int pageSize = 5; final int lastPage = 3; final int totalOfItems = 13; final WebOptions theWebOptions = mockWebOptions( pageSize, lastPage ); final List<BaseDimensionalItemObject> anyDimensionalItems = mockDimensionalItems( totalOfItems ); final List<BaseDimensionalItemObject> resultingList = slice( theWebOptions, anyDimensionalItems ); assertThat( resultingList, hasSize( 3 ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void writeDouble(double v) throws IOException { output.writeDouble(v); }### Assistant: @Test public void testWriteDouble() throws IOException { this.fstObjectOutput.writeDouble(-1.66d); this.flushToInput(); Double result = this.fstObjectInput.readDouble(); assertThat(result, is(-1.66d)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public MonitorBuilder version(String version) { this.version = version; return getThis(); }### Assistant: @Test void version() { MonitorBuilder builder = new MonitorBuilder(); builder.version(\"version\"); Assertions.assertEquals(\"version\", builder.build().getVersion()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public float getFrequencyScore() { return whiteListed ? 1f : frequencyData.getScore(); }### Assistant: @Test public void testGetFrequencyScoreNoFrequencyDataSet() { assertThat(instance.getFrequencyScore(), equalTo(1f)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Integer> calculate(int[] moneys, int billAmount) { validateInputData(moneys, billAmount); List<Integer> change = new LinkedList<Integer>(); while (billAmount > 0 && moneys.length > 0) { for (int i = moneys.length - 1; i >= 0; i--) { if (billAmount - moneys[i] >= 0) { change.add(moneys[i]); billAmount -= moneys[i]; break; } } } return change; }### Assistant: @Test(expected = IllegalArgumentException.class) public void shouldNotAcceptEmptyArrayOfMoneys() { returnChange.calculate(new int[0], 7); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> OnSubscribeFunc<T> synchronize(Observable<? extends T> observable) { return new Synchronize<T>(observable, null); }### Assistant: @Test public void testOnNextAfterUnSubscribe() { TestObservable t = new TestObservable(null); Observable<String> st = Observable.create(synchronize(Observable.create(t))); @SuppressWarnings(\"unchecked\") Observer<String> w = mock(Observer.class); Subscription ws = st.subscribe(w); t.sendOnNext(\"one\"); ws.unsubscribe(); t.sendOnNext(\"two\"); verify(w, times(1)).onNext(\"one\"); verify(w, Mockito.never()).onNext(\"two\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void query() throws QueryException { logger.info(\"[\" + projectId + \"] Starting Branches insertion\"); Commit commit = retrieveHeadCommit(); List<Branch> branches = buildBranchTree(null, commit); for (Branch branch : branches) { persistBranch(branch); } persistence.commit(); }### Assistant: @Test public void testNoMerge() throws QueryException, IOException { Commit A = new Commit(\"a\", 1); Commit B = new Commit(\"b\", 2, Collections.singletonList(A)); Commit C = new Commit(\"c\", 3, Collections.singletonList(B)); initializeHead(C); initializeMocks(A, B, C); getQuery().query(); debugBranchCommitInsertions(); verify(persistence, times(4)).addStatements(any()); verify(branchQueries).branchInsertionStatement(projectId, 0, null, null); verify(branchQueries).branchCommitInsertionQuery(projectId, 0, A.sha, 0); verify(branchQueries).branchCommitInsertionQuery(projectId, 0, B.sha, 1); verify(branchQueries).branchCommitInsertionQuery(projectId, 0, C.sha, 2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public BatchJobListResult resolveBatchJobResult(String[] args) { List<BatchJobListResult> resultList = systemDao.selectJobList( LIMIT_ONE_ROWBOUNDS, param); if (resultList == null || resultList.isEmpty()) { return null; } return resultList.get(0); }### Assistant: @Test public void testResolveBatchJobResult06() { when(((JobControlFinderImpl) jobControlFinder).systemDao .selectJobList(any(RowBounds.class), any(BatchJobListParam.class))).thenReturn( new ArrayList<BatchJobListResult>() { private static final long serialVersionUID = 1L; { add(new BatchJobListResult() { { setJobSequenceId(\"0000000001\"); } }); } }); BatchJobListResult batchJobListResult = jobControlFinder .resolveBatchJobResult(new String[]{\"0000000001\"}); assertEquals(\"0000000001\", batchJobListResult.getJobSequenceId()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DDMDataProviderResponse getData( DDMDataProviderRequest ddmDataProviderRequest) { Optional<Long> dataProviderInstanceIdOptional = ddmDataProviderRequest.getParameterOptional( \"dataProviderInstanceId\", String.class); long dataProviderInstanceId = 0; if (dataProviderInstanceIdOptional.isPresent()) { dataProviderInstanceId = GetterUtil.getLong( dataProviderInstanceIdOptional.get()); } DDMDataProviderResponse.Builder builder = DDMDataProviderResponse.Builder.newBuilder(); List<KeyValuePair> keyValuePairs = new ArrayList<>(); if (dataProviderInstanceId == 0) { return builder.withOutput( \"outputParameterNames\", keyValuePairs ).build(); } try { DDMDataProviderOutputParametersSettings[] ddmDataProviderOutputParametersSettings = getDDMDataProviderOutputParametersSettings( dataProviderInstanceId); for (DDMDataProviderOutputParametersSettings ddmDataProviderOutputParametersSetting : ddmDataProviderOutputParametersSettings) { keyValuePairs.add( new KeyValuePair( ddmDataProviderOutputParametersSetting. outputParameterId(), ddmDataProviderOutputParametersSetting. outputParameterName())); } } catch (Exception exception) { _log.error( String.format( \"Unable to get the output parameters for data provider \" + \"instance with id '%d'\", dataProviderInstanceId), exception); } return builder.withOutput( \"outputParameterNames\", keyValuePairs ).build(); }### Assistant: @Test public void testGetData() throws Exception { DDMDataProviderRequest.Builder builder = DDMDataProviderRequest.Builder.newBuilder(); DDMDataProviderRequest ddmDataProviderRequest = builder.withParameter( \"dataProviderInstanceId\", \"1\" ).build(); when( _ddmDataProviderInstanceService.getDataProviderInstance(1) ).thenReturn( _ddmDataProviderInstance ); when( _ddmDataProviderInstance.getType() ).thenReturn( \"rest\" ); when( _ddmDataProviderTracker.getDDMDataProvider(\"rest\") ).thenReturn( _ddmDataProvider ); when( _ddmDataProvider.getSettings() ).thenReturn( (Class)TestDDMDataProviderParameterSettings.class ); DDMForm ddmForm = DDMFormFactory.create(_ddmDataProvider.getSettings()); DDMFormValues ddmFormValues = DDMFormValuesTestUtil.createDDMFormValues( ddmForm); ddmFormValues.addDDMFormFieldValue( DDMFormValuesTestUtil.createUnlocalizedDDMFormFieldValue( \"url\", \"http: DDMFormFieldValue outputParamaters = DDMFormValuesTestUtil.createUnlocalizedDDMFormFieldValue( \"outputParameters\", StringPool.BLANK); ddmFormValues.addDDMFormFieldValue(outputParamaters); outputParamaters.addNestedDDMFormFieldValue( DDMFormValuesTestUtil.createUnlocalizedDDMFormFieldValue( \"outputParameterName\", \"Country Id\")); outputParamaters.addNestedDDMFormFieldValue( DDMFormValuesTestUtil.createUnlocalizedDDMFormFieldValue( \"outputParameterPath\", \"countryId\")); outputParamaters.addNestedDDMFormFieldValue( DDMFormValuesTestUtil.createUnlocalizedDDMFormFieldValue( \"outputParameterType\", \"[\\\"number\\\"]\")); String countryIdOutputParameterId = StringUtil.randomString(); outputParamaters.addNestedDDMFormFieldValue( DDMFormValuesTestUtil.createUnlocalizedDDMFormFieldValue( \"outputParameterId\", countryIdOutputParameterId)); outputParamaters = DDMFormValuesTestUtil.createUnlocalizedDDMFormFieldValue( \"outputParameters\", StringPool.BLANK); ddmFormValues.addDDMFormFieldValue(outputParamaters); outputParamaters.addNestedDDMFormFieldValue( DDMFormValuesTestUtil.createUnlocalizedDDMFormFieldValue( \"outputParameterName\", \"Country Name\")); outputParamaters.addNestedDDMFormFieldValue( DDMFormValuesTestUtil.createUnlocalizedDDMFormFieldValue( \"outputParameterPath\", \"countryName\")); outputParamaters.addNestedDDMFormFieldValue( DDMFormValuesTestUtil.createUnlocalizedDDMFormFieldValue( \"outputParameterType\", \"[\\\"string\\\"]\")); String countryNameOutputParameterId = StringUtil.randomString(); outputParamaters.addNestedDDMFormFieldValue( DDMFormValuesTestUtil.createUnlocalizedDDMFormFieldValue( \"outputParameterId\", countryNameOutputParameterId)); DDMFormValuesDeserializerDeserializeResponse ddmFormValuesDeserializerDeserializeResponse = DDMFormValuesDeserializerDeserializeResponse.Builder.newBuilder( ddmFormValues ).build(); when( _ddmFormValuesDeserializer.deserialize( Matchers.any(DDMFormValuesDeserializerDeserializeRequest.class)) ).thenReturn( ddmFormValuesDeserializerDeserializeResponse ); DDMDataProviderResponse ddmDataProviderResponse = _ddmDataProviderInstanceOutputParametersDataProvider.getData( ddmDataProviderRequest); Optional<List<KeyValuePair>> outputParameterNamesOptional = ddmDataProviderResponse.getOutputOptional( \"outputParameterNames\", List.class); Assert.assertTrue(outputParameterNamesOptional.isPresent()); List<KeyValuePair> keyValuePairs = new ArrayList<KeyValuePair>() { { add(new KeyValuePair(countryIdOutputParameterId, \"Country Id\")); add( new KeyValuePair( countryNameOutputParameterId, \"Country Name\")); } }; Assert.assertEquals( keyValuePairs.toString(), keyValuePairs, outputParameterNamesOptional.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Nulls nulls() throws NullfreeException { try (final InputStream stream = source.execute()) { final List<Null> result = new ArrayList<>(); final ParseResult<CompilationUnit> parsed = parser.parse(stream); if (parsed.isSuccessful()) { final Optional<CompilationUnit> optionalUnit = parsed.getResult(); if (optionalUnit.isPresent()) { for (NullLiteralExpr nullLiteralExpr : optionalUnit.get().findAll(NullLiteralExpr.class)) { result.add(new JavaNull(nullLiteralExpr)); } } } else { final StringBuilder problems = new StringBuilder(); for (final Problem problem : parsed.getProblems()) { problems.append(problem.toString()); problems.append(\"\\n\"); } throw new NullfreeException( String.format( \"Can not count nulls in: '%s'. \\nPlease, fix java syntax errors: \\n%s\", descriptor, problems.toString() ) ); } return new SimpleNulls(result); } catch (final IOException e) { throw new NullfreeException( String.format( \"Can not count nulls in: '%s'.\", descriptor ), e ); } catch (ParseProblemException e) { throw new NullfreeException( String.format( \"Can not count nulls in: '%s'. \\nPlease, fix java syntax errors and try again.\", descriptor ), e ); } }### Assistant: @Test public void oneNullLiteralFromFile() throws Exception { final File source = folder.newFile(); try (final PrintWriter writer = new PrintWriter(source)) { writer.println(\"class A {\"); writer.println(\" private final String a = null;\"); writer.println(\"}\"); } Assert.assertThat( new JavaSourceFile(source).nulls().asList().size(), IsEqual.equalTo(1) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ApiOperation(value = \"Exports *Bid Timeline* dashboard in Excel format.\") @RequestMapping(value = \"/api/ocds/bidTimelineExcelChart\", method = {RequestMethod.GET, RequestMethod.POST}) public void bidTimelineExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter, final HttpServletResponse response) throws IOException { final String chartTitle = translationService.getValue(filter.getLanguage(), \"charts:bidPeriod:title\"); final List<Document> averageAwardPeriod = averageTenderAndAwardPeriodsController.averageAwardPeriod(filter); final List<Document> averageTenderPeriod = averageTenderAndAwardPeriodsController.averageTenderPeriod(filter); final List<?> categories = excelChartHelper.getCategoriesFromDBObject(getExportYearMonthXAxis(filter), averageTenderPeriod, averageAwardPeriod); final List<List<? extends Number>> values = new ArrayList<>(); final List<Number> valueTenders = excelChartHelper.getValuesFromDBObject(averageTenderPeriod, categories, getExportYearMonthXAxis(filter), AverageTenderAndAwardPeriodsController.Keys.AVERAGE_TENDER_DAYS); final List<Number> valueAwards = excelChartHelper.getValuesFromDBObject(averageAwardPeriod, categories, getExportYearMonthXAxis(filter), AverageTenderAndAwardPeriodsController.Keys.AVERAGE_AWARD_DAYS); if (!valueTenders.isEmpty()) { values.add(valueTenders); } if (!valueAwards.isEmpty()) { values.add(valueAwards); } final List<String> seriesTitle; if (!values.isEmpty()) { seriesTitle = Arrays.asList( translationService.getValue(filter.getLanguage(), \"charts:bidPeriod:traces:tender\"), translationService.getValue(filter.getLanguage(), \"charts:bidPeriod:traces:award\")); } else { seriesTitle = new ArrayList<>(); } response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"); response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + chartTitle + \".xlsx\"); response.getOutputStream().write( excelChartGenerator.getExcelChart( ChartType.stackedbar, chartTitle, seriesTitle, categories, values)); }### Assistant: @Test public void bidTimelineExcelChart() throws Exception { LangYearFilterPagingRequest filter = getLangYearFilterMockRequest(); averageTenderAndAwardsExcelController.bidTimelineExcelChart( filter, mockHttpServletResponse); final byte[] responseOutput = mockHttpServletResponse.getContentAsByteArray(); final Workbook workbook = new XSSFWorkbook(new ByteArrayInputStream(responseOutput)); Assert.assertNotNull(workbook); final Sheet sheet = workbook.getSheet(ChartType.stackedbar.toString()); Assert.assertNotNull(\"check chart type, sheet name should be the same as the type\", sheet); final XSSFDrawing drawing = (XSSFDrawing) sheet.getDrawingPatriarch(); final List<XSSFChart> charts = drawing.getCharts(); Assert.assertEquals(\"number of charts\", 1, charts.size()); final XSSFChart chart = charts.get(0); Assert.assertEquals(\"chart title\", translationService.getValue(filter.getLanguage(),\"charts:bidPeriod:title\"), chart.getTitle().getString()); final List<? extends XSSFChartAxis> axis = chart.getAxis(); Assert.assertEquals(\"number of axis\", 2, axis.size()); final CTChart ctChart = chart.getCTChart(); Assert.assertEquals(\"Check if we have 1 bar chart\", 1, ctChart.getPlotArea().getBarChartArray().length); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static ReferenceObservation createReferenceObservation(String referenceSensorName, SamplingPoint samplingPoint, DataFile datafile) { final ReferenceObservation r = new ReferenceObservation(); r.setName(samplingPoint.getDatasetName()); r.setSensor(referenceSensorName); final PGgeometry location = GeometryUtil.createPointGeometry(samplingPoint.getReferenceLon(), samplingPoint.getReferenceLat()); r.setLocation(location); r.setPoint(location); final Date time = new Date(samplingPoint.getReferenceTime()); r.setTime(time); if (samplingPoint.isInsitu()) { r.setTimeRadius(Math.abs(samplingPoint.getReferenceTime() - samplingPoint.getTime()) / 1000.0); } else { r.setTimeRadius(0.0); } r.setDatafile(datafile); r.setRecordNo(0); r.setDataset(samplingPoint.getInsituDatasetId().getValue()); r.setReferenceFlag(Constants.MATCHUP_REFERENCE_FLAG_UNDEFINED); return r; }### Assistant: @Test public void testCreateReferenceObservation_sobolPoint() { final SamplingPoint samplingPoint = new SamplingPoint(); samplingPoint.setIndex(77845); samplingPoint.setDatasetName(\"77845\"); samplingPoint.setReferenceLon(22.2); samplingPoint.setReferenceLat(33.3); samplingPoint.setReferenceTime(776636483L); samplingPoint.setInsituDatasetId(InsituDatasetId.dummy_diurnal_variability); final DataFile datafile = new DataFile(); final ReferenceObservation referenceObservation = MatchupGenerator.createReferenceObservation(\"Sobol\", samplingPoint, datafile); assertNotNull(referenceObservation); assertEquals(\"77845\", referenceObservation.getName()); assertEquals(\"Sobol\", referenceObservation.getSensor()); final PGgeometry location = referenceObservation.getLocation(); final PGgeometry point = referenceObservation.getPoint(); assertSame(location, point); final Point locationPoint = location.getGeometry().getPoint(0); assertEquals(22.2, locationPoint.getX(), 1e-8); assertEquals(33.3, locationPoint.getY(), 1e-8); assertEquals(776636483L, referenceObservation.getTime().getTime()); assertEquals(0.0, referenceObservation.getTimeRadius(), 1e-8); assertSame(datafile, referenceObservation.getDatafile()); assertEquals(0, referenceObservation.getRecordNo()); assertEquals(InsituDatasetId.dummy_diurnal_variability.getValue(), referenceObservation.getDataset()); assertEquals(Constants.MATCHUP_REFERENCE_FLAG_UNDEFINED, referenceObservation.getReferenceFlag()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getUNION() { return \"union\"; }### Assistant: @Test public void testGetUNION() { String actual = table.getUNION(); String expected = \"union\"; assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isAnyAnnotationPresent(Field field, Collection<Class<? extends Annotation>> annotations) { for (Class<? extends Annotation> annotation : annotations) { if (field.isAnnotationPresent(annotation)) { return true; } } return false; }### Assistant: @Test public void testIsAnyAnnotationPresent() { Field field = prop(\"testProp4\"); boolean result1 = ReflectUtil.isAnyAnnotationPresent(field, Arrays.asList(Spy.class, TestQualifierAnnotation.class, Mock.class)); boolean result2 = ReflectUtil.isAnyAnnotationPresent(field, Arrays.asList(Spy.class, Mock.class)); boolean result3 = ReflectUtil.isAnyAnnotationPresent(field, Arrays.asList(Mock.class, TestSimpleAnnotation.class)); assertThat(result1).isTrue(); assertThat(result2).isFalse(); assertThat(result3).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public GetMap parse( XMLStreamReader getMap ) throws OWSException, XMLStreamException { Version version = forwardToStartAndDetermineVersion( getMap ); if ( !WMSConstants.VERSION_130.equals( version ) ) throw new InvalidParameterException( \"Version \" + version + \" is not supported (yet).\" ); try { return parse130( getMap ); } catch ( UnknownCRSException e ) { throw new OWSException( e.getMessage(), OWSException.NO_APPLICABLE_CODE ); } catch ( ParseException e ) { throw new OWSException( e.getMessage(), OWSException.NO_APPLICABLE_CODE ); } }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void testParse_elevationInterval() throws Exception { GetMapParser getMapXMLAdapter = new GetMapParser(); XMLStreamReader xmlStreamReader = createXmlStreamReader( \"wms-1.3.0-GetMap_elevationInterval.xml\" ); GetMap getMap = getMapXMLAdapter.parse( xmlStreamReader ); HashMap<String, List<?>> dimensions = getMap.getDimensions(); assertThat( dimensions.size(), is( 1 ) ); List<DimensionInterval<Double, Double, Double>> elevationValues = (List<DimensionInterval<Double, Double, Double>>) dimensions.get( \"elevation\" ); assertThat( elevationValues.size(), is( 1 ) ); assertThat( elevationValues.get( 0 ).min, is( -5d ) ); assertThat( elevationValues.get( 0 ).max, is( 5d ) ); assertThat( elevationValues.get( 0 ).res, is( 0d ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ConfigObserver onStringListValue(String key, String defaultValue, ConfigValueListener<List<String>> listener) { return onSingleConfigValue(key, ConfigObserver::parseStringList, defaultValue != null ? parseStringList(defaultValue) : null, listener); }### Assistant: @Test public void shouldReadStringList() { List<String> list = new ArrayList<>(); observer.onStringListValue(\"prop\", \"foo,bar\", l -> { list.clear(); list.addAll(l); }); assertThat(list).containsExactly(\"foo\", \"bar\"); writeConfigLine(\"prop=a, b ,c\"); assertThat(list).containsExactly(\"a\", \"b\", \"c\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Boolean apply(String expression, Object parameter) { if (!expression.contains(\"#value#\")) { return false; } Object[] values = null; if (isArray(parameter)) { values = (Object[])parameter; if (values.length == 0) { return false; } } else { values = new Object[] {parameter}; } return Stream.of( values ).allMatch( value -> accept(expression, value) ); }### Assistant: @Test public void testInvalidExpression1() throws Exception { Boolean result = (Boolean)_allFunction.apply(\"#invalid# > 10\", 11); Assert.assertFalse(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Collection<Attribute> encode() { Vector<Attribute> list = new Vector(); list.add(sdpFactory.createAttribute(\"rtpmap\", toSdp())); if (getEncoding().equalsIgnoreCase(\"telephone-event\")) { list.add(sdpFactory.createAttribute(\"fmtp\", payloadType + \" 0-15\")); } else if (getEncoding().equalsIgnoreCase(\"g729\")) { list.add(sdpFactory.createAttribute(\"fmtp\", payloadType + \" annex=b\")); } return list; }### Assistant: @Test public void testEncodeG729() throws Exception { Collection<Attribute> attributes = AVProfile.G729.encode(); assertEquals(2, attributes.size()); Attribute rtpmap = getAttribute(attributes, 0); assertEquals(\"rtpmap\",rtpmap.getName()); assertEquals(\"18 g729/8000\",rtpmap.getValue()); Attribute fmtp = getAttribute(attributes, 1); assertEquals(\"fmtp\",fmtp.getName()); assertEquals(\"18 annex=b\",fmtp.getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ReplyMessage run(int argc, byte[][] argv) throws Exception { if (argc != 2) { return ErrorMessage.WrongArgcMessage; } String val = map.remove(new String(argv[1], Protocol.KEYCAFE_CHARSET)); if (val != null) { return new BulkStringMessage(val); } else { return StringMessage.OkMessage; } }### Assistant: @Test public void test2() throws Exception { byte[][] args = new byte[1][]; args[0] = new byte[]{(byte) Command.DELETE.ordinal()}; DeleteCommand d = new DeleteCommand(null); ReplyMessage reply = d.run(1, args); assertEquals(reply, ErrorMessage.WrongArgcMessage); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public org.modeshape.jcr.api.query.Query createQuery( String statement, String language ) throws InvalidQueryException, RepositoryException { CheckArg.isNotNull(statement, \"statement\"); CheckArg.isNotNull(language, \"language\"); return createQuery(statement, language, null, null); }### Assistant: @Test public void shouldBeAbleToCreateAndExecuteJcrSql2QueryToFindAllCarsUnderHybrid() throws RepositoryException { String sql = \"SELECT car.[car:maker], car.[car:model], car.[car:year], car.[car:msrp], car.[jcr:path] FROM [car:Car] AS car WHERE PATH(car) LIKE '%/Hybrid/%' ORDER BY [car:model]\"; Query query = session.getWorkspace().getQueryManager().createQuery(sql, Query.JCR_SQL2); QueryResult result = query.execute(); String[] columnNames = {\"car:maker\", \"car:model\", \"car:year\", \"car:msrp\", \"jcr:path\"}; validateQuery().rowCount(3).hasColumns(columnNames).onEachRow(new Predicate() { @Override public void validate( int rowNumber, Row row ) throws RepositoryException { if (rowNumber == 1) { assertThat(row.getValue(\"car:model\").getString(), is(\"Altima\")); assertThat(row.getValue(\"car:msrp\").getString(), is(\"$18,260\")); assertThat(row.getValue(\"car:year\").getLong(), is(2008L)); } else if (rowNumber == 2) { assertThat(row.getValue(\"car:model\").getString(), is(\"Highlander\")); assertThat(row.getValue(\"car:msrp\").getString(), is(\"$34,200\")); assertThat(row.getValue(\"car:year\").getLong(), is(2008L)); } else if (rowNumber == 3) { assertThat(row.getValue(\"car:model\").getString(), is(\"Prius\")); assertThat(row.getValue(\"car:msrp\").getString(), is(\"$21,500\")); assertThat(row.getValue(\"car:year\").getLong(), is(2008L)); } } }).validate(query, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void event(Workflow workflow, Trigger trigger, Instant instant, TriggerParameters parameters) { final var configuration = workflow.configuration(); if (configuration.flyteExecConf().isEmpty() && configuration.dockerImage().isEmpty()) { LOG.warn(\"{} has no execution execution info, skipping\", workflow.id()); return; } final var parameter = toParameter(configuration.schedule(), instant); final var workflowInstance = WorkflowInstance.create(workflow.id(), parameter); try { stateManager.trigger(workflowInstance, trigger, parameters); } catch (IsClosedException isClosedException) { LOG.warn(\"State receiver is closed when processing workflow {} for trigger {} at {}\", workflow, trigger, instant, isClosedException); throw new RuntimeException(isClosedException); } }### Assistant: @Test public void shouldInjectTriggerExecutionEventWithNaturalTrigger() throws Exception { WorkflowConfiguration workflowConfiguration = dockerWorkflowConfiguration(HOURS); Workflow workflow = Workflow.create(\"id\", workflowConfiguration); trigger.event(workflow, NATURAL_TRIGGER, TIME, PARAMETERS); WorkflowInstance expectedInstance = WorkflowInstance.create(workflow.id(), \"2016-01-18T09\"); verify(stateManager).trigger(expectedInstance, Trigger.natural(), PARAMETERS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String compileFile(String inputFileName, String includeDirName) throws RubySassCompilerException { return compileFile(inputFileName, includeDirName, false, \"\"); }### Assistant: @Test public void testCompileFileWithSourceMap() throws Exception { try (SassCompiler sassCompiler = new RubySassCompiler()) { File inputDir = new File( \"../sass-compiler-jni/test-classes/unit/com/liferay/sass\" + \"/compiler/jni/internal/dependencies/sass-spec/14_imports\"); File sourceMapFile = new File( inputDir, \".sass-cache/input.css.map\"); sourceMapFile.deleteOnExit(); Assert.assertFalse(sourceMapFile.exists()); File inputFile = new File(inputDir, \"input.scss\"); String actualOutput = sassCompiler.compileFile( inputFile.getCanonicalPath(), \"\", true, sourceMapFile.getCanonicalPath()); Assert.assertNotNull(actualOutput); Assert.assertTrue(sourceMapFile.exists()); File expectedOutputFile = new File( \"../sass-compiler-jni/test-classes/unit/com/liferay/sass\" + \"/compiler/jni/internal/dependencies/sourcemap\", \"expected_output_custom_source_map.css\"); String expectedOutput = read(expectedOutputFile.toPath()); Assert.assertEquals( stripNewLines(expectedOutput), stripNewLines(actualOutput)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ConfigurableResource parseResourceConfigValue(String value) throws AllocationConfigurationException { return parseResourceConfigValue(value, Long.MAX_VALUE); }### Assistant: @Test public void testNoUnits() throws Exception { String value = \"1024\"; expectUnparsableResource(value); parseResourceConfigValue(value); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<Node, Patch<?>> diff(Node left, Node right, XMLDiffConfiguration config) throws DiffException { Map<Node, Patch<?>> patches = new LinkedHashMap<>(); Patch<Node> rootPatch = new DefaultPatch<>(); if (areSimilar(left, right)) { if (left != null) { patches.putAll(diffSimilarNodes(left, right, config)); } } else if (left == null) { rootPatch.add(new InsertDelta<>(new DefaultChunk<>(-1, Collections.<Node>emptyList()), new DefaultChunk<>(XMLDiffUtils.getNodeIndex(right), Collections.singletonList(right)))); } else if (right == null) { rootPatch.add( new DeleteDelta<>(new DefaultChunk<>(XMLDiffUtils.getNodeIndex(left), Collections.singletonList(left)), new DefaultChunk<>(-1, Collections.<Node>emptyList()))); } else { rootPatch.add( new ChangeDelta<>(new DefaultChunk<>(XMLDiffUtils.getNodeIndex(left), Collections.singletonList(left)), new DefaultChunk<>(XMLDiffUtils.getNodeIndex(right), Collections.singletonList(right)))); } if (!rootPatch.isEmpty()) { patches.put(null, rootPatch); } return patches; }### Assistant: @Test void nonSimilarNodeInsert() throws Exception { Node text = this.document.getDocumentElement().getLastChild(); Map<Node, Patch<?>> patches = this.defaultXMLDiff.diff(null, text, this.config); assertEquals(1, patches.size()); Patch<?> patch = patches.get(null); assertEquals(1, patch.size()); Delta<?> delta = patch.get(0); assertEquals(Delta.Type.INSERT, delta.getType()); assertEquals(Collections.emptyList(), delta.getPrevious().getElements()); assertEquals(Collections.singletonList(text), delta.getNext().getElements()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static char[][] split( final char[] inputArray, final char split ) { char[][] results = new char[ 16 ][]; int resultIndex = 0; int startCurrentLineIndex = 0; int currentLineLength = 1; char c = 0; int index = 0; for (; index < inputArray.length; index++, currentLineLength++ ) { c = inputArray[ index ]; if ( c == split ) { if ( resultIndex == results.length ) { results = _grow( results ); } results[ resultIndex ] = Chr.copy( inputArray, startCurrentLineIndex, currentLineLength - 1 ); startCurrentLineIndex = index + 1; currentLineLength = 0; resultIndex++; } } if (c!=split) { if ( resultIndex == results.length ) { results = _grow( results ); } results[resultIndex] = Chr.copy( inputArray, startCurrentLineIndex, currentLineLength - 1); resultIndex++; } else if (index == inputArray.length) { } else { if ( resultIndex == results.length ) { results = _grow( results ); } results[ resultIndex ] = Chr.copy( inputArray, startCurrentLineIndex, inputArray.length - index - 1); resultIndex++; } int actualLength = resultIndex; if ( actualLength < results.length ) { final int newSize = results.length - actualLength; results = __shrink( results, newSize ); } return results; }### Assistant: @Test public void splitButOnly4_twoMiddleDelim() { String string = \"01__34_67_90\"; final char[][] split = CharScanner.split(string.toCharArray(), '_'); String one = new String(split[0]); ok |= one.equals(\"01\") || die(one); String two = new String(split[1]); ok |= two.equals(\"\") || die(two); String three = new String(split[2]); ok |= three.equals(\"34\") || die(three); String four = new String(split[3]); ok |= four.equals(\"67\") || die(four); String five = new String(split[4]); ok |= five.equals(\"90\") || die(five); ok |= split.length == 5 || die(\"Length is wrong size\", split.length); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final void handle(final T event, final SessionInfo sessionInfo) { try { if (!this.shouldNotify(event, sessionInfo)) { logger.debug(\"Will not notify.\"); } else { logger.debug(\"Notifying {}.\", event); handler.offer(createSubmission(event, sessionInfo)); } } catch (final Exception ex) { throw new IllegalStateException(\"Event processing failed.\", ex); } finally { try { finish(event, sessionInfo); } catch (final Exception ex) { logger.trace(\"Finisher failed.\", ex); } finally { logger.debug(\"Notified {}.\", event); } } }### Assistant: @Test void spamProtectionAvailable() throws Exception { final ConfigStorage cs = ConfigStorage .create(getClass().getResourceAsStream(\"notifications-enabled-spamless.cfg\")); final AbstractTargetHandler p = getHandler(cs); final TestingEmailingListener l = new TestingEmailingListener(p); l.handle(EVENT, SESSION); verify(p, times(1)).send(notNull(), notNull(), notNull(), notNull()); l.handle(EVENT, SESSION); verify(p, times(1)).send(notNull(), notNull(), notNull(), notNull()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Marshaller createMarshaller(Class<?> clazz) throws JAXBException { Marshaller marshaller = getContext(clazz).createMarshaller(); setMarshallerProperties(marshaller); return marshaller; }### Assistant: @Test public void buildsMarshallerWithSchemaLocationProperty() throws Exception { JAXBContextFactory factory = new JAXBContextFactory.Builder() .withMarshallerSchemaLocation(\"http: .build(); Marshaller marshaller = factory.createMarshaller(Object.class); assertEquals(\"http: marshaller.getProperty(Marshaller.JAXB_SCHEMA_LOCATION)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ConsumesComponent(Swagger2MarkupConverter.SwaggerContext context) { super(context); }### Assistant: @Test public void testConsumesComponent() throws URISyntaxException { List<String> consumes = new ArrayList<>(); consumes.add(\"application/json\"); consumes.add(\"application/xml\"); Swagger2MarkupConverter.SwaggerContext context = createContext(); MarkupDocBuilder markupDocBuilder = context.createMarkupDocBuilder(); markupDocBuilder = new ConsumesComponent(context).apply(markupDocBuilder, ConsumesComponent.parameters( consumes, OverviewDocument.SECTION_TITLE_LEVEL)); markupDocBuilder.writeToFileWithoutExtension(outputDirectory, StandardCharsets.UTF_8); Path expectedFile = getExpectedFile(COMPONENT_NAME); DiffUtils.assertThatFileIsEqual(expectedFile, outputDirectory, getReportName(COMPONENT_NAME)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Produces({ MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, MediaType.APPLICATION_XML + \"; \" + JettyUtils.UTF_8 }) public AppsInfo get(@Context HttpServletRequest req, @Context HttpServletResponse res) { return getApps(req, res, null, Collections.<String> emptySet(), null, null, null, null, null, null, null, null, null, Collections.<String> emptySet()); }### Assistant: @Test public void testMultipleContainers() throws Exception { ApplicationId appId = ApplicationId.newInstance(0, 1); ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1); WebResource r = resource(); ClientResponse response = r.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\") .path(appId.toString()).path(\"appattempts\") .path(appAttemptId.toString()).path(\"containers\") .queryParam(\"user.name\", USERS[round]) .accept(MediaType.APPLICATION_JSON).get(ClientResponse.class); if (round == 1) { assertResponseStatusCode(Status.FORBIDDEN, response.getStatusInfo()); return; } assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, response.getType().toString()); JSONObject json = response.getEntity(JSONObject.class); assertEquals(\"incorrect number of elements\", 1, json.length()); JSONObject containers = json.getJSONObject(\"containers\"); assertEquals(\"incorrect number of elements\", 1, containers.length()); JSONArray array = containers.getJSONArray(\"container\"); assertEquals(\"incorrect number of elements\", MAX_APPS, array.length()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Pattern first(String str) { if (str.length() == 1) { return first(str.charAt(0)); } return new Pattern() { @Override Match match(String input, int fromIndex) { int index = input.indexOf(str, fromIndex); return index >= 0 ? new Match(input, index, str.length()) : null; } @Override public String toString() { return \"first('\" + str + \"')\"; } }; }### Assistant: @Test public void toEnd_toString() { assertThat(first(\" }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isRemovalPending(String packageName, String version, long exportingBundle) throws IOException { if (packageName == null || packageName.length() < 1) { throw new IOException(\"Package name cannot be null or empty\"); } ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(packageName); if (exportedPackages != null) { Version ver = Version.parseVersion(version); for (ExportedPackage exportedPackage : exportedPackages) { if (exportedPackage.getVersion().equals(ver) && exportedPackage.getExportingBundle().getBundleId() == exportingBundle && exportedPackage.isRemovalPending()) { return true; } } } return false; }### Assistant: @Test public void testIsRemovalPending() throws IOException { ExportedPackage exported = Mockito.mock(ExportedPackage.class); Bundle expBundle = Mockito.mock(Bundle.class); Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion(\"1.0.0\")); Mockito.when(exported.isRemovalPending()).thenReturn(true); Mockito.when(exported.getExportingBundle()).thenReturn(expBundle); Mockito.when(expBundle.getBundleId()).thenReturn(Long.valueOf(2)); Mockito.when(admin.getExportedPackages(Mockito.anyString())).thenReturn(new ExportedPackage[]{exported}); boolean isRemoval = mbean.isRemovalPending(\"test\", \"1.0.0\", Long.valueOf(2)); Assert.assertTrue(isRemoval); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public byte get(int i) { if (i < 0 || i >= this.length) { throw new IndexOutOfBoundsException(); } return this.buffer.get(this.buffer.position() + i); }### Assistant: @Test(expected = IndexOutOfBoundsException.class) public void testGetIndexBeyondLength() throws IOException { final RollingBuffer b = new RollingBuffer(newChannel(new ByteArrayInputStream(new byte[2])), 1, 2); b.get(2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Completable replaceTask(Task oldTask, Task newTask) { return Observable.fromCallable((Callable<Statement>) () -> { String jobId = newTask.getJobId(); checkIfJobIsActive(jobId); String taskId = newTask.getId(); String taskJsonString = ObjectMappers.writeValueAsString(mapper, newTask); BatchStatement batchStatement = getArchiveTaskBatchStatement(oldTask); Statement insertTaskStatement = insertActiveTaskStatement.bind(taskId, taskJsonString); Statement insertTaskIdStatement = insertActiveTaskIdStatement.bind(jobId, taskId); batchStatement.add(insertTaskStatement); batchStatement.add(insertTaskIdStatement); return batchStatement; }).flatMap(this::execute).toCompletable(); }### Assistant: @Test public void testReplaceTask() { JobStore store = getJobStore(); Job<BatchJobExt> job = createBatchJobObject(); store.init().await(); store.storeJob(job).await(); Pair<List<Job<?>>, Integer> jobsAndErrors = store.retrieveJobs().toBlocking().first(); assertThat(jobsAndErrors.getLeft().get(0)).isEqualTo(job); Task firstTask = createTaskObject(job); store.storeTask(firstTask).await(); Task retrievedTask = store.retrieveTask(firstTask.getId()).toBlocking().first(); assertThat(firstTask).isEqualTo(retrievedTask); Task secondTask = createTaskObject(job); store.replaceTask(firstTask, secondTask).await(); Pair<List<Task>, Integer> tasks = store.retrieveTasksForJob(job.getId()).toBlocking().first(); assertThat(tasks.getLeft()).hasSize(1); assertThat(tasks.getRight()).isEqualTo(0); assertThat(tasks.getLeft().get(0)).isEqualTo(secondTask); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void set(double amount) { value.set(Double.doubleToLongBits(amount)); }### Assistant: @Test public void set() { AtomicDouble v = new AtomicDouble(13.0); v.set(42.0); Assert.assertEquals(42.0, v.get(), 1e-12); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public static Metadata peekId3Metadata(ExtractorInput input, boolean parseData) throws IOException, InterruptedException { @Nullable Id3Decoder.FramePredicate id3FramePredicate = parseData ? null : Id3Decoder.NO_FRAMES_PREDICATE; @Nullable Metadata id3Metadata = new Id3Peeker().peekId3Data(input, id3FramePredicate); return id3Metadata == null || id3Metadata.length() == 0 ? null : id3Metadata; }### Assistant: @Test public void peekId3Metadata_noId3Metadata_returnsNull() throws Exception { String fileWithoutId3Metadata = \"flac/bear.flac\"; ExtractorInput input = buildExtractorInput(fileWithoutId3Metadata); Metadata metadata = FlacMetadataReader.peekId3Metadata(input, true); assertThat(metadata).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected List<TNodeTemplate> getHostedOnSuccessorsOfNodeTemplate(TTopologyTemplate topologyTemplate, TNodeTemplate nodeTemplate) { List<TNodeTemplate> successorNodeTemplates = new ArrayList<>(); for (TRelationshipTemplate relationshipTemplate : ModelUtilities.getOutgoingRelationshipTemplates(topologyTemplate, nodeTemplate)) { if (getBasisRelationshipType(relationshipTemplate.getType()).getValidTarget() != null && getBasisRelationshipType(relationshipTemplate.getType()).getValidTarget().getTypeRef().getLocalPart().equalsIgnoreCase(\"Container\")) { successorNodeTemplates.add(ModelUtilities.getTargetNodeTemplateOfRelationshipTemplate(topologyTemplate, relationshipTemplate)); } } return successorNodeTemplates; }### Assistant: @Test public void testgetSuccessor() throws Exception { TNodeTemplate nt1 = topologyTemplate.getNodeTemplateOrRelationshipTemplate() .stream() .filter(x -> x instanceof TNodeTemplate) .map(TNodeTemplate.class::cast) .filter(nt -> nt.getId().equals(\"NT1\")) .findAny() .get(); TNodeTemplate nt2 = topologyTemplate.getNodeTemplateOrRelationshipTemplate() .stream() .filter(x -> x instanceof TNodeTemplate) .map(TNodeTemplate.class::cast) .filter(nt -> nt.getId().equals(\"NT1_3\")) .findAny() .get(); List<TNodeTemplate> expectedNodes = new ArrayList<>(); expectedNodes.add(nt2); assertEquals(expectedNodes, splitting.getHostedOnSuccessorsOfNodeTemplate(topologyTemplate2, nt1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public static File getAbsoluteFile(@NonNull File[] paths, @NonNull File file) { if (file.isAbsolute()) { return file; } for (File parent : paths) { File result = new File(parent, file.getPath()); if (result.exists()) { return result; } } return null; }### Assistant: @Test public void testGetAbsoluteFile() { assertEquals(ABSOLUTE_INSIDE, Files2.getAbsoluteFile(PATHS, RELATIVE_INSIDE)); assertNotSame(ABSOLUTE_INSIDE, Files2.getAbsoluteFile(PATHS, RELATIVE_INSIDE)); assertTrue(Files2.getAbsoluteFile(PATHS, RELATIVE_INSIDE).isAbsolute()); assertEquals(ABSOLUTE_DIR_INSIDE, Files2.getAbsoluteFile(PATHS, RELATIVE_DIR_INSIDE)); assertNotSame(ABSOLUTE_DIR_INSIDE, Files2.getAbsoluteFile(PATHS, RELATIVE_DIR_INSIDE)); assertTrue(Files2.getAbsoluteFile(PATHS, RELATIVE_DIR_INSIDE).isAbsolute()); assertEquals(ABSOLUTE_INSIDE, Files2.getAbsoluteFile(PATHS, ABSOLUTE_INSIDE)); assertSame(ABSOLUTE_INSIDE, Files2.getAbsoluteFile(PATHS, ABSOLUTE_INSIDE)); assertTrue(Files2.getAbsoluteFile(PATHS, ABSOLUTE_INSIDE).isAbsolute()); assertEquals(ABSOLUTE_DIR_INSIDE, Files2.getAbsoluteFile(PATHS, ABSOLUTE_DIR_INSIDE)); assertSame(ABSOLUTE_DIR_INSIDE, Files2.getAbsoluteFile(PATHS, ABSOLUTE_DIR_INSIDE)); assertTrue(Files2.getAbsoluteFile(PATHS, ABSOLUTE_DIR_INSIDE).isAbsolute()); assertNotEquals(ABSOLUTE_OUTSIDE, Files2.getAbsoluteFile(PATHS, RELATIVE_OUTSIDE)); assertNotSame(ABSOLUTE_OUTSIDE, Files2.getAbsoluteFile(PATHS, RELATIVE_OUTSIDE)); assertNull(Files2.getAbsoluteFile(PATHS, RELATIVE_OUTSIDE)); assertEquals(ABSOLUTE_OUTSIDE, Files2.getAbsoluteFile(PATHS, ABSOLUTE_OUTSIDE)); assertSame(ABSOLUTE_OUTSIDE, Files2.getAbsoluteFile(PATHS, ABSOLUTE_OUTSIDE)); assertTrue(Files2.getAbsoluteFile(PATHS, ABSOLUTE_OUTSIDE).isAbsolute()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void debug(String msg) { logger.debug(msg); }### Assistant: @Test public void testDebugWithException() { Logger mockLogger = mock(Logger.class); when(mockLogger.getName()).thenReturn(\"foo\"); InternalLogger logger = new Slf4JLogger(mockLogger); logger.debug(\"a\", e); verify(mockLogger).getName(); verify(mockLogger).debug(\"a\", e); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable static String route(ContainerRequest request) { ExtendedUriInfo uriInfo = request.getUriInfo(); List<UriTemplate> templates = uriInfo.getMatchedTemplates(); int templateCount = templates.size(); if (templateCount == 0) return \"\"; StringBuilder builder = null; String basePath = uriInfo.getBaseUri().getPath(); String result = null; if (!\"/\" .equals(basePath)) { result = basePath; } for (int i = templateCount - 1; i >= 0; i--) { String template = templates.get(i).getTemplate(); if (\"/\" .equals(template)) continue; if (builder != null) { builder.append(template); } else if (result != null) { builder = new StringBuilder(result).append(template); result = null; } else { result = template; } } return result != null ? result : builder != null ? builder.toString() : \"\"; }### Assistant: @Test public void route_noPath() { setBaseUri(\"/\"); when(uriInfo.getMatchedTemplates()).thenReturn(Arrays.asList( new PathTemplate(\"/eggs\") )); assertThat(SpanCustomizingApplicationEventListener.route(request)) .isEqualTo(\"/eggs\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FloatCondition isNearZero() { require(this.subject).isNotNull(); if (!(Math.abs(this.subject) < DEFAULT_FLOAT_EPSILON)) { DbcAssertionError.throwNew(new IllegalArgumentException(\"Expected float <\" + this.subject + \"> to be near zero with epsilon <\" + DEFAULT_FLOAT_EPSILON + \">\"), this.message); } return result(); }### Assistant: @Test public void isNearZero() throws Exception { FloatCondition condition = new FloatCondition(0.19e-07F); condition.isNearZero(); FloatCondition badCondition = new FloatCondition(2F); assertThatThrownBy(badCondition::isNearZero) .isInstanceOf(DbcAssertionError.class) .hasCauseInstanceOf(IllegalArgumentException.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String computeWarningMessageForAddLinkCheck(Direction startDirection, Direction endDirection) { if (startDirection.equals(Direction.OUTGOING) && endDirection.equals(Direction.INCOMING)) { return CommunicationService.WARNING_BOTH_GROUPS_USERS_CAN_COMMUNICATE; } if (startDirection.equals(Direction.OUTGOING)) { return CommunicationService.WARNING_STARTGROUP_USERS_CAN_COMMUNICATE; } if (endDirection.equals(Direction.INCOMING)) { return CommunicationService.WARNING_ENDGROUP_USERS_CAN_COMMUNICATE; } return null; }### Assistant: @Test public void computeWarningMessageForAddLinkCheck_shouldReturnNull_GivenSenderNoneAndReceiverBoth() { Assert.assertEquals(null, this.service.computeWarningMessageForAddLinkCheck(CommunicationService.Direction.NONE, CommunicationService.Direction.BOTH)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Item getAncestor( int depth ) throws RepositoryException { checkSession(); if (depth < 0) { throw new ItemNotFoundException(JcrI18n.noNegativeDepth.text(depth)); } depth = getDepth() - depth; if (depth < 0) { throw new ItemNotFoundException(JcrI18n.tooDeep.text(depth)); } Item ancestor = this; while (--depth >= 0) { ancestor = ancestor.getParent(); } return ancestor; }### Assistant: @Test public void secondAncestorOfPropertyShouldBeParentOfParentNode() throws Exception { assertThat(newPropertyOnModifiedNode.getAncestor(2), is((Item)newPropertyOnModifiedNode)); assertThat(modifiedPropertyOnModifiedNode.getAncestor(2), is((Item)modifiedPropertyOnModifiedNode)); assertThat(unmodifiedPropertyOnModifiedNode.getAncestor(2), is((Item)unmodifiedPropertyOnModifiedNode)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AwsPrivateKeyStore() { this(initAmazonS3(), initAWSKMS()); kmsDecrypt = Boolean.parseBoolean(System.getProperty(ATHENZ_PROP_AWS_KMS_DECRYPT, \"false\")); }### Assistant: @Test public void testAwsPrivateKeyStore() { System.setProperty(\"athenz.aws.s3.region\", \"us-east-1\"); System.setProperty(ATHENZ_AWS_KMS_REGION, \"us-east-1\"); String bucketName = \"my_bucket\"; String keyName = \"my_key\"; String expected = \"my_value\"; System.setProperty(ATHENZ_PROP_ZTS_BUCKET_NAME, bucketName); System.setProperty(\"athenz.aws.zts.key_name\", keyName); AmazonS3 s3 = mock(AmazonS3.class); AWSKMS kms = mock(AWSKMS.class); S3Object s3Object = mock(S3Object.class); Mockito.when(s3.getObject(bucketName, keyName)).thenReturn(s3Object); InputStream is = new ByteArrayInputStream( expected.getBytes() ); S3ObjectInputStream s3ObjectInputStream = new S3ObjectInputStream(is, null); Mockito.when(s3Object.getObjectContent()).thenReturn(s3ObjectInputStream); ByteBuffer buffer = ByteBuffer.wrap(expected.getBytes()); DecryptResult decryptResult = mock(DecryptResult.class); Mockito.when(kms.decrypt(Mockito.any(DecryptRequest.class))).thenReturn(decryptResult); Mockito.when(decryptResult.getPlaintext()).thenReturn(buffer); AwsPrivateKeyStore awsPrivateKeyStore = new AwsPrivateKeyStore(s3, kms); String actual = awsPrivateKeyStore.getApplicationSecret(bucketName, keyName); StringBuilder privateKeyId = new StringBuilder(keyName); awsPrivateKeyStore.getPrivateKey(\"zts\", \"testServerHostName\", privateKeyId); Assert.assertEquals(actual, expected); Mockito.when(s3Object.getObjectContent()).thenAnswer(invocation -> { throw new IOException(\"test IOException\"); }); awsPrivateKeyStore.getPrivateKey(\"zts\", \"testServerHostName\", privateKeyId); System.clearProperty(\"athenz.aws.s3.region\"); System.clearProperty(ATHENZ_AWS_KMS_REGION); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void aggregate(final Configuration configuration, final List<LaunchResults> launchesResults, final Path outputDirectory) throws IOException { addCategoriesForResults(launchesResults); super.aggregate(configuration, launchesResults, outputDirectory); }### Assistant: @Test void shouldWork() throws IOException { Category category = new Category() .setName(CATEGORY_NAME) .setMessageRegex(\".*\") .setMatchedStatuses(singletonList(Status.BROKEN)); Map<String, Object> meta = new HashMap<>(); meta.put(\"categories\", singletonList(category)); List<LaunchResults> launchResultsList = createSingleLaunchResults( meta, createTestResult(\"asd\\n\", Status.BROKEN) ); CategoriesPlugin plugin = new CategoriesPlugin(); plugin.aggregate(configuration, launchResultsList, reportPath); Set<TestResult> results = launchResultsList.get(0).getAllResults(); List<Category> categories = results.toArray(new TestResult[]{})[0] .getExtraBlock(\"categories\"); assertThat(categories).as(\"test categories\") .extracting(Category::getName) .containsExactly(category.getName()); assertThat(reportPath.resolve(\"data\").resolve(JSON_FILE_NAME)) .exists(); assertThat(reportPath.resolve(\"data\").resolve(CSV_FILE_NAME)) .exists(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Timestamp resetTimeToMidnight(XMLGregorianCalendar xmlGregorianCalendar) { Date date = xmlGregorianCalendar.toGregorianCalendar().getTime(); return new Timestamp(DateUtils.truncate(date, Calendar.DATE).getTime()); }### Assistant: @Test public void testResetTimeToMidnight() throws DatatypeConfigurationException { XMLGregorianCalendar gregorianCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(\"2015-12-21T21:32:52\"); Timestamp result = HerdDateUtils.resetTimeToMidnight(gregorianCalendar); assertEquals(Timestamp.valueOf(\"2015-12-21 00:00:00.0\"), result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Vector3f project(Vector3f other) { float n = this.dot(other); float d = other.lengthSquared(); return new Vector3f(other).multLocal(n / d); }### Assistant: @Test public void testProject() { final Vector3f target = new Vector3f(3.8e+15f, 2.1e-25f, 0.0f); final Vector3f other = new Vector3f(2e-28f, -3.6e+12f, Float.POSITIVE_INFINITY); final Vector3f retval = target.project(other); assertNotNull(retval); assertEquals(Float.NaN, retval.x, 0.0f); assertEquals(Float.NaN, retval.y, 0.0f); assertEquals(Float.NaN, retval.z, 0.0f); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void addTime(BigDecimal elapsedTime) { if (elapsedTime.compareTo(BigDecimal.ZERO) <= 0) { throw new IllegalArgumentException(\"Elapsed time is negative or zero\"); } mapValues.put(longAdder.longValue(), elapsedTime); longAdder.increment(); final BigDecimal count = new BigDecimal(metrics.getCount()); final BigDecimal averageTime = metrics.getAverageTime(); final BigDecimal minTime = metrics.getMinTime(); final BigDecimal maxTime = metrics.getMaxTime(); if (elapsedTime.compareTo(maxTime) == 1) { metrics.setMaxTime(elapsedTime); } if (elapsedTime.compareTo(minTime) == -1 || count.compareTo(BigDecimal.ZERO) == 0) { metrics.setMinTime(elapsedTime); } metrics.incrementCount(); metrics.setAverageTime((averageTime.multiply(count).add(elapsedTime)).divide(count.add(BigDecimal.ONE), BigDecimal.ROUND_HALF_UP)); }### Assistant: @Test(expectedExceptions = IllegalArgumentException.class) public void testNegativeTime() { metricsManager.addTime(getRandomTime().multiply(BigDecimal.valueOf(-1))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void send(final File file, final CallbackHandler handler) { log.info(\"Sending local file to collector: {}\", file.getAbsolutePath()); final long startTime = System.nanoTime(); final AsyncCompletionHandler<Response> asyncCompletionHandler = new AsyncCompletionHandler<Response>() { @Override public Response onCompleted(final Response response) { activeRequests.decrementAndGet(); if (response.getStatusCode() == 202) { handler.onSuccess(file); } else { handler.onError(new IOException(String.format(\"Received response %d: %s\", response.getStatusCode(), response.getStatusText())), file); } sendTimer.update(System.nanoTime() - startTime, TimeUnit.NANOSECONDS); return response; } @Override public void onThrowable(final Throwable t) { activeRequests.decrementAndGet(); handler.onError(t, file); } }; final HttpJob job = new HttpJob(client, file, asyncCompletionHandler); workers.offer(job); }### Assistant: @Test(groups = \"slow\") public void test404() throws Exception { errorServer.start(); logger.info(\"sending\"); sender.send(eventsFile, failureCallbackHandler); Thread.sleep((long) 500); errorServer.stop(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<AcceptMIMEType> parseAcceptMIMETypes(String accept) { return Optional.ofNullable(accept) .filter(StringUtils::hasText) .map(a -> StringUtils.split(a, ',')) .map(Arrays::stream) .map(MimeTypes::apply) .orElse(Collections.emptyList()); }### Assistant: @Test @DisplayName(\"should skip the non quality field\") void testSkipNonQualityField() { List<AcceptMIMEType> list = MimeTypes.parseAcceptMIMETypes(\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"); assertEquals(\"application\", list.get(5).getParentType()); assertEquals(\"signed-exchange\", list.get(5).getChildType()); assertEquals(0.9F, list.get(5).getQuality()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Around(\"execution(@org.apache.servicecomb.pack.omega.context.annotations.SagaStart * *(..)) && @annotation(sagaStart)\") Object advise(ProceedingJoinPoint joinPoint, SagaStart sagaStart) throws Throwable { initializeOmegaContext(); if(context.getAlphaMetas().isAkkaEnabled() && sagaStart.timeout()>0){ SagaStartAnnotationProcessorTimeoutWrapper wrapper = new SagaStartAnnotationProcessorTimeoutWrapper(this.sagaStartAnnotationProcessor); return wrapper.apply(joinPoint,sagaStart,context); }else{ SagaStartAnnotationProcessorWrapper wrapper = new SagaStartAnnotationProcessorWrapper(this.sagaStartAnnotationProcessor); return wrapper.apply(joinPoint,sagaStart,context); } }### Assistant: @Test public void clearContextOnSagaStartError() throws Throwable { omegaContext = new OmegaContext(idGenerator); aspect = new SagaStartAspect(sender, omegaContext); RuntimeException oops = new RuntimeException(\"oops\"); when(joinPoint.proceed()).thenThrow(oops); try { aspect.advise(joinPoint, sagaStart); expectFailing(RuntimeException.class); } catch (RuntimeException e) { assertThat(e, is(oops)); } assertThat(messages.size(), is(2)); TxEvent event = messages.get(0); assertThat(event.globalTxId(), is(globalTxId)); assertThat(event.localTxId(), is(globalTxId)); assertThat(event.parentTxId(), is(nullValue())); assertThat(event.type(), is(EventType.SagaStartedEvent)); event = messages.get(1); assertThat(event.globalTxId(), is(globalTxId)); assertThat(event.localTxId(), is(globalTxId)); assertThat(event.parentTxId(), is(nullValue())); assertThat(event.type(), is(EventType.TxAbortedEvent)); assertThat(omegaContext.globalTxId(), is(nullValue())); assertThat(omegaContext.localTxId(), is(nullValue())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Filters.Filter adapt(FilterAdapterContext context, WhileMatchFilter filter) throws IOException { checkArgument( context.getNumberOfWhileMatchFilters() == 0, \"More than one WhileMatchFilter is not supported.\"); checkNotNull(filter.getFilter(), \"The wrapped filter for a WhileMatchFilter cannot be null.\"); Optional<Filters.Filter> wrappedFilter = subFilterAdapter.adaptFilter(context, filter.getFilter()); checkArgument( wrappedFilter.isPresent(), \"Unable to adapted the wrapped filter: \" + filter.getFilter()); String whileMatchFilterId = context.getNextUniqueId(); Filters.Filter inLabel = FILTERS.label(whileMatchFilterId + IN_LABEL_SUFFIX); Filters.Filter inLabelAndSink = FILTERS.chain().filter(inLabel).filter(FILTERS.sink()); Filters.Filter outLabel = FILTERS.label(whileMatchFilterId + OUT_LABEL_SUFFIX); Filters.Filter outLabelAndSink = FILTERS.chain().filter(outLabel).filter(FILTERS.sink()); Filters.Filter outInterleave = FILTERS.interleave().filter(outLabelAndSink).filter(FILTERS.pass()); Filters.Filter outChain = FILTERS.chain().filter(wrappedFilter.get()).filter(outInterleave); Filters.Filter finalFilter = FILTERS.interleave().filter(inLabelAndSink).filter(outChain); context.addWhileMatchFilter(filter); return finalFilter; }### Assistant: @Test public void twoFiltersNotSupported() throws IOException { thrown.expect(IllegalArgumentException.class); thrown.expectMessage(\"More than one WhileMatchFilter is not supported.\"); ValueFilter valueFilter = new ValueFilter(CompareFilter.CompareOp.LESS, new BinaryComparator(Bytes.toBytes(\"12\"))); WhileMatchFilter filter = new WhileMatchFilter(valueFilter); instance.adapt(emptyScanContext, filter); instance.adapt(emptyScanContext, filter); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ApiOperation( value = \"Update a tag\", notes = \"\", nickname = \"updateTag\") @RequestMapping( value = \"/{tagIdentifier}\", method = RequestMethod.PUT) @PreAuthorize(\"hasRole('UserAdmin')\") @ResponseStatus(HttpStatus.NO_CONTENT) @ApiResponses(value = { @ApiResponse(code = 204, message = \"Tag updated.\"), @ApiResponse(code = 403, message = ApiParams.API_RESPONSE_NOT_ALLOWED_ONLY_USER_ADMIN) }) @ResponseBody public ResponseEntity updateTag( @ApiParam( value = \"Tag identifier\", required = true ) @PathVariable int tagIdentifier, @ApiParam( name = \"category\" ) @RequestBody MetadataCategory category ) throws Exception { MetadataCategory existingCategory = categoryRepository.findOne(tagIdentifier); if (existingCategory != null) { updateCategory(tagIdentifier, category); } else { throw new ResourceNotFoundException(String.format( \"Category with id '%d' does not exist.\", tagIdentifier )); } return new ResponseEntity(HttpStatus.NO_CONTENT); }### Assistant: @Test public void updateTag() throws Exception { MetadataCategory category = _categoriesRepo.findOne(1); Assert.assertNotNull(category); category.setName(category.getName() + \"-2\"); Gson gson = new GsonBuilder() .setFieldNamingStrategy(new JsonFieldNamingStrategy()) .setExclusionStrategies(new FieldNameExclusionStrategy(\"_labelTranslations\", \"_records\")) .create(); String json = gson.toJson(category); this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build(); this.mockMvc.perform(put(\"/srv/api/tags/\" + category.getId()) .content(json) .contentType(API_JSON_EXPECTED_ENCODING) .accept(MediaType.parseMediaType(\"application/json\"))) .andExpect(status().is(204)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public T send() throws IOException { return neow3jService.send(this, responseType); }### Assistant: @Test public void testGetRawBlockHeader_Index() throws Exception { neow3j.getRawBlockHeader(new BlockParameterIndex(12345)).send(); verifyResult( \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"getblockheader\\\",\" + \"\\\"params\\\":[12345,0],\\\"id\\\":1}\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void connect(Consumer<? super Disposable> connection) { boolean doConnect; PublishObserver<T> ps; for (;;) { ps = current.get(); if (ps == null || ps.isDisposed()) { PublishObserver<T> u = new PublishObserver<T>(current); if (!current.compareAndSet(ps, u)) { continue; } ps = u; } doConnect = !ps.shouldConnect.get() && ps.shouldConnect.compareAndSet(false, true); break; } try { connection.accept(ps); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); throw ExceptionHelper.wrapOrThrow(ex); } if (doConnect) { source.subscribe(ps); } }### Assistant: @Test public void disposedUpfront() { ConnectableObservable<Integer> co = Observable.just(1) .concatWith(Observable.<Integer>never()) .publish(); TestObserver<Integer> to1 = co.test(); TestObserver<Integer> to2 = co.test(true); co.connect(); to1.assertValuesOnly(1); to2.assertEmpty(); ((ObservablePublish<Integer>)co).current.get().remove(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object obj) { if (obj == null || obj.getClass() != BigtableOptions.class) { return false; } if (obj == this) { return true; } BigtableOptions other = (BigtableOptions) obj; return (port == other.port) && (dataChannelCount == other.dataChannelCount) && (usePlaintextNegotiation == other.usePlaintextNegotiation) && (useCachedDataPool == other.useCachedDataPool) && Objects.equals(adminHost, other.adminHost) && Objects.equals(dataHost, other.dataHost) && Objects.equals(projectId, other.projectId) && Objects.equals(instanceId, other.instanceId) && Objects.equals(appProfileId, other.appProfileId) && Objects.equals(userAgent, other.userAgent) && Objects.equals(credentialOptions, other.credentialOptions) && Objects.equals(retryOptions, other.retryOptions) && Objects.equals(bulkOptions, other.bulkOptions) && Objects.equals(callOptionsConfig, other.callOptionsConfig) && Objects.equals(useBatch, other.useBatch) && Objects.equals(useGCJClient, other.useGCJClient) && Objects.equals(channelConfigurator, other.channelConfigurator); }### Assistant: @Test public void testEquals() { BigtableOptions options1 = BigtableOptions.builder() .setProjectId(\"project\") .setInstanceId(\"instance\") .setUserAgent(\"foo\") .setCredentialOptions(CredentialOptions.nullCredential()) .build(); BigtableOptions options2 = BigtableOptions.builder() .setProjectId(\"project\") .setInstanceId(\"instance\") .setUserAgent(\"foo\") .setCredentialOptions(CredentialOptions.nullCredential()) .build(); BigtableOptions options3 = BigtableOptions.builder() .setProjectId(\"project\") .setInstanceId(\"instance\") .setUserAgent(\"foo1\") .setCredentialOptions(CredentialOptions.nullCredential()) .build(); BigtableOptions options4 = BigtableOptions.builder() .setProjectId(\"project\") .setInstanceId(\"instance\") .setUserAgent(\"foo1\") .setCredentialOptions(CredentialOptions.defaultCredentials()) .build(); Assert.assertEquals(options1, options2); Assert.assertNotEquals(options1, options3); Assert.assertNotEquals(options1, options4); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Schema getRdlSchema(ResourceContext context) { return schema; }### Assistant: @Test public void testGetSchema() { Schema schema = zts.getRdlSchema(null); assertNotNull(schema); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull public static <T> REventSource<T, T> repositoryWithInitialValue(@NonNull final T initialValue) { return RepositoryCompiler.repositoryWithInitialValue(initialValue); }### Assistant: @Test public void shouldUpdateOnExplicitObservable() { final Repository<List<Integer>> repository = repositoryWithInitialValue(INITIAL_VALUE) .observe(updateDispatcher) .onUpdatesPerLoop() .thenGetFrom(mockIntegerListSupplier) .compile(); updatable.addToObservable(repository); updateDispatcher.update(); assertThat(repository, has(LIST)); verify(mockIntegerListSupplier, times(2)).get(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<byte[]> retrievePolicies(List<String> listPolicySetIds, List<String> listPolicyIds) throws SpiritAdapterException { Assert.isTrue((listPolicySetIds != null && listPolicySetIds.size() > 0) || (listPolicyIds != null && listPolicyIds.size() > 0), \"At least one of 'listPolicySetIds' or 'listPolicyIds' must be provided.\"); logger.debug(\"retrievePolicies: START\"); EhrPolicyRetrieveRsp ehrPolicyRetrieveRsp = null; try { String stateId = login(); EhrPolicyRetrieveRq ehrPolicyRetrieveRq = new EhrPolicyRetrieveRq(); ehrPolicyRetrieveRq.setStateID(stateId); if (listPolicyIds != null) { ehrPolicyRetrieveRq.getPolicyIds().addAll(listPolicyIds); } if (listPolicySetIds != null) { ehrPolicyRetrieveRq.getPolicySetIds().addAll(listPolicySetIds); } ehrPolicyRetrieveRsp = getWebService().retrievePolicies( ehrPolicyRetrieveRq); logger.debug(\"retrievePolicies: SUCCESS\"); logout(stateId); } catch (Exception e) { logger.error(\"retrievePolicies: FAILED\", e); throw new SpiritAdapterException(e); } return ehrPolicyRetrieveRsp.getPolicyList(); }### Assistant: @Test public void testRetrievePolicies_When_PolicyIdList_Is_Null() throws SpiritAdapterException, EhrException_Exception { final String policySetIdMock = \"policySetIdMock\"; final String policyIdMock = \"policyIdMock\"; final byte[] policyMock1 = \"policyMock1\".getBytes(); final byte[] policyMock2 = \"policyMock2\".getBytes(); List<String> policySetIdListMock = Arrays.asList(policySetIdMock); List<String> policyIdListMock = Arrays.asList(policyIdMock); List<byte[]> policyListMock = Arrays.asList(policyMock1, policyMock2); EhrPolicyRetrieveRsp expectedResponse = mock(EhrPolicyRetrieveRsp.class); when(expectedResponse.getPolicyList()).thenReturn(policyListMock); when(webService.retrievePolicies(any(EhrPolicyRetrieveRq.class))) .thenReturn(expectedResponse); List<byte[]> actualResponse = sat.retrievePolicies(policySetIdListMock, null); verify(webService, times(1)).retrievePolicies( argThat(new RetrievePoliciesArgumentMatcher( policySetIdListMock, policyIdListMock))); assertTrue(actualResponse.containsAll(policyListMock)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final void clear () { settingsMap.clear(); }### Assistant: @Test public final void testClear () { settingsMap.add(OperationalTextKey.DEFAULT_TIME_2_WAIT, \"2\"); assertEquals(\"2\", settingsMap.get(OperationalTextKey.DEFAULT_TIME_2_WAIT)); settingsMap.clear(); settingsMap.get(OperationalTextKey.DEFAULT_TIME_2_WAIT); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<String, Capability> getCompatibleCapabilityByType(NodeTemplate nodeTemplate, String type) { Map<String, Capability> capabilities = nodeTemplate.getCapabilities(); if (capabilities == null) { return Collections.emptyMap(); } Map<String, Capability> targetCapabilitiesMatch = Maps.newHashMap(); for (Map.Entry<String, Capability> capabilityEntry : capabilities.entrySet()) { String capabilityTypeName = capabilityEntry.getValue().getType(); CapabilityType capabilityType = toscaContextFinder.find(CapabilityType.class, capabilityTypeName); if (ToscaTypeUtils.isOfType(capabilityType, type)) { targetCapabilitiesMatch.put(capabilityEntry.getKey(), capabilityEntry.getValue()); } } return targetCapabilitiesMatch; }### Assistant: @Test public void capability_should_match_when_type_equals_element_id() throws Exception { Map<String, Capability> compatibleCapabilities = service.getCompatibleCapabilityByType(nodeTemplate, \"alien.capability.test.MongoEndpoint\"); assertThat(compatibleCapabilities).hasSize(1); assertThat(compatibleCapabilities).containsKeys(\"db_endpoint\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Page createFormPage(String name, Contract contract, FormScope scope) { switch (scope) { case OVERVIEW: return new CaseOverviewPageCreationStrategy(contractToContainerMapper).create(name, contract); case PROCESS: return new ProcessInstantiationFormCreationStrategy(contractToWidgetMapper, contractToContainerMapper, mapper, businessQueryDataFactory).create(name, contract); case TASK: default: return new TaskFormCreationStrategy(contractToWidgetMapper, contractToContainerMapper, mapper, dimensionFactory, businessQueryDataFactory).create(name, contract); } }### Assistant: @Test public void should_create_a_page_with_a_query_varaible_when_contract_contains_data_reference_with_aggregation() throws Exception { ContractToPageMapper contractToPageMapper = makeContractToPageMapper(); Page page = contractToPageMapper.createFormPage(\"myPage\", aContractWithDataRefAndAggregation(EditMode.EDIT), FormScope.TASK); assertThat(page.getVariables()).contains(entry(\"employee_query\",anURLVariable().value(\"../API/bdm/businessData/org.test.Employee?q=find&p=0&c=99\").build())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Response getApplicationBindings( String applicationName ) { Response response; ManagedApplication ma = this.manager.applicationMngr().findManagedApplicationByName( applicationName ); if( ma == null ) { response = handleError( Status.NOT_FOUND, new RestError( REST_INEXISTING, application( applicationName )), lang( this.manager )).build(); } else { ApplicationBindings bindings = new ApplicationBindings(); for( Component c : ComponentHelpers.findAllComponents( ma.getApplication())) { for( ImportedVariable var : ComponentHelpers.findAllImportedVariables( c ).values()) { if( ! var.isExternal()) continue; String prefix = VariableHelpers.parseVariableName( var.getName()).getKey(); bindings.prefixToItems.put( prefix, new ArrayList<ApplicationBindingItem> ()); } } for( ManagedApplication managedApp : this.manager.applicationMngr().getManagedApplications()) { String prefix = managedApp.getApplication().getTemplate().getExternalExportsPrefix(); if( prefix == null || ! bindings.prefixToItems.containsKey( prefix )) continue; Set<String> boundApps = ma.getApplication().getApplicationBindings().get( prefix ); boolean bound = boundApps != null && boundApps.contains( managedApp.getName()); ApplicationBindingItem item = new ApplicationBindingItem( managedApp.getName(), bound ); bindings.prefixToItems.get( prefix ).add( item ); } response = Response.ok().entity( bindings ).build(); } return response; }### Assistant: @Test public void testGetApplicationBindings_success_noExternalImports() throws Exception { this.app.bindWithApplication( \"some\", \"value\" ); this.app.bindWithApplication( \"another\", \"value\" ); Response resp = this.resource.getApplicationBindings( this.app.getName()); Assert.assertEquals( Status.OK.getStatusCode(), resp.getStatus()); ApplicationBindings bindings = (ApplicationBindings) resp.getEntity(); Assert.assertEquals( 0, bindings.prefixToItems.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Collection<TableShard> load(long firstRowId, String filename, String tableName, LoaderColumnInfo columnInfo) throws LoadException { logger.info(\"Reading data for table '{}' from '{}'.\", new Object[] { tableName, filename }); try (RandomAccessFile f = new RandomAccessFile(filename, \"r\")) { BigByteBuffer buf = new BigByteBuffer(f.getChannel(), MapMode.READ_ONLY, b -> b.load()); return load(firstRowId, buf, tableName, columnInfo); } catch (IOException e) { throw new LoadException(\"Could not load \" + filename, e); } }### Assistant: @Test public void simpleJson() throws LoadException { String json = \"[ { \\\"a\\\": 1, \\\"b\\\": 1},{\\\"a\\\": 2, \\\"b\\\": 3}]\"; TableShard tableShard = Iterables.getOnlyElement(loader.load(0L, new BigByteBuffer(json.getBytes()), TABLE, colInfo)); Assert.assertEquals(tableShard.getLongColumns().size(), 2, \"Expected both long columns to be available\"); Set<Pair<Long, Long>> expectedValues = new HashSet<>(); expectedValues.add(new Pair<>(1L, 1L)); expectedValues.add(new Pair<>(2L, 3L)); Set<Pair<Long, Long>> actualValues = new HashSet<>(); LongStandardColumnShard colA = tableShard.getLongColumns().get(\"a\"); LongStandardColumnShard colB = tableShard.getLongColumns().get(\"b\"); for (long i = tableShard.getLowestRowId(); i < tableShard.getLowestRowId() + tableShard.getNumberOfRowsInShard(); i++) { Long valueA = resolveSingleRowValue(colA, i); Long valueB = resolveSingleRowValue(colB, i); actualValues.add(new Pair<>(valueA, valueB)); } Assert.assertEquals(actualValues, expectedValues, \"Expected correct values to be encoded\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] readFileFromClasspath(String fileName) throws IOException { InputStream is = Utils.class.getClassLoader().getResourceAsStream(fileName); byte[] data = ByteStreams.toByteArray(is); try { is.close(); } catch (IOException ex) { } return data; }### Assistant: @Ignore @Test(expected = IOException.class) public void testReadFileFromClasspathNoFile() throws Exception { byte[] data = Utils.readFileFromClasspath(\"a/b/c/b/a/thisfiledoesnotexist.txt\"); Assert.assertNotNull(data); Assert.fail(\"Expected an IOException as the file should not exist\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkAttributeSyntax(PerunSessionImpl perunSession, Resource resource, Attribute attribute) throws WrongAttributeValueException { if (attribute.getValue() == null) return; List<String> values = attribute.valueAsList(); for (String value : values) { if (!PATTERN.matcher(value).matches()) { throw new WrongAttributeValueException(attribute, resource.getName() + \" has attribute whose value is not valid. Example of valid value: res:RESOURCE[:CHILD-RESOURCE1][:CHILD-RESOURCE2]...[:act:ACTION[,ACTION]...]\"); } } }### Assistant: @Test(expected= WrongAttributeValueException.class) public void checkAttributeWrongSyntax13() throws Exception { System.out.println(\"checkAttributeWrongSyntax13()\"); testedValues.set(0, \"res:a,b:,a\"); module.checkAttributeSyntax(ps, resource, attribute); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting @RequiresNonNull(\"priorRawCounterValues\") List<GaugeValue> collectGaugeValues(GaugeConfig gaugeConfig, List<MBeanServer> mbeanServers) throws Exception { String mbeanObjectName = gaugeConfig.mbeanObjectName(); ObjectName objectName; try { objectName = ObjectName.getInstance(mbeanObjectName); } catch (MalformedObjectNameException e) { logger.debug(e.getMessage(), e); logFirstTimeMBeanException(mbeanObjectName, e); return ImmutableList.of(); } if (!objectName.isPattern()) { return collectGaugeValues(objectName, gaugeConfig.mbeanAttributes(), mbeanObjectName, mbeanServers); } Set<ObjectName> matchingObjectNames = lazyPlatformMBeanServer.queryNames(objectName, null, mbeanServers); if (matchingObjectNames.isEmpty()) { logFirstTimeMBeanNotMatchedOrFound(mbeanObjectName); return ImmutableList.of(); } pendingLoggedMBeanGauges.remove(mbeanObjectName); List<GaugeValue> gaugeValues = Lists.newArrayList(); for (ObjectName matchingObjectName : matchingObjectNames) { gaugeValues.addAll(collectGaugeValues(matchingObjectName, gaugeConfig.mbeanAttributes(), matchingObjectName.getDomain() + \":\" + matchingObjectName.getKeyPropertyListString(), mbeanServers)); } return gaugeValues; }### Assistant: @Test public void shouldHandleMBeanAttributeNotFound() throws Exception { GaugeConfig gaugeConfig = ImmutableGaugeConfig.builder() .mbeanObjectName(\"xyz:aaa=bbb\") .addMbeanAttributes(ImmutableMBeanAttribute.of(\"ccc\", false)) .addMbeanAttributes(ImmutableMBeanAttribute.of(\"ddd\", false)) .build(); when(lazyPlatformMBeanServer.getAttribute(any(ObjectName.class), anyString(), anyMBeanServerList())).thenThrow(AttributeNotFoundException.class); collectGaugeValues(gaugeConfig); collectGaugeValues(gaugeConfig); collectGaugeValues(gaugeConfig); collectGaugeValues(gaugeConfig); collectGaugeValues(gaugeConfig); verify(logger, times(10)).debug(nullable(String.class), any(Exception.class)); verify(logger).warn(\"mbean attribute {} not found in {}\", \"ccc\", \"xyz:aaa=bbb\"); verify(logger).warn(\"mbean attribute {} not found in {}\", \"ddd\", \"xyz:aaa=bbb\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public byte[] encode() { final ConstructedDEREncoder se; if (getCookie() != null) { se = new ConstructedDEREncoder( UniversalDERTag.SEQ, new IntegerType(getRequestMode().value()), new OctetStringType(getCookie()), new BooleanType(getReloadHint())); } else { se = new ConstructedDEREncoder( UniversalDERTag.SEQ, new IntegerType(getRequestMode().value()), new BooleanType(getReloadHint())); } return se.encode(); }### Assistant: @Test(groups = \"control\", dataProvider = \"request\") public void decode(final byte[] berValue, final SyncRequestControl expected) throws Exception { Assert.assertEquals(expected.encode(), berValue); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static double requireNonPositive(double val) { if (Double.compare(val, 0d) > 0) { throw new IllegalArgumentException(val + IS_POSITIVE); } return val; }### Assistant: @Test void requireNonPositive() { assertEquals(-1.0, DoubleRangeUtil.requireNonPositive(-1.0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Schema load(final JSONObject schemaJson) { return SchemaLoader.load(schemaJson, new DefaultSchemaClient()); }### Assistant: @Test public void refWithType() { ObjectSchema actualRoot = (ObjectSchema) SchemaLoader.load(get(\"refWithType\")); ReferenceSchema actual = (ReferenceSchema) actualRoot.getPropertySchemas().get(\"prop\"); ObjectSchema propSchema = (ObjectSchema) actual.getReferredSchema(); assertEquals(propSchema.getRequiredProperties(), asList(\"a\", \"b\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void performReplacement(Properties properties, List<ReplacementProperty> replacementProperties) { if ((replacementProperties != null) && (properties != null)) { for (ReplacementProperty replacementProperty: replacementProperties) { String propertyKey = replacementProperty.getProperty(); if (propertyKey == null) { performReplacementOnAllGeneratedProperties(properties, replacementProperty); } else { performReplacementOnSingleProperty(properties, replacementProperty, propertyKey); } } } }### Assistant: @Test public void testPerformReplacementWithPatternGroupAndNoMatch() throws IOException { Properties actualProperties = build(\"git.branch\", \"feature#feature_name\", \"git.commit.author\", \"author#\"); List<ReplacementProperty> replacementProperties = new ArrayList<>(); replacementProperties.add(new ReplacementProperty(\"git.branch\", null, \"^([^\\\\/]*)\\\\/([^\\\\/]*)$\", \"$1-$2\", true, false, null)); propertiesReplacer.performReplacement(actualProperties, replacementProperties); Properties exptecedProperties = build(\"git.branch\", \"feature#feature_name\", \"git.commit.author\", \"author#\"); assertEquals(exptecedProperties, actualProperties); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @POST @Produces({MediaType.TEXT_PLAIN}) @ApiOperation(\"Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain\") public String startWorkflow(StartWorkflowRequest request) { return workflowService.startWorkflow(request); }### Assistant: @Test public void testStartWorkflowParam() { Map<String, Object> input = new HashMap<>(); input.put(\"1\", \"abc\"); String workflowID = \"w112\"; when(mockWorkflowService.startWorkflow(anyString(), anyInt(), anyString(), anyInt(), anyMap())).thenReturn(workflowID); assertEquals(\"w112\", workflowResource.startWorkflow(\"test1\", 1, \"c123\", 0, input)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: Object apply(Object[] args, TProtocol protocol, int seqid) throws Exception { return apply(args, protocol, seqid, null); }### Assistant: @Test public void shouldReceiveObserable() throws Exception { final TestService.Processor<Iface> processor = new TestService.Processor<Iface>(new Iface() { @Override public void notify(int id) throws TException { } @Override public UnionB get(int id) throws TestException, TException { return new UnionB(UnionB._Fields.OS, new com.meituan.firefly.testthrift.OrderedStruct(1)); } @Override public List<UnionB> getList(List<Short> ids) throws TException { return null; } @Override public void notifyWithoutOneway(int id) throws TestException, TException { } @Override public UnionB emptyArgMethod() throws TestException, TException { return null; } }); TTransport transport = new FlushableMemoryBuffer(4096) { boolean flushed = false; @Override public void flush() throws TTransportException { if (!flushed) { flushed = true; try { processor.process(new TBinaryProtocol(this), new TBinaryProtocol(this)); } catch (TException e) { throw new RuntimeException(e); } } } }; TestScheduler testScheduler = new TestScheduler(); FunctionCall functionCall = new FunctionCall(com.meituan.firefly.rx_testfirefly.TestService.class.getMethod(\"get\", Integer.class), thrift); Observable<com.meituan.firefly.rx_testfirefly.UnionB> observable; try { observable = (Observable<com.meituan.firefly.rx_testfirefly.UnionB>) functionCall.apply(new Object[]{1}, new TBinaryProtocol(transport), 1, testScheduler); } catch (ClassCastException e) { throw new ClassCastException(\"return type of method is not obserable !\"); } Assert.assertNotNull(observable); observable.subscribeOn(testScheduler); observable.observeOn(testScheduler); TestSubscriber<com.meituan.firefly.rx_testfirefly.UnionB> testSubscriber = new TestSubscriber(); observable.subscribe(testSubscriber); testScheduler.triggerActions(); Assert.assertEquals(1, testSubscriber.getOnNextEvents().size()); com.meituan.firefly.rx_testfirefly.UnionB u = testSubscriber.getOnNextEvents().get(0); Assert.assertNotNull(u); Assert.assertEquals((Integer) 1, u.os.id); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"/in_progress/{workflowId}/{taskRefName}\") @ApiOperation(\"Get in progress task for a given workflow id.\") @Consumes({MediaType.WILDCARD}) public Task getPendingTaskForWorkflow(@PathParam(\"workflowId\") String workflowId, @PathParam(\"taskRefName\") String taskReferenceName) { return taskService.getPendingTaskForWorkflow(workflowId, taskReferenceName); }### Assistant: @Test public void testGetPendingTaskForWorkflow() { Task task = new Task(); task.setTaskType(\"SIMPLE\"); task.setWorkerId(\"123\"); task.setDomain(\"test\"); task.setStatus(Task.Status.IN_PROGRESS); when(mockTaskService.getPendingTaskForWorkflow(anyString(), anyString())).thenReturn(task); assertEquals(task, taskResource.getPendingTaskForWorkflow(\"SIMPLE\", \"123\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void init(final ISchedulerEntry entry, final IObject args) throws SchedulerActionInitializationException { try { Object message = args.getValue(messageFN); Object chainId = args.getValue(chainFN); if (message == null || !(message instanceof IObject)) { throw new SchedulerActionInitializationException(\"\\\"message\\\" field of arguments should contain a message object\", null); } if (null == chainId) { throw new SchedulerActionInitializationException(\"\\\"chain\\\" field of arguments should contain name of the chain\", null); } String entryIdFieldFN = (String) args.getValue(setEntryIdFN); if (entryIdFieldFN != null && !entryIdFieldFN.isEmpty()) { ((IObject) message).setValue(IOC.resolve(Keys.getOrAdd(IFieldName.class.getCanonicalName()), entryIdFieldFN), entry.getId()); } entry.getState().setValue(messageFN, message); entry.getState().setValue(chainFN, chainId); Object preShutdownExecConfig = args.getValue(preShutdownExecFN); entry.getState().setValue(preShutdownExecFN, (preShutdownExecConfig == null || preShutdownExecConfig == Boolean.FALSE) ? Boolean.FALSE : Boolean.TRUE); Number stackDepth = (Number) args.getValue(stackDepthFN); if (null == stackDepth) { stackDepth = IOC.resolve(Keys.getOrAdd(\"default_stack_depth\")); } entry.getState().setValue(stackDepthFN, stackDepth); } catch (ReadValueException | ChangeValueException | InvalidArgumentException | ResolutionException e) { throw new SchedulerActionInitializationException(\"Error occurred copying message from arguments to entry state.\", e); } }### Assistant: @Test public void Should_initializeEntryState() throws Exception { IObject args = IOC.resolve(Keys.getOrAdd(IObject.class.getCanonicalName()), (\"{\" + \"'message': {'a':'asd'},\" + \"'setEntryId': 'idFld',\" + \"'preShutdownExec': true,\" + \"'chain': 'some_chain',\" + \"'stackDepth': 13\" + \"}\").replace('\\'','\"')); action.init(schedulerEntryMock, args); assertEquals(\"asd\", ((IObject)entryState.getValue(fn(\"message\"))).getValue(fn(\"a\"))); assertEquals(schedulerEntryMock.getId(), ((IObject)entryState.getValue(fn(\"message\"))).getValue(fn(\"idFld\"))); assertEquals(Boolean.TRUE, entryState.getValue(fn(\"preShutdownExec\"))); assertEquals(\"some_chain\", entryState.getValue(fn(\"chain\"))); assertEquals(13, entryState.getValue(fn(\"stackDepth\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void copy(String sourcePath, String targetPath) throws IOException { if(logger.isDebugEnabled()) { logger.debug(\"local copy from \" + sourcePath + \" to \" + targetPath); } File tDestFile = new File(targetPath); File tSourceFile = new File(sourcePath); if (!tDestFile.exists()) { tDestFile.createNewFile(); } FileChannel source = null; FileChannel destination = null; try { source = new FileInputStream(tSourceFile).getChannel(); destination = new FileOutputStream(tDestFile).getChannel(); destination.transferFrom(source, 0, source.size()); } finally { if (source != null) { source.close(); } if (destination != null) { destination.close(); } } if(logger.isDebugEnabled()) { logger.debug(\"local copy done \"); } }### Assistant: @Test public void testCopy() throws Exception { assertNotNull(cmd); File fTemp = File.createTempFile(\"test\", \".tmp\"); File fTempDest = new File(fTemp.getAbsolutePath()+\".bak\"); cmd.copy(fTemp.getAbsolutePath(), fTempDest.getAbsolutePath()); assertTrue(fTempDest.exists()); fTempDest.delete(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public SchemaVersion getSchemaVersion() { Road road = getRoad(); String roadName = road.getName(); return SchemaVersion.latest(road.getSchemas().values()).orElseThrow( () -> new RoadUnavailableException(String.format(\"Road '%s' has no schema.\", roadName))); }### Assistant: @Test(expected = RoadUnavailableException.class) public void getSchemaWithIdNoSchema() { when(road.getSchemas()).thenReturn(Collections.emptyMap()); underTest.getSchemaVersion(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Id makeRandom() { long lng = RANDOM.nextLong(); return new Id(lng < 0 ? -lng : lng); }### Assistant: @Test public void equalsMakesSense() { Id id1 = Id.makeRandom(); assertEquals(id1, id1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ZonedDateTime asZonedDateTime() { return ZonedDateTime.ofInstant(Instant.ofEpochMilli(this.value), ZoneOffset.UTC); }### Assistant: @Test public void AsZonedDateTimeShouldReturnCorrectZonedDateTimeWhenConstructedUsingZonedDateTime() { final ZonedDateTime expected = ZonedDateTime.of(2020, 2, 20, 21, 59, 59, 0, ZoneOffset.UTC); final TimestampMeasurementElement element = new TimestampMeasurementElement(expected); final ZonedDateTime actual = element.asZonedDateTime(); assertThat(actual).isEqualTo(expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String formatAll(Parameter[] parameters, List<Object> arguments) { StringBuilder stringBuilder = new StringBuilder(); for (int idx = 0; idx < arguments.size(); idx++) { String parameterName = (parameters.length > idx) ? parameters[idx].getName() : \"?\"; Object argument = arguments.get(idx); stringBuilder.append(parameterName).append(\"=\").append(format(argument)); if (idx < arguments.size() - 1) { stringBuilder.append(\", \"); } } return stringBuilder.toString(); }### Assistant: @Test void testFormatAllHandlePrimitiveIntTypeArrayCorrectly() { final List<Object> arguments = list(new int[] { 11, 2 }); String result = underTest.formatAll(paramsWith(1), arguments); assertThat(result).isEqualTo(\"c0=[11, 2]\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public HashMap<String, Object> connectionTest() { String errMsg = \"\"; boolean connectivityStatus; HashMap<String, Object> responseData = new HashMap<>(); try { final WebResource resource = getWebResource(); final ClientResponse response = getResponse(resource, \"application/json\"); if (LOG.isDebugEnabled()) { LOG.debug(\"Got response from NiFi with status code \" + response.getStatus()); } if (Response.Status.OK.getStatusCode() == response.getStatus()) { connectivityStatus = true; } else { connectivityStatus = false; errMsg = \"Status Code = \" + response.getStatus(); } } catch (Exception e) { LOG.error(\"Connection to NiFi failed due to \" + e.getMessage(), e); connectivityStatus = false; errMsg = e.getMessage(); } if (connectivityStatus) { BaseClient.generateResponseDataMap(connectivityStatus, SUCCESS_MSG, SUCCESS_MSG, null, null, responseData); } else { BaseClient.generateResponseDataMap(connectivityStatus, FAILURE_MSG, FAILURE_MSG + errMsg, null, null, responseData); } if (LOG.isDebugEnabled()) { LOG.debug(\"Response Data - \" + responseData); } return responseData; }### Assistant: @Test public void testConnectionTestSuccess() { HashMap<String, Object> ret = niFiClient.connectionTest(); Assert.assertNotNull(ret); Assert.assertEquals(NiFiClient.SUCCESS_MSG, ret.get(\"message\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected ResponseEntity<?> handleExceptions(Supplier<ResponseEntity<?>> response) { return handleExceptions(response::get, this::toErrorResponse); }### Assistant: @Test public void handleExceptionsReturnsResponseOnFailure() { ResponseEntity<?> response = resource.handleExceptions(() -> { throw new RuntimeException(\"error\"); }); assertThat(response.getStatusCode(), is(INTERNAL_SERVER_ERROR)); assertThat(((ErrorResponse) response.getBody()).error, is(\"error\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DatasetGraph createDatasetGraph(String directory) { return createDatasetGraph(Location.create(directory)) ; }### Assistant: @Test public void testTDBFactory2() { DatasetGraph dg1 = TDBFactory.createDatasetGraph(Location.mem()); DatasetGraph dg2 = TDBFactory.createDatasetGraph(Location.mem()); dg1.add(quad1); assertFalse(dg2.contains(quad1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public IJsonNode map(final Object value) { if (value == null) return NullNode.getInstance(); final Type type = this.getDefaultMappingType(value.getClass()); if (type == null) throw new IllegalArgumentException(\"Cannot find appropriate json type for \" + value); return this.map(value, null, type); }### Assistant: @Test public void shouldNestedMapObject() { final Map<String, Object> object = new HashMap<String, Object>(); object.put(\"a\", 1); object.put(\"b\", \"test\"); final Map<String, Object> nested = new HashMap<String, Object>(); nested.put(\"1\", \"x\"); nested.put(\"2\", true); object.put(\"nestedObject\", nested); final IJsonNode node = this.mapper.map(object); final ObjectNode expected = new ObjectNode(); expected.put(\"a\", IntNode.valueOf(1)); expected.put(\"b\", TextNode.valueOf(\"test\")); final ObjectNode nestedObjectNode = new ObjectNode(); nestedObjectNode.put(\"1\", TextNode.valueOf(\"x\")); nestedObjectNode.put(\"2\", BooleanNode.valueOf(true)); expected.put(\"nestedObject\", nestedObjectNode); Assert.assertEquals(expected, node); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int capacity() { return this.buffer.length-1; }### Assistant: @Test public void capacity() throws BufferException { int expCapacity = 100; ByteBuffer buffer = new ByteBuffer(expCapacity); int actCapacity = buffer.capacity(); Assert.assertEquals(expCapacity, actCapacity); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isMasked() { return masked; }### Assistant: @Test public void testIsMasked() throws Exception { List<ParameterConfig> parameters = getParameterConfigs(); Assert.assertEquals(2, parameters.size()); Assert.assertEquals(false, parameters.get(0).isMasked()); Assert.assertEquals(true, parameters.get(1).isMasked()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getFileName(String _file_path) { return FileUtil.getFileName(_file_path, true); }### Assistant: @Test public void testGetFileName() { final String name1 = FileUtil.getFileName(\"hello.min.js\", false); assertEquals(\"hello.min\", name1); final String name2 = FileUtil.getFileName(\"hello.js\", false); assertEquals(\"hello\", name2); final String name3 = FileUtil.getFileName(Paths.get(\"./project/js/hello.io.min.js\").toString(), false); assertEquals(\"hello.io.min\", name3); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull public static ScheduledMessageSender after(@IntRange(from = 0) long millis) { return after(millis, ActorSystemInstance.getInstance(null)); }### Assistant: @Test public void sendMessageToPostponedActorThenReceiveItWhenTheActorRegisters() throws Exception { final ActorSystemInstance actorSystem = ActorSystemInstance .getInstance(\"sendMessageToPostponedActorThenReceiveItWhenTheActorRegisters\"); MockActor actor = new TestAsync<MockActor>(50).apply(new Function<CountDownLatch, MockActor>() { @Override public MockActor apply(@NonNull CountDownLatch countDownLatch) { Message message = new Message(1, 1); MockActorNine actor = new MockActorNine(countDownLatch); actorSystem.register(actor); actorSystem.postpone(actor); ActorScheduler.after(10, actorSystem).send(message, MockActorNine.class); return actor; } }); actorSystem.register(actor); assertTrue(actor.message.getContent().equals(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void editSchedule() { CSQueue root = scheduler.getRootQueue(); Resource clusterResources = Resources.clone(scheduler.getClusterResource()); clusterResources = getNonLabeledResources(clusterResources); setNodeLabels(scheduler.getRMContext().getNodeLabelManager() .getNodeLabels()); containerBasedPreemptOrKill(root, clusterResources); }### Assistant: @Test public void testIdealAllocationForLabels() { int[][] qData = new int[][] { { 80, 40, 40 }, { 80, 80, 80 }, { 80, 80, 0 }, { 70, 20, 50 }, { 0, 0, 0 }, { 5, 4, 1 }, { -1, 1, 1 }, { 2, 0, 0 }, }; setAMContainer = true; setLabeledContainer = true; Map<NodeId, Set<String>> labels = new HashMap<NodeId, Set<String>>(); NodeId node = NodeId.newInstance(\"node1\", 0); Set<String> labelSet = new HashSet<String>(); labelSet.add(\"x\"); labels.put(node, labelSet); when(lm.getNodeLabels()).thenReturn(labels); ProportionalCapacityPreemptionPolicy policy = buildPolicy(qData); when(lm.getResourceByLabel(anyString(), any(Resource.class))).thenReturn( Resources.clone(Resource.newInstance(80, 0))); clusterResources.setMemory(100); policy.editSchedule(); verify(mDisp, times(19)).handle(argThat(new IsPreemptionRequestFor(appD))); verify(mDisp, times(19)).handle(argThat(new IsPreemptionRequestFor(appC))); verify(mDisp, times(2)).handle(argThat(new IsPreemptionRequestFor(appB))); setAMContainer = false; setLabeledContainer = false; }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void open() throws Exception { super.open(); this.flinkCollector = new TimestampedCollector<>(this.output); GlobalJobParameters config = getExecutionConfig().getGlobalJobParameters(); StormConfig stormConfig = new StormConfig(); if (config != null) { if (config instanceof StormConfig) { stormConfig = (StormConfig) config; } else { stormConfig.putAll(config.toMap()); } } this.topologyContext = WrapperSetupHelper.createTopologyContext( getRuntimeContext(), this.bolt, this.name, this.stormTopology, stormConfig); final OutputCollector stormCollector = new OutputCollector(new BoltCollector<OUT>( this.numberOfAttributes, this.topologyContext.getThisTaskId(), this.flinkCollector)); if (this.stormTopology != null) { Map<GlobalStreamId, Grouping> inputs = this.topologyContext.getThisSources(); for (GlobalStreamId inputStream : inputs.keySet()) { for (Integer tid : this.topologyContext.getComponentTasks(inputStream .get_componentId())) { this.inputComponentIds.put(tid, inputStream.get_componentId()); this.inputStreamIds.put(tid, inputStream.get_streamId()); this.inputSchemas.put(tid, this.topologyContext.getComponentOutputFields(inputStream)); } } } this.bolt.prepare(stormConfig, this.topologyContext, stormCollector); }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void testOpenSink() throws Exception { final StormConfig stormConfig = new StormConfig(); final Configuration flinkConfig = new Configuration(); final ExecutionConfig taskConfig = mock(ExecutionConfig.class); when(taskConfig.getGlobalJobParameters()).thenReturn(null).thenReturn(stormConfig) .thenReturn(flinkConfig); final StreamingRuntimeContext taskContext = mock(StreamingRuntimeContext.class); when(taskContext.getExecutionConfig()).thenReturn(taskConfig); when(taskContext.getTaskName()).thenReturn(\"name\"); when(taskContext.getMetricGroup()).thenReturn(new UnregisteredMetricsGroup()); final IRichBolt bolt = mock(IRichBolt.class); BoltWrapper<Object, Object> wrapper = new BoltWrapper<Object, Object>(bolt); wrapper.setup(createMockStreamTask(), new StreamConfig(new Configuration()), mock(Output.class)); wrapper.open(); verify(bolt).prepare(any(Map.class), any(TopologyContext.class), isNotNull(OutputCollector.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static void extractJsonResults(String jsonStr, List<String> topics, Map<String, TopicWorkload> workloads) { try { JSONObject jsonObj = JSON.parseObject(jsonStr); if (jsonObj == null) { LOGGER.info(\"Failed to parse C3 result: \" + jsonStr); return; } for (String topic : topics) { JSONArray arr = jsonObj.getJSONArray(topic); if (arr == null || arr.size() == 0) { continue; } JSONObject metrics = arr.getJSONObject(0); if (metrics == null) { LOGGER.info(\"Failed to parse C3 result for topic '\" + topic + \"'\"); continue; } Long startTimeSec = metrics.getLong(\"startTimeSec\"); Long endTimeSec = metrics.getLong(\"endTimeSec\"); Long totalBytes = metrics.getLong(\"totalBytes\"); Long totalCount = metrics.getLong(\"totalCount\"); if (startTimeSec == null || endTimeSec == null || totalBytes == null || totalCount == null) { LOGGER.info(\"Failed to parse C3 result for topic '\" + topic + \"'\"); continue; } double period = endTimeSec - startTimeSec; if (period <= 0) { LOGGER.info(\"Invalid C3 result for topic '\" + topic + \"': startTimeSec=\" + startTimeSec + \",\" + \" endTimeSec=\" + endTimeSec); continue; } TopicWorkload tw = new TopicWorkload(totalBytes / period, totalCount / period); tw.setLastUpdate(endTimeSec * 1000); workloads.put(topic, tw); } } catch (Exception e) { LOGGER.error(\"Failed to extract workload information from JSON: \" + jsonStr, e); } }### Assistant: @Test public void testExtractJsonResults() { Map<String, TopicWorkload> workloads = new HashMap<>(); C3QueryUtils.extractJsonResults( \"{\\\"topic1\\\":[{\\\"endTimeSec\\\":1485991200,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":30000,\\\"totalCount\\\":3000}],\" + \"\\\"topic2\\\":[{\\\"endTimeSec\\\":1485991200,\\\"invalidCount\\\":0,\\\"maxLatencyFromCreation\\\":3750,\\\"meanLatencyFromCreation\\\":1576.2152157017917,\\\"p99LatencyFromCreation\\\":3529,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":3000000,\\\"totalCount\\\":1500}]}\", Arrays.asList(\"topic1\", \"topic2\"), workloads); TopicWorkload tw1 = workloads.get(\"topic1\"); Assert.assertEquals(tw1.getBytesPerSecond(), 10, 0.01); Assert.assertEquals(tw1.getMsgsPerSecond(), 1, 0.01); TopicWorkload tw2 = workloads.get(\"topic2\"); Assert.assertEquals(tw2.getBytesPerSecond(), 1000, 0.01); Assert.assertEquals(tw2.getMsgsPerSecond(), 0.5, 0.01); workloads.clear(); C3QueryUtils.extractJsonResults(\"\", Arrays.asList(\"topic1\", \"topic2\"), workloads); Assert.assertTrue(workloads.isEmpty()); C3QueryUtils.extractJsonResults(\"{}\", Arrays.asList(\"topic1\", \"topic2\"), workloads); Assert.assertTrue(workloads.isEmpty()); C3QueryUtils.extractJsonResults(\"{\\\"topic1\\\":[]}\", Arrays.asList(\"topic1\", \"topic2\"), workloads); Assert.assertTrue(workloads.isEmpty()); C3QueryUtils.extractJsonResults( \"{\\\"topic1\\\":[{,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":30000,\\\"totalCount\\\":3000}],\" + \"\\\"topic2\\\":[{\\\"endTimeSec\\\":1485991200,\\\"invalidCount\\\":0,\\\"maxLatencyFromCreation\\\":3750,\\\"meanLatencyFromCreation\\\":1576.2152157017917,\\\"p99LatencyFromCreation\\\":3529,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":3000000,\\\"totalCount\\\":1500}]}\", Arrays.asList(\"topic1\", \"topic2\"), workloads); tw1 = workloads.get(\"topic1\"); Assert.assertNull(tw1); tw2 = workloads.get(\"topic2\"); Assert.assertEquals(tw2.getBytesPerSecond(), 1000, 0.01); Assert.assertEquals(tw2.getMsgsPerSecond(), 0.5, 0.01); workloads.clear(); C3QueryUtils.extractJsonResults( \"{\\\"topic1\\\":[{\\\"endTimeSec\\\":1485988200,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":30000,\\\"totalCount\\\":3000}],\" + \"\\\"topic2\\\":[{\\\"endTimeSec\\\":1485991200,\\\"invalidCount\\\":0,\\\"maxLatencyFromCreation\\\":3750,\\\"meanLatencyFromCreation\\\":1576.2152157017917,\\\"p99LatencyFromCreation\\\":3529,\\\"startTimeSec\\\":1485988200,\\\"totalBytes\\\":3000000,\\\"totalCount\\\":1500}]}\", Arrays.asList(\"topic1\", \"topic2\"), workloads); tw1 = workloads.get(\"topic1\"); Assert.assertNull(tw1); tw2 = workloads.get(\"topic2\"); Assert.assertEquals(tw2.getBytesPerSecond(), 1000, 0.01); Assert.assertEquals(tw2.getMsgsPerSecond(), 0.5, 0.01); workloads.clear(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @InterfaceAudience.Public @InterfaceStability.Evolving public static void setConfiguration(Configuration conf) { initialize(conf, true); }### Assistant: @Test (timeout = 30000) public void testConstructorWithRules() throws Exception { conf.set(HADOOP_SECURITY_AUTH_TO_LOCAL, \"RULE:[1:$1@$0](.*@OTHER.REALM)s/(.*)@.*/other-$1/\"); UserGroupInformation.setConfiguration(conf); testConstructorSuccess(\"user1\", \"user1\"); testConstructorSuccess(\"user4@OTHER.REALM\", \"other-user4\"); testConstructorFailures(\"user2@DEFAULT.REALM\"); testConstructorFailures(\"user3/cron@DEFAULT.REALM\"); testConstructorFailures(\"user5/cron@OTHER.REALM\"); testConstructorFailures(null); testConstructorFailures(\"\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <K, V> Map<K, V> updateMap(final Map<K, V> original, MapDifference<K, V> diff) throws MergeException { Map<K, V> result = new HashMap<K, V>(original); if (diff.areEqual()) { return result; } for (Entry<K, V> entry : diff.entriesOnlyOnLeft().entrySet()) { V originalValue = original.get(entry.getKey()); if (ObjectUtils.equals(originalValue, entry.getValue())) { result.remove(entry.getKey()); } } for (Entry<K, V> entry : diff.entriesOnlyOnRight().entrySet()) { K key = entry.getKey(); if (original.containsKey(key)) { if (ObjectUtils.notEqual(original.get(key), entry.getValue())) { throw new MergeException(String.format( \"tried to introduce a new value, but it was already there: %s (%s,%s)\", key, original.get(key), entry.getValue())); } } result.put(entry.getKey(), entry.getValue()); } for (Entry<K, ValueDifference<V>> entry : diff.entriesDiffering().entrySet()) { K key = entry.getKey(); V originalValue = original.get(entry.getKey()); if (ObjectUtils.equals(originalValue, entry.getValue().leftValue())) { result.put(key, entry.getValue().rightValue()); } else if (ObjectUtils.equals(originalValue, entry.getValue().rightValue())) { result.put(key, originalValue); } else { String errorMessage = String .format( \"Changes could not be applied, because original value differes from left-side of the\" + \"MapDifference: %s (%s,%s)\", entry.getKey(), original.get(entry.getKey()), entry.getValue()); throw new MergeException(errorMessage); } } return result; }### Assistant: @Test public void testRemoveKeyFromNewMap_shouldRemoveEntry() throws Exception { Map<String, String> original = ImmutableMap.of(\"foo\", \"bar\", \"test\", \"42\"); Map<String, String> oldMap = ImmutableMap.copyOf(original); Map<String, String> newMap = ImmutableMap.of(\"foo\", \"bar\"); MapDifference<String, String> difference = Maps.difference(oldMap, newMap); Map<String, String> result = ConfigUtils.updateMap(original, difference); assertThat(result, is(newMap)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getInt(int columnIndex) { return getInt(columnNames[columnIndex]); }### Assistant: @Test public void iterationWithSelectionAndOrder() throws IOException { Table table = Table.read().csv(\"../data/bush.csv\"); TableSlice tableSlice = new TableSlice(table, Selection.withRange(0, 5)); tableSlice.sortOn(Sort.on(\"approval\", Order.ASCEND)); Row row = new Row(tableSlice); Integer[] expected = new Integer[] {52, 52, 53, 53, 58}; Integer[] actual = Streams.stream(row).map(r -> r.getInt(\"approval\")).toArray(Integer[]::new); assertArrayEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final String getName() { return delegate.getName(); }### Assistant: @Test public void testGetName() { final Workspace workspace = mock(Workspace.class); final String name = \"i am a mock\"; when(workspace.getName()).thenReturn(name); final WorkspaceFacade<Workspace, Session> facade = getFacade(workspace); assertSame(\"should be same\", name, facade.getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ProviderConfiguration discover() { Map responseAttributes = this.restTemplate.getForObject(this.providerLocation, Map.class); ProviderConfiguration.Builder builder = new ProviderConfiguration.Builder(); builder.issuer((String)responseAttributes.get(ISSUER_ATTR_NAME)); builder.authorizationEndpoint((String)responseAttributes.get(AUTHORIZATION_ENDPOINT_ATTR_NAME)); if (responseAttributes.containsKey(TOKEN_ENDPOINT_ATTR_NAME)) { builder.tokenEndpoint((String)responseAttributes.get(TOKEN_ENDPOINT_ATTR_NAME)); } if (responseAttributes.containsKey(USERINFO_ENDPOINT_ATTR_NAME)) { builder.userInfoEndpoint((String)responseAttributes.get(USERINFO_ENDPOINT_ATTR_NAME)); } if (responseAttributes.containsKey(JWK_SET_URI_ATTR_NAME)) { builder.jwkSetUri((String)responseAttributes.get(JWK_SET_URI_ATTR_NAME)); } return builder.build(); }### Assistant: @Test public void discoverWhenProviderSupportsDiscoveryThenReturnProviderConfiguration() throws Exception { this.server.enqueue(new MockResponse().setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE).setBody( \" {\\n\" + \" \\\"issuer\\\": \\\"https: \" \\\"authorization_endpoint\\\": \\\"https: \" \\\"token_endpoint\\\": \\\"https: \" \\\"userinfo_endpoint\\\": \\\"https: \" \\\"jwks_uri\\\": \\\"https: \" }\\n\")); ProviderDiscoveryClient client = new ProviderDiscoveryClient(this.server.url(\"\").toString()); ProviderConfiguration providerConfiguration = client.discover(); assertNotNull(providerConfiguration); assertEquals(\"https: assertEquals(\"https: assertEquals(\"https: assertEquals(\"https: assertEquals(\"https: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void logEvent(final Map<String, Object> eventData) { final Map<String, Object> eventDataCopy = new HashMap<>(eventData); String eventName = (String) eventDataCopy.get(Constants.EVENT_NAME); eventDataCopy.remove(Constants.EVENT_NAME); mixpanelAPI.trackMap(eventName, eventDataCopy); }### Assistant: @Test @SuppressWarnings(\"unchecked\") public void logEvent() { this.subject.logEvent(new EventBuilder(\"test\") .setAction(\"an action\") .get()); verify(this.mixpanelAPI).trackMap(eq(\"test\"), anyMap()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public DockerClient createClientWithAPINegotiation(DockerClientConfig config) { DockerCloudUtils.requireNonNull(config, \"Client configuration cannot be null.\"); DockerClient client = createClient(config); DockerAPIVersion targetVersion = client.getApiVersion(); negotiate(client, targetVersion); return client; }### Assistant: @Test public void apiNegotiationTargetVersionTooOld() { TestFactory clientFactory = createTestFactory(); DockerClientConfig config = new DockerClientConfig(TestDockerClient.TEST_CLIENT_URI, DockerAPIVersion.parse(\"7.0\")); clientFactory.fixture = clt -> { clt.setMinAPIVersion(DockerAPIVersion.parse(\"8.0\")); clt.setSupportedAPIVersion(DockerAPIVersion.parse(\"9.99\")); }; TestDockerClient client = (TestDockerClient) clientFactory.createClientWithAPINegotiation(config); assertThat(client.getApiVersion()).isEqualTo(DockerAPIVersion.parse(\"8.0\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void validate(final KiePMMLModel toValidate) { if (!(toValidate instanceof KiePMMLMiningModel)) { throw new KiePMMLModelException(String.format(EXPECTED_A_KIE_PMMLMINING_MODEL_RECEIVED, toValidate.getClass().getName())); } validateMining((KiePMMLMiningModel) toValidate); }### Assistant: @Test(expected = KiePMMLModelException.class) public void validateNoKiePMMLMiningModel() { String name = \"NAME\"; KiePMMLModel kiePMMLModel = new KiePMMLModel(name, Collections.emptyList()) { @Override public Object evaluate(Object knowledgeBase, Map<String, Object> requestData) { return null; } }; evaluator.validate(kiePMMLModel); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String createFactoryConfiguration(String factoryPid) throws IOException { return createFactoryConfigurationForLocation(factoryPid, null); }### Assistant: @Test public void testCreateFactoryConfiguration() throws Exception { org.osgi.service.cm.ConfigurationAdmin admin = mock(org.osgi.service.cm.ConfigurationAdmin.class); String fpid = \"org.apache.aries.jmx.mock.factory\"; Configuration config = mock(Configuration.class); when(admin.createFactoryConfiguration(eq(fpid))).thenReturn(config); when(admin.createFactoryConfiguration(eq(fpid), anyString())).thenReturn(config); when(config.getPid()).thenReturn(fpid + \"-1260133982371-0\"); ConfigurationAdmin mbean = new ConfigurationAdmin(admin); assertEquals(fpid + \"-1260133982371-0\", mbean.createFactoryConfiguration(fpid)); assertEquals(fpid + \"-1260133982371-0\", mbean.createFactoryConfigurationForLocation(fpid, \"/bundlex\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ComMobileArea findMobileArea(ComMobileArea comMobileArea) { return comMobileAreaDAO.findMobileArea(comMobileArea); }### Assistant: @Test public void testFindMobileArea() { ComMobileArea cm=new ComMobileArea(); cm.setMobileNumber(\"1381780\"); cm=comMobileAreaService.findMobileArea(cm); Assert.assertNotNull(cm); Assert.assertEquals(cm.getProvinceName(), \"\u4e0a\u6d77\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean containsObject( @Nullable IdentifiableObject object ) { if ( object == null ) { return false; } return typedIndexedObjectContainer.containsObject( object ); }### Assistant: @Test public void containsObjectNot() { Assert.assertFalse( objectBundle.containsObject( new Attribute() ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getComplexity() { return complexity; }### Assistant: @Test public void complexity() throws IOException { final CharStream charStream = CharStreams.fromStream(this.getClass().getResourceAsStream(\"/dart/complexity.dart\")); final Dart2Lexer lexer = new Dart2Lexer(charStream); lexer.removeErrorListeners(); final CommonTokenStream stream = new CommonTokenStream(lexer); stream.fill(); final Dart2Parser parser = new Dart2Parser(stream); parser.removeErrorListeners(); final ParseTree root = parser.compilationUnit(); CyclomaticComplexityVisitor visitor = new CyclomaticComplexityVisitor(); CustomTreeVisitor customTreeVisitor = new CustomTreeVisitor(visitor); customTreeVisitor.visit(root); assertThat(visitor.getComplexity()).isEqualTo(7); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getTaskType(String queue) { if(StringUtils.isBlank(queue)) { return StringUtils.EMPTY; } int domainSeperatorIndex = StringUtils.indexOf(queue, DOMAIN_SEPARATOR); int startIndex = 0; if (domainSeperatorIndex == -1) { startIndex = 0; } else { startIndex = domainSeperatorIndex +1 ; } int endIndex = StringUtils.indexOf(queue, EXECUTION_NAME_SPACE_SEPRATOR); if (endIndex == -1) { endIndex = StringUtils.lastIndexOf(queue, ISOLATION_SEPARATOR); } if (endIndex == -1) { endIndex = queue.length(); } return StringUtils.substring(queue, startIndex, endIndex); }### Assistant: @Test public void testGetTaskTypeWithoutDomainAndWithExecutionNameSpace() { Assert.assertEquals(\"taskType\",QueueUtils.getTaskType(\"taskType@eN\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static MetadataBuilder metadataBuilderFrom(final Metadata metadata) { return new DefaultJsonMetadata.Builder(metadata); }### Assistant: @Test(expected = IllegalArgumentException.class) public void shouldThrowExceptionIfNameIsEmpty() throws Exception { metadataBuilderFrom(createObjectBuilder() .add(ID, UUID_ID) .add(NAME, \"\") .build() ).build(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte buildRefArDo(short dataOffset, short dataOffsetMax, byte[] buf, short ofs, RuleEntry entry) { if (ofs >= dataOffset && ofs < dataOffsetMax) { buf[(short) (ofs - dataOffset)] = (byte) 0xE2; } ofs++; byte refDoLen = buildRefDo(dataOffset, dataOffsetMax, buf, (short) (ofs + 1), entry); byte arDoLen = buildArDo(dataOffset, dataOffsetMax, buf, (short) (ofs + refDoLen + 1), entry); if (ofs >= dataOffset && ofs < dataOffsetMax) { buf[(short) (ofs - dataOffset)] = (byte) (refDoLen + arDoLen); } return (byte) (refDoLen + arDoLen + 2); }### Assistant: @Test public void refArDoTest() throws CardException { byte[] data = new byte[VALID_REF_AR_DO.length]; assertEquals(VALID_REF_AR_DO.length, AramUtils.buildRefArDo(DEFAULT_DATA_OFFSET, DEFAULT_DATA_OFFSET_MAX, data, (short) 0, entry)); assertArrayEquals(VALID_REF_AR_DO, data); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void configure(Map<String, String> conf, Binder binder) { try { configureFunctions(binder, Selectors.listAt(spec, Pointers.FUNCTIONS_POINTER)); configureRouters(binder, Selectors.listAt(spec, Pointers.ROUTERS_POINTER)); configureIngress(binder, Selectors.listAt(spec, Pointers.INGRESSES_POINTER)); } catch (Throwable t) { throw new ModuleConfigurationException( format(\"Error while parsing module at %s\", moduleUrl), t); } }### Assistant: @Test public void testIngresses() { StatefulFunctionModule module = fromPath(\"bar-module/module.yaml\"); StatefulFunctionsUniverse universe = emptyUniverse(); module.configure(Collections.emptyMap(), universe); assertThat( universe.ingress(), hasKey(new IngressIdentifier<>(Message.class, \"com.mycomp.igal\", \"names\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull public Observable<Map<String, ?>> getAllStream() { return getAllOnce() .toObservable() .mergeWith(Observable.create(emitter -> { RxAllPreferencesListener listener = new RxAllPreferencesListener(emitter); registerRxPreferenceListener(listener, emitter); })); }### Assistant: @Test public void getAllStream_emitsCurrentValueOnSubscribe() { final Map<String, ?> returnedMap = Collections.singletonMap(\"Test dummy long key\", 23453534523L); when(mockSharedPreferences.getAll()).thenReturn((Map) returnedMap); final Disposable subscription = rxPreferences.getAllStream() .subscribeOn(testScheduler) .subscribe(); subscriptions.add(subscription); verifyGetStreamBeforeSubscribe(subscription); advanceScheduler(); verifyNoMoreInteractions(mockSharedPreferencesEditor); verify(mockSharedPreferences).getAll(); verify(mockSharedPreferences).registerOnSharedPreferenceChangeListener(isA(RxAllPreferencesListener.class)); verifyNoMoreInteractions(mockSharedPreferences); assertFalse(subscription.isDisposed()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<JoinHelper<K, V>> getAllHelpers() { return allHelpers; }### Assistant: @Test public void testQueryWithMultiplePatterns() { List<JoinHelper<String, String>> consumers1; JoinHelper<String, String> consumer1a, consumer1b, consumer1c; consumers1 = addQuery(\"query1\", graphPattern( tuplePattern(\"?x\", \"knows\", \"?y\"), tuplePattern(\"?y\", \"name\", \"'Ford Prefect'\"), tuplePattern(\"?y\", \"nickname\", \"'Ix'\"))).getAllHelpers(); consumer1a = consumers1.get(0); consumer1b = consumers1.get(1); consumer1c = consumers1.get(2); assertArrayEquals(new String[]{\"?x\", \"?y\"}, consumer1a.getKeys()); assertArrayEquals(new String[]{\"?y\"}, consumer1b.getKeys()); assertArrayEquals(new String[]{\"?y\"}, consumer1c.getKeys()); queryIndex.add(tuple(\"Arthur\", \"knows\", \"Ford\"), StreamProcessor.NEVER_EXPIRE); expectIndexSolutions(consumer1a, 1); expectSolutions(consumer1a, 1, \"?x\", \"Arthur\"); expectSolutions(consumer1a, 1, \"?y\", \"Ford\"); expectIndexSolutions(consumer1b, 0); expectIndexSolutions(consumer1c, 0); expectQuerySolutions(\"query1\", 0); queryIndex.add(tuple(\"Ford\", \"nickname\", \"'Ix'\"), StreamProcessor.NEVER_EXPIRE); expectIndexSolutions(consumer1a, 1); expectIndexSolutions(consumer1b, 0); expectIndexSolutions(consumer1c, 1); expectSolutions(consumer1c, 1, \"?y\", \"Ford\"); expectQuerySolutions(\"query1\", 0); queryIndex.add(tuple(\"Ford\", \"name\", \"'Ford Prefect'\"), StreamProcessor.NEVER_EXPIRE); expectIndexSolutions(consumer1a, 1); expectIndexSolutions(consumer1b, 1); expectSolutions(consumer1b, 1, \"?y\", \"Ford\"); expectIndexSolutions(consumer1c, 1); expectQuerySolutions(\"query1\", 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Component> findComponentChildren( String applicationName, String componentName ) { this.logger.finer( \"Listing possible children components for component \" + componentName + \"...\" ); WebResource path = this.resource.path( UrlConstants.APP ).path( applicationName ).path( \"components/children\" ); if( componentName != null ) path = path.queryParam( \"component-name\", componentName ); List<Component> result = this.wsClient.createBuilder( path ) .accept( MediaType.APPLICATION_JSON ) .get( new GenericType<List<Component>> () {}); if( result != null ) { this.logger.finer( result.size() + \" possible children was or were found for \" + componentName + \".\" ); } else { this.logger.finer( \"No possible child was found for \" + componentName + \".\" ); result = new ArrayList<>( 0 ); } return result; }### Assistant: @Test public void testFindComponentChildren() throws Exception { List<Component> components = this.client.getApplicationDelegate().findComponentChildren( \"inexisting\", \"\" ); Assert.assertEquals( 0, components.size()); components = this.client.getApplicationDelegate().findComponentChildren( this.app.getName(), \"inexisting-component\" ); Assert.assertEquals( 0, components.size()); components = this.client.getApplicationDelegate().findComponentChildren( this.app.getName(), null ); Assert.assertEquals( 1, components.size()); Assert.assertTrue( components.contains( this.app.getMySqlVm().getComponent())); components = this.client.getApplicationDelegate().findComponentChildren( this.app.getName(), this.app.getMySqlVm().getComponent().getName()); Assert.assertEquals( 2, components.size()); Assert.assertTrue( components.contains( this.app.getMySql().getComponent()));; Assert.assertTrue( components.contains( this.app.getTomcat().getComponent()));; }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String[] wrapString(@Nonnull String str, int maxWidth, @Nullable String[] output) { if (output == null) { output = new String[(int)((str.length() / maxWidth) * 1.5d + 1)]; } int lineStart = 0; int arrayIndex = 0; int i; for (i=0; i<str.length(); i++) { char c = str.charAt(i); if (c == '\\n') { output = addString(output, str.substring(lineStart, i), arrayIndex++); lineStart = i+1; } else if (i - lineStart == maxWidth) { output = addString(output, str.substring(lineStart, i), arrayIndex++); lineStart = i; } } if (lineStart != i || i == 0) { output = addString(output, str.substring(lineStart), arrayIndex++, output.length+1); } if (arrayIndex < output.length) { output[arrayIndex] = null; } return output; }### Assistant: @Test public void testWrapString() { validateResult( new String[]{\"abc\", \"abcdef\", \"abcdef\"}, StringWrapper.wrapString(\"abc\\nabcdefabcdef\", 6, null)); validateResult( new String[]{\"abc\"}, StringWrapper.wrapString(\"abc\", 6, new String[3])); validateResult( new String[]{\"abc\"}, StringWrapper.wrapString(\"abc\", 6, new String[0])); validateResult( new String[]{\"abc\"}, StringWrapper.wrapString(\"abc\", 6, new String[1])); validateResult( new String[]{\"\"}, StringWrapper.wrapString(\"\", 6, new String[3])); validateResult( new String[]{\"abcdef\"}, StringWrapper.wrapString(\"abcdef\", 6, new String[3])); validateResult( new String[]{\"abcdef\", \"abcdef\"}, StringWrapper.wrapString(\"abcdef\\nabcdef\", 6, new String[3])); validateResult( new String[]{\"abc\", \"\", \"def\"}, StringWrapper.wrapString(\"abc\\n\\ndef\", 6, new String[3])); validateResult( new String[]{\"\", \"abcdef\"}, StringWrapper.wrapString(\"\\nabcdef\", 6, new String[3])); validateResult( new String[]{\"\", \"\", \"abcdef\"}, StringWrapper.wrapString(\"\\n\\nabcdef\", 6, new String[3])); validateResult( new String[]{\"\", \"\", \"abcdef\"}, StringWrapper.wrapString(\"\\n\\nabcdef\", 6, new String[4])); validateResult( new String[]{\"\", \"\", \"abcdef\", \"\"}, StringWrapper.wrapString(\"\\n\\nabcdef\\n\\n\", 6, new String[4])); validateResult( new String[]{\"\", \"\", \"abcdef\", \"a\", \"\"}, StringWrapper.wrapString(\"\\n\\nabcdefa\\n\\n\", 6, new String[4])); validateResult( new String[]{\"\", \"\", \"abcdef\", \"a\", \"\"}, StringWrapper.wrapString(\"\\n\\nabcdefa\\n\\n\", 6, new String[0])); validateResult( new String[]{\"\", \"\", \"abcdef\", \"a\", \"\"}, StringWrapper.wrapString(\"\\n\\nabcdefa\\n\\n\", 6, new String[5])); validateResult( new String[]{\"\", \"\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"a\", \"\"}, StringWrapper.wrapString(\"\\n\\nabcdefa\\n\\n\", 1, new String[5])); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder builder() { return new Builder(); }### Assistant: @Test(expected = NullPointerException.class) public void ensureAlbumNullIdentityThrows() { Album a = Album.builder().setName(\"Album1\").build(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static PGPPublicKey mergeSignatures( PGPPublicKey targetKey, PGPPublicKey sourceKey ) throws PGPException { if ( !Objects.deepEquals( targetKey.getFingerprint(), sourceKey.getFingerprint() ) ) { throw new IllegalArgumentException( \"Signature merge can be done for different instances of the same public key only\" ); } return copySignatures( targetKey, sourceKey ); }### Assistant: @Test( expected = IllegalArgumentException.class ) public void testMergeSignatures_withDifferentPubKeys() throws Exception { PGPPublicKey alicePuKey = PGPTestDataFactory.getPublicKey( \"alice\" ); PGPPublicKey applePubKey = PGPTestDataFactory.getPublicKey( \"apple\" ); PGPSignatureUtil.mergeSignatures( alicePuKey, applePubKey ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") @Override public Optional<T4> get4() { return Optional.ofNullable((T4) values[4]); }### Assistant: @Test void get4Test() { assertEquals(4, (int) instance.get4().orElseThrow(NoSuchElementException::new)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void deleteDirectoryIgnoreException(File directory) { try { FileUtils.deleteDirectory(directory); } catch (Exception e) { LOGGER.warn(String.format(\"Failed to delete \\\"%s\\\" directory.\", directory), e); } }### Assistant: @Test public void testDeleteDirectoryIgnoreException() throws IOException { File testFile = createLocalFile(localTempPath.toString(), \"SOME_FILE\", FILE_SIZE_1_KB); HerdFileUtils.deleteDirectoryIgnoreException(localTempPath.toFile()); assertFalse(testFile.exists()); assertFalse(localTempPath.toFile().exists()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void prepare(final IObject query) throws TaskPrepareException { try { isActiveField.out(query, false); updateTask = IOC.resolve( Keys.getOrAdd(\"db.collection.upsert\"), connection, collectionNameField.in(query), documentField.in(query) ); } catch (InvalidArgumentException | ReadValueException | ChangeValueException | ResolutionException e) { throw new TaskPrepareException(\"Can't prepare query for delete from cached collection\", e); } }### Assistant: @Test public void ShouldCorrectPrepareObjectForDeleting() throws Exception { IObject query = mock(IObject.class); IObject doc = mock(IObject.class); when(collectionNameField.in(query)).thenReturn(\"collectionName\"); when(documentField.in(query)).thenReturn(doc); task.prepare(query); verify(isActiveField).out(query, false); verifyStatic(); IOC.resolve( Keys.getOrAdd(\"db.collection.upsert\"), connection, \"collectionName\", doc ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: abstract ID normalize();### Assistant: @Test public void testNormalize() { assertEquals(zero, zero.normalize()); assertEquals(one, one.normalize()); assertEquals(zero, zeroZero.normalize()); assertEquals(one, oneOne.normalize()); assertEquals(zeroOne, zeroOne.normalize()); assertEquals(oneZero, oneZero.normalize()); assertEquals(zero, IDs.with(zero, zeroZero).normalize()); assertEquals(zero, IDs.with(zeroZero, zero).normalize()); assertEquals(oneZero, IDs.with(one, zeroZero).normalize()); assertEquals(zeroOne, IDs.with(zeroZero, one).normalize()); assertEquals(one, IDs.with(one, oneOne).normalize()); assertEquals(one, IDs.with(oneOne, one).normalize()); assertEquals(zeroOne, IDs.with(zero, oneOne).normalize()); assertEquals(oneZero, IDs.with(oneOne, zero).normalize()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onRender(Canvas canvas, RectF plotArea, Segment series, SegmentFormatter formatter, RenderStack stack) { stack.disable(getClass()); float radius = getRadius(plotArea); PointF origin = new PointF(plotArea.centerX(), plotArea.centerY()); double[] values = getValues(); double scale = calculateScale(values); float offset = degsToScreenDegs(startDegs); RectF rec = new RectF(origin.x - radius, origin.y - radius, origin.x + radius, origin.y + radius); int i = 0; for (SeriesBundle<Segment, ? extends SegmentFormatter> sfPair : getSeriesAndFormatterList()) { float lastOffset = offset; float sweep = (float) (scale * (values[i]) * extentDegs); offset += sweep; drawSegment(canvas, rec, sfPair.getSeries(), sfPair.getFormatter(), radius, lastOffset, sweep); i++; } }### Assistant: @Test public void testOnRender() throws Exception { Segment segment = spy(new Segment(\"My Segment\", 100)); SegmentFormatter formatter = spy( new SegmentFormatter(Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN)); PieRenderer pr = formatter.getRendererInstance(pieChart); PieRenderer renderer = spy(pr); doReturn(renderer.getClass()).when(formatter).getRendererClass(); doReturn(renderer).when(formatter).getRendererInstance(any(PieChart.class)); pieChart.addSegment(segment, formatter); renderer.onRender(canvas, plotArea, segment, formatter, renderStack); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FilterResult runFilter(VariantEvaluation variantEvaluation) { if (variantEvaluation.isWhiteListed()) { return PASS; } VariantEffect effect = variantEvaluation.getVariantEffect(); if (offTargetVariantTypes.contains(effect)) { return FAIL; } return PASS; }### Assistant: @Test public void testMissenseVariantPassesFilter() { FilterResult filterResult = instance.runFilter(missensePassesFilter); FilterTestHelper.assertPassed(filterResult); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void rebootDbInstance(String dbName) { if (dbName == null || dbName.isEmpty()) { throw new InvalidInputDataException(\"Null/Empty db name\"); } DBInstance dbInstance = rdsDelegator.getAmazonRds().rebootDBInstance( new RebootDBInstanceRequest().withDBInstanceIdentifier(dbName)); if (dbInstance == null) { throw new com.intuit.cloudraider.exceptions.ResourceNotFoundException(\"Unable to reboot DB instance: \" + dbName); } }### Assistant: @Test (expected = InvalidInputDataException.class) public void testRebootMissingDbInstance() { rdsRaider.rebootDbInstance(\"\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected int indexOf(byte[] file, byte[] occurence) { if (file != null && occurence != null) { int len = occurence.length; int limit = file.length - len; for (int i = 0; i <= limit; i++) { int k = 0; for (; k < len; k++) { if (occurence[k] != file[i + k]) { break; } } if (k == len) { return i; } } } return -1; }### Assistant: @Test public void should_find_a_byte_array_in_an_another_on_start_position() { assertThat(loader.indexOf(\"mon exemple complet\".getBytes(), \"mon ex\".getBytes())).isEqualTo(0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object executeRequest(Request request, Type returnType) { this.validateNotNullArguments(request, returnType); String response = this.executeRequest(request); if (String.class.equals(returnType)) { return response; } return adaptor.buildResource(response, returnType); }### Assistant: @Test public void shouldExecuteRequestWithClass() { given(httpClient.sendRequest(anyString(), any(Request.class))).willReturn(ANY_RESOURCE); Request request = new Request(HttpMethod.GET, ANY_URI_STRING); this.baseClient.executeRequest(request, Object.class); then(httpClient).should().sendRequest(anyString(), eq(request)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder builder() { return new Builder(); }### Assistant: @Test public void labelsMustSpanEntireSegment() { Throwable thrown = Assertions.assertThrows(InvalidPatternException.class, () -> { String target = \"/{foo}baz\"; SmithyPattern.builder() .segments(parser(target)) .pattern(target) .build(); }); assertThat(thrown.getMessage(), containsString(\"Literal segments must not contain\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void executeSystemTask(WorkflowSystemTask systemTask, String taskId, int callbackTime) { try { Task task = executionDAOFacade.getTaskById(taskId); if (task == null) { LOGGER.error(\"TaskId: {} could not be found while executing SystemTask\", taskId); return; } LOGGER.debug(\"Task: {} fetched from execution DAO for taskId: {}\", task, taskId); String queueName = QueueUtils.getQueueName(task); if (task.getStatus().isTerminal()) { LOGGER.info(\"Task {}/{} was already completed.\", task.getTaskType(), task.getTaskId()); queueDAO.remove(queueName, task.getTaskId()); return; } String workflowId = task.getWorkflowInstanceId(); Workflow workflow = executionDAOFacade.getWorkflowById(workflowId, true); if (task.getStartTime() == 0) { task.setStartTime(System.currentTimeMillis()); Monitors.recordQueueWaitTime(task.getTaskDefName(), task.getQueueWaitTime()); } if (workflow.getStatus().isTerminal()) { LOGGER.info(\"Workflow {} has been completed for {}/{}\", workflow.getWorkflowId(), systemTask.getName(), task.getTaskId()); if (!task.getStatus().isTerminal()) { task.setStatus(CANCELED); } executionDAOFacade.updateTask(task); queueDAO.remove(queueName, task.getTaskId()); return; } if (task.getStatus().equals(SCHEDULED)) { if (executionDAOFacade.exceedsInProgressLimit(task)) { LOGGER.warn(\"Concurrent Execution limited for {}:{}\", taskId, task.getTaskDefName()); queueDAO.postpone(queueName, taskId, task.getWorkflowPriority(), queueTaskMessagePostponeSeconds); return; } if (task.getRateLimitPerFrequency() > 0 && executionDAOFacade.exceedsRateLimitPerFrequency(task, metadataDAO.getTaskDef(task.getTaskDefName()))) { LOGGER.warn(\"RateLimit Execution limited for {}:{}, limit:{}\", taskId, task.getTaskDefName(), task.getRateLimitPerFrequency()); queueDAO.postpone(queueName, taskId, task.getWorkflowPriority(), queueTaskMessagePostponeSeconds); return; } } LOGGER.debug(\"Executing {}/{}-{}\", task.getTaskType(), task.getTaskId(), task.getStatus()); if (task.getStatus() == SCHEDULED || !systemTask.isAsyncComplete(task)) { task.setPollCount(task.getPollCount() + 1); executionDAOFacade.updateTask(task); } deciderService.populateTaskData(task); if (systemTask.isAsyncComplete(task) && task.getStatus() != SCHEDULED) { queueDAO.remove(QueueUtils.getQueueName(task), task.getTaskId()); return; } switch (task.getStatus()) { case SCHEDULED: systemTask.start(workflow, task, this); break; case IN_PROGRESS: systemTask.execute(workflow, task, this); break; default: break; } if (!task.getStatus().isTerminal()) { task.setCallbackAfterSeconds(callbackTime); } updateTask(new TaskResult(task)); LOGGER.debug(\"Done Executing {}/{}-{} output={}\", task.getTaskType(), task.getTaskId(), task.getStatus(), task.getOutputData().toString()); } catch (Exception e) { Monitors.error(className, \"executeSystemTask\"); LOGGER.error(\"Error executing system task - {}, with id: {}\", systemTask, taskId, e); } }### Assistant: @Test public void testExecuteSystemTaskWithAsyncComplete() { String workflowId = \"workflow-id\"; Terminate terminate = new Terminate(); String task1Id = IDGenerator.generate(); Task task1 = new Task(); task1.setTaskType(TaskType.WAIT.name()); task1.setReferenceTaskName(\"waitTask\"); task1.setWorkflowInstanceId(workflowId); task1.setScheduledTime(System.currentTimeMillis()); task1.setTaskId(task1Id); task1.getInputData().put(\"asyncComplete\", true); task1.setStatus(Status.IN_PROGRESS); Workflow workflow = new Workflow(); workflow.setWorkflowId(workflowId); workflow.setStatus(Workflow.WorkflowStatus.RUNNING); when(executionDAOFacade.getTaskById(anyString())).thenReturn(task1); when(executionDAOFacade.getWorkflowById(anyString(), anyBoolean())).thenReturn(workflow); workflowExecutor.executeSystemTask(terminate, task1Id,30); assertEquals(Status.IN_PROGRESS, task1.getStatus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FEELFnResult<BigDecimal> invoke(@ParameterName( \"list\" ) List list) { if ( list == null ) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"cannot be null\")); } return FEELFnResult.ofResult( BigDecimal.valueOf( list.size() ) ); }### Assistant: @Test public void invokeParamListNull() { FunctionTestUtil.assertResultError(countFunction.invoke((List) null), InvalidParametersEvent.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: synchronized void decrementSafeBlockCount(BlockInfo b) { assert namesystem.hasWriteLock(); if (status == BMSafeModeStatus.OFF) { return; } final int safeNumberOfNodes = b.isStriped() ? ((BlockInfoStriped)b).getRealDataBlockNum() : safeReplication; BlockInfo storedBlock = blockManager.getStoredBlock(b); if (storedBlock.isComplete() && blockManager.countNodes(b).liveReplicas() == safeNumberOfNodes - 1) { this.blockSafe--; assert blockSafe >= 0; checkSafeMode(); } }### Assistant: @Test(timeout = 30000) public void testDecrementSafeBlockCount() { bmSafeMode.activate(BLOCK_TOTAL); Whitebox.setInternalState(bmSafeMode, \"extension\", 0); mockBlockManagerForBlockSafeDecrement(); setBlockSafe(BLOCK_THRESHOLD); for (long i = BLOCK_THRESHOLD; i > 0; i--) { BlockInfo blockInfo = mock(BlockInfo.class); bmSafeMode.decrementSafeBlockCount(blockInfo); assertEquals(i - 1, getblockSafe()); assertTrue(bmSafeMode.isInSafeMode()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isBuilding(SoftwareProjectId softwareProjectId, String buildId) throws ProjectNotFoundException, BuildNotFoundException { checkConnected(); checkSoftwareProjectId(softwareProjectId); checkBuildId(buildId); try { TeamCityBuild build = teamCity.findRunningBuild(); return softwareProjectId.getProjectId().equals(build.getBuildType().getId()) && buildId.equals(build.getId()); } catch (TeamCityBuildNotFoundException e) { return false; } }### Assistant: @Test public void should_get_is_building() throws Exception { TeamCityBuild build = new TeamCityBuild(); build.setRunning(true); build.setId(\"1\"); TeamCityBuildType buildType = new TeamCityBuildType(); buildType.setId(\"projectId\"); build.setBuildType(buildType); when(teamCity.findRunningBuild()).thenReturn(build); boolean isBuilding = teamCityConnection.isBuilding(softwareProjectId(), \"1\"); assertTrue(isBuilding); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Character convert(String source) { int length = length(source); if (length == 0) { return null; } if (length > 1) { throw new IllegalArgumentException(\"The source String is more than one character!\"); } return source.charAt(0); }### Assistant: @Test public void testConvert() { assertEquals('t', converter.convert(\"t\")); assertNull(converter.convert(null)); assertThrows(IllegalArgumentException.class, () -> { converter.convert(\"ttt\"); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Statistics aggregateStatistics(Collection<Statistics> statistics) throws IllegalArgumentException{ if(statistics==null || statistics.size()==0){ throw new IllegalArgumentException(\"Illegal number of statistics to aggregate\"); } String delimeter = \", \"; if(statistics.size()==1) return statistics.iterator().next(); Integer contributers = 0, externalContributors = 0, forks = 0, size = 0, stars = 0, members = 0, privateProjects = 0, languages = 0, publicProjects = 0, tags = 0, teams = 0; Date snapshotDate = null; Set<String> organizationList = new HashSet<>(); for (Statistics s : statistics) { contributers = add(contributers, s.getAllContributorsCount()); externalContributors = add(externalContributors, s.getExternalContributorsCount()); forks = add(forks, s.getAllForksCount()); size = add(size, s.getAllSizeCount()); stars = add(stars, s.getAllStarsCount()); members = add(members, s.getMembersCount()); privateProjects = add(privateProjects, s.getPrivateProjectCount()); languages = add(languages, s.getProgramLanguagesCount()); publicProjects = add(publicProjects, s.getPublicProjectCount()); tags = add(tags, s.getTagsCount()); teams = add(teams, s.getTeamsCount()); organizationList.add(s.getOrganizationName()); if(snapshotDate==null) snapshotDate = s.getSnapshotDate(); else if(snapshotDate.before(s.getSnapshotDate())) snapshotDate = s.getSnapshotDate(); } String organizations = null; for(String org : organizationList){ if (organizations == null) organizations = org; else organizations += delimeter + org; } Statistics s = new Statistics(new Double(Math.random()*10000).intValue() , snapshotDate); s.setAllContributorsCount(contributers); s.setExternalContributorsCount(externalContributors); s.setAllForksCount(forks); s.setAllSizeCount(size); s.setAllStarsCount(stars); s.setMembersCount(members); s.setOrganizationName(organizations); s.setPrivateProjectCount(privateProjects); s.setProgramLanguagesCount(languages); s.setPublicProjectCount(publicProjects); s.setTagsCount(tags); s.setTeamsCount(teams); return s; }### Assistant: @Test(expected = IllegalArgumentException.class) public void testAggregateNullStatistics() { StatisticsService.aggregateStatistics(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings({\"unchecked\"}) public <E extends Enum<E>> Config<E> getConfig(Class<E> clazz) { return (Config<E>) Preconditions.checkNotNull(config.get(clazz), \"No config loaded for root: %s\", clazz.getSimpleName()); }### Assistant: @Test void loadConfigFromResource_whenUsingAlternateArg() throws ConfigKeysNotRecognisedException { ConfigManager cm = new ConfigManager.Builder(new String[] { \"-a=test-config-resource.properties\" }).withConfig(TestConfig.class).build(); assertThat(cm.getConfig(TestConfig.class).areKeyAndValueDefined(TestConfig.FOO)).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Object toArray(Object list, Class<?> clazz) { if (list == null) return Array.newInstance(clazz, 0); if (list instanceof List) { List<?> l = (List<?>) list; if (clazz.isPrimitive()) { Object a = Array.newInstance(clazz, l.size()); for (int i = 0; i < l.size(); i++) Array.set(a, i, l.get(i)); return a; } return l.toArray((Object[]) Array.newInstance(clazz, l.size())); } Object a = Array.newInstance(clazz, 1); Array.set(a, 0, list); return a; }### Assistant: @Test void testToArray_NullInput_Object() { Object input = null; Object arr = LazyList.toArray(input, Object.class); assertNotNull(arr); assertTrue(arr.getClass().isArray()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void removeDuplicates(TopicMapIF topicmap) { int batchSize = 50; Iterator<TopicIF> it = topicmap.getTopics().iterator(); while (it.hasNext()) { List<TopicIF> batch = CollectionUtils.nextBatch(it, batchSize); prefetchTopics(topicmap, batch); Iterator<TopicIF> iter = batch.iterator(); while (iter.hasNext()) { removeDuplicates(iter.next()); } } ClassInstanceIndexIF cindex = (ClassInstanceIndexIF)topicmap.getIndex(\"net.ontopia.topicmaps.core.index.ClassInstanceIndexIF\"); Collection<AssociationIF> assocs; Iterator<TopicIF> atypes = new ArrayList<TopicIF>(cindex.getAssociationTypes()).iterator(); while (atypes.hasNext()) { TopicIF atype = atypes.next(); assocs = cindex.getAssociations(atype); if (!assocs.isEmpty()) removeDuplicateAssociations(assocs); } assocs = cindex.getAssociations(null); if (!assocs.isEmpty()) removeDuplicateAssociations(assocs); }### Assistant: @Test public void testTopicNameItemIds() throws MalformedURLException { TopicIF topic = builder.makeTopic(); TopicNameIF bn = builder.makeTopicName(topic, \"test\"); bn.addItemIdentifier(new URILocator(\"http: TopicNameIF bn2 = builder.makeTopicName(topic, \"test\"); bn2.addItemIdentifier(new URILocator(\"http: DuplicateSuppressionUtils.removeDuplicates(topic); Assert.assertTrue(\"duplicate base names were not removed\", topic.getTopicNames().size() == 1); bn = (TopicNameIF) topic.getTopicNames().iterator().next(); Assert.assertTrue(\"item IDs were not merged\", bn.getItemIdentifiers().size() == 2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void afterConnectionEstablished(WebSocketSession session) throws Exception { sessionId = session.getId(); Map<String, Object> attributes = session.getAttributes(); version = (String) attributes.get(VERSION); roadName = (String) attributes.get(ROAD_NAME); streamName = (String) attributes.get(STREAM_NAME); DefaultOffset defaultOffset = (DefaultOffset) attributes.get(DEFAULT_OFFSET); @SuppressWarnings(\"unchecked\") Set<Sensitivity> grants = (Set<Sensitivity>) attributes.get(GRANTS); Authentication authentication = (Authentication) session.getPrincipal(); RoadConsumer consumer; metrics = metricsFactory.create(roadName, streamName); try { authorisation.checkAuthorisation(authentication, roadName, grants); consumer = consumerFactory.create(roadName, streamName, defaultOffset); MessageFunction messageFunction = messageFunctionFactory.create(roadName, grants); EventSender sender = bytes -> sendEvent(session, bytes); service = serviceFactory.create(version, consumer, messageFunction, sender, metrics); } catch (UnknownRoadException e) { metrics.markRoadNotFound(); session.close(); throw e; } Scheduler scheduler = Schedulers.newSingle( String.format(\"offramp[v%s,%s.%s:%s]\", version, roadName, streamName, sessionId)); metrics.incrementActiveConnections(); Mono<Void> mono = Mono .fromRunnable(service) .subscribeOn(scheduler) .doOnError(t -> true, t -> { log.error(\"Road: {}, stream: {}, sessionId: {} - Error in OfframpService\", roadName, streamName, sessionId, t); }) .doOnSuccess(s -> { log.info(\"Road: {}, stream: {}, sessionId: {} - OfframpService Completed\", roadName, streamName, sessionId); }) .doOnTerminate(() -> { disposables.dispose(); metrics.decrementActiveConnections(); }).then(); disposables.add(() -> close(service)); disposables.add(() -> close(consumer)); disposables.add(() -> close(() -> session.close(SERVER_ERROR))); disposables.add(scheduler); disposables.add(mono.subscribe()); log.info(\"Road: {}, stream: {}, sessionId: {} - Connection established with defaultOffset: {}\", roadName, streamName, sessionId, defaultOffset); metrics.markConnectionEstablished(); }### Assistant: @Test public void afterConnectionEstablished() throws Exception { underTest.afterConnectionEstablished(session); verify(metrics).markConnectionEstablished(); assertThat(underTest.getService(), is(service)); assertThat(underTest.getMetrics(), is(metrics)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public float calculateSquareRootRecursive(int number) { return sqrtRecursiveInner(number, 0, number); }### Assistant: @Test public void shouldCalculateNonPerfectSquaresRecursive() { float result = squareRoot.calculateSquareRootRecursive(7); assertEquals(2.64575f, result, DELTA); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull public static Function<SqlInsertRequest, Result<Long>> databaseInsertFunction( @NonNull final Supplier<Result<SQLiteDatabase>> database) { return new DatabaseFunction<>(database, new DatabaseInsertMerger()); }### Assistant: @Test public void shouldPassArgumentsToDatabaseInsert() throws Throwable { assertThat(databaseInsertFunction(databaseSupplier) .apply(sqlInsertRequest() .table(TABLE) .column(\"column\", \"value\") .compile()).succeeded(), is(true)); assertDatabaseContainsValue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static void process(List<String[]> segments, Consumer<String[]> consumer) { if (segments != null) { int index = 0; int length = segments.size(); for (String[] segment : segments) { String key = segment[0]; String value = segment[1]; if (key != null && value != null) { switch (key) { case HOST: if (length > 1 && index == 0) { value = \"*\"; } break; case PROFILE: case SERVER_GROUP: if (index == 0) { value = \"*\"; } break; case SERVER: case SERVER_CONFIG: if (index == 1) { value = \"*\"; } break; default: break; } } consumer.accept(new String[]{key, value}); index++; } } }### Assistant: @Test public void serverGroup() throws Exception { Fixture fixture = new Fixture.Builder(\"server-group\") .segments(\"server-group\", \"main-server-group\") .expected(\"server-group\", \"*\") .build(); SegmentProcessor.process(fixture.segments, consumer); assertFixture(fixture, consumer.result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: List<TIntArrayList> findSubnetworks( PrepEdgeFilter filter ) { final FlagEncoder encoder = filter.getEncoder(); final EdgeExplorer explorer = ghStorage.createEdgeExplorer(filter); int locs = ghStorage.getNodes(); List<TIntArrayList> list = new ArrayList<TIntArrayList>(100); final GHBitSet bs = new GHBitSetImpl(locs); for (int start = 0; start < locs; start++) { if (bs.contains(start)) continue; final TIntArrayList intList = new TIntArrayList(20); list.add(intList); new BreadthFirstSearch() { int tmpCounter = 0; @Override protected GHBitSet createBitSet() { return bs; } @Override protected final boolean goFurther( int nodeId ) { if (tmpCounter > maxEdgesPerNode.get()) maxEdgesPerNode.set(tmpCounter); tmpCounter = 0; intList.add(nodeId); return true; } @Override protected final boolean checkAdjacent( EdgeIteratorState edge ) { if (encoder.isForward(edge.getFlags()) || encoder.isBackward(edge.getFlags())) { tmpCounter++; return true; } return false; } }.start(explorer, start); intList.trimToSize(); } return list; }### Assistant: @Test public void testFindSubnetworks() { GraphHopperStorage g = createSubnetworkTestStorage(); PrepEdgeFilter filter = new PrepEdgeFilter(carFlagEncoder); PrepareRoutingSubnetworks instance = new PrepareRoutingSubnetworks(g, Collections.singleton(carFlagEncoder)); List<TIntArrayList> components = instance.findSubnetworks(filter); assertEquals(3, components.size()); assertEquals(Helper.createTList(0, 7, 3, 13, 5), components.get(0)); assertEquals(Helper.createTList(1, 8, 4, 2, 11, 12, 9, 15), components.get(1)); assertEquals(Helper.createTList(6, 14, 10), components.get(2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = \"/datasets/{id}/content\", method = RequestMethod.GET) @ApiOperation(value = \"Get a data set by id\", notes = \"Get a data set content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content.\") @Timed @ResponseBody public Callable<DataSet> get( @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\", value = \"Include metadata information in the response\") boolean metadata, @RequestParam(defaultValue = \"false\") @ApiParam(name = \"includeInternalContent\", value = \"Include internal content in the response\") boolean includeInternalContent, @RequestParam(defaultValue = \"-1\") @ApiParam(name = STORAGE_LIMIT, value = STORAGE_LIMIT) long limit, @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\", defaultValue = \"\") String filter, @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the requested data set\") String dataSetId) { return () -> { final Marker marker = Markers.dataset(dataSetId); LOG.debug(marker, \"Get data set #{}\", dataSetId); Stream<DataSetRow> stream = null; try { DataSetMetadata dataSetMetadata = dataSetMetadataRepository.get(dataSetId); assertDataSetMetadata(dataSetMetadata, dataSetId); DataSet dataSet = new DataSet(); if (metadata) { dataSet.setMetadata(conversionService.convert(dataSetMetadata, UserDataSetMetadata.class)); } stream = contentStore.stream(dataSetMetadata, limit); if (dataSetMetadata.getRowMetadata().getColumns().stream().anyMatch( c -> c.getStatistics().getWordPatternFrequencyTable().isEmpty())) { stream = insertWordPatternAnalysis(dataSetMetadata, stream); } if (!includeInternalContent) { LOG.debug(\"Skip internal content when serving data set #{} content.\", dataSetId); stream = stream.map(r -> { final Map<String, Object> values = r.values(); final Map<String, Object> filteredValues = new HashMap<>(values); values.forEach((k, v) -> { if (k != null && k.startsWith(FlagNames.INTERNAL_PROPERTY_PREFIX)) { filteredValues.remove(k); } }); filteredValues.put(FlagNames.TDP_ID, r.getTdpId()); return new DataSetRow(r.getRowMetadata(), filteredValues); }); } stream = stream.filter(filterService.build(filter, dataSetMetadata.getRowMetadata())); dataSet.setRecords(stream); return dataSet; } catch (Exception e) { if (stream != null) { stream.close(); } throw e; } finally { LOG.debug(marker, \"Get done.\"); } }; }### Assistant: @Test public void datePattern() throws Exception { int before = dataSetMetadataRepository.size(); String dataSetId = given() .body(IOUtils.toString(this.getClass().getResourceAsStream(\"../date_time_pattern.csv\"), UTF_8)) .queryParam(CONTENT_TYPE, \"text/csv\") .when() .post(\"/datasets\") .asString(); int after = dataSetMetadataRepository.size(); assertThat(after - before, is(1)); assertQueueMessages(dataSetId); final DataSetMetadata dataSetMetadata = dataSetMetadataRepository.get(dataSetId); assertNotNull(dataSetMetadata); final ColumnMetadata column = dataSetMetadata.getRowMetadata().getById(\"0001\"); assertThat(column.getType(), is(\"date\")); assertThat(column.getDomain(), is(\"\")); final Statistics statistics = mapper.readerFor(Statistics.class).readValue( this.getClass().getResourceAsStream(\"../date_time_pattern_expected.json\")); assertThat(column.getStatistics(), equalTo(statistics)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void installBackgroundPainter(JComponent c, String painter) { Class<?> clazz = c.getClass(); try { Method getter = clazz.getMethod(\"getBackgroundPainter\"); Method setter = clazz.getMethod(\"setBackgroundPainter\", Painter.class); Painter<?> p = (Painter<?>) getter.invoke(c); if (p == null || p instanceof UIResource) { setter.invoke(c, UIManagerExt.getPainter(painter)); } } catch (RuntimeException e) { throw e; } catch (Exception e) { throw new IllegalArgumentException(\"cannot set painter on \" + c.getClass()); } }### Assistant: @Test(expected = IllegalArgumentException.class) public void testInstallBackgroundPainterWithoutPainterCapable() { LookAndFeelAddons.installBackgroundPainter(new JPanel(), null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onUpdate(@NonNull Feature f, @NonNull Feature.Sample sample) { @FeatureSDLogging.LoggingStatus int status = FeatureSDLogging.getLoggingStatus(sample); switch (status) { case FeatureSDLogging.LOGGING_STARTED: isLogging=true; displayStopLoggingView(); break; case FeatureSDLogging.LOGGING_STOPPED: isLogging=false; displayStartLoggingView(); break; case FeatureSDLogging.LOGGING_IO_ERROR: isLogging=false; mView.displayIOErrorLoggingView(); break; case FeatureSDLogging.LOGGING_NO_SD: isLogging=false; mView.displayNoSDCardErrorLoggingView(); break; } mView.setLogInterval(FeatureSDLogging.getLogInterval(sample)); mView.setSelectedFeature(FeatureSDLogging.getLoggedFeature(mLogFeature.getParentNode(),sample)); }### Assistant: @Test public void ifTheSDIsNotPresentTheErrorIsShown(){ mPresenter.onUpdate(mFeature, SD_NOT_FOUND_SAMPLE); verify(mView).displayNoSDCardErrorLoggingView(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void configureFactory( ConnectionFactory factory, Map<String,String> configuration ) throws IOException { final Logger logger = Logger.getLogger( RabbitMqUtils.class.getName()); logger.fine( \"Configuring a connection factory for RabbitMQ.\" ); String messageServerIp = configuration.get( RABBITMQ_SERVER_IP ); if( messageServerIp != null ) { Map.Entry<String,Integer> entry = Utils.findUrlAndPort( messageServerIp ); factory.setHost( entry.getKey()); if( entry.getValue() > 0 ) factory.setPort( entry.getValue()); } factory.setUsername( configuration.get( RABBITMQ_SERVER_USERNAME )); factory.setPassword( configuration.get( RABBITMQ_SERVER_PASSWORD )); factory.setConnectionTimeout( 5000 ); factory.setAutomaticRecoveryEnabled( true ); factory.setNetworkRecoveryInterval( 10000 ); factory.setTopologyRecoveryEnabled( true ); if( Boolean.parseBoolean( configuration.get( RABBITMQ_USE_SSL ))) { logger.fine( \"Connection factory for RabbitMQ: SSL is used.\" ); InputStream clientIS = null; InputStream storeIS = null; try { clientIS = new FileInputStream( configuration.get( RABBITMQ_SSL_KEY_STORE_PATH )); storeIS = new FileInputStream( configuration.get( RABBITMQ_SSL_TRUST_STORE_PATH )); char[] keyStorePassphrase = configuration.get( RABBITMQ_SSL_KEY_STORE_PASSPHRASE ).toCharArray(); KeyStore ks = KeyStore.getInstance( getValue( configuration, RABBITMQ_SSL_KEY_STORE_TYPE, DEFAULT_SSL_KEY_STORE_TYPE )); ks.load( clientIS, keyStorePassphrase ); String value = getValue( configuration, RABBITMQ_SSL_KEY_MNGR_FACTORY, DEFAULT_SSL_MNGR_FACTORY ); KeyManagerFactory kmf = KeyManagerFactory.getInstance( value ); kmf.init( ks, keyStorePassphrase ); char[] trustStorePassphrase = configuration.get( RABBITMQ_SSL_TRUST_STORE_PASSPHRASE ).toCharArray(); KeyStore tks = KeyStore.getInstance( getValue( configuration, RABBITMQ_SSL_TRUST_STORE_TYPE, DEFAULT_SSL_TRUST_STORE_TYPE )); tks.load( storeIS, trustStorePassphrase ); value = getValue( configuration, RABBITMQ_SSL_TRUST_MNGR_FACTORY, DEFAULT_SSL_MNGR_FACTORY ); TrustManagerFactory tmf = TrustManagerFactory.getInstance( value ); tmf.init( tks ); SSLContext c = SSLContext.getInstance( getValue( configuration, RABBITMQ_SSL_PROTOCOL, DEFAULT_SSL_PROTOCOL )); c.init( kmf.getKeyManagers(), tmf.getTrustManagers(), null ); factory.useSslProtocol( c ); } catch( GeneralSecurityException e ) { throw new IOException( \"SSL configuration for the RabbitMQ factory failed.\", e ); } finally { Utils.closeQuietly( storeIS ); Utils.closeQuietly( clientIS ); } } }### Assistant: @Test( expected = IOException.class ) public void testConfigureFactory_withSslEnabled_ioException() throws Exception { ConnectionFactory factory = Mockito.mock( ConnectionFactory.class ); String trustPassPhrase = \"trust store\"; File trustStore = generateKeyStore( trustPassPhrase, RabbitMqConstants.DEFAULT_SSL_TRUST_STORE_TYPE ); Map<String,String> configuration = new HashMap<> (); configuration.put( RABBITMQ_SERVER_IP, \"http: configuration.put( RABBITMQ_SERVER_USERNAME, \"toto\" ); configuration.put( RABBITMQ_SERVER_PASSWORD, \"123456789\" ); configuration.put( RABBITMQ_SSL_KEY_STORE_PATH, \"does not exist\" ); configuration.put( RABBITMQ_SSL_KEY_STORE_PASSPHRASE, \"key store\" ); configuration.put( RABBITMQ_SSL_TRUST_STORE_PATH, trustStore.getAbsolutePath()); configuration.put( RABBITMQ_SSL_TRUST_STORE_PASSPHRASE, trustPassPhrase ); configuration.put( RABBITMQ_SSL_AS_USER_DATA, \"true\" ); configuration.put( RABBITMQ_USE_SSL, \"true\" ); RabbitMqUtils.configureFactory( factory, configuration ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> T deserialize(Class<T> type, Type genericType, InputStream stream, Charset charset) { IOs.close(stream); return null; }### Assistant: @Test public void shouldDeserializeToShort() throws Exception { assertNull(deserialize(toTest, \"-1\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Response createResponse(Response.StatusType status, Object entity, String errormessage) { if (status.getFamily() != Response.Status.Family.SUCCESSFUL) { return INSTANCE.createErrorResponse(status, entity, errormessage); } return INSTANCE.createResponse(status, entity); }### Assistant: @Test public void shouldCreateSuccessResponseWithLargeStreamEntity() throws IOException { Response response = JSONResponse.createResponse(Status.OK, new LargeEntity(), null); assertThat(response.getStatus(), is(200)); assertThat(response.getMediaType(), is(MediaType.APPLICATION_JSON_TYPE)); Object entity = response.getEntity(); assertThat(entity.getClass(), is(typeCompatibleWith(InputStream.class))); try (InputStream entityInStream = (InputStream) entity) { String largeEntityJSON = new String(entityInStream.readAllBytes(), StandardCharsets.UTF_8); assertThat(largeEntityJSON, is(notNullValue())); assertTrue(largeEntityJSON.startsWith(\"{\")); assertTrue(largeEntityJSON.endsWith(\"}\")); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<TrustConfirmationProvider> getTrustConfirmationProviders() { return trustConfirmationProviders; }### Assistant: @Test public void testGetTrustConfirmationProviders() { assertTrue(credentialManager.getTrustConfirmationProviders().isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final DefaultContext with(String key, Object value) { return with(key, value, false); }### Assistant: @Test public void shouldAllowOnOverwritingValuesInContextWhenCallingMethodWithOverwriteFlag() { DefaultContext context = new DefaultContext(); context.with(\"TEST\", \"B\"); context.with(\"TEST\", \"A\", true); assertThat(context).hasValue(\"TEST\", \"A\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public StatementOption setStatementOption( final UnitOfWork transaction, final String optionName, final String optionValue ) throws KException { return OptionContainerUtils.setOption( transaction, this, optionName, optionValue ); }### Assistant: @Test( expected = KException.class ) public void shouldFailAddingNullStatementOptionValue() throws Exception { this.procedure.setStatementOption( getTransaction(), \"blah\", null ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException { logger.debug(\"initiate reaction: HomolyticCleavageReaction\"); if (reactants.getAtomContainerCount() != 1) { throw new CDKException(\"HomolyticCleavageReaction only expects one reactant\"); } if (agents != null) { throw new CDKException(\"HomolyticCleavageReaction don't expects agents\"); } IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class); IAtomContainer reactant = reactants.getAtomContainer(0); IParameterReact ipr = super.getParameterClass(SetReactionCenter.class); if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant); Iterator<IBond> bondis = reactant.bonds().iterator(); while (bondis.hasNext()) { IBond bondi = bondis.next(); IAtom atom1 = bondi.getBegin(); IAtom atom2 = bondi.getEnd(); if (bondi.getFlag(CDKConstants.REACTIVE_CENTER) && atom1.getFlag(CDKConstants.REACTIVE_CENTER) && atom2.getFlag(CDKConstants.REACTIVE_CENTER) && (atom1.getFormalCharge() == CDKConstants.UNSET ? 0 : atom1.getFormalCharge()) == 0 && (atom2.getFormalCharge() == CDKConstants.UNSET ? 0 : atom2.getFormalCharge()) == 0 && reactant.getConnectedSingleElectronsCount(atom1) == 0 && reactant.getConnectedSingleElectronsCount(atom2) == 0) { ArrayList<IAtom> atomList = new ArrayList<IAtom>(); atomList.add(atom1); atomList.add(atom2); ArrayList<IBond> bondList = new ArrayList<IBond>(); bondList.add(bondi); IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance(IAtomContainerSet.class); moleculeSet.addAtomContainer(reactant); IReaction reaction = mechanism.initiate(moleculeSet, atomList, bondList); if (reaction == null) continue; else setOfReactions.addReaction(reaction); } } return setOfReactions; }### Assistant: @Test public void testOspDoubleB() throws Exception { IAtomContainer molecule = builder.newInstance(IAtomContainer.class); molecule.addAtom(builder.newInstance(IAtom.class, \"O\")); molecule.addAtom(builder.newInstance(IAtom.class, \"C\")); molecule.addBond(0, 1, IBond.Order.DOUBLE); molecule.addAtom(builder.newInstance(IAtom.class, \"H\")); molecule.addAtom(builder.newInstance(IAtom.class, \"H\")); molecule.addBond(1, 2, IBond.Order.SINGLE); molecule.addBond(1, 3, IBond.Order.SINGLE); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule); lpcheck.saturate(molecule); molecule.getAtom(0).setFlag(CDKConstants.REACTIVE_CENTER, true); molecule.getAtom(1).setFlag(CDKConstants.REACTIVE_CENTER, true); molecule.getBond(0).setFlag(CDKConstants.REACTIVE_CENTER, true); IAtomContainerSet setOfReactants = builder.newInstance(IAtomContainerSet.class); setOfReactants.addAtomContainer(molecule); List<IParameterReact> paramList = new ArrayList<IParameterReact>(); IParameterReact param = new SetReactionCenter(); param.setParameter(Boolean.TRUE); paramList.add(param); IReactionProcess type = new HomolyticCleavageReaction(); type.setParameterList(paramList); IReactionSet setOfReactions = type.initiate(setOfReactants, null); Assert.assertEquals(1, setOfReactions.getReactionCount()); IAtomContainer expected1 = builder.newInstance(IAtomContainer.class); expected1.addAtom(builder.newInstance(IAtom.class, \"O\")); expected1.addSingleElectron(builder.newInstance(ISingleElectron.class, expected1.getAtom(0))); expected1.addAtom(builder.newInstance(IAtom.class, \"C\")); expected1.addSingleElectron(builder.newInstance(ISingleElectron.class, expected1.getAtom(1))); expected1.addBond(0, 1, IBond.Order.SINGLE); expected1.addAtom(builder.newInstance(IAtom.class, \"H\")); expected1.addAtom(builder.newInstance(IAtom.class, \"H\")); expected1.addBond(1, 2, IBond.Order.SINGLE); expected1.addBond(1, 3, IBond.Order.SINGLE); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(expected1); lpcheck.saturate(expected1); IAtomContainer product1 = setOfReactions.getReaction(0).getProducts().getAtomContainer(0); QueryAtomContainer queryAtom = QueryAtomContainerCreator.createSymbolAndChargeQueryContainer(expected1); Assert.assertTrue(uiTester.isIsomorph(product1, queryAtom)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String multiply(final String word, final int repeat) { if (null == word) { return EMPTY_STRING; } final StringBuilder buffer = new StringBuilder(); multiply(buffer, word, repeat); return buffer.toString(); }### Assistant: @Test public void testMultiplyOnVoid() { final Object[][] testParameters = new Object[][] {{new StringBuilder(), \"Hello\", 0, \"\"}, {new StringBuilder(), \"Hello\", 1, \"Hello\"}, {new StringBuilder(), \"Hello\", 2, \"HelloHello\"}}; StringBuilder sb = new StringBuilder(); StringUtils.multiply(sb, null, -1); assertEquals(\"\", sb.toString()); sb = new StringBuilder(); StringUtils.multiply(sb, null, 0); assertEquals(\"\", sb.toString()); sb = new StringBuilder(); StringUtils.multiply(sb, null, 1); assertEquals(\"\", sb.toString()); for (final Object[] testParameter : testParameters) { String expected = (String) testParameter[3]; StringBuilder buffer = (StringBuilder) testParameter[0]; String word = (String) testParameter[1]; int repeat = (Integer) testParameter[2]; StringUtils.multiply(buffer, word, repeat); assertEquals(expected, buffer.toString()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isEnabled(final DialogDescriptor dialogDescriptor) { boolean result = false; DialogDescriptorUsage usage = dialogDescriptor.getAttributes().getUsage(); if (usage == DialogDescriptorUsage.DISABLED) { result = false; } else { boolean notTimedOut = isNotTimedOut(dialogDescriptor, usage); if (!notTimedOut) { dialogDescriptor.getAttributes().setUsage(DialogDescriptorUsage.DISABLED); LOGGER.debug(\"Dialog descriptor '\" + dialogDescriptor.getAttributes().getName() + \"' was disabled!\"); } result = notTimedOut; } return result; }### Assistant: @Test public void testIsEnabledWhenUsageIsAlwaysShouldReturnTrue() { attributes = new DialogDescriptorAttributes(\"name\", DialogDescriptorUsage.ALWAYS); dialogDescriptor = new DialogDescriptor(attributes, null, null); boolean actual = underTest.isEnabled(dialogDescriptor); assertEquals(actual, true); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void sessionTouched(SessionData session) { new ExpirationManagement().manageExpiration(session); }### Assistant: @Test public void testSessionTouchedSticky() { NotificationExpirationManagement sticky = new NotificationExpirationManagement(redis, redisSession, \"test\", \"this\", \"prefix:\", true); sticky.sessionTouched(session); ArgumentCaptor<byte[]> captureKey = ArgumentCaptor.forClass(byte[].class); ArgumentCaptor<byte[]> captureSessionKey = ArgumentCaptor.forClass(byte[].class); verify(redis, times(2)).sadd(captureKey.capture(), captureSessionKey.capture()); ArrayList<String> captured = new ArrayList<>(); for (byte[] key : captureKey.getAllValues()) { captured.add(encode(key)); } assertThat(captured, hasItem(\"prefix:forced-expirations:120000\")); verify(redis, times(2)).expireAt(captureKey.capture(), any(long.class)); captured.clear(); for (byte[] key : captureSessionKey.getAllValues()) { captured.add(encode(key)); } assertThat(captured, hasItem(\"key:{1}\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Selection atLeast(long value) { Selection selection = new BitmapBackedSelection(); Long2ObjectSortedMap<IntArrayList> tail = index.tailMap(value); for (IntArrayList keys : tail.values()) { addAllToSelection(keys, selection); } return selection; }### Assistant: @Test public void testGTE() { Selection fromCol = table.dateTimeColumn(\"Midnights\").eval(DateTimePredicates.isGreaterThanOrEqualTo, 71); Selection fromIdx = index.atLeast(71); assertEquals(fromCol, fromIdx); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isValidHrMinSec(long[] dt, boolean checkHour, boolean isFromDateTime) { return isValidHrMinSec(dt[HOUR_INDEX], dt[MIN_INDEX], dt[SEC_INDEX], checkHour, isFromDateTime); }### Assistant: @Test public void testIsValidHrMinSec() { assertEquals(true, isValidHrMinSec(0, 0, 0, false, false)); assertEquals(true, isValidHrMinSec(0, 0, 0, false, true)); assertEquals(true, isValidHrMinSec(0, 0, 0, true, false)); assertEquals(false, isValidHrMinSec(0, 0, 60, true, true)); assertEquals(false, isValidHrMinSec(0, 0, 60, true, false)); assertEquals(false, isValidHrMinSec(0, 60, 0, true, true)); assertEquals(false, isValidHrMinSec(0, 60, 0, true, false)); assertEquals(true, isValidHrMinSec(23, 0, 0, true, true)); assertEquals(true, isValidHrMinSec(23, 0, 0, true, false)); assertEquals(false, isValidHrMinSec(24, 0, 0, true, true)); assertEquals(true, isValidHrMinSec(24, 0, 0, true, false)); assertEquals(false, isValidHrMinSec(0, 0, -1, true, true)); assertEquals(false, isValidHrMinSec(0, -1, 0, true, true)); assertEquals(false, isValidHrMinSec(-1, 0, 0, true, true)); assertEquals(true, isValidHrMinSec(0, 0, -1, true, false)); assertEquals(true, isValidHrMinSec(0, -1, 0, true, false)); assertEquals(true, isValidHrMinSec(-1, 0, 0, true, false)); assertEquals(false, isValidHrMinSec(-1, -1, 0, true, false)); assertEquals(false, isValidHrMinSec(-1, -1, -1, true, false)); assertEquals(false, isValidHrMinSec(900, 0, 0, true, false)); assertEquals(true, isValidHrMinSec(900, 0, 0, false, false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String handleMissingArgCommas(String line, List<String> methods) { int hashCode = methods.hashCode(); Set<String> hashedMethods = CACHED_METHODS.get(hashCode); if(hashedMethods == null) { hashedMethods = Sets.newHashSetWithExpectedSize(methods.size()); hashedMethods.addAll(methods); CACHED_METHODS.put(hashCode, hashedMethods); } char[] chars = line.toCharArray(); StringBuilder transformed = new StringBuilder(); StringBuilder gather = new StringBuilder(); boolean foundMethod = false; boolean inSingleQuotes = false; boolean inDoubleQuotes = false; int parenCount = 0; for (char c : chars) { if(Character.isWhitespace(c) && !foundMethod) { transformed.append(gather); transformed.append(c); foundMethod = hashedMethods.contains(gather.toString()); gather.setLength(0); } else if(Character.isWhitespace(c) && foundMethod) { if(transformed.charAt(transformed.length() - 1) != ',' && !inSingleQuotes && !inDoubleQuotes && c != '\\n') { transformed.append(\",\"); } transformed.append(c); } else if(c == '(' && !foundMethod) { parenCount++; transformed.append(gather); transformed.append(c); foundMethod = hashedMethods.contains(gather.toString()); gather.setLength(0); } else if(c == '(' && foundMethod) { parenCount++; transformed.append(c); } else if(c == ';') { transformed.append(c); foundMethod = false; parenCount = 0; } else if(c == ')') { parenCount--; transformed.append(c); foundMethod = parenCount == 0 ? false : foundMethod; } else if(c == '\"') { transformed.append(c); inSingleQuotes = !inSingleQuotes; } else if(c == '\\'') { transformed.append(c); inDoubleQuotes = !inDoubleQuotes; } else if(foundMethod) { transformed.append(c); } else { gather.append(c); } } transformed.append(gather); return transformed.toString(); }### Assistant: @Test public void testHandleMissingArgsCommasSingleArg() { String line = \"foo 1\"; String expected = line; Assert.assertEquals(expected, SyntaxTools.handleMissingArgCommas(line, METHODS)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T> T eval(byte[] script, ReturnType returnType, int numKeys, byte[]... keysAndArgs) { return helper.doInScope(RedisCommand.EVAL, () -> connection.eval(script, returnType, numKeys, keysAndArgs)); }### Assistant: @Test public void invokingEvalCreatesNewSpan() { commandCreatesNewSpan(RedisCommand.EVAL, () -> getConnection().eval(\"script\".getBytes(), ReturnType.MULTI, 1, \"keysAndArgs\".getBytes())); verify(mockRedisConnection()) .eval(\"script\".getBytes(), ReturnType.MULTI, 1, \"keysAndArgs\".getBytes()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public DistributedRowMatrix transpose() throws IOException { Path outputPath = new Path(rowPath.getParent(), \"transpose-\" + (System.nanoTime() & 0xFF)); Configuration initialConf = getConf() == null ? new Configuration() : getConf(); Configuration conf = TransposeJob.buildTransposeJobConf(initialConf, rowPath, outputPath, numRows); JobClient.runJob(new JobConf(conf)); DistributedRowMatrix m = new DistributedRowMatrix(outputPath, outputTmpPath, numCols, numRows); m.setConf(this.conf); return m; }### Assistant: @Test public void testTranspose() throws Exception { DistributedRowMatrix m = randomDistributedMatrix(10, 9, 5, 4, 1.0, false); DistributedRowMatrix mt = m.transpose(); Path tmpPath = getTestTempDirPath(); m.setOutputTempPathString(tmpPath.toString()); Path tmpOutPath = new Path(tmpPath, \"/tmpOutTranspose\"); mt.setOutputTempPathString(tmpOutPath.toString()); HadoopUtil.delete(new Configuration(), tmpOutPath); DistributedRowMatrix mtt = mt.transpose(); assertEquals(m, mtt, EPSILON); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting Completable doAgentScaling() { return Completable.defer(() -> { if (!configuration.isAutoScalingAgentsEnabled()) { logger.debug(\"Auto scaling agents is not enabled\"); return Completable.complete(); } List<Completable> actions = new ArrayList<>(); Map<String, Job> allJobs = getAllJobs(); Map<String, Task> allTasks = getAllTasks(); List<AgentInstanceGroup> activeInstanceGroups = getActiveInstanceGroups(); Map<AgentInstanceGroup, List<AgentInstance>> instancesForActiveInstanceGroups = getInstancesForInstanceGroups(activeInstanceGroups); Map<String, List<AgentInstance>> instancesForActiveInstanceGroupsById = instancesForActiveInstanceGroups.entrySet().stream() .collect(Collectors.toMap(e -> e.getKey().getId(), Map.Entry::getValue)); Map<String, Long> numberOfTasksOnAgents = getNumberOfTasksOnAgents(allTasks.values()); Map<Tier, Set<String>> failedTaskIdsByTier = getFailedTaskIdsByTier( schedulingService.getLastTaskPlacementFailures(), FailureKind.NEVER_TRIGGER_AUTOSCALING ); long now = clock.wallTime(); for (Tier tier : Tier.values()) { logger.info(\"Starting scaling actions for tier: {}\", tier); TierAutoScalingConfiguration tierConfiguration = ClusterOperationFunctions.getTierConfiguration(tier, configuration); TierAutoScalerExecution tierAutoScalerExecution = tierTierAutoScalerExecutions.computeIfAbsent( tier, k -> new TierAutoScalerExecution(tier, titusRuntime.getRegistry()) ); String primaryInstanceType = tierConfiguration.getPrimaryInstanceType(); ResourceDimension tierResourceDimension = agentManagementService.getResourceLimits(primaryInstanceType); List<AgentInstanceGroup> activeScalableInstanceGroupsForTier = activeInstanceGroups.stream() .filter(ig -> ig.getTier() == tier && ig.getInstanceType().equals(primaryInstanceType)) .collect(Collectors.toList()); logger.info(\"{} active instance groups({}): {}\", tier, activeScalableInstanceGroupsForTier.size(), activeScalableInstanceGroupsForTier); List<AgentInstance> idleInstancesForTier = getIdleInstancesForTier(tier, primaryInstanceType, instancesForActiveInstanceGroups, numberOfTasksOnAgents, now, tierConfiguration.getIdleInstanceGracePeriodMs()); tierAutoScalerExecution.getTotalIdleInstancesGauge().set(idleInstancesForTier.size()); logger.info(\"{} idle instances({}): {}\", tier, idleInstancesForTier.size(), idleInstancesForTier); Set<String> failedTaskIds = failedTaskIdsByTier.getOrDefault(tier, Collections.emptySet()); tierAutoScalerExecution.getTotalFailedTasksGauge().set(failedTaskIds.size()); logger.info(\"{} failed tasks({}): {}\", tier, failedTaskIds.size(), failedTaskIds); int agentCountToScaleUp = 0; Set<String> potentialTaskIdsForScaleUp = new HashSet<>(); boolean usedScaleUpCooldown = false; if (hasTimeElapsed(tierAutoScalerExecution.getLastScaleUp().get(), now, tierConfiguration.getScaleUpCoolDownMs())) { int minIdleForTier = tierConfiguration.getMinIdle(); if (idleInstancesForTier.size() < minIdleForTier) { int instancesNeededForMinIdle = minIdleForTier - idleInstancesForTier.size(); logger.info(\"{} needs {} instances to satisfy min idle {}\", tier, instancesNeededForMinIdle, minIdleForTier); agentCountToScaleUp += instancesNeededForMinIdle; } Set<String> placementFailureTaskIds = getFailedTaskIdsByTier( schedulingService.getLastTaskPlacementFailures(), IGNORED_FAILURE_KINDS_WITH_LAUNCHGUARD ).getOrDefault(tier, Collections.emptySet()); logger.info(\"{} had the placement excluding launch guard failures({}): {}\", tier, placementFailureTaskIds.size(), placementFailureTaskIds); Set<String> scalablePlacementFailureTaskIds = filterOutTaskIdsForScaling(placementFailureTaskIds, allJobs, allTasks, tierResourceDimension); logger.info(\"{} had the scalable placement failures({}): {}\", tier, scalablePlacementFailureTaskIds.size(), scalablePlacementFailureTaskIds); potentialTaskIdsForScaleUp.addAll(scalablePlacementFailureTaskIds); if (agentCountToScaleUp > 0 || !scalablePlacementFailureTaskIds.isEmpty()) { usedScaleUpCooldown = true; } } Set<String> tasksPastSlo = getTasksPastSlo(failedTaskIds, allTasks, now, tierConfiguration.getTaskSloMs()); Set<String> scalableTasksPastSlo = filterOutTaskIdsForScaling(tasksPastSlo, allJobs, allTasks, tierResourceDimension); tierAutoScalerExecution.getTotalTasksPastSloGauge().set(scalableTasksPastSlo.size()); logger.info(\"{} had tasks past slo({}): {}\", tier, scalableTasksPastSlo.size(), scalableTasksPastSlo); potentialTaskIdsForScaleUp.addAll(scalableTasksPastSlo); Set<String> taskIdsForScaleUp = new HashSet<>(); for (String taskId : potentialTaskIdsForScaleUp) { boolean previouslyScaledFor = taskIdsForPreviousScaleUps.getIfPresent(taskId) != null; if (!previouslyScaledFor) { taskIdsForScaleUp.add(taskId); taskIdsForPreviousScaleUps.put(taskId, taskId); } } tierAutoScalerExecution.getTotalTasksForScaleUpGauge().set(taskIdsForScaleUp.size()); logger.info(\"{} had tasks to scale up({}): {}\", tier, taskIdsForScaleUp.size(), taskIdsForScaleUp); int agentScaleUpCountByDominantResource = calculateAgentScaleUpCountByDominantResource(taskIdsForScaleUp, allJobs, allTasks, tierResourceDimension); logger.info(\"{} needs {} instances based on dominant resource\", tier, agentScaleUpCountByDominantResource); agentCountToScaleUp += agentScaleUpCountByDominantResource; logger.info(\"{} needs {} instances\", tier, agentCountToScaleUp); tierAutoScalerExecution.getTotalAgentsToScaleUpGauge().set(agentCountToScaleUp); boolean scalingUp = false; if (agentCountToScaleUp > 0) { long maxTokensToTake = Math.min(SCALE_UP_TOKEN_BUCKET_CAPACITY, agentCountToScaleUp); Optional<Pair<Long, ImmutableTokenBucket>> takeOpt = tierAutoScalerExecution.getLastScaleUpTokenBucket().tryTake(1, maxTokensToTake); if (takeOpt.isPresent()) { Pair<Long, ImmutableTokenBucket> takePair = takeOpt.get(); tierAutoScalerExecution.setLastScaleUpTokenBucket(takePair.getRight()); long tokensAvailable = takePair.getLeft(); Pair<Integer, Completable> scaleUpPair = createScaleUpCompletable(activeScalableInstanceGroupsForTier, (int) tokensAvailable); Integer agentCountBeingScaled = scaleUpPair.getLeft(); tierAutoScalerExecution.getTotalAgentsBeingScaledUpGauge().set(agentCountBeingScaled); if (agentCountBeingScaled > 0) { actions.add(scaleUpPair.getRight()); logger.info(\"Attempting to scale up {} tier by {} agent instances\", tier, agentCountBeingScaled); scalingUp = true; if (usedScaleUpCooldown) { tierAutoScalerExecution.getLastScaleUp().set(clock.wallTime()); } } } } if (!scalingUp && hasTimeElapsed(tierAutoScalerExecution.getLastScaleDown().get(), now, tierConfiguration.getScaleDownCoolDownMs())) { int agentCountToScaleDown = 0; int maxIdleForTier = tierConfiguration.getMaxIdle(); if (idleInstancesForTier.size() > maxIdleForTier) { int instancesNotNeededForMaxIdle = idleInstancesForTier.size() - maxIdleForTier; logger.info(\"{} can remove {} instances to satisfy max idle {}\", tier, instancesNotNeededForMaxIdle, maxIdleForTier); agentCountToScaleDown += instancesNotNeededForMaxIdle; } tierAutoScalerExecution.getTotalAgentsToScaleDownGauge().set(agentCountToScaleDown); if (agentCountToScaleDown > 0) { long maxTokensToTake = Math.min(SCALE_DOWN_TOKEN_BUCKET_CAPACITY, agentCountToScaleDown); Optional<Pair<Long, ImmutableTokenBucket>> takeOpt = tierAutoScalerExecution.getLastScaleDownTokenBucket().tryTake(1, maxTokensToTake); if (takeOpt.isPresent()) { Pair<Long, ImmutableTokenBucket> takePair = takeOpt.get(); tierAutoScalerExecution.setLastScaleDownTokenBucket(takePair.getRight()); long tokensAvailable = takePair.getLeft(); Pair<Integer, Completable> scaleDownPair = createSetRemovableOverrideStatusesCompletable(idleInstancesForTier, activeScalableInstanceGroupsForTier, instancesForActiveInstanceGroupsById, (int) tokensAvailable); Integer agentCountBeingScaledDown = scaleDownPair.getLeft(); tierAutoScalerExecution.getTotalAgentsBeingScaledDownGauge().set(agentCountBeingScaledDown); if (agentCountBeingScaledDown > 0) { actions.add(scaleDownPair.getRight()); logger.info(\"Attempting to scale down {} tier by {} agent instances\", tier, agentCountBeingScaledDown); tierAutoScalerExecution.getLastScaleDown().set(clock.wallTime()); } } } } logger.info(\"Finishing scaling actions for tier: {}\", tier); } List<AgentInstance> removableInstancesPastElapsedTime = getRemovableInstancesPastElapsedTime(instancesForActiveInstanceGroups, now, configuration.getAgentInstanceRemovableTimeoutMs()); logger.info(\"Removable instances past elapsed time({}): {}\", removableInstancesPastElapsedTime.size(), removableInstancesPastElapsedTime); if (!removableInstancesPastElapsedTime.isEmpty()) { actions.add(createResetOverrideStatusesCompletable(removableInstancesPastElapsedTime)); logger.info(\"Resetting agent instances({}): {}\", removableInstancesPastElapsedTime.size(), removableInstancesPastElapsedTime); } return actions.isEmpty() ? Completable.complete() : Completable.concat(actions); }).doOnCompleted(() -> logger.debug(\"Completed scaling agents\")) .timeout(CLUSTER_AGENT_AUTO_SCALE_COMPLETABLE_TIMEOUT_MS, TimeUnit.MILLISECONDS); }### Assistant: @Test public void testNoScaleUpForSomeFailureKinds() { when(configuration.getFlexMinIdle()).thenReturn(0); Job job = createJob(); when(v3JobOperations.getJobs()).thenReturn(Collections.singletonList(job)); List<Task> tasks = createTasks(10, \"jobId\"); when(v3JobOperations.getTasks()).thenReturn(tasks); Map<FailureKind, Map<StubTaskRequest, List<TaskPlacementFailure>>> taskPlacementFailures = createTaskPlacementFailures(ImmutableMap.of( WaitingForInUseIpAllocation, 2, OpportunisticResource, 8 ), Tier.Flex); doReturn(taskPlacementFailures).when(schedulingService).getLastTaskPlacementFailures(); AgentInstanceGroup instanceGroup = createPartition(\"instanceGroup1\", InstanceGroupLifecycleState.Active, \"r4.16xlarge\", 0, 0, 20); when(agentManagementService.getInstanceGroups()).thenReturn(singletonList(instanceGroup)); when(agentManagementService.getAgentInstances(\"instanceGroup1\")).thenReturn(Collections.emptyList()); when(agentManagementService.scaleUp(eq(\"instanceGroup1\"), anyInt())).thenReturn(Completable.complete()); testScheduler.advanceTimeBy(6, TimeUnit.MINUTES); ClusterAgentAutoScaler clusterAgentAutoScaler = new ClusterAgentAutoScaler(titusRuntime, configuration, agentManagementService, v3JobOperations, schedulingService, testScheduler); clusterAgentAutoScaler.doAgentScaling().await(); verify(agentManagementService, never()).scaleUp(anyString(), anyInt()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static MultivaluedMap<String, String> parseQueryString(String rawQuery, boolean decode) { MultivaluedMap<String, String> result = new MultivaluedMapImpl(); if (!(rawQuery == null || rawQuery.isEmpty())) { int p = 0; int n = 0; while (n < rawQuery.length()) { n = rawQuery.indexOf('&', p); if (n < 0) { n = rawQuery.length(); } String pair = rawQuery.substring(p, n); if (!pair.isEmpty()) { String name; String value; int eq = pair.indexOf('='); if (eq < 0) { name = pair; value = \"\"; } else { name = pair.substring(0, eq); value = pair.substring(eq + 1); } result.add(decode ? decode(name, QUERY) : name, decode ? decode(value, QUERY) : value); } p = n + 1; } } return result; }### Assistant: @Test public void parsesAndDecodeQueryString() { String queryString = \"q1=to%20be%20or%20not%20to%20be&q2=foo&q2=%D0%9F%D1%80%D0%B8%D0%B2%D1%96%D1%82\"; MultivaluedMapImpl expected = new MultivaluedMapImpl(); expected.add(\"q1\", \"to be or not to be\"); expected.addAll(\"q2\", \"foo\", \"\\u041f\\u0440\\u0438\\u0432\\u0456\\u0442\"); MultivaluedMap<String, String> result = parseQueryString(queryString, true); assertEquals(expected, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AlleleResource gnomadGenomeAlleleResource() { String namespacePrefix = \"hg19.gnomad-genome\"; AlleleResourceProperties resourceProperties = getAlleleResourceProperties(namespacePrefix); Path resourcePath = resourceProperties.getAlleleResourcePath(); URL resourceUrl = resourceProperties.getAlleleResourceUrl(); return new GnomadGenomeAlleleResource(namespacePrefix, resourceUrl, resourcePath); }### Assistant: @Test public void gnomadGenomeAlleleResource() throws Exception { AlleleResource alleleResource = instance.gnomadGenomeAlleleResource(); AlleleArchive expectedArchive = new TabixAlleleArchive(Paths.get(\"src/test/resources/hg19/variants/gnomad.genomes.r2.0.1.sites.noVEP.vcf.gz\")); assertThat(alleleResource.getAlleleParser(), instanceOf(ExacAlleleParser.class)); GnomadGenomeAlleleParser exacAlleleParser = (GnomadGenomeAlleleParser) alleleResource.getAlleleParser(); assertThat(exacAlleleParser.getPopulationKeys(), equalTo(ExacPopulationKey.GNOMAD_GENOMES)); assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getOnlyNameServiceIdOrNull(Configuration conf) { Collection<String> nsIds = DFSUtilClient.getNameServiceIds(conf); if (1 == nsIds.size()) { return nsIds.toArray(new String[1])[0]; } else { return null; } }### Assistant: @Test public void testGetOnlyNameServiceIdOrNull() { HdfsConfiguration conf = new HdfsConfiguration(); conf.set(DFS_NAMESERVICES, \"ns1,ns2\"); assertNull(DFSUtil.getOnlyNameServiceIdOrNull(conf)); conf.set(DFS_NAMESERVICES, \"\"); assertNull(DFSUtil.getOnlyNameServiceIdOrNull(conf)); conf.set(DFS_NAMESERVICES, \"ns1\"); assertEquals(\"ns1\", DFSUtil.getOnlyNameServiceIdOrNull(conf)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> T readYamlFromString(String yamlStr, Class<T> clazz) { Yaml yaml = new Yaml(); return yaml.loadAs(yamlStr, clazz); }### Assistant: @Test public void testReadYamlFromString() { ChatAlyticsConfig config = new ChatAlyticsConfig(); config.inputType = InputSourceType.SLACK; SlackConfig slackConfig = new SlackConfig(); slackConfig.baseAPIURL = \"http: config.computeConfig.chatConfig = slackConfig; String configStr = YamlUtils.writeYaml(config); ChatAlyticsConfig readConfig = YamlUtils.readChatAlyticsConfigFromString(configStr); assertEquals(config.inputType, readConfig.inputType); assertEquals(config.timeZone, readConfig.timeZone); ChatConfig readChatConfig = readConfig.computeConfig.chatConfig; assertTrue(readChatConfig instanceof SlackConfig); assertEquals(slackConfig.getBaseAPIURL(), readChatConfig.getBaseAPIURL()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected <T extends ServiceDocument> T getBody(Operation op) { @SuppressWarnings(\"unchecked\") T body = (T) op.getBody(this.context.stateType); return body; }### Assistant: @Test public void skipPersistDocument() throws Throwable { this.host.startFactory(new NoUpdateOnPutService()); this.host.waitForServiceAvailable(NoUpdateOnPutService.FACTORY_LINK); String servicePath = UriUtils.buildUriPath(NoUpdateOnPutService.FACTORY_LINK, \"foo\"); NoUpdateOnPutService.State initialBody = new NoUpdateOnPutService.State(); initialBody.name = \"init\"; initialBody.documentSelfLink = servicePath; Operation initialPost = Operation.createPost(this.host, NoUpdateOnPutService.FACTORY_LINK).setBody(initialBody); NoUpdateOnPutService.State postResult = this.sender.sendAndWait(initialPost, NoUpdateOnPutService.State.class); long initialVersion = postResult.documentVersion; URI subscriptionUri = UriUtils.buildSubscriptionUri(this.host, servicePath); Operation createSubscriptionOp = Operation.createPost(subscriptionUri).setReferer(this.host.getPublicUri()); AtomicBoolean isSubscriptionCalled = new AtomicBoolean(false); this.host.startSubscriptionService(createSubscriptionOp, subscriptionOp -> { isSubscriptionCalled.set(true); subscriptionOp.complete(); }); for (int i = 0; i < 100; i++) { String newName = \"modified-\" + i; NoUpdateOnPutService.State putBody = new NoUpdateOnPutService.State(); putBody.name = newName; Operation put = Operation.createPut(this.host, servicePath).setBody(putBody); Operation putResponseOp = this.sender.sendAndWait(put); assertEquals(Operation.STATUS_CODE_OK, putResponseOp.getStatusCode()); assertTrue(putResponseOp.hasBody()); NoUpdateOnPutService.State putResponseBody = putResponseOp.getBody(NoUpdateOnPutService.State.class); assertEquals(\"response of put should be the one specified in request\", newName, putResponseBody.name); NoUpdateOnPutService.State getBody = this.sender.sendAndWait(Operation.createGet(this.host, servicePath), NoUpdateOnPutService.State.class); assertEquals(\"document should not be updated\", \"init\", getBody.name); assertEquals(\"document should not be updated\", initialVersion, getBody.documentVersion); assertFalse(\"subscription should not be called for non modification\", isSubscriptionCalled.get()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void addRoleToList(String role, String rolePrefix, String[] requestedRoleList, Set<String> accessibleRoles, boolean keepFullName) { if (!role.startsWith(rolePrefix)) { return; } if (requestedRoleList != null) { boolean matchFound = false; for (String requestedRole : requestedRoleList) { if (role.endsWith(requestedRole)) { matchFound = true; break; } } if (!matchFound) { return; } } if (keepFullName) { accessibleRoles.add(role); } else { accessibleRoles.add(role.substring(rolePrefix.length())); } }### Assistant: @Test public void testAddRoleToList() { ChangeLogStore clogStore = new MockZMSFileChangeLogStore(\"/tmp/zts_server_unit_tests/zts_root\", pkey, \"0\"); DataStore store = new DataStore(clogStore, null); Set<String> accessibleRoles = new HashSet<>(); store.addRoleToList(\"coretech:role.admin\", \"coretech:role.\", null, accessibleRoles, false); assertEquals(accessibleRoles.size(), 1); assertTrue(accessibleRoles.contains(\"admin\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SparkDistributor(final String masterURL) { this.masterURL = masterURL; }### Assistant: @Test public void testSparkDistributor() { InputStream is = SparkDistributorTest.class.getResourceAsStream(\"/spark/samplemachine.xml\"); SCXMLEngine scxmlEngine = new SCXMLEngine(); scxmlEngine.setModelByInputFileStream(is); scxmlEngine.setBootstrapMin(1); SparkDistributor sparkDistributor = new SparkDistributor(\"local[5]\"); scxmlEngine.process(sparkDistributor); JavaRDD<Map<String, String>> results = sparkDistributor.getGeneratedMaps(); Assert.assertEquals(243, results.collect().size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setSelected( boolean selected ) { radioButton.setSelected( selected ); }### Assistant: @Test public void testSetSelected() throws Exception { radio1.setSelected( true ); assertTrue( !radio2.isSelected() ); assertTrue( radio1.isSelected() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] hash(HashAlgorithm algorithm, byte[]... inputs) { return hash(algorithm, algorithm.getDefaultBitLength() / 8, inputs); }### Assistant: @Test public void success_6() { String seed1 = \"abcdfa\"; String seed2 = \"234fad\"; String seed3 = \"daf1-3\"; byte[] bytes = ByteUtils.join(seed1.getBytes(), seed2.getBytes(), seed3.getBytes()); byte[] result = Hashes.hash(HashAlgorithm.SHA_512, bytes); assertThat(HexEncoder.getString(result), is(\"69aaaf4b6fc82362212a611caff822be8bb4b8d246c3cd33474914690b32e2bc79da889adae033ecef441a1663028a64ec8f860fb039974bb1bb37500218d998\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static RlpList decode(byte[] rlpEncoded) { RlpList rlpList = new RlpList(new ArrayList<RlpType>()); traverse(rlpEncoded, 0, rlpEncoded.length, rlpList); return rlpList; }### Assistant: @Test public void testRLPDecode() { assertTrue(RlpDecoder.decode(new byte[]{}).getValues().isEmpty()); assertThat(RlpDecoder.decode(new byte[]{(byte) 0x83, 'd', 'o', 'g'}).getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create(\"dog\"))); RlpList rlpList = (RlpList) RlpDecoder.decode( new byte[]{ (byte) 0xc8, (byte) 0x83, 'c', 'a', 't', (byte) 0x83, 'd', 'o', 'g' }).getValues().get(0); assertThat(rlpList.getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create(\"cat\"))); assertThat(rlpList.getValues().get(1), CoreMatchers.<RlpType>is(RlpString.create(\"dog\"))); assertThat(RlpDecoder.decode(new byte[]{(byte) 0x80}).getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create(\"\"))); assertThat(RlpDecoder.decode(new byte[]{(byte) 0x80}).getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create(new byte[]{}))); assertThat(RlpDecoder.decode(new byte[]{(byte) 0x80}).getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create(BigInteger.ZERO))); assertThat(RlpDecoder.decode(new byte[]{(byte) 0xc0}).getValues().get(0), instanceOf(RlpList.class)); assertTrue(((RlpList) RlpDecoder.decode(new byte[]{(byte) 0xc0}) .getValues().get(0)).getValues().isEmpty()); assertThat(RlpDecoder.decode(new byte[]{(byte) 0x00}).getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create(BigInteger.valueOf(0).byteValue()))); assertThat(RlpDecoder.decode(new byte[]{(byte) 0x0f}).getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create(BigInteger.valueOf(15).byteValue()))); assertThat(RlpDecoder.decode(new byte[]{(byte) 0x82, (byte) 0x04, (byte) 0x00}) .getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create(BigInteger.valueOf(0x0400)))); rlpList = RlpDecoder.decode(new byte[]{ (byte) 0xc7, (byte) 0xc0, (byte) 0xc1, (byte) 0xc0, (byte) 0xc3, (byte) 0xc0, (byte) 0xc1, (byte) 0xc0}); assertThat(rlpList, instanceOf(RlpList.class)); assertThat(rlpList.getValues().size(), equalTo(1)); assertThat(rlpList.getValues().get(0), instanceOf(RlpList.class)); assertThat(((RlpList) rlpList.getValues().get(0)).getValues().size(), equalTo(3)); assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(0), instanceOf(RlpList.class)); assertThat(((RlpList) ((RlpList) rlpList.getValues().get(0)).getValues().get(0)).getValues().size(), equalTo(0)); assertThat(((RlpList) ((RlpList)rlpList.getValues().get(0)).getValues().get(1)).getValues().size(), equalTo(1)); assertThat(((RlpList) ((RlpList) rlpList.getValues().get(0)).getValues().get(2)).getValues().size(), equalTo(2)); assertThat(((RlpList) ((RlpList) rlpList.getValues().get(0)).getValues().get(2)).getValues().get(0), instanceOf(RlpList.class)); assertThat(((RlpList) ((RlpList) ((RlpList) rlpList.getValues().get(0)).getValues().get(2)).getValues().get(0)) .getValues().size(), equalTo(0)); assertThat(((RlpList) ((RlpList) ((RlpList) rlpList.getValues().get(0)).getValues().get(2)).getValues().get(1)) .getValues().size(), equalTo(1)); assertThat(RlpDecoder.decode( new byte[]{ (byte) 0xb8, (byte) 0x38, 'L', 'o', 'r', 'e', 'm', ' ', 'i', 'p', 's', 'u', 'm', ' ', 'd', 'o', 'l', 'o', 'r', ' ', 's', 'i', 't', ' ', 'a', 'm', 'e', 't', ',', ' ', 'c', 'o', 'n', 's', 'e', 'c', 't', 'e', 't', 'u', 'r', ' ', 'a', 'd', 'i', 'p', 'i', 's', 'i', 'c', 'i', 'n', 'g', ' ', 'e', 'l', 'i', 't' }).getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create( \"Lorem ipsum dolor sit amet, consectetur adipisicing elit\"))); assertThat(RlpDecoder.decode(new byte[]{(byte) 0x00}).getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create(new byte[]{0}))); rlpList = RlpDecoder.decode(new byte[]{ (byte) 0xc6, (byte) 0x82, (byte) 0x7a, (byte) 0x77, (byte) 0xc1, (byte) 0x04, (byte) 0x01}); assertThat(((RlpList) rlpList.getValues().get(0)).getValues().size(), equalTo(3)); assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(0), instanceOf(RlpString.class)); assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(1), instanceOf(RlpList.class)); assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(2), instanceOf(RlpString.class)); assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create(\"zw\"))); assertThat(((RlpList) ((RlpList) rlpList.getValues().get(0)).getValues().get(1)).getValues().get(0), CoreMatchers.<RlpType>is(RlpString.create(4))); assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(2), CoreMatchers.<RlpType>is(RlpString.create(1))); String data = \"F86E12F86B80881BC16D674EC8000094CD2A3D9F938E13CD947EC05ABC7FE734D\" + \"F8DD8268609184E72A00064801BA0C52C114D4F5A3BA904A9B3036E5E118FE0DBB987\" + \"FE3955DA20F2CD8F6C21AB9CA06BA4C2874299A55AD947DBC98A25EE895AABF6B625C\" + \"26C435E84BFD70EDF2F69\"; byte[] payload = Numeric.hexStringToByteArray(data); rlpList = RlpDecoder.decode(payload); assertThat(((RlpList) rlpList.getValues().get(0)).getValues().size(), equalTo(2)); assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(0), instanceOf(RlpString.class)); assertThat(((RlpList) rlpList.getValues().get(0)).getValues().get(1), instanceOf(RlpList.class)); assertThat(((RlpList) ((RlpList) rlpList.getValues().get(0)).getValues().get(1)).getValues().size(), equalTo(9)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public GoogleCloudStorageItemInfo composeObjects( List<StorageResourceId> sources, StorageResourceId destination, CreateObjectOptions options) throws IOException { GoogleCloudStorageItemInfo item = super.composeObjects(sources, destination, options); cache.putItem(item); return item; }### Assistant: @Test public void testComposeObjects() throws IOException { List<StorageResourceId> ids = Lists.newArrayList(ITEM_A_A.getResourceId(), ITEM_A_B.getResourceId()); GoogleCloudStorageItemInfo result = gcs.composeObjects(ids, ITEM_A_AA.getResourceId(), CREATE_OBJECT_OPTIONS); verify(gcsDelegate) .composeObjects(eq(ids), eq(ITEM_A_AA.getResourceId()), eq(CREATE_OBJECT_OPTIONS)); assertThat(result).isEqualTo(ITEM_A_AA); assertThat(cache.getAllItemsRaw()).containsExactly(ITEM_A_AA); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String process(ReplacementData data, String formatPattern) { StringBuffer sb = new StringBuffer(); Matcher matcher = pattern.matcher(formatPattern); while (matcher.find()) { matcher.appendReplacement(sb, Matcher.quoteReplacement(getReplacementFor(matcher.group(), data))); } matcher.appendTail(sb); return sb.toString(); }### Assistant: @Test public void testProcessShouldReplacePlaceholderNotRecursivelyForSimpleFormatPattern() { BasePlaceholder underTest = new TestPlaceholder(\"%s\", \"1234%s\"); String result = underTest.process(null, \"%s\"); assertThat(result).isEqualTo(\"1234%s\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void executeIfSelectedColumn(ScenarioSimulationContext context, ScenarioGridColumn selectedColumn) { final AbstractScesimGridModel<? extends AbstractScesimModel, ? extends AbstractScesimData> selectedScenarioGridModel = context.getAbstractScesimGridModelByGridWidget(gridWidget); int instancesCount = selectedScenarioGridModel.getInstancesCount(selectedColumn.getFactIdentifier().getClassName()); String alias = selectedColumn.getInformationHeaderMetaData().getTitle().split(COPY_LABEL)[0] + COPY_LABEL + instancesCount; int columnPosition = selectedScenarioGridModel.getInstanceLimits(selectedScenarioGridModel.getColumns().indexOf(selectedColumn)).getMaxRowIndex() + 1; AtomicInteger nextColumnPosition = new AtomicInteger(columnPosition); selectedScenarioGridModel.getInstanceScenarioGridColumns(selectedColumn).forEach( originalColumn -> { ScenarioGridColumn createdColumn = insertNewColumn(context, originalColumn, nextColumnPosition.getAndIncrement(), false); if (originalColumn.isInstanceAssigned()) { setInstanceHeader(context, createdColumn, alias, originalColumn.getFactIdentifier().getClassName()); if (originalColumn.isPropertyAssigned()) { int originalColumnIndex = selectedScenarioGridModel.getColumns().indexOf(originalColumn); final FactMapping originalFactMapping = selectedScenarioGridModel.getAbstractScesimModel().get().getScesimModelDescriptor().getFactMappingByIndex(originalColumnIndex); factMappingValueType = originalFactMapping.getFactMappingValueType(); List<String> propertyNameElements = new ArrayList<>(); propertyNameElements.add(alias); propertyNameElements.addAll(originalFactMapping.getExpressionElementsWithoutClass().stream().map(ExpressionElement::getStep).collect(Collectors.toList())); setPropertyHeader(context, createdColumn, propertyNameElements, originalFactMapping.getClassName(), originalColumn.getPropertyHeaderMetaData().getTitle()); int createdColumnIndex = selectedScenarioGridModel.getColumns().indexOf(createdColumn); selectedScenarioGridModel.duplicateColumnValues(originalColumnIndex, createdColumnIndex); } } }); }### Assistant: @Test public void executeIfSelectedColumn_WithInstanceAndPropertyAndThreeColumns() { final String SECOND = \"SECOND\"; addNewColumn(scenarioGridColumnMock2, headerMetaDatasMock2, informationHeaderMetaDataMock2, propertyHeaderMetaDataMock2, factIdentifierMock2, factMappingMock2, factMappingValueMock2, COLUMN_NUMBER + 1, COLUMN_NUMBER + 2, COLUMN_NUMBER + 1, MULTIPART_VALUE + \"_2\", GRID_PROPERTY_TITLE + \"_2\", GRID_COLUMN_ID + \"_2\", FACT_ALIAS + \"_2\", VALUE_CLASS_NAME, SECOND, FULL_CLASS_NAME + \"_2\", FACT_IDENTIFIER_NAME + \"_2\"); final String THIRD = \"THIRD\"; addNewColumn(scenarioGridColumnMock3, headerMetaDatasMock3, informationHeaderMetaDataMock2, propertyHeaderMetaDataMock3, factIdentifierMock2, factMappingMock3, factMappingValueMock3, COLUMN_NUMBER + 1, COLUMN_NUMBER + 2, COLUMN_NUMBER + 2, MULTIPART_VALUE + \"_2\", GRID_PROPERTY_TITLE + \"_3\", GRID_COLUMN_ID + \"_3\", FACT_ALIAS + \"_3\", VALUE_CLASS_NAME, THIRD, FULL_CLASS_NAME + \"_2\", FACT_IDENTIFIER_NAME + \"_3\"); ((DuplicateInstanceCommand) commandSpy).executeIfSelectedColumn(scenarioSimulationContextLocal, scenarioGridColumnMock2); verify(scenarioGridModelMock, times(1)).getInstancesCount(eq(scenarioGridColumnMock2.getFactIdentifier().getClassName())); verify((DuplicateInstanceCommand) commandSpy, times(1)).insertNewColumn(eq(scenarioSimulationContextLocal), eq(scenarioGridColumnMock2), eq(7), eq(Boolean.FALSE)); verify((DuplicateInstanceCommand) commandSpy, times(1)).insertNewColumn(eq(scenarioSimulationContextLocal), eq(scenarioGridColumnMock3), eq(8), eq(Boolean.FALSE)); String expectedDuplicatedLabelSecond = MULTIPART_VALUE + \"_2\" + DuplicateInstanceCommand.COPY_LABEL + \"2\"; verify((DuplicateInstanceCommand) commandSpy, times(2)).setInstanceHeader(eq(scenarioSimulationContextLocal), eq(gridColumnMock), eq(expectedDuplicatedLabelSecond), eq(FULL_CLASS_NAME + \"_2\")); List<String> expectedPropertyNameElementsSecond = Arrays.asList(expectedDuplicatedLabelSecond, SECOND); List<String> expectedPropertyNameElementsThird = Arrays.asList(expectedDuplicatedLabelSecond, THIRD); verify((DuplicateInstanceCommand) commandSpy, times(1)).setPropertyHeader(eq(scenarioSimulationContextLocal), eq(gridColumnMock), eq(expectedPropertyNameElementsSecond), eq(VALUE_CLASS_NAME), eq(GRID_PROPERTY_TITLE + \"_2\")); verify((DuplicateInstanceCommand) commandSpy, times(1)).setPropertyHeader(eq(scenarioSimulationContextLocal), eq(gridColumnMock), eq(expectedPropertyNameElementsThird), eq(VALUE_CLASS_NAME), eq(GRID_PROPERTY_TITLE + \"_3\")); verify(scenarioGridModelMock, times(1)).duplicateColumnValues(eq(COLUMN_NUMBER + 1), eq(0)); verify(scenarioGridModelMock, times(1)).duplicateColumnValues(eq(COLUMN_NUMBER + 2), eq(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isEnumType(TypeToken<?> type) { return type.isSubtypeOf(Enum.class); }### Assistant: @Test public void isEnumType() { assertThat(Types.isEnumType(TypeToken.of(Enum.class))).isTrue(); assertThat(Types.isEnumType(TypeToken.of(String.class))).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder newBuilder() { return new Builder(); }### Assistant: @Test public void testDelayedEntityOwnerSelectionWhenMaxPeerRequestsReceived() { testLog.info(\"testDelayedEntityOwnerSelectionWhenMaxPeerRequestsReceived starting\"); ShardTestKit kit = new ShardTestKit(getSystem()); EntityOwnerSelectionStrategyConfig.Builder builder = EntityOwnerSelectionStrategyConfig.newBuilder() .addStrategy(ENTITY_TYPE, LastCandidateSelectionStrategy.class, 500); ShardIdentifier leaderId = newShardId(LOCAL_MEMBER_NAME); ShardIdentifier peerId = newShardId(PEER_MEMBER_1_NAME); TestActorRef<TestEntityOwnershipShard> peer = actorFactory.createTestActor(TestEntityOwnershipShard.props( newShardBuilder(peerId, peerMap(leaderId.toString()), PEER_MEMBER_1_NAME)), peerId.toString()); peer.underlyingActor().startDroppingMessagesOfType(ElectionTimeout.class); TestActorRef<EntityOwnershipShard> leader = actorFactory.createTestActor( newShardProps(leaderId, peerMap(peerId.toString()), LOCAL_MEMBER_NAME, builder.build()), leaderId.toString()); ShardTestKit.waitUntilLeader(leader); DOMEntity entity = new DOMEntity(ENTITY_TYPE, ENTITY_ID1); peer.tell(new RegisterCandidateLocal(entity), kit.getRef()); kit.expectMsgClass(SuccessReply.class); leader.tell(new RegisterCandidateLocal(entity), kit.getRef()); kit.expectMsgClass(SuccessReply.class); verifyCommittedEntityCandidate(leader, entity.getType(), entity.getIdentifier(), PEER_MEMBER_1_NAME); verifyCommittedEntityCandidate(leader, entity.getType(), entity.getIdentifier(), LOCAL_MEMBER_NAME); verifyOwner(leader, entity.getType(), entity.getIdentifier(), LOCAL_MEMBER_NAME); testLog.info(\"testDelayedEntityOwnerSelectionWhenMaxPeerRequestsReceived ending\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List biconnectedSets() { return lazyFindBiconnectedSets(); }### Assistant: @Test public void testBiconnectedSets() { SimpleGraph g = new SimpleGraph(); g.addVertex(\"a\"); g.addVertex(\"b\"); g.addVertex(\"c\"); g.addVertex(\"d\"); g.addVertex(\"e\"); g.addVertex(\"f\"); g.addVertex(\"g\"); g.addVertex(\"h\"); g.addVertex(\"i\"); g.addVertex(\"j\"); g.addVertex(\"k\"); g.addEdge(\"a\", \"b\"); g.addEdge(\"a\", \"c\"); g.addEdge(\"b\", \"c\"); g.addEdge(\"b\", \"d\"); g.addEdge(\"c\", \"d\"); g.addEdge(\"d\", \"e\"); g.addEdge(\"d\", \"g\"); g.addEdge(\"e\", \"f\"); g.addEdge(\"e\", \"h\"); g.addEdge(\"f\", \"h\"); g.addEdge(\"i\", \"j\"); g.addEdge(\"i\", \"k\"); g.addEdge(\"j\", \"k\"); BiconnectivityInspector bci = new BiconnectivityInspector(g); List connectedSets = bci.biconnectedSets(); Assert.assertTrue(connectedSets.size() == 5); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = BUSINESS_OBJECT_DEFINITION_COLUMNS_URI_PREFIX + \"/namespaces/{namespace}\" + \"/businessObjectDefinitionNames/{businessObjectDefinitionName}\" + \"/businessObjectDefinitionColumnNames/{businessObjectDefinitionColumnName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DEFINITION_COLUMNS_GET) public BusinessObjectDefinitionColumn getBusinessObjectDefinitionColumn(@PathVariable(\"namespace\") String namespace, @PathVariable(\"businessObjectDefinitionName\") String businessObjectDefinitionName, @PathVariable(\"businessObjectDefinitionColumnName\") String businessObjectDefinitionColumnName, @RequestParam(value = \"includeBusinessObjectDefinitionColumnUpdateHistory\", required = false) Boolean includeBusinessObjectDefinitionColumnUpdateHistory) { return businessObjectDefinitionColumnService.getBusinessObjectDefinitionColumn( new BusinessObjectDefinitionColumnKey(namespace, businessObjectDefinitionName, businessObjectDefinitionColumnName), includeBusinessObjectDefinitionColumnUpdateHistory); }### Assistant: @Test public void testGetBusinessObjectDefinitionColumnWithUpdateHistory() { List<BusinessObjectDefinitionColumnChangeEvent> businessObjectDefinitionColumnChangeEvents = Lists.newArrayList(new BusinessObjectDefinitionColumnChangeEvent(BDEF_COLUMN_DESCRIPTION, CREATED_ON, CREATED_BY)); BusinessObjectDefinitionColumnKey businessObjectDefinitionColumnKey = new BusinessObjectDefinitionColumnKey(BDEF_NAMESPACE, BDEF_NAME, BDEF_COLUMN_NAME); BusinessObjectDefinitionColumn businessObjectDefinitionColumn = new BusinessObjectDefinitionColumn(ID, businessObjectDefinitionColumnKey, COLUMN_NAME, BDEF_COLUMN_DESCRIPTION, businessObjectDefinitionColumnChangeEvents); when(businessObjectDefinitionColumnService.getBusinessObjectDefinitionColumn(businessObjectDefinitionColumnKey, true)) .thenReturn(businessObjectDefinitionColumn); BusinessObjectDefinitionColumn resultBusinessObjectDefinitionColumn = businessObjectDefinitionColumnRestController.getBusinessObjectDefinitionColumn(BDEF_NAMESPACE, BDEF_NAME, BDEF_COLUMN_NAME, true); verify(businessObjectDefinitionColumnService).getBusinessObjectDefinitionColumn(businessObjectDefinitionColumnKey, true); verifyNoMoreInteractions(businessObjectDefinitionColumnService); assertEquals(businessObjectDefinitionColumn, resultBusinessObjectDefinitionColumn); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<VariantEvaluation> run(VariantFilter filter, List<VariantEvaluation> variantEvaluations) { for (VariantEvaluation variantEvaluation : variantEvaluations) { if (variantEvaluation.passedFilters()) { run(filter, variantEvaluation); } } return passedFilteredVariants(variantEvaluations); }### Assistant: @Test public void testRunWithOneFilterOnlyReturnsVariantPassingAllFilters() { VariantFilter filterToPass = qualityFilter; List<VariantEvaluation> expResult = new ArrayList<>(); expResult.add(passesTargetQualityFilter); expResult.add(passesQualityFrequencyFilter); expResult.add(passesAllFilters); List<VariantEvaluation> result = instance.run(filterToPass, variantEvaluations); assertThat(result, equalTo(expResult)); for (VariantEvaluation variantEvaluation : result) { assertPassedFilterAndFailedAllOthers(variantEvaluation, filterToPass); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<String> parse(final String row) throws Exception { this.tokens.clear(); int scanOffset = 0; while (scanOffset <= row.length()) { scanOffset = readNextField(row, scanOffset); if (this.nullString != null) { final int lastIndex = this.tokens.size() - 1; String lastToken = this.tokens.get(lastIndex); if (this.nullString.equals(lastToken)) { this.tokens.set(lastIndex, null); } } } if (this.numExpectedFields >= 0) { final int numEncounteredFields = this.tokens.size(); if (numEncounteredFields != this.numExpectedFields) { final String msg = String.format(\"Found %d field, expected %d: <<<%s>>>\", numEncounteredFields, this.numExpectedFields, row); if (this.lenientPolicy == FAIL_ON_ILLEGAL_LINES || (this.lenientPolicy == FAIL_ON_OVERLONG_LINES && numEncounteredFields > this.numExpectedFields)) { throw new RuntimeException(msg); } else { logger.warn(msg); } } } return this.tokens; }### Assistant: @Test public void splittingEasyLinesShouldWork() throws Exception { CsvParser parser = new CsvParser(';', '\"', null); String testRow = \"\\\"Hello\\\";;\\\"World;\\\";\\\"\\\";!;\\\"\\\"\"; List<String> expectedResult = Arrays.asList(\"Hello\", \"\", \"World;\", \"\", \"!\", \"\"); List<String> result = parser.parse(testRow); Assert.assertEquals(expectedResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public AccessControlList merge(final AclEntry entry) { checkNotNull(entry, \"ACL entry to be added\"); final AuthorizationSubject authSubject = entry.getAuthorizationSubject(); final Permissions permissions = getPermissionsOf(authSubject); permissions.addAll(entry.getPermissions()); final Map<AuthorizationSubject, AclEntry> entriesCopy = copyEntries(); entriesCopy.put(authSubject, AccessControlListModelFactory.newAclEntry(authSubject, permissions)); return new ImmutableAccessControlList(entriesCopy); }### Assistant: @Test public void mergeAclEntryWorksAsExpected() { final Permission permission = Permission.WRITE; final AclEntry entryToAdd = newAclEntry(KNOWN_AUTH_SUBJECT_FOO, permission); underTest = underTest.merge(entryToAdd); assertThat(underTest).containsExactly(entryToAdd); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public org.modeshape.jcr.api.query.Query createQuery( String statement, String language ) throws InvalidQueryException, RepositoryException { CheckArg.isNotNull(statement, \"statement\"); CheckArg.isNotNull(language, \"language\"); return createQuery(statement, language, null, null); }### Assistant: @FixFor( \"MODE-2151\" ) @Test public void shouldBeAbleToCreateAndExecuteJcrSql2QueryWithChildCountCriteria() throws RepositoryException { String sql = \"SELECT * FROM [car:Car] as car\"; Query query = session.getWorkspace().getQueryManager().createQuery(sql, Query.JCR_SQL2); String[] columnNames = carColumnNames(\"car\"); validateQuery().rowCount(13).hasColumns(columnNames).validate(query, query.execute()); sql = \"SELECT * FROM [car:Car] as car WHERE CHILDCOUNT(car) = 0\"; query = session.getWorkspace().getQueryManager().createQuery(sql, Query.JCR_SQL2); validateQuery().rowCount(13).hasColumns(columnNames).validate(query, query.execute()); sql = \"SELECT [jcr:path], [mode:childCount] FROM [nt:unstructured] WHERE CHILDCOUNT() = 4\"; query = session.getWorkspace().getQueryManager().createQuery(sql, Query.JCR_SQL2); validateQuery().rowCount(2).validate(query, query.execute()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public WebXml parse(InputStream inputStream) { WebXml webXml = new WebXml(); try { DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder(); Document document = documentBuilder.parse(inputStream); XPath xPath = XPathFactory.newInstance().newXPath(); parseAbsoluteOrdering(webXml, xPath, document); parseOrdering(webXml, xPath, document); parseContextParameters(webXml, xPath, document); parseDefaultContextPath(webXml, xPath, document); parseDenyUncoveredHttpMethods(webXml, xPath, document); parseDisplayName(webXml, xPath, document); parseFragmentName(webXml, xPath, document); parseDistributable(webXml, xPath, document); parseErrorPages(webXml, xPath, document); parseFilterMappings(webXml, xPath, document); parseFilters(webXml, xPath, document); parseListeners(webXml, xPath, document); parseLoginConfig(webXml, xPath, document); parseMimeMappings(webXml, xPath, document); parseRequestCharacterEncoding(webXml, xPath, document); parseResponseCharacterEncoding(webXml, xPath, document); parseLocaleEncodingMapping(webXml, xPath, document); processSecurityConstraints(webXml, xPath, document); processSecurityRoles(webXml, xPath, document); parseServletMappings(webXml, xPath, document); parseServlets(webXml, xPath, document); parseSessionConfig(webXml, xPath, document); parseWebApp(webXml, xPath, document); parseWelcomeFiles(webXml, xPath, document); } catch (Throwable t) { LOGGER.log(WARNING, \"Unable to parse web.xml\", t); } return webXml; }### Assistant: @Test void testParseWebXml() throws Exception { DefaultWebApplication webApplication = new DefaultWebApplication(); webApplication.addResource(new DirectoryResource(new File(\"src/test/webxml/parse\"))); InputStream inputStream = webApplication.getResourceAsStream(\"WEB-INF/web.xml\"); WebXmlParser parser = new WebXmlParser(); WebXml webXml = parser.parse(inputStream); assertFalse(webXml.getServlets().isEmpty()); assertEquals(2, webXml.getServlets().size()); assertNotEquals(webXml.getServlets().get(0).getServletName(), webXml.getServlets().get(1).getServletName()); assertTrue(webXml.getServlets().get(0).isAsyncSupported()); assertFalse(webXml.getServlets().get(1).isAsyncSupported()); assertFalse(webXml.getFilters().isEmpty()); assertEquals(1, webXml.getFilters().size()); assertEquals(\"/defaultContextPath\", webXml.getDefaultContextPath()); assertTrue(webXml.getDenyUncoveredHttpMethods()); assertEquals(\"myServletContextName\", webXml.getDisplayName()); assertTrue(webXml.isDistributable()); assertEquals(\"UTF-8\", webXml.getResponseCharacterEncoding()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ResourceDefinition getResourceDefinition(Resource.Type type, Map<Resource.Type, String> mapIds) { ResourceDefinition resourceDefinition; if (resourceDefinitions.containsKey(type)) { return resourceDefinitions.get(type); } switch (type.getInternalType()) { case Cluster: resourceDefinition = new ClusterResourceDefinition(); break; case Service: resourceDefinition = new ServiceResourceDefinition(); break; case Host: resourceDefinition = mapIds.containsKey(Resource.Type.Cluster) ? new HostResourceDefinition() : new DetachedHostResourceDefinition(); break; case Component: resourceDefinition = new ComponentResourceDefinition(); break; case HostComponent: resourceDefinition = new HostComponentResourceDefinition(); break; case Action: resourceDefinition = new ActionResourceDefinition(); break; case Configuration: resourceDefinition = new ConfigurationResourceDefinition(); break; case ServiceConfigVersion: resourceDefinition = new ServiceConfigVersionResourceDefinition(); break; case Task: resourceDefinition = new TaskResourceDefinition(); break; case User: resourceDefinition = new UserResourceDefinition(); break; case Group: resourceDefinition = new GroupResourceDefinition(); break; case Member: resourceDefinition = new MemberResourceDefinition(); break; case Request: resourceDefinition = new RequestResourceDefinition(); break; case Stack: resourceDefinition = new StackResourceDefinition(); break; case StackVersion: resourceDefinition = new StackVersionResourceDefinition(); break; case StackLevelConfiguration: resourceDefinition = new StackLevelConfigurationResourceDefinition(); break; case StackService: resourceDefinition = new StackServiceResourceDefinition(); break; case StackServiceComponent: resourceDefinition = new StackServiceComponentResourceDefinition(); break; case StackServiceComponentDependency: resourceDefinition = new StackDependencyResourceDefinition(); break; case StackConfiguration: resourceDefinition = new StackConfigurationResourceDefinition(); break; case StackConfigurationDependency: resourceDefinition = new StackConfigurationDependencyResourceDefinition(); break; case Extension: resourceDefinition = new ExtensionResourceDefinition(); break; case ExtensionVersion: resourceDefinition = new ExtensionVersionResourceDefinition(); break; case ExtensionLink: resourceDefinition = new ExtensionLinkResourceDefinition(); break; case OperatingSystem: resourceDefinition = new OperatingSystemResourceDefinition(); break; case Repository: resourceDefinition = new RepositoryResourceDefinition(); break; case DRFeed: resourceDefinition = new FeedResourceDefinition(); break; case DRTargetCluster: resourceDefinition = new TargetClusterResourceDefinition(); break; case DRInstance: resourceDefinition = new InstanceResourceDefinition(); break; case Workflow: resourceDefinition = new WorkflowResourceDefinition(); break; case Job: resourceDefinition = new JobResourceDefinition(); break; case TaskAttempt: resourceDefinition = new TaskAttemptResourceDefinition(); break; case RootService: resourceDefinition = new RootServiceResourceDefinition(); break; case RootServiceComponent: resourceDefinition = new RootServiceComponentResourceDefinition(); break; case RootServiceHostComponent: resourceDefinition = new RootServiceHostComponentResourceDefinition(); break; case ConfigGroup: resourceDefinition = new ConfigGroupResourceDefinition(); break; case RequestSchedule: resourceDefinition = new RequestScheduleResourceDefinition(); break; case View: resourceDefinition = new ViewResourceDefinition(); break; case ViewVersion: resourceDefinition = new ViewVersionResourceDefinition(); break; case ViewInstance: String viewName = mapIds.get(Resource.Type.View); String version = mapIds.get(Resource.Type.ViewVersion); Set<SubResourceDefinition> subResourceDefinitions = (viewName == null || version == null) ? Collections.<SubResourceDefinition>emptySet() : ViewRegistry.getInstance().getSubResourceDefinitions(viewName, version); resourceDefinition = new ViewInstanceResourceDefinition(subResourceDefinitions); break; case ViewURL: resourceDefinition = new ViewUrlResourceDefinition(); break; case Blueprint: resourceDefinition = new BlueprintResourceDefinition(); break; case Recommendation: resourceDefinition = new RecommendationResourceDefinition(); break; case Validation: resourceDefinition = new ValidationResourceDefinition(); break; case HostComponentProcess: resourceDefinition = new HostComponentProcessResourceDefinition(); break; case Permission: resourceDefinition = new PermissionResourceDefinition(); break; case Alert: resourceDefinition = new AlertResourceDefinition(); break; case AlertDefinition: resourceDefinition = new AlertDefResourceDefinition(); break; case AlertHistory: resourceDefinition = new AlertHistoryResourceDefinition(); break; case AlertGroup: resourceDefinition = new AlertGroupResourceDefinition(); break; case AlertTarget: resourceDefinition = new AlertTargetResourceDefinition(); break; case AlertNotice: resourceDefinition = new AlertNoticeResourceDefinition(); break; case AmbariPrivilege: resourceDefinition = new PrivilegeResourceDefinition(Resource.Type.AmbariPrivilege); break; case ClusterPrivilege: resourceDefinition = new PrivilegeResourceDefinition(Resource.Type.ClusterPrivilege); break; case ViewPrivilege: resourceDefinition = new PrivilegeResourceDefinition(Resource.Type.ViewPrivilege); break; case UserPrivilege: resourceDefinition = new PrivilegeResourceDefinition(Resource.Type.UserPrivilege); break; case GroupPrivilege: resourceDefinition = new PrivilegeResourceDefinition(Resource.Type.GroupPrivilege); break; case ViewPermission: resourceDefinition = new ViewPermissionResourceDefinition(); break; case ClientConfig: resourceDefinition = new ClientConfigResourceDefinition(); break; case LdapSyncEvent: resourceDefinition = new LdapSyncEventResourceDefinition(); break; case RepositoryVersion: resourceDefinition = new RepositoryVersionResourceDefinition(); break; case CompatibleRepositoryVersion: resourceDefinition = new SimpleResourceDefinition(Resource.Type.CompatibleRepositoryVersion, \"compatible_repository_version\", \"compatible_repository_versions\", Resource.Type.OperatingSystem); break; case HostStackVersion: resourceDefinition = new ComponentStackVersionResourceDefinition(Resource.Type.HostStackVersion); break; case ClusterStackVersion: resourceDefinition = new ComponentStackVersionResourceDefinition(Resource.Type.ClusterStackVersion); break; case Upgrade: resourceDefinition = new UpgradeResourceDefinition(); break; case UpgradeGroup: resourceDefinition = new SimpleResourceDefinition( Resource.Type.UpgradeGroup, \"upgrade_group\", \"upgrade_groups\", Resource.Type.UpgradeItem); break; case UpgradeItem: resourceDefinition = new SimpleResourceDefinition( Resource.Type.UpgradeItem, \"upgrade_item\", \"upgrade_items\", Resource.Type.Task); break; case UpgradeSummary: resourceDefinition = new SimpleResourceDefinition( Resource.Type.UpgradeSummary, \"upgrade_summary\", \"upgrade_summary\"); break; case PreUpgradeCheck: resourceDefinition = new SimpleResourceDefinition(Resource.Type.PreUpgradeCheck, \"rolling_upgrade_check\", \"rolling_upgrade_checks\"); break; case Stage: resourceDefinition = new SimpleResourceDefinition(Resource.Type.Stage, \"stage\", \"stages\", Resource.Type.Task); break; case StackArtifact: resourceDefinition = new SimpleResourceDefinition(Resource.Type.StackArtifact, \"artifact\", \"artifacts\"); break; case Artifact: resourceDefinition = new SimpleResourceDefinition(Resource.Type.Artifact, \"artifact\", \"artifacts\"); break; case Theme: resourceDefinition = new SimpleResourceDefinition(Resource.Type.Theme, \"theme\", \"themes\"); break; case QuickLink: resourceDefinition = new SimpleResourceDefinition(Resource.Type.QuickLink, \"quicklink\", \"quicklinks\"); break; case Widget: resourceDefinition = new WidgetResourceDefinition(); break; case WidgetLayout: resourceDefinition = new WidgetLayoutResourceDefinition(); break; case ActiveWidgetLayout: resourceDefinition = new ActiveWidgetLayoutResourceDefinition(); break; case HostKerberosIdentity: resourceDefinition = new HostKerberosIdentityResourceDefinition(); break; case KerberosDescriptor: resourceDefinition = new SimpleResourceDefinition(Resource.Type.KerberosDescriptor, \"kerberos_descriptor\", \"kerberos_descriptors\"); break; case Credential: resourceDefinition = new CredentialResourceDefinition(); break; case RoleAuthorization: resourceDefinition = new SimpleResourceDefinition(Resource.Type.RoleAuthorization, \"authorization\", \"authorizations\"); break; case UserAuthorization: resourceDefinition = new SimpleResourceDefinition(Resource.Type.UserAuthorization, \"authorization\", \"authorizations\"); break; case Setting: resourceDefinition = new SimpleResourceDefinition(Resource.Type.Setting, \"setting\", \"settings\"); break; case VersionDefinition: resourceDefinition = new VersionDefinitionResourceDefinition(); break; case ClusterKerberosDescriptor: resourceDefinition = new SimpleResourceDefinition( Resource.Type.ClusterKerberosDescriptor, \"kerberos_descriptor\", \"kerberos_descriptors\", null, Collections.singletonMap(SimpleResourceDefinition.DirectiveType.READ, Arrays.asList( ClusterKerberosDescriptorResourceProvider.DIRECTIVE_EVALUATE_WHEN_CLAUSE, ClusterKerberosDescriptorResourceProvider.DIRECTIVE_ADDITIONAL_SERVICES )) ); break; case LoggingQuery: resourceDefinition = new LoggingResourceDefinition(); break; case RemoteCluster: resourceDefinition = new RemoteClusterResourceDefinition(); break; default: throw new IllegalArgumentException(\"Unsupported resource type: \" + type); } return resourceDefinition; }### Assistant: @Test public void testGetStackArtifactDefinition() { ResourceDefinition resourceDefinition = ResourceInstanceFactoryImpl.getResourceDefinition( Resource.Type.StackArtifact, null); assertEquals(\"artifact\", resourceDefinition.getSingularName()); assertEquals(\"artifacts\", resourceDefinition.getPluralName()); assertEquals(Resource.Type.StackArtifact, resourceDefinition.getType()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void sendMessageToTheDm( Message message ) throws IOException { this.messagingClient.sendMessageToTheDm( message ); }### Assistant: @Test public void testSendMessageToTheDm_normal() throws Exception { Mockito.verifyZeroInteractions( this.msgClient ); this.mngr.sendMessageToTheDm( new MsgCmdRemoveInstance( \"/\" )); Mockito.verify( this.msgClient, Mockito.times( 1 )).sendMessageToTheDm( Mockito.any( MsgCmdRemoveInstance.class )); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Observable<Todo> createOrUpdate(Todo todo) { return Observable.create(new Observable.OnSubscribe<Todo>() { @Override public void call(Subscriber<? super Todo> subscriber) { try { long id = todo.save(); if (id == -1L) throw new Exception(mContext.getString(R.string.problem_save)); subscriber.onNext(todo); subscriber.onCompleted(); } catch (Exception ex) { subscriber.onError(ex); } } }); }### Assistant: @Test public void testCreateOrUpdateFail() throws Exception { Todo todo = Mockito.mock(Todo.class); when(todo.save()).thenReturn(-1L); mTodoRepository.createOrUpdate(todo).observeOn(Schedulers.immediate()).subscribe(newTodo -> { fail(\"Should throw exception\"); }, throwable -> { assertEquals(\"Can not save todo\", throwable.getMessage()); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isValidatedSearch(String usstate, String city, String zipcode, String gender, String specialty, String phone, String firstname, String lastname, String facilityName) { boolean validateCall = true; if (usstate == null && city == null && zipcode == null && phone == null && specialty == null && firstname == null && lastname == null && gender == null) validateCall = false; if (usstate != null && zipcode != null) validateCall = false; if (usstate != null) { if (usstate.matches(\"[a-zA-Z][a-zA-Z]\") == true) { List<LookupDto> stateCodes = stateCodeService .findAllStateCodes(); boolean isValidStateCode = false; for (LookupDto stateCode : stateCodes) { if (usstate.compareToIgnoreCase(stateCode.getCode()) == 0) { isValidStateCode = true; break; } } if (isValidStateCode != true) { validateCall = false; } } else validateCall = false; } if (city != null && city.length() < 3) validateCall = false; if (zipcode != null && zipcode.length() < 5) validateCall = false; if (specialty != null && specialty.length() < 3) validateCall = false; if (phone != null && phone.length() != 10) validateCall = false; if (firstname != null && firstname.length() < 2) validateCall = false; if (lastname != null && lastname.length() < 2) validateCall = false; if (city != null && usstate == null) validateCall = false; return validateCall; }### Assistant: @Test public void testIsValidatedSearch_When_Firstname_Less_Than_Two() { Boolean validateCall = providerSearchLookupServiceImpl .isValidatedSearch(null, null, null, null, null, null, \"a\", null, null); assertEquals(false, validateCall); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void fileSendAccepted(final int userCode, final String fileName, final int fileHash, final int port) { executorService.execute(new Runnable() { @Override public void run() { messageResponder.fileSendAccepted(userCode, fileName, fileHash, port); } }); }### Assistant: @Test public void fileSendAcceptedShouldPassThroughUsingExecutor() { wrapper.fileSendAccepted(100, \"fileName\", 98765, 1050); final ArgumentCaptor<Runnable> runnableCaptor = ArgumentCaptor.forClass(Runnable.class); verifyZeroInteractions(messageResponder); verify(executorService).execute(runnableCaptor.capture()); runnableCaptor.getValue().run(); verify(messageResponder).fileSendAccepted(100, \"fileName\", 98765, 1050); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected String getLookupKeyForMessage(MessageContext messageContext) throws TransformerException { WebServiceMessage request = messageContext.getRequest(); QName rootQName = PayloadRootUtils.getPayloadRootQName(request.getPayloadSource(), transformerFactory); return rootQName.getLocalPart(); }### Assistant: @Test public void testGetLookupKeyForMessageNamespace() throws Exception { MockWebServiceMessage request = new MockWebServiceMessage( \"<MyRequest xmlns='http: MessageContext messageContext = new DefaultMessageContext(request, new MockWebServiceMessageFactory()); String result = mapping.getLookupKeyForMessage(messageContext); Assert.assertEquals(\"Invalid lookup key\", \"MyRequest\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public IAtomContainerSet getStructures(IAtomContainer molecule) { int countStructure = 0; IAtomContainerSet setOfMol = molecule.getBuilder().newInstance(IAtomContainerSet.class); setOfMol.addAtomContainer(molecule); for (int i = 0; i < setOfMol.getAtomContainerCount(); i++) { IAtomContainer mol = setOfMol.getAtomContainer(i); for (IReactionProcess aReactionsList : reactionsList) { IReactionProcess reaction = aReactionsList; IAtomContainerSet setOfReactants = molecule.getBuilder().newInstance(IAtomContainerSet.class); setOfReactants.addAtomContainer(mol); try { IReactionSet setOfReactions = reaction.initiate(setOfReactants, null); if (setOfReactions.getReactionCount() != 0) for (int k = 0; k < setOfReactions.getReactionCount(); k++) for (int j = 0; j < setOfReactions.getReaction(k).getProducts().getAtomContainerCount(); j++) { IAtomContainer product = setOfReactions.getReaction(k).getProducts() .getAtomContainer(j); if (!existAC(setOfMol, product)) { setOfMol.addAtomContainer(product); countStructure++; if (countStructure > maxStructures) return setOfMol; } } } catch (CDKException e) { e.printStackTrace(); } } } return setOfMol; }### Assistant: @Test @Category(SlowTest.class) public void testAllylRadical() throws Exception { IAtomContainer molecule = builder.newInstance(IAtomContainer.class); molecule.addAtom(builder.newInstance(IAtom.class, \"C\")); molecule.getAtom(0).setFormalCharge(1); molecule.addAtom(builder.newInstance(IAtom.class, \"C\")); molecule.addAtom(builder.newInstance(IAtom.class, \"C\")); molecule.addAtom(builder.newInstance(IAtom.class, \"C\")); molecule.addBond(0, 1, IBond.Order.SINGLE); molecule.addBond(1, 2, IBond.Order.DOUBLE); molecule.addBond(2, 3, IBond.Order.SINGLE); addExplicitHydrogens(molecule); molecule.getAtom(0).setFormalCharge(0); molecule.addSingleElectron(new SingleElectron(molecule.getAtom(0))); Assert.assertEquals(11, molecule.getAtomCount()); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule); StructureResonanceGenerator gRI = new StructureResonanceGenerator(); IAtomContainerSet resonanceStructures = gRI.getStructures(molecule); Assert.assertEquals(2, resonanceStructures.getAtomContainerCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isAnonymousClass(final String name) { if (!name.contains(INNER_MARK)) { return false; } final int i = name.lastIndexOf(INNER_MARK); if (i < name.length()) { final String s = name.substring(i + 1); return NumberUtils.isDigits(s); } return false; }### Assistant: @Test public void isAnonymousClass2() throws Exception { final String name = \"java.utils.Map$1$1\"; final boolean b = ClassNameUtils.isAnonymousClass(name); assertEquals(true, b); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void write(int b) throws IOException { int expected = expectedBytesStream.read(); if (expected == -1) { throw new MismatchException(\"EOF reached in expectedBytesStream\"); } if (expected != b) { throw new MismatchException(\"Data does not match\"); } }### Assistant: @Test(expected = MismatchException.class) public void testWrite_WholeBuffer_Fail() throws IOException { byte[] tweaked = new byte[] {0, 1, 2, 3, 4, 55, 6, 7, 8, 9}; outputStream.write(tweaked); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AttributeCol52 cloneColumn() { AttributeCol52 cloned = new AttributeCol52(); cloned.setAttribute( getAttribute() ); cloned.setReverseOrder( isReverseOrder() ); cloned.setUseRowNumber( isUseRowNumber() ); cloned.cloneCommonColumnConfigFrom( this ); return cloned; }### Assistant: @Test public void testCloneColumn() { column1.setWidth(10); AttributeCol52 clone = column1.cloneColumn(); assertEquals(column1.getAttribute(), clone.getAttribute()); assertEquals(column1.isReverseOrder(), clone.isReverseOrder()); assertEquals(column1.isUseRowNumber(), clone.isUseRowNumber()); assertEquals(column1.getHeader(), clone.getHeader()); assertEquals(column1.getWidth(), clone.getWidth()); assertEquals(column1.isHideColumn(), clone.isHideColumn()); assertEquals(column1.getDefaultValue(), clone.getDefaultValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void terminateListener(final String beanName) { if (this.applicationContext.containsBean(beanName)) { final Listener listener = this.applicationContext.getBean(beanName, Listener.class); listener.stop(); } else { throw new SpringBatchLightminConfigurationException(\"Could not terminate bean with name: \" + beanName); } }### Assistant: @Test public void testTerminateListener() { final JobListenerConfiguration jobListenerConfiguration = DomainTestHelper.createJobListenerConfiguration (\"src/test/\", \"*.txt\", JobListenerType.LOCAL_FOLDER_LISTENER); jobListenerConfiguration.setBeanName(\"testBean\"); jobListenerConfiguration.setListenerStatus(ListenerStatus.ACTIVE); final JobConfiguration jobConfiguration = DomainTestHelper.createJobConfiguration(jobListenerConfiguration); final ListenerConstructorWrapper listenerConstructorWrapper = new ListenerConstructorWrapper(); listenerConstructorWrapper.setJobIncrementer(JobIncrementer.DATE); listenerConstructorWrapper.setJob(this.job); listenerConstructorWrapper.setJobConfiguration(jobConfiguration); listenerConstructorWrapper.setJobLauncher(this.jobLauncher); listenerConstructorWrapper.setJobParameters(new JobParametersBuilder().toJobParameters()); final FolderListener folderListener = new FolderListener(listenerConstructorWrapper); when(this.applicationContext.getBean(anyString(), any(Class.class))).thenReturn(folderListener); when(this.applicationContext.containsBean(anyString())).thenReturn(Boolean.TRUE); try { this.listenerService.terminateListener(\"testBean\"); } catch (final Exception e) { fail(e.getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static AmsError of(byte... values) { return new AmsError(values); }### Assistant: @Test public void errorLongBig() { AmsError error = AmsError.of(0xFFFFFFFFL); assertThat(error.getAsLong(), is(0xFFFFFFFFL)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static org.apache.hadoop.mapred.JobID fromYarn(JobId id) { String identifier = fromClusterTimeStamp(id.getAppId().getClusterTimestamp()); return new org.apache.hadoop.mapred.JobID(identifier, id.getId()); }### Assistant: @Test public void testFromYarnQueue() { org.apache.hadoop.yarn.api.records.QueueInfo child = Mockito.mock(org.apache.hadoop.yarn.api.records.QueueInfo.class); Mockito.when(child.getQueueState()).thenReturn(QueueState.RUNNING); org.apache.hadoop.yarn.api.records.QueueInfo queueInfo = Mockito.mock(org.apache.hadoop.yarn.api.records.QueueInfo.class); List<org.apache.hadoop.yarn.api.records.QueueInfo> children = new ArrayList<org.apache.hadoop.yarn.api.records.QueueInfo>(); children.add(child); Mockito.when(queueInfo.getChildQueues()).thenReturn(children); Mockito.when(queueInfo.getQueueState()).thenReturn(QueueState.RUNNING); org.apache.hadoop.mapreduce.QueueInfo returned = TypeConverter.fromYarn(queueInfo, new Configuration()); Assert.assertEquals(\"QueueInfo children weren't properly converted\", returned.getQueueChildren().size(), 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Signer getInstance(boolean forSigning, CipherParameters parameters, AlgorithmIdentifier algId) { if (!algId.getAlgorithm().equals(PKCSObjectIdentifiers.id_RSASSA_PSS)) { throw new IllegalArgumentException(\"Incompatible algorithm for this signer: \" + algId.getAlgorithm().getId()); } ASN1Encodable algParams = algId.getParameters(); if (DERNull.INSTANCE.equals(algParams)) { return getInstance(forSigning, parameters); } else { RSASSAPSSparams pssParams = RSASSAPSSparams.getInstance(algId.getParameters()); if (parameters instanceof AsymmetricKeyParameters) { return getInstance(forSigning, new PssSignerParameters((AsymmetricKeyParameters) parameters, pssParams.getHashAlgorithm().getAlgorithm().getId(), AlgorithmIdentifier .getInstance(pssParams.getMaskGenAlgorithm().getParameters()).getAlgorithm().getId(), pssParams.getSaltLength().intValue(), pssParams.getTrailerField().intValue())); } } throw new UnsupportedOperationException(PSS_PARAMS_ERROR + parameters.getClass().getName()); }### Assistant: @Test public void testEncodedSha384SignatureVerification() throws Exception { Signer signer = factory.getInstance(true, new PssSignerParameters(privateKey,\"SHA-384\", -1)); Signer verifier = factory.getInstance(false, publicKey, signer.getEncoded()); runTestSignatureVerification(signer, verifier); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean access(String action, String resource, Principal principal, String trustDomain) { resource = resource.toLowerCase(); if (trustDomain != null) { trustDomain = trustDomain.toLowerCase(); } action = action.toLowerCase(); resource = userHomeDomainResource(resource); if (LOG.isDebugEnabled()) { LOG.debug(\"access:(\" + action + \", \" + resource + \", \" + principal + \", \" + trustDomain + \")\"); } if (!AuthzHelper.authorityAuthorizationAllowed(principal)) { LOG.error(\"Authority is not allowed to support authorization checks\"); return false; } String domainName = AuthzHelper.retrieveResourceDomain(resource, action, trustDomain); if (domainName == null) { throw new com.yahoo.athenz.common.server.rest.ResourceException( ResourceException.NOT_FOUND, \"Domain not found\"); } AthenzDomain domain = retrieveAccessDomain(domainName, principal); if (domain == null) { throw new com.yahoo.athenz.common.server.rest.ResourceException( ResourceException.NOT_FOUND, \"Domain not found\"); } if (domain.getDomain().getEnabled() == Boolean.FALSE) { throw new com.yahoo.athenz.common.server.rest.ResourceException( ResourceException.FORBIDDEN, \"Disabled Domain\"); } AccessStatus accessStatus = hasAccess(domain, action, resource, principal, trustDomain); return accessStatus == AccessStatus.ALLOWED; }### Assistant: @Test public void testAccessInvalidResourceDomain() { Principal principal = SimplePrincipal.create(\"user\", \"user1\", \"v=U1;d=user;n=user1;s=signature\"); try { zms.access(\"read\", \"domain:invalid:entity\", principal, null); fail(); } catch (com.yahoo.athenz.common.server.rest.ResourceException ex) { assertEquals(ex.getCode(), 404); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder newBuilder() { return new AutoValue_FeatureRowToStoreAllocator.Builder(); }### Assistant: @Test public void featureRowShouldBeAllocatedToStoreTagsAccordingToSubscription() { StoreProto.Store bqOnlyStore = newStore(\"bq*\"); StoreProto.Store redisOnlyStore = newStore(\"redis*\"); StoreProto.Store anyStore = newStore(\"*\"); Map<StoreProto.Store, TupleTag<FeatureRowProto.FeatureRow>> storeTags = ImmutableMap.of( bqOnlyStore, new TupleTag<>(), redisOnlyStore, new TupleTag<>(), anyStore, new TupleTag<>()); PCollectionTuple allocatedRows = p.apply( Create.of( FeatureRowProto.FeatureRow.newBuilder().setFeatureSet(\"project/bq_1\").build(), FeatureRowProto.FeatureRow.newBuilder().setFeatureSet(\"project/bq_2\").build(), FeatureRowProto.FeatureRow.newBuilder() .setFeatureSet(\"project/redis_1\") .build(), FeatureRowProto.FeatureRow.newBuilder() .setFeatureSet(\"project/redis_2\") .build(), FeatureRowProto.FeatureRow.newBuilder() .setFeatureSet(\"project/redis_3\") .build())) .apply( FeatureRowToStoreAllocator.newBuilder() .setStoreTags(storeTags) .setStores(ImmutableList.of(bqOnlyStore, redisOnlyStore, anyStore)) .build()); PAssert.that( allocatedRows .get(storeTags.get(bqOnlyStore)) .setCoder(ProtoCoder.of(FeatureRowProto.FeatureRow.class)) .apply(\"CountBq\", Count.globally())) .containsInAnyOrder(2L); PAssert.that( allocatedRows .get(storeTags.get(redisOnlyStore)) .setCoder(ProtoCoder.of(FeatureRowProto.FeatureRow.class)) .apply(\"CountRedis\", Count.globally())) .containsInAnyOrder(3L); PAssert.that( allocatedRows .get(storeTags.get(anyStore)) .setCoder(ProtoCoder.of(FeatureRowProto.FeatureRow.class)) .apply(\"CountAll\", Count.globally())) .containsInAnyOrder(5L); p.run(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Address() { super(); }### Assistant: @Test public void testAddress() { try { DumpedPrivateKey dumpedPrivateKey = new DumpedPrivateKey(\"L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1\"); ECKey ecKey = dumpedPrivateKey.getKey(); String addressStr = ecKey.toAddress(); assertEquals(ecKey.toAddress(), \"1F3sAm6ZtwLAUnj7d38pGFxtP3RVEvtsbV\"); } catch (AddressFormatException e) { e.printStackTrace(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public static <T> Function<T, Tuple0> toTuple() { return (Function<T, Tuple0>) Tuple0MapperImpl.EMPTY_MAPPER; }### Assistant: @Test void toTuple18() { final Function<Integer, Tuple18<Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer>> mapper = Tuples.toTuple(i -> i + 0, i -> i + 1, i -> i + 2, i -> i + 3, i -> i + 4, i -> i + 5, i -> i + 6, i -> i + 7, i -> i + 8, i -> i + 9, i -> i + 10, i -> i + 11, i -> i + 12, i -> i + 13, i -> i + 14, i -> i + 15, i -> i + 16, i -> i + 17); assertTuple(mapper.apply(0), 18); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public InputStream getInputStream() { return inputStream; }### Assistant: @Test public void getInputStreamReturnsErrorStreamWhenHttpConnectionReturnsBothErrorStreamAndInputStream() throws Exception { InputStream inputStream = new ByteArrayInputStream(new byte[0]); InputStream errorStream = new ByteArrayInputStream(new byte[0]); HttpURLConnection connection = mock(HttpURLConnection.class); when(connection.getErrorStream()).thenReturn(errorStream); when(connection.getInputStream()).thenReturn(inputStream); HttpResponse httpResponse = new HttpResponse(connection); InputStream actual = httpResponse.getInputStream(); assertThat(actual, is(not(nullValue()))); assertThat(actual, is(sameInstance(errorStream))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkAttributeSemantics(PerunSessionImpl perunSession, String key, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException { Integer maxUID = attribute.valueAsInteger(); if (maxUID == null) return; try { Attribute minUIDAttr = perunSession.getPerunBl().getAttributesManagerBl().getAttribute(perunSession, key, A_E_namespaceMinUID); Integer minUID = minUIDAttr.valueAsInteger(); if(minUID != null) { if(maxUID < minUID) throw new WrongReferenceAttributeValueException(attribute, minUIDAttr, key, null, key, null, \"Attribute value must be more than minUID. MinUID = \" + minUID + \", and maxUID try to set = \" + maxUID); } } catch (AttributeNotExistsException ex) { throw new ConsistencyErrorException(\"Attribute namespace-minUID is supposed to exist.\",ex); } }### Assistant: @Test(expected = WrongReferenceAttributeValueException.class) public void testValueLesserThanMinUID() throws Exception { System.out.println(\"testValueLesserThanMinUID()\"); attributeToCheck.setValue(1); reqAttribute.setValue(2); classInstance.checkAttributeSemantics(session, key, attributeToCheck); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int getNumberOfFoldsPerSplit() { return this.splits.get(0).size(); }### Assistant: @Test public void testGetNumberofFoldsPerSplit() { assertEquals(\"The number of folds does not match for the first split.\", this.testSplits.get(0).size(), this.splitSet.getNumberOfFoldsPerSplit()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object that) { return (this == that) || (that instanceof EName && eqFields((EName) that)); }### Assistant: @Test public void testEquals() throws Exception { final EName a = new EName(\"http: final EName b = new EName(\"http: final EName c = new EName(\"http: final EName d = new EName(\"http: assertEquals(a, a); assertEquals(a, b); assertEquals(b, a); assertNotEquals(a, c); assertNotEquals(c, a); assertNotEquals(c, d); assertNotEquals(d, c); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Flux<RoleData> modifyGuildRolePositions(long guildId, PositionModifyRequest[] request) { return Routes.GUILD_ROLE_POSITIONS_MODIFY.newRequest(guildId) .body(request) .exchange(getRouter()) .bodyToMono(RoleData[].class) .flatMapMany(Flux::fromArray); }### Assistant: @Test public void testModifyGuildRolePositions() { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Schema getOrAdd(TypeToken<?> type, ApiConfig config) { Map<TypeToken<?>, Schema> typesForConfig = getAllTypesForConfig(config); Schema schema = getOrCreateTypeForConfig(type, typesForConfig, config); if (schema == PLACEHOLDER_SCHEMA) { throw new IllegalStateException(\"schema repository is in a bad state!\"); } return schema; }### Assistant: @Test public void getOrAdd_transformer() throws Exception { ApiMethodConfig methodConfig = getMethodConfig(\"getTransformed\"); checkParameterizedSchema( repo.getOrAdd(methodConfig.getReturnType(), config), String.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Operation parse(InputStream in) throws SxmpParsingException, IOException, SAXException, ParserConfigurationException { SAXParserFactory factory = SAXParserFactory.newInstance(); SAXParser parser = factory.newSAXParser(); parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: Handler handler = new Handler(); XMLReader reader = parser.getXMLReader(); reader.setContentHandler(handler); reader.setErrorHandler(handler); reader.setEntityResolver(handler); try { parser.parse(new InputSource(in), handler); } catch (com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException e) { throw new SxmpParsingException(SxmpErrorCode.INVALID_XML, \"XML encoding mismatch\", null); } if (handler.error != null) { throw handler.error; } if (handler.getOperation() == null) { throw new SxmpParsingException(SxmpErrorCode.MISSING_REQUIRED_ELEMENT, \"The operation type [\" + handler.operationType.getValue() + \"] requires a request element\", new PartialOperation(handler.operationType)); } try { handler.getOperation().validate(); } catch (SxmpErrorException e) { throw new SxmpParsingException(e.getErrorCode(), e.getErrorMessage(), handler.getOperation()); } return handler.getOperation(); }### Assistant: @Test public void parseSubmitBadSourceTypeValue() throws Exception { StringBuilder string0 = new StringBuilder(200) .append(\"<?xml version=\\\"1.0\\\"?>\\n\") .append(\"<operation type=\\\"submit\\\">\\n\") .append(\" <account username=\\\"customer1\\\" password=\\\"test1\\\"/>\\n\") .append(\" <submitRequest referenceId=\\\"MYREF102020022\\\">\\n\") .append(\" <operatorId>1</operatorId>\\n\") .append(\" <deliveryReport>TrUe</deliveryReport>\\n\") .append(\" <sourceAddress type=\\\"network2\\\">40404</sourceAddress>\\n\") .append(\" <destinationAddress type=\\\"international\\\">+12065551212</destinationAddress>\\n\") .append(\" <text encoding=\\\"ISO-8859-1\\\">48656c6c6f20576f726c64</text>\\n\") .append(\" </submitRequest>\\n\") .append(\"</operation>\\n\") .append(\"\"); ByteArrayInputStream is = new ByteArrayInputStream(string0.toString().getBytes()); SxmpParser parser = new SxmpParser(); try { Operation operation = parser.parse(is); Assert.fail(); } catch (SxmpParsingException e) { Assert.assertEquals(SxmpErrorCode.UNABLE_TO_CONVERT_VALUE, e.getErrorCode()); Assert.assertThat(e.getMessage(), CoreMatchers.containsString(\"The address type [network2] is not valid\")); Assert.assertNotNull(e.getOperation()); SubmitRequest submitRequest = (SubmitRequest)e.getOperation(); Assert.assertEquals(Operation.Type.SUBMIT, submitRequest.getType()); Assert.assertEquals(new Integer(1), submitRequest.getOperatorId()); Assert.assertEquals(Boolean.TRUE, submitRequest.getDeliveryReport()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure public static <T extends Enum<T>> T getAttributeEnum(Node document, Class<T> type, boolean caseSensitive, String... path) { assert document != null : AssertMessages.notNullParameter(0); return getAttributeEnumWithDefault(document, type, caseSensitive, null, path); }### Assistant: @Test public void getAttributeEnumNodeClassBooleanStringArray() { assertSame(TestEnum.B, XMLUtil.getAttributeEnum(this.document, TestEnum.class, true, \"catalog\", \"book\", \"publish\", \"enum1\")); assertNull(XMLUtil.getAttributeEnum(this.document, TestEnum.class, true, \"catalog\", \"book\", \"publish\", \"Enum1\")); assertSame(TestEnum.B, XMLUtil.getAttributeEnum(this.document, TestEnum.class, false, \"catalog\", \"book\", \"publish\", \"enum1\")); assertSame(TestEnum.B, XMLUtil.getAttributeEnum(this.document, TestEnum.class, false, \"catalog\", \"book\", \"publish\", \"Enum1\")); assertNull(XMLUtil.getAttributeEnum(this.document, TestEnum.class, true, \"catalog\", \"book\", \"genre\", \"enum2\")); assertNull(XMLUtil.getAttributeEnum(this.document, TestEnum.class, true, \"catalog\", \"book\", \"genre\", \"Enum2\")); assertSame(TestEnum.B, XMLUtil.getAttributeEnum(this.document, TestEnum.class, false, \"catalog\", \"book\", \"genre\", \"enum2\")); assertSame(TestEnum.B, XMLUtil.getAttributeEnum(this.document, TestEnum.class, false, \"catalog\", \"book\", \"genre\", \"Enum2\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean hasText(String str) { return hasText((CharSequence) str); }### Assistant: @Test void testHasText() { String str = \"\\r\\n\\t\\t\"; assertTrue(StringUtils.hasLength(str)); assertFalse(StringUtils.hasText(str)); str = null; assertFalse(StringUtils.hasText(str)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Transactional(rollbackFor = Exception.class) public void update(E entity) { PK id = entity.getId(); Preconditions.checkNotNull(id,\"id\u4e0d\u80fd\u4e3anull\"); CacheGetResult<E> cacheGetResult = cache.GET(id); if (cacheGetResult.isSuccess()){ E entityFromCache = cacheGetResult.getValue(); if (entityFromCache == null) { throw new EntityNotFoundException(\"\u6570\u636e\u5e93\u4e2d\u4e0d\u5b58\u5728\u8be5\u5b9e\u4f53\uff0c\u5148create\u4e00\u4e0b\uff1f\"); } else { executeUpdate(entity); } }else { if (exists(entity.getId())){ executeUpdate(entity); }else { throw new EntityNotFoundException(\"\u6570\u636e\u5e93\u4e2d\u4e0d\u5b58\u5728\u8be5\u5b9e\u4f53\uff0c\u5148create\u4e00\u4e0b\uff1f\"); } } }### Assistant: @Test void update() { AccountEntity accountEntity = createNotExists(); accountEntity.setPassword(\"passWordUpdate\"); iStorage.update(accountEntity); iStorage.remove(accountEntity.getId()); Assertions.assertEquals(\"passWordUpdate\",iStorage.get(accountEntity.getAccount()).getPassword()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unused\") public NitfSegmentsFlow getNitfSegmentsFlow(ResourceResponse resourceResponse) throws NitfFormatException, IOException { notNull(resourceResponse, \"resourceResponse must be non-null\"); notNull(resourceResponse.getResource(), \"resourceResponse resource must be non-null\"); NitfSegmentsFlow nitfSegmentsFlow = null; try (final InputStream inputStream = resourceResponse.getResource().getInputStream()) { lock.acquire(); try { nitfSegmentsFlow = getNitfSegmentsFlow(inputStream); } finally { lock.release(); } } catch (InterruptedException e) { LOGGER.debug(\"Interrupt received while doing image processing.\", e); Thread.currentThread().interrupt(); } return nitfSegmentsFlow; }### Assistant: @Test public void testGetNitfSegmentsFlow() throws IOException, NitfFormatException, InterruptedException { Resource resource = mock(Resource.class); when(resource.getInputStream()).thenReturn(getInputStream(\"/i_3001a.ntf\")); ResourceResponse resourceResponse = mock(ResourceResponse.class); when(resourceResponse.getResource()).thenReturn(resource); NitfSegmentsFlow nitfSegmentsFlow = catalogOutputAdapter.getNitfSegmentsFlow(resourceResponse); assertThat(nitfSegmentsFlow, notNullValue()); verify(lock).acquire(); verify(lock).release(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static void writeLaunchEnv(OutputStream out, Map<String,String> environment, Map<Path,List<String>> resources, List<String> command) throws IOException { ShellScriptBuilder sb = ShellScriptBuilder.create(); if (environment != null) { for (Map.Entry<String,String> env : environment.entrySet()) { sb.env(env.getKey().toString(), env.getValue().toString()); } } if (resources != null) { for (Map.Entry<Path,List<String>> entry : resources.entrySet()) { for (String linkName : entry.getValue()) { sb.symlink(entry.getKey(), new Path(linkName)); } } } sb.command(command); PrintStream pout = null; try { pout = new PrintStream(out); sb.write(pout); } finally { if (out != null) { out.close(); } } }### Assistant: @Test public void testSpecialCharSymlinks() throws IOException { File shellFile = null; File tempFile = null; String badSymlink = Shell.WINDOWS ? \"foo@zz_#!-+bar.cmd\" : \"foo@zz%_#*&!-+= bar()\"; File symLinkFile = null; try { shellFile = Shell.appendScriptExtension(tmpDir, \"hello\"); tempFile = Shell.appendScriptExtension(tmpDir, \"temp\"); String timeoutCommand = Shell.WINDOWS ? \"@echo \\\"hello\\\"\" : \"echo \\\"hello\\\"\"; PrintWriter writer = new PrintWriter(new FileOutputStream(shellFile)); FileUtil.setExecutable(shellFile, true); writer.println(timeoutCommand); writer.close(); Map<Path, List<String>> resources = new HashMap<Path, List<String>>(); Path path = new Path(shellFile.getAbsolutePath()); resources.put(path, Arrays.asList(badSymlink)); FileOutputStream fos = new FileOutputStream(tempFile); Map<String, String> env = new HashMap<String, String>(); List<String> commands = new ArrayList<String>(); if (Shell.WINDOWS) { commands.add(\"cmd\"); commands.add(\"/c\"); commands.add(\"\\\"\" + badSymlink + \"\\\"\"); } else { commands.add(\"/bin/sh ./\\\\\\\"\" + badSymlink + \"\\\\\\\"\"); } ContainerLaunch.writeLaunchEnv(fos, env, resources, commands); fos.flush(); fos.close(); FileUtil.setExecutable(tempFile, true); Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[]{tempFile.getAbsolutePath()}, tmpDir); shexc.execute(); assertEquals(shexc.getExitCode(), 0); assert(shexc.getOutput().contains(\"hello\")); symLinkFile = new File(tmpDir, badSymlink); } finally { if (shellFile != null && shellFile.exists()) { shellFile.delete(); } if (tempFile != null && tempFile.exists()) { tempFile.delete(); } if (symLinkFile != null && symLinkFile.exists()) { symLinkFile.delete(); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> OnSubscribeFunc<T> defer(final Func0<? extends Observable<? extends T>> observableFactory) { return new OnSubscribeFunc<T>() { @Override public Subscription onSubscribe(Observer<? super T> observer) { Observable<? extends T> obs = observableFactory.call(); return obs.subscribe(observer); } }; }### Assistant: @Test @SuppressWarnings(\"unchecked\") public void testDefer() throws Throwable { Func0<Observable<String>> factory = mock(Func0.class); Observable<String> firstObservable = Observable.from(\"one\", \"two\"); Observable<String> secondObservable = Observable.from(\"three\", \"four\"); when(factory.call()).thenReturn(firstObservable, secondObservable); Observable<String> deferred = Observable.defer(factory); verifyZeroInteractions(factory); Observer<String> firstObserver = mock(Observer.class); deferred.subscribe(firstObserver); verify(factory, times(1)).call(); verify(firstObserver, times(1)).onNext(\"one\"); verify(firstObserver, times(1)).onNext(\"two\"); verify(firstObserver, times(0)).onNext(\"three\"); verify(firstObserver, times(0)).onNext(\"four\"); verify(firstObserver, times(1)).onCompleted(); Observer<String> secondObserver = mock(Observer.class); deferred.subscribe(secondObserver); verify(factory, times(2)).call(); verify(secondObserver, times(0)).onNext(\"one\"); verify(secondObserver, times(0)).onNext(\"two\"); verify(secondObserver, times(1)).onNext(\"three\"); verify(secondObserver, times(1)).onNext(\"four\"); verify(secondObserver, times(1)).onCompleted(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Map<String, String> parse(String header) throws ParseException { init(header); Map<String, String> parameters = new HashMap<>(); pos++; while (hasRemainingChars()) { String name = readToken(NAME_TERMINATORS); String value = null; if (charAtIs(source, pos, '=')) { pos++; if (charAtIs(source, pos, '\"')) { value = readQuotedString(); } else if (hasRemainingChars()) { value = readToken(VALUE_TERMINATORS); } } if (charAtIs(source, pos, PARAMS_SEPARATOR)) { pos++; } if (!isNullOrEmpty(name)) { parameters.put(name, value); } } return parameters; }### Assistant: @Test(expected = ParseException.class) public void throwsExceptionWhenStringContainsIllegalCharacter() throws Exception { headerParameterParser.parse(\"text/plain;fo[o=\\\"bar\\\"\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public PageRevision getMostRecentRevision(String... titles) throws Exception { URL url = new URL(entryPoint + \"/w/api.php?format=json&action=query&prop=revisions&rvprop=user|timestamp&titles=\" + encode(Joiner.on(\"|\").join(titles), \"UTF-8\") ); String response = readURL(url); List<PageRevision> revisions = extractRevisions(response); Collections.sort(revisions, new Comparator<PageRevision>() { @Override public int compare(final PageRevision o1, final PageRevision o2) { return o2.date.compareTo(o1.date); } }); return revisions.get(0); }### Assistant: @Test public void shouldWork() throws Exception { whenHttp(server).match( get(\"/w/api.php\"), parameter(\"titles\", \"Title 1|Title 2\") ).then(resourceContent(\"revisions.json\")); String entryPoint = \"http: PageRevision revision = new WikiClient(entryPoint).getMostRecentRevision(\"Title 1\", \"Title 2\"); assertThat(revision.name, is(\"Title 2\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @When(\"^SSM corrupt network (\\\\d+) percent on (\\\\d+) instances$\") public SSMStepDefinitions corruptNetwork(int corruptPercent, int numHosts) { this.executeCommand(numHosts, Command.CORRUPTNETWORK, String.valueOf(corruptPercent)); executionStateCache.setHealNetwork(true); return this; }### Assistant: @Test public void testCorruptNetwork() throws Exception { executionStateCache.setInstances(createInstances()); try { ssmStepDefinitions.corruptNetwork(50, 1); } catch (Throwable t) { } Assert.assertEquals(executionStateCache.getCommandId(), \"1234\"); Assert.assertTrue(executionStateCache.getInstances().size()>0); Assert.assertTrue(executionStateCache.isHealNetwork()); Assert.assertTrue(executionStateCache.getSsmCommandInvocationInstances().size() > 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void send(int messageId, @NonNull Class<?>... actorsAddresses) { implementation.send(messageId, actorsAddresses); }### Assistant: @Test(expected = UnsupportedOperationException.class) public void sendMessageWithoutPassingActorClassesThenCrash() throws Exception { ActorSystemInstance actorSystem = ActorSystemInstance .getInstance(\"sendMessageWithoutPassingActorClassesThenCrash\"); actorSystem.send(new Message(1), (String) null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getLabel() { return label; }### Assistant: @Test public void testPseudoAtom_String() { String label = \"Arg255\"; IPseudoAtom a = new PseudoAtom(label); Assert.assertEquals(\"R\", a.getSymbol()); Assert.assertEquals(label, a.getLabel()); Assert.assertNull(a.getPoint3d()); Assert.assertNull(a.getPoint2d()); Assert.assertNull(a.getFractionalPoint3d()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FeatureTypeNamespaces getFeatureTypeNamespaces() { return featureTypeNamespaces; }### Assistant: @Test public void testRemoveInvalidXMLChars() throws Exception { SimpleFeatureType ft = DataUtilities.createType(\"invalidChars\", \"the_geom:Point,data:String\"); SimpleFeature feature = SimpleFeatureBuilder.build(ft, new Object[] { new WKTReader().read(\"POINT(0 0)\"), \"One \" + ((char) 0x7) + \" test\" }, \"123\"); SimpleFeatureCollection fc = DataUtilities.collection(feature); FeatureTransformer tx = new FeatureTransformer(); tx.setIndentation(2); tx.getFeatureTypeNamespaces().declareNamespace(ft, \"gt\", \"http: ByteArrayOutputStream bos = new ByteArrayOutputStream(); tx.transform(fc, bos); String result = bos.toString(); Document dom = XMLUnit.buildControlDocument(result); assertXpathEvaluatesTo(\"1\", \"count( assertXpathEvaluatesTo(\"One test\", \" }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<FeatureId> addFeatures( FeatureCollection<SimpleFeatureType, SimpleFeature> collection) throws IOException { TransformFeatureCollectionWrapper transformed = new TransformFeatureCollectionWrapper(collection, invertedTransformer); return store.addFeatures(transformed); }### Assistant: @Test public void testInsertOnTransform() throws Exception { SimpleFeatureStore transformed = (SimpleFeatureStore) transformWithPartialTransform(); SimpleFeatureBuilder fb = new SimpleFeatureBuilder(transformed.getSchema()); fb.add(wkt.read(\"POINT (-120 40)\").buffer(3)); fb.add(\"baloon\"); fb.add(1); fb.add(1); SimpleFeature sf = fb.buildFeature(\"states_mini.11\"); transformed.addFeatures(DataUtilities.collection(sf)); int size = STATES.getCount(Query.ALL); assertEquals(11, size); assertEquals(1, STATES.getFeatures(new Query(null, CQL.toFilter(\"persons = 1\"))).size()); assertEquals(1, transformed.getFeatures(new Query(null, CQL.toFilter(\"people = 1\"))).size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static IsotopePattern sortByMass(IsotopePattern isotopeP) { try { IsotopePattern isoSort = (IsotopePattern) isotopeP.clone(); if (isoSort.getNumberOfIsotopes() == 0) return isoSort; List<IsotopeContainer> listISO = isoSort.getIsotopes(); Collections.sort(listISO, new Comparator<IsotopeContainer>() { @Override public int compare(IsotopeContainer o1, IsotopeContainer o2) { return Double.compare(o1.getMass(),o2.getMass()); } }); isoSort.setMonoIsotope(listISO.get(0)); return isoSort; } catch (CloneNotSupportedException e) { e.printStackTrace(); } return null; }### Assistant: @Test public void testSortByMass_IsotopePattern() { IsotopePattern spExp = new IsotopePattern(); spExp.addIsotope(new IsotopeContainer(157.07503, 0.0002)); spExp.setMonoIsotope(new IsotopeContainer(156.07770, 2)); spExp.addIsotope(new IsotopeContainer(158.08135, 0.004)); spExp.addIsotope(new IsotopeContainer(157.08059, 0.0006)); spExp.setCharge(1); IsotopePattern isoNorma = IsotopePatternManipulator.sortByMass(spExp); List<IsotopeContainer> listISO = isoNorma.getIsotopes(); Assert.assertEquals(156.07770, isoNorma.getMonoIsotope().getMass(), 0.001); Assert.assertEquals(156.07770, listISO.get(0).getMass(), 0.00001); Assert.assertEquals(157.07503, listISO.get(1).getMass(), 0.00001); Assert.assertEquals(157.08059, listISO.get(2).getMass(), 0.00001); Assert.assertEquals(158.08135, listISO.get(3).getMass(), 0.00001); Assert.assertEquals(2, isoNorma.getMonoIsotope().getIntensity(), 0.001); Assert.assertEquals(2, listISO.get(0).getIntensity(), 0.001); Assert.assertEquals(0.0002, listISO.get(1).getIntensity(), 0.00001); Assert.assertEquals(0.0006, listISO.get(2).getIntensity(), 0.00001); Assert.assertEquals(0.004, listISO.get(3).getIntensity(), 0.00001); Assert.assertEquals(1, isoNorma.getCharge(), 0.001); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static X509TrustManager createTrustManager( String trustStoreLocation, String trustStorePassword, String trustStoreTypeProp, boolean crlEnabled, boolean ocspEnabled, final boolean serverHostnameVerificationEnabled, final boolean clientHostnameVerificationEnabled) throws TrustManagerException { if (trustStorePassword == null) { trustStorePassword = \"\"; } try { KeyStoreFileType storeFileType = KeyStoreFileType.fromPropertyValueOrFileName( trustStoreTypeProp, trustStoreLocation); KeyStore ts = FileKeyStoreLoaderBuilderProvider .getBuilderForKeyStoreFileType(storeFileType) .setTrustStorePath(trustStoreLocation) .setTrustStorePassword(trustStorePassword) .build() .loadTrustStore(); PKIXBuilderParameters pbParams = new PKIXBuilderParameters(ts, new X509CertSelector()); if (crlEnabled || ocspEnabled) { pbParams.setRevocationEnabled(true); System.setProperty(\"com.sun.net.ssl.checkRevocation\", \"true\"); System.setProperty(\"com.sun.security.enableCRLDP\", \"true\"); if (ocspEnabled) { Security.setProperty(\"ocsp.enable\", \"true\"); } } else { pbParams.setRevocationEnabled(false); } TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\"); tmf.init(new CertPathTrustManagerParameters(pbParams)); for (final TrustManager tm : tmf.getTrustManagers()) { if (tm instanceof X509ExtendedTrustManager) { return new ZKTrustManager((X509ExtendedTrustManager) tm, serverHostnameVerificationEnabled, clientHostnameVerificationEnabled); } } throw new TrustManagerException(\"Couldn't find X509TrustManager\"); } catch (IOException | GeneralSecurityException | IllegalArgumentException e) { throw new TrustManagerException(e); } }### Assistant: @Test public void testLoadPEMTrustStore() throws Exception { X509TrustManager tm = X509Util.createTrustManager( x509TestContext.getTrustStoreFile(KeyStoreFileType.PEM).getAbsolutePath(), x509TestContext.getTrustStorePassword(), KeyStoreFileType.PEM.getPropertyValue(), false, false, true, true); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onValueChange(ValueChangeEvent<Boolean> event) { final boolean dmnSelected = isDMNSelected(); uploadWidget.setVisible(dmnSelected); if (dmnSelected) { uploadWidget.updateAssetList(); } }### Assistant: @Test public void onValueChange() { reset(uploadWidgetMock); ValueChangeEvent eventMock = mock(ValueChangeEvent.class); doReturn(false).when(sourceTypeSelector).isDMNSelected(); sourceTypeSelector.onValueChange(eventMock); verify(uploadWidgetMock, never()).updateAssetList(); doReturn(true).when(sourceTypeSelector).isDMNSelected(); sourceTypeSelector.onValueChange(eventMock); verify(uploadWidgetMock, times(1)).updateAssetList(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Builder newBuilder() { AutoValue_GoogleAdsClient.Builder clientBuilder = new AutoValue_GoogleAdsClient.Builder(); clientBuilder.setEnableGeneratedCatalog(true); InstantiatingGrpcChannelProvider transportChannelProvider = InstantiatingGrpcChannelProvider.newBuilder() .setInterceptorProvider( () -> ImmutableList.of( new LoggingInterceptor( new RequestLogger(), clientBuilder.getHeaders(), clientBuilder.getEndpoint()))) .setMaxInboundMetadataSize(16 * 1024 * 1024) .setMaxInboundMessageSize(64 * 1024 * 1024) .build(); clientBuilder .setEndpoint(DEFAULT_ENDPOINT) .setTransportChannelProvider(transportChannelProvider); return clientBuilder; }### Assistant: @Test public void loginCustomerId_sentIfSpecified() { GoogleAdsClient client = GoogleAdsClient.newBuilder() .setCredentials(fakeCredentials) .setDeveloperToken(DEVELOPER_TOKEN) .setLoginCustomerId(LOGIN_CUSTOMER_ID) .setEnableGeneratedCatalog(enabledGeneratedCatalog) .setTransportChannelProvider(localChannelProvider) .setEndpoint(\"fake-address\") .build(); mockService.addResponse(SearchGoogleAdsResponse.newBuilder().build()); try (GoogleAdsServiceClient googleAdsServiceClient = client.getLatestVersion().createGoogleAdsServiceClient()) { googleAdsServiceClient.search(\"123\", \"select blah\"); } assertTrue( \"login customer ID not found\", localChannelProvider.isHeaderSent( \"login-customer-id\", Pattern.compile(String.valueOf(LOGIN_CUSTOMER_ID)))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Event bucketUpdated(final Bucket bucket) { return new StandardEvent.Builder() .eventType(EventType.UPDATE_BUCKET) .addField(EventFieldName.BUCKET_ID, bucket.getIdentifier()) .addField(EventFieldName.USER, NiFiUserUtils.getNiFiUserIdentity()) .build(); }### Assistant: @Test public void testBucketUpdatedEvent() { final Event event = EventFactory.bucketUpdated(bucket); event.validate(); assertEquals(EventType.UPDATE_BUCKET, event.getEventType()); assertEquals(2, event.getFields().size()); assertEquals(bucket.getIdentifier(), event.getField(EventFieldName.BUCKET_ID).getValue()); assertEquals(\"unknown\", event.getField(EventFieldName.USER).getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setPattern(String pattern) { this.pattern = pattern; view.setPattern(pattern); }### Assistant: @Test public void testShowValue() { presenter.setPattern(\"%val%\"); verify(view).setPattern(\"%val%\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String toString() { JSONObject output = new JSONObject(); output.put(\"status\", status); output.put(\"error\", getErrorAsJson()); return output.toString(2); }### Assistant: @Test public void testToStringWithEmptyErrorMessage() { ErrorMessage errorMessage = new ErrorMessage(new IllegalStateException(), SERVICE_UNAVAILABLE.getStatus()); assertEquals(\"{\\n\" + \" \\\"error\\\": {\\n\" + \" \\\"reason\\\": \\\"There was internal problem at backend\\\",\\n\" + \" \\\"details\\\": \\\"\\\",\\n\" + \" \\\"type\\\": \\\"IllegalStateException\\\"\\n\" + \" },\\n\" + \" \\\"status\\\": 503\\n\" + \"}\", errorMessage.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Timed @Path(\"/fields\") @ApiOperation(\"Get all Fields\") public Response getAllFields(@QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality, @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality) { return Response.ok() .entity(tableManager.getAll() .stream() .collect(Collectors.toMap(Table::getName, table -> tableMetadataManager.getFieldMappings(table.getName(), withCardinality, calculateCardinality ) ))) .build(); }### Assistant: @Test public void getAllFields() throws Exception { doNothing().when(getQueryStore()) .initializeTable(any(String.class)); getQueryStore().save(TestUtils.TEST_TABLE_NAME, TestUtils.getMappingDocuments(getMapper())); await().pollDelay(500, TimeUnit.MILLISECONDS).until(() -> true); Map<String, TableFieldMapping> response = resources.client() .target(\"/v1/tables/fields\") .request() .get(new GenericType<Map<String, TableFieldMapping>>() { }); Assert.assertFalse(response.isEmpty()); Assert.assertEquals(1, response.size()); Assert.assertTrue(response.containsKey(TestUtils.TEST_TABLE_NAME)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CommandReport execute(ConcurrentMap<String, Object> requestSharedDataContext) throws AmbariException, InterruptedException { String clusterName = getExecutionCommand().getClusterName(); Cluster cluster = m_clusters.getCluster(clusterName); StringBuilder stdout = new StringBuilder(); stdout.append(String.format(\"Checking %s is secured by Kerberos... %s\", clusterName, m_kerberosHelper.isClusterKerberosEnabled(cluster))).append(System.lineSeparator()); if (!m_kerberosHelper.isClusterKerberosEnabled(cluster)) { stdout.append(String.format(\"Cluster %s is not secured by Kerberos. No action required.\", clusterName)); return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", stdout.toString(), \"\"); } stdout.append(String.format(\"Loading %s for cluster %s\", KERBEROS_ENV, clusterName)).append(System.lineSeparator()); Config kerberosEnv = cluster.getDesiredConfigByType(KERBEROS_ENV); if (kerberosEnv == null) { stdout.append(String.format(\"Configuration %s was not found. No action required.\", KERBEROS_ENV)); return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", stdout.toString(), \"\"); } Map<String, String> kerbProperties = kerberosEnv.getProperties(); KDCType kdcType = KDCType.NONE; if (null != kerbProperties && kerbProperties.containsKey(KDC_TYPE_KEY)) { kdcType = KDCType.translate(kerbProperties.get(KDC_TYPE_KEY)); } stdout.append(String.format(\"Checking KDC type... %s\", kdcType)).append(System.lineSeparator()); if (KDCType.NONE == kdcType) { stdout.append(String.format(\"KDC Type is %s, keytabs are managed manually. No action required.\", kdcType)); return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", stdout.toString(), \"\"); } stdout.append(String.format(\"Ambari is managing Kerberos keytabs. Regenerate \" + \"keytabs after upgrade is complete.\")); return createCommandReport(0, HostRoleStatus.HOLDING, \"{}\", stdout.toString(), \"\"); }### Assistant: @Test public void testAction_NoKdcType() throws Exception { reset(m_kerberosHelper); expect(m_kerberosHelper.isClusterKerberosEnabled(EasyMock.anyObject(Cluster.class))).andReturn(Boolean.TRUE).atLeastOnce(); replay(m_kerberosHelper); Map<String, String> commandParams = new HashMap<String, String>(); commandParams.put(\"clusterName\", \"c1\"); ExecutionCommand executionCommand = new ExecutionCommand(); executionCommand.setCommandParams(commandParams); executionCommand.setClusterName(\"c1\"); HostRoleCommand hrc = EasyMock.createMock(HostRoleCommand.class); expect(hrc.getRequestId()).andReturn(1L).anyTimes(); expect(hrc.getStageId()).andReturn(2L).anyTimes(); expect(hrc.getExecutionCommandWrapper()).andReturn(new ExecutionCommandWrapper(executionCommand)).anyTimes(); replay(hrc); KerberosKeytabsAction action = m_injector.getInstance(KerberosKeytabsAction.class); action.setExecutionCommand(executionCommand); action.setHostRoleCommand(hrc); CommandReport report = action.execute(null); assertNotNull(report); Assert.assertEquals(HostRoleStatus.COMPLETED.name(), report.getStatus()); Assert.assertTrue(StringUtils.contains(report.getStdOut(), \"KDC Type is NONE\")); Assert.assertTrue(StringUtils.contains(report.getStdOut(), \"No action required.\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void validate(RangerSecurityZone securityZone, Action action) throws Exception { if (LOG.isDebugEnabled()) { LOG.debug(String.format(\"==> RangerPolicyValidator.validate(%s, %s)\", securityZone, action)); } List<ValidationFailureDetails> failures = new ArrayList<>(); boolean valid = isValid(securityZone, action, failures); String message; try { if (!valid) { message = serializeFailures(failures); throw new Exception(message); } } finally { if (LOG.isDebugEnabled()) { LOG.debug(String.format(\"<== RangerPolicyValidator.validate(%s, %s)\", securityZone, action)); } } }### Assistant: @Test public void testValidateSecurityZoneWitoutResourcesForCreateThrowsError() throws Exception{ RangerSecurityZoneService rangerSecurityZoneService = new RangerSecurityZoneService(); RangerService rangerSvc = getRangerService(); RangerServiceDef rangerSvcDef = rangerServiceDef(); Mockito.when(_store.getServiceDefByName(\"1\")).thenReturn(rangerSvcDef); Map<String, RangerSecurityZone.RangerSecurityZoneService> map = new HashMap<String, RangerSecurityZone.RangerSecurityZoneService>(); map.put(\"hdfsSvc\", rangerSecurityZoneService); RangerSecurityZone suppliedSecurityZone = getRangerSecurityZone(); suppliedSecurityZone.setServices(map); Mockito.when(_store.getSecurityZone(\"MyZone\")).thenReturn(null); Mockito.when(_store.getServiceByName(\"hdfsSvc\")).thenReturn(rangerSvc); try { rangerSecurityZoneValidator.validate(suppliedSecurityZone, RangerValidator.Action.CREATE); } catch (Exception ex) { Assert.assertEquals( ex.getMessage(), \"(0) Validation failure: error code[3039], reason[No resources specified for service [hdfsSvc]], field[security zone resources], subfield[null], type[missing] \"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void remove(String symbol, String providerCode) { var pe = pairRepo.findBySymbolAndProviderCode(symbol, providerCode); if(pe == null) { throw PairException.notFound(symbol, providerCode); } pairRepo.delete(pe); }### Assistant: @Test public void testRemove_notFound() { var symbol = \"RR.L\"; var providerCode = \"GOOGLE\"; assertThatThrownBy(() -> pairService.remove(symbol, providerCode)) .isInstanceOf(PairException.class) .hasMessage(\"pair.error.not-found: [RR.L, GOOGLE]\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public P add(String path) { return add(rootNode, path); }### Assistant: @Test public void testAddLeafRoot() { T trie = new T(); trie.add(\"a\"); trie.add(\"ax\"); System.out.println(Util.dumpTree(trie.rootNode)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void add(String name, String value) { if (value == null) return; HttpField field = new HttpField(name, value); add(field); }### Assistant: @Test void testAdd() { HttpFields fields = new HttpFields(); fields.add(\"name0\", \"value0\"); fields.add(\"name1\", \"valueA\"); fields.add(\"name2\", \"value2\"); assertEquals(\"value0\", fields.get(\"name0\")); assertEquals(\"valueA\", fields.get(\"name1\")); assertEquals(\"value2\", fields.get(\"name2\")); fields.add(\"name1\", \"valueB\"); assertEquals(\"value0\", fields.get(\"name0\")); assertEquals(\"valueA\", fields.get(\"name1\")); assertEquals(\"value2\", fields.get(\"name2\")); assertNull(fields.get(\"name3\")); int matches = 0; Enumeration<String> e = fields.getFieldNames(); while (e.hasMoreElements()) { Object o = e.nextElement(); if (\"name0\".equals(o)) matches++; if (\"name1\".equals(o)) matches++; if (\"name2\".equals(o)) matches++; } assertEquals(3, matches); e = fields.getValues(\"name1\"); assertTrue(e.hasMoreElements()); assertEquals(e.nextElement(), \"valueA\"); assertTrue(e.hasMoreElements()); assertEquals(e.nextElement(), \"valueB\"); assertFalse(e.hasMoreElements()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Geometry toGeometry(Map<String, Object> geometry) { String geomType = GeoJSONUtil.getString(geometry, GeoJSON.TYPE); if (geomType == null) { throw new IllegalArgumentException(\"Invalid geometry type\"); } switch (geomType) { case GeoJSON.POINT: return toPoint(geometry); case GeoJSON.LINESTRING: return toLineString(geometry); case GeoJSON.POLYGON: return toPolygon(geometry); case GeoJSON.MULTI_POINT: return toMultiPoint(geometry); case GeoJSON.MULTI_LINESTRING: return toMultiLineString(geometry); case GeoJSON.MULTI_POLYGON: return toMultiPolygon(geometry); case GeoJSON.GEOMETRY_COLLECTION: return toGeometryCollection(geometry); } throw new IllegalArgumentException(\"Invalid geometry type\"); }### Assistant: @Test public void testMultiPoint() throws Exception { Map<String, Object> json = loadJSONResource(\"multipoint.json\"); MultiPoint geom = (MultiPoint) GeoJSONReader2.toGeometry(json); assertEquals(2, geom.getNumGeometries()); Point p1 = (Point) geom.getGeometryN(0); Point p2 = (Point) geom.getGeometryN(1); Coordinate c1 = p1.getCoordinate(); Coordinate c2 = p2.getCoordinate(); assertEquals(100.0, c1.x, 1e6); assertEquals(0.0, c1.y, 1e6); assertEquals(101.0, c2.x, 1e6); assertEquals(1.0, c2.y, 1e6); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getSiteLinkUrl(SiteLink siteLink) { return this.getPageUrl(siteLink.getSiteKey(), siteLink.getPageTitle()); }### Assistant: @Test public void siteLinkIri() { SiteLink sSpecialChar = new SiteLinkImpl(\"&\", \"dewiki\", Collections.emptyList()); assertEquals(SitesImpl.DEFAULT_PROTOCOL_PREFIX + \" this.sites.getSiteLinkUrl(sSpecialChar)); SiteLink sSpecialChar2 = new SiteLinkImpl(\"Bj\u00f6rk\", \"enwiki\", Collections.emptyList()); assertEquals(\"http: this.sites.getSiteLinkUrl(sSpecialChar2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<String> split(String path) { if (path == null) { return null; } path = fix(path); if (path.length() == 0) { return Collections.emptyList(); } path = path.replaceAll(\"^/\", \"\"); path = path.replaceAll(\"/$\", \"\"); String[] ret = path.split(\"/\"); return Arrays.asList(ret); }### Assistant: @Test public void testSplit() { assertNull(PathUtil.split(null)); assertSplit(\"xyz.txt\", \"xyz.txt\"); assertSplit(\" assertSplit(\" / / abc/fff/ /xyz.txt/ }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Integer getIntProperty(String key, int defaultValue) { if (key == null) { return defaultValue; } String rtrnVal = propertiesMap.get(key); if (rtrnVal == null) { return defaultValue; } return Integer.valueOf(rtrnVal); }### Assistant: @Test public void testGetIntPropertyl(){ String key=\"1\"; int defaultValue=1; Integer value= PropertiesUtil.getIntProperty(key, defaultValue); Assert.assertEquals(value, Integer.valueOf(defaultValue)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getDestinationAttributeFriendlyName() { return \"eduPersonORCID\"; }### Assistant: @Test public void getAttributeValue() throws Exception { urn_perun_user_attribute_def_virt_eduPersonORCID classInstance = new urn_perun_user_attribute_def_virt_eduPersonORCID(); PerunSessionImpl session = mock(PerunSessionImpl.class, RETURNS_DEEP_STUBS); User user = new User(); user.setId(1); UserExtSource ues1 = new UserExtSource(10, new ExtSource(100, \"name1\", \"type1\"), \"login1\"); UserExtSource ues2 = new UserExtSource(20, new ExtSource(200, \"name2\", \"type2\"), \"login2\"); Attribute att1 = new Attribute(); String orcidAddress = \"http: String VALUE1 = orcidAddress + \"0000-0002-0305-7446\"; String VALUE2 = orcidAddress + \"0000-0002-1111-2222\"; att1.setValue(VALUE1 + \";\" + VALUE2); Attribute att2 = new Attribute(); String VALUE3 = orcidAddress + \"0000-0002-1111-3333\"; att2.setValue(VALUE3); when(session.getPerunBl().getUsersManagerBl().getUserExtSources(session, user)).thenReturn( Arrays.asList(ues1, ues2) ); String attributeName = classInstance.getSourceAttributeName(); when(session.getPerunBl().getAttributesManagerBl().getAttribute(session, ues1, attributeName)).thenReturn( att1 ); when(session.getPerunBl().getAttributesManagerBl().getAttribute(session, ues2, attributeName)).thenReturn( att2 ); Attribute receivedAttr = classInstance.getAttributeValue(session, user, classInstance.getAttributeDefinition()); assertTrue(receivedAttr.getValue() instanceof List); assertEquals(\"destination attribute name wrong\",classInstance.getDestinationAttributeFriendlyName(),receivedAttr.getFriendlyName()); @SuppressWarnings(\"unchecked\") List<String> actual = (List<String>) receivedAttr.getValue(); Collections.sort(actual); List<String> expected = Arrays.asList(VALUE1, VALUE2, VALUE3); Collections.sort(expected); assertEquals(\"collected values are incorrect\",expected,actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<String> getArtifactVersions(final String gavc) throws GrapesCommunicationException { final Client client = getClient(); final WebResource resource = client.resource(serverURL).path(RequestUtils.getArtifactVersions(gavc)); final ClientResponse response = resource .accept(MediaType.APPLICATION_JSON).get(ClientResponse.class); client.destroy(); if(ClientResponse.Status.OK.getStatusCode() != response.getStatus()){ final String message = FAILED_TO_GET_CORPORATE_FILTERS; if(LOG.isErrorEnabled()) { LOG.error(String.format(HTTP_STATUS_TEMPLATE_MSG, message, response.getStatus())); } throw new GrapesCommunicationException(message, response.getStatus()); } return response.getEntity(new GenericType<List<String>>(){}); }### Assistant: @Test public void getArtifactVersions() throws IOException{ final String gavc = \"com.my.company:test:1233:jar\"; final List<String> versions = new ArrayList<String>(); versions.add(\"1.0.0\"); stubFor(get(urlEqualTo(\"/\" + ServerAPI.ARTIFACT_RESOURCE + \"/\" + gavc + ServerAPI.GET_VERSIONS)) .willReturn(aResponse() .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON) .withBody(JsonUtils.serialize(versions)) .withStatus(Status.OK.getStatusCode()))); Exception exception = null; List<String> receivedVersions = null; try{ receivedVersions = client.getArtifactVersions(gavc); }catch (Exception e) { exception = e; } assertNull(exception); assertNotNull(receivedVersions); assertEquals(1, receivedVersions.size()); assertEquals(\"1.0.0\", receivedVersions.get(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Map<String, String> getPredicateSourcesMap(final KiePMMLPredicate kiePMMLPredicate, final String packageName) { logger.trace(\"getPredicateSourcesMap {}\", kiePMMLPredicate); if (kiePMMLPredicate instanceof KiePMMLSimplePredicate) { return getKiePMMLSimplePredicateSourcesMap((KiePMMLSimplePredicate) kiePMMLPredicate, packageName); } else if (kiePMMLPredicate instanceof KiePMMLSimpleSetPredicate) { return getKiePMMLSimpleSetPredicateSourcesMap((KiePMMLSimpleSetPredicate) kiePMMLPredicate, packageName); } else if (kiePMMLPredicate instanceof KiePMMLCompoundPredicate) { return getKiePMMLCompoundPredicateSourcesMap((KiePMMLCompoundPredicate) kiePMMLPredicate, packageName); } else if (kiePMMLPredicate instanceof KiePMMLTruePredicate) { return getKiePMMLTruePredicateSourcesMap((KiePMMLTruePredicate) kiePMMLPredicate, packageName); } else if (kiePMMLPredicate instanceof KiePMMLFalsePredicate) { return getKiePMMLFalsePredicateSourcesMap((KiePMMLFalsePredicate) kiePMMLPredicate, packageName); } else { throw new KiePMMLException(\"Predicate of type \" + kiePMMLPredicate.getClass().getName() + \" not managed, \" + \"yet\"); } }### Assistant: @Test public void getPredicateSourcesMap() { String packageName = \"PACKAGENAME\"; String predicateName = \"PREDICATENAME\"; KiePMMLPredicate kiePMMLPredicate = KiePMMLSimplePredicate .builder(predicateName, Collections.emptyList(), OPERATOR.GREATER_OR_EQUAL) .withValue(24) .build(); Map<String, String> retrieved = KiePMMLPredicateFactory.getPredicateSourcesMap(kiePMMLPredicate, packageName); commonVerifySourceMap(retrieved, packageName, getSanitizedClassName(kiePMMLPredicate.getId()), 1); kiePMMLPredicate = KiePMMLCompoundPredicate.builder(Collections.emptyList(), BOOLEAN_OPERATOR.OR).build(); retrieved = KiePMMLPredicateFactory.getPredicateSourcesMap(kiePMMLPredicate, packageName); commonVerifySourceMap(retrieved, packageName, getSanitizedClassName(kiePMMLPredicate.getId()), 1); kiePMMLPredicate = KiePMMLTruePredicate.builder(Collections.emptyList()).build(); retrieved = KiePMMLPredicateFactory.getPredicateSourcesMap(kiePMMLPredicate, packageName); commonVerifySourceMap(retrieved, packageName, getSanitizedClassName(kiePMMLPredicate.getId()), 1); kiePMMLPredicate = KiePMMLFalsePredicate.builder(Collections.emptyList()).build(); retrieved = KiePMMLPredicateFactory.getPredicateSourcesMap(kiePMMLPredicate, packageName); commonVerifySourceMap(retrieved, packageName, getSanitizedClassName(kiePMMLPredicate.getId()), 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Timesheet updateExistingTimesheet(Timesheet timesheet, Map<String, Object> context) { if (!(timesheet instanceof TimesheetCouch)) { throw new IllegalArgumentException(\"Can only update Timesheets coming from the Couch!\"); } try { JSONObject couchTs = getCouch(((TimesheetCouch) timesheet).getCouchId()); if (!(couchTs.getString(\"_rev\").equals(((TimesheetCouch) timesheet).getCouchRev()))) { throw new BusinessException(\"Timesheet was updated by s/o else in the meantime!\"); } JSONArray couchEntriesList = new JSONArray(); for (TimesheetDay day : timesheet.getDays()) { for (TimesheetDayEntry dayEntry : day.getEntries()) { if (dayEntry.getProject() == null || Math.abs(dayEntry.getEffectiveDurationHours()) < Float.MIN_NORMAL) { continue; } JSONObject couchEntry = new JSONObject(); couchEntry.put(\"dayInMonth\", day.getDay()); couchEntry.put(\"project\", dayEntry.getProject().getName()); couchEntry.put(\"hours\", dayEntry.getHours()); couchEntriesList.put(couchEntry); } } couchTs.put(\"entries\", couchEntriesList); JSONObject couchPutObj = putCouch(((TimesheetCouch) timesheet).getCouchId(), couchTs); if (!couchPutObj.getBoolean(\"ok\")) { throw new TechnicalException(\"Saving failed: \" + couchPutObj.toString()); } ((TimesheetCouch) timesheet).setCouchRev(couchPutObj.getString(\"rev\")); return timesheet; } catch (JSONException e) { throw new TechnicalException(e); } catch (MalformedURLException e) { throw new TechnicalException(e); } catch (IOException e) { throw new TechnicalException(e); } }### Assistant: @Test public void testUpdateExistingTimesheet() throws JSONException { getResults .put(\"ts_sebastian_2014_07\", \"{\\\"_id\\\":\\\"ts_sebastian_2014_07\\\",\\\"_rev\\\":\\\"2-1983e046a14377c433c08711fbb57b28\\\", \\\"other\\\": 88,\\\"entries\\\":[{\\\"dayInMonth\\\":1,\\\"project\\\":\\\"P1\\\",\\\"hours\\\":\\\"2:31\\\"},{\\\"dayInMonth\\\":2,\\\"project\\\":\\\"P1\\\",\\\"hours\\\":\\\"1:11\\\"},{\\\"dayInMonth\\\":2,\\\"project\\\":\\\"P2\\\",\\\"hours\\\":\\\"2:22\\\"},{\\\"dayInMonth\\\":2,\\\"project\\\":\\\"P2\\\",\\\"hours\\\":\\\"3:33\\\"},{\\\"dayInMonth\\\":14,\\\"project\\\":\\\"P1\\\",\\\"hours\\\":\\\"1:00\\\"}]}\"); putResults.put(\"ts_sebastian_2014_07\", \"{\\\"ok\\\": true, \\\"id\\\": \\\"ts_sebastian_2014_07\\\", \\\"rev\\\": \\\"3-123456789\\\"}\"); TimesheetCouch ts = new TimesheetCouch(\"ts_sebastian_2014_07\", \"2-1983e046a14377c433c08711fbb57b28\"); { TimesheetDay emptyDay = new TimesheetDay(); emptyDay.setDay(2); ts.addDay(emptyDay); } { TimesheetDay dayWithOne = new TimesheetDay(); dayWithOne.setDay(3); { TimesheetDayEntry normalEntry = new TimesheetDayEntry(); normalEntry.setProject(new Project(\"bla\")); normalEntry.setHours(\"1:30\"); dayWithOne.addEntry(normalEntry); } ts.addDay(dayWithOne); } { TimesheetDay dayWithSeveral = new TimesheetDay(); dayWithSeveral.setDay(14); { TimesheetDayEntry oneMinuteEntry = new TimesheetDayEntry(); oneMinuteEntry.setProject(new Project(\"bla\")); oneMinuteEntry.setHours(\"00:01\"); dayWithSeveral.addEntry(oneMinuteEntry); } { TimesheetDayEntry oneHourEntry = new TimesheetDayEntry(); oneHourEntry.setProject(new Project(\"blup\")); oneHourEntry.setHours(\"01:00\"); dayWithSeveral.addEntry(oneHourEntry); } { TimesheetDayEntry noProjectEntry = new TimesheetDayEntry(); noProjectEntry.setProject(null); noProjectEntry.setHours(\"01:00\"); dayWithSeveral.addEntry(noProjectEntry); } { TimesheetDayEntry noTimeEntry = new TimesheetDayEntry(); noTimeEntry.setProject(new Project(\"blup\")); noTimeEntry.setHours(null); dayWithSeveral.addEntry(noTimeEntry); } { TimesheetDayEntry zeroTimeEntry = new TimesheetDayEntry(); zeroTimeEntry.setProject(new Project(\"blup\")); zeroTimeEntry.setHours(\"0:00\"); dayWithSeveral.addEntry(zeroTimeEntry); } ts.addDay(dayWithSeveral); } Timesheet res = timesheetService.updateExistingTimesheet(ts, context); assertEquals(1, getUrls.size()); assertEquals(1, putUrls.size()); assertEquals(1, putContents.size()); assertEquals(TimesheetCouch.class, res.getClass()); assertEquals(\"ts_sebastian_2014_07\", ((TimesheetCouch) res).getCouchId()); assertEquals(\"3-123456789\", ((TimesheetCouch) res).getCouchRev()); JSONObject sentObj = new JSONObject(putContents.get(0)); assertEquals(\"ts_sebastian_2014_07\", sentObj.getString(\"_id\")); assertEquals(\"2-1983e046a14377c433c08711fbb57b28\", sentObj.getString(\"_rev\")); assertEquals(88, sentObj.getInt(\"other\")); JSONArray sentEntries = sentObj.getJSONArray(\"entries\"); assertNotNull(sentEntries); assertEquals(3, sentEntries.length()); assertEquals(3, sentEntries.getJSONObject(0).getInt(\"dayInMonth\")); assertEquals(\"bla\", sentEntries.getJSONObject(0).getString(\"project\")); assertEquals(\"1:30\", sentEntries.getJSONObject(0).getString(\"hours\")); assertEquals(14, sentEntries.getJSONObject(1).getInt(\"dayInMonth\")); assertEquals(\"bla\", sentEntries.getJSONObject(1).getString(\"project\")); assertEquals(\"00:01\", sentEntries.getJSONObject(1).getString(\"hours\")); assertEquals(14, sentEntries.getJSONObject(2).getInt(\"dayInMonth\")); assertEquals(\"blup\", sentEntries.getJSONObject(2).getString(\"project\")); assertEquals(\"01:00\", sentEntries.getJSONObject(2).getString(\"hours\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> List<T> safe(List<T> list) { if(list==null) { return Collections.emptyList(); } return list; }### Assistant: @Test public void safeIterationForNullList() { List<String> stringList =null; for(String string: CollectionsUtil.safe(stringList)) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public LookupTable<PDAnnotation> retainRelevantAnnotations(LookupTable<PDPage> relevantPages) { LOG.debug(\"Filtering annotations\"); for (PDPage page : relevantPages.keys()) { try { Set<PDAnnotation> keptAnnotations = new LinkedHashSet<>(); for (PDAnnotation annotation : page.getAnnotations()) { PDAnnotation mapped = annotationsLookup.lookup(annotation); if (nonNull(mapped)) { keptAnnotations.add(mapped); } else { if (annotation instanceof PDAnnotationLink) { processLinkAnnotation(relevantPages, keptAnnotations, (PDAnnotationLink) annotation); } else { processNonLinkAnnotation(relevantPages, keptAnnotations, annotation); } } } relevantPages.lookup(page).setAnnotations(new ArrayList<>(keptAnnotations)); } catch (IOException e) { LOG.warn(\"Failed to process annotations for page\", e); } } return annotationsLookup; }### Assistant: @Test public void links_NamedPageNotRelevant() throws IOException { PDPage destPage = new PDPage(); PDAnnotationLink annotation = new PDAnnotationLink(); PDNamedDestination namedDest = new PDNamedDestination(COSName.AESV3); PDPageDestination dest = new PDPageFitDestination(); dest.setPage(destPage); annotation.setDestination(namedDest); List<PDAnnotation> annotations = Arrays.asList(annotation); oldPage.setAnnotations(annotations); PDDocument doc = mock(PDDocument.class); PDDocumentCatalog catalog = mock(PDDocumentCatalog.class); when(doc.getDocumentCatalog()).thenReturn(catalog); when(catalog.findNamedDestinationPage(any(PDNamedDestination.class))).thenReturn(dest); doc.addPage(oldPage); LookupTable<PDAnnotation> annotationsLookup = new AnnotationsDistiller(doc).retainRelevantAnnotations(lookup); assertEquals(0, newPage.getAnnotations().size()); assertTrue(annotationsLookup.isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getAsString(Map<String, Object> map, String key) { Object value = map.get(key); if (value instanceof String) { return (String) value; } if (value == null) { return null; } return value.toString(); }### Assistant: @Test public void testStringAsString() { map.put(\"value\", \"R2-D2\"); String actual = MapValueGetter.getAsString(map, \"value\"); String expected = \"R2-D2\"; assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static VectorGenerator constant(Vector v) { return () -> v; }### Assistant: @Test public void testConstant() { Vector vec = VectorUtils.of(1.0, 0.0); assertArrayEquals(vec.copy().asArray(), VectorGeneratorPrimitives.constant(vec).get().asArray(), 1e-7); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Set<String> extractRoles(HttpServerRequest request) { return extractRoles(request.headers()); }### Assistant: @Test public void testExtractRolesMatchingPattern(TestContext context) throws Exception { context.assertFalse(roleExtractor.extractRoles(new TestHttpServerRequest( buildGroupHeaders(\"grp_1,grp_2,grp_3,z-gateleen-grp_4\"))).isEmpty(), \"A non-empty set of roles should have been returned\"); context.assertFalse(roleExtractor.extractRoles(new TestHttpServerRequest( buildRoleHeaders(\"grp_1,grp_2,grp_3,z-gateleen-grp_4\"))).isEmpty(), \"A non-empty set of roles should have been returned\"); Set<String> groupRoles = roleExtractor.extractRoles(new TestHttpServerRequest( buildGroupHeaders(\"z-gateleen-abc,z-gateleen-xyz,grp_3,z-gateleen-grp_4,gateleen-grp_5\"))); context.assertEquals(3, groupRoles.size()); context.assertTrue(groupRoles.contains(\"abc\")); context.assertTrue(groupRoles.contains(\"xyz\")); context.assertTrue(groupRoles.contains(\"grp_4\")); context.assertFalse(groupRoles.contains(\"grp_3\")); context.assertFalse(groupRoles.contains(\"gateleen-grp_5\")); Set<String> roleRoles = roleExtractor.extractRoles(new TestHttpServerRequest( buildRoleHeaders(\"z-gateleen-abc,z-gateleen-xyz,grp_3,z-gateleen-grp_4,gateleen-grp_5\"))); context.assertEquals(3, roleRoles.size()); context.assertTrue(roleRoles.contains(\"abc\")); context.assertTrue(roleRoles.contains(\"xyz\")); context.assertTrue(roleRoles.contains(\"grp_4\")); context.assertFalse(roleRoles.contains(\"grp_3\")); context.assertFalse(roleRoles.contains(\"gateleen-grp_5\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean hasIpV6Servers(Configuration config, List<InetAddress> dnsServers) { if (!config.ipV6Support) return false; if (config.dnsServers.enabled) { for (Configuration.Item item : config.dnsServers.items) { if (item.state == Configuration.Item.STATE_ALLOW && item.location.contains(\":\")) return true; } } for (InetAddress inetAddress : dnsServers) { if (inetAddress instanceof Inet6Address) return true; } return false; }### Assistant: @Test public void testHasIpV6Servers() throws Exception { Configuration.Item item0 = new Configuration.Item(); Configuration.Item item1 = new Configuration.Item(); config.ipV6Support = true; config.dnsServers.enabled = true; config.dnsServers.items.add(item0); config.dnsServers.items.add(item1); item0.location = \"::1\"; item0.state = Configuration.Item.STATE_ALLOW; item1.location = \"127.0.0.1\"; item1.state = Configuration.Item.STATE_ALLOW; List<InetAddress> servers = new ArrayList<>(); assertTrue(thread.hasIpV6Servers(config, servers)); config.ipV6Support = false; assertFalse(thread.hasIpV6Servers(config, servers)); config.ipV6Support = true; item0.state = Configuration.Item.STATE_DENY; assertFalse(thread.hasIpV6Servers(config, servers)); servers.add(Inet6Address.getByName(\"127.0.0.1\")); assertFalse(thread.hasIpV6Servers(config, servers)); servers.add(Inet6Address.getByName(\"::1\")); assertTrue(thread.hasIpV6Servers(config, servers)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void updateWithSelfSignedServerCertificate(KeyStore pKeyStore) throws NoSuchProviderException, NoSuchAlgorithmException, IOException, InvalidKeyException, CertificateException, SignatureException, KeyStoreException { final Object x500Name; final Object[] certAttributes = { \"Jolokia Agent \" + Version.getAgentVersion(), \"JVM\", \"jolokia.org\", \"Pegnitz\", \"Franconia\", \"DE\" }; if (ClassUtil.checkForClass(X500_NAME_SUN)) { x500Name = ClassUtil.newInstance(X500_NAME_SUN, certAttributes); } else if (ClassUtil.checkForClass(X500_NAME_IBM)) { x500Name = ClassUtil.newInstance(X500_NAME_IBM, certAttributes); } else { throw new IllegalStateException(\"Neither Sun- nor IBM-style JVM found.\"); } Object keypair = createKeyPair(); PrivateKey privKey = getPrivateKey(keypair); X509Certificate[] chain = new X509Certificate[1]; chain[0] = getSelfCertificate(keypair, x500Name, new Date(), (long) 3650 * 24 * 60 * 60); pKeyStore.setKeyEntry(\"jolokia-agent\", privKey, new char[0], chain); }### Assistant: @Test public void testSelfSignedCertificate() throws Exception { KeyStore keystore = createKeyStore(); KeyStoreUtil.updateWithSelfSignedServerCertificate(keystore); X509Certificate cert = (X509Certificate) keystore.getCertificate(\"jolokia-agent\"); assertNotNull(cert); assertEquals(cert.getSubjectDN().getName(), \"CN=Jolokia Agent \" + Version.getAgentVersion() + \", OU=JVM, O=jolokia.org, L=Pegnitz, ST=Franconia, C=DE\"); assertEquals(cert.getSubjectDN(), cert.getIssuerDN()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Collection<V> prefixedValues(String prefix) { return prefixed(prefix, entry -> entry.getValue(), new ArrayList<>()); }### Assistant: @Test void prefixedValues() { var values = populated.prefixedValues(\"app\"); assertEquals(3, values.size()); assertTrue(values.contains(\"app_value\")); assertTrue(values.contains(\"apple_value\")); assertTrue(values.contains(\"application_value\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Pushable getPushableInput(int index) { if (this.m_inputPushables[index] == null) { m_inputPushables[index] = new NonBlockingPushable(index); } return m_inputPushables[index]; }### Assistant: @Test(timeout=10000) public void test1() throws InterruptedException { int num_instances = 100, delay = 300; ExecutorService es = Executors.newCachedThreadPool(); @SuppressWarnings(\"unused\") List<Future<Pushable>> futures = new ArrayList<Future<Pushable>>(num_instances); List<Pushable> pushables = new ArrayList<Pushable>(num_instances); List<QueueSink> sinks = new ArrayList<QueueSink>(num_instances); for (int i = 0; i < num_instances; i++) { SlowPassthrough spt = new SlowPassthrough(1, delay); NonBlockingPush nbp = new NonBlockingPush(spt, es); QueueSink sink = new QueueSink(); Connector.connect(nbp, sink); sinks.add(sink); Pushable p = nbp.getPushableInput(); pushables.add(p); } Stopwatch sw = new Stopwatch(); sw.start(); int i = 0; for (Pushable p : pushables) { p.push(i++); } sw.stop(); assertTrue(sw.getDuration() < (num_instances * delay) * 0.2); es.awaitTermination((long) (delay * 1.2), TimeUnit.MILLISECONDS); i = 0; for (QueueSink qs : sinks) { Object o = qs.getQueue().remove(); assertEquals(i, o); i++; } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int generate( final MasterReport report, final int acceptedPage, final OutputStream outputStream, final int yieldRate ) throws ReportProcessingException, IOException { if ( proc == null ) { proc = createProcessor( report, yieldRate ); } final IAsyncReportListener listener = ReportListenerThreadHolder.getListener(); if ( listener != null ) { proc.addReportProgressListener( listener ); } try { if ( acceptedPage >= 0 ) { final XmlPageOutputProcessor outputProcessor = (XmlPageOutputProcessor) proc.getOutputProcessor(); outputProcessor.setFlowSelector( new SinglePageFlowSelector( acceptedPage, false ) ); } proxyOutputStream.setParent( outputStream ); proc.processReport(); if ( listener != null ) { listener.setIsQueryLimitReached( proc.isQueryLimitReached() ); } return proc.getPhysicalPageCount(); } finally { if ( listener != null ) { proc.removeReportProgressListener( listener ); } if ( acceptedPage >= 0 ) { final XmlPageOutputProcessor outputProcessor = (XmlPageOutputProcessor) proc.getOutputProcessor(); outputProcessor.setFlowSelector( new AllPageFlowSelector() ); } if ( proxyOutputStream != null ) { proxyOutputStream.setParent( null ); } } }### Assistant: @Test public void testGenerate() throws Exception { ClassicEngineBoot.getInstance().start(); ReportListenerThreadHolder.clear(); xmlPageableOutput.generate( new MasterReport(), 1, new ByteArrayOutputStream(), 1 ); verify( listener, times( 0 ) ).reportProcessingStarted( any( ReportProgressEvent.class ) ); verify( listener, times( 0 ) ).reportProcessingFinished( any( ReportProgressEvent.class ) ); verify( listener, times( 0 ) ).reportProcessingUpdate( any( ReportProgressEvent.class ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public TrazaAuditoriaVO getTraza(String idTraza) { try { return auditoriaManager.get(idTraza); } catch (Exception e) { auditoriaExceptionHandler.handleException(e, ExceptionMessageConstans.ERROR_FIND); return null; } }### Assistant: @Test(expected = es.ieci.tecdoc.fwktd.audit.core.exception.AuditoriaException.class) public void testGetKO2() { auditoriaService.getTraza(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ExceptionHandler(value = {JpaSystemException.class, PersistenceException.class}) @ResponseBody public ErrorInformation handlePersistenceException(Exception exception, HttpServletResponse response) { Throwable throwable = getRootCause(exception); if (isDataTruncationException(throwable)) { return getErrorInformationAndSetStatus(HttpStatus.BAD_REQUEST, throwable, response); } else if (isCausedByConstraintViolationException(exception)) { return getErrorInformationAndSetStatus(HttpStatus.BAD_REQUEST, new Exception(\"A constraint has been violated. Reason: \" + throwable.getMessage()), response); } else { logError(\"A persistence error occurred.\", exception); return getErrorInformationAndSetStatus(HttpStatus.INTERNAL_SERVER_ERROR, throwable == null ? new Exception(\"General Error\") : throwable, response); } }### Assistant: @Test public void testConstraintViolationExceptionNoWrap() throws Exception { validateErrorInformation( exceptionHandler.handlePersistenceException(new ConstraintViolationException(MESSAGE, null, \"testConstraint\"), new MockHttpServletResponse()), HttpStatus.BAD_REQUEST, false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<MysqlEvent> getNewEventsForListener(Listener listener, Connection connection) throws DataAccessException { verifyListenerExists(listener, connection); try ( PreparedStatement stmt = connection.prepareStatement(GET_EVENTS_FOR_LISTENER_QUERY) ) { Date lastCheckDate = listener.getLastCheck(); listenerRepo.refreshLastCheck(listener, connection); stmt.setObject(1, listener.getLastEventId()); stmt.setObject(2, lastCheckDate); stmt.setObject(3, listener.getId()); ResultSet rs = stmt.executeQuery(); List<MysqlEvent> result = Lists.newArrayList(); long maxEventId = 0l; while (rs.next()) { maxEventId = Math.max(rs.getLong(EVENT_ID_COL), maxEventId); result.add(extractEvent(rs)); } if (maxEventId > listener.getLastEventId()) { listener.setLastEventId(maxEventId); listenerRepo.update(listener, connection); } return result; } catch (SQLException e) { throw new DataAccessException(\"Could not get new events for listener with id:\" + listener.getId(), e); } }### Assistant: @Test(groups = INTEGRATION) public void testDoesNotReturnEventsThatWereCreatedBeforeTheListenerLastCheck() throws SQLException, InterruptedException { insertEvent(new MysqlEvent(1, TEST_TABLE_NAME, INSERT_TYPE, \"{}\", \"{}\", new Date()), connection); Thread.sleep(1000L); ListenerRepo listenerRepo = new ListenerRepo(); listener = listenerRepo.insert(new Listener(TEST_TABLE_NAME), connection); List<MysqlEvent> newEventsForListener = repo.getNewEventsForListener(listener, connection); assertTrue(newEventsForListener.isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public InetAddress address(String inetHost, ResolvedAddressTypes resolvedAddressTypes) { String normalized = normalize(inetHost); switch (resolvedAddressTypes) { case IPV4_ONLY: return inet4Entries.get(normalized); case IPV6_ONLY: return inet6Entries.get(normalized); case IPV4_PREFERRED: Inet4Address inet4Address = inet4Entries.get(normalized); return inet4Address != null? inet4Address : inet6Entries.get(normalized); case IPV6_PREFERRED: Inet6Address inet6Address = inet6Entries.get(normalized); return inet6Address != null? inet6Address : inet4Entries.get(normalized); default: throw new IllegalArgumentException(\"Unknown ResolvedAddressTypes \" + resolvedAddressTypes); } }### Assistant: @Test public void shouldPickIpv6WhenBothAreDefinedButIpv6IsPreferred() { Map<String, Inet4Address> inet4Entries = new HashMap<String, Inet4Address>(); Map<String, Inet6Address> inet6Entries = new HashMap<String, Inet6Address>(); inet4Entries.put(\"localhost\", NetUtil.LOCALHOST4); inet6Entries.put(\"localhost\", NetUtil.LOCALHOST6); DefaultHostsFileEntriesResolver resolver = new DefaultHostsFileEntriesResolver(new HostsFileEntries(inet4Entries, inet6Entries)); InetAddress address = resolver.address(\"localhost\", ResolvedAddressTypes.IPV6_PREFERRED); Assert.assertTrue(\"Should pick an IPv6 address\", address instanceof Inet6Address); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static void checkServiceConfigs() { LOG.info(\"Checking services and their configs\"); String GET_SERVICES_WITHOUT_CONFIGS_QUERY = \"select c.cluster_name, service_name from clusterservices cs \" + \"join clusters c on cs.cluster_id=c.cluster_id \" + \"where service_name not in (select service_name from serviceconfig sc where sc.cluster_id=cs.cluster_id and sc.service_name=cs.service_name and sc.group_id is null)\"; String GET_SERVICE_CONFIG_WITHOUT_MAPPING_QUERY = \"select c.cluster_name, sc.service_name, sc.version from serviceconfig sc \" + \"join clusters c on sc.cluster_id=c.cluster_id \" + \"where service_config_id not in (select service_config_id from serviceconfigmapping) and group_id is null\"; String GET_STACK_NAME_VERSION_QUERY = \"select c.cluster_name, s.stack_name, s.stack_version from clusters c \" + \"join stack s on c.desired_stack_id = s.stack_id\"; String GET_SERVICES_WITH_CONFIGS_QUERY = \"select c.cluster_name, cs.service_name, cc.type_name, sc.version from clusterservices cs \" + \"join serviceconfig sc on cs.service_name=sc.service_name and cs.cluster_id=sc.cluster_id \" + \"join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id \" + \"join clusterconfig cc on scm.config_id=cc.config_id and sc.cluster_id=cc.cluster_id \" + \"join clusters c on cc.cluster_id=c.cluster_id and sc.stack_id=c.desired_stack_id \" + \"where sc.group_id is null and sc.service_config_id=(select max(service_config_id) from serviceconfig sc2 where sc2.service_name=sc.service_name and sc2.cluster_id=sc.cluster_id) \" + \"group by c.cluster_name, cs.service_name, cc.type_name, sc.version\"; String GET_NOT_SELECTED_SERVICE_CONFIGS_QUERY = \"select c.cluster_name, cs.service_name, cc.type_name from clusterservices cs \" + \"join serviceconfig sc on cs.service_name=sc.service_name and cs.cluster_id=sc.cluster_id \" + \"join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id \" + \"join clusterconfig cc on scm.config_id=cc.config_id and cc.cluster_id=sc.cluster_id \" + \"join clusters c on cc.cluster_id=c.cluster_id \" + \"where sc.group_id is null and sc.service_config_id = (select max(service_config_id) from serviceconfig sc2 where sc2.service_name=sc.service_name and sc2.cluster_id=sc.cluster_id) \" + \"group by c.cluster_name, cs.service_name, cc.type_name \" + \"having sum(cc.selected) < 1\"; Multimap<String, String> clusterServiceMap = HashMultimap.create(); Map<String, Map<String, String>> clusterStackInfo = new HashMap<>(); Map<String, Multimap<String, String>> clusterServiceVersionMap = new HashMap<>(); Map<String, Multimap<String, String>> clusterServiceConfigType = new HashMap<>(); ResultSet rs = null; Statement statement = null; ensureConnection(); LOG.info(\"Getting ambari metainfo instance\"); if (ambariMetaInfo == null) { ambariMetaInfo = injector.getInstance(AmbariMetaInfo.class); } try { LOG.info(\"Executing query 'GET_SERVICES_WITHOUT_CONFIGS'\"); statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); rs = statement.executeQuery(GET_SERVICES_WITHOUT_CONFIGS_QUERY); if (rs != null) { while (rs.next()) { clusterServiceMap.put(rs.getString(\"cluster_name\"), rs.getString(\"service_name\")); } for (String clusterName : clusterServiceMap.keySet()) { warning(\"Service(s): {}, from cluster {} has no config(s) in serviceconfig table!\", StringUtils.join(clusterServiceMap.get(clusterName), \",\"), clusterName); } } LOG.info(\"Executing query 'GET_SERVICE_CONFIG_WITHOUT_MAPPING'\"); rs = statement.executeQuery(GET_SERVICE_CONFIG_WITHOUT_MAPPING_QUERY); if (rs != null) { String serviceName = null, version = null, clusterName = null; while (rs.next()) { serviceName = rs.getString(\"service_name\"); clusterName = rs.getString(\"cluster_name\"); version = rs.getString(\"version\"); if (clusterServiceVersionMap.get(clusterName) != null) { Multimap<String, String> serviceVersion = clusterServiceVersionMap.get(clusterName); serviceVersion.put(serviceName, version); } else { Multimap<String, String> serviceVersion = HashMultimap.create();; serviceVersion.put(serviceName, version); clusterServiceVersionMap.put(clusterName, serviceVersion); } } for (String clName : clusterServiceVersionMap.keySet()) { Multimap<String, String> serviceVersion = clusterServiceVersionMap.get(clName); for (String servName : serviceVersion.keySet()) { error(\"In cluster {}, service config mapping is unavailable (in table serviceconfigmapping) for service {} with version(s) {}! \", clName, servName, StringUtils.join(serviceVersion.get(servName), \",\")); } } } LOG.info(\"Getting stack info from database\"); rs = statement.executeQuery(GET_STACK_NAME_VERSION_QUERY); if (rs != null) { while (rs.next()) { Map<String, String> stackInfoMap = new HashMap<>(); stackInfoMap.put(rs.getString(\"stack_name\"), rs.getString(\"stack_version\")); clusterStackInfo.put(rs.getString(\"cluster_name\"), stackInfoMap); } } Set<String> serviceNames = new HashSet<>(); Map<String, Map<Integer, Multimap<String, String>>> dbClusterServiceVersionConfigs = new HashMap<>(); Multimap<String, String> stackServiceConfigs = HashMultimap.create(); LOG.info(\"Executing query 'GET_SERVICES_WITH_CONFIGS'\"); rs = statement.executeQuery(GET_SERVICES_WITH_CONFIGS_QUERY); if (rs != null) { String serviceName = null, configType = null, clusterName = null; Integer serviceVersion = null; while (rs.next()) { clusterName = rs.getString(\"cluster_name\"); serviceName = rs.getString(\"service_name\"); configType = rs.getString(\"type_name\"); serviceVersion = rs.getInt(\"version\"); serviceNames.add(serviceName); if (dbClusterServiceVersionConfigs.get(clusterName) != null) { Map<Integer, Multimap<String, String>> dbServiceVersionConfigs = dbClusterServiceVersionConfigs.get(clusterName); if (dbServiceVersionConfigs.get(serviceVersion) != null) { dbServiceVersionConfigs.get(serviceVersion).put(serviceName, configType); } else { Multimap<String, String> dbServiceConfigs = HashMultimap.create(); dbServiceConfigs.put(serviceName, configType); dbServiceVersionConfigs.put(serviceVersion, dbServiceConfigs); } } else { Map<Integer, Multimap<String, String>> dbServiceVersionConfigs = new HashMap<>(); Multimap<String, String> dbServiceConfigs = HashMultimap.create(); dbServiceConfigs.put(serviceName, configType); dbServiceVersionConfigs.put(serviceVersion, dbServiceConfigs); dbClusterServiceVersionConfigs.put(clusterName, dbServiceVersionConfigs); } } } LOG.info(\"Comparing service configs from stack with configs that we got from db\"); for (Map.Entry<String, Map<String, String>> clusterStackInfoEntry : clusterStackInfo.entrySet()) { String clusterName = clusterStackInfoEntry.getKey(); Map<String, String> stackInfo = clusterStackInfoEntry.getValue(); String stackName = stackInfo.keySet().iterator().next(); String stackVersion = stackInfo.get(stackName); LOG.info(\"Getting services from metainfo\"); Map<String, ServiceInfo> serviceInfoMap = ambariMetaInfo.getServices(stackName, stackVersion); for (String serviceName : serviceNames) { LOG.info(\"Processing {}-{} / {}\", stackName, stackVersion, serviceName); ServiceInfo serviceInfo = serviceInfoMap.get(serviceName); if (serviceInfo != null) { Set<String> configTypes = serviceInfo.getConfigTypeAttributes().keySet(); for (String configType : configTypes) { stackServiceConfigs.put(serviceName, configType); } } else { warning(\"Service {} is not available for stack {} in cluster {}\", serviceName, stackName + \"-\" + stackVersion, clusterName); } } LOG.info(\"Comparing required service configs from stack with mapped service configs from db\"); Map<Integer, Multimap<String, String>> dbServiceVersionConfigs = dbClusterServiceVersionConfigs.get(clusterName); if (dbServiceVersionConfigs != null) { for (Integer serviceVersion : dbServiceVersionConfigs.keySet()) { Multimap<String, String> dbServiceConfigs = dbServiceVersionConfigs.get(serviceVersion); if (dbServiceConfigs != null) { for (String serviceName : dbServiceConfigs.keySet()) { Collection<String> serviceConfigsFromStack = stackServiceConfigs.get(serviceName); Collection<String> serviceConfigsFromDB = dbServiceConfigs.get(serviceName); if (serviceConfigsFromDB != null && serviceConfigsFromStack != null) { serviceConfigsFromStack.removeAll(serviceConfigsFromDB); if(!dbServiceConfigs.containsKey(\"RANGER\")) { removeStringsByRegexp(serviceConfigsFromStack, \"^ranger-\"+ serviceName.toLowerCase() + \"-\" + \"*\"); } if (!serviceConfigsFromStack.isEmpty()) { error(\"Required config(s): {} is(are) not available for service {} with service config version {} in cluster {}\", StringUtils.join(serviceConfigsFromStack, \",\"), serviceName, Integer.toString(serviceVersion), clusterName); } } } } } } } LOG.info(\"Getting services which has mapped configs which are not selected in clusterconfig\"); rs = statement.executeQuery(GET_NOT_SELECTED_SERVICE_CONFIGS_QUERY); if (rs != null) { String serviceName = null, configType = null, clusterName = null; while (rs.next()) { clusterName = rs.getString(\"cluster_name\"); serviceName = rs.getString(\"service_name\"); configType = rs.getString(\"type_name\"); if (clusterServiceConfigType.get(clusterName) != null) { Multimap<String, String> serviceConfigs = clusterServiceConfigType.get(clusterName); serviceConfigs.put(serviceName, configType); } else { Multimap<String, String> serviceConfigs = HashMultimap.create(); serviceConfigs.put(serviceName, configType); clusterServiceConfigType.put(clusterName, serviceConfigs); } } } for (String clusterName : clusterServiceConfigType.keySet()) { Multimap<String, String> serviceConfig = clusterServiceConfigType.get(clusterName); for (String serviceName : serviceConfig.keySet()) { error(\"You have non selected configs: {} for service {} from cluster {}!\", StringUtils.join(serviceConfig.get(serviceName), \",\"), serviceName, clusterName); } } } catch (SQLException e) { LOG.error(\"Exception occurred during complex service check procedure: \", e); } catch (AmbariException e) { LOG.error(\"Exception occurred during complex service check procedure: \", e); } finally { if (rs != null) { try { rs.close(); } catch (SQLException e) { LOG.error(\"Exception occurred during result set closing procedure: \", e); } } if (statement != null) { try { statement.close(); } catch (SQLException e) { LOG.error(\"Exception occurred during statement closing procedure: \", e); } } } }### Assistant: @Test public void testCheckServiceConfigs() throws Exception { EasyMockSupport easyMockSupport = new EasyMockSupport(); final AmbariMetaInfo mockAmbariMetainfo = easyMockSupport.createNiceMock(AmbariMetaInfo.class); final DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(DBAccessor.class); final Connection mockConnection = easyMockSupport.createNiceMock(Connection.class); final ResultSet mockResultSet = easyMockSupport.createNiceMock(ResultSet.class); final ResultSet stackResultSet = easyMockSupport.createNiceMock(ResultSet.class); final ResultSet serviceConfigResultSet = easyMockSupport.createNiceMock(ResultSet.class); final Statement mockStatement = easyMockSupport.createNiceMock(Statement.class); final ServiceInfo mockHDFSServiceInfo = easyMockSupport.createNiceMock(ServiceInfo.class); final StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(StackManagerFactory.class); final EntityManager mockEntityManager = easyMockSupport.createNiceMock(EntityManager.class); final Clusters mockClusters = easyMockSupport.createNiceMock(Clusters.class); final OsFamily mockOSFamily = easyMockSupport.createNiceMock(OsFamily.class); final Injector mockInjector = Guice.createInjector(new AbstractModule() { @Override protected void configure() { bind(AmbariMetaInfo.class).toInstance(mockAmbariMetainfo); bind(StackManagerFactory.class).toInstance(mockStackManagerFactory); bind(EntityManager.class).toInstance(mockEntityManager); bind(DBAccessor.class).toInstance(mockDBDbAccessor); bind(Clusters.class).toInstance(mockClusters); bind(OsFamily.class).toInstance(mockOSFamily); } }); Map<String, ServiceInfo> services = new HashMap<>(); services.put(\"HDFS\", mockHDFSServiceInfo); Map<String, Map<String, Map<String, String>>> configAttributes = new HashMap<>(); configAttributes.put(\"core-site\", new HashMap<String, Map<String, String>>()); expect(mockHDFSServiceInfo.getConfigTypeAttributes()).andReturn(configAttributes); expect(mockAmbariMetainfo.getServices(\"HDP\", \"2.2\")).andReturn(services); expect(serviceConfigResultSet.next()).andReturn(true).times(2); expect(serviceConfigResultSet.getString(\"service_name\")).andReturn(\"HDFS\").andReturn(\"HBASE\"); expect(serviceConfigResultSet.getString(\"type_name\")).andReturn(\"core-site\").andReturn(\"hbase-env\"); expect(stackResultSet.next()).andReturn(true); expect(stackResultSet.getString(\"stack_name\")).andReturn(\"HDP\"); expect(stackResultSet.getString(\"stack_version\")).andReturn(\"2.2\"); expect(mockConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement); expect(mockStatement.executeQuery(\"select c.cluster_name, service_name from clusterservices cs \" + \"join clusters c on cs.cluster_id=c.cluster_id \" + \"where service_name not in (select service_name from serviceconfig sc where sc.cluster_id=cs.cluster_id and sc.service_name=cs.service_name and sc.group_id is null)\")).andReturn(mockResultSet); expect(mockStatement.executeQuery(\"select c.cluster_name, sc.service_name, sc.version from serviceconfig sc \" + \"join clusters c on sc.cluster_id=c.cluster_id \" + \"where service_config_id not in (select service_config_id from serviceconfigmapping) and group_id is null\")).andReturn(mockResultSet); expect(mockStatement.executeQuery(\"select c.cluster_name, s.stack_name, s.stack_version from clusters c \" + \"join stack s on c.desired_stack_id = s.stack_id\")).andReturn(stackResultSet); expect(mockStatement.executeQuery(\"select c.cluster_name, cs.service_name, cc.type_name, sc.version from clusterservices cs \" + \"join serviceconfig sc on cs.service_name=sc.service_name and cs.cluster_id=sc.cluster_id \" + \"join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id \" + \"join clusterconfig cc on scm.config_id=cc.config_id and sc.cluster_id=cc.cluster_id \" + \"join clusters c on cc.cluster_id=c.cluster_id and sc.stack_id=c.desired_stack_id \" + \"where sc.group_id is null and sc.service_config_id=(select max(service_config_id) from serviceconfig sc2 where sc2.service_name=sc.service_name and sc2.cluster_id=sc.cluster_id) \" + \"group by c.cluster_name, cs.service_name, cc.type_name, sc.version\")).andReturn(serviceConfigResultSet); expect(mockStatement.executeQuery(\"select c.cluster_name, cs.service_name, cc.type_name from clusterservices cs \" + \"join serviceconfig sc on cs.service_name=sc.service_name and cs.cluster_id=sc.cluster_id \" + \"join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id \" + \"join clusterconfig cc on scm.config_id=cc.config_id and cc.cluster_id=sc.cluster_id \" + \"join clusters c on cc.cluster_id=c.cluster_id \" + \"where sc.group_id is null and sc.service_config_id = (select max(service_config_id) from serviceconfig sc2 where sc2.service_name=sc.service_name and sc2.cluster_id=sc.cluster_id) \" + \"group by c.cluster_name, cs.service_name, cc.type_name \" + \"having sum(cc.selected) < 1\")).andReturn(mockResultSet); DatabaseConsistencyCheckHelper.setInjector(mockInjector); DatabaseConsistencyCheckHelper.setConnection(mockConnection); easyMockSupport.replayAll(); mockAmbariMetainfo.init(); DatabaseConsistencyCheckHelper.checkServiceConfigs(); easyMockSupport.verifyAll(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<String, Object> read() throws Exception { String line = _unsyncBufferedReader.readLine(); if (line == null) { return null; } Map<String, Object> fieldNameValueMap = new HashMap<>(); String[] values = StringUtil.split(line, _delimiter); for (int i = 0; i < values.length; i++) { String fieldName = _fieldNames[i]; if (fieldName == null) { continue; } String value = values[i].trim(); if (value.isEmpty()) { value = null; } int lastDelimiterIndex = fieldName.lastIndexOf('_'); if (lastDelimiterIndex == -1) { fieldNameValueMap.put(fieldName, value); } else { BatchEngineImportTaskItemReaderUtil.handleMapField( fieldName, fieldNameValueMap, lastDelimiterIndex, value); } } return fieldNameValueMap; }### Assistant: @Test public void testColumnMappingWithUndefinedColumn() throws Exception { try (CSVBatchEngineImportTaskItemReader csvBatchEngineImportTaskItemReader = _getCSVBatchEngineImportTaskItemReader( new String[] { \"createDate1\", \"description1\", \"id1\", \"name1_en\", \"name1_hr\" }, StringPool.SEMICOLON, new Object[][] { { createDateString, \"sample description\", 1, \"sample name\", \"naziv\" } })) { validate( createDateString, \"sample description\", 1L, HashMapBuilder.put( \"createDate1\", \"createDate\" ).put( \"description1\", \"description\" ).put( \"id1\", \"id\" ).build(), csvBatchEngineImportTaskItemReader.read(), null); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static NamenodeRole convert(NamenodeRoleProto role) { switch (role) { case NAMENODE: return NamenodeRole.NAMENODE; case BACKUP: return NamenodeRole.BACKUP; case CHECKPOINT: return NamenodeRole.CHECKPOINT; } return null; }### Assistant: @Test public void testConvertBlockCommand() { Block[] blocks = new Block[] { new Block(21), new Block(22) }; DatanodeInfo[][] dnInfos = new DatanodeInfo[][] { new DatanodeInfo[1], new DatanodeInfo[2] }; dnInfos[0][0] = DFSTestUtil.getLocalDatanodeInfo(); dnInfos[1][0] = DFSTestUtil.getLocalDatanodeInfo(); dnInfos[1][1] = DFSTestUtil.getLocalDatanodeInfo(); String[][] storageIDs = {{\"s00\"}, {\"s10\", \"s11\"}}; StorageType[][] storageTypes = {{StorageType.DEFAULT}, {StorageType.DEFAULT, StorageType.DEFAULT}}; BlockCommand bc = new BlockCommand(DatanodeProtocol.DNA_TRANSFER, \"bp1\", blocks, dnInfos, storageTypes, storageIDs); BlockCommandProto bcProto = PBHelper.convert(bc); BlockCommand bc2 = PBHelper.convert(bcProto); assertEquals(bc.getAction(), bc2.getAction()); assertEquals(bc.getBlocks().length, bc2.getBlocks().length); Block[] blocks2 = bc2.getBlocks(); for (int i = 0; i < blocks.length; i++) { assertEquals(blocks[i], blocks2[i]); } DatanodeInfo[][] dnInfos2 = bc2.getTargets(); assertEquals(dnInfos.length, dnInfos2.length); for (int i = 0; i < dnInfos.length; i++) { DatanodeInfo[] d1 = dnInfos[i]; DatanodeInfo[] d2 = dnInfos2[i]; assertEquals(d1.length, d2.length); for (int j = 0; j < d1.length; j++) { compare(d1[j], d2[j]); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean createFillValueLine(int frameIndicator) { return MetopReader.isChannel3a(frameIndicator) ^ channel == AvhrrConstants.CH_3A; }### Assistant: @Test public void testCreateFillValueLine() { final int ch3a_flag = 1; final int ch3b_flag = 0; assertTrue(readerCh_3A.createFillValueLine(ch3b_flag)); assertFalse(readerCh_3A.createFillValueLine(ch3a_flag)); assertTrue(readerCh_3B.createFillValueLine(ch3a_flag)); assertFalse(readerCh_3B.createFillValueLine(ch3b_flag)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Operation parse(InputStream in) throws SxmpParsingException, IOException, SAXException, ParserConfigurationException { SAXParserFactory factory = SAXParserFactory.newInstance(); SAXParser parser = factory.newSAXParser(); parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: parser.getXMLReader().setFeature(\"http: Handler handler = new Handler(); XMLReader reader = parser.getXMLReader(); reader.setContentHandler(handler); reader.setErrorHandler(handler); reader.setEntityResolver(handler); try { parser.parse(new InputSource(in), handler); } catch (com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException e) { throw new SxmpParsingException(SxmpErrorCode.INVALID_XML, \"XML encoding mismatch\", null); } if (handler.error != null) { throw handler.error; } if (handler.getOperation() == null) { throw new SxmpParsingException(SxmpErrorCode.MISSING_REQUIRED_ELEMENT, \"The operation type [\" + handler.operationType.getValue() + \"] requires a request element\", new PartialOperation(handler.operationType)); } try { handler.getOperation().validate(); } catch (SxmpErrorException e) { throw new SxmpParsingException(e.getErrorCode(), e.getErrorMessage(), handler.getOperation()); } return handler.getOperation(); }### Assistant: @Test public void parseSubmitMissingText() throws Exception { StringBuilder string0 = new StringBuilder(200) .append(\"<?xml version=\\\"1.0\\\"?>\\n\") .append(\"<operation type=\\\"submit\\\">\\n\") .append(\" <account username=\\\"customer1\\\" password=\\\"test1\\\"/>\\n\") .append(\" <submitRequest referenceId=\\\"MYREF102020022\\\">\\n\") .append(\" <destinationAddress type=\\\"international\\\">+12065551212</destinationAddress>\\n\") .append(\" </submitRequest>\\n\") .append(\"</operation>\\n\") .append(\"\"); ByteArrayInputStream is = new ByteArrayInputStream(string0.toString().getBytes()); SxmpParser parser = new SxmpParser(); try { Operation operation = parser.parse(is); Assert.fail(); } catch (SxmpParsingException e) { Assert.assertEquals(SxmpErrorCode.MISSING_REQUIRED_ELEMENT, e.getErrorCode()); Assert.assertThat(e.getMessage(), CoreMatchers.containsString(\"A text value is mandatory\")); Assert.assertNotNull(e.getOperation()); SubmitRequest submitRequest = (SubmitRequest)e.getOperation(); Assert.assertEquals(Operation.Type.SUBMIT, submitRequest.getType()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean test(String host) { return HOST.equals(host); }### Assistant: @Test public void isNotLocalHost() throws Exception { assertThat(underTest.test(HOST + \"foo\"), is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected JSONObject getDetectorOptions(Configuration pConfig, LogHandler pLogHandler) { String options = pConfig.get(ConfigKey.DETECTOR_OPTIONS); try { if (options != null) { JSONObject opts = (JSONObject) new JSONParser().parse(options); return (JSONObject) opts.get(getProduct()); } return null; } catch (ParseException e) { pLogHandler.error(\"Could not parse detector options '\" + options + \"' as JSON object: \" + e,e); } return null; }### Assistant: @Test public void detectOptionsFail() { LogHandler handler = EasyMock.createMock(LogHandler.class); handler.error(matches(\"^.*parse detector options.*\"),isA(Exception.class)); replay(handler); Configuration opts = new Configuration(ConfigKey.DETECTOR_OPTIONS,\"blub: bla\"); JSONObject config = serverHandle.getDetectorOptions(opts,handler); assertNull(config); verify(handler); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String generate() { String value = super.getLatinScript(); return TemplateLoader.getTemplateByName(\"legalpersonaddress\").replace(\"$base64Value\", Utils.toBase64(value)); }### Assistant: @Test public void testGenerateCurrentAddressAttribute() throws IOException { String locatorDesignator = \"locatorDesignator\"; String thoroughfare = \"thoroughfare\"; String postName = \"postName\"; String postCode = \"postCode\"; String pOBOX = \"pOBOX\"; String locatorName = \"locatorName\"; String cvaddressArea = \"cvaddressArea\"; String adminunitFirstline = \"adminunitFirstline\"; String adminunitSecondline = \"adminunitSecondline\"; CurrentAddressAttribute attribute = new CurrentAddressAttribute(locatorDesignator, thoroughfare, postName, postCode, pOBOX, locatorName, cvaddressArea, adminunitFirstline, adminunitSecondline); TemplateLoader.init(); String xml = attribute.generate(); Assertions.assertTrue(StringUtils.isNotEmpty(xml)); String substringBetween = StringUtils.substringBetween(xml, \"<saml2:AttributeValue xsi:type=\\\"eidas:CurrentAddressType\\\">\", \"</saml2:AttributeValue>\"); Assertions.assertTrue(StringUtils.isNotEmpty(substringBetween)); String base64Decoded = Utils.fromBase64(substringBetween); Assertions.assertTrue(StringUtils.isNotEmpty(base64Decoded)); Assertions.assertTrue(base64Decoded.contains(\"locatorDesignator\")); Assertions.assertTrue(base64Decoded.contains(\"thoroughfare\")); Assertions.assertTrue(base64Decoded.contains(\"postName\")); Assertions.assertTrue(base64Decoded.contains(\"postCode\")); Assertions.assertTrue(base64Decoded.contains(\"locatorName\")); Assertions.assertTrue(base64Decoded.contains(\"cvaddressArea\")); Assertions.assertTrue(base64Decoded.contains(\"adminunitFirstline\")); Assertions.assertTrue(base64Decoded.contains(\"adminunitSecondline\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected StorageUnitEntity getStorageUnit(BusinessObjectDataEntity businessObjectDataEntity) { List<StorageUnitEntity> s3StorageUnitEntities = storageUnitDao.getStorageUnitsByStoragePlatformAndBusinessObjectData(StoragePlatformEntity.S3, businessObjectDataEntity); if (CollectionUtils.isEmpty(s3StorageUnitEntities)) { throw new IllegalArgumentException(String.format(\"Business object data has no S3 storage unit. Business object data: {%s}\", businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity))); } if (CollectionUtils.size(s3StorageUnitEntities) > 1) { throw new IllegalArgumentException(String .format(\"Business object data has multiple (%s) %s storage units. Business object data: {%s}\", s3StorageUnitEntities.size(), StoragePlatformEntity.S3, businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity))); } StorageUnitEntity storageUnitEntity = s3StorageUnitEntities.get(0); String storageUnitStatus = storageUnitEntity.getStatus().getCode(); if (!StorageUnitStatusEntity.ARCHIVED.equals(storageUnitStatus)) { String storageName = storageUnitEntity.getStorage().getName(); if (StorageUnitStatusEntity.ENABLED.equals(storageUnitStatus)) { throw new IllegalArgumentException(String .format(\"Business object data is already available in \\\"%s\\\" S3 storage. Business object data: {%s}\", storageName, businessObjectDataHelper.businessObjectDataEntityAltKeyToString(storageUnitEntity.getBusinessObjectData()))); } else if (StorageUnitStatusEntity.RESTORING.equals(storageUnitStatus)) { throw new IllegalArgumentException(String .format(\"Business object data is already being restored in \\\"%s\\\" S3 storage. Business object data: {%s}\", storageName, businessObjectDataHelper.businessObjectDataEntityAltKeyToString(storageUnitEntity.getBusinessObjectData()))); } else { throw new IllegalArgumentException(String.format(\"Business object data is not archived. \" + \"S3 storage unit in \\\"%s\\\" storage must have \\\"%s\\\" status, but it actually has \\\"%s\\\" status. Business object data: {%s}\", storageName, StorageUnitStatusEntity.ARCHIVED, storageUnitStatus, businessObjectDataHelper.businessObjectDataEntityAltKeyToString(storageUnitEntity.getBusinessObjectData()))); } } return storageUnitEntity; }### Assistant: @Test public void testGetStorageUnitStorageUnitNotArchived() { BusinessObjectDataEntity businessObjectDataEntity = new BusinessObjectDataEntity(); StorageUnitStatusEntity storageUnitStatusEntity = new StorageUnitStatusEntity(); storageUnitStatusEntity.setCode(STORAGE_UNIT_STATUS); StorageEntity storageEntity = new StorageEntity(); storageEntity.setName(STORAGE_NAME); StorageUnitEntity storageUnitEntity = new StorageUnitEntity(); storageUnitEntity.setStorage(storageEntity); storageUnitEntity.setBusinessObjectData(businessObjectDataEntity); storageUnitEntity.setStatus(storageUnitStatusEntity); when(storageUnitDao.getStorageUnitsByStoragePlatformAndBusinessObjectData(StoragePlatformEntity.S3, businessObjectDataEntity)) .thenReturn(Collections.singletonList(storageUnitEntity)); when(businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity)).thenReturn(BUSINESS_OBJECT_DATA_KEY_AS_STRING); try { businessObjectDataInitiateRestoreHelperServiceImpl.getStorageUnit(businessObjectDataEntity); fail(); } catch (IllegalArgumentException e) { assertEquals(String.format( \"Business object data is not archived. S3 storage unit in \\\"%s\\\" storage must have \\\"%s\\\" status, but it actually has \\\"%s\\\" status. \" + \"Business object data: {%s}\", STORAGE_NAME, StorageUnitStatusEntity.ARCHIVED, STORAGE_UNIT_STATUS, BUSINESS_OBJECT_DATA_KEY_AS_STRING), e.getMessage()); } verify(storageUnitDao).getStorageUnitsByStoragePlatformAndBusinessObjectData(StoragePlatformEntity.S3, businessObjectDataEntity); verify(businessObjectDataHelper).businessObjectDataEntityAltKeyToString(businessObjectDataEntity); verifyNoMoreInteractionsHelper(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void register() throws GeneralSecurityException { AeadConfig.register(); EciesAeadHkdfPrivateKeyManager.registerPair(true); HybridDecryptWrapper.register(); HybridEncryptWrapper.register(); }### Assistant: @Test public void aaaTestInitialization() throws Exception { try { Registry.getCatalogue(\"tinkmac\"); fail(\"Expected GeneralSecurityException\"); } catch (GeneralSecurityException e) { assertThat(e.toString()).contains(\"no catalogue found\"); assertThat(e.toString()).contains(\"MacConfig.register()\"); } try { Registry.getCatalogue(\"tinkhybridencrypt\"); fail(\"Expected GeneralSecurityException\"); } catch (GeneralSecurityException e) { assertThat(e.toString()).contains(\"no catalogue found\"); assertThat(e.toString()).contains(\"HybridConfig.register()\"); } try { Registry.getCatalogue(\"tinkhybriddecrypt\"); fail(\"Expected GeneralSecurityException\"); } catch (GeneralSecurityException e) { assertThat(e.toString()).contains(\"no catalogue found\"); assertThat(e.toString()).contains(\"HybridConfig.register()\"); } String typeUrl = \"type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey\"; try { Registry.getUntypedKeyManager(typeUrl); fail(\"Expected GeneralSecurityException\"); } catch (GeneralSecurityException e) { assertThat(e.toString()).contains(\"No key manager found\"); } HybridConfig.register(); Registry.getKeyManager(typeUrl, HybridDecrypt.class); HybridConfig.register(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static void moveToFile(Map<String, File> files, File outputFile, ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext) throws IOException { if (outputFile.exists() && !outputFile.isFile()) { throw new IOException(String.format(\"Wrong output destination %s, must be a file.\", outputFile)); } if (files.size() != 1) { throw new IOException( String.format(\"Wrong files map size %d, must be 1 to copy to the selected destination %s\", files.size(), outputFile)); } for (Entry<String, File> entry : files.entrySet()) { moveFile(entry.getValue(), outputFile, of(existingOutputPolicy).filter(p -> p != SKIP).orElseGet(() -> { LOG.debug(\"Cannot use {} output policy for single output, replaced with {}\", SKIP, FAIL); return FAIL; }), executionContext); } }### Assistant: @Test public void copySingleFileSkipFallbacksToFail() throws IOException { Map<String, File> files = new HashMap<String, File>(); files.put(\"newName\", folder.newFile()); File outFile = mock(File.class); when(outFile.isFile()).thenReturn(Boolean.TRUE); when(outFile.exists()).thenReturn(Boolean.TRUE); try { OutputWriterHelper.moveToFile(files, outFile, ExistingOutputPolicy.SKIP, context); fail(\"Exception expected\"); } catch (IOException e) { assertTrue(\"Different exception expected.\", e.getMessage().startsWith(\"Unable to write\")); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String extractRoleDomainName(final String roleName) { int idx = roleName.indexOf(AuthorityConsts.ROLE_SEP); if (idx == -1 || idx == 0 || idx == roleName.length() - AuthorityConsts.ROLE_SEP.length()) { return null; } else { return roleName.substring(0, idx); } }### Assistant: @Test public void testExtractRoleDomainName() { assertEquals(AthenzUtils.extractRoleDomainName(\"athenz:role.readers\"), \"athenz\"); assertEquals(AthenzUtils.extractRoleDomainName(\"athenz.api:role.readers\"), \"athenz.api\"); assertEquals(AthenzUtils.extractRoleDomainName(\"athenz.api.test:role.readers\"), \"athenz.api.test\"); assertNull(AthenzUtils.extractRoleDomainName(\"athenz.role.readers\")); assertNull(AthenzUtils.extractRoleDomainName(\"athenz:roles.readers\")); assertNull(AthenzUtils.extractRoleDomainName(\"athenz:role.\")); assertNull(AthenzUtils.extractRoleDomainName(\":role.readers\")); assertNull(AthenzUtils.extractRoleDomainName(\"athenz.readers\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"/policies/download/{serviceName}\") @Produces({ \"application/json\", \"application/xml\" }) public ServicePolicies getServicePoliciesIfUpdated( @PathParam(\"serviceName\") String serviceName, @QueryParam(\"lastKnownVersion\") Long lastKnownVersion, @DefaultValue(\"0\") @QueryParam(\"lastActivationTime\") Long lastActivationTime, @QueryParam(\"pluginId\") String pluginId, @DefaultValue(\"\") @QueryParam(\"clusterName\") String clusterName, @DefaultValue(\"\") @QueryParam(\"zoneName\") String zoneName, @DefaultValue(\"false\") @QueryParam(\"supportsPolicyDeltas\") Boolean supportsPolicyDeltas, @DefaultValue(\"\") @QueryParam(\"pluginCapabilities\") String pluginCapabilities, @Context HttpServletRequest request) throws Exception { if (LOG.isDebugEnabled()) { LOG.debug(\"==> ServiceREST.getServicePoliciesIfUpdated(\" + serviceName + \", \" + lastKnownVersion + \", \" + lastActivationTime + \", \" + pluginId + \", \" + clusterName + \", \" + supportsPolicyDeltas + \")\"); } ServicePolicies ret = null; int httpCode = HttpServletResponse.SC_OK; String logMsg = null; RangerPerfTracer perf = null; Long downloadedVersion = null; boolean isValid = false; try { bizUtil.failUnauthenticatedIfNotAllowed(); isValid = serviceUtil.isValidateHttpsAuthentication(serviceName, request); } catch (WebApplicationException webException) { httpCode = webException.getResponse().getStatus(); logMsg = webException.getResponse().getEntity().toString(); } catch (Exception e) { httpCode = HttpServletResponse.SC_BAD_REQUEST; logMsg = e.getMessage(); } if (isValid) { if (lastKnownVersion == null) { lastKnownVersion = Long.valueOf(-1); } try { if(RangerPerfTracer.isPerfTraceEnabled(PERF_LOG)) { perf = RangerPerfTracer.getPerfTracer(PERF_LOG, \"ServiceREST.getServicePoliciesIfUpdated(serviceName=\" + serviceName + \",lastKnownVersion=\" + lastKnownVersion + \",lastActivationTime=\" + lastActivationTime + \")\"); } ServicePolicies servicePolicies = svcStore.getServicePoliciesIfUpdated(serviceName, lastKnownVersion, !supportsPolicyDeltas); if (servicePolicies == null) { downloadedVersion = lastKnownVersion; httpCode = HttpServletResponse.SC_NOT_MODIFIED; logMsg = \"No change since last update\"; } else { Map<String, RangerSecurityZone.RangerSecurityZoneService> securityZones = zoneStore.getSecurityZonesForService(serviceName); ServicePolicies updatedServicePolicies = servicePolicies; if (MapUtils.isNotEmpty(securityZones)) { updatedServicePolicies = RangerPolicyAdminCache.getUpdatedServicePoliciesForZones(servicePolicies, securityZones); patchAssociatedTagServiceInSecurityZoneInfos(updatedServicePolicies); } downloadedVersion = updatedServicePolicies.getPolicyVersion(); if (lastKnownVersion == -1L || !supportsPolicyDeltas) { ret = filterServicePolicies(updatedServicePolicies); } else { ret = updatedServicePolicies; } ret.setServiceConfig(svcStore.getServiceConfigForPlugin(ret.getServiceId())); httpCode = HttpServletResponse.SC_OK; logMsg = \"Returning \" + (ret.getPolicies() != null ? ret.getPolicies().size() : (ret.getPolicyDeltas() != null ? ret.getPolicyDeltas().size() : 0)) + \" policies. Policy version=\" + ret.getPolicyVersion(); } } catch (Throwable excp) { LOG.error(\"getServicePoliciesIfUpdated(\" + serviceName + \", \" + lastKnownVersion + \", \" + lastActivationTime + \") failed\", excp); httpCode = HttpServletResponse.SC_BAD_REQUEST; logMsg = excp.getMessage(); } finally { createPolicyDownloadAudit(serviceName, lastKnownVersion, pluginId, httpCode, clusterName, zoneName, request); RangerPerfTracer.log(perf); } } assetMgr.createPluginInfo(serviceName, pluginId, request, RangerPluginInfo.ENTITY_TYPE_POLICIES, downloadedVersion, lastKnownVersion, lastActivationTime, httpCode, clusterName, pluginCapabilities); if(httpCode != HttpServletResponse.SC_OK) { boolean logError = httpCode != HttpServletResponse.SC_NOT_MODIFIED; throw restErrorUtil.createRESTException(httpCode, logMsg, logError); } if(LOG.isDebugEnabled()) { LOG.debug(\"<== ServiceREST.getServicePoliciesIfUpdated(\" + serviceName + \", \" + lastKnownVersion + \", \" + lastActivationTime + \", \" + pluginId + \", \" + clusterName + \", \" + supportsPolicyDeltas + \"): count=\" + ((ret == null || ret.getPolicies() == null) ? 0 : ret.getPolicies().size())); } return ret; }### Assistant: @Test public void test56getServicePoliciesIfUpdated() throws Exception { HttpServletRequest request = Mockito.mock(HttpServletRequest.class); ServicePolicies servicePolicies = servicePolicies(); String serviceName = \"HDFS_1\"; Long lastKnownVersion = 1L; String pluginId = \"1\"; Mockito.when(serviceUtil.isValidateHttpsAuthentication(serviceName, request)).thenReturn(true); Mockito.when(svcStore.getServicePoliciesIfUpdated(Mockito.anyString(), Mockito.anyLong(), Mockito.anyBoolean())).thenReturn(servicePolicies); Mockito.when(zoneStore.getSecurityZonesForService(serviceName)).thenReturn(null); ServicePolicies dbServicePolicies = serviceREST.getServicePoliciesIfUpdated(serviceName, lastKnownVersion, 0L, pluginId, \"\", \"\", true, capabilityVector, request); Assert.assertNotNull(dbServicePolicies); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Observable<Server> searchServer() { return serverSearchManager.searchServer().map(serverEntityDataMapper::transform); }### Assistant: @Test public void shouldNotReturnAnyServer() throws Exception { when(mockServerSearchManager.searchServer()).thenReturn(Observable.never()); Observable<Server> serverObservable = networkActionProvider.searchServer(); TestObserver<Server> testObserver = serverObservable.test(); testObserver.assertEmpty(); testObserver.assertNotComplete(); verify(mockServerSearchManager, times(1)).searchServer(); verifyZeroInteractions(mockServerEntityDataMapper); verifyNoMoreInteractions(mockServerSearchManager); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void parse(final String line) { @NonNls final String command; if (line.contains(\" \")) { command = line.substring(1, line.indexOf(' ')); } else { command = line.substring(1, line.length()); } if (command.length() > 0) { final String args = line.replaceFirst(\"/\" + Pattern.quote(command), \"\"); if (command.equals(\"topic\")) { cmdTopic(args); } else if (command.equals(\"away\")) { cmdAway(args); } else if (command.equals(\"back\")) { cmdBack(); } else if (command.equals(\"clear\")) { cmdClear(); } else if (command.equals(\"about\")) { cmdAbout(); } else if (command.equals(\"help\")) { cmdHelp(); } else if (command.equals(\"whois\")) { cmdWhois(args); } else if (command.equals(\"send\")) { cmdSend(args); } else if (command.equals(\"receive\")) { cmdReceive(args); } else if (command.equals(\"reject\")) { cmdReject(args); } else if (command.equals(\"cancel\")) { cmdCancel(args); } else if (command.equals(\"msg\")) { cmdMsg(args); } else if (command.equals(\"nick\")) { cmdNick(args); } else if (command.equals(\"users\")) { cmdUsers(); } else if (command.equals(\"transfers\")) { cmdTransfers(); } else if (command.equals(\"quit\")) { cmdQuit(); } else if (command.startsWith(\"/\")) { cmdSlash(line); } else { cmdUnknown(command); } } else { cmdUnknown(command); } }### Assistant: @Test public void rejectShouldReturnIfThreeArguments() { parser.parse(\"/reject SomeOne some thing\"); verify(messageController).showSystemMessage(\"/reject - missing arguments <nick> <id>\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <N extends Comparable<N>> N max(N a, N b) { return a.compareTo(b) > 0 ? a : b; }### Assistant: @Test public void max_Float() { Float a = 42F; Float b = 100F; assertEquals(b, max(a, b)); assertEquals(b, max(b, a)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping( value = \"/debug/host/{host_id}\", method = RequestMethod.PUT ) @ResponseBody public BaseResponse performLogArchiving( @PathVariable final String host_id, @RequestBody( required = false ) final String body, HttpMethod method ) throws HMSRestException { BaseResponse response = new BaseResponse(); if ( !InventoryLoader.getInstance().getNodeMap().containsKey( host_id ) ) { throw new HMSRestException( Status.NOT_FOUND.getStatusCode(), \"Invalid Request\", \"Can't find host with id \" + host_id ); } int noOfLines = hmsLogLineExtractLimit; if ( body != null ) { ObjectMapper mapper = new ObjectMapper(); try { HmsLogExtractOptions options = mapper.readValue( body, HmsLogExtractOptions.class ); noOfLines = options.getNoOfLines(); } catch ( Exception e ) { logger.warn( \"Cannot find number of lines to read from node [ \" + host_id + \" ] IB and OOB logs, in request body. So using default value [ \" + noOfLines + \" ]\" ); } } if ( noOfLines <= 500 ) { noOfLines = hmsLogLineExtractLimit; } try { String targetArchive = debuggerUtil.archiveHmsDebugLogs( host_id, hmsIpAddr, hmsOobUsername, hmsLogArchiverScript, hmsLogArchiveLocation, hmsOobLogLocation, hmsIbLogLocation, noOfLines, EventComponent.SERVER ); response.setStatusCode( Status.OK.getStatusCode() ); response.setStatusMessage( \"Hms debug logs archive will be created shortly at \" + targetArchive ); return response; } catch ( IllegalArgumentException e ) { String err = \"Exception occured during Log archiving for node [ \" + host_id + \" ]\"; String debugString = String.format( \"host_id [ %s ], hmsIpAddr [ %s ], hmsOobUsername [ %s ], hmsLogArchiverScript [ %s ], hmsLogArchiveLocation [ %s ], hmsOobLogLocation [ %s ], hmsIbLogLocation [ %s ], noOfLines[ %s ]\", host_id, hmsIpAddr, hmsOobUsername, hmsLogArchiverScript, hmsLogArchiveLocation, hmsOobLogLocation, hmsIbLogLocation, noOfLines ); logger.error( err + debugString ); response.setStatusCode( Status.INTERNAL_SERVER_ERROR.getStatusCode() ); response.setStatusMessage( err ); return response; } }### Assistant: @Test public void performLogArchivingTest() throws Exception, IllegalArgumentException { PowerMockito.mockStatic( HMSDebuggerComponent.class ); BaseResponse responseMock = new BaseResponse(); responseMock.setStatusCode( 200 ); responseMock.setStatusMessage( \"Hms debug logs archive will be created shortly at logs archive directory\" ); Mockito.doReturn( \"logs archive directory\" ).when( debuggerUtil ).archiveHmsDebugLogs( anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyInt(), Matchers.any( EventComponent.class ) ); when( debuggerUtil.archiveHmsDebugLogs( anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyInt(), Matchers.any( EventComponent.class ) ) ).thenReturn( \"logs archive directory\" ); BaseResponse response = hmsLocalRestServiceMgmt.performLogArchiving( \"N1\", \"100\", HttpMethod.PUT ); assertNotNull( response ); assertEquals( response.getStatusCode(), responseMock.getStatusCode() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onSuccess( Map<String,Value> metadata ) { log.trace( \"Channel %s pinged successfully\", channel ); result.setSuccess( true ); }### Assistant: @Test void shouldResolvePromiseOnSuccess() { Promise<Boolean> promise = newPromise(); PingResponseHandler handler = newHandler( promise ); handler.onSuccess( emptyMap() ); assertTrue( promise.isSuccess() ); assertTrue( promise.getNow() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ContentLocation createLocation( final String string ) throws ContentCreationException { throw new ContentCreationException( \"Cannot create a content-location: \" + string ); }### Assistant: @Test public void testCreateLocation() throws Exception { try { reportContentLocation.createLocation( \"\" ); } catch ( ContentCreationException ex ) { assertTrue( true ); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void receiveCommand(ItemCommandEvent commandEvent, Item item) { if (!enabled) { return; } final String itemName = commandEvent.getItemName(); final Command command = commandEvent.getItemCommand(); if (command instanceof State) { final State state = (State) command; Recommendation autoUpdate = shouldAutoUpdate(itemName); MetadataKey key = new MetadataKey(AUTOUPDATE_KEY, itemName); Metadata metadata = metadataRegistry.get(key); if (metadata != null && !metadata.getValue().trim().isEmpty()) { boolean override = Boolean.parseBoolean(metadata.getValue()); if (override) { logger.trace(\"Auto update strategy {} overriden by item metadata to REQUIRED\", autoUpdate); autoUpdate = Recommendation.REQUIRED; } else { logger.trace(\"Auto update strategy {} overriden by item metadata to DONT\", autoUpdate); autoUpdate = Recommendation.DONT; } } switch (autoUpdate) { case REQUIRED: logger.trace(\"Automatically updating item '{}' because no channel is linked\", itemName); postUpdate(item, state, EVENT_SOURCE); break; case RECOMMENDED: logger.trace(\"Automatically updating item '{}' because no channel does it\", itemName); postUpdate(item, state, EVENT_SOURCE); break; case OPTIMISTIC: logger.trace(\"Optimistically updating item '{}'\", itemName); postPrediction(item, state, false); if (sendOptimisticUpdates) { postUpdate(item, state, EVENT_SOURCE_OPTIMISTIC); } break; case DONT: logger.trace(\"Won't update item '{}' as it was vetoed.\", itemName); break; case REVERT: logger.trace(\"Sending current item state to revert controls '{}'\", itemName); postPrediction(item, item.getState(), true); break; } } }### Assistant: @Test public void testAutoUpdateNoPolicyThingOFFLINEandThingONLINE() { links.add(new ItemChannelLink(\"test\", CHANNEL_UID_OFFLINE_1)); links.add(new ItemChannelLink(\"test\", CHANNEL_UID_ONLINE_1)); aum.receiveCommand(event, item); assertChangeStateTo(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public IntegerHolder convert(Object obj) { if (obj instanceof Long || obj instanceof Integer || obj instanceof Short || obj instanceof Byte) { Number n = (Number) obj; return new IntegerHolder(n.longValue()); } if (obj == null) { return new IntegerHolder(null); } if (obj instanceof String) { return decode((String) obj); } throw new IllegalArgumentException(\"conversion not supported for: \" + obj.getClass()); }### Assistant: @Test public void testConvert() { Object[][] testCases = { {new Long(17), 17L}, {new Integer(50), 50L}, {(byte) 100, 100L}, {(short) 2000, 2000L}, {null, null}, {\"\", null}, {\" \", null}, {\"123\", 123L}, {String.valueOf(Long.MIN_VALUE), Long.MIN_VALUE}, {String.valueOf(Long.MAX_VALUE), Long.MAX_VALUE} }; for (Object[] testCase : testCases) { Object obj = testCase[0]; Long expectedValue = (Long) testCase[1]; IntegerHolder holder = type.convert(obj); assertEquals(expectedValue, holder.getValue()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(final Object object) { if (this == object) { return true; } if (object == null) { return false; } if (getClass() != object.getClass()) { return false; } if (getClass() != (object.getClass())) { return false; } MultiSelectColumnDescriptor other = (MultiSelectColumnDescriptor) object; return other.table == table; }### Assistant: @Test public void testEqualsContract() { assertFalse(\"Wrong equals implementation, different types are recognized as equals \", one.equals(new Integer(1))); assertFalse(\"Wrong equals implementation, different objects are recognized as equals \", one.equals(two)); assertFalse(\"Wrong equals implementation, null value is recognized as equals \", one.equals(null)); assertTrue(\"Wrong equals implementation, same objects are NOT recognized as equals \", one.equals(sameRefAsOne)); assertTrue(\"Wrong equals implementation, same objecst are NOT recognized as equals \", one.equals(sameAsOne)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private Integer getListIndexInKeys(final Class<?>[] keyMethodParamTypes, final Method targetMethod) { Integer listIndexInKeys = null; for (int i = 0; i < keyMethodParamTypes.length; i++) { if (isList(keyMethodParamTypes[i])) { if (listIndexInKeys != null) { throw new InvalidAnnotationException( \"There are more than one method's parameter annotated by @ParameterValueKeyProvider that is list \" + targetMethod.toString()); } listIndexInKeys = i; } } return listIndexInKeys; }### Assistant: @Test public void shouldPopulateListKeyIndex() throws Exception { final Class<? extends Annotation> expected = InvalidateMultiCache.class; final Method targetMethod = new Mirror().on(AnnotationDataDummy.class).reflect().method(\"populateListKey01\").withArgs(List.class); data.setKeyIndexes(Collections.singleton(0)); builder.populate(data, null, expected, targetMethod); assertEquals(0, data.getListIndexInKeys()); assertEquals(0, data.getListIndexInMethodArgs()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <ResourcePoolT extends ResourcePool> void main(String[] args) throws IOException { CmdLineUtil<ResourcePoolT, ProtocolBuilderNumeric> cmdUtil = new CmdLineUtil<>(); int x = 0; int y = 0; cmdUtil.addOption(Option.builder(\"x\").desc(\"The integer x coordinate of this party. \" + \"Note only party 1 and 2 should supply this input.\").hasArg().build()); cmdUtil.addOption(Option.builder(\"y\").desc(\"The integer y coordinate of this party. \" + \"Note only party 1 and 2 should supply this input\").hasArg().build()); CommandLine cmd = cmdUtil.parse(args); NetworkConfiguration networkConfiguration = cmdUtil.getNetworkConfiguration(); if (networkConfiguration.getMyId() == 1 || networkConfiguration.getMyId() == 2) { if (!cmd.hasOption(\"x\") || !cmd.hasOption(\"y\")) { cmdUtil.displayHelp(); throw new IllegalArgumentException(\"Party 1 and 2 must submit input\"); } else { x = Integer.parseInt(cmd.getOptionValue(\"x\")); y = Integer.parseInt(cmd.getOptionValue(\"y\")); } } else { if (cmd.hasOption(\"x\") || cmd.hasOption(\"y\")) { throw new IllegalArgumentException(\"Only party 1 and 2 should submit input\"); } } DistanceDemo distDemo = new DistanceDemo(networkConfiguration.getMyId(), x, y); SecureComputationEngine<ResourcePoolT, ProtocolBuilderNumeric> sce = cmdUtil.getSce(); ResourcePoolT resourcePool = cmdUtil.getResourcePool(); BigInteger bigInteger = sce.runApplication(distDemo, resourcePool, cmdUtil.getNetwork()); double dist = Math.sqrt(bigInteger.doubleValue()); log.info(\"Distance between party 1 and 2 is: \" + dist); cmdUtil.closeNetwork(); sce.shutdownSCE(); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testDistanceCmdLine2PartyWithNoInputY() throws Exception { DistanceDemo.main( new String[]{\"-i\", \"1\", \"-p\", \"1:localhost:8081\", \"-p\", \"2:localhost:8082\", \"-p\", \"3:localhost:8083\", \"-s\", \"dummyArithmetic\", \"-x\", \"20\"}); fail(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FEELFnResult<TemporalAccessor> invoke(@ParameterName(\"from\") String val) { if ( val == null ) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"from\", \"cannot be null\")); } try { TemporalAccessor parsed = FEEL_TIME.parse(val); if (parsed.query(TemporalQueries.offset()) != null) { OffsetTime asOffSetTime = parsed.query(OffsetTime::from); return FEELFnResult.ofResult(asOffSetTime); } else if (parsed.query(TemporalQueries.zone()) == null) { LocalTime asLocalTime = parsed.query(LocalTime::from); return FEELFnResult.ofResult(asLocalTime); } return FEELFnResult.ofResult(parsed); } catch (DateTimeException e) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"from\", e)); } }### Assistant: @Test public void invokeTimeUnitsParamsUnsupportedNumber() { FunctionTestUtil.assertResultError(timeFunction.invoke(Double.POSITIVE_INFINITY, 1, 1, null), InvalidParametersEvent.class); FunctionTestUtil.assertResultError(timeFunction.invoke(Double.NEGATIVE_INFINITY, 1, 1, null), InvalidParametersEvent.class); FunctionTestUtil.assertResultError(timeFunction.invoke(1, Double.POSITIVE_INFINITY, 1, null), InvalidParametersEvent.class); FunctionTestUtil.assertResultError(timeFunction.invoke(1, Double.NEGATIVE_INFINITY, 1, null), InvalidParametersEvent.class); FunctionTestUtil.assertResultError(timeFunction.invoke(1, 1, Double.POSITIVE_INFINITY, null), InvalidParametersEvent.class); FunctionTestUtil.assertResultError(timeFunction.invoke(1, 1, Double.NEGATIVE_INFINITY, null), InvalidParametersEvent.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException { logger.debug(\"initiate reaction: RadicalSiteHrAlphaReaction\"); if (reactants.getAtomContainerCount() != 1) { throw new CDKException(\"RadicalSiteHrAlphaReaction only expects one reactant\"); } if (agents != null) { throw new CDKException(\"RadicalSiteHrAlphaReaction don't expects agents\"); } IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class); IAtomContainer reactant = reactants.getAtomContainer(0); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(reactant); Aromaticity.cdkLegacy().apply(reactant); AllRingsFinder arf = new AllRingsFinder(); IRingSet ringSet = arf.findAllRings(reactant); for (int ir = 0; ir < ringSet.getAtomContainerCount(); ir++) { IRing ring = (IRing) ringSet.getAtomContainer(ir); for (int jr = 0; jr < ring.getAtomCount(); jr++) { IAtom aring = ring.getAtom(jr); aring.setFlag(CDKConstants.ISINRING, true); } } IParameterReact ipr = super.getParameterClass(SetReactionCenter.class); if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant); HOSECodeGenerator hcg = new HOSECodeGenerator(); Iterator<IAtom> atomis = reactant.atoms().iterator(); while (atomis.hasNext()) { IAtom atomi = atomis.next(); if (atomi.getFlag(CDKConstants.REACTIVE_CENTER) && reactant.getConnectedSingleElectronsCount(atomi) == 1) { hcg.getSpheres(reactant, atomi, 2, true); Iterator<IAtom> atomls = hcg.getNodesInSphere(2).iterator(); while (atomls.hasNext()) { IAtom atoml = atomls.next(); if (atoml != null && atoml.getFlag(CDKConstants.REACTIVE_CENTER) && !atoml.getFlag(CDKConstants.ISINRING) && (atoml.getFormalCharge() == CDKConstants.UNSET ? 0 : atoml.getFormalCharge()) == 0 && !atoml.getSymbol().equals(\"H\") && reactant.getMaximumBondOrder(atoml) == IBond.Order.SINGLE) { Iterator<IAtom> atomhs = reactant.getConnectedAtomsList(atoml).iterator(); while (atomhs.hasNext()) { IAtom atomh = atomhs.next(); if (reactant.getBond(atomh, atoml).getFlag(CDKConstants.REACTIVE_CENTER) && atomh.getFlag(CDKConstants.REACTIVE_CENTER) && atomh.getSymbol().equals(\"H\")) { ArrayList<IAtom> atomList = new ArrayList<IAtom>(); atomList.add(atomh); atomList.add(atomi); atomList.add(atoml); ArrayList<IBond> bondList = new ArrayList<IBond>(); bondList.add(reactant.getBond(atomh, atoml)); IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance( IAtomContainerSet.class); moleculeSet.addAtomContainer(reactant); IReaction reaction = mechanism.initiate(moleculeSet, atomList, bondList); if (reaction == null) continue; else setOfReactions.addReaction(reaction); } } } } } } return setOfReactions; }### Assistant: @Test public void testMapping() throws Exception { IReactionProcess type = new RadicalSiteHrAlphaReaction(); IAtomContainerSet setOfReactants = getExampleReactants(); IAtomContainer molecule = setOfReactants.getAtomContainer(0); List<IParameterReact> paramList = new ArrayList<IParameterReact>(); IParameterReact param = new SetReactionCenter(); param.setParameter(Boolean.FALSE); paramList.add(param); type.setParameterList(paramList); IReactionSet setOfReactions = type.initiate(setOfReactants, null); IAtomContainer product = setOfReactions.getReaction(2).getProducts().getAtomContainer(0); Assert.assertEquals(19, setOfReactions.getReaction(2).getMappingCount()); IAtom mappedProductA1 = (IAtom) ReactionManipulator.getMappedChemObject(setOfReactions.getReaction(2), molecule.getAtom(0)); Assert.assertEquals(mappedProductA1, product.getAtom(0)); IAtom mappedProductA2 = (IAtom) ReactionManipulator.getMappedChemObject(setOfReactions.getReaction(2), molecule.getAtom(6)); Assert.assertEquals(mappedProductA2, product.getAtom(6)); IAtom mappedProductA3 = (IAtom) ReactionManipulator.getMappedChemObject(setOfReactions.getReaction(2), molecule.getAtom(2)); Assert.assertEquals(mappedProductA3, product.getAtom(2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void triggered(@Nonnull final FeedCleanupTriggerEvent event) { getLog().debug(\"Cleanup event triggered: {}\", new Object[]{event}); queue.add(event); }### Assistant: @Test(expected = AssertionError.class) public void testTriggeredWhenUnavailable() { runner.setProperty(TriggerCleanup.CATEGORY_NAME, \"cat\"); runner.setProperty(TriggerCleanup.FEED_NAME, \"unavailable\"); ((TriggerCleanup) runner.getProcessor()).triggered(new FeedCleanupTriggerEvent(\"FEEDID\")); runner.run(); Assert.assertEquals(0, runner.getFlowFilesForRelationship(TriggerCleanup.REL_SUCCESS).size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object fromString(String str) { if (StringUtils.isNotBlank(str)) { ObjectMapper objectMapper = new ObjectMapper(); try { return objectMapper.readValue(str, Object.class); } catch (Exception e) { LOGGER.info(\"Failed to parse JSON [{}]: {}\", StringUtils.abbreviate(str, 32), ExceptionUtils.getRootCauseMessage(e)); return null; } } return null; }### Assistant: @Test void fromStringInvalidJSON() { assertNull(this.tool.fromString(\"This is not the JSON you are looking for...\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void addNodes(Node... nodes) { Collections.addAll(this.nodes, nodes); }### Assistant: @Test public void testSimpleProject() throws Exception { Project project = new Project(); Node node = new Node(\"db-1\", \"db-1.example.com\", \"psql\"); node.setTags(new String[]{\"a\", \"b\"}); node.setAttributes(ImmutableMap.of(\"key1\", \"val1\", \"key2\", \"val2\")); project.addNodes(node); project.addNodes(new Node(\"web-1\", \"web-1.example.com\", \"django\")); String actual = asXml(project); assertXMLEqual(actual, readResource(\"fixtures/project.xml\"), actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<QualifiedRecommendation> getModifiedRecommendations( File oldFile, File newFile, List<QualifiedRecommendation> originalRecommendations) { List<QualifiedRecommendation> sorted = new ArrayList<QualifiedRecommendation>(originalRecommendations); Collections.sort(sorted, COMPARATOR); Collections.reverse(sorted); List<QualifiedRecommendation> result = new ArrayList<>(sorted.size()); long recompressibleBytesRemaining = maxBytesToRecompress; for (QualifiedRecommendation originalRecommendation : sorted) { if (!originalRecommendation.getRecommendation().uncompressNewEntry) { result.add(originalRecommendation); } else { long bytesToRecompress = originalRecommendation.getNewEntry().getUncompressedSize(); if (recompressibleBytesRemaining - bytesToRecompress >= 0) { result.add(originalRecommendation); recompressibleBytesRemaining -= bytesToRecompress; } else { result.add( new QualifiedRecommendation( originalRecommendation.getOldEntry(), originalRecommendation.getNewEntry(), Recommendation.UNCOMPRESS_NEITHER, RecommendationReason.RESOURCE_CONSTRAINED)); } } } return result; }### Assistant: @Test public void testLimit_EdgeOverLargest() { long limit = REC_D_400K.getNewEntry().getUncompressedSize() + 1; TotalRecompressionLimiter limiter = new TotalRecompressionLimiter(limit); List<QualifiedRecommendation> expected = new ArrayList<QualifiedRecommendation>(); expected.add(REC_D_400K); expected.addAll(suppressed(REC_A_100K, REC_B_200K, REC_C_300K)); expected.addAll(ALL_IGNORED_RECS); assertEquivalence(expected, limiter.getModifiedRecommendations(OLD_FILE, NEW_FILE, ALL_RECS)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ActionResponse execute(MultiTimeQueryRequest parameter) { MultiTimeQueryResponse multiTimeQueryResponse = new MultiTimeQueryResponse(); multiTimeQueryResponse.setResponses(((MultiQueryResponse)action.execute(multiQueryRequest)).getResponses()); return multiTimeQueryResponse; }### Assistant: @Test public void testMultiTimeQuery() throws FoxtrotException, JsonProcessingException { Query query = new Query(); query.setTable(TestUtils.TEST_TABLE_NAME); ResultSort resultSort = new ResultSort(); resultSort.setOrder(ResultSort.Order.asc); resultSort.setField(\"_timestamp\"); query.setSort(resultSort); BetweenFilter betweenFilter = new BetweenFilter(\"_timestamp\", 1397658117000L, 1397658118005L, false); query.setFilters(Arrays.asList(betweenFilter)); Duration duration = Duration.days(1); MultiTimeQueryRequest multiTimeQueryRequest = new MultiTimeQueryRequest(1, duration, query); ActionResponse actionResponse = getQueryExecutor().execute(multiTimeQueryRequest); MultiTimeQueryResponse multiTimeQueryResponse = null; if(actionResponse instanceof MultiTimeQueryResponse) { multiTimeQueryResponse = (MultiTimeQueryResponse)actionResponse; } assertNotNull(multiTimeQueryResponse); QueryResponse queryResponse = (QueryResponse)multiTimeQueryResponse.getResponses() .get(\"1397658117000\"); assertEquals(9, queryResponse.getTotalHits()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean validate(Message data, Object context) { return validator.validate(data).isEmpty(); }### Assistant: @Test public void testValidatingQuery() { TestQuery testQuery = new TestQuery(\"1\"); SimpleDataValidator sqv = new SimpleDataValidator(); Assert.assertTrue(\"The query object is not valid.\", sqv.validate(testQuery, null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void checkKeyUniqueness(String key, String value, boolean isEncrypted) { if (StringUtils.isBlank(key) || StringUtils.isBlank(value)) { ProjectLogger.log( \"UserService:checkKeyUniqueness: Key or value is null. key = \" + key + \" value= \" + value, LoggerEnum.ERROR.name()); return; } String val = value; if (isEncrypted) { try { val = getEncryptionService().encryptData(val); } catch (Exception e) { ProjectLogger.log( \"UserService:checkKeyUniqueness: Exception occurred with error message = \" + e.getMessage(), e); } } Response result = getCassandraOperation().getRecordsByIndexedProperty(userDb.getKeySpace(), userDb.getTableName(), key, val); List<Map<String, Object>> userMapList = (List<Map<String, Object>>) result.get(JsonKey.RESPONSE); if (!userMapList.isEmpty()) { ResponseCode responseCode = null; if (JsonKey.EMAIL.equals(key)) { responseCode = ResponseCode.emailInUse; } else if (JsonKey.PHONE.equals(key)) { responseCode = ResponseCode.PhoneNumberInUse; } ProjectCommonException.throwClientErrorException(responseCode, null); } }### Assistant: @Test() public void testCheckKeyUniquenessWhenKeyValueIsUnique(){ try{ Response response=new Response(); List<Map<String, Object>> userMapList =new ArrayList<>(); response.put(JsonKey.RESPONSE,userMapList); when(cassandraOperation.getRecordsByIndexedProperty(userDb.getKeySpace(), userDb.getTableName(), \"key\", \"value\")).thenReturn(response); userService.checkKeyUniqueness(\"key\",\"value\",false); }catch (Exception e) { Assert.assertTrue(false); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Long time(RedisClusterNode node) { return helper.doInScope(TIME, () -> connection.time(node)); }### Assistant: @Test public void invokingTime() { commandCreatesNewSpan(RedisCommand.TIME, () -> getConnection().time(mockRedisClusterNode)); verify(mockRedisConnection()).time(mockRedisClusterNode); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AssessmentPackage importAssessmentPackageData(final File importSandboxDirectory, final MultipartFile multipartFile) throws AssessmentPackageDataImportException { Assert.notNull(importSandboxDirectory, \"importSandboxDirectory\"); Assert.notNull(multipartFile, \"multipartFile\"); AssessmentPackage assessmentPackage = null; final String contentType = ServiceUtilities.computeContentType(multipartFile); if (\"application/xml\".equals(contentType) || \"text/xml\".equals(contentType) || contentType.endsWith(\"+xml\")) { logger.debug(\"Import data uses a known XML MIME type {} so saving to {} and treating as XML\", contentType, importSandboxDirectory); assessmentPackage = importStandaloneXml(importSandboxDirectory, multipartFile); } else { final boolean zipSuccess = tryUnpackZipFile(importSandboxDirectory, multipartFile); if (zipSuccess) { logger.debug(\"Import data was successfully expanded as a ZIP file\"); assessmentPackage = processUnpackedZip(importSandboxDirectory); } else { logger.warn(\"Import data with MIME type {} was neither a supported XML MIME type nor a ZIP file (containing at least one entry)\", contentType); throw new AssessmentPackageDataImportException(ImportFailureReason.NOT_XML_OR_ZIP); } } logger.info(\"Successfully imported data for new {}\", assessmentPackage); return assessmentPackage; }### Assistant: @Test public void notContentPackage() throws Exception { final MultipartFile multipartFile = getThisUnitTestMultipartFile(\"uk/ac/ed/ph/qtiworks/services/NotContentPackage.zip\", \"application/zip\"); try { assessmentPackageFileImporter.importAssessmentPackageData(importSandboxDirectory, multipartFile); Assert.fail(\"Should have failed\"); } catch (final AssessmentPackageDataImportException e) { Assert.assertEquals(ImportFailureReason.NOT_CONTENT_PACKAGE, e.getFailure().getReason()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String trimZ(String str) { return ltrimZ(rtrimZ(str)); }### Assistant: @Test public void testTrimZ01() throws Exception { String input = \" TERASOLUNA \"; String result = StringUtil.trimZ(input); assertEquals(\"TERASOLUNA\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FromCopy setAttribute(final JsonPointer attributePath, final JsonValue attributeValue) { fromScratchBuilder.setAttribute(attributePath, attributeValue); return this; }### Assistant: @Test public void setAttribute() { underTestV1.setAttribute(ATTRIBUTE_PATH, ATTRIBUTE_VALUE); final Thing thing = underTestV1.build(); assertThat(thing).hasAttribute(ATTRIBUTE_PATH, ATTRIBUTE_VALUE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Mono<ClusterMembershipRevision<ClusterMember>> register(Function<ClusterMember, ClusterMembershipRevision<ClusterMember>> selfUpdate) { return reconciler.apply(current -> KubeRegistrationActions.registerLocal(context, current, selfUpdate).map(f -> f.apply(current))) .map(KubeClusterState::getLocalMemberRevision); }### Assistant: @Test public void testRegistrationConnectionErrorInRegistrationRequest() throws InterruptedException { kubeExecutors.failOnMembershipUpdate(new RuntimeException(\"Simulated membership update error\"), 1); try { connector.register(ClusterMemberGenerator::clusterMemberRegistrationRevision).block(); fail(\"Failure expected\"); } catch (Exception ignore) { } doRegister(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static FEEL_1_1Parser parse(FEELEventListenersManager eventsManager, String source, Map<String, Type> inputVariableTypes, Map<String, Object> inputVariables, Collection<FEELFunction> additionalFunctions, List<FEELProfile> profiles, FEELTypeRegistry typeRegistry) { CharStream input = CharStreams.fromString(source); FEEL_1_1Lexer lexer = new FEEL_1_1Lexer( input ); CommonTokenStream tokens = new CommonTokenStream( lexer ); FEEL_1_1Parser parser = new FEEL_1_1Parser( tokens ); ParserHelper parserHelper = new ParserHelper(eventsManager); additionalFunctions.forEach(f -> parserHelper.getSymbolTable().getBuiltInScope().define(f.getSymbol())); parser.setHelper(parserHelper); parser.setErrorHandler( new FEELErrorHandler() ); parser.removeErrorListeners(); parser.addErrorListener( new FEELParserErrorListener( eventsManager ) ); defineVariables( inputVariableTypes, inputVariables, parser ); if (typeRegistry != null) { parserHelper.setTypeRegistry(typeRegistry); } return parser; }### Assistant: @Test public void testAtLiteralDateAndTime() { String inputExpression = \"@\\\"2016-07-29T05:48:23\\\"\"; BaseNode bool = parse(inputExpression); assertThat(bool, is(instanceOf(AtLiteralNode.class))); assertThat(bool.getResultType(), is(BuiltInType.DATE_TIME)); assertLocation(inputExpression, bool); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public HttpResponse filterRequest(HttpRequest httpRequest, HttpMessageContents httpMessageContents, HttpMessageInfo httpMessageInfo) { for (EventDetector eventDetector: eventDetectors) { if (eventDetector.canDetectPredicate().test(httpRequest)) { try { Optional<Map<String, String>> optionalEvent = eventDetector.getConverter().convert(httpRequest); if (optionalEvent.isPresent()) { Map<String, String> event = optionalEvent.get(); recordingState.storeTestCaseStep(event); logger.info(\"Recorded event {}\", event); } } catch (UnsupportedEncodingException | MalformedURLException e) { logger.error(\"Error while trying to convert test case step\", e); } } } return null; }### Assistant: @Test public void doesNotAddRequestIfNotRequired() { HttpRequest httpRequest = mock(HttpRequest.class); when(httpRequest.getUri()).thenReturn(\"http: RecordingState recordingState = mock(RecordingState.class); Predicate<HttpRequest> httpRequestPredicate = mock(Predicate.class); when(httpRequestPredicate.test(httpRequest)).thenReturn(false); HttpRequestToTestCaseStepConverter httpRequestToTestCaseStepConverter = mock(HttpRequestToTestCaseStepConverter.class); EventDetector eventDetector = mock(EventDetector.class); when(eventDetector.canDetectPredicate()).thenReturn(httpRequestPredicate); when(eventDetector.getConverter()).thenReturn(httpRequestToTestCaseStepConverter); List<EventDetector> eventDetectors = Arrays.asList(eventDetector); RecordRequestFilter requestFilter = new RecordRequestFilter(recordingState, eventDetectors); requestFilter.filterRequest(httpRequest, mock(HttpMessageContents.class), mock(HttpMessageInfo.class)); verify(recordingState, never()).storeTestCaseStep(anyMap()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Adaptable> map(final ExternalMessage externalMessage) { final Optional<MessageHeaders> messageHeadersOptional = evaluateIncomingMessageHeaders(externalMessage, incomingMessageHeaders); if (messageHeadersOptional.isEmpty()) { return dittoMessageMapper.map(externalMessage); } final MessageHeaders messageHeaders = messageHeadersOptional.get(); return List.of(ProtocolFactory.newAdaptableBuilder(toTopicPath(messageHeaders)) .withPayload(toPayload(externalMessage, messageHeaders)) .withHeaders(retainContentTypeOnly(messageHeaders)) .build()); }### Assistant: @Test public void mapToTextMessage() { final Map<String, String> headers = Map.of( \"content-type\", \"text/plain\", \"ditto-message-subject\", \"hello/world\", \"ditto-message-thing-id\", \"thing:id\" ); final String payload = \"lorem ipsum dolor sit amet\"; final List<Adaptable> adaptables = underTest.map(ExternalMessageFactory.newExternalMessageBuilder(headers) .withText(payload) .build()); assertThat(adaptables).hasSize(1); final Signal<?> signal = ADAPTER.fromAdaptable(adaptables.get(0)); assertThat(signal).isInstanceOf(SendThingMessage.class); final SendThingMessage<?> sendThingMessage = (SendThingMessage<?>) signal; assertThat(sendThingMessage.getEntityId().toString()).isEqualTo(\"thing:id\"); assertThat(sendThingMessage.getMessage().getPayload().orElseThrow()).isEqualTo(payload); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T16> get16() { return getAndCast(16); }### Assistant: @Test void get16() { assertEquals(m16, instance.get16()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public UIComponent getSubmittedForm(FacesContext facesContext) { if (!facesContext.isPostback()) { return null; } for (Entry<String, String> entry : facesContext.getExternalContext().getRequestParameterMap().entrySet()) { final String name = entry.getKey(); final String value = entry.getValue(); if (isFormValueSubmitted(name, value)) { UIComponent component = findComponentFor(facesContext.getViewRoot(), name); UIComponent form = getNestingForm(component); return form; } } facesContext.addMessage(null, new FacesMessage(\"The form wasn't detected for the request\", \"The form wasn't detected for the request - rendering does not have to behave well\")); return null; }### Assistant: @Test public void when_getSubmittedForm_is_called_on_postback_and_no_matching_component_is_found_then_null_is_returned() { initializeRequestParameterMap(new HashMap<String, String>() { { put(\"same_but_no_clientId\", \"same_but_no_clientId\"); } }); UIViewRoot viewRoot = mock(UIViewRoot.class); when(facesContext.getViewRoot()).thenReturn(viewRoot); when(viewRoot.getFacetsAndChildren()).thenReturn(Arrays.asList(new UIComponent[] {}).iterator()); when(facesContext.isPostback()).thenReturn(true); UIComponent result = utils.getSubmittedForm(facesContext); assertNull(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ThingId of(final CharSequence thingId) { if (thingId instanceof ThingId) { return (ThingId) thingId; } return wrapInThingIdInvalidException(() -> new ThingId(DefaultNamespacedEntityId.of(thingId))); }### Assistant: @Test public void returnsCorrectNamespace() { softly.assertThat(ThingId.of(\"namespace\", \"name\").getNamespace()).isEqualTo(\"namespace\"); softly.assertThat(ThingId.of(\"namespace:name\").getNamespace()).isEqualTo(\"namespace\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void prependTo(@NotNull final RawSqlBuilder builder) { builder.prepend(')'); for (int i = mColumns.length - 1; i >= 0; i--) { mColumns[i].prependTo(builder); if (i > 0) { builder.prepend(','); } } builder.prepend('('); }### Assistant: @Test public void prependToWithMultipleColumns_prependsProperSql() { Column[] cs = {column(\"a\"), column(\"b\"), column(\"c\")}; ColumnsImpl columns = new ColumnsImpl(cs, mock(SqlPart.class)); RawSqlBuilder builder = new RawSqlBuilderImpl(); columns.prependTo(builder); assertThat(builder.toString(), is(\"(a,b,c)\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void setColumnWidth(int columnIndex, int width) { throw new UnsupportedOperationException(); }### Assistant: @Test(expected = UnsupportedOperationException.class) public void setColumnWidth() throws Exception { streamingSheet.setColumnWidth(0, 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void tryDeleteKey(String keyName) { try { deleteKey(keyName); } catch (IOException e) { LOG.debug(\"Ignoring error while deleting key {}\", keyName, e); } }### Assistant: @Test public void tryDeleteKeyShouldIgnoreUnknownExceptions() throws Exception { when(delete.execute()).thenThrow(INTERNAL_SERVER_ERROR); sakm.tryDeleteKey(\"foo\"); verify(iam.projects().serviceAccounts().keys()).delete(\"foo\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void delete(final Path path, final String comment) { try { deleteService.delete(path, comment); } catch (Exception e) { throw ExceptionUtilities.handleException(e); } }### Assistant: @Test public void checkDelete() { final Path path = mock(Path.class); final String comment = \"comment\"; service.delete(path, comment); verify(deleteService, times(1)).delete(eq(path), eq(comment)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<DeterministicKey> getKeys(KeyPurpose purpose, int numberOfKeys) { checkArgument(numberOfKeys > 0); lock.lock(); try { DeterministicKey parentKey; int index; switch (purpose) { case RECEIVE_FUNDS: case REFUND: issuedExternalKeys += numberOfKeys; index = issuedExternalKeys; parentKey = externalParentKey; break; case AUTHENTICATION: case CHANGE: issuedInternalKeys += numberOfKeys; index = issuedInternalKeys; parentKey = internalParentKey; break; default: throw new UnsupportedOperationException(); } List<DeterministicKey> lookahead = maybeLookAhead(parentKey, index, 0, 0); basicKeyChain.importKeys(lookahead); List<DeterministicKey> keys = new ArrayList<DeterministicKey>(numberOfKeys); for (int i = 0; i < numberOfKeys; i++) { ImmutableList<ChildNumber> path = HDUtils.append(parentKey.getPath(), new ChildNumber(index - numberOfKeys + i, false)); DeterministicKey k = hierarchy.get(path, false, false); checkForBitFlip(k); keys.add(k); } return keys; } finally { lock.unlock(); } }### Assistant: @Test public void getKeys() throws Exception { chain.getKey(KeyChain.KeyPurpose.RECEIVE_FUNDS); chain.getKey(KeyChain.KeyPurpose.CHANGE); chain.maybeLookAhead(); assertEquals(2, chain.getKeys(false).size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: NicGeoPoint calculateWaySnappedPoint(final NicGeoPoint point) { switch (mapMatchingMode) { case MAP_MATCHING_MODE_NONE: return point; case MAP_MATCHING_MODE_SIMPLE_WAY_SNAP: default: return calculateSimpleWaySnapPoint(point); } }### Assistant: @Test public void testNoMapMatchingType() { NicGeoPoint test = new NicGeoPointImpl(); assertTrue(test == userLocator.calculateWaySnappedPoint(test)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void injectObject(DependencyProvider dependencyProvider, Object instance, TypeToken<?> typeToken) { try { assignInjectableFields(dependencyProvider, instance, typeToken); callInjectableMethods(dependencyProvider, instance, typeToken); } catch (IllegalAccessException e) { throw new RuntimeException(e); } }### Assistant: @Test public void testWithInjectOnlyDirectInject() { prep(Inject.class); TestClassWithInjectParams testObject = new TestClassWithInjectParams(); mRealObjectMaker.injectObject( mDependencyProvider, testObject, TypeToken.of(TestClassWithInjectParams.class)); assertTestObjectNormal(testObject, TestClassWithInjectParams.class); verifyDependencyProviderCalls(runnableKey, runnableProviderKey); assertThat(testObject.mRunnable).isEqualTo(mRunnableMock); assertThat(testObject.mRunnableProvider).isEqualTo(mRunnableProviderMock); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void register(Object... rules) { Objects.requireNonNull(rules); for (Object rule : rules) { Objects.requireNonNull(rule); this.rules.add(RuleProxy.asRule(rule)); } }### Assistant: @Test public void register() { rules.register(new DummyRule()); assertThat(rules).hasSize(1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getPath() { return path; }### Assistant: @Test public void Should_beCreatedFromString() { IPath path = new Path(\"foo/bar\"); assertEquals(\"foo/bar\", path.getPath()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean check(int n) { return (n & 1) != 1; }### Assistant: @Test public void shouldReturnTrueIfNumberIsEven() { assertTrue(isEven.check(68)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @PublicEvolving public static <IN, OUT> TypeInformation<OUT> getMapReturnTypes(MapFunction<IN, OUT> mapInterface, TypeInformation<IN> inType) { return getMapReturnTypes(mapInterface, inType, null, false); }### Assistant: @Test public void testFunction() { RichMapFunction<String, Boolean> mapInterface = new RichMapFunction<String, Boolean>() { private static final long serialVersionUID = 1L; @Override public void setRuntimeContext(RuntimeContext t) { } @Override public void open(Configuration parameters) throws Exception { } @Override public RuntimeContext getRuntimeContext() { return null; } @Override public void close() throws Exception { } @Override public Boolean map(String record) throws Exception { return null; } }; TypeInformation<?> ti = TypeExtractor.getMapReturnTypes(mapInterface, BasicTypeInfo.STRING_TYPE_INFO); Assert.assertEquals(BasicTypeInfo.BOOLEAN_TYPE_INFO, ti); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ColorRGBA subtract(final float r, final float g, final float b, final float a, final ColorRGBA store) { ColorRGBA result = store; if (result == null) { result = new ColorRGBA(); } return result.set(getRed() - r, getGreen() - g, getBlue() - b, getAlpha() - a); }### Assistant: @Test public void testSubtract() { final ColorRGBA clr1 = new ColorRGBA(ColorRGBA.BLACK_NO_ALPHA); final ColorRGBA clr2 = new ColorRGBA(ColorRGBA.WHITE); clr1.subtractLocal(1, 2, 3, 4); assertEquals(new ColorRGBA(-1, -2, -3, -4), clr1); clr1.subtractLocal(-1, -2, -3, -4); assertEquals(ColorRGBA.BLACK_NO_ALPHA, clr1); clr1.zero(); clr1.subtractLocal(clr2); assertEquals(new ColorRGBA(-1, -1, -1, -1), clr1); clr1.zero(); final ColorRGBA clr3 = clr1.subtract(clr2, new ColorRGBA()); assertEquals(ColorRGBA.BLACK_NO_ALPHA, clr1); assertEquals(new ColorRGBA(-1, -1, -1, -1), clr3); final ColorRGBA clr4 = clr1.subtract(0, 0, 0, 1, null); assertEquals(ColorRGBA.BLACK_NO_ALPHA, clr1); assertEquals(new ColorRGBA(0, 0, 0, -1), clr4); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isMatched(final RangerAccessRequest request) { if(LOG.isDebugEnabled()) { LOG.debug(\"==> RangerIpMatcher.isMatched(\" + request + \")\"); } boolean ipMatched = true; if (_allowAny) { LOG.debug(\"isMatched: allowAny flag is true. Matched!\"); } else { String requestIp = extractIp(request); if (requestIp == null) { LOG.debug(\"isMatched: couldn't get ip address from request. Ok. Implicitly matched!\"); } else { ipMatched = isWildcardMatched(_wildCardIps, requestIp) || isExactlyMatched(_exactIps, requestIp); } } if(LOG.isDebugEnabled()) { LOG.debug(\"<== RangerIpMatcher.isMatched(\" + request+ \"): \" + ipMatched); } return ipMatched; }### Assistant: @Test public void testUnexpected() { RangerIpMatcher ipMatcher = createMatcher(new String[]{\"1.2.3.*\"} ); Assert.assertTrue(ipMatcher.isMatched(createRequest(\"1.2.3.123567\"))); Assert.assertTrue(ipMatcher.isMatched(createRequest(\"1.2.3..123567\"))); Assert.assertTrue(ipMatcher.isMatched(createRequest(\"1.2.3.boo\"))); Assert.assertTrue(ipMatcher.isMatched(createRequest(\"1.2.3.\"))); ipMatcher = createMatcher(new String[]{\"1.*.3.4\"} ); Assert.assertFalse(ipMatcher.isMatched(createRequest(\"1.3.3.4\"))); Assert.assertFalse(ipMatcher.isMatched(createRequest(\"1.1.3.4\"))); Assert.assertTrue(ipMatcher.isMatched(createRequest(\"1.*.3.4\"))); ipMatcher = createMatcher(new String[]{\"99:a9:b9:c9:*\"} ); Assert.assertTrue(ipMatcher.isMatched(createRequest(\"99:a9:b9:c9:*\"))); Assert.assertTrue(ipMatcher.isMatched(createRequest(\"99:a9:b9:c9:1.3.4\"))); Assert.assertTrue(ipMatcher.isMatched(createRequest(\"99:a9:b9:c9: <:-) \"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String create(IAtomContainer molecule) throws CDKException { return create(molecule, new int[molecule.getAtomCount()]); }### Assistant: @Test public void testSFBug1014344_1() throws Exception { String filename_cml = \"data/cml/bug1014344-1.cml\"; String filename_mol = \"data/mdl/bug1014344-1.mol\"; InputStream ins1 = this.getClass().getClassLoader().getResourceAsStream(filename_cml); InputStream ins2 = this.getClass().getClassLoader().getResourceAsStream(filename_mol); CMLReader reader1 = new CMLReader(ins1); IChemFile chemFile = (IChemFile) reader1.read(new ChemFile()); IChemSequence seq = chemFile.getChemSequence(0); IChemModel model = seq.getChemModel(0); IAtomContainer mol1 = model.getMoleculeSet().getAtomContainer(0); MDLReader reader2 = new MDLReader(ins2); IAtomContainer mol2 = reader2.read(new AtomContainer()); addImplicitHydrogens(mol1); addImplicitHydrogens(mol2); SmilesGenerator sg = new SmilesGenerator(); String moleculeSmile1 = sg.create(mol1); String moleculeSmile2 = sg.create(mol2); Assert.assertEquals(moleculeSmile1, moleculeSmile2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static InstanceIdentifier<Table> generateFlowTableInstanceIdentifier(final NodeConnectorRef nodeConnectorRef, final TableKey flowTableKey) { return generateNodeInstanceIdentifier(nodeConnectorRef).builder().augmentation(FlowCapableNode.class) .child(Table.class, flowTableKey).build(); }### Assistant: @Test public void testGenerateFlowTableInstanceIdentifier() throws Exception { NodeConnectorRef ncRef = new NodeConnectorRef( InstanceIdentifier.builder(Nodes.class).child(Node.class).child(NodeConnector.class).build()); InstanceIdentifier<Table> tableInsId = InstanceIdentifierUtils.generateFlowTableInstanceIdentifier(ncRef, new TableKey(NUM_ID_1)); assertNotNull(tableInsId); assertEquals(NUM_ID_1, tableInsId.firstKeyOf(Table.class, TableKey.class).getId()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isInCurrentGroup(Long userId, int currentGroupId) throws SQLException { List<UserGroup> urgroups = userGroupDao.getUserGroupByUserId(userId); if (CollectionUtils.isNotEmpty(urgroups) && urgroups.stream().anyMatch(ug -> ug.getUser_id() == currentGroupId)) { return true; } return false; }### Assistant: @Test public void isInCurrentGroupTest() throws Exception { Assert.assertTrue(groupService.isInSuperGroup(\"1\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String serialize(Boolean value, Charset charset) { return value ? trueString : falseString; }### Assistant: @Test public void shouldSerializeFalseToCustomFalseUsingCustomBooleanFormat() throws Exception { Serializer toTest = newToTest(); OutputStream out = new ByteArrayOutputStream(); toTest.serialize(false, charset, out); assertEquals(\"0\", out.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Tensor_F64 create(int... shape) { return new Tensor_F64(shape); }### Assistant: @Test public void create() { Tensor_F64 T = new Tensor_F64(); Tensor_F64 F = T.create(2,5); assertFalse(F.subtensor); assertTrue(F.isShape(2,5)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void start() throws InterruptedException { log.debug(\"Starting receiver\"); CountDownLatch latch = new CountDownLatch(1); Flux.from(offramp.rebalances()).any(not(Set::isEmpty)).subscribe(b -> latch.countDown()); offramp.messages().subscribe(this); Commits.fromMessages(commitProcessor, Duration.ofSeconds(1)).flatMap(offramp::commit).subscribe(); if (!latch.await(30, SECONDS)) { throw new RuntimeException(\"Timed out waiting for a rebalance event to start the receiver\"); } log.info(\"Receiver started\"); }### Assistant: @Test public void worker_passes_to_context() throws Exception { try (Receiver receiver = new Receiver(metrics, contextManager, origin, offramp)) { receiver.start(); verify(context1).messageReceived(message1); verify(context2).messageReceived(message2); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public File createMergedManifest(File[] manifestFiles, Date creationTime, File productDir, long productSize) throws IOException, TransformerException, PDUStitchingException, ParserConfigurationException { final Document document = mergeManifests(manifestFiles, creationTime, productDir, productSize); final File manifestFile = new File(productDir, \"xfdumanifest.xml\"); final TransformerFactory transformerFactory = TransformerFactory.newInstance(); transformerFactory.setAttribute(\"indent-number\", 2); final Transformer transformer = transformerFactory.newTransformer(); transformer.setOutputProperty(OutputKeys.INDENT, \"yes\"); transformer.setOutputProperty(\"{http: transformer.setOutputProperty(OutputKeys.STANDALONE, \"no\"); transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\"); final DOMSource domSource = new DOMSource(document); final StringWriter stringWriter = new StringWriter(); final StreamResult streamResult = new StreamResult(stringWriter); transformer.transform(domSource, streamResult); String docAsString = stringWriter.toString(); docAsString = docAsString.replace(\" standalone=\\\"no\\\"\", \"\"); final FileWriter fileWriter = new FileWriter(manifestFile); fileWriter.write(docAsString); fileWriter.close(); return manifestFile; }### Assistant: @Test public void testMergeManifests_MultipleFiles() throws IOException, ParserConfigurationException, TransformerException, PDUStitchingException { final Date now = Calendar.getInstance().getTime(); final File productDir = new File(ManifestMergerTest.class.getResource(\"\").getFile()); final File manifestFile = manifestMerger.createMergedManifest(getManifestFiles(), now, productDir, 5000); assertTrue(manifestFile.exists()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static final List<String> allDetails(boolean compact, List<? extends IProcessingFactory> facs, List<? extends IDiagnosticsFactory> diags) { LinkedHashSet<String> dic = new LinkedHashSet<>(); for (IProcessingFactory fac : facs) { Map<String, Class> odic = fac.getOutputDictionary(compact); odic.forEach((s, c) -> { if (c != TsData.class && MatrixFormatter.canProcess(c) && !dic.contains(s)) { dic.add(s); } }); } diags.stream().filter(d -> d.isEnabled()).forEach( z -> { String lz = z.getName().toLowerCase(); z.getTestDictionary().forEach(t -> dic.add(InformationSet.concatenate(GenericSaProcessingFactory.DIAGNOSTICS, lz, ((String) t).toLowerCase()))); } ); return dic.stream().collect(Collectors.toList()); }### Assistant: @Test @Ignore public void testAllDettails() { for (String s : BasicConfiguration.allDetails(false, facs, diags)) System.out.println(s); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int hashCode() { return HashCodeBuilder.reflectionHashCode(this); }### Assistant: @Test public void hashCodeTest() throws Exception { CompetitionGroupApiEntity otherCompetitionGroupApiEntity = ApiEntityTestUtils.fullCompetitionGroup(); Assertions.assertThat(competitionGroupApiEntity.hashCode()) .isEqualTo(otherCompetitionGroupApiEntity.hashCode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void extractZipArchive( File zipFile, File targetDirectory ) throws IOException { extractZipArchive( zipFile, targetDirectory, null, null ); }### Assistant: @Test( expected = IllegalArgumentException.class ) public void testExtractZipArchive_illegalArgument_4() throws Exception { File existingFile = new File( System.getProperty( \"java.io.tmpdir\" )); File unexistingFile = new File( existingFile, UUID.randomUUID().toString()); Assert.assertFalse( unexistingFile.exists()); Utils.extractZipArchive( existingFile, unexistingFile ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: Future<Void> sendMessages(KafkaProducer<String, String> kafkaProducer, List<KafkaProducerRecord<String, String>> messages){ Future<Void> future = Future.future(); Future<Void> f = Future.succeededFuture(); messages.stream().reduce(f, (f1, message) -> f1.compose(ignore -> KafkaMessageSender.this.sendMessage(kafkaProducer, message)), (voidFuture, voidFuture2) -> null ).setHandler(res -> { if(res.succeeded()) { future.complete(); } else { future.fail(res.cause()); } }); return future; }### Assistant: @Test public void sendSingleMessageWithoutKey(TestContext context) throws ValidationException { Async async = context.async(); String topic = \"myTopic\"; final List<KafkaProducerRecord<String, String>> records = buildRecords(topic, Buffer.buffer(buildSingleRecordPayload(null).encode())); doAnswer(invocation -> { Handler<AsyncResult<RecordMetadata>> handler = (Handler<AsyncResult<RecordMetadata>>) invocation.getArguments()[1]; handler.handle(Future.succeededFuture(new RecordMetadata(1,1,1,1, topic))); return null; }).when(producer).write(any(KafkaProducerRecord.class), any()); kafkaMessageSender.sendMessages(producer, records).setHandler(event -> { context.assertTrue(event.succeeded()); async.complete(); }); Mockito.verify(producer, times(1)).write(eq(records.get(0)), any()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Tuple2<String, PicOut> convertToPicOut(Tuple2<String, Iterable<Reference>> srcDocIdReferences) { Preconditions.checkNotNull(srcDocIdReferences); Preconditions.checkNotNull(srcDocIdReferences._1()); Preconditions.checkNotNull(srcDocIdReferences._2()); String srcDocId = srcDocIdReferences._1(); PicOut.Builder picOutB = PicOut.newBuilder(); picOutB.setDocId(srcDocId); for (Reference reference : srcDocIdReferences._2()) { picOutB.addRefs(reference); } return new Tuple2<>(srcDocId, picOutB.build()); }### Assistant: @Test(expectedExceptions=NullPointerException.class) public void convertToPicOut_Null_refs() { Tuple2<String, Iterable<Reference>> srcDocIdReferences = new Tuple2<>(\"XYZ\", null); referenceToPicOutConverter.convertToPicOut(srcDocIdReferences); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CompletableFuture<LanderConfiguration> run() { CompletableFuture<?> anyException = new CompletableFuture<>(); List<CompletableFuture<LanderConfiguration>> landerFutures = landers.stream().map(Lander::run).collect(toList()); landerFutures.forEach(f -> f.exceptionally(t -> { landerFutures.forEach(lander -> lander.cancel(true)); anyException.completeExceptionally(t); return null; })); CompletableFuture<Void> allSucceed = runAsync(() -> landerFutures.forEach(CompletableFuture::join)); return anyOf(anyException, allSucceed).thenApply(x -> landerConfig); }### Assistant: @Test public void failFast() throws Exception { future1.completeExceptionally(new Exception()); future2.completeExceptionally(new Exception()); try { underTest.run().join(); fail(); } catch (Exception ignore) {} assertThat(future1.isCancelled(), is(false)); assertThat(future2.isCancelled(), is(false)); assertThat(future3.isCancelled(), is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<NitfAttribute<ImageSegment>> getAttributes() { return Collections.unmodifiableList(ATTRIBUTES); }### Assistant: @Test public void testImageAttributes() { ImageAttribute.getAttributes() .forEach( attribute -> assertThat(attribute.getShortName(), is(org.hamcrest.Matchers.notNullValue()))); assertThat( ImageAttribute.IMAGE_COMMENT_1_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(COMMENT_1)); assertThat( ImageAttribute.IMAGE_COMMENT_2_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(COMMENT_2)); assertThat( ImageAttribute.IMAGE_COMMENT_3_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(COMMENT_3)); assertThat( ImageAttribute.IMAGE_COMMENT_4_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(COMMENT_4)); assertThat( ImageAttribute.IMAGE_COMMENT_5_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(COMMENT_5)); assertThat( ImageAttribute.IMAGE_COMMENT_6_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(COMMENT_6)); assertThat( ImageAttribute.IMAGE_COMMENT_7_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(COMMENT_7)); assertThat( ImageAttribute.IMAGE_COMMENT_8_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(COMMENT_8)); assertThat( ImageAttribute.IMAGE_COMMENT_9_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(COMMENT_9)); assertThat( ImageAttribute.NITF_TARGET_IDENTIFIER_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(nullValue())); assertThat( ImageAttribute.ISR_TARGET_IDENTIFIER_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(nullValue())); assertThat( ImageAttribute.TARGET_IDENTIFIER_COUNTRY_CODE_ATTRIBUTE .getAccessorFunction() .apply(imageSegment), is(nullValue())); assertThat( ImageAttribute.TARGET_IDENTIFIER_COUNTRY_CODE_ATTRIBUTE .getAccessorFunction() .apply(imageSegment), is(nullValue())); assertThat( ImageAttribute.IMAGE_DATE_AND_TIME_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(nullValue())); assertThat( ImageAttribute.IMAGE_IDENTIFIER_2_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(nullValue())); assertThat( ImageAttribute.NUMBER_OF_SIGNIFICANT_ROWS_IN_IMAGE_ATTRIBUTE .getAccessorFunction() .apply(imageSegment), is(0L)); assertThat( ImageAttribute.NUMBER_OF_SIGNIFICANT_COLUMNS_IN_IMAGE_ATTRIBUTE .getAccessorFunction() .apply(imageSegment), is(0L)); assertThat( ImageAttribute.IMAGE_SOURCE_ATTRIBUTE.getAccessorFunction().apply(imageSegment), is(nullValue())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @PublishNotificationMessages @Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void completeStorageUnitExpiration(BusinessObjectDataRestoreDto businessObjectDataRestoreDto) { completeStorageUnitExpirationImpl(businessObjectDataRestoreDto); }### Assistant: @Test public void testCompleteStorageUnitExpiration() { BusinessObjectDataKey businessObjectDataKey = new BusinessObjectDataKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, SUBPARTITION_VALUES, DATA_VERSION); BusinessObjectDataRestoreDto businessObjectDataRestoreDto = new BusinessObjectDataRestoreDto(businessObjectDataKey, STORAGE_NAME, S3_ENDPOINT, S3_BUCKET_NAME, S3_KEY_PREFIX, NO_STORAGE_UNIT_STATUS, NO_STORAGE_UNIT_STATUS, Arrays.asList(new StorageFile(S3_KEY, FILE_SIZE, ROW_COUNT)), NO_EXCEPTION, ARCHIVE_RETRIEVAL_OPTION); BusinessObjectDataEntity businessObjectDataEntity = new BusinessObjectDataEntity(); StorageUnitStatusEntity newStorageUnitStatusEntity = new StorageUnitStatusEntity(); newStorageUnitStatusEntity.setCode(StorageUnitStatusEntity.ARCHIVED); StorageUnitStatusEntity oldStorageUnitStatusEntity = new StorageUnitStatusEntity(); oldStorageUnitStatusEntity.setCode(StorageUnitStatusEntity.EXPIRING); StorageUnitEntity storageUnitEntity = new StorageUnitEntity(); storageUnitEntity.setStatus(oldStorageUnitStatusEntity); when(businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey)).thenReturn(businessObjectDataEntity); when(storageUnitDaoHelper.getStorageUnitEntity(STORAGE_NAME, businessObjectDataEntity)).thenReturn(storageUnitEntity); doAnswer(new Answer<Void>() { public Void answer(InvocationOnMock invocation) { StorageUnitEntity storageUnitEntity = (StorageUnitEntity) invocation.getArguments()[0]; storageUnitEntity.setStatus(newStorageUnitStatusEntity); return null; } }).when(storageUnitDaoHelper).updateStorageUnitStatus(storageUnitEntity, StorageUnitStatusEntity.ARCHIVED, StorageUnitStatusEntity.ARCHIVED); expireRestoredBusinessObjectDataHelperServiceImpl.completeStorageUnitExpiration(businessObjectDataRestoreDto); verify(businessObjectDataDaoHelper).getBusinessObjectDataEntity(businessObjectDataKey); verify(storageUnitDaoHelper).getStorageUnitEntity(STORAGE_NAME, businessObjectDataEntity); verify(storageUnitDaoHelper).updateStorageUnitStatus(storageUnitEntity, StorageUnitStatusEntity.ARCHIVED, StorageUnitStatusEntity.ARCHIVED); verifyNoMoreInteractionsHelper(); assertEquals(StorageUnitStatusEntity.ARCHIVED, businessObjectDataRestoreDto.getNewStorageUnitStatus()); assertEquals(StorageUnitStatusEntity.EXPIRING, businessObjectDataRestoreDto.getOldStorageUnitStatus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Optional<String> resolve(final TopicPath topicPath, final String placeholder) { ConditionChecker.argumentNotEmpty(placeholder, \"placeholder\"); switch (placeholder) { case NAMESPACE_PLACEHOLDER: return Optional.of(topicPath.getNamespace()); case ENTITYID_PLACEHOLDER: return Optional.of(topicPath.getId()); case GROUP_PLACEHOLDER: return Optional.of(topicPath.getGroup().getName()); case CHANNEL_PLACEHOLDER: return Optional.of(topicPath.getChannel().getName()); case CRITERION_PLACEHOLDER: return Optional.of(topicPath.getCriterion().getName()); case ACTION_PLACEHOLDER: return topicPath.getAction().map(TopicPath.Action::getName); case SUBJECT_PLACEHOLDER: return topicPath.getSubject(); case ACTION_OR_SUBJECT_PLACEHOLDER: return Optional.ofNullable( topicPath.getSubject() .orElseGet(() -> topicPath.getAction().map(TopicPath.Action::getName).orElse(null) ) ); case FULL_PLACEHOLDER: return Optional.of(topicPath.getPath()); default: return Optional.empty(); } }### Assistant: @Test public void testReplaceActionOrSubjectWithWeirdSubject() { assertThat(UNDER_TEST.resolve(KNOWN_TOPIC_PATH_SUBJECT2, \"action-subject\")).contains(KNOWN_SUBJECT2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object getReference() { if (usesFactory) { return ServiceFactory.class.cast(reference).getService(bundle, registration); } return reference; }### Assistant: @Test void prototype() { final ServiceReferenceImpl<Object> ref = new ServiceReferenceImpl<>(new Hashtable<>(), null, new PrototypeServiceFactory<SomeService>() { @Override public SomeService getService(final Bundle bundle, final ServiceRegistration<SomeService> registration) { return new SomeService(); } @Override public void ungetService(final Bundle bundle, final ServiceRegistration<SomeService> registration, final SomeService service) { } }); assertNotSame(ref.getReference(), ref.getReference()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isCrlOlderThan24Hours() { return System.currentTimeMillis() >= lastUpdate + 24 * 60 * 60 * 1000; }### Assistant: @Test @DisplayName(\"returns true when last CRL update was within 24 hours\") void crlIsOlderThan24HoursReturnTrue() { X509CRL x509CRLMock = Mockito.mock(X509CRL.class); CrlDao crlDao = new CrlDao(x509CRLMock, LAST_UPDATE_TIME_OLDER_24H); boolean isCrlOlderThan24Hours = crlDao.isCrlOlderThan24Hours(); Assertions.assertTrue(isCrlOlderThan24Hours); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getImageURL(final Pair<String, byte[]> imageDetails) { if (imageDetails == null) { logger.error(\"Cannot fetch the Image URL if the details of the image is not present\"); return null; } String imageID = imageDetails.getLeft(); if (imageID == null) { logger.error(\"Cannot fetch the Image URL if the image ID is not present\"); return null; } String template = config.getValue(AuditNotifier.Property.AUDIT_METRIC_IMAGE_URL_TEMPLATE.getName(), AuditNotifier.Property.AUDIT_METRIC_IMAGE_URL_TEMPLATE.getDefaultValue()); return template.replaceAll(\"\\\\$imageID\\\\$\", imageID); }### Assistant: @Test public void testGetImageUrlWhenImageIDIsNull() { String imageURL = imageDataRetriever.getImageURL(Pair.of(null, null)); assertEquals(imageURL, null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public StorageFileEntity getStorageFileEntity(String storageName, String filePath) throws ObjectNotFoundException, IllegalArgumentException { StorageFileEntity storageFileEntity = storageFileDao.getStorageFileByStorageNameAndFilePath(storageName, filePath); if (storageFileEntity == null) { throw new ObjectNotFoundException(String.format(\"Storage file \\\"%s\\\" doesn't exist in \\\"%s\\\" storage.\", filePath, storageName)); } return storageFileEntity; }### Assistant: @Test public void testGetStorageFileEntityByStorageUnitEntityAndFilePathWithNullStorageFileEntity() { BusinessObjectDataKey businessObjectDataKey = new BusinessObjectDataKey(NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, SUBPARTITION_VALUES, DATA_VERSION); StorageEntity storageEntity = new StorageEntity(); storageEntity.setName(STORAGE_NAME); StorageUnitEntity storageUnitEntity = new StorageUnitEntity(); storageUnitEntity.setStorage(storageEntity); storageUnitEntity.setDirectoryPath(DIRECTORY_PATH); String filePath = TEST_S3_KEY_PREFIX + \"/\" + LOCAL_FILE; when(storageFileDao.getStorageFileByStorageUnitEntityAndFilePath(storageUnitEntity, filePath)).thenReturn(null); try { storageFileDaoHelper.getStorageFileEntity(storageUnitEntity, filePath, businessObjectDataKey); fail(); } catch (ObjectNotFoundException objectNotFoundException) { assertThat(\"Exception message not equal to expected exception message.\", objectNotFoundException.getMessage(), is(String .format(\"Storage file \\\"%s\\\" doesn't exist in \\\"%s\\\" storage. Business object data: {%s}\", filePath, storageUnitEntity.getStorage().getName(), businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)))); } verify(storageFileDao).getStorageFileByStorageUnitEntityAndFilePath(storageUnitEntity, filePath); verify(businessObjectDataHelper, times(2)).businessObjectDataKeyToString(businessObjectDataKey); verifyNoMoreInteractionsHelper(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void doFilterInternal(@NonNull final HttpServletRequest request, @NonNull final HttpServletResponse response, @NonNull final FilterChain chain) throws ServletException, IOException { Claims claims = null; String token = \"\"; if (!RequestMethod.OPTIONS.toString().equals(request.getMethod())) { final String authHeader = request.getHeader(HEADER_AUTHORIZATION); if (authHeader == null || !authHeader.startsWith(BEARER_PREFIX)) { LOGGER.info(\"Missing or invalid Authorization header.\"); claims = new DefaultClaims().setSubject(SUBJECT_ANONYMOUS); } else { try { token = authHeader.substring(BEARER_PREFIX.length()); claims = Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody(); } catch (final JwtException e) { LOGGER.warn(\"Unable to get claims from bearer token: {}\", e.getMessage()); } if (claims == null || claims.getSubject() == null) { claims = new DefaultClaims().setSubject(SUBJECT_ANONYMOUS); } } request.setAttribute(JWT_ATTRIBUTE, claims); response.setHeader(JWT_TOKEN, token); response.setHeader(HEADER_CLAIMS, claims.toString()); response.setHeader(HEADER_CLAIMS_SUBJECT, claims.getSubject()); response.setHeader(HEADER_CLAIMS_USER_ID, claims.getId()); } chain.doFilter(request, response); }### Assistant: @Test public void testEmptyCredentials() throws ServletException, IOException { Mockito.when(mockHttpServletRequest.getHeader(JwtFilter.HEADER_AUTHORIZATION)) .thenReturn(HEADER_EMPTY_CREDENTIALS); jwtFilter.doFilterInternal(mockHttpServletRequest, mockHttpServletResponse, mockFilterChain); Mockito.verify(mockHttpServletRequest).getMethod(); Mockito.verify(mockHttpServletRequest).setAttribute(JwtFilter.JWT_ATTRIBUTE, new DefaultClaims().setSubject(JwtFilter.SUBJECT_ANONYMOUS)); Mockito.verify(mockHttpServletResponse).setHeader(JwtFilter.JWT_TOKEN, \"eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6IiIsImlhdCI6MH0.nEBg6Bj7PLGALFT2rs4wDfhvUfA91b7XLNog029crUA\"); Mockito.verify(mockHttpServletRequest).getHeader(JwtFilter.HEADER_AUTHORIZATION); Mockito.verify(mockHttpServletResponse).setHeader(JwtFilter.HEADER_CLAIMS_SUBJECT, JwtFilter.SUBJECT_ANONYMOUS); Mockito.verify(mockFilterChain).doFilter(mockHttpServletRequest, mockHttpServletResponse); Mockito.verify(mockHttpServletResponse, Mockito.times(4)).setHeader(ArgumentMatchers.anyString(), ArgumentMatchers.any()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping( value = {\"/get_DCAEUUIDDataByName\"}, method = {RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_VALUE) public void getDCAEUUIDDictionaryByNameEntityData(HttpServletResponse response) { DictionaryUtils utils = getDictionaryUtilsInstance(); utils.getDataByEntity(response, dcaeUUIDDatas, \"name\", DcaeUuid.class); }### Assistant: @Test public void testGetDCAEUUIDDictionaryByNameEntityData() { logger.info(\"testGetDCAEUUIDDictionaryByNameEntityData: Entering\"); MockHttpServletResponse response = new MockHttpServletResponse(); controller.getDCAEUUIDDictionaryByNameEntityData(response); try { assertTrue(response.getContentAsString() != null && response.getContentAsString().contains(\"dcaeUUIDDictionaryDatas\")); logger.info(\"response.getContentAsString(): \" + response.getContentAsString()); } catch (UnsupportedEncodingException e) { fail(\"Exception: \" + e); } logger.info(\"testGetDCAEUUIDDictionaryByNameEntityData: exit\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void convert(FSConfigToCSConfigConverterParams params) throws Exception { validateParams(params); this.clusterResource = getClusterResource(params); this.convertPlacementRules = params.isConvertPlacementRules(); this.outputDirectory = params.getOutputDirectory(); prepareOutputFiles(params.isConsole()); loadConversionRules(params.getConversionRulesConfig()); Configuration inputYarnSiteConfig = getInputYarnSiteConfig(params); handleFairSchedulerConfig(params, inputYarnSiteConfig); convert(inputYarnSiteConfig); }### Assistant: @Test public void testQueueMaxChildCapacityNotSupported() throws Exception { expectedException.expect(UnsupportedPropertyException.class); expectedException.expectMessage(\"test\"); Mockito.doThrow(new UnsupportedPropertyException(\"test\")) .when(ruleHandler).handleMaxChildCapacity(); converter.convert(config); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DescriptorValue calculate(IAtomContainer container) { if (!GeometryUtil.has3DCoordinates(container)) return getDummyDescriptorValue(new CDKException(\"Molecule must have 3D coordinates\")); IsotopeFactory factory = null; double mass1; double mass2; try { factory = Isotopes.getInstance(); } catch (Exception e) { logger.debug(e); } double sum = 0; for (int i = 0; i < container.getBondCount(); i++) { IBond bond = container.getBond(i); if (bond.getAtomCount() != 2) { return getDummyDescriptorValue(new CDKException(\"GravitationalIndex: Only handles 2 center bonds\")); } mass1 = factory.getMajorIsotope(bond.getBegin().getSymbol()).getMassNumber(); mass2 = factory.getMajorIsotope(bond.getEnd().getSymbol()).getMassNumber(); Point3d p1 = bond.getBegin().getPoint3d(); Point3d p2 = bond.getEnd().getPoint3d(); double x1 = p1.x; double y1 = p1.y; double z1 = p1.z; double x2 = p2.x; double y2 = p2.y; double z2 = p2.z; double dist = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2); sum += (mass1 * mass2) / dist; } double heavysum = 0; for (int i = 0; i < container.getBondCount(); i++) { IBond b = container.getBond(i); if (b.getAtomCount() != 2) { return getDummyDescriptorValue(new CDKException(\"GravitationalIndex: Only handles 2 center bonds\")); } if (b.getBegin().getAtomicNumber() == IElement.H || b.getEnd().getAtomicNumber() == IElement.H) continue; mass1 = factory.getMajorIsotope(b.getBegin().getSymbol()).getMassNumber(); mass2 = factory.getMajorIsotope(b.getEnd().getSymbol()).getMassNumber(); Point3d point0 = b.getBegin().getPoint3d(); Point3d point1 = b.getEnd().getPoint3d(); double x1 = point0.x; double y1 = point0.y; double z1 = point0.z; double x2 = point1.x; double y2 = point1.y; double z2 = point1.z; double dist = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2); heavysum += (mass1 * mass2) / dist; } ArrayList<Integer> x = new ArrayList<Integer>(); for (int i = 0; i < container.getAtomCount(); i++) { if (container.getAtom(i).getAtomicNumber() != IElement.H) x.add(i); } int npair = x.size() * (x.size() - 1) / 2; pair[] p = new pair[npair]; for (int i = 0; i < npair; i++) p[i] = new pair(); int pcount = 0; for (int i = 0; i < x.size() - 1; i++) { for (int j = i + 1; j < x.size(); j++) { int present = 0; int a = x.get(i); int b = x.get(j); for (int k = 0; k < pcount; k++) { if ((p[k].x == a && p[k].y == b) || (p[k].y == a && p[k].x == b)) present = 1; } if (present == 1) continue; p[pcount].x = a; p[pcount].y = b; pcount += 1; } } double allheavysum = 0; for (pair aP : p) { int atomNumber1 = aP.x; int atomNumber2 = aP.y; mass1 = factory.getMajorIsotope(container.getAtom(atomNumber1).getSymbol()).getMassNumber(); mass2 = factory.getMajorIsotope(container.getAtom(atomNumber2).getSymbol()).getMassNumber(); double x1 = container.getAtom(atomNumber1).getPoint3d().x; double y1 = container.getAtom(atomNumber1).getPoint3d().y; double z1 = container.getAtom(atomNumber1).getPoint3d().z; double x2 = container.getAtom(atomNumber2).getPoint3d().x; double y2 = container.getAtom(atomNumber2).getPoint3d().y; double z2 = container.getAtom(atomNumber2).getPoint3d().z; double dist = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2); allheavysum += (mass1 * mass2) / dist; } DoubleArrayResult retval = new DoubleArrayResult(9); retval.add(heavysum); retval.add(Math.sqrt(heavysum)); retval.add(Math.pow(heavysum, 1.0 / 3.0)); retval.add(sum); retval.add(Math.sqrt(sum)); retval.add(Math.pow(sum, 1.0 / 3.0)); retval.add(allheavysum); retval.add(Math.sqrt(allheavysum)); retval.add(Math.pow(allheavysum, 1.0 / 3.0)); return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval, getDescriptorNames()); }### Assistant: @Test public void testGravitationalIndex() throws ClassNotFoundException, CDKException, java.lang.Exception { String filename = \"data/hin/gravindex.hin\"; InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename); ISimpleChemObjectReader reader = new HINReader(ins); ChemFile content = (ChemFile) reader.read((ChemObject) new ChemFile()); List cList = ChemFileManipulator.getAllAtomContainers(content); IAtomContainer ac = (IAtomContainer) cList.get(0); DoubleArrayResult retval = (DoubleArrayResult) descriptor.calculate(ac).getValue(); Assert.assertEquals(1756.5060703860984, retval.get(0), 0.00000001); Assert.assertEquals(41.91069159994975, retval.get(1), 0.00000001); Assert.assertEquals(12.06562671430088, retval.get(2), 0.00000001); Assert.assertEquals(1976.6432599699767, retval.get(3), 0.00000001); Assert.assertEquals(44.45945636161082, retval.get(4), 0.00000001); Assert.assertEquals(12.549972243701887, retval.get(5), 0.00000001); Assert.assertEquals(4333.097373073368, retval.get(6), 0.00000001); Assert.assertEquals(65.82626658920714, retval.get(7), 0.00000001); Assert.assertEquals(16.302948232909483, retval.get(8), 0.00000001); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static PathogenicityData toPathogenicityData(AlleleProperties alleleProperties) { if (alleleProperties.equals(AlleleProperties.getDefaultInstance())) { return PathogenicityData.empty(); } List<PathogenicityScore> pathogenicityScores = parsePathogenicityData(alleleProperties.getPropertiesMap()); ClinVarData clinVarData = parseClinVarData(alleleProperties.getClinVar()); return PathogenicityData.of(clinVarData, pathogenicityScores); }### Assistant: @Test public void testToPathDataPrimateAi() { AlleleProperties alleleProperties = AlleleProperties.newBuilder().putProperties(\"PRIMATE_AI\", 0.7f).build(); assertThat(AlleleProtoAdaptor.toPathogenicityData(alleleProperties), equalTo(PathogenicityData.of(PathogenicityScore.of(PRIMATE_AI, 0.7f)))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> deleteApproleFromSDB(UserDetails userDetails, String userToken, SafeAppRoleAccess safeAppRoleAccess) { if (TVaultConstants.SELF_SERVICE_APPROLE_NAME.equals(safeAppRoleAccess.getRole_name())) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Access denied: no permission to delete this approle\\\"]}\"); } String jsonstr = JSONUtil.getJSON(safeAppRoleAccess); String token = userDetails.getClientToken(); if (userDetails.isAdmin()) { return safesService.removeApproleFromSafe(token, jsonstr); } else { Map<String,Object> requestMap = ControllerUtil.parseJson(jsonstr); if (ObjectUtils.isEmpty(requestMap.get(\"role_name\")) || ObjectUtils.isEmpty(requestMap.get(\"path\"))) { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Invalid role name or path\\\"]}\"); } String path = requestMap.get(\"path\").toString(); ResponseEntity<String> isAuthorized = isAuthorized(userDetails, path); if (!isAuthorized.getStatusCode().equals(HttpStatus.OK)) { return isAuthorized.getStatusCode().equals(HttpStatus.BAD_REQUEST)?isAuthorized:ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Error checking user permission\\\"]}\"); } if (isAuthorized.getBody().equals(TVaultConstants.FALSE)) { return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"{\\\"errors\\\":[\\\"Access denied: no permission to remove approle from the safe\\\"]}\"); } token = userDetails.getSelfSupportToken(); return safesService.removeApproleFromSafe(token, jsonstr); } }### Assistant: @Test public void test_deleteApproleFromSDB_successfully_admin() { String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; UserDetails userDetails = getMockUser(true); String jsonStr = \"{\\\"role_name\\\":\\\"approle1\\\",\\\"path\\\":\\\"shared/mysafe01\\\",\\\"access\\\":\\\"write\\\"}\"; ResponseEntity<String> response = ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"Role association is removed \\\"]}\"); ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"Role association is removed \\\"]}\"); when(safesService.removeApproleFromSafe(token, jsonStr)).thenReturn(response); SafeAppRoleAccess safeAppRoleAccess = new SafeAppRoleAccess(\"aprole1\", \"shared/mysafe01\", \"write\"); when(JSONUtil.getJSON(Mockito.any(SafeAppRoleAccess.class))).thenReturn(jsonStr); ResponseEntity<String> responseEntity = selfSupportService.deleteApproleFromSDB(userDetails, token, safeAppRoleAccess); assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @TransactionDemarcate(joinToken = true) @Override public ActionForward captureQuestionResponses(final ActionMapping mapping, final ActionForm form, final HttpServletRequest request, @SuppressWarnings(\"unused\") final HttpServletResponse response) throws Exception { request.setAttribute(METHODCALLED, \"captureQuestionResponses\"); LoanAccountActionForm actionForm = (LoanAccountActionForm) form; setPerspective(request, actionForm.getPerspective()); ActionErrors errors = createLoanQuestionnaire.validateResponses(request, actionForm); if (errors != null && !errors.isEmpty()) { addErrors(request, errors); return mapping.findForward(ActionForwards.captureQuestionResponses.toString()); } return createLoanQuestionnaire.rejoinFlow(mapping); }### Assistant: @Test public void captureQuestionResponses() throws Exception { String redoLoan = \"redoLoan\"; when(form.getPerspective()).thenReturn(redoLoan); ActionErrors errors = mock(ActionErrors.class); ActionForward forward = mock(ActionForward.class); when(createLoanQuestionnaire.validateResponses(request, form)).thenReturn(errors); when(errors.isEmpty()).thenReturn(true); when(createLoanQuestionnaire.rejoinFlow(mapping)).thenReturn(forward); loanAccountAction.captureQuestionResponses(mapping, form, request, response); verify(request,times(1)).setAttribute(eq(LoanConstants.METHODCALLED), eq(\"captureQuestionResponses\")); verify(request,times(1)).setAttribute(PERSPECTIVE, redoLoan); verify(createLoanQuestionnaire).rejoinFlow(mapping); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public byte[] generatePublicKeySeed(PrivateKey privateKey) { if (!(privateKey instanceof PrivateKeyEd25519)) { throw new IllegalArgumentException(\"Public key on Curve25519 must be \" + CURVE.getPublicKeyByteLength() + \" byte length. Length: \" + privateKey.getRaw().length); } BigInteger s = privateKey.getScalarSeed(this); Point point = CURVE.getBasePoint().scalarMultiply(s); return point.encode().getValue(); }### Assistant: @Test public void success_GeneratePublicKeySeed_via_SHA_512_from_hex_string_1() { PrivateKey privateKey = PrivateKeyEd25519.fromHexString(\"ab4195d4123f0594e5341c45134c5938cc5913d34aa951234c5938cc2a6eb487\"); PublicKeyDelegate delegate1 = new Ed25519PublicKeyDelegate(HashAlgorithm.SHA_512); byte[] seed = delegate1.generatePublicKeySeed(privateKey); assertThat(HexEncoder.getString(seed), is(\"9b69ec0a4568848ec9bd9190996fce5a5f46d0a8eb20cdd770953e61855438ef\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean shouldUseMultipart( @NonNull UploadConfiguration config, long contentLength) { return config.isAllowMultipartUploads() && meetsMinimumSize(config, contentLength); }### Assistant: @Test public void shouldUseMultipart_objectNotLargeEnough_shouldReturnFalse() { UploadConfiguration configuration = UploadConfiguration.builder().build(); assertFalse( MultipartUtils.shouldUseMultipart(configuration, LARGE_ENOUGH_FOR_MULTIPART - 1L)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String findConnectionUrl(DbmsHandlerComponent dbmsHandlerComponent, Dbms dbms) { final DbmsType type = findDbmsType(dbmsHandlerComponent, dbms); return dbms.getConnectionUrl().orElseGet(() -> type.getConnectionUrlGenerator().from(dbms)); }### Assistant: @Test void findConnectionUrl() { final Dbms dbms = mock(Dbms.class); when(dbms.getTypeName()).thenReturn(\"dbms_type_name\"); when(dbms.getConnectionUrl()).thenReturn(Optional.of(\"connection.url\")); final Dbms dbms2 = mock(Dbms.class); when(dbms2.getTypeName()).thenReturn(\"another_dbms_type_name\"); when(dbms2.getConnectionUrl()).thenReturn(Optional.empty()); final DbmsType dbmsType = mock(DbmsType.class); when(dbmsType.getName()).thenReturn(\"dbms_type_name\"); final DbmsType dbmsType2 = mock(DbmsType.class, RETURNS_DEEP_STUBS); when(dbmsType2.getName()).thenReturn(\"another_dbms_type_name\"); when(dbmsType2.getConnectionUrlGenerator().from(dbms2)).thenReturn(\"another.connection.url\"); final DbmsHandlerComponent dbmsHandlerComponent = mock(DbmsHandlerComponent.class); when(dbmsHandlerComponent.findByName(\"dbms_type_name\")).thenReturn(Optional.of(dbmsType)); when(dbmsHandlerComponent.findByName(\"another_dbms_type_name\")).thenReturn(Optional.of(dbmsType2)); assertEquals(\"connection.url\", DatabaseUtil.findConnectionUrl(dbmsHandlerComponent, dbms)); assertEquals(\"another.connection.url\", DatabaseUtil.findConnectionUrl(dbmsHandlerComponent, dbms2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DDMFormInstanceRecordExporterResponse export( DDMFormInstanceRecordExporterRequest ddmFormInstanceRecordExporterRequest) throws FormInstanceRecordExporterException { long ddmFormInstanceId = ddmFormInstanceRecordExporterRequest.getDDMFormInstanceId(); int status = ddmFormInstanceRecordExporterRequest.getStatus(); int start = ddmFormInstanceRecordExporterRequest.getStart(); int end = ddmFormInstanceRecordExporterRequest.getEnd(); OrderByComparator<DDMFormInstanceRecord> orderByComparator = ddmFormInstanceRecordExporterRequest.getOrderByComparator(); Locale locale = ddmFormInstanceRecordExporterRequest.getLocale(); String type = ddmFormInstanceRecordExporterRequest.getType(); DDMFormInstanceRecordExporterResponse.Builder builder = DDMFormInstanceRecordExporterResponse.Builder.newBuilder(); try { List<DDMFormInstanceRecord> ddmFormInstanceRecords = ddmFormInstanceRecordLocalService.getFormInstanceRecords( ddmFormInstanceId, status, start, end, orderByComparator); Map<String, DDMFormField> ddmFormFields = getDistinctFields( ddmFormInstanceId); byte[] content = write( type, getDDMFormFieldsLabel(ddmFormFields, locale), getDDMFormFieldValues( ddmFormFields, ddmFormInstanceRecords, locale)); builder = builder.withContent(content); } catch (Exception exception) { throw new FormInstanceRecordExporterException(exception); } return builder.build(); }### Assistant: @Test(expected = FormInstanceRecordExporterException.class) public void testExportCatchException() throws Exception { DDMFormInstanceRecordExporterImpl ddmFormInstanceRecordExporterImpl = new DDMFormInstanceRecordExporterImpl(); ddmFormInstanceRecordExporterImpl.ddmFormInstanceRecordLocalService = _ddmFormInstanceRecordLocalService; when( _ddmFormInstanceRecordLocalService.getFormInstanceRecords( Matchers.anyLong(), Matchers.anyInt(), Matchers.anyInt(), Matchers.anyInt(), Matchers.any(OrderByComparator.class)) ).thenThrow( Exception.class ); DDMFormInstanceRecordExporterRequest.Builder builder = DDMFormInstanceRecordExporterRequest.Builder.newBuilder(1, \"csv\"); ddmFormInstanceRecordExporterImpl.export(builder.build()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Scheduled(initialDelay = ONE_MINUTE_IN_MILLISECONDS, fixedDelay = ONE_MINUTE_IN_MILLISECONDS * NUMBER_OF_MINUTES_BETWEEN_REGISTRATION_OF_TEMPLATES) public void registerTemplatesIfNeeded() { if (autonomicManagementHeuristicService.getAdministrationAlgorithm().canHeuristicShutdownHosts() || hostService.isThereAnyHostOnCloudDeactivatedByOurManager()) { List<HypervisorType> allHypervisorsTypeInCloud = hostService.getAllHypervisorsTypeInCloud(); for (HypervisorType hypervisorType : allHypervisorsTypeInCloud) { if (!autonomiccsSystemVmTemplateService.isTemplateRegisteredForHypervisor(hypervisorType)) { RegisterTemplateCmd templateCommandForHypervisor = createRegisterTemplateCommandForHypervisor(hypervisorType); try { templateService.registerTemplate(templateCommandForHypervisor); } catch (Exception e) { logger.error(\"Error while registering a Autonomiccs system vm. \", e); } } } } }### Assistant: @Test public void registerTemplatesIfNeededTestHeuristicCanShutDownHostEmptyHypervisorList() throws Exception { configureRegisterTemplatesIfNeededTest(new ConsolidationAlgorithmBase(), true, new ArrayList<HypervisorType>(), false); spy.registerTemplatesIfNeeded(); verifyRegisterTemplatesIfNeededCalledMethods(0, 1, 0, 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac) { Double originalCharge = atom.getCharge(); String originalAtomtypeName = atom.getAtomTypeName(); Integer originalNeighborCount = atom.getFormalNeighbourCount(); Integer originalValency = atom.getValency(); IAtomType.Hybridization originalHybridization = atom.getHybridization(); Double originalBondOrderSum = atom.getBondOrderSum(); Order originalMaxBondOrder = atom.getMaxBondOrder(); if (!isCachedAtomContainer(ac)) { try { AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(ac); } catch (CDKException e) { return getDummyDescriptorValue(e); } if (lpeChecker) { LonePairElectronChecker lpcheck = new LonePairElectronChecker(); try { lpcheck.saturate(ac); } catch (CDKException e) { return getDummyDescriptorValue(e); } } if (maxIterations != -1) pepe.setMaxGasteigerIters(maxIterations); if (maxResonStruc != -1) pepe.setMaxResoStruc(maxResonStruc); try { for (int i = 0; i < ac.getAtomCount(); i++) ac.getAtom(i).setCharge(0.0); pepe.assignGasteigerPiPartialCharges(ac, true); for (int i = 0; i < ac.getAtomCount(); i++) { cacheDescriptorValue(ac.getAtom(i), ac, new DoubleResult(ac.getAtom(i).getCharge())); } } catch (Exception exception) { return getDummyDescriptorValue(exception); } } atom.setCharge(originalCharge); atom.setAtomTypeName(originalAtomtypeName); atom.setFormalNeighbourCount(originalNeighborCount); atom.setValency(originalValency); atom.setHybridization(originalHybridization); atom.setMaxBondOrder(originalMaxBondOrder); atom.setBondOrderSum(originalBondOrderSum); return getCachedDescriptorValue(atom) != null ? new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), getCachedDescriptorValue(atom), NAMES) : null; }### Assistant: @Test @Category(SlowTest.class) public void testPartialPiChargeDescriptor_Methyl_Fluoride() throws Exception { double[] testResult = {0.0, 0.0, 0.0, 0.0, 0.0}; IAtomicDescriptor descriptor = new PartialPiChargeDescriptor(); IAtomContainer molecule = builder.newInstance(IAtomContainer.class); molecule.addAtom(new Atom(\"F\")); molecule.addAtom(new Atom(\"C\")); molecule.addBond(0, 1, IBond.Order.SINGLE); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule); addExplicitHydrogens(molecule); lpcheck.saturate(molecule); for (int i = 0; i < molecule.getAtomCount(); i++) { double result = ((DoubleResult) descriptor.calculate(molecule.getAtom(i), molecule).getValue()) .doubleValue(); Assert.assertEquals(testResult[i], result, 0.0001); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FEELFnResult<Boolean> invoke(@ParameterName( \"value1\" ) Comparable value1, @ParameterName( \"value2\" ) Comparable value2) { if ( value1 == null ) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"value1\", \"cannot be null\")); } if ( value2 == null ) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"value2\", \"cannot be null\")); } try { boolean result = value1.compareTo( value2 ) > 0; return FEELFnResult.ofResult( result ); } catch( Exception e ) { return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"value1\", \"cannot be compared to value2\")); } }### Assistant: @Test public void invokeParamSingleAndRange() { FunctionTestUtil.assertResult( afterFunction.invoke( \"a\", new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.CLOSED )), Boolean.FALSE ); FunctionTestUtil.assertResult( afterFunction.invoke( \"f\", new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.CLOSED )), Boolean.FALSE ); FunctionTestUtil.assertResult( afterFunction.invoke( \"f\", new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.OPEN )), Boolean.TRUE ); FunctionTestUtil.assertResult( afterFunction.invoke( \"g\", new RangeImpl( Range.RangeBoundary.CLOSED, \"a\", \"f\", Range.RangeBoundary.CLOSED )), Boolean.TRUE ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: List<Shape> getOutlines() { List<Shape> shapes = new ArrayList<Shape>(); shapes.add(element.getOutline()); for (TextOutline adjunct : adjuncts) shapes.add(adjunct.getOutline()); return shapes; }### Assistant: @Test public void testGetOutlines() throws Exception { TextOutline outline = new TextOutline(\"Cl\", font); AtomSymbol symbol = new AtomSymbol(outline, Collections.<TextOutline> emptyList()); Rectangle outlineBounds = outline.getOutline().getBounds(); Rectangle symbolBounds = symbol.getOutlines().get(0).getBounds(); assertThat(outlineBounds.getX(), closeTo(symbolBounds.getX(), 0.01)); assertThat(outlineBounds.getY(), closeTo(symbolBounds.getY(), 0.01)); assertThat(outlineBounds.getMaxX(), closeTo(symbolBounds.getMaxX(), 0.01)); assertThat(outlineBounds.getMaxY(), closeTo(symbolBounds.getMaxY(), 0.01)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @SuppressWarnings(\"unused\") public void select(final GridWidget selectedGridWidget) { decisionTableSelectedEvent.fire(new DecisionTableSelectedEvent(this)); if (!isReadOnly()) { lockManager.acquireLock(); } }### Assistant: @Test public void select() { dtPresenter.select(dtPresenter.getView()); verify(decisionTableSelectedEvent, times(1)).fire(any(DecisionTableSelectedEvent.class)); verify(lockManager, times(4)).acquireLock(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public WebElement findElement(WebDriver driver) { return index == null ? super.findElement(driver) : super.findElements(driver).get(index); }### Assistant: @Test public void findElement_driver_noIndex() throws Exception { IndexDomSelector selector = new IndexDomSelector(SelectorType.CLASS_NAME, \"parent\", null); assertThat(selector.findElement(driver), is(parentElement1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <ENTITY> JsonEncoder<ENTITY> noneOf(Manager<ENTITY> manager) { return new JsonEncoderImpl<>(projectComponent.getProject(), manager); }### Assistant: @Test void testNoneOf() { final JsonEncoder<Person> result = jsonComponent.noneOf(persons); final String json = persons.stream().collect(result.collector()); assertEquals(\"[{},{},{},{},{},{},{},{}]\", json); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull public static TsFiller of(@NonNull Logger logger, @NonNull HasTsCursor hdc, @NonNull HasDataMoniker hdm, @NonNull HasDataDisplayName hddn) { return new ComposedFiller(new CursorResource(logger, hdc, hdm, hddn)); }### Assistant: @Test public void testCollectionFillSource() { TsFiller filler = TsCursorAsFiller.of(logger, goodCursor, monikers, goodCursor); assertThat(new TsCollectionInformation(goodSource, None)).satisfies(info -> { assertThat(filler.fillCollection(info)).isTrue(); assertThat(info).isEqualToIgnoringGivenFields(colInfo(null, goodSource, None, null, null), \"items\"); assertThat(info.items) .usingFieldByFieldElementComparator() .containsExactly( seriesInfo(\"node.leaf1\", leaf1, None, null, null, null), seriesInfo(\"node.leaf2\", leaf2, None, null, null, null), seriesInfo(\"leaf3\", leaf3, None, null, null, null) ); }); assertThat(new TsCollectionInformation(goodSource, TsInformationType.MetaData)).satisfies(info -> { assertThat(filler.fillCollection(info)).isTrue(); assertThat(info).isEqualToIgnoringGivenFields(colInfo(null, goodSource, TsInformationType.MetaData, null, metaOf(\"type\", \"root\")), \"items\"); assertThat(info.items) .usingFieldByFieldElementComparator() .containsExactly( seriesInfo(\"node.leaf1\", leaf1, TsInformationType.MetaData, null, null, null), seriesInfo(\"node.leaf2\", leaf2, TsInformationType.MetaData, null, null, null), seriesInfo(\"leaf3\", leaf3, TsInformationType.MetaData, null, null, customMeta) ); }); assertThat(new TsCollectionInformation(goodSource, All)).satisfies(info -> { assertThat(filler.fillCollection(info)).isTrue(); assertThat(info).isEqualToIgnoringGivenFields(colInfo(null, goodSource, All, null, metaOf(\"type\", \"root\")), \"items\"); assertThat(info.items) .usingFieldByFieldElementComparator() .containsExactly( seriesInfo(\"node.leaf1\", leaf1, All, null, \"No data available\", null), seriesInfo(\"node.leaf2\", leaf2, All, Data.M1, null, null), seriesInfo(\"leaf3\", leaf3, All, Data.M2, null, customMeta) ); }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<String> getAddressList() { if (mWalletList == null || mWalletList.isEmpty()) { return new ArrayList<>(); } return Flowable.fromIterable(mWalletList) .map(new Function<Wallet, String>() { @Override public String apply(Wallet walletEntity) throws Exception { return walletEntity.getPrefixAddress(); } }).collect(new Callable<List<String>>() { @Override public List<String> call() throws Exception { return new ArrayList<>(); } }, new BiConsumer<List<String>, String>() { @Override public void accept(List<String> strings, String s) throws Exception { strings.add(s); } }).blockingGet(); }### Assistant: @Test public void getAddressList() { List<Wallet> list = new ArrayList<>(); Wallet wallet = new Wallet(); wallet.setCreateTime(1115448481); wallet.setName(\"001\"); wallet.setAddress(\"0xfb1b74328f936973a59620d683e1b1acb487d9e7\"); AccountBalance balance = new AccountBalance(); balance.setFree(\"10000000084489\"); balance.setLock(\"0\"); wallet.setAccountBalance(balance); list.add(wallet); Wallet wallet2 = new Wallet(); wallet2.setCreateTime(1115448485); wallet2.setName(\"002\"); wallet2.setAddress(\"0x2e95e3ce0a54951eb9a99152a6d5827872dfb4fd\"); AccountBalance balance2 = new AccountBalance(); balance2.setFree(\"1000000005655655\"); balance2.setLock(\"0\"); wallet2.setAccountBalance(balance2); list.add(wallet2); Wallet wallet3 = new Wallet(); wallet3.setName(\"003\"); wallet3.setAddress(\"0xca4b151b0b100ae53c9d78dd136905e681622ee7\"); wallet3.setCreateTime(1115448483); AccountBalance balance3 = new AccountBalance(); balance3.setFree(\"10000000056556584855\"); balance3.setLock(\"0\"); wallet3.setAccountBalance(balance3); list.add(wallet3); Wallet wallet4 = new Wallet(); wallet4.setName(\"004\"); wallet4.setCreateTime(1115448486); AccountBalance balance4 = new AccountBalance(); balance4.setFree(\"1000000001156584855\"); balance4.setLock(\"0\"); wallet4.setAccountBalance(balance4); list.add(wallet4); List<String> addressList = Flowable.fromIterable(list) .map(new Function<Wallet, String>() { @Override public String apply(Wallet walletEntity) throws Exception { return walletEntity.getPrefixAddress(); } }).collect(new Callable<List<String>>() { @Override public List<String> call() throws Exception { return new ArrayList<>(); } }, new BiConsumer<List<String>, String>() { @Override public void accept(List<String> strings, String s) throws Exception { strings.add(s); } }).blockingGet(); Log.d(\"=========\", \"\u5730\u5740\u5217\u8868\" + addressList.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ServiceIdentityList getServiceIdentityList(ResourceContext ctx, String domainName, Integer limit, String skip) { final String caller = ctx.getApiName(); logPrincipal(ctx); validateRequest(ctx.request(), caller); validate(domainName, TYPE_DOMAIN_NAME, caller); domainName = domainName.toLowerCase(); setRequestDomain(ctx, domainName); if (skip != null) { skip = skip.toLowerCase(); } List<String> names = new ArrayList<>(); String next = processListRequest(domainName, AthenzObject.SERVICE_IDENTITY, limit, skip, names); ServiceIdentityList result = new ServiceIdentityList().setNames(names); if (next != null) { result.setNext(next); } return result; }### Assistant: @Test public void testGetServiceIdentityList() { TopLevelDomain dom1 = createTopLevelDomainObject(\"ServiceListDom1\", \"Test Domain1\", \"testOrg\", adminUser); zms.postTopLevelDomain(mockDomRsrcCtx, auditRef, dom1); ServiceIdentity service1 = createServiceObject(\"ServiceListDom1\", \"Service1\", \"http: \"users\", \"host1\"); zms.putServiceIdentity(mockDomRsrcCtx, \"ServiceListDom1\", \"Service1\", auditRef, service1); ServiceIdentity service2 = createServiceObject(\"ServiceListDom1\", \"Service2\", \"http: \"users\", \"host1\"); zms.putServiceIdentity(mockDomRsrcCtx, \"ServiceListDom1\", \"Service2\", auditRef, service2); ServiceIdentityList serviceList = zms.getServiceIdentityList( mockDomRsrcCtx, \"ServiceListDom1\", null, null); assertNotNull(serviceList); assertEquals(serviceList.getNames().size(), 2); assertTrue(serviceList.getNames().contains(\"Service1\".toLowerCase())); assertTrue(serviceList.getNames().contains(\"Service2\".toLowerCase())); zms.deleteTopLevelDomain(mockDomRsrcCtx, \"ServiceListDom1\", auditRef); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void configure(Object obj, Map<String, String> config) { if (obj instanceof Configurable) { ((Configurable)obj).configure(config); } }### Assistant: @Test public void testConfigure_NotConfigurableObject() { Object o = new Object(); Map<String, String> params = Maps.newHashMap(); params.put(\"key\", \"value\"); ConfigureUtil.configure(o, params); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DateTimePeriod getNext() { DateTime next = getStart().plusYears(1); return DateTimePeriod.createYear(next); }### Assistant: @Test public void getNext() throws Exception { DateTimePeriod period0 = DateTimePeriod.createYear(2009, DateTimeZone.UTC); DateTimePeriod period1 = period0.getNext(); DateTime correctStart = new DateTime(2010,1,1,0,0,0,0,DateTimeZone.UTC); DateTime correctEnd = new DateTime(2011,1,1,0,0,0,0,DateTimeZone.UTC); Assert.assertEquals(correctStart, period1.getStart()); Assert.assertEquals(correctEnd, period1.getEnd()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void fetchAdForUrl(String url) { mTaskTracker.newTaskStarted(); MoPubLog.i(\"Fetching ad for task #\" + getCurrentTaskId()); if (mCurrentTask != null) { mCurrentTask.cancel(true); } mCurrentTask = AdFetchTaskFactory.create(mTaskTracker, mAdViewController, mUserAgent, mTimeoutMilliseconds); try { AsyncTasks.safeExecuteOnExecutor(mCurrentTask, url); } catch (Exception exception) { MoPubLog.d(\"Error executing AdFetchTask\", exception); } }### Assistant: @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1) @Test public void fetchAdForUrl_beforeHoneycomb_shouldExecuteWithoutAnExecutor() throws Exception { AdFetchTaskFactory.setInstance(new TestAdFetchTaskFactory()); AdFetchTask adFetchTask = TestAdFetchTaskFactory.getSingletonMock(); subject.fetchAdForUrl(\"some url\"); verify(adFetchTask, never()).executeOnExecutor(any(Executor.class), anyString()); verify(adFetchTask).execute(eq(\"some url\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public abstract void renameTable(String dbName, String oldName, String newName) throws HCatException;### Assistant: @Test public void testRenameTable() throws Exception { HCatClient client = HCatClient.create(new Configuration(hcatConf)); String tableName = \"temptable\"; String newName = \"mytable\"; client.dropTable(null, tableName, true); client.dropTable(null, newName, true); ArrayList<HCatFieldSchema> cols = new ArrayList<HCatFieldSchema>(); cols.add(new HCatFieldSchema(\"id\", Type.INT, \"id columns\")); cols.add(new HCatFieldSchema(\"value\", Type.STRING, \"id columns\")); HCatCreateTableDesc tableDesc = HCatCreateTableDesc .create(null, tableName, cols).fileFormat(\"rcfile\").build(); client.createTable(tableDesc); client.renameTable(null, tableName, newName); try { client.getTable(null, tableName); } catch (HCatException exp) { assertTrue(\"Unexpected exception message: \" + exp.getMessage(), exp.getMessage().contains(\"NoSuchObjectException while fetching table\")); } HCatTable newTable = client.getTable(null, newName); assertTrue(newTable != null); assertTrue(newTable.getTableName().equals(newName)); client.close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void clear() { mDiskCache.uncache(); mQueue.clear(); }### Assistant: @Test public void testClear() { mEventCache.add(new Event(\"test\")); mEventCache.clear(); verify(mEventDiskCache).uncache(); assertTrue(mEventCache.isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void configure() throws ConfigurationException { setMethodType(\"POST\"); setInputMessageParam(\"message\"); setParamsInUrl(false); setMultipart(true); super.configure(); }### Assistant: @Test public void simpleMockedMultipartHttp2() throws Throwable { MultipartHttpSender sender = getSender(); Message input = new Message(\"<xml>input</xml>\"); try { IPipeLineSession pls = new PipeLineSessionBase(session); String xmlMultipart = \"<parts><part name=\\\"dummy\\\" filename=\\\"document.pdf\\\" \" + \"sessionKey=\\\"part_file\\\" size=\\\"72833\\\" \" + \"mimeType=\\\"application/pdf\\\"/></parts>\"; pls.put(\"multipartXml\", xmlMultipart); pls.put(\"part_file\", new ByteArrayInputStream(\"<dummy xml file/>\".getBytes())); sender.setMultipartXmlSessionKey(\"multipartXml\"); sender.configure(); sender.open(); String result = sender.sendMessage(input, pls).asString(); assertEquals(getFile(\"simpleMockedMultipartHttp2.txt\"), result.trim()); } catch (SenderException e) { throw e.getCause(); } finally { if (sender != null) { sender.close(); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int compareEndWithBegin( final TimeGeometricPrimitive a, final TimeGeometricPrimitive b ) { final Temporal endA = new TemporalConverter().convert( end( a ) ); final Temporal beginB = new TemporalConverter().convert( begin( b ) ); if ( endA == null || beginB == null ) return 0; return endA.compareTo( beginB ); }### Assistant: @Test public void evaluateInstantPeriod() { assertThat( compareEndWithBegin( instant( \"2014-01-01T00:00:01\" ), period( \"2014-01-01T00:00:01\", \"2014-01-01T00:00:01\" ) ), is( 0 ) ); assertThat( compareEndWithBegin( instant( \"2014-01-01T00:00:01\" ), period( \"2014-01-01T00:00:01\", \"2014-01-01T00:00:03\" ) ), is( 0 ) ); assertThat( compareEndWithBegin( instant( \"2014-01-01T00:00:02\" ), period( \"2014-01-01T00:00:01\", \"2014-01-01T00:00:03\" ) ), is( 1 ) ); assertThat( compareEndWithBegin( instant( \"2014-01-01T00:00:03\" ), period( \"2014-01-01T00:00:01\", \"2014-01-01T00:00:03\" ) ), is( 1 ) ); assertThat( compareEndWithBegin( instant( \"2014-01-01T00:00:04\" ), period( \"2014-01-01T00:00:01\", \"2014-01-01T00:00:03\" ) ), is( 1 ) ); assertThat( compareEndWithBegin( instant( \"2014-01-01T00:00:00\" ), period( \"2014-01-01T00:00:01\", \"2014-01-01T00:00:03\" ) ), is( -1 ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int compare( SharepointVersion sharepointVersion1, SharepointVersion sharepointVersion2) { int[] versionParts1 = StringUtil.split( sharepointVersion1.getVersion(), StringPool.PERIOD, 0); int[] versionParts2 = StringUtil.split( sharepointVersion2.getVersion(), StringPool.PERIOD, 0); if (versionParts1[0] > versionParts2[0]) { return -1; } if (versionParts1[0] < versionParts2[0]) { return 1; } if (versionParts1[1] > versionParts2[1]) { return -1; } if (versionParts1[1] < versionParts2[1]) { return 1; } return 0; }### Assistant: @Test public void testCompareGreaterThanMajor() { SharepointVersion sharepointVersion1 = createSharepointVersion(\"8.1\"); SharepointVersion sharepointVersion2 = createSharepointVersion(\"9.0\"); Assert.assertEquals( 1, _sharepointVersionComparator.compare( sharepointVersion1, sharepointVersion2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void handlePost(final HttpServletRequest req, final HttpServletResponse resp, final Session session) throws ServletException, IOException { if (hasParam(req, \"ajax\")) { handleAJAXAction(req, resp, session); } }### Assistant: @Test public void postAjaxExecuteFlowWithMissingProjectParameter() throws Exception { this.req.addParameter(\"ajax\", \"executeFlow\"); try { this.executorServlet.handlePost(this.req, this.res, this.session); fail(\"Expected exception was not thrown\"); } catch (final ServletException e) { assertEquals(\"Missing required parameter 'project'.\", e.getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String writeValue(Object value) { try { return om.writeValueAsString(value); } catch (JsonProcessingException e) { throw new UnirestException(e); } }### Assistant: @Test public void canWrite() throws JSONException { TestMe test = new TestMe(\"foo\", 42, new TestMe(\"bar\", 666, null)); String json = om.writeValue(test); JSONAssert.assertEquals( \"{\\\"text\\\":\\\"foo\\\",\\\"nmbr\\\":42,\\\"another\\\":{\\\"text\\\":\\\"bar\\\",\\\"nmbr\\\":666,\\\"another\\\":null}}\" , json , true ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isSynced() { return super.isSynced(); }### Assistant: @Test public void shouldHaveFalseSyncStatusIfTheChildObjectIsCreated() throws JSONException { Child child = new Child(); assertFalse(child.isSynced()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ImmutableFeatureDefinitionIdentifier ofParsed(final CharSequence featureDefinitionIdentifier) { checkNotNull(featureDefinitionIdentifier, \"CharSequence-representation of the identifier\"); if (featureDefinitionIdentifier instanceof ImmutableFeatureDefinitionIdentifier) { return (ImmutableFeatureDefinitionIdentifier) featureDefinitionIdentifier; } return new ImmutableFeatureDefinitionIdentifier( ImmutableDefinitionIdentifier.ofParsed(featureDefinitionIdentifier) ); }### Assistant: @Test public void tryToParseIdentifierStringWithIllegalChar() { final String invalidString = \"org/eclipse/ditto\" + \":\" + NAME + \":\" + VERSION; assertThatExceptionOfType(DefinitionIdentifierInvalidException.class) .isThrownBy(() -> ImmutableFeatureDefinitionIdentifier.ofParsed(invalidString)) .withMessage(\"Definition identifier <%s> is invalid!\", invalidString) .withNoCause(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void restore(final ISchedulerEntry entry) throws SchedulingStrategyExecutionException { try { LocalDateTime now = LocalDateTime.now(ZoneOffset.UTC); LocalDateTime time = LocalDateTime.parse((String) entry.getState().getValue(timeFieldName)); Boolean ntl = (Boolean) entry.getState().getValue(neverTooLateFieldName); if (now.isAfter(time) && !ntl) { entry.cancel(); } else { entry.scheduleNext(datetimeToMillis(time)); } } catch (ReadValueException | InvalidArgumentException | EntryScheduleException | EntryStorageAccessException e) { throw new SchedulingStrategyExecutionException(\"Error occurred restoring an entry.\", e); } }### Assistant: @Test public void Should_restoreEntryAndCancelItWhenItIsTooLateWhenItMayBeTooLate() throws Exception { when(entry.getState()).thenReturn(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"), \"{'time':'2000-10-10T00:50:15','neverTooLate':false}\".replace('\\'','\"'))); ISchedulingStrategy strategy = new OnceSchedulingStrategy(); strategy.restore(entry); verify(entry).cancel(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static int getCrc16(byte[] bytes, int offset, int length) { int contentSize = length - offset; byte[] content = new byte[contentSize]; System.arraycopy(bytes, offset, content, 0, contentSize); int value = 0; for (byte element : content) { value = unsignedShort((value << 8) ^ CRC16_TABLE[((value >>> 8) ^ element) & 0xff]); } return value; }### Assistant: @Test public void crc16CalculationShouldMatchLastTwoBytesOfPacket() throws Exception { int crc16 = DecodingUtils.getCrc16(this.packet, 0, this.packet.length - 2); assertThat(format(\"CRC16 validation for packet [%s] failed\", this.commandId), (short) crc16, equalTo(getPacketCrcValue())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Executor callbackExecutor() { return callbackExecutor; }### Assistant: @Test public void callbackExecutorPropagated() throws Exception { Executor executor = mock(Executor.class); XingApi api = new XingApi.Builder() .custom() .callbackExecutor(executor) .build(); assertThat(api.callbackExecutor()).isSameAs(executor); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Object resolveArgument(MessageContext messageContext, MethodParameter parameter) throws TransformerException, XMLStreamException { Source source = messageContext.getRequest().getPayloadSource(); if (source == null) { return null; } Class<?> parameterType = parameter.getParameterType(); if (XMLStreamReader.class.equals(parameterType)) { return resolveStreamReader(source); } else if (XMLEventReader.class.equals(parameterType)) { return resolveEventReader(source); } throw new UnsupportedOperationException(); }### Assistant: @Test public void resolveEventReaderStream() throws Exception { MessageContext messageContext = createMockMessageContext(); Object result = resolver.resolveArgument(messageContext, eventParameter); testEventReader(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FEELFnResult<String> invoke(@ParameterName(\"from\") Object val) { if ( val == null ) { return FEELFnResult.ofResult( null ); } else { return FEELFnResult.ofResult( TypeUtil.formatValue(val, false) ); } }### Assistant: @Test public void invokeLocalDate() { final LocalDate localDate = LocalDate.now(); FunctionTestUtil.assertResult(stringFunction.invoke(localDate), localDate.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Filter parse( XMLStreamReader xmlStream ) throws XMLParsingException, XMLStreamException { Filter filter = null; xmlStream.require( START_ELEMENT, OGC_NS, \"Filter\" ); nextElement( xmlStream ); if ( xmlStream.getEventType() != START_ELEMENT ) { throw new XMLParsingException( xmlStream, Messages.getMessage( \"FILTER_PARSER_FILTER_EMPTY\", new QName( OGC_NS, \"Filter\" ) ) ); } QName elementName = xmlStream.getName(); if ( GML_OBJECT_ID_ELEMENT.equals( elementName ) || FEATURE_ID_ELEMENT.equals( elementName ) ) { LOG.debug( \"Building id filter\" ); filter = parseIdFilter( xmlStream ); } else { LOG.debug( \"Building operator filter\" ); Operator rootOperator = parseOperator( xmlStream ); filter = new OperatorFilter( rootOperator ); nextElement( xmlStream ); } xmlStream.require( XMLStreamConstants.END_ELEMENT, OGC_NS, \"Filter\" ); return filter; }### Assistant: @Test public void parseDisjointFilter() throws XMLStreamException, FactoryConfigurationError, IOException { Filter filter = parse( \"testfilter16.xml\" ); Assert.assertNotNull( filter ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean containsValue(Object value) { if (!(value instanceof String[])) { return (false); } String[] test = (String[]) value; Enumeration<String> names = request.getKeys(); while (names.hasMoreElements()) { String name = names.nextElement(); if (compareHeaders(name, array2set(test))) { return true; } } return false; }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void testContainsValue() { assertFalse(map.containsValue(1)); Enumeration<String> keys = createMock(Enumeration.class); Enumeration<String> values1 = createMock(Enumeration.class); Enumeration<String> values2 = createMock(Enumeration.class); expect(extractor.getKeys()).andReturn(keys); expect(keys.hasMoreElements()).andReturn(true); expect(keys.nextElement()).andReturn(\"one\"); expect(keys.hasMoreElements()).andReturn(true); expect(keys.nextElement()).andReturn(\"two\"); expect(extractor.getValues(\"one\")).andReturn(values1); expect(values1.hasMoreElements()).andReturn(true); expect(values1.nextElement()).andReturn(\"value1\"); expect(values1.hasMoreElements()).andReturn(false); expect(extractor.getValues(\"two\")).andReturn(values2); expect(values2.hasMoreElements()).andReturn(true); expect(values2.nextElement()).andReturn(\"value2\"); expect(values2.hasMoreElements()).andReturn(true); expect(values2.nextElement()).andReturn(\"value3\"); expect(values2.hasMoreElements()).andReturn(false); replay(extractor, keys, values1, values2); assertTrue(map.containsValue(new String[] {\"value2\", \"value3\"})); verify(extractor, keys, values1, values2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public MonetaryFormat codeSeparator(char codeSeparator) { checkArgument(!Character.isDigit(codeSeparator)); checkArgument(codeSeparator > 0); if (codeSeparator == this.codeSeparator) return this; else return new MonetaryFormat(negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed); }### Assistant: @Test public void codeSeparator() throws Exception { assertEquals(\"BTC@0.00\", MonetaryFormat.BTC.codeSeparator('@').format(Coin.ZERO).toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isOverflagged() { for (Field field : itsFields) if (field.isOpen() && isOverflagged(field)) return true; return false; }### Assistant: @Test public void testIsOverflagged() { flag(0, 0); bomb(0, 0); flag(1, 0); open(1, 1); assertEquals(true, itsBoard.isOverflagged()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected boolean ignore(StackTraceElement s) { return isUnknown(s) || defaultIgnore(s); }### Assistant: @Test public void testIgnoreStaticUtilityClassUtilError() { CompactFormatter cf = new CompactFormatter(); String n = getClass().getName().concat(\"MimeUtility\"); String f = n.concat(\".java\"); StackTraceElement s = new StackTraceElement(n, \"encodeText\", f, 400); assertTrue(s.toString(), cf.ignore(s)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public LocalFileSystem() { this.workingDir = new Path(System.getProperty(\"user.dir\")).makeQualified(this).toString(); this.homeDir = new Path(System.getProperty(\"user.home\")).toString(); String tmp = \"unknownHost\"; try { tmp = InetAddress.getLocalHost().getHostName(); } catch (UnknownHostException e) { LOG.error(\"Could not resolve local host\", e); } this.hostName = tmp; }### Assistant: @Test public void testLocalFilesystem() throws Exception { final File tempdir = new File(temporaryFolder.getRoot(), UUID.randomUUID().toString()); final File testfile1 = new File(tempdir, UUID.randomUUID().toString()); final File testfile2 = new File(tempdir, UUID.randomUUID().toString()); final Path pathtotestfile1 = new Path(testfile1.toURI().getPath()); final Path pathtotestfile2 = new Path(testfile2.toURI().getPath()); final LocalFileSystem lfs = new LocalFileSystem(); final Path pathtotmpdir = new Path(tempdir.toURI().getPath()); assertFalse(lfs.exists(pathtotmpdir)); assertTrue(tempdir.mkdirs()); assertTrue(lfs.exists(pathtotmpdir)); final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir); assertTrue(localstatus1.isDir()); final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir); assertTrue(statusforfiles.length == 0); lfs.delete(pathtotmpdir, true); assertFalse(lfs.exists(pathtotmpdir)); assertFalse(tempdir.exists()); lfs.mkdirs(pathtotmpdir); assertTrue(tempdir.exists()); final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, WriteMode.NO_OVERWRITE); assertTrue(testfile2.createNewFile()); assertTrue(testfile1.exists()); assertTrue(lfs.exists(pathtotestfile2)); final byte[] testbytes = { 1, 2, 3, 4, 5 }; lfsoutput1.write(testbytes); lfsoutput1.close(); assertEquals(testfile1.length(), 5L); byte[] testbytestest = new byte[5]; try (FileInputStream fisfile1 = new FileInputStream(testfile1)) { assertEquals(testbytestest.length, fisfile1.read(testbytestest)); } assertArrayEquals(testbytes, testbytestest); assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length()); assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length()); final FileOutputStream fosfile2 = new FileOutputStream(testfile2); fosfile2.write(testbytes); fosfile2.close(); testbytestest = new byte[5]; final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2); assertEquals(lfsinput2.read(testbytestest), 5); lfsinput2.close(); assertTrue(Arrays.equals(testbytes, testbytestest)); assertEquals(lfs.listStatus(pathtotmpdir).length, 2); assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1); assertTrue(lfs.delete(pathtotestfile1, false)); assertTrue(lfs.delete(pathtotmpdir, true)); assertTrue(!tempdir.exists()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void cleanup(JobContext context) throws IOException { boolean delete = BigQueryOutputConfiguration.getCleanupTemporaryDataFlag(context.getConfiguration()); if (delete && outputFileSystem.exists(outputPath)) { logger.atInfo().log(\"Found GCS output data at '%s', attempting to clean up.\", outputPath); if (outputFileSystem.delete(outputPath, true)) { logger.atInfo().log(\"Successfully deleted GCS output path '%s'.\", outputPath); } else { logger.atWarning().log( \"Failed to delete GCS output at '%s', retrying on shutdown.\", outputPath); outputFileSystem.deleteOnExit(outputPath); } } }### Assistant: @Test public void testCleanup() throws IOException { generateSampleFiles(); committer.cleanup(job); assertThat(!ghfs.exists(outputPath)).isTrue(); assertThat(!ghfs.exists(outputSampleFilePath)).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void appendRow(GridRow row) { checkSimulation(); super.appendRow(row); int rowIndex = getRowCount() - 1; commonAddRow(rowIndex); }### Assistant: @Test public void appendRow() { abstractScesimGridModelSpy.appendRow(gridRowMock); verify(abstractScesimGridModelSpy, atLeast(1)).checkSimulation(); verify(abstractScesimGridModelSpy, times(1)).commonAddRow(eq(ROW_COUNT)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Controller build() { builder.addField(\"private final {} delegate;\", type(serviceInterface)); builder.constructor(new Class<?>[]{serviceInterface}, \"this.delegate = $1;\"); boolean deprecated = method.isAnnotationPresent(Deprecated.class); builder.addMethod(buildMethod(deprecated)); return builder.build(service); }### Assistant: @Test void get() throws Exception { when(request.pathParam(\"id\")).thenReturn(\"1\"); var builder = new WebServiceControllerBuilder<>(TestWebService.class, serviceImpl, TestWebService.class.getDeclaredMethod(\"get\", Integer.class)); Controller controller = builder.build(); String sourceCode = builder.builder.sourceCode(); assertThat(sourceCode).isEqualTo(ClasspathResources.text(\"webservice-test/test-webservice-controller-get.java\")); Response response = controller.execute(request); assertThat(response.status()).isEqualTo(HTTPStatus.OK); @SuppressWarnings(\"unchecked\") var bean = (Optional<TestWebService.TestResponse>) ((BeanBody) ((ResponseImpl) response).body).bean; assertThat(bean.orElseThrow().intField).isEqualTo(2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int firstExcludedCodePoint(String s) { if (s == null || s.isEmpty()) { return NOT_FOUND; } int len = s.length(); int codePoint; for (int i = 0; i < len; i += Character.charCount(codePoint)) { codePoint = s.codePointAt(i); if (!set.contains(codePoint)) { return codePoint; } } return NOT_FOUND; }### Assistant: @Test public void testGetFirstNotAllowedCodePoint_null() { String testStr = null; Set<Integer> allowedCodePointSet = new HashSet<Integer>(); int result = new CodePoints(allowedCodePointSet).firstExcludedCodePoint( testStr); assertThat(result, is(CodePoints.NOT_FOUND)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String generateCompleteURI(String uriSignature, Map<String, String> specifiedParameters, boolean escapeParameters) throws URISignatureParsingException, URIGenerationFromSignatureException { StringBuilder completeURI = new StringBuilder(uriSignature); LinkedHashMap<String, Integer> placeholdersWithPositions = extractPlaceholdersWithPositions(uriSignature); if (placeholdersWithPositions.keySet().size() > 0) { Map<String, String> parameters; if (specifiedParameters == null || specifiedParameters.isEmpty()) { parameters = Collections.emptyMap(); } else { parameters = specifiedParameters; } LinkedList<String> placeholders = new LinkedList<String>( placeholdersWithPositions.keySet()); Collections.reverse(placeholders); Iterator<String> placeholdersIterator = placeholders.iterator(); while (placeholdersIterator.hasNext()) { String placeholder = placeholdersIterator.next(); int placeholderStartPos = placeholdersWithPositions .get(placeholder) - 1; int placeholderEndPos = placeholderStartPos + placeholder.length() + 2; if (parameters.containsKey(placeholder)) { if (escapeParameters) { completeURI.replace(placeholderStartPos, placeholderEndPos, urlEncodeQuery(parameters .get(placeholder))); } else { completeURI.replace(placeholderStartPos, placeholderEndPos, parameters.get(placeholder)); } } else { int qnPos = completeURI.lastIndexOf(\"?\", placeholderStartPos); int ampPos = completeURI.lastIndexOf(\"&\", placeholderStartPos); int slashPos = completeURI.lastIndexOf(\"/\", placeholderStartPos); int startParamPos = Math.max(qnPos, ampPos); if (startParamPos > -1 && startParamPos > slashPos) { if (qnPos > ampPos) { if (placeholderEndPos >= (completeURI.length() - 1)) { completeURI.replace(startParamPos, placeholderEndPos, \"\"); } else { completeURI.replace(startParamPos + 1, placeholderEndPos + 1, \"\"); } } else { completeURI.replace(startParamPos, placeholderEndPos, \"\"); } } else { throw new URIGenerationFromSignatureException( \"Parameter map does not contain a key/value for \\\"\" + placeholder + \"\\\" mandatory placeholder\"); } } } } return (completeURI.toString()); }### Assistant: @SuppressWarnings(\"serial\") @Test(expected = URISignatureHandler.URIGenerationFromSignatureException.class) public void generateCompleteURI_failureURIGeneration_optionalParams() { String uriSignature = \"http: Map<String, String> parametersMissingCompulsory = new HashMap<String, String>() { { put(\"count?\", \"10\"); put(\"startPage?\", \"1\"); put(\"startIndex?\", \"1\"); put(\"searchTerms?\", \"term1\"); } }; String completeURI = URISignatureHandler.generateCompleteURI( uriSignature, parametersMissingCompulsory, false); assertEquals( \"http: completeURI); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static FileSystem write(final FileSystem fs, final Path path, final byte[] bytes) throws IOException { Objects.requireNonNull(path); Objects.requireNonNull(bytes); try (FSDataOutputStream out = fs.createFile(path).overwrite(true).build()) { out.write(bytes); } return fs; }### Assistant: @Test public void testWriteStringFileContext() throws IOException { URI uri = tmp.toURI(); Configuration conf = new Configuration(); FileContext fc = FileContext.getFileContext(uri, conf); Path testPath = new Path(new Path(uri), \"writestring.out\"); String write = \"A\" + \"\\u00ea\" + \"\\u00f1\" + \"\\u00fc\" + \"C\"; FileUtil.write(fc, testPath, write, StandardCharsets.UTF_8); String read = FileUtils.readFileToString(new File(testPath.toUri()), StandardCharsets.UTF_8); assertEquals(write, read); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void step(Program program) { program.fullTrace(); if (CONFIG.vmTrace()) program.saveOpTrace(); try { OpCode op = OpCode.code(program.getCurrentOp()); if (op == null) throw program.new IllegalOperationException(); program.setLastOp(op.val()); long oldMemSize = program.getMemSize(); BigInteger newMemSize = BigInteger.ZERO; Stack<DataWord> stack = program.getStack(); String hint = \"\"; long callGas = 0, memWords = 0; long gasCost = GasCost.STEP; long gasBefore = program.getGas().longValue(); int stepBefore = program.getPC(); program.stackRequire(op.require()); switch (op) { case STOP: case SUICIDE: gasCost = GasCost.STOP; break; case SSTORE: DataWord newValue = stack.get(stack.size()-2); DataWord oldValue = program.storageLoad(stack.peek()); if (oldValue == null && !newValue.isZero()) gasCost = GasCost.SSTORE * 2; else if (oldValue != null && newValue.isZero()) gasCost = GasCost.SSTORE * 0; else gasCost = GasCost.SSTORE; break; case SLOAD: gasCost = GasCost.SLOAD; break; case BALANCE: gasCost = GasCost.BALANCE; break; case MSTORE: newMemSize = memNeeded(stack.peek(), new DataWord(32)); break; case MSTORE8: newMemSize = memNeeded(stack.peek(), new DataWord(1)); break; case MLOAD: newMemSize = memNeeded(stack.peek(), new DataWord(32)); break; case RETURN: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-2)); break; case SHA3: gasCost = GasCost.SHA3; newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-2)); break; case CALLDATACOPY: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-3)); break; case CODECOPY: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-3)); break; case EXTCODECOPY: newMemSize = memNeeded(stack.get(stack.size()-2), stack.get(stack.size()-4)); break; case CALL: case CALLCODE: gasCost = GasCost.CALL; DataWord callGasWord = stack.get(stack.size()-1); if(callGasWord.compareTo(program.getGas()) == 1) { throw program.new OutOfGasException(); } callGas = callGasWord.longValue(); BigInteger in = memNeeded(stack.get(stack.size()-4), stack.get(stack.size()-5)); BigInteger out = memNeeded(stack.get(stack.size()-6), stack.get(stack.size()-7)); newMemSize = in.max(out); break; case CREATE: gasCost = GasCost.CREATE; newMemSize = memNeeded(stack.get(stack.size()-2), stack.get(stack.size()-3)); break; default: break; } program.spendGas(gasCost, op.name()); if(newMemSize.compareTo(MAX_GAS) == 1) { throw program.new OutOfGasException(); } long memoryUsage = (newMemSize.longValue() + 31) / 32 * 32; if (memoryUsage > oldMemSize) { memWords = (memoryUsage - oldMemSize) / 32; long memGas = GasCost.MEMORY * memWords; program.spendGas(memGas, op.name() + \" (memory usage)\"); gasCost += memGas; } if(program.getNumber().intValue() == CONFIG.dumpBlock()) this.dumpLine(op, gasBefore, gasCost+callGas, memWords, program); switch (op) { case STOP:{ program.setHReturn(ByteBuffer.allocate(0)); program.stop(); } break; case ADD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" + \" + word2.value(); word1.add(word2); program.stackPush(word1); program.step(); } break; case MUL:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" * \" + word2.value(); word1.mul(word2); program.stackPush(word1); program.step(); } break; case SUB:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" - \" + word2.value(); word1.sub(word2); program.stackPush(word1); program.step(); } break; case DIV:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" / \" + word2.value(); word1.div(word2); program.stackPush(word1); program.step(); } break; case SDIV:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" / \" + word2.sValue(); word1.sDiv(word2); program.stackPush(word1); program.step(); } break; case MOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" % \" + word2.value(); word1.mod(word2); program.stackPush(word1); program.step(); } break; case SMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" #% \" + word2.sValue(); word1.sMod(word2); program.stackPush(word1); program.step(); } break; case EXP:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" ** \" + word2.value(); word1.exp(word2); program.stackPush(word1); program.step(); } break; case NEG:{ DataWord word1 = program.stackPop(); word1.negate(); if (logger.isInfoEnabled()) hint = \"\" + word1.value(); program.stackPush(word1); program.step(); } break; case LT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" < \" + word2.value(); if (word1.value().compareTo(word2.value()) == -1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case SLT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" < \" + word2.sValue(); if (word1.sValue().compareTo(word2.sValue()) == -1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case SGT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" > \" + word2.sValue(); if (word1.sValue().compareTo(word2.sValue()) == 1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case GT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" > \" + word2.value(); if (word1.value().compareTo(word2.value()) == 1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case EQ:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" == \" + word2.value(); if (word1.xor(word2).isZero()) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case NOT: { DataWord word1 = program.stackPop(); if (word1.isZero()) { word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } if (logger.isInfoEnabled()) hint = \"\" + word1.value(); program.stackPush(word1); program.step(); } break; case AND:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" && \" + word2.value(); word1.and(word2); program.stackPush(word1); program.step(); } break; case OR: { DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" || \" + word2.value(); word1.or(word2); program.stackPush(word1); program.step(); } break; case XOR: { DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" ^ \" + word2.value(); word1.xor(word2); program.stackPush(word1); program.step(); } break; case BYTE:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord result = null; if (word1.value().compareTo(_32_) == -1) { byte tmp = word2.getData()[word1.intValue()]; word2.and(DataWord.ZERO); word2.getData()[31] = tmp; result = word2; } else { result = new DataWord(); } if (logger.isInfoEnabled()) hint = \"\" + result.value(); program.stackPush(result); program.step(); } break; case ADDMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord word3 = program.stackPop(); word1.addmod(word2, word3); program.stackPush(word1); program.step(); } break; case MULMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord word3 = program.stackPop(); word1.mulmod(word2, word3); program.stackPush(word1); program.step(); } break; case SHA3:{ DataWord memOffsetData = program.stackPop(); DataWord lengthData = program.stackPop(); ByteBuffer buffer = program.memoryChunk(memOffsetData, lengthData); byte[] encoded = HashUtil.sha3(buffer.array()); DataWord word = new DataWord(encoded); if (logger.isInfoEnabled()) hint = word.toString(); program.stackPush(word); program.step(); } break; case ADDRESS:{ DataWord address = program.getOwnerAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(address.getLast20Bytes()); program.stackPush(address); program.step(); } break; case BALANCE:{ DataWord address = program.stackPop(); DataWord balance = program.getBalance(address); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(address.getLast20Bytes()) + \" balance: \" + balance.longValue(); program.stackPush(balance); program.step(); } break; case ORIGIN:{ DataWord originAddress = program.getOriginAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(originAddress.getLast20Bytes()); program.stackPush(originAddress); program.step(); } break; case CALLER:{ DataWord callerAddress = program.getCallerAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(callerAddress.getLast20Bytes()); program.stackPush(callerAddress); program.step(); } break; case CALLVALUE:{ DataWord callValue = program.getCallValue(); if (logger.isInfoEnabled()) hint = \"value: \" + callValue; program.stackPush(callValue); program.step(); } break; case CALLDATALOAD:{ DataWord dataOffs = program.stackPop(); DataWord value = program.getDataValue(dataOffs); if (logger.isInfoEnabled()) hint = \"data: \" + value; program.stackPush(value); program.step(); } break; case CALLDATASIZE:{ DataWord dataSize = program.getDataSize(); if (logger.isInfoEnabled()) hint = \"size: \" + dataSize.value(); program.stackPush(dataSize); program.step(); } break; case CALLDATACOPY:{ DataWord memOffsetData = program.stackPop(); DataWord dataOffsetData = program.stackPop(); DataWord lengthData = program.stackPop(); byte[] msgData = program.getDataCopy(dataOffsetData, lengthData); if (logger.isInfoEnabled()) hint = \"data: \" + Hex.toHexString(msgData); program.memorySave(memOffsetData.intValue(), msgData); program.step(); } break; case CODESIZE: case EXTCODESIZE: { int length; if (op == OpCode.CODESIZE) length = program.getCode().length; else { DataWord address = program.stackPop(); length = program.getCodeAt(address).length; } DataWord codeLength = new DataWord(length); if (logger.isInfoEnabled()) hint = \"size: \" + length; program.stackPush(codeLength); program.step(); } break; case CODECOPY: case EXTCODECOPY: { byte[] fullCode; if (op == OpCode.CODECOPY) fullCode = program.getCode(); else { DataWord address = program.stackPop(); fullCode = program.getCodeAt(address); } DataWord memOffsetData = program.stackPop(); BigInteger codeOffsetData = program.stackPop().value(); BigInteger lengthData = program.stackPop().value(); if (fullCode == null || BigInteger.valueOf(fullCode.length).compareTo( codeOffsetData.add(lengthData)) < 0) { program.stop(); break; } int length = lengthData.intValue(); int codeOffset = codeOffsetData.intValue(); byte[] codeCopy = new byte[length]; System.arraycopy(fullCode, codeOffset, codeCopy, 0, length); if (logger.isInfoEnabled()) hint = \"code: \" + Hex.toHexString(codeCopy); program.memorySave(memOffsetData.intValue(), codeCopy); program.step(); } break; case GASPRICE:{ DataWord gasPrice = program.getGasPrice(); if (logger.isInfoEnabled()) hint = \"price: \" + gasPrice.toString(); program.stackPush(gasPrice); program.step(); } break; case PREVHASH: { DataWord prevHash = program.getPrevHash(); if (logger.isInfoEnabled()) hint = \"prevHash: \" + prevHash; program.stackPush(prevHash); program.step(); } break; case COINBASE: { DataWord coinbase = program.getCoinbase(); if (logger.isInfoEnabled()) hint = \"coinbase: \" + Hex.toHexString(coinbase.getLast20Bytes()); program.stackPush(coinbase); program.step(); } break; case TIMESTAMP:{ DataWord timestamp = program.getTimestamp(); if (logger.isInfoEnabled()) hint = \"timestamp: \" + timestamp.value(); program.stackPush(timestamp); program.step(); } break; case NUMBER:{ DataWord number = program.getNumber(); if (logger.isInfoEnabled()) hint = \"number: \" + number.value(); program.stackPush(number); program.step(); } break; case DIFFICULTY:{ DataWord difficulty = program.getDifficulty(); if (logger.isInfoEnabled()) hint = \"difficulty: \" + difficulty; program.stackPush(difficulty); program.step(); } break; case GASLIMIT:{ DataWord gaslimit = program.getGaslimit(); if (logger.isInfoEnabled()) hint = \"gaslimit: \" + gaslimit; program.stackPush(gaslimit); program.step(); } break; case POP:{ program.stackPop(); program.step(); } break; case DUP1: case DUP2: case DUP3: case DUP4: case DUP5: case DUP6: case DUP7: case DUP8: case DUP9: case DUP10: case DUP11: case DUP12: case DUP13: case DUP14: case DUP15: case DUP16:{ int n = op.val() - OpCode.DUP1.val() + 1; DataWord word_1 = stack.get(stack.size() - n); program.stackPush(word_1.clone()); program.step(); } break; case SWAP1: case SWAP2: case SWAP3: case SWAP4: case SWAP5: case SWAP6: case SWAP7: case SWAP8: case SWAP9: case SWAP10: case SWAP11: case SWAP12: case SWAP13: case SWAP14: case SWAP15: case SWAP16:{ int n = op.val() - OpCode.SWAP1.val() + 2; DataWord word_1 = stack.peek(); stack.set(stack.size() - 1, stack.get(stack.size() - n)); stack.set(stack.size() - n, word_1); program.step(); } break; case MLOAD:{ DataWord addr = program.stackPop(); DataWord data = program.memoryLoad(addr); if (logger.isInfoEnabled()) hint = \"data: \" + data; program.stackPush(data); program.step(); } break; case MSTORE:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); if (logger.isInfoEnabled()) hint = \"addr: \" + addr + \" value: \" + value; program.memorySave(addr, value); program.step(); } break; case MSTORE8:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); byte[] byteVal = {value.getData()[31]}; program.memorySave(addr.intValue(), byteVal); program.step(); } break; case SLOAD:{ DataWord key = program.stackPop(); DataWord val = program.storageLoad(key); if (logger.isInfoEnabled()) hint = \"key: \" + key + \" value: \" + val; if (val == null) { val = key.and(DataWord.ZERO); } program.stackPush(val); program.step(); } break; case SSTORE:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); if (logger.isInfoEnabled()) hint = \"addr: \" + addr + \" value: \" + value; program.storageSave(addr, value); program.step(); } break; case JUMP:{ DataWord pos = program.stackPop(); int nextPC = pos.intValue(); if (nextPC != 0 && program.getOp(nextPC-1) != OpCode.JUMPDEST.val()) throw new BadJumpDestinationException(); if (logger.isInfoEnabled()) hint = \"~> \" + nextPC; program.setPC(nextPC); } break; case JUMPI:{ DataWord pos = program.stackPop(); DataWord cond = program.stackPop(); if (!cond.isZero()) { int nextPC = pos.intValue(); if (nextPC != 0 && program.getOp(nextPC-1) != OpCode.JUMPDEST.val()) throw new BadJumpDestinationException(); if (logger.isInfoEnabled()) hint = \"~> \" + nextPC; program.setPC(nextPC); } else { program.step(); } } break; case PC:{ int pc = program.getPC(); DataWord pcWord = new DataWord(pc); if (logger.isInfoEnabled()) hint = pcWord.toString(); program.stackPush(pcWord); program.step(); } break; case MSIZE:{ int memSize = program.getMemSize(); DataWord wordMemSize = new DataWord(memSize); if (logger.isInfoEnabled()) hint = \"\" + memSize; program.stackPush(wordMemSize); program.step(); } break; case GAS:{ DataWord gas = program.getGas(); if (logger.isInfoEnabled()) hint = \"\" + gas; program.stackPush(gas); program.step(); } break; case PUSH1: case PUSH2: case PUSH3: case PUSH4: case PUSH5: case PUSH6: case PUSH7: case PUSH8: case PUSH9: case PUSH10: case PUSH11: case PUSH12: case PUSH13: case PUSH14: case PUSH15: case PUSH16: case PUSH17: case PUSH18: case PUSH19: case PUSH20: case PUSH21: case PUSH22: case PUSH23: case PUSH24: case PUSH25: case PUSH26: case PUSH27: case PUSH28: case PUSH29: case PUSH30: case PUSH31: case PUSH32:{ program.step(); int nPush = op.val() - PUSH1.val() + 1; byte[] data = program.sweep(nPush); hint = \"\" + Hex.toHexString(data); program.stackPush(data); } break; case JUMPDEST:{ program.step(); } break; case CREATE:{ DataWord value = program.stackPop(); DataWord inOffset = program.stackPop(); DataWord inSize = program.stackPop(); if (logger.isInfoEnabled()) logger.info(logString, program.getPC(), String.format(\"%-12s\", op.name()), program.getGas().value(), program.invokeData.getCallDeep(), hint); program.createContract(value, inOffset, inSize); program.step(); } break; case CALL: case CALLCODE: { DataWord gas = program.stackPop(); DataWord codeAddress = program.stackPop(); DataWord value = program.stackPop(); DataWord inDataOffs = program.stackPop(); DataWord inDataSize = program.stackPop(); DataWord outDataOffs = program.stackPop(); DataWord outDataSize = program.stackPop(); if (logger.isInfoEnabled()) { hint = \"addr: \" + Hex.toHexString(codeAddress.getLast20Bytes()) + \" gas: \" + gas.shortHex() + \" inOff: \" + inDataOffs.shortHex() + \" inSize: \" + inDataSize.shortHex(); logger.info(logString, program.getPC(), String.format(\"%-12s\", op.name()), program.getGas().value(), program.invokeData.getCallDeep(), hint); } MessageCall msg = new MessageCall( op.equals(CALL) ? MsgType.CALL : MsgType.STATELESS, gas, codeAddress, value, inDataOffs, inDataSize, outDataOffs, outDataSize); program.callToAddress(msg); program.step(); } break; case RETURN:{ DataWord offset = program.stackPop(); DataWord size = program.stackPop(); ByteBuffer hReturn = program.memoryChunk(offset, size); program.setHReturn(hReturn); if (logger.isInfoEnabled()) hint = \"data: \" + Hex.toHexString(hReturn.array()) + \" offset: \" + offset.value() + \" size: \" + size.value(); program.step(); program.stop(); } break; case SUICIDE:{ DataWord address = program.stackPop(); program.suicide(address); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(program.getOwnerAddress().getLast20Bytes()); program.stop(); } break; default: break; } if (logger.isInfoEnabled() && !op.equals(CALL) && !op.equals(CREATE)) logger.info(logString, stepBefore, String.format(\"%-12s\", op.name()), program.getGas().longValue(), program.invokeData.getCallDeep(), hint); vmCounter++; } catch (RuntimeException e) { if(e instanceof OutOfGasException) program.spendAllGas(); logger.warn(\"VM halted\", e.getMessage()); program.stop(); throw e; } finally { program.fullTrace(); } }### Assistant: @Test public void testDIV_4() { VM vm = new VM(); program = new Program(Hex.decode(\"6015609904\"), invoke); String s_expected_1 = \"0000000000000000000000000000000000000000000000000000000000000007\"; vm.step(program); vm.step(program); vm.step(program); DataWord item1 = program.stackPop(); assertEquals(s_expected_1, Hex.toHexString(item1.getData()).toUpperCase()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void initialize(ServerRuntimeContext serverRuntimeContext) { super.initialize(serverRuntimeContext); fullDomain = EntityUtils.createComponentDomain(subdomain, serverRuntimeContext); try { startProxy(); } catch (Exception e) { throw new RuntimeException(\"Failed to start SOCKS5 proxy\", e); } }### Assistant: @Test public void discoItems() throws Exception { ServiceCollector collector = new ServiceCollector(); when(serverRuntimeContext.getServerRuntimeContextService( ServiceDiscoveryRequestListenerRegistry.SERVICE_DISCOVERY_REQUEST_LISTENER_REGISTRY)) .thenReturn(collector); module = new Socks5Module(\"socks\"); module.initialize(serverRuntimeContext); InfoRequest infoRequest = new InfoRequest(FROM, SERVER, null, \"id1\"); List<Item> items = collector.processItemRequest(infoRequest, null); List<Item> expected = Arrays.asList(new Item(COMPONENT)); Assert.assertEquals(expected, items); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String toString() { return latitude + \":\" + longitude; }### Assistant: @Test public void testToString() { Assert.assertEquals(\"49.59241:11.004174\", erlangen.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String reflectedGetAdvertisingId(final Object adInfo, final String defaultValue) { try { return (String) MethodBuilderFactory.create(adInfo, \"getId\").execute(); } catch (Exception exception) { return defaultValue; } }### Assistant: @Test public void reflectedGetAdvertisingId_whenAdvertisingIdIsSet_shouldReturnAdvertisingId() throws Exception { MethodBuilderFactory.setInstance(new MethodBuilderFactory()); assertThat(GpsHelper.reflectedGetAdvertisingId(adInfo, null)).isEqualTo(adInfo.ADVERTISING_ID); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public T next() { try { T next = delegate.next(); if (expCnt == 0) throw new ConcurrentModificationException(eMsg); expCnt--; return next; } catch (NoSuchElementException e) { if (expCnt == 0) throw e; else throw new ConcurrentModificationException(eMsg); } }### Assistant: @Test(expected = ConcurrentModificationException.class) public void testNextWhenIteratorHasMoreElementsThanExpected() { List<Integer> list = Arrays.asList(1, 2, 3); Iterator<Integer> iter = new IteratorWithConcurrentModificationChecker<>(list.iterator(), 2, \"Exception\"); assertEquals(Integer.valueOf(1), iter.next()); assertEquals(Integer.valueOf(2), iter.next()); iter.next(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<SystemNotificationDto> findAllSystemNotificationDtosByPatient( long patientId) { List<SystemNotification> systemNotifications = systemNotificationRepository .findAllByPatientId(patientId); List<SystemNotificationDto> systemNotificationDtos = makeSystemNotificationDtos(); for (SystemNotification systemNotification : systemNotifications) { systemNotificationDtos.add(modelMapper.map(systemNotification, SystemNotificationDto.class)); } return getReversed(systemNotificationDtos); }### Assistant: @Test public void testFindAllSystemNotificationDtosByPatient() { SystemNotificationService spy = spy(snst); List<SystemNotification> systemNotifications = new ArrayList<SystemNotification>(); SystemNotification systemNotification = new SystemNotification(); systemNotifications.add(systemNotification); when(systemNotificationRepository.findAllByPatientId(anyLong())) .thenReturn(systemNotifications); ArrayList<SystemNotificationDto> systemNotificationDtos = new ArrayList<SystemNotificationDto>(); when(spy.makeSystemNotificationDtos()).thenReturn( systemNotificationDtos); SystemNotificationDto systemNotificationDto = new SystemNotificationDto(); when(modelMapper.map(systemNotification, SystemNotificationDto.class)) .thenReturn(systemNotificationDto); systemNotificationDtos.add(systemNotificationDto); Assert.assertEquals( spy.findAllSystemNotificationDtosByPatient(anyLong()), systemNotificationDtos); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static CriteriaValue<?> determineCriteriaValue(Object object) { if (object == null) { throw new IllegalArgumentException(\"Given criteria value cannot be null.\"); } else if (object instanceof CharSequence) { return new CriteriaStringValue((CharSequence)object); } else if (object instanceof Boolean) { return new CriteriaBooleanValue((Boolean)object); } else if (object instanceof DateTime) { return new CriteriaDateTimeValue((DateTime)object); } else if (object instanceof Calendar) { return new CriteriaDateTimeValue((Calendar)object); } else if (object instanceof Date) { return new CriteriaDateTimeValue((Date)object); } else if (object instanceof BigInteger) { return new CriteriaIntegerValue((BigInteger)object); } else if (object instanceof Short) { return new CriteriaIntegerValue((Short)object); } else if (object instanceof Integer) { return new CriteriaIntegerValue((Integer)object); } else if (object instanceof AtomicInteger) { return new CriteriaIntegerValue((AtomicInteger)object); } else if (object instanceof Long) { return new CriteriaIntegerValue((Long)object); } else if (object instanceof AtomicLong) { return new CriteriaIntegerValue((AtomicLong)object); } else if (object instanceof BigDecimal) { return new CriteriaDecimalValue((BigDecimal)object); } else if (object instanceof Float) { return new CriteriaDecimalValue((Float)object); } else if (object instanceof Double) { return new CriteriaDecimalValue((Double)object); } else if (object instanceof KualiPercent) { return new CriteriaKualiPercentValue((KualiPercent)object); } else if (object instanceof KualiDecimal) { return new CriteriaKualiDecimalValue((KualiDecimal)object); } else if (object instanceof KualiInteger) { return new CriteriaKualiIntegerValue((KualiInteger)object); } else if (object instanceof PropertyPath) { return new CriteriaPropertyPathValue((PropertyPath)object); } else if (object instanceof CriteriaValue) { return (CriteriaValue<?>)object; } throw new IllegalArgumentException(\"Failed to translate the given object to a CriteriaValue: \" + object); }### Assistant: @Test public void testKualiInteger() { KualiInteger kualiInteger = new KualiInteger(33) ; CriteriaValue criteriaValueKualiInteger = CriteriaSupportUtils.determineCriteriaValue(kualiInteger); assertEquals(kualiInteger, criteriaValueKualiInteger.getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getFallbackValue(){ if(parameter instanceof StringLiteral){ return ((StringLiteral) parameter).getValue(null); } else { return ((Categorize2String)parameter).getFallbackValue().getValue(null); } }### Assistant: @Test public void testGetFallback() throws Exception{ CategorizedString cs = new CategorizedString(getCategorize2String()); assertTrue(cs.getFallbackValue().equals(\"fallback\")); cs = new CategorizedString(new StringLiteral(\"yo\")); assertTrue(cs.getFallbackValue().equals(\"yo\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: SetMultimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects(Project project, User user) throws SW360Exception { Set<String> visitedProjectIds = new HashSet<>(); SetMultimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects = HashMultimap.create(); releaseIdToProjects(project, user, visitedProjectIds, releaseIdToProjects); return releaseIdToProjects; }### Assistant: @Test public void testReleaseIdToEmptyProjects() throws Exception { SetMultimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects = handler.releaseIdToProjects(new Project().setId(\"p4\"), user1); Set<String> releaseIds = releaseIdToProjects.keySet(); assertTrue(\"Release IDs size\", releaseIds.size() == 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public long getAvailableSpace() { return Long.MAX_VALUE; }### Assistant: @Test public void shouldReturnLongMaxValue() { final long availableSpace = service.getAvailableSpace(); assertEquals(Long.MAX_VALUE, availableSpace); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static Range[] getXYRangesFromLatLonRect(LatLonRect llr, GridCoordSystem gcs) throws InvalidRangeException { double[][] coords = { { llr.getLatMin(), llr.getLonMin() }, { llr.getLatMin(), llr.getLonMax() }, { llr.getLatMax(), llr.getLonMax() }, { llr.getLatMax(), llr.getLonMin() }, }; int[] currentIndices = new int[2]; int lowerX = Integer.MAX_VALUE; int upperX = Integer.MIN_VALUE; int lowerY = Integer.MAX_VALUE; int upperY = Integer.MIN_VALUE; for (int i = 0; i < coords.length; ++i) { gcs.findXYindexFromLatLon(coords[i][0], coords[i][1], currentIndices); if (currentIndices[0] < lowerX) { lowerX = currentIndices[0] ; } if (currentIndices[0] > upperX) { upperX = currentIndices[0] ; } if (currentIndices[1] < lowerY) { lowerY = currentIndices[1] ; } if (currentIndices[1] > upperY) { upperY = currentIndices[1] ; } } return bufferXYRanges(gcs, new Range[] { new Range(lowerX, upperX), new Range(lowerY, upperY), } ); }### Assistant: @Test public void testRangesFromLatLonRect_Standard() throws TransformException, IOException, InvalidRangeException { LatLonRect llr = makeLatLonRect(ncLocation); GridCoordSystem gcs = getGridCoordinateSystem(); Range[] range = GridUtility.getXYRangesFromLatLonRect(llr, gcs); assertNotNull(range); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void addResource(Resource resource) { resourceManager.addResource(resource); }### Assistant: @Test void testAddResource() throws Exception { DefaultResourceManager resourceManager = new DefaultResourceManager(); DefaultWebApplication webApp = new DefaultWebApplication(); webApp.setResourceManager(resourceManager); webApp.addResource(new DirectoryResource(new File(\".\"))); assertNotNull(webApp.getResource(\"/src/main/java\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void calculateCharges(IAtomContainer container) throws CDKException { try { this.assignGasteigerPiPartialCharges(container, true); } catch (Exception exception) { throw new CDKException(\"Could not calculate Gasteiger-Marsili PEPE charges: \" + exception.getMessage(), exception); } }### Assistant: @Test public void testAromaticBondOrders() throws Exception { GasteigerPEPEPartialCharges peoe = new GasteigerPEPEPartialCharges(); String smiles1 = \"c1ccccc1\"; SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance()); IAtomContainer mol1 = sp.parseSmiles(smiles1); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol1); Aromaticity.cdkLegacy().apply(mol1); addExplicitHydrogens(mol1); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol1); lpcheck.saturate(mol1); List<Boolean> oldBondOrders = new ArrayList<Boolean>(); for (int i = 0; i < mol1.getBondCount(); i++) oldBondOrders.add(mol1.getBond(i).getFlag(CDKConstants.ISAROMATIC)); peoe.calculateCharges(mol1); List<Boolean> newBondOrders = new ArrayList<Boolean>(); for (int i = 0; i < mol1.getBondCount(); i++) newBondOrders.add(mol1.getBond(i).getFlag(CDKConstants.ISAROMATIC)); for (int i = 0; i < oldBondOrders.size(); i++) { Assert.assertEquals(\"bond \" + i + \" does not match\", oldBondOrders.get(i), newBondOrders.get(i)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static long getTimeToLive(URI uri) { return getLongParameter(TIME_TO_LIVE_PATTERN, uri, Message.DEFAULT_TIME_TO_LIVE); }### Assistant: @Test public void getTimeToLive() throws Exception { URI uri = new URI(\"jms:RequestQueue?timeToLive=100\"); long timeToLive = JmsTransportUtils.getTimeToLive(uri); assertEquals(\"Invalid timeToLive\", 100, timeToLive); uri = new URI(\"jms:RequestQueue?replyToName=RESP_QUEUE\"); timeToLive = JmsTransportUtils.getTimeToLive(uri); assertEquals(\"Invalid timeToLive\", Message.DEFAULT_TIME_TO_LIVE, timeToLive); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static LocalServiceRequest create(String url) throws Exception { return create(url, null); }### Assistant: @Test public void testParseLocalURLLangParams() throws Exception { assertLangParams(LocalServiceRequest.create(\"local: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public URI resolve(Schema schema, String road, int version) { String key = newKey(road, version); byte[] bytes = schema.toString().getBytes(Charsets.UTF_8); ObjectMetadata objectMetadata = new ObjectMetadata(); objectMetadata.setContentLength(bytes.length); if (enableServerSideEncryption) { objectMetadata.setSSEAlgorithm(ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION); } try (InputStream in = new ByteArrayInputStream(bytes)) { Upload upload = transferManager.upload(bucket, key, in, objectMetadata); upload.waitForCompletion(); } catch (IOException e) { throw new MetaStoreException(String.format(\"Error closing schema stream: bucket='%s', key='%s'\", bucket, key), e); } catch (AmazonClientException | InterruptedException e) { throw new MetaStoreException(String.format(\"Error uploading schema: bucket='%s', key='%s'\", bucket, key), e); } return newS3Uri(key); }### Assistant: @Test(expected = MetaStoreException.class) public void resolveAmazonServiceExceptionOnUpload() throws Exception { when(transferManager.upload(anyString(), anyString(), any(InputStream.class), any(ObjectMetadata.class))) .thenThrow(AmazonServiceException.class); uriResolver.resolve(SCHEMA, ROAD, VERSION); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ParsedPage(){ this.superSection = new SectionContainer(null,0); }### Assistant: @Test public void testParsedPage(){ String title = \"Wikipedia API\"; Page p = null; try { p = wiki.getPage(title); } catch (WikiApiException e) { e.printStackTrace(); fail(\"A WikiApiException occurred while getting the page \" + title); } String text = \"Wikipedia API ist die wichtigste Software \u00fcberhaupt.\" + LF + \"Wikipedia API. Nicht zu \u00fcbertreffen. Unglaublich http: MediaWikiParserFactory pf = new MediaWikiParserFactory(Language.english); MediaWikiParser parser = pf.createParser(); ParsedPage pp = parser.parse(p.getText()); assertNotNull(pp); int i=0; for (Link link : pp.getSection(0).getLinks()) { if (i==0) { assertEquals(\"Software\", link.getText()); } else if (i==1) { assertEquals(\"Wikipedia API\", link.getText()); assertEquals(\"JWPL\", link.getTarget()); } i++; } String parsedPageText = pp.getText(); assertNotNull(parsedPageText); assertEquals(text, parsedPageText); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static public float sin(float radians) { return Sin.table[(int) (radians * radToIndex) & SIN_MASK]; }### Assistant: @Test public void testSin() { Assert.assertEquals(0, MathUtil.sin(0.0f), 0.01); Assert.assertEquals(0.5f, MathUtil.sin(PI / 6), 0.01); Assert.assertEquals(1, MathUtil.sin(HALF_PI), 0.01); Assert.assertEquals(0, MathUtil.sin(PI * 2), 0.01); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> Serializer from(T object) { response.setContentType(\"application/xml\"); return getSerializer().from(object); }### Assistant: @Test public void shouldSerializeCollectionWithPrefixTag() { String expectedResult = \" <order>\\n <price>15.0</price>\\n <comments>pack it nicely, please</comments>\\n </order>\\n\"; expectedResult += expectedResult; expectedResult = \"<orders>\\n\" + expectedResult + \"</orders>\"; Order order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\"); serialization.from(Arrays.asList(order, order), \"orders\").serialize(); assertThat(result(), is(equalTo(expectedResult))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Credentials getCredentials() { return credentials; }### Assistant: @Test public void testDefaultConstructor() { CredentialsProvider provider = mockProvider(new EnvironmentVariableCredentialsProvider()); assert provider.getCredentials().isEqualTo(new Credentials(userName, userPassword)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static public FieldValue evaluateConstant(Constant constant){ boolean missing = constant.isMissing(); if(missing){ return FieldValues.MISSING_VALUE; } Object value = constant.getValue(); DataType dataType = constant.getDataType(); if(dataType != null){ if(isEmptyContent(value)){ switch(dataType){ case STRING: return FieldValueUtil.create(TypeInfos.CATEGORICAL_STRING, \"\"); default: return FieldValues.MISSING_VALUE; } } } else { if(isEmptyContent(value)){ return FieldValues.MISSING_VALUE; } dataType = TypeUtil.getConstantDataType(value); } OpType opType = TypeUtil.getOpType(dataType); return FieldValueUtil.create(dataType, opType, value); }### Assistant: @Test public void evaluateConstant(){ Constant emptyString = new Constant() .setDataType(DataType.STRING); assertEquals(\"\", evaluate(emptyString)); emptyString.setMissing(true); assertEquals(null, evaluate(emptyString)); Constant stringThree = new Constant(\"3\") .setDataType(DataType.STRING); assertEquals(\"3\", evaluate(stringThree)); stringThree.setMissing(true); assertEquals(null, evaluate(stringThree)); Constant integerThree = new Constant(\"3\") .setDataType(DataType.INTEGER); assertEquals(3, evaluate(integerThree)); integerThree.setMissing(true); assertEquals(null, evaluate(integerThree)); Constant floatThree = new Constant(\"3\") .setDataType(DataType.FLOAT); assertEquals(3f, evaluate(floatThree)); floatThree.setMissing(true); assertEquals(null, evaluate(floatThree)); Constant doubleThree = new Constant(\"3\") .setDataType(DataType.DOUBLE); assertEquals(3d, evaluate(doubleThree)); doubleThree.setMissing(true); assertEquals(null, evaluate(doubleThree)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void perform(PrerequisiteCheck prerequisiteCheck, PrereqCheckRequest request) throws AmbariException { final String clusterName = request.getClusterName(); final Cluster cluster = clustersProvider.get().getCluster(clusterName); Collection<Host> hosts = cluster.getHosts(); for (Host host : hosts) { MaintenanceState maintenanceState = host.getMaintenanceState(cluster.getClusterId()); if (maintenanceState != MaintenanceState.OFF) { prerequisiteCheck.getFailedOn().add(host.getHostName()); } } if (!prerequisiteCheck.getFailedOn().isEmpty()) { PrereqCheckStatus status = request.getUpgradeType() == UpgradeType.HOST_ORDERED ? PrereqCheckStatus.FAIL : PrereqCheckStatus.WARNING; prerequisiteCheck.setStatus(status); String failReason = request.getUpgradeType() == UpgradeType.HOST_ORDERED ? getFailReason(KEY_CANNOT_START_HOST_ORDERED, prerequisiteCheck, request) : getFailReason(prerequisiteCheck, request); prerequisiteCheck.setFailReason(failReason); } }### Assistant: @Test public void testPerform() throws Exception { final HostMaintenanceModeCheck hostMaintenanceModeCheck = new HostMaintenanceModeCheck(); hostMaintenanceModeCheck.clustersProvider = new Provider<Clusters>() { @Override public Clusters get() { return clusters; } }; final Cluster cluster = Mockito.mock(Cluster.class); Mockito.when(cluster.getClusterId()).thenReturn(1L); Mockito.when(cluster.getCurrentStackVersion()).thenReturn(new StackId(\"HDP\", \"2.2\")); Mockito.when(clusters.getCluster(\"cluster\")).thenReturn(cluster); final List<Host> hosts = new ArrayList<>(); final Host host1 = Mockito.mock(Host.class); final Host host2 = Mockito.mock(Host.class); final Host host3 = Mockito.mock(Host.class); Mockito.when(host1.getMaintenanceState(1L)).thenReturn(MaintenanceState.OFF); Mockito.when(host2.getMaintenanceState(1L)).thenReturn(MaintenanceState.OFF); Mockito.when(host3.getMaintenanceState(1L)).thenReturn(MaintenanceState.OFF); hosts.add(host1); hosts.add(host2); hosts.add(host3); Mockito.when(cluster.getHosts()).thenReturn(hosts); PrerequisiteCheck check = new PrerequisiteCheck(null, null); hostMaintenanceModeCheck.perform(check, new PrereqCheckRequest(\"cluster\")); Assert.assertEquals(PrereqCheckStatus.PASS, check.getStatus()); check = new PrerequisiteCheck(null, null); Mockito.when(host3.getMaintenanceState(1L)).thenReturn(MaintenanceState.ON); hostMaintenanceModeCheck.perform(check, new PrereqCheckRequest(\"cluster\")); Assert.assertEquals(PrereqCheckStatus.WARNING, check.getStatus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static long parseTimestampFromHdfsPath(String hdfsPath) { int index = hdfsPath.lastIndexOf('/'); if (index >= 0) { return Long.parseLong(hdfsPath.substring(index + 1)); } else { return Long.parseLong(hdfsPath); } }### Assistant: @Test public void testParseTimestampFromHdfsPath() { assertEquals(1234567890123l, ClusterStatusServlet.parseTimestampFromHdfsPath(\"/1234567890123\")); assertEquals(1234567890123l, ClusterStatusServlet.parseTimestampFromHdfsPath(\"1234567890123\")); assertEquals(1234567890123l, ClusterStatusServlet.parseTimestampFromHdfsPath(\"/a/b/1234567890123\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void processDomainPolicies(DomainData domainData, DataCache domainCache) { com.yahoo.athenz.zms.SignedPolicies signedPolicies = domainData.getPolicies(); if (signedPolicies == null) { return; } com.yahoo.athenz.zms.DomainPolicies domainPolicies = signedPolicies.getContents(); if (domainPolicies == null) { return; } List<com.yahoo.athenz.zms.Policy> policies = domainPolicies.getPolicies(); if (policies == null) { return; } List<Role> roles = domainData.getRoles(); HashMap<String, Role> roleMap = new HashMap<>(); for (Role role : roles) { roleMap.put(role.getName(), role); } for (com.yahoo.athenz.zms.Policy policy : policies) { domainCache.processPolicy(domainData.getName(), policy, roleMap); } }### Assistant: @Test public void testProcessDomainPolicies() { ChangeLogStore clogStore = new MockZMSFileChangeLogStore(\"/tmp/zts_server_unit_tests/zts_root\", pkey, \"0\"); DataStore store = new DataStore(clogStore, null); List<com.yahoo.athenz.zms.Policy> policies = new ArrayList<>(); com.yahoo.athenz.zms.Policy policy = new com.yahoo.athenz.zms.Policy(); com.yahoo.athenz.zms.Assertion assertion = new com.yahoo.athenz.zms.Assertion(); assertion.setResource(\"sports:role.readers\"); assertion.setAction(\"assume_role\"); assertion.setRole(\"coretech:role.readers\"); List<com.yahoo.athenz.zms.Assertion> assertions = new ArrayList<>(); assertions.add(assertion); policy.setAssertions(assertions); policies.add(policy); List<Role> roles = new ArrayList<>(); Role role = new Role(); role.setName(\"coretech:role.admin\"); List<RoleMember> members = new ArrayList<>(); members.add(new RoleMember().setMemberName(\"user_domain.user\")); role.setRoleMembers(members); roles.add(role); role = new Role(); role.setName(\"coretech:role.readers\"); members = new ArrayList<>(); members.add(new RoleMember().setMemberName(\"user_domain.user\")); role.setRoleMembers(members); roles.add(role); com.yahoo.athenz.zms.DomainPolicies domainPolicies = new com.yahoo.athenz.zms.DomainPolicies(); domainPolicies.setDomain(\"coretech\"); domainPolicies.setPolicies(policies); com.yahoo.athenz.zms.SignedPolicies signedPolicies = new com.yahoo.athenz.zms.SignedPolicies(); signedPolicies.setContents(domainPolicies); signedPolicies.setSignature(Crypto.sign(SignUtils.asCanonicalString(domainPolicies), pkey)); signedPolicies.setKeyId(\"0\"); DomainData domainData = new DomainData(); domainData.setName(\"coretech\"); domainData.setPolicies(signedPolicies); domainData.setRoles(roles); DataCache dataCache = new DataCache(); dataCache.setDomainData(domainData); store.processDomainRoles(domainData, dataCache); assertEquals(dataCache.getMemberRoleSet(\"user_domain.user\").size(), 2); assertTrue(dataCache.getMemberRoleSet(\"user_domain.user\") .contains(new MemberRole(\"coretech:role.admin\", 0))); assertTrue(dataCache.getMemberRoleSet(\"user_domain.user\") .contains(new MemberRole(\"coretech:role.readers\", 0))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void handleRoundingLineItem(Bill bill) { ICashierOptionsService cashOptService = Context.getService(ICashierOptionsService.class); CashierOptions options = cashOptService.getOptions(); if (options.getRoundToNearest().equals(BigDecimal.ZERO)) { return; } if (options.getRoundingItemUuid() == null) { throw new APIException( \"No rounding item specified in options. This must be set in order to use rounding for bill totals.\"); } IItemDataService itemService = Context.getService(IItemDataService.class); Item roundingItem = itemService.getByUuid(options.getRoundingItemUuid()); BillLineItem roundingLineItem = findRoundingLineItem(bill, roundingItem); BigDecimal difference = calculateRoundingValue(bill, options, roundingLineItem); if (difference.equals(BigDecimal.ZERO) && roundingLineItem != null) { bill.removeLineItem(roundingLineItem); } else if (!difference.equals(BigDecimal.ZERO) && roundingLineItem == null) { bill.addLineItem(roundingItem, difference.abs(), \"\", difference.compareTo(BigDecimal.ZERO) > 0 ? -1 : 1); } else if (!difference.equals(BigDecimal.ZERO)) { updateRoundingItem(bill, difference, roundingLineItem); } bill.recalculateLineItemOrder(); }### Assistant: @Test public void roundingInAdjustedBill_shouldConsiderRoundingOfPreviousBill() throws Exception { CashierOptions cashierOptions = cashOptService.getOptions(); Assert.assertEquals(5, (int)cashierOptions.getRoundToNearest()); Bill bill = new Bill(); BillLineItem item = new BillLineItem(); Item lineItemItem = new Item(1); item.setItem(lineItemItem); item.setLineItemOrder(0); item.setPrice(new BigDecimal(8)); item.setQuantity(1); bill.addLineItem(item); IItemDataService itemService = Context.getService(IItemDataService.class); Item roundingItem = itemService.getByUuid(cashierOptions.getRoundingItemUuid()); Assert.assertEquals(1, bill.getLineItems().size()); RoundingUtil.handleRoundingLineItem(bill); Assert.assertEquals(2, bill.getLineItems().size()); item.setLineItemOrder(1); bill.addLineItem(item); Assert.assertEquals(3, bill.getLineItems().size()); RoundingUtil.handleRoundingLineItem(bill); Assert.assertEquals(3, bill.getLineItems().size()); BigDecimal roundingValue = new BigDecimal(0); BigDecimal itemTotal = new BigDecimal(0); int roundingItemCounter = 0; for (BillLineItem lineItem : bill.getLineItems()) { if (lineItem.getItem() != null && roundingItem.getId().equals(lineItem.getItem().getId())) { roundingValue = roundingValue.add(lineItem.getTotal()); roundingItemCounter++; } else { itemTotal = itemTotal.add(lineItem.getTotal()); } } Assert.assertEquals(16, itemTotal.intValue()); Assert.assertEquals(-1, roundingValue.intValue()); Assert.assertEquals(1, roundingItemCounter); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void readCW(InputStream inputStream) throws IOException { BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream)); for (int i = 0; i < centralWavelenthRr.length; i++) { String line = bufferedReader.readLine(); line = line.trim(); centralWavelenthRr[i] = Float.parseFloat(line); } }### Assistant: @Test public void testReadCW() throws IOException { final ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); for (int i = 0; i < 925; i++) { final String line = String.valueOf(i) + \"\\n\"; outputStream.write(line.getBytes()); } final byte[] outArray = outputStream.toByteArray(); final InputStream inputStream = new ByteArrayInputStream(outArray); provider.readCW(inputStream); final float[] cwRR = provider.getCentralWavelength(\"MER_RR\"); assertEquals(\"925 members\", 925, cwRR.length); assertEquals(\"value 0\", 0f, cwRR[0], DIFF); assertEquals(\"value 1\", 1f, cwRR[1], DIFF); assertEquals(\"value 2\", 2f, cwRR[2], DIFF); assertEquals(\"value 924\", 924f, cwRR[924], DIFF); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ColumnFamily adapt(HColumnDescriptor columnDescriptor) { throwIfRequestingUnknownFeatures(columnDescriptor); throwIfRequestingUnsupportedFeatures(columnDescriptor); ColumnFamily.Builder resultBuilder = ColumnFamily.newBuilder(); GCRule gcRule = buildGarbageCollectionRule(columnDescriptor); if (gcRule != null) { resultBuilder.setGcRule(gcRule.toProto()); } return resultBuilder.build(); }### Assistant: @Test public void ignoredOptionsAreIgnored() { descriptor.setCompressionType(Compression.Algorithm.LZ4); descriptor.setCompactionCompressionType(Compression.Algorithm.LZ4); descriptor.setDataBlockEncoding(DataBlockEncoding.FAST_DIFF); descriptor.setBlockCacheEnabled(false); descriptor.setCacheDataOnWrite(true); descriptor.setCacheDataInL1(true); descriptor.setEvictBlocksOnClose(false); descriptor.setBloomFilterType(BloomType.ROW); descriptor.setPrefetchBlocksOnOpen(true); descriptor.setBlocksize(16 * 1024); descriptor.setScope(1); descriptor.setInMemory(true); ColumnFamily.Builder result = adapter.adapt(descriptor).toBuilder().clearGcRule(); Assert.assertArrayEquals(new byte[0], result.build().toByteArray()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static RetrieveAttribute of(final String thingId, final JsonPointer attributeJsonPointer, final DittoHeaders dittoHeaders) { return of(ThingId.of(thingId), attributeJsonPointer, dittoHeaders); }### Assistant: @Test public void toJsonReturnsExpected() { final RetrieveAttribute underTest = RetrieveAttribute.of(TestConstants.Thing.THING_ID, KNOWN_JSON_POINTER, TestConstants.EMPTY_DITTO_HEADERS); final JsonObject actualJson = underTest.toJson(FieldType.regularOrSpecial()); assertThat(actualJson).isEqualTo(KNOWN_JSON); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int get( long key ) { long retIndex = binarySearch(keys, 0, getSize(), key); if (retIndex < 0) return noEntryValue; return values.getInt(retIndex * 4); }### Assistant: @Test public void testGet() { OSMIDMap map = new OSMIDMap(new RAMDirectory()); map.put(9, 0); map.put(10, -50); map.put(11, 2); map.put(12, 3); map.put(20, 6); map.put(21, 5); map.put(31, 2); assertEquals(7, map.getSize()); assertEquals(-1, map.get(8)); assertEquals(0, map.get(9)); assertEquals(-50, map.get(10)); assertEquals(2, map.get(11)); assertEquals(3, map.get(12)); assertEquals(-1, map.get(13)); assertEquals(-1, map.get(19)); assertEquals(6, map.get(20)); assertEquals(5, map.get(21)); assertEquals(2, map.get(31)); assertEquals(-1, map.get(32)); for (int i = 0; i < 50; i++) { map.put(i + 50, i + 7); } assertEquals(57, map.getSize()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean matchHivePolicy(String resourceName, List<XXResource> xResourceList, Long xUserId, int permission) { return matchHivePolicy(resourceName, xResourceList, xUserId, permission, 0, 0, true); }### Assistant: @Test public void testMatchHivePolicy_NoResourceName(){ boolean bnlChk = rangerBizUtil.matchHivePolicy(null, null, null, 0); Assert.assertFalse(bnlChk); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException { logger.debug(\"initiate reaction: RadicalSiteHrAlphaReaction\"); if (reactants.getAtomContainerCount() != 1) { throw new CDKException(\"RadicalSiteHrAlphaReaction only expects one reactant\"); } if (agents != null) { throw new CDKException(\"RadicalSiteHrAlphaReaction don't expects agents\"); } IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class); IAtomContainer reactant = reactants.getAtomContainer(0); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(reactant); Aromaticity.cdkLegacy().apply(reactant); AllRingsFinder arf = new AllRingsFinder(); IRingSet ringSet = arf.findAllRings(reactant); for (int ir = 0; ir < ringSet.getAtomContainerCount(); ir++) { IRing ring = (IRing) ringSet.getAtomContainer(ir); for (int jr = 0; jr < ring.getAtomCount(); jr++) { IAtom aring = ring.getAtom(jr); aring.setFlag(CDKConstants.ISINRING, true); } } IParameterReact ipr = super.getParameterClass(SetReactionCenter.class); if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant); HOSECodeGenerator hcg = new HOSECodeGenerator(); Iterator<IAtom> atomis = reactant.atoms().iterator(); while (atomis.hasNext()) { IAtom atomi = atomis.next(); if (atomi.getFlag(CDKConstants.REACTIVE_CENTER) && reactant.getConnectedSingleElectronsCount(atomi) == 1) { hcg.getSpheres(reactant, atomi, 2, true); Iterator<IAtom> atomls = hcg.getNodesInSphere(2).iterator(); while (atomls.hasNext()) { IAtom atoml = atomls.next(); if (atoml != null && atoml.getFlag(CDKConstants.REACTIVE_CENTER) && !atoml.getFlag(CDKConstants.ISINRING) && (atoml.getFormalCharge() == CDKConstants.UNSET ? 0 : atoml.getFormalCharge()) == 0 && !atoml.getSymbol().equals(\"H\") && reactant.getMaximumBondOrder(atoml) == IBond.Order.SINGLE) { Iterator<IAtom> atomhs = reactant.getConnectedAtomsList(atoml).iterator(); while (atomhs.hasNext()) { IAtom atomh = atomhs.next(); if (reactant.getBond(atomh, atoml).getFlag(CDKConstants.REACTIVE_CENTER) && atomh.getFlag(CDKConstants.REACTIVE_CENTER) && atomh.getSymbol().equals(\"H\")) { ArrayList<IAtom> atomList = new ArrayList<IAtom>(); atomList.add(atomh); atomList.add(atomi); atomList.add(atoml); ArrayList<IBond> bondList = new ArrayList<IBond>(); bondList.add(reactant.getBond(atomh, atoml)); IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance( IAtomContainerSet.class); moleculeSet.addAtomContainer(reactant); IReaction reaction = mechanism.initiate(moleculeSet, atomList, bondList); if (reaction == null) continue; else setOfReactions.addReaction(reaction); } } } } } } return setOfReactions; }### Assistant: @Test public void testCDKConstants_REACTIVE_CENTER() throws Exception { IReactionProcess type = new RadicalSiteHrAlphaReaction(); IAtomContainerSet setOfReactants = getExampleReactants(); IAtomContainer molecule = setOfReactants.getAtomContainer(0); molecule.getAtom(0).setFlag(CDKConstants.REACTIVE_CENTER, true); molecule.getAtom(2).setFlag(CDKConstants.REACTIVE_CENTER, true); molecule.getAtom(6).setFlag(CDKConstants.REACTIVE_CENTER, true); molecule.getBond(5).setFlag(CDKConstants.REACTIVE_CENTER, true); List<IParameterReact> paramList = new ArrayList<IParameterReact>(); IParameterReact param = new SetReactionCenter(); param.setParameter(Boolean.TRUE); paramList.add(param); type.setParameterList(paramList); IReactionSet setOfReactions = type.initiate(setOfReactants, null); Assert.assertEquals(1, setOfReactions.getReactionCount()); IAtomContainer reactant = setOfReactions.getReaction(0).getReactants().getAtomContainer(0); Assert.assertTrue(molecule.getAtom(2).getFlag(CDKConstants.REACTIVE_CENTER)); Assert.assertTrue(reactant.getAtom(2).getFlag(CDKConstants.REACTIVE_CENTER)); Assert.assertTrue(molecule.getAtom(0).getFlag(CDKConstants.REACTIVE_CENTER)); Assert.assertTrue(reactant.getAtom(0).getFlag(CDKConstants.REACTIVE_CENTER)); Assert.assertTrue(molecule.getAtom(6).getFlag(CDKConstants.REACTIVE_CENTER)); Assert.assertTrue(reactant.getAtom(6).getFlag(CDKConstants.REACTIVE_CENTER)); Assert.assertTrue(molecule.getBond(5).getFlag(CDKConstants.REACTIVE_CENTER)); Assert.assertTrue(reactant.getBond(5).getFlag(CDKConstants.REACTIVE_CENTER)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Logger getLogger(final Class<?> clazz, final Locale desiredLocale) { return new Slf4jLogger(clazz.getName(), ResourceBundle.getBundle(\"openwebbeans/Messages\", desiredLocale).toString()); }### Assistant: @Test public void ensureLogGoesOnSlf4j() { final Logger logger = WebBeansLoggerFacade.getLogger(Slf4jLoggerFactoryTest.class); assertTrue(logger.getClass().getName(), Slf4jLogger.class.isInstance(logger)); final PrintStream original = System.err; final ByteArrayOutputStream buffer = new ByteArrayOutputStream(); System.setErr(new PrintStream(new OutputStream() { @Override public void write(final int b) { buffer.write(b); original.write(b); } @Override public void write(final byte[] b) throws IOException { buffer.write(b); original.write(b); } @Override public void write(final byte[] b, final int off, final int len) { buffer.write(b, off, len); original.write(b, off, len); } })); try { logger.info(\"test log\"); } finally { System.setErr(original); } assertEquals( \"[main] INFO \" + getClass().getName() + \" - test log\\n\", new String(buffer.toByteArray(), StandardCharsets.UTF_8)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public B2Bucket updateBucket(B2UpdateBucketRequest request) throws B2Exception { return retryer.doRetry(\"b2_update_bucket\", accountAuthCache, () -> webifier.updateBucket(accountAuthCache.get(), request), retryPolicySupplier.get()); }### Assistant: @Test public void testUpdateBucket() throws B2Exception { final B2UpdateBucketRequest request = B2UpdateBucketRequest .builder(bucket(1)) .setBucketInfo(B2Collections.mapOf()) .setLifecycleRules(listOf()) .setBucketType(B2BucketTypes.ALL_PUBLIC) .build(); when(webifier.updateBucket(anyObject(), eq(request))).thenReturn(bucket(1)); assertEquals(bucket(1), client.updateBucket(request)); verify(webifier, times(1)).updateBucket(anyObject(), eq(request)); request.hashCode(); assertEquals( request, B2UpdateBucketRequest .builder(bucket(1)) .setBucketInfo(B2Collections.mapOf()) .setLifecycleRules(listOf()) .setBucketType(B2BucketTypes.ALL_PUBLIC) .build()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ListAdapter getAdapter() { final ListView listView = getListViewInternal(); if (listView != null) { final ListAdapter adapter = listView.getAdapter(); if (adapter instanceof HeaderViewListAdapter) { return ((HeaderViewListAdapter) adapter).getWrappedAdapter(); } return adapter; } return null; }### Assistant: @Test public void testGetAdapter() { mListView.setAdapter(mAdapter); ListMixin mixin = new ListMixin(mTemplateLayout, null, 0); assertSame(mAdapter, mixin.getAdapter()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public AlphaResponse participationEnd(ParticipationEndedEvent participationEndedEvent) { GrpcAck grpcAck = tccBlockingEventService.onParticipationEnded(convertTo(participationEndedEvent)); return new AlphaResponse(grpcAck.getAborted()); }### Assistant: @Test public void serviceOnEndParticipateTest() { final GrpcParticipationEndedEvent[] requestCaptor = new GrpcParticipationEndedEvent[1]; ParticipationEndedEvent event = new ParticipationEndedEvent(globalTxId,localTxId, parentTxId, confirmMethod, cancelMethod, TransactionStatus.Succeed); TccEventServiceImplBase serviceImpl = new TccEventServiceImplBase() { public void onParticipationEnded(GrpcParticipationEndedEvent request, StreamObserver<GrpcAck> responseObserver) { requestCaptor[0] = request; responseObserver.onNext(ack); responseObserver.onCompleted(); } }; serviceRegistry.addService(serviceImpl); AlphaResponse response =service.participationEnd(event); assertThat(requestCaptor[0].getServiceName(), is(serviceConfig.serviceName())); assertThat(requestCaptor[0].getInstanceId(), is(serviceConfig.instanceId())); assertThat(requestCaptor[0].getGlobalTxId(), is(globalTxId)); assertThat(requestCaptor[0].getLocalTxId(), is(localTxId)); assertThat(requestCaptor[0].getParentTxId(), is(parentTxId)); assertThat(requestCaptor[0].getStatus(), is(TransactionStatus.Succeed.toString())); assertThat(response.aborted(), is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { AdapterDelegate<T> delegate = getDelegateForViewType(viewType); if (delegate == null) { throw new NullPointerException(\"No AdapterDelegate added for ViewType \" + viewType); } RecyclerView.ViewHolder vh = delegate.onCreateViewHolder(parent); if (vh == null) { throw new NullPointerException(\"ViewHolder returned from AdapterDelegate \" + delegate + \" for ViewType =\" + viewType + \" is null!\"); } return vh; }### Assistant: @Test(expected = NullPointerException.class) public void testNoDelegates() { AdapterDelegatesManager<Object> delegatesManager = new AdapterDelegatesManager<>(); delegatesManager.onCreateViewHolder(null, 1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public AuthenticationToken authenticate(HttpServletRequest request, final HttpServletResponse response) throws IOException, AuthenticationException { final String path = request.getServletPath(); for(final String endpoint: whitelist) { if (endpoint.equals(path)) { return AuthenticationToken.ANONYMOUS; } } AuthenticationToken token = null; String authorization = request.getHeader( KerberosAuthenticator.AUTHORIZATION); if (authorization == null || !authorization.startsWith(KerberosAuthenticator.NEGOTIATE)) { response.setHeader(WWW_AUTHENTICATE, KerberosAuthenticator.NEGOTIATE); response.setStatus(HttpServletResponse.SC_UNAUTHORIZED); if (authorization == null) { LOG.trace(\"SPNEGO starting for url: {}\", request.getRequestURL()); } else { LOG.warn(\"'\" + KerberosAuthenticator.AUTHORIZATION + \"' does not start with '\" + KerberosAuthenticator.NEGOTIATE + \"' : {}\", authorization); } } else { authorization = authorization.substring( KerberosAuthenticator.NEGOTIATE.length()).trim(); final Base64 base64 = new Base64(0); final byte[] clientToken = base64.decode(authorization); try { final String serverPrincipal = KerberosUtil.getTokenServerName(clientToken); if (!serverPrincipal.startsWith(\"HTTP/\")) { throw new IllegalArgumentException( \"Invalid server principal \" + serverPrincipal + \"decoded from client request\"); } token = Subject.doAs(serverSubject, new PrivilegedExceptionAction<AuthenticationToken>() { @Override public AuthenticationToken run() throws Exception { return runWithPrincipal(serverPrincipal, clientToken, base64, response); } }); } catch (PrivilegedActionException ex) { if (ex.getException() instanceof IOException) { throw (IOException) ex.getException(); } else { throw new AuthenticationException(ex.getException()); } } catch (Exception ex) { throw new AuthenticationException(ex); } } return token; }### Assistant: @Test public void testRequestToWhitelist() throws Exception { final String token = new Base64(0).encodeToString(new byte[]{0, 1, 2}); final HttpServletRequest request = Mockito.mock(HttpServletRequest.class); final HttpServletResponse response = Mockito.mock(HttpServletResponse.class); Mockito.when(request.getHeader(KerberosAuthenticator.AUTHORIZATION)) .thenReturn(KerberosAuthenticator.NEGOTIATE + token); Mockito.when(request.getServletPath()).thenReturn(\"/white\"); handler.authenticate(request, response); Mockito.when(request.getServletPath()).thenReturn(\"/white4\"); try { handler.authenticate(request, response); Assert.fail(); } catch (AuthenticationException ex) { } catch (Exception ex) { Assert.fail(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean checkPassword(String engine, String username, String password) { log.debug(\"Checking password with \" + engine); return engines.containsKey(engine) && engines.get(engine).checkPassword(username, password); }### Assistant: @Test public void testCheckPassword() { boolean result = engineManager.checkPassword(ERROR, \"user\", \"password\"); verify(engine, times(0)).checkPassword(\"user\", \"password\"); assertFalse(result); result = engineManager.checkPassword(engine.getEngineName(), \"user\", \"password\"); verify(engine).checkPassword(\"user\", \"password\"); assertTrue(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String readLine() { if (!hasNext()) { return null; } String currentReadLineString = null; try { currentReadLineString = lineReader.readLine(); } catch (FileException e) { throw new FileException(\"Processing of lineReader was failed.\", e, fileName); } if (0 < trailerLineCount) { String pollingLineString = trailerQueue.poll(); trailerQueue.add(currentReadLineString); return pollingLineString; } return currentReadLineString; }### Assistant: @Test public void testBuildLineReader03() throws Exception { URL url = this.getClass().getResource( \"AbstractFileLineIterator_buildLineReader01.txt\"); String fileName = url.getPath(); Map<String, ColumnParser> columnParserMap = new HashMap<String, ColumnParser>(); columnParserMap.put(\"java.lang.String\", new NullColumnParser()); AbstractFileLineIteratorImpl04<AbstractFileLineIterator_Stub20> fileLineIterator = new AbstractFileLineIteratorImpl04<AbstractFileLineIterator_Stub20>( fileName, AbstractFileLineIterator_Stub20.class, columnParserMap); Method method = AbstractFileLineIterator.class.getDeclaredMethod(\"buildLineReader\"); method.setAccessible(true); method.invoke(fileLineIterator); Object reader = ReflectionTestUtils.getField(fileLineIterator, \"reader\"); assertEquals(BufferedReader.class, reader.getClass()); Object reader02 = ReflectionTestUtils.getField(fileLineIterator, \"lineReader\"); assertEquals(LineFeed2LineReader.class, reader02.getClass()); assertEquals(\"\\r\\n\", ReflectionTestUtils.getField(reader02, \"lineFeedChar\")); assertSame(reader, ReflectionTestUtils.getField(reader02, \"reader\")); assertEquals(\"AbstractFileLineIterator_buildLineReader01\", ((BufferedReader) reader).readLine()); ((BufferedReader) reader).close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void createPasswordResetToken(String username, String emailAddress, String linkUrl) throws UsernameNotExistException, EmailAddressNotExistException, MessagingException { Staff staff = null; if (!StringUtils.hasText(username)) { throw new IllegalArgumentException(\"Username is required.\"); } if (!StringUtils.hasText(emailAddress)) { throw new IllegalArgumentException(\"Email Address is required.\"); } if (!StringUtils.hasText(linkUrl)) { throw new IllegalArgumentException(\"Email link is required.\"); } Patient patient = patientRepository.findByUsername(username); if (patient == null) { staff = staffRepository.findByUsername(username); if (staff == null) throw new UsernameNotExistException( \"The username is not found.\"); } String patientEmailAddress = (patient != null) ? patient.getEmail() : staff.getEmail(); String firstName = (patient != null) ? patient.getFirstName() : staff .getFirstName(); String lastName = (patient != null) ? patient.getLastName() : staff .getLastName(); if (!patientEmailAddress.equalsIgnoreCase(emailAddress)) { String message = String.format( \"Email address %s doesn't exist for username %s.\", emailAddress, username); logger.warn(message); throw new EmailAddressNotExistException(message); } EmailToken passwordResetToken = new EmailToken(); passwordResetToken.setExpireInHours(passwordResetTokenExpireInHours); passwordResetToken.setRequestDateTime(new Date()); String token = tokenGenerator.generateToken(); passwordResetToken.setUsername(username); passwordResetToken.setToken(token); passwordResetToken.setIsTokenUsed(false); passwordResetToken.setTokenType(TokenType.PASSWORD_RESET); passwordResetTokenRepository.save(passwordResetToken); emailSender.sendMessage(firstName + \" \" + lastName, emailAddress, EmailType.PASSWORD_RESET_REQUEST, linkUrl, token); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testCreatePasswordResetToken_Throws_Exception_When_Email_Has_Whitespaces_Only() throws UsernameNotExistException, EmailAddressNotExistException, MessagingException { sut.createPasswordResetToken(\"username\", \" \", \"resetPasswordLinkPlaceHolder\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object visit(ASTRingIdentifier node, Object data) { IQueryAtom atom = (IQueryAtom) data; RingIdentifierAtom ringIdAtom = new RingIdentifierAtom(builder); ringIdAtom.setAtom(atom); IQueryBond bond; if (node.jjtGetNumChildren() == 0) { bond = null; } else { bond = (IQueryBond) node.jjtGetChild(0).jjtAccept(this, data); } ringIdAtom.setRingBond(bond); return ringIdAtom; }### Assistant: @Test public void testPattern33() throws Exception { visit(\"[NX3;H2,H1;!$(NC=O)].[NX3;H2,H1;!$(NC=O)]\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected FaultResponseDto faultResponseForException(final Exception exception, final List<FaultResponseParameterDto> parameters, final String defaultMessage) { final FaultResponseParametersDto faultResponseParameters = this.faultResponseParametersForList(parameters); if (exception instanceof FunctionalException || exception instanceof TechnicalException) { return this.faultResponseForFunctionalOrTechnicalException((OsgpException) exception, faultResponseParameters, defaultMessage); } return new FaultResponseDto.Builder().withMessage(defaultMessage) .withComponent(ComponentType.DOMAIN_SMART_METERING.name()) .withInnerException(exception.getClass().getName()).withInnerMessage(exception.getMessage()) .withFaultResponseParameters(faultResponseParameters).build(); }### Assistant: @Test public void technicalExceptionDetailsWithoutCauseOrMessageInFaultResponse() throws Exception { final ComponentType component = ComponentType.PROTOCOL_DLMS; final Exception exception = new TechnicalException(component, null, null); final FaultResponseDto faultResponse = this.processor.faultResponseForException(exception, this.parameters, this.defaultMessage); this.assertResponse(faultResponse, null, this.defaultMessage, component.name(), null, null, this.parameters); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void deleteSnapshot(Path snapshotDir, String snapshotName) throws IOException { super.deleteSnapshot(fullPath(snapshotDir), snapshotName); }### Assistant: @Test(timeout = 30000) public void testDeleteSnapshot() throws Exception { Path snapRootPath = new Path(\"/snapPath\"); Path chRootedSnapRootPath = new Path(\"/a/b/snapPath\"); Configuration conf = new Configuration(); conf.setClass(\"fs.mockfs.impl\", MockFileSystem.class, FileSystem.class); URI chrootUri = URI.create(\"mockfs: ChRootedFileSystem chrootFs = new ChRootedFileSystem(chrootUri, conf); FileSystem mockFs = ((FilterFileSystem) chrootFs.getRawFileSystem()) .getRawFileSystem(); chrootFs.deleteSnapshot(snapRootPath, \"snap1\"); verify(mockFs).deleteSnapshot(chRootedSnapRootPath, \"snap1\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull @VisibleForTesting Observable<Set<AvailablePurchase>> getAvailableConsumablePurchases() { return getAvailablePurchases(InAppPurchase.getConsumablePurchaseSkus(), ConsumablePurchase.GOOGLE_PRODUCT_TYPE); }### Assistant: @Test public void getAvailableConsumablePurchasesThrowsRemoteException() throws Exception { final Bundle getSkuDetailsResponse = new Bundle(); getSkuDetailsResponse.putInt(\"RESPONSE_CODE\", RESULT_ERROR); when(inAppBillingService.getSkuDetails(eq(3), eq(packageName), eq(\"inapp\"), bundleCaptor.capture())).thenThrow(new RemoteException()); purchaseManager.getAvailableConsumablePurchases().test() .assertNoValues() .assertNotComplete() .assertError(RemoteException.class); verifyZeroInteractions(purchaseWallet); assertEquals(bundleCaptor.getValue().getStringArrayList(\"ITEM_ID_LIST\"), InAppPurchase.getConsumablePurchaseSkus()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getPixQueryXml(String mrn, String mrnDomain, String xsltUri) throws Hl7v3TransformerException { String newxsltUri = \"\"; try { final String extension = \"@extension\"; final String root = \"@root\"; String queryXML = xsltUri; if (null != xsltUri && !xsltUri.startsWith(\"<?xml\")) { final InputStream styleIs = Thread.currentThread() .getContextClassLoader().getResourceAsStream(xsltUri); queryXML = IOUtils.toString(styleIs, \"UTF-8\"); } newxsltUri = queryXML.replaceAll(extension, mrn); newxsltUri = newxsltUri.replaceAll(root, mrnDomain); } catch (final Exception e) { final String errorMessage = \"Error happended when trying to mrn data to hl7v3PixQuery\"; logger.error(errorMessage, e); final Hl7v3TransformerException transformerException = new Hl7v3TransformerException( errorMessage, e); throw transformerException; } return newxsltUri; }### Assistant: @Test public void testGetPixQueryXml() throws IOException, URISyntaxException, Hl7v3TransformerException { final String mrnMock = \"mrnMock\"; final String mrnDomainMock = \"mrnDomainMock\"; final String picQueryxml = FileUtils.readFileToString(new File( getClass().getClassLoader() .getResource(\"xml/c32ToHl7v3PixQuery.xsl\").toURI())); final String hl7v3PixXML = sut.getPixQueryXml(mrnMock, mrnDomainMock, picQueryxml); assertNotNull(hl7v3PixXML); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void refreshLoadedJobCache() { if (getServiceState() == STATE.STARTED) { if (storage instanceof CachedHistoryStorage) { ((CachedHistoryStorage) storage).refreshLoadedJobCache(); } else { throw new UnsupportedOperationException(storage.getClass().getName() + \" is expected to be an instance of \" + CachedHistoryStorage.class.getName()); } } else { LOG.warn(\"Failed to execute refreshLoadedJobCache: JobHistory service is not started\"); } }### Assistant: @Test public void testRefreshLoadedJobCache() throws Exception { HistoryFileManager historyManager = mock(HistoryFileManager.class); jobHistory = spy(new JobHistory()); doReturn(historyManager).when(jobHistory).createHistoryFileManager(); Configuration conf = new Configuration(); conf.setInt(JHAdminConfig.MR_HISTORY_LOADED_JOB_CACHE_SIZE, 2); jobHistory.init(conf); jobHistory.start(); CachedHistoryStorage storage = spy((CachedHistoryStorage) jobHistory .getHistoryStorage()); assertFalse(storage.getUseLoadedTasksCache()); Job[] jobs = new Job[3]; JobId[] jobIds = new JobId[3]; for (int i = 0; i < 3; i++) { jobs[i] = mock(Job.class); jobIds[i] = mock(JobId.class); when(jobs[i].getID()).thenReturn(jobIds[i]); } HistoryFileInfo fileInfo = mock(HistoryFileInfo.class); when(historyManager.getFileInfo(any(JobId.class))).thenReturn(fileInfo); when(fileInfo.loadJob()).thenReturn(jobs[0]).thenReturn(jobs[1]) .thenReturn(jobs[2]); for (int i = 0; i < 3; i++) { storage.getFullJob(jobs[i].getID()); } Cache<JobId, Job> jobCache = storage.getLoadedJobCache(); assertTrue(jobCache.size() > 0); conf.setInt(JHAdminConfig.MR_HISTORY_LOADED_JOB_CACHE_SIZE, 3); doReturn(conf).when(storage).createConf(); when(fileInfo.loadJob()).thenReturn(jobs[0]).thenReturn(jobs[1]) .thenReturn(jobs[2]); jobHistory.refreshLoadedJobCache(); for (int i = 0; i < 3; i++) { storage.getFullJob(jobs[i].getID()); } jobCache = storage.getLoadedJobCache(); assertTrue(jobCache.size() > 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure @Override public boolean hasAttribute(String name) { for (final AttributeProvider c : this.containers) { if (c.hasAttribute(name)) { return true; } } return false; }### Assistant: @Test public void testHasAttributeString() { assertTrue(this.container.hasAttribute(\"A\")); assertTrue(this.container.hasAttribute(\"B\")); assertTrue(this.container.hasAttribute(\"C\")); assertTrue(this.container.hasAttribute(\"D\")); assertTrue(this.container.hasAttribute(\"E\")); assertFalse(this.container.hasAttribute(\"F\")); assertTrue(this.container.hasAttribute(\"Z1\")); assertTrue(this.container.hasAttribute(\"Z2\")); assertTrue(this.container.hasAttribute(\"Z3\")); assertFalse(this.container.hasAttribute(\"Z4\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void readFrame(ChannelHandlerContext ctx, ByteBuf input, Http2FrameListener listener) throws Http2Exception { if (readError) { input.skipBytes(input.readableBytes()); return; } try { do { if (readingHeaders) { processHeaderState(input); if (readingHeaders) { return; } } processPayloadState(ctx, input, listener); if (!readingHeaders) { return; } } while (input.isReadable()); } catch (Http2Exception e) { readError = !Http2Exception.isStreamError(e); throw e; } catch (RuntimeException e) { readError = true; throw e; } catch (Throwable cause) { readError = true; PlatformDependent.throwException(cause); } }### Assistant: @Test public void readHeaderFrameAndContinuationFrame() throws Http2Exception { final int streamId = 1; ByteBuf input = Unpooled.buffer(); try { Http2Headers headers = new DefaultHttp2Headers() .authority(\"foo\") .method(\"get\") .path(\"/\") .scheme(\"https\"); writeHeaderFrame(input, streamId, headers, new Http2Flags().endOfHeaders(false).endOfStream(true)); writeContinuationFrame(input, streamId, new DefaultHttp2Headers().add(\"foo\", \"bar\"), new Http2Flags().endOfHeaders(true)); frameReader.readFrame(ctx, input, listener); verify(listener).onHeadersRead(ctx, 1, headers.add(\"foo\", \"bar\"), 0, true); } finally { input.release(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getLocation() { return includedResources != null || file == null ? \"\" : file.getAbsolutePath(); }### Assistant: @Test void location() { assertEquals(new File(registry.getFramework().getParentFile(), \"test-classes\").getAbsolutePath(), bundle.getLocation()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: RenameShapes(Map<ShapeId, ShapeId> renamed, Supplier<ModelAssembler> modelAssemblerSupplier) { this.renamed = new HashMap<>(renamed); this.assembler = modelAssemblerSupplier.get(); }### Assistant: @Test public void returnsUnmodifiedModelIfToAndFromAreEqual() { ShapeId stringId = ShapeId.from(\"ns.foo#String\"); StringShape target = StringShape.builder().id(stringId).build(); Model model = Model.builder() .addShapes(target) .build(); ModelTransformer transformer = ModelTransformer.create(); Map<ShapeId, ShapeId> renamed = new HashMap<>(); renamed.put(stringId, stringId ); Model result = transformer.renameShapes(model, renamed); assertEquals(result.shapes().count(), 1); assertEquals(result.getShape(stringId).get(), target); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String asCanonicalString(Object obj) { StringBuilder strBuffer = new StringBuilder(); if (obj instanceof Struct) { Struct struct = (Struct) obj; strBuffer.append('{'); for (String name : struct.sortedNames()) { appendSeparator(strBuffer); strBuffer.append('\"'); strBuffer.append(name); strBuffer.append(\"\\\":\"); strBuffer.append(asCanonicalString(struct.get(name))); } strBuffer.append('}'); } else if (obj instanceof Array) { strBuffer.append('['); for (Object item : (Array) obj) { appendSeparator(strBuffer); strBuffer.append(asCanonicalString(item)); } strBuffer.append(']'); } else if (obj instanceof String) { strBuffer.append('\"'); strBuffer.append(obj); strBuffer.append('\"'); } else if (obj instanceof Integer) { strBuffer.append(obj); } else if (obj instanceof Long) { strBuffer.append(obj); } else if (obj instanceof Boolean) { strBuffer.append(obj); } else { strBuffer.append(obj.toString()); } return strBuffer.toString(); }### Assistant: @Test public void testAsStructPolicy() { List<Policy> policies = new ArrayList<>(); Policy mPolicy = Mockito.mock(Policy.class); policies.add(mPolicy); List<Assertion> assertions = new ArrayList<>(); Assertion mAssertion = Mockito.mock(Assertion.class); assertions.add(mAssertion); Mockito.when(mockPolicies.getPolicies()).thenReturn(policies); Mockito.when(mPolicy.getAssertions()).thenReturn(assertions); String check = SignUtils.asCanonicalString(mockPolicies); assertNotNull(check); assertEquals(check,\"{\\\"policies\\\":[{\\\"assertions\\\":[{}]}]}\"); Mockito.when(mPolicy.getAssertions()).thenReturn(null); check = SignUtils.asCanonicalString(mockPolicies); assertNotNull(check); assertEquals(check,\"{\\\"policies\\\":[{}]}\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public HttpUriRequest create(String url, Request request) throws IOException { HttpUriRequest httpUriRequest; if (request.getHttpMethodName().equalsIgnoreCase(\"POST\")) { httpUriRequest = new HttpPost(url); } else if (request.getHttpMethodName().equalsIgnoreCase(\"GET\")) { httpUriRequest = new HttpGet(url); } else if (request.getHttpMethodName().equalsIgnoreCase(\"PUT\")) { httpUriRequest = new HttpPut(url); } else if (request.getHttpMethodName().equalsIgnoreCase(\"HEAD\")) { httpUriRequest = new HttpHead(url); } else { throw new UnsupportedOperationException(request.getHttpMethodName()); } if (httpUriRequest instanceof HttpEntityEnclosingRequest) { ((HttpEntityEnclosingRequest)httpUriRequest).setEntity(createHttpEntity(request)); } return httpUriRequest; }### Assistant: @Test public void throwsOnUnknownHttpMethodName() throws IOException, URISyntaxException { HCRequestFactory factory = createDefaultTestObject(); String expectedUrl = UUID.randomUUID().toString(); String httpMethodName = UUID.randomUUID().toString(); Request request = createDefaultMockRequest(expectedUrl, httpMethodName); expectedException.expect(UnsupportedOperationException.class); expectedException.expectMessage(httpMethodName); HttpUriRequest result = factory.create(expectedUrl, request); assertTrue(result instanceof HttpPost); assertEquals(result.getURI(), new URI(expectedUrl)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void cancelCandidate( TargetHandlerParameters parameters, Instance scopedInstance ) { String key = parameters.getApplicationName() + \"_\" + parameters.getScopedInstancePath(); this.candidates.remove( key ); }### Assistant: @Test public void testCancelCandidate() throws Exception { TestApplication app = new TestApplication(); app.setName( \"app\" ); TargetHandlerParameters parameters1 = new TargetHandlerParameters() .applicationName( app.getName()) .scopedInstancePath( InstanceHelpers.computeInstancePath( app.getMySqlVm())) .domain( \"domain\" ); TargetHandlerParameters parameters2 = new TargetHandlerParameters() .applicationName( app.getName()) .scopedInstancePath( InstanceHelpers.computeInstancePath( app.getTomcatVm())) .domain( \"domain\" ); this.targetConfigurator.reportCandidate( parameters1, app.getMySqlVm()); Assert.assertEquals( 1, this.targetConfigurator.candidates.size()); this.targetConfigurator.reportCandidate( parameters2, app.getTomcatVm()); Assert.assertEquals( 2, this.targetConfigurator.candidates.size()); this.targetConfigurator.cancelCandidate( parameters1, app.getMySqlVm()); Assert.assertEquals( 1, this.targetConfigurator.candidates.size()); this.targetConfigurator.cancelCandidate( parameters2, app.getTomcatVm()); Assert.assertEquals( 0, this.targetConfigurator.candidates.size()); this.targetConfigurator.cancelCandidate( parameters2, app.getTomcat()); Assert.assertEquals( 0, this.targetConfigurator.candidates.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map< String, String > getStandardOptions() { if ( _defaultValues == null ) { final Map< String, String > superOptions = super.getStandardOptions(); final Map< String, String > options = StandardOption.defaultValues(); final Map< String, String > combined = new HashMap< >( superOptions.size() + options.size() ); combined.putAll( superOptions ); combined.putAll( options ); _defaultValues = Collections.unmodifiableMap( combined ); } return _defaultValues; }### Assistant: @Test public void shouldRemoveStandardOptionAsIfProperty() throws Exception { final String option = this.function.getStandardOptions().keySet().iterator().next(); final String value = \"newValue\"; this.function.setProperty( getTransaction(), option, value ); this.function.setProperty( getTransaction(), option, (Object)null ); assertThat( this.function.hasProperty( getTransaction(), option ), is( false ) ); assertThat( this.function.hasChild( getTransaction(), option ), is( false ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String padding(String columnString, String fileEncoding, int columnBytes, char paddingChar, PaddingType paddingType) { if (PaddingType.NONE.equals(paddingType)) { return columnString; } if (!isHalfWidthChar(fileEncoding, paddingChar)) { throw new FileException(\"Padding char is not half-width character.\"); } try { int paddingSize = columnBytes - columnString.getBytes(fileEncoding).length; if (paddingSize <= 0) { return columnString; } StringBuilder columnBuilder = new StringBuilder(columnBytes); char[] fillChars = new char[paddingSize]; Arrays.fill(fillChars, paddingChar); if (PaddingType.LEFT.equals(paddingType)) { columnBuilder.append(fillChars).append(columnString); return columnBuilder.toString(); } else if (PaddingType.RIGHT.equals(paddingType)) { columnBuilder.append(columnString).append(fillChars); return columnBuilder.toString(); } else { return columnString; } } catch (UnsupportedEncodingException e) { throw new FileException(\"Specified Encoding : \" + fileEncoding + \" is not supported\", e); } }### Assistant: @Test public void testPadding02() throws Exception { String columnString = \"1\"; String fileEncoding = \"Shift_JIS\"; int columnBytes = 1; char paddingChar = ' '; PaddingType paddingType = PaddingType.LEFT; String result = FileDAOUtility.padding(columnString, fileEncoding, columnBytes, paddingChar, paddingType); assertNotNull(result); assertEquals(\"1\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void write( Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, Writer stream, Object value) throws IOException, WebApplicationException { JsonXML config = getJsonXML(type, annotations); try { writeObject(type, config, getContext(type, mediaType), stream, value); } catch (XMLStreamException e) { throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR); } catch (JAXBException e) { throw new WebApplicationException(e, Status.INTERNAL_SERVER_ERROR); } }### Assistant: @Test public void testWriteNullWithVirtualRoot() throws Exception { JsonXMLObjectProvider provider = new JsonXMLObjectProvider(null); Annotation[] annotations = new Annotation[]{JsonXMLVirtualSampleRootElement.class.getAnnotation(JsonXML.class)}; StringWriter writer = new StringWriter(); provider.write(SampleRootElement.class, null, annotations, MediaType.APPLICATION_JSON_TYPE, null, writer, null); String json = \"null\"; Assert.assertEquals(json, writer.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public String getMetaEntry(String key) { return this.metaEntries.get(Objects.requireNonNull(key)); }### Assistant: @Test public void testGetMetaEntry() throws Exception { PropertyValue pv = PropertyValue.createObject(\"k\") .setMeta(\"k\", \"v2\"); assertThat(pv.getKey()).isEqualTo(\"k\"); assertThat(pv.getMeta().get(\"k\")).isEqualTo(\"v2\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getCardType(@NonNull String cardNo) { try { if (cardNo.isEmpty()) { return \"\"; } else { if (cardNo.charAt(0) == '4') { return CARD_TYPE_VISA; } else if ((cardNo.charAt(0) == '5') && ((cardNo.charAt(1) == '1') || (cardNo.charAt(1) == '2') || (cardNo.charAt(1) == '3') || (cardNo.charAt(1) == '4') || (cardNo.charAt(1) == '5'))) { return CARD_TYPE_MASTERCARD; } else if ((cardNo.charAt(0) == '3') && ((cardNo.charAt(1) == '4') || (cardNo.charAt(1) == '7'))) { return CARD_TYPE_AMEX; } else if (cardNo.startsWith(\"35\") || cardNo.startsWith(\"2131\") || cardNo.startsWith(\"1800\")) { return CARD_TYPE_JCB; } else { return \"\"; } } } catch (RuntimeException e) { return \"\"; } }### Assistant: @Test public void getCardTypeTest_whenMasterCard() { Assert.assertEquals(Utils.CARD_TYPE_MASTERCARD, Utils.getCardType(\"5111\")); Assert.assertEquals(Utils.CARD_TYPE_MASTERCARD, Utils.getCardType(\"5211\")); Assert.assertEquals(Utils.CARD_TYPE_MASTERCARD, Utils.getCardType(\"5311\")); Assert.assertEquals(Utils.CARD_TYPE_MASTERCARD, Utils.getCardType(\"5411\")); Assert.assertEquals(Utils.CARD_TYPE_MASTERCARD, Utils.getCardType(\"5511\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getPartitionCount() { return partitionCount; }### Assistant: @Test public void objectPropertyTest() { StringCodec<StatelessPartitioner<DummyOperator>> propertyReader = Object2String.getInstance(); StatelessPartitioner<DummyOperator> partitioner = propertyReader.fromString(\"com.datatorrent.common.partitioner.StatelessPartitioner:3\"); Assert.assertEquals(3, partitioner.getPartitionCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String doubleChar(final String str, final char c) { if (isEmpty(str)) { return str; } int start = 0; int end = str.indexOf(c, start); if (end == INDEX_NOT_FOUND) { return str; } final StringBuilder buf = new StringBuilder(str.length() + 1); do { end += 1; buf.append(str.substring(start, end)).append(c); start = end; end = str.indexOf(c, start); } while (end != INDEX_NOT_FOUND); buf.append(str.substring(start)); return buf.toString(); }### Assistant: @Test @DisplayName(\"Doubling of characters\") void doubleChar() { assertNull(StringUtils.doubleChar(null, 'a')); assertEquals(\"\", StringUtils.doubleChar(\"\", 'a')); assertEquals(\"b\", StringUtils.doubleChar(\"b\", 'a')); assertEquals(\"aa\", StringUtils.doubleChar(\"a\", 'a')); assertEquals(\"aaaa\", StringUtils.doubleChar(\"aa\", 'a')); assertEquals(\"baabaa\", StringUtils.doubleChar(\"baba\", 'a')); assertEquals(\"aabaab\", StringUtils.doubleChar(\"abab\", 'a')); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Response execute(Request request) throws Exception { RetryHandler retryHandler = request.getMethodConfig().getRetryHandler(); RequestException exception = null; Response response; int attemptCount = 1; do { Disposables.dispose(exception); response = null; try { response = delegate.execute(request); if(response.getStatusCode() >= minErrorStatusCode) { exception = new RequestException(\"Request failed - status code: \" + response.getStatusCode(), response); }else{ return response; } } catch (RequestException e) { exception = e; } }while(retryHandler.retry(exception, ++attemptCount)); if(response != null) { return response; } throw exception; }### Assistant: @Test public void executeShouldRetryUntilRetryHandlerReturnsFalseAndRethrowLastException() throws Exception { RequestException requestException1 = mock(RequestException.class); RequestException requestException2 = mock(RequestException.class); when(retryHandler.retry(requestException1, 2)).thenReturn(true); when(retryHandler.retry(requestException2, 3)).thenReturn(false); when(mockRequestExecutor.execute(request)).thenThrow(requestException1, requestException2); try { toTest.execute(request); } catch (Exception e) { assertSame(requestException2, e); verify(requestException1).dispose(); verifyNoMoreInteractions(requestException2); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Boolean call() throws Exception { for ( Envelope envelope : envelopes ) { messenger.notifyListeners( envelope ); messengerDataService.markAsSent( envelope ); } return true; }### Assistant: @Test public void testCall() throws Exception { boolean result = localPeerMessageSender.call(); assertTrue( result ); verify( messenger, times( 2 ) ).notifyListeners( isA( Envelope.class ) ); verify( messengerDataService, times( 2 ) ).markAsSent( isA( Envelope.class ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Address decodeAddress(String input) { return new Address(decodeNumeric(input, Uint160.class)); }### Assistant: @Test public void testAddress() { assertThat(TypeDecoder.decodeAddress( \"000000000000000000000000be5422d15f39373eb0a97ff8c10fbd0e40e29338\"), is(new Address(\"0xbe5422d15f39373eb0a97ff8c10fbd0e40e29338\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void main(String[] args) throws Exception { try { ToolRunner.run(new HadoopTwitterTokenTool(args), args); } catch (CmdLineException e) { System.err.print(e); } }### Assistant: @Test public void testMonthLongDFIDFCSVByTime() throws Exception { String command = String.format(hadoopCommand, monthLongTweets.getAbsolutePath(), outputLocation.getAbsolutePath(), \"CSV\", resultsOutputLocation.getAbsolutePath(), \"DFIDF\", \"analysis.stemmed\"); command += \" -svbt\"; String[] args = command.split(\" \"); args = (String[]) ArrayUtils.addAll(args, new String[] { \"-pp\",\"-m PORTER_STEM\" }); System.out.println(Arrays.toString(args)); HadoopTwitterTokenTool.main(args); Path p = new Path(resultsOutputLocation.getAbsolutePath()); System.out.println(p); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Date parseDate(String sDate) { return parseDate(sDate, DEFAULT_PATTERN, null); }### Assistant: @Test public void parseDate() { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @CallSuper public void onCreate() { super.onCreate(); if (viewModel != null) { viewModel.setNavigator(navigatingCallback.getNavigator()); } }### Assistant: @Test public void testSetNavigatorOnCreate() { when(callback.getMvvmView()).thenReturn(view); when(callback.createViewModel()).thenReturn(viewModel); when(view.getBindingConfig()).thenReturn(new BindingConfig(0, 0)); delegate.onCreate(); verify(viewModel).setNavigator(navigator); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isValueDefined(Enum<?> key) { Optional<String> value = getOrNone(key); return value.map(s -> !s.trim().isEmpty()).orElseThrow(() -> new ConfigKeyNotFoundException(key)); }### Assistant: @Test void isValueDefined_whenValueIsDefinedAndNonEmpty_thenReturnsTrue() { Config<TestConfig> config = generateConfigWithEntry(TestConfig.FOO, \"Non empty value\"); assertThat(config.isValueDefined(TestConfig.FOO)).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> LinkedHashSet<T> newLinkedHashSet() { return new LinkedHashSet<T>(); }### Assistant: @Test void testNewLinkedHashSet() { val set = _Sets.newLinkedHashSet(); assertEquals(LinkedHashSet.class, set.getClass()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public IUdocEnUIDBEntity getUdocEnUIDBEntity() { if (udocEnUIDBEntity == null) { udocEnUIDBEntity = getFactory().getUdocEnUIDBEntity(conn); } return udocEnUIDBEntity; }### Assistant: @Test public void udocEnUIDBEntityTest() { Assert.notNull(getManager(), \"ArchidocManager es nulo\"); IUdocEnUIDBEntity dbEntity = getManager().getUdocEnUIDBEntity(); Assert.notNull(dbEntity, \"entity es nulo\"); Assert.isTrue(ArchivoTables.ASGTUDOCENUI_TABLE_NAME.equals(dbEntity .getTableName()),\"Las tablas no coinciden\"); logger.info(getTextoCount(dbEntity.getTableName(), dbEntity.getCount())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static List<String> diff(ToNode actual, ToNode expected) { return new NodeDiff().findDifferences(actual.toNode(), expected.toNode(), \"\") .collect(Collectors.toList()); }### Assistant: @Test public void detectsExtraObjectKeys() { Node actual = Node.objectNode().withMember(\"foo\", Node.from(\"bar\")).withMember(\"fizz\", Node.from(\"buzz\")); Node expected = Node.objectNode().withMember(\"foo\", Node.from(\"bar\")); assertThat(NodeDiff.diff(actual, expected), contains(\"[]: Extra key `fizz` encountered with content: \\\"buzz\\\"\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void remove( final UnitOfWork transaction ) { throw new UnsupportedOperationException( Messages.getString( Relational.REMOVE_NOT_ALLOWED, getAbsolutePath() ) ); }### Assistant: @Test( expected = UnsupportedOperationException.class ) public void shouldNotAllowRemove() throws Exception { this.wsMgr.remove( getTransaction() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"{eventId}/metadata\") @RestQuery(name = \"geteventmetadata\", description = \"Returns the event's metadata of the specified type. For a metadata catalog there is the flavor such as 'dublincore/episode' and this is the unique type.\", returnDescription = \"\", pathParameters = { @RestParameter(name = \"eventId\", description = \"The event id\", isRequired = true, type = STRING) }, restParameters = { @RestParameter(name = \"type\", isRequired = false, description = \"The type of metadata to get\", type = STRING) }, responses = { @RestResponse(description = \"The metadata collection is returned.\", responseCode = HttpServletResponse.SC_OK), @RestResponse(description = \"The specified event does not exist.\", responseCode = HttpServletResponse.SC_NOT_FOUND) }) public Response getAllEventMetadata(@HeaderParam(\"Accept\") String acceptHeader, @PathParam(\"eventId\") String id, @QueryParam(\"type\") String type) throws Exception { final ApiVersion requestedVersion = ApiMediaType.parse(acceptHeader).getVersion(); if (StringUtils.trimToNull(type) == null) { Opt<MetadataList> metadataList = getEventMetadataById(id); if (metadataList.isSome()) { MetadataList actualList = metadataList.get(); final DublinCoreMetadataCollection collection = actualList.getMetadataByFlavor(\"dublincore/episode\"); final boolean withOrderedText = collection == null; if (collection != null) { convertStartDateTimeToApiV1(collection); } return ApiResponses.Json.ok(requestedVersion, MetadataJson.listToJson(actualList, withOrderedText)); } else return ApiResponses.notFound(\"Cannot find an event with id '%s'.\", id); } else { return getEventMetadataByType(id, type, requestedVersion); } }### Assistant: @Test public void testGetAllEventMetadata() throws IOException { String expectedJson = IOUtils.toString(getClass().getResource(\"/event-metadata-expected.json\"), UTF_8); String eventId = TestEventsEndpoint.METADATA_GET_EVENT; String result = given().pathParam(\"event_id\", eventId).expect().statusCode(SC_OK).when().get(env.host(\"{event_id}/metadata\")).asString(); assertThat(result, SameJSONAs.sameJSONAs(expectedJson).allowingAnyArrayOrdering()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean checkPassword(String username, String password) { Optional<User> userOptional = retrieveUser(username); if (!userOptional.isPresent()) { logger.debug(\"User with \" + username + \" username does not exist\"); return false; } User user = userOptional.get(); if (!user.getPassword().isPresent()) { throw new IllegalStateException(\"Error retrieving user info\"); } String savedPassword = user.getPassword().get().stringValue(); Encryption encryption = encryptionSupport.getEncryption(); if (encryption == null) { return savedPassword.equals(password); } else { String encryptionPrefix = encryptionSupport.getEncryptionPrefix(); String encryptionSuffix = encryptionSupport.getEncryptionSuffix(); boolean prefix = encryptionPrefix == null || savedPassword.startsWith(encryptionPrefix); boolean suffix = encryptionSuffix == null || savedPassword.endsWith(encryptionSuffix); if (prefix && suffix) { savedPassword = savedPassword.substring(encryptionPrefix != null ? encryptionPrefix.length() : 0, savedPassword.length() - (encryptionSuffix != null ? encryptionSuffix.length() : 0)); return encryption.checkPassword(password, savedPassword); } else { return password.equals(savedPassword); } } }### Assistant: @Test public void testCheckPasswordWithoutEncryption() { when(encryptionSupport.getEncryption()).thenReturn(null); boolean result = engine.checkPassword(username, password); assertTrue(result); result = engine.checkPassword(username, \"password\"); assertFalse(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String toHtml() { return String.format(\"<p>%s</p>\", this.text != null ? this.text : \"\"); }### Assistant: @Test public void testToHtml() { assertEquals(\"<p>foo</p>\",new Paragraph(\"foo\").toHtml()); assertEquals(\"<p></p>\",new Paragraph().toHtml()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Fact retractFact(RequestHeader rh, RetractFactRequest request) throws AccessDeniedException, AuthenticationFailedException, InvalidArgumentException, ObjectNotFoundException { return delegateProvider.get(FactRetractDelegate.class).handle(request); }### Assistant: @Test public void testRetractFactCallsDelegate() throws Exception { FactRetractDelegate delegate = mock(FactRetractDelegate.class); when(delegateProvider.get(FactRetractDelegate.class)).thenReturn(delegate); RetractFactRequest request = new RetractFactRequest(); service.retractFact(RequestHeader.builder().build(), request); verify(delegate).handle(request); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Origin handle(DeleteOriginRequest request) throws AccessDeniedException, AuthenticationFailedException, InvalidArgumentException, ObjectNotFoundException { OriginEntity entity = fetchExistingOrigin(request); securityContext.checkReadPermission(entity); checkDeletePermission(entity); assertNotDeleted(entity); entity.addFlag(OriginEntity.Flag.Deleted); entity = originManager.saveOrigin(entity); return originResponseConverter.apply(entity); }### Assistant: @Test(expected = ObjectNotFoundException.class) public void testDeleteOriginNotExistingOrigin() throws Exception { delegate.handle(new DeleteOriginRequest().setId(UUID.randomUUID())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T> CompletableFuture<T> processAttachment(SW360Release release, String attachmentId, SW360AttachmentAwareClient.AttachmentProcessor<? extends T> processor) { return FutureUtils.wrapInFuture(() -> release.getSelfLink().getHref(), \"Release has no ID\") .thenCompose(href -> getReleaseClient().processAttachment(href, attachmentId, processor)); }### Assistant: @Test public void testProcessAttachment() { final String attachmentId = \"attach-test-id\"; final Integer result = 42; @SuppressWarnings(\"unchecked\") SW360AttachmentAwareClient.AttachmentProcessor<Integer> processor = mock(SW360AttachmentAwareClient.AttachmentProcessor.class); addSelfLink(release); when(releaseClient.processAttachment(RELEASE_HREF, attachmentId, processor)) .thenReturn(CompletableFuture.completedFuture(result)); Integer processResult = block(releaseClientAdapter.processAttachment(release, attachmentId, processor)); assertThat(processResult).isEqualTo(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public D setSetting(String settingName, Object value) throws InvalidConfigException { D newConfig = super.setSetting(settingName, value); return setNewConfig(newConfig); }### Assistant: @Test(expectedExceptions=InvalidConfigException.class) public void testInvalidSimpleProperty() throws InvalidConfigException { _configManager.setSetting(\"com.linkedin.databus2.inSetting\", 3); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<PPredicate> getPredicates() { return Collections.unmodifiableList(predicates); }### Assistant: @Test public void testSinglePredicate() throws BCompoundException { Start parse = BParser.parse(\"#PREDICATE a=1\"); PredicateConjunctionSplitter splitter = new PredicateConjunctionSplitter(); parse.apply(splitter); assertEquals(1, splitter.getPredicates().size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void sendNotification(String text, NotificationEvent.NotificationType type) { eventBus.fireEvent(new ScenarioNotificationEvent(text, type)); }### Assistant: @Test public void sendNotification() { presenterSpy.sendNotification(\"message\", NotificationEvent.NotificationType.ERROR); verify(eventBusMock, times(1)).fireEvent(scenarioNotificationEventArgumentCaptor.capture()); assertEquals(\"message\", scenarioNotificationEventArgumentCaptor.getValue().getMessage()); assertEquals(NotificationEvent.NotificationType.ERROR, scenarioNotificationEventArgumentCaptor.getValue().getNotificationType()); assertTrue(scenarioNotificationEventArgumentCaptor.getValue().isAutoHide()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onDecisionTableSelectedEvent(final @Observes DecisionTableSelectedEvent event) { super.onDecisionTableSelectedEvent(event); }### Assistant: @Test public void testOnDecisionTableSelectedEventWithOtherwiseColumnSelectedAndItDoesNotHaveEditableColumns() { when(dtPresenter.hasEditableColumns()).thenReturn(false); model.getConditions().add(makePattern52()); model.getData().add(makeDTCellValue52()); uiModel.selectCell(0, 3); builder.onDecisionTableSelectedEvent(new DecisionTableSelectedEvent(dtPresenter)); assertTrue(builder.miCut.getMenuItem().isEnabled()); assertTrue(builder.miCopy.getMenuItem().isEnabled()); assertFalse(builder.miPaste.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); assertTrue(builder.miOtherwiseCell.getMenuItem().isEnabled()); verify(builder.miOtherwiseCell.getMenuItemView(), times(1)).setIconType(eq(null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T> T query(ConfigQuery<T> query) { return query.query(this); }### Assistant: @Test public void query() { DefaultConfiguration c = new DefaultConfiguration(new MockedConfigurationContext()); assertThat(\"testQ\").isEqualTo(c.query(config -> \"testQ\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private CacheQuery() { }### Assistant: @Test public void cacheQuery() { Criteria etCriteria = new ETCriteria(\"id\", 3); Filter ltFilter = new LTFilter(\"age\", 18); Query query = CacheQuery.newQuery().setCriteria(etCriteria).setFilter(ltFilter); assertEquals(etCriteria, query.getCriteria()); assertEquals(ltFilter, query.getFilter()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String useSoJson(String city) { String url = \"https: HashMap<String, Object> param = new HashMap<>(); param.put(\"city\", city); return OkHttpUtil.doGet(url, param); }### Assistant: @Test public void useSoJson() throws Exception { String city = \"\u5317\u4eac\"; String res = WeatherUtil.useSoJson(city); System.out.println(\"useSoJson weather result : \" + res); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public static <T> Function<T, Tuple0OfNullables> toTupleOfNullables() { return (Function<T, Tuple0OfNullables>) Tuple0OfNullablesMapperImpl.EMPTY_MAPPER; }### Assistant: @Test void toTuple6OfNullables() { final Function<Integer, Tuple6OfNullables<Integer, Integer, Integer, Integer, Integer, Integer>> mapper = TuplesOfNullables.toTupleOfNullables(i -> i + 0, i -> i + 1, i -> i + 2, i -> i + 3, i -> i + 4, i -> i + 5); assertTuple(mapper.apply(0), 6); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void validatePolicyAssertions(List<Assertion> assertions, String caller) { if (assertions == null) { return; } for (Assertion assertion : assertions) { validatePolicyAssertion(assertion, caller); } }### Assistant: @Test public void testValidatePolicyAssertionsInValid() { Assertion assertion = new Assertion(); assertion.setAction(\"update\"); assertion.setEffect(AssertionEffect.ALLOW); assertion.setResource(\"resource1\"); assertion.setRole(ZMSUtils.roleResourceName(\"domain1\", \"role1\")); List<Assertion> assertList = new ArrayList<>(); assertList.add(assertion); try { zms.validatePolicyAssertions(assertList, \"unitTest\"); fail(); } catch (ResourceException ex) { assertEquals(400, ex.getCode()); } assertion = new Assertion(); assertion.setAction(\"update\"); assertion.setEffect(AssertionEffect.ALLOW); assertion.setResource(\":resource1\"); assertion.setRole(ZMSUtils.roleResourceName(\"domain1\", \"role1\")); assertList.clear(); assertList.add(assertion); try { zms.validatePolicyAssertions(assertList, \"unitTest\"); fail(); } catch (ResourceException ex) { assertEquals(400, ex.getCode()); } assertion = new Assertion(); assertion.setAction(\"update\"); assertion.setEffect(AssertionEffect.ALLOW); assertion.setResource(\"domain name:resource1\"); assertion.setRole(ZMSUtils.roleResourceName(\"domain1\", \"role1\")); assertList.clear(); assertList.add(assertion); try { zms.validatePolicyAssertions(assertList, \"unitTest\"); fail(); } catch (ResourceException ex) { assertEquals(400, ex.getCode()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static final String[] getPrincipalNames(String keytabFileName) throws IOException { Keytab keytab = Keytab.loadKeytab(new File(keytabFileName)); Set<String> principals = new HashSet<String>(); List<PrincipalName> entries = keytab.getPrincipals(); for (PrincipalName entry : entries) { principals.add(entry.getName().replace(\"\\\\\", \"/\")); } return principals.toArray(new String[0]); }### Assistant: @Test public void testGetPrincipalNamesFromKeytab() throws IOException { createKeyTab(testKeytab, testPrincipals); String[] principals = KerberosUtil.getPrincipalNames(testKeytab); Assert.assertNotNull(\"principals cannot be null\", principals); int expectedSize = 0; List<String> principalList = Arrays.asList(principals); for (String principal : testPrincipals) { Assert.assertTrue(\"missing principal \"+principal, principalList.contains(principal)); expectedSize++; } Assert.assertEquals(expectedSize, principals.length); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ValidationReport loadProjectFlow(final Project project, final File projectDir) { convertYamlFiles(projectDir); FlowLoaderUtils.checkJobProperties(project.getId(), this.props, this.jobPropsMap, this.errors); return FlowLoaderUtils.generateFlowLoaderReport(this.errors); }### Assistant: @Test public void testLoadEmbeddedFlowYamlFile() { final DirectoryYamlFlowLoader loader = new DirectoryYamlFlowLoader(new Props()); loader.loadProjectFlow(this.project, ExecutionsTestUtil.getFlowDir(EMBEDDED_FLOW_YAML_DIR)); checkFlowLoaderProperties(loader, 0, 3, 3); checkFlowProperties(loader, EMBEDDED_FLOW, 0, 4, 1, 3, null); checkFlowProperties(loader, EMBEDDED_FLOW_1, 0, 4, 1, 3, null); checkFlowProperties(loader, EMBEDDED_FLOW_2, 0, 2, 1, 1, null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public File getFile(String path) throws IOException { ensureUnpacked(); final File file = new File(extractDir, path); if (!(file.isFile() || file.isDirectory())) { throw new IOException(); } return file; }### Assistant: @Test(expected = IOException.class) public void testTar_getFile_invalidPath() throws IOException { final File testTgz = TestUtil.getTestFile(\"tgz/test-archive.tar\"); virtualDir = new VirtualDirTgz(testTgz); virtualDir.getFile(\"test-archive/invalid_dir/missing.file\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void updateTestRunnerReportingPanelResult(TestResultMessage testResultMessage) { testRunnerReportingPanelWrapper.onTestRun(testResultMessage); }### Assistant: @Test public void updateTestRunnerReportingPanelResult() { TestResultMessage testResultMessageMock = mock(TestResultMessage.class); scenarioSimulationBusinessCentralDocksHandlerSpy.updateTestRunnerReportingPanelResult(testResultMessageMock); verify(testRunnerReportingPanelWrapperMock, times(1)).onTestRun(eq(testResultMessageMock)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void start() { MonitorManager.getInstance().addObserver(executionMonitor); facade.addResultListener(this); facade.fire(); try { if (DataBundles.hasInputs(getDataBundle())) { Path inputs = DataBundles.getInputs(getDataBundle()); for (Entry<String, DataflowInputPort> inputPort : inputPorts .entrySet()) { String portName = inputPort.getKey(); Path port = DataBundles.getPort(inputs, portName); if (!DataBundles.isMissing(port)) { T2Reference identifier = referenceService.register( DataBundles.resolve(port, ResolveOptions.BYTES), inputPort.getValue() .getDepth(), true, null); int[] index = new int[] {}; WorkflowDataToken token = new WorkflowDataToken(\"\", index, identifier, facade.getContext()); try { facade.pushData(token, portName); } catch (TokenOrderException e) { logger.log(SEVERE, \"Unable to push data for input \" + portName, e); } } } } } catch (IOException|UncheckedIOException e) { logger.log(SEVERE, \"Error getting input data\", e); } }### Assistant: @Test @Ignore public void testStart() { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<String> keys() { if ( keys == null ) { blockingGet( cursor.peekAsync() ); keys = cursor.keys(); } return keys; }### Assistant: @Test void accessingKeysWithoutCallingNextShouldNotFail() { Result result = createResult( 11 ); assertThat( result.keys(), equalTo( asList( \"k1\", \"k2\" ) ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") static Class<?> getParameterType(Object object, Class<?> expectedType) { Collection<Class<?>> extendedAndImplementedTypes = getExtendedAndImplementedTypes(object.getClass(), new LinkedList<Class<?>>()); for (Class<?> type : extendedAndImplementedTypes) { Type[] implementedInterfaces = type.getGenericInterfaces(); for (Type implementedInterface : implementedInterfaces) { if (implementedInterface instanceof ParameterizedType) { ParameterizedType parameterizedCandidateType = (ParameterizedType) implementedInterface; if (parameterizedCandidateType.getRawType().equals(expectedType)) { Type[] typeArguments = parameterizedCandidateType.getActualTypeArguments(); Type typeArgument; if (typeArguments.length == 0) { typeArgument = Object.class; } else { typeArgument = parameterizedCandidateType.getActualTypeArguments()[0]; } return (Class<?>) typeArgument; } } } } throw new RuntimeException(\"Expected type \" + expectedType + \" is not in class hierarchy of \" + object.getClass()); }### Assistant: @Test public void testGetParameterTypeForIndirectImplementer() { Class<?> clazz = EventConsumer.getParameterType(new TestEventContainsIdChild(), ContainsId.class); Assert.assertNotNull(clazz); Assert.assertEquals(Integer.class, clazz); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static final void reverse(byte[] a) { byte tmp; for (int i = 0, mid = a.length >> 1; i < mid; i++) { tmp = a[i]; a[i] = a[a.length - 1 - i]; a[a.length - 1 - i] = tmp; } }### Assistant: @Test public final void noElements() { byte[] expecteds = new byte[] {}; byte[] actuals = new byte[] {}; ArrayUtil.reverse(actuals); Assert.assertArrayEquals(expecteds, actuals); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getId() { return id; }### Assistant: @Test public void label_alpha_hyphen_rocks_da_house_has_alpha_hyphen_rocks_da_house_as_id() { assertEquals(\"alpha-rocksdahouse\", new AsciiDoctorInlineAnchor(\"[[alpha-rocksdahouse]]\", -1, -1).getId()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void validate() { ProjectLogger.log(\"UserBulkMigrationRequestValidator:validate:start validating migration users\", LoggerEnum.INFO.name()); checkCsvRows(); }### Assistant: @Test public void testShadowUserMigrationWithBlankInputStatus(){ List<MigrationUser> migrationUserList=new ArrayList<>(); MigrationUser migrationUser = new MigrationUser(); migrationUser.setChannel(\"TN\"); migrationUser.setOrgExternalId(\"org ext id\"); migrationUser.setPhone(\"9876543210\"); migrationUser.setUserExternalId(\"any user ext id\"); migrationUser.setName(\"Shadow User Name\"); migrationUserList.add(migrationUser); try { new ShadowUserUpload.ShadowUserUploadBuilder() .setProcessId(ProjectUtil.generateUniqueId()) .setFileSize(\"1024\") .setValues(migrationUserList) .validate(); } catch (Exception e) { Assert.assertEquals(\"[ In Row 1:the Column input status:is missing ]\", e.getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static char getAsChar(Map<String, Object> map, String key) { Object value = map.get(key); if (value instanceof Character) { return (char) value; } if (value == null) { return 0; } if (value instanceof String) { return JsonParserUtils.getCharFromString((String) value); } throw new WrongTypeException(key, \"char\", value); }### Assistant: @Test public void testCharFromNull() { Character actual = MapValueGetter.getAsChar(map, \"value\"); Character expected = 0; assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Pair<Integer, Integer> getUtf8Range(final byte[] buffer, final int offset, final int length) { final int start = getUtf8ByteStart(buffer, offset); final int end = getUtf8ByteEnd(buffer, offset + length - 1); return new Pair<>(start, end - start + 1); }### Assistant: @Test public void testAsciiUTF() throws IOException { final String foreignText = \"abcdefghijklmnopqrstuvwxyz\"; final byte[] utf8ByteArray = createUTF8ByteArray(foreignText); final int length = utf8ByteArray.length; System.out.println(\"char length:\" + foreignText.length() + \" utf8BytesLength:\" + utf8ByteArray.length + \" for:\" + foreignText); final Pair<Integer, Integer> pair = FileIOUtils.getUtf8Range(utf8ByteArray, 1, length - 6); System.out.println(\"Pair :\" + pair.toString()); final String recreatedString = new String(utf8ByteArray, 1, length - 6, \"UTF-8\"); System.out.println(\"recreatedString:\" + recreatedString); final String correctString = new String(utf8ByteArray, pair.getFirst(), pair.getSecond(), \"UTF-8\"); System.out.println(\"correctString:\" + correctString); assertEquals(pair, new Pair<>(1, 20)); assertEquals(correctString.length(), foreignText.length() - 6); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean isValid(Long id, Action action, List<ValidationFailureDetails> failures) { if(LOG.isDebugEnabled()) { LOG.debug(\"==> RangerServiceValidator.isValid(\" + id + \")\"); } boolean valid = true; if (action != Action.DELETE) { ValidationErrorCode error = ValidationErrorCode.SERVICE_VALIDATION_ERR_UNSUPPORTED_ACTION; failures.add(new ValidationFailureDetailsBuilder() .isAnInternalError() .errorCode(error.getErrorCode()) .becauseOf(error.getMessage(action)) .build()); valid = false; } else if (id == null) { ValidationErrorCode error = ValidationErrorCode.SERVICE_VALIDATION_ERR_MISSING_FIELD; failures.add(new ValidationFailureDetailsBuilder() .field(\"id\") .isMissing() .errorCode(error.getErrorCode()) .becauseOf(error.getMessage(id)) .build()); valid = false; } else if (getService(id) == null) { if (LOG.isDebugEnabled()) { LOG.debug(\"No service found for id[\" + id + \"]! ok!\"); } } if(LOG.isDebugEnabled()) { LOG.debug(\"<== RangerServiceValidator.isValid(\" + id + \"): \" + valid); } return valid; }### Assistant: @Test public void test_isValid_withId_errorConditions() throws Exception { Assert.assertFalse(_validator.isValid(1L, Action.CREATE, _failures)); _utils.checkFailureForInternalError(_failures); _validator = new RangerServiceValidator(_store); _failures.clear(); Assert.assertFalse(_validator.isValid((Long)null, Action.DELETE, _failures)); _utils.checkFailureForMissingValue(_failures, \"id\"); when(_store.getService(1L)).thenReturn(null); when(_store.getService(2L)).thenThrow(new Exception()); _failures.clear(); Assert.assertTrue(_validator.isValid(1L, Action.DELETE, _failures)); Assert.assertTrue(_failures.isEmpty()); _failures.clear(); Assert.assertTrue(_validator.isValid(2L, Action.DELETE, _failures)); Assert.assertTrue(_failures.isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ThingModifyCommandAdapter of(final HeaderTranslator headerTranslator) { return new ThingModifyCommandAdapter(requireNonNull(headerTranslator)); }### Assistant: @Test public void deleteFeaturePropertiesFromAdaptable() { final DeleteFeatureProperties expected = DeleteFeatureProperties.of(TestConstants.THING_ID, TestConstants.FEATURE_ID, TestConstants.DITTO_HEADERS_V_2); final TopicPath topicPath = topicPath(TopicPath.Action.DELETE); final JsonPointer path = JsonPointer.of(\"/features/\" + TestConstants.FEATURE_ID + \"/properties\"); final Adaptable adaptable = Adaptable.newBuilder(topicPath) .withPayload(Payload.newBuilder(path) .build()) .withHeaders(TestConstants.HEADERS_V_2) .build(); final ThingModifyCommand<?> actual = underTest.fromAdaptable(adaptable); assertWithExternalHeadersThat(actual).isEqualTo(expected); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<String> getLines() { return lines; }### Assistant: @Test public void getLinesShouldReturnLinesBothSanitizedAndQuotedIfRequired() { CSVResult csv = csv( headers(\"name\", \"city\"), lines( line(\"John\", \"Seattle\"), line(\"John\", \"=Seattle\"), line(\"John\", \"+Sea,ttle\"), line(\",-John\", \"Seattle\"), line(\",,,@John\", \"Seattle\"), line(\"John\", \"Seattle=\") ) ); assertEquals( line( \"John,Seattle\", \"John,'=Seattle\", \"John,\\\"'+Sea,ttle\\\"\", \"\\\",-John\\\",Seattle\", \"\\\",,,@John\\\",Seattle\", \"John,Seattle=\" ), csv.getLines() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected ReportOutputHandler createOutputHandlerForOutputType( final String outputType ) throws IOException { if ( inputs == null ) { throw new IllegalStateException( \"Inputs are null, this component did not validate properly\" ); } final Object attribute = report.getAttribute( AttributeNames.Pentaho.NAMESPACE, AttributeNames.Pentaho.REPORT_CACHE ); final ReportCacheKey reportCacheKey = new ReportCacheKey( getViewerSessionId(), inputs ); ReportCache cache; if ( Boolean.FALSE.equals( attribute ) ) { cache = new NullReportCache(); } else { cache = PentahoSystem.get( ReportCache.class ); if ( cache == null ) { cache = new DefaultReportCache(); } final ReportOutputHandler outputHandler = cache.get( reportCacheKey ); if ( outputHandler != null ) { return outputHandler; } } if ( dashboardMode ) { report.getReportConfiguration().setConfigProperty( HtmlTableModule.BODY_FRAGMENT, \"true\" ); } ReportOutputHandlerFactory handlerFactory = PentahoSystem.get( ReportOutputHandlerFactory.class ); if ( handlerFactory == null ) { handlerFactory = new FastExportReportOutputHandlerFactory(); } ReportOutputHandler reportOutputHandler = handlerFactory.createOutputHandlerForOutputType( new InternalOutputHandlerSelector( outputType ) ); if ( reportOutputHandler == null ) { return null; } return cache.put( reportCacheKey, reportOutputHandler ); }### Assistant: @Test public void testCreateOutputHandlerForOutputtype() throws Exception { MasterReport report = mock( MasterReport.class ); Configuration config = mock( Configuration.class ); doReturn( config ).when( report ).getConfiguration(); doNothing().when( report ).setReportEnvironment( any( ReportEnvironment.class ) ); doReturn( false ).when( report ).getAttribute( anyString(), anyString() ); ModifiableConfiguration modifiableConfiguration = mock( ModifiableConfiguration.class ); doNothing().when( modifiableConfiguration ).setConfigProperty( anyString(), anyString() ); doReturn( modifiableConfiguration ).when( report ).getReportConfiguration(); sra.setReport( report ); sra.setDashboardMode( true ); ReportOutputHandler result = sra.createOutputHandlerForOutputType( \"pageable/text\" ); assertNotNull( result ); verify( modifiableConfiguration, times( 1 ) ).setConfigProperty( HtmlTableModule.BODY_FRAGMENT, \"true\" ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<Instant> instantsInRange(Instant firstInstant, Instant lastInstant, Schedule schedule) { Preconditions.checkArgument( isAligned(firstInstant, schedule) && isAligned(lastInstant, schedule), \"unaligned instant\"); Preconditions.checkArgument(!lastInstant.isBefore(firstInstant), \"last instant should not be before first instant\"); final ExecutionTime executionTime = ExecutionTime.forCron(cron(schedule)); final List<Instant> instants = new ArrayList<>(); Instant currentInstant = firstInstant; while (currentInstant.isBefore(lastInstant)) { instants.add(currentInstant); final ZonedDateTime utcDateTime = currentInstant.atZone(UTC); currentInstant = executionTime.nextExecution(utcDateTime) .orElseThrow(IllegalArgumentException::new) .toInstant(); } return instants; }### Assistant: @Test public void shouldGetExceptionIfLastInstantIsNotAlignedWithSchedule() { final Instant firstTimeHours = parse(\"2016-01-19T08:00:00.00Z\"); final Instant lastTimeHours = parse(\"2016-01-19T09:10:00.00Z\"); expect.expect(IllegalArgumentException.class); expect.expectMessage(\"unaligned instant\"); instantsInRange(firstTimeHours, lastTimeHours, Schedule.HOURS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final Geometry decimateTransformGeneralize(Geometry geometry, MathTransform transform) throws TransformException { if (geometry instanceof GeometryCollection) { GeometryCollection collection = (GeometryCollection) geometry; final int length = collection.getNumGeometries(); boolean cloned = false; Class elementType = null; Geometry[] elements = null; for (int i = 0; i < length; i++) { Geometry source = collection.getGeometryN(i); Geometry generalized = decimateTransformGeneralize(source, transform); if(generalized != source) { cloned = true; if(elements == null) { elements = new Geometry[collection.getNumGeometries()]; for (int j = 0; j < i; j++) { Geometry element = collection.getGeometryN(j); elements[j] = element; accumulateGeometryType(elementType, element); } } } if(cloned) { elements[i] = generalized; elementType = accumulateGeometryType(elementType, generalized); } } if(cloned) { if(elementType == Point.class) { Point[] points = new Point[elements.length]; System.arraycopy(elements, 0, points, 0, elements.length); return collection.getFactory().createMultiPoint(points); } else if (elementType == LineString.class) { LineString[] lines = new LineString[elements.length]; System.arraycopy(elements, 0, lines, 0, elements.length); return collection.getFactory().createMultiLineString(lines); } else if (elementType == Polygon.class) { Polygon[] polys = new Polygon[elements.length]; System.arraycopy(elements, 0, polys, 0, elements.length); return collection.getFactory().createMultiPolygon(polys); } else { return collection.getFactory().createGeometryCollection(elements); } } else { return collection; } } else if (geometry instanceof Point) { LiteCoordinateSequence seq = (LiteCoordinateSequence) ((Point) geometry) .getCoordinateSequence(); decimateTransformGeneralize(seq, transform, false, spanx, spany); return geometry; } else if (geometry instanceof Polygon) { Polygon polygon = (Polygon) geometry; LinearRing shell = (LinearRing) decimateTransformGeneralize(polygon.getExteriorRing(), transform); boolean cloned = shell != polygon.getExteriorRing(); final int length = polygon.getNumInteriorRing(); LinearRing[] holes = cloned ? new LinearRing[length] : null; for (int i = 0; i < length; i++) { LineString hole = polygon.getInteriorRingN(i); LinearRing generalized = (LinearRing) decimateTransformGeneralize(hole, transform); cloned |= generalized != hole; if (cloned) { if (holes == null) { holes = new LinearRing[length]; for (int j = 0; j < i; j++) { holes[j] = (LinearRing) polygon.getInteriorRingN(j); } } holes[i] = generalized; } } if (cloned) { return polygon.getFactory().createPolygon(shell, holes); } else { return polygon; } } else if (geometry instanceof LineString) { double spanx = this.spanx; double spany = this.spany; LineString ls = (LineString) geometry; if (ls instanceof CurvedGeometry<?>) { CurvedGeometry<LineString> curved = (CurvedGeometry<LineString>) ls; ls = curved.linearize(Math.min(Math.abs(spanx), Math.abs(spany))); spanx = -1; spany = -1; } LiteCoordinateSequence seq = LiteCoordinateSequenceFactory.lite(ls .getCoordinateSequence()); boolean loop = ls instanceof LinearRing; if (!loop && seq.size() > 1) { double x0 = seq.getOrdinate(0, 0); double y0 = seq.getOrdinate(0, 1); double x1 = seq.getOrdinate(seq.size() - 1, 0); double y1 = seq.getOrdinate(seq.size() - 1, 1); loop = Math.abs(x0 - x1) < EPS && Math.abs(y0 - y1) < EPS; } decimateTransformGeneralize(seq, transform, loop, spanx, spany); return ls; } else { return geometry; } }### Assistant: @Test public void testDistance() throws Exception { LineString ls = gf.createLineString(csf.create(new double[] {0,0,1,1,2,2,3,3,4,4,5,5})); Decimator d = new Decimator(identity, new Rectangle(0,0,5,5), 0.8); d.decimateTransformGeneralize((Geometry) ls.clone(), identity); assertEquals(6, ls.getNumPoints()); d = new Decimator(identity, new Rectangle(0,0,5,5), 1); d.decimateTransformGeneralize(ls, identity); assertEquals(4, ls.getNumPoints()); d = new Decimator(identity, new Rectangle(0,0,5,5), 6); d.decimateTransformGeneralize(ls, identity); assertEquals(2, ls.getNumPoints()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void emitTypescriptTypes(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput) { Settings settingsToUse = settings.getSettings(); TypeProcessor baseTypeProcessor = settingsToUse.customTypeProcessor; Set<Type> referencedTypes = Sets.newHashSet(model.referencedTypes().iterator()); referencedTypes.addAll(additionalTypesToOutput); Set<Class<?>> referencedClasses = getReferencedClasses(referencedTypes, settings); final Set<Type> discoveredTypes = Sets.newHashSet(referencedClasses.iterator()); referencedClasses = filterInputClasses(referencedClasses); TypeProcessor discoveringProcessor = new TypeProcessor() { @Override public Result processType(Type javaType, Context context) { discoveredTypes.add(javaType); return null; } }; settingsToUse.customTypeProcessor = discoveringProcessor; if (baseTypeProcessor != null) { settingsToUse.customTypeProcessor = new TypeProcessor.Chain(discoveringProcessor, baseTypeProcessor); } TypeScriptGenerator typescriptGenerator = new TypeScriptGenerator(settingsToUse); ByteArrayOutputStream typeDeclarations = new ByteArrayOutputStream(); Type[] types = new Type[referencedClasses.size()]; referencedClasses.toArray(types); int intendationLevel = 1; if (!settings.typescriptModule().isPresent()) { intendationLevel = 0; } typescriptGenerator.generateEmbeddableTypeScript(Input.from(types), Output.to(typeDeclarations), true, intendationLevel); writer.write(new String(typeDeclarations.toByteArray())); }### Assistant: @Test public void testAdditionalClassesToOutput() { ServiceModel model = serviceClassParser.parseServiceClass(TestServiceClass.class, settings); ServiceEmitter serviceEmitter = new ServiceEmitter(model, settings, writer); serviceEmitter.emitTypescriptTypes(settings, Lists.newArrayList(MyObject.class)); writer.close(); String expectedOutput = \"\\n\" + \" export interface MyObject {\\n\" + \" y: MyObject;\\n\" + \" }\\n\\n\\n assertEquals(expectedOutput, new String(stream.toByteArray())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: synchronized void ensureTokenInitialized() throws IOException { if (!hasInitedToken || (action != null && !action.isValid())) { Token<?> token = fs.getDelegationToken(null); if (token != null) { fs.setDelegationToken(token); addRenewAction(fs); LOG.debug(\"Created new DT for {}\", token.getService()); } hasInitedToken = true; } }### Assistant: @Test public void testInitWithUGIToken() throws IOException, URISyntaxException { Configuration conf = new Configuration(); DummyFs fs = spy(new DummyFs()); doReturn(null).when(fs).getDelegationToken(anyString()); Token<TokenIdentifier> token = new Token<TokenIdentifier>(new byte[0], new byte[0], DummyFs.TOKEN_KIND, new Text(\"127.0.0.1:1234\")); fs.ugi.addToken(token); fs.ugi.addToken(new Token<TokenIdentifier>(new byte[0], new byte[0], new Text(\"Other token\"), new Text(\"127.0.0.1:8021\"))); assertEquals(\"wrong tokens in user\", 2, fs.ugi.getTokens().size()); fs.emulateSecurityEnabled = true; fs.initialize(new URI(\"dummyfs: fs.tokenAspect.ensureTokenInitialized(); verify(fs).setDelegationToken(token); verify(fs, never()).getDelegationToken(anyString()); assertNull(Whitebox.getInternalState(fs.tokenAspect, \"dtRenewer\")); assertNull(Whitebox.getInternalState(fs.tokenAspect, \"action\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isError() { return error; }### Assistant: @Test public void testUserConstructorHappyCase() { boolean userError = user.isError(); Assert.assertThat(userError,is(ERROR)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused) { myCards.removeAll(); myCards.add(mySplitter, SPLITTER); myCards.add(myEmpty, EMPTY); addVisibleTools(model.getVisibleTools(mySide)); addHiddenTools(model.getHiddenTools(mySide)); revalidate(); repaint(); }### Assistant: @Test public void testNoVisibleTools() { when(myModel.getVisibleTools(Side.LEFT)).thenReturn(Collections.emptyList()); when(myModel.getHiddenTools(Side.LEFT)).thenReturn(ImmutableList.of(myToolWindow1, myToolWindow2)); myPanel.modelChanged(myModel, SideModel.EventType.LOCAL_UPDATE); assertThat(myPanel.isVisible()).isFalse(); assertThat(findHiddenComponents()).containsAllOf(myToolWindowComponent1, myToolWindowComponent2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void parse() throws OptionsException { Getopt g = new Getopt(application, argv, sargs.toString(), largs.toArray(new LongOpt[] {})); g.setOpterr(false); int c; while ((c = g.getopt()) != -1) { switch (c) { case '?': int ix = g.getOptind(); String option = argv[(ix == 0 ? 0 : ix-1)]; throw new OptionsException(option, g.getOptarg()); default: ListenerIF listener = listeners.get(new Integer(c)); if (listener != null) listener.processOption((char)c, g.getOptarg()); else System.err.println (\"Warning: option '\" + (char)c + \"' ignored\"); break; } } for (int i = g.getOptind(); i < argv.length ; i++) { arguments.add(argv[i]); } }### Assistant: @Test public void testWithMistypedOption() throws CmdlineOptions.OptionsException { String[] argv = {\"-tmid=140\", \"propfile\", \"tmfile.xtm\"}; setupRDBMS(argv); try { options.parse(); Assert.fail(\"Incorrect options allowed\"); } catch (CmdlineOptions.OptionsException e) { Assert.assertTrue(\"Wrong problem reported\" + e.getArgument(), e.getArgument().equals(\"-tmid=140\")); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String formatAll(Parameter[] parameters, List<Object> arguments) { StringBuilder stringBuilder = new StringBuilder(); for (int idx = 0; idx < arguments.size(); idx++) { String parameterName = (parameters.length > idx) ? parameters[idx].getName() : \"?\"; Object argument = arguments.get(idx); stringBuilder.append(parameterName).append(\"=\").append(format(argument)); if (idx < arguments.size() - 1) { stringBuilder.append(\", \"); } } return stringBuilder.toString(); }### Assistant: @Test void testFormatAllReplacesNullTerminatorWithTheirPrintableCounterpart() { final List<Object> arguments = list(\"\\0\"); String result = underTest.formatAll(paramsWith(1), arguments); assertThat(result).isEqualTo(\"c0=\\\\0\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Future<T> getFuture(){ return this.future; }### Assistant: @Test public void testErrorCatchingFuture() { FutureWithTrigger<Object> futureWithTrigger = new FutureWithTrigger<>(); RuntimeException exception = new RuntimeException(); AtomicReference<RuntimeException> exceptionReference = new AtomicReference<>(); Triggerer.triggerValue(new Object(), futureWithTrigger); try { futureWithTrigger.getFuture().consume(v -> { throw exception; }).trapFuture(RuntimeException.class, e -> { exceptionReference.set(e); throw e; }).await(); fail(\"Exception should have been thrown\"); } catch (Exception catchedException) { assertEquals(exception, exceptionReference.get()); assertEquals(exception, catchedException); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected List<SanitizedSecret> listSecretsBatched(@Auth User user, int idx, int num, boolean newestFirst) { logger.info(\"User '{}' listing secrets with idx '{}', num '{}', newestFirst '{}'.\", user, idx, num, newestFirst); return secretController.getSecretsBatched(idx, num, newestFirst); }### Assistant: @Test public void listSecretsBatched() { SanitizedSecret secret1 = SanitizedSecret.of(1, \"name1\", \"desc\", \"checksum\", NOW, \"user\", NOW, \"user\", emptyMap, null, null, 1136214245, 125L, NOW, \"user\"); SanitizedSecret secret2 = SanitizedSecret.of(2, \"name2\", \"desc\", \"checksum\", NOWPLUS, \"user\", NOWPLUS, \"user\", emptyMap, null, null, 1136214245, 250L, NOW, \"user\"); when(secretController.getSecretsBatched(0, 1, false)).thenReturn(ImmutableList.of(secret1)); when(secretController.getSecretsBatched(0, 1, true)).thenReturn(ImmutableList.of(secret2)); when(secretController.getSecretsBatched(1, 1, false)).thenReturn(ImmutableList.of(secret2)); List<SanitizedSecret> response = resource.listSecretsBatched(user, 0, 1, false); assertThat(response).containsOnly(secret1); response = resource.listSecretsBatched(user, 1, 1, false); assertThat(response).containsOnly(secret2); response = resource.listSecretsBatched(user, 0, 1, true); assertThat(response).containsOnly(secret2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public TransactionManager getObject() throws Exception { if (ConfigContext.getCurrentContextConfig() != null && ConfigContext.getCurrentContextConfig().getObject(RiceConstants.SPRING_TRANSACTION_MANAGER) != null) { return null; } return (TransactionManager) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[]{getObjectType()}, new LazyInitializationHandler()); }### Assistant: @Test(expected = IllegalStateException.class) public void testGetObject_JtaNotInitialized() throws Exception { transactionManagerFactoryBean.getObject().getTransaction(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NotNull public ListenableFuture<Void> createNewDirectory(@NotNull String parentPath, @NotNull String directoryName) { return createNewDirectoryRunAs(parentPath, directoryName, null); }### Assistant: @Test public void testCreateNewDirectorySuccess() throws Exception { AdbFileOperations fileOperations = setupMockDevice(); Void result = waitForFuture(fileOperations.createNewDirectory(\"/sdcard\", \"foo-dir\")); assertThat(result).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getLeaderHostName() throws KeeperException, InterruptedException { List<LeaderOffer> leaderOffers = toLeaderOffers(zooKeeper.getChildren( rootNodeName, false)); if (leaderOffers.size() > 0) { return leaderOffers.get(0).getHostName(); } return null; }### Assistant: @Test public void testGetLeaderHostName() throws KeeperException, InterruptedException { LeaderElectionSupport electionSupport = createLeaderElectionSupport(); electionSupport.start(); Thread.sleep(3000); String leaderHostName = electionSupport.getLeaderHostName(); Assert.assertNotNull(leaderHostName); Assert.assertEquals(\"foohost\", leaderHostName); electionSupport.stop(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public <T> T asyncToSync(@Nullable FDBStoreTimer timer, FDBStoreTimer.Wait event, @Nonnull CompletableFuture<T> async) { checkIfBlockingInFuture(async); if (async.isDone()) { try { return async.get(); } catch (ExecutionException ex) { throw asyncToSyncExceptionMapper.apply(ex, event); } catch (InterruptedException ex) { Thread.currentThread().interrupt(); throw asyncToSyncExceptionMapper.apply(ex, event); } } else { final Pair<Long, TimeUnit> timeout = getAsyncToSyncTimeout(event); final long startTime = System.nanoTime(); try { if (timeout != null) { return async.get(timeout.getLeft(), timeout.getRight()); } else { return async.get(); } } catch (TimeoutException ex) { if (timer != null) { timer.recordTimeout(event, startTime); throw asyncToSyncExceptionMapper.apply(new LoggableTimeoutException(ex, LogMessageKeys.TIME_LIMIT.toString(), timeout.getLeft(), LogMessageKeys.TIME_UNIT.toString(), timeout.getRight()), event); } throw asyncToSyncExceptionMapper.apply(ex, event); } catch (ExecutionException ex) { throw asyncToSyncExceptionMapper.apply(ex, event); } catch (InterruptedException ex) { Thread.currentThread().interrupt(); throw asyncToSyncExceptionMapper.apply(ex, event); } finally { if (timer != null) { timer.recordSinceNanoTime(event, startTime); } } } }### Assistant: @Test public void testCompletedBlockingInAsyncWarning() { FDBDatabaseFactory factory = FDBDatabaseFactory.instance(); factory.setBlockingInAsyncDetection(BlockingInAsyncDetection.WARN_COMPLETE_EXCEPTION_BLOCKING); factory.clear(); FDBDatabase database = factory.getDatabase(); TestHelpers.assertLogs(FDBDatabase.class, FDBDatabase.BLOCKING_IN_ASYNC_CONTEXT_MESSAGE, () -> database.asyncToSync(new FDBStoreTimer(), FDBStoreTimer.Waits.WAIT_ERROR_CHECK, CompletableFuture.supplyAsync(() -> database.asyncToSync(new FDBStoreTimer(), FDBStoreTimer.Waits.WAIT_ERROR_CHECK, CompletableFuture.completedFuture(10L))))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DomainRoleMembers getDomainRoleMembers(ResourceContext ctx, String domainName) { final String caller = ctx.getApiName(); logPrincipal(ctx); validateRequest(ctx.request(), caller); validate(domainName, TYPE_DOMAIN_NAME, caller); domainName = domainName.toLowerCase(); setRequestDomain(ctx, domainName); return dbService.listDomainRoleMembers(domainName); }### Assistant: @Test public void testGetDomainRoleMembersInvalidDomain() { try { zms.getDomainRoleMembers(mockDomRsrcCtx, \"invalid-domain\"); fail(); } catch (ResourceException ex) { assertEquals(404, ex.getCode()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DecodeQualification getDecodeQualification(Object input) { File inputFile = new File(String.valueOf(input)); if(!inputFile.getName().toUpperCase().endsWith(FIRE_FILE_EXTENSION)) { return DecodeQualification.UNABLE; } InputStream inputStream = null; try { inputStream = new FileInputStream(inputFile); return getDecodeQualification(inputStream); } catch (IOException ignored) { return DecodeQualification.UNABLE; }finally { if(inputStream != null) { try { inputStream.close(); } catch (IOException ignored) {} } } }### Assistant: @Test public void testDecodeQualificationFile() throws Exception { File input; input = TestResourceHelper.getAatsrAlgo1AsFile(); assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); input = TestResourceHelper.getAatsrAlgo2AsFile(); assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); input = TestResourceHelper.getAtsr2Algo1AsFile(); assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); input = TestResourceHelper.getAtsr2Algo2AsFile(); assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(input)); input = new File(\"9708ESA02.notAFile\"); assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(input)); input = File.createTempFile(\"emptyFile\", \".FIRE\"); assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(input)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static RetrievePolicyEntries of(final String policyId, final DittoHeaders dittoHeaders) { return of(PolicyId.of(policyId), dittoHeaders); }### Assistant: @Test public void tryToCreateInstanceWithNullPolicyIdString() { assertThatExceptionOfType(PolicyIdInvalidException.class) .isThrownBy(() -> RetrievePolicyEntries.of((String) null, EMPTY_DITTO_HEADERS)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static URI create(final ContextURL contextURL) { StringBuilder result = new StringBuilder(); if (contextURL.getServiceRoot() != null) { result.append(contextURL.getServiceRoot()); } else if (contextURL.getODataPath() != null) { String oDataPath = contextURL.getODataPath(); char[] chars = oDataPath.toCharArray(); for (int i = 1; i < chars.length - 1; i++) { if (chars[i] == '/' && chars[i - 1] != '/') { result.append(\"../\"); } } } result.append(Constants.METADATA); if (contextURL.getEntitySetOrSingletonOrType() != null) { result.append('#'); if (contextURL.isCollection()) { result.append(\"Collection(\") .append(Encoder.encode(contextURL.getEntitySetOrSingletonOrType())) .append(\")\"); } else { result.append(Encoder.encode(contextURL.getEntitySetOrSingletonOrType())); } } if (contextURL.getDerivedEntity() != null) { if (contextURL.getEntitySetOrSingletonOrType() == null) { throw new IllegalArgumentException(\"ContextURL: Derived Type without anything to derive from!\"); } result.append('/').append(Encoder.encode(contextURL.getDerivedEntity())); } if (contextURL.getKeyPath() != null) { result.append('(').append(contextURL.getKeyPath()).append(')'); } if (contextURL.getNavOrPropertyPath() != null) { if (contextURL.getServiceRoot() == null || !contextURL.getServiceRoot().isAbsolute()) { String[] paths = contextURL.getNavOrPropertyPath().split(\"/\"); for (String path : paths) { result.insert(0, \"../\"); } } result.append('/').append(contextURL.getNavOrPropertyPath()); } if (contextURL.getSelectList() != null) { result.append('(').append(contextURL.getSelectList()).append(')'); } if (contextURL.isReference()) { if (contextURL.getServiceRoot() == null || !contextURL.getServiceRoot().isAbsolute()) { result.insert(0, \"../\"); } if (contextURL.getEntitySetOrSingletonOrType() != null) { throw new IllegalArgumentException(\"ContextURL: $ref with Entity Set\"); } if (contextURL.isCollection()) { result.append('#') .append(\"Collection(\") .append(ContextURL.Suffix.REFERENCE.getRepresentation()) .append(\")\"); } else { result.append('#').append(ContextURL.Suffix.REFERENCE.getRepresentation()); } } else if (contextURL.getSuffix() != null) { if (contextURL.getEntitySetOrSingletonOrType() == null) { throw new IllegalArgumentException(\"ContextURL: Suffix without preceding Entity Set!\"); } result.append('/').append(contextURL.getSuffix().getRepresentation()); } return URI.create(result.toString()); }### Assistant: @Test public void buildEntitySetWithEntitySuffix() { EdmEntitySet entitySet = Mockito.mock(EdmEntitySet.class); Mockito.when(entitySet.getName()).thenReturn(\"Customers\"); final ContextURL contextURL = ContextURL.with().serviceRoot(serviceRoot) .entitySet(entitySet) .suffix(Suffix.ENTITY) .build(); assertEquals(serviceRoot + \"$metadata#Customers/$entity\", ContextURLBuilder.create(contextURL).toASCIIString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String[] resolveSequenceHeader(final String headerSource) { String[] result = new String[0]; if (headerSource != null) { result = headerSource.split(SequenceConstants.SEQUENCE_KEY_SEPARATOR.getConstant()); } return result; }### Assistant: @Test public void testResolveSequenceHeaderWhenThereAreMoreKeysInInput() { String testKeyFirst = \"TestKey1\"; String testKeySecond = \"TestKey2\"; String input = testKeyFirst + SequenceConstants.SEQUENCE_KEY_SEPARATOR.getConstant() + testKeySecond; String[] result = underTest.resolveSequenceHeader(input); Assert.assertEquals(result.length, 2); Assert.assertEquals(result[0], testKeyFirst); Assert.assertEquals(result[1], testKeySecond); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void connectRequested(final ChannelHandlerContext ctx, final ChannelStateEvent e) throws Exception { if (!(e.getValue() instanceof InetSocketAddress)) { super.connectRequested(ctx, e); return; } final InetSocketAddress originalAddress = (InetSocketAddress) e.getValue(); if (!originalAddress.isUnresolved()) { super.connectRequested(ctx, e); return; } ListenableFuture<InetSocketAddress> resolvedFuture = resolveService.submit(new Callable<InetSocketAddress>() { @Override public InetSocketAddress call() throws Exception { return resolvedAddressProvider.createResolved(originalAddress); } }); Futures.addCallback(resolvedFuture, new FutureCallback<InetSocketAddress>() { @Override public void onSuccess(InetSocketAddress resolvedAddress) { try { DownstreamChannelStateEvent forwardedEvent = new DownstreamChannelStateEvent(e.getChannel(), e.getFuture(), e.getState(), resolvedAddress); AddressResolverHandler.super.connectRequested(ctx, forwardedEvent); } catch (Exception cause) { failConnect(cause); } } @Override public void onFailure(Throwable cause) { failConnect(cause); } private void failConnect(Throwable cause) { LOGGER.warn(\"fail connect to unresolved address:{}\", originalAddress, cause); Channels.fireExceptionCaughtLater(ctx, cause); } }); }### Assistant: @Test public void shouldSimplyForwardEventWhenConnectIsCalledWithNonInetSocketAddress() throws Exception { ChannelStateEvent event = new DownstreamChannelStateEvent( channel, new DefaultChannelFuture(channel, false), ChannelState.CONNECTED, new LocalAddress(LocalAddress.EPHEMERAL) ); handler.connectRequested(ctx, event); verify(ctx).sendDownstream(refEq(event)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FactTypeEntity resolveFactType(String type) throws AccessDeniedException, InvalidArgumentException { FactTypeEntity typeEntity; try { typeEntity = factManager.getFactType(UUID.fromString(type)); } catch (IllegalArgumentException ignored) { typeEntity = factManager.getFactType(type); } if (typeEntity == null) { throw new InvalidArgumentException().addValidationError(\"FactType does not exist.\", \"fact.type.not.exist\", \"type\", type); } if (Objects.equals(typeEntity.getId(), RETRACTION_FACT_TYPE_ID)) { throw new AccessDeniedException(\"Not allowed to manually use system-defined Retraction FactType. Use /retract endpoint instead.\"); } return typeEntity; }### Assistant: @Test public void testResolveFactTypeById() throws Exception { UUID type = UUID.randomUUID(); FactTypeEntity entity = new FactTypeEntity(); when(factManager.getFactType(type)).thenReturn(entity); assertSame(entity, resolver.resolveFactType(type.toString())); verify(factManager).getFactType(type); verifyNoMoreInteractions(factManager); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public CommandReport execute( ConcurrentMap<String, Object> requestSharedDataContext) throws AmbariException, InterruptedException { Map<String,String> commandParameters = getCommandParameters(); if( null == commandParameters || commandParameters.isEmpty() ){ return createCommandReport(0, HostRoleStatus.FAILED, \"{}\", \"\", \"Unable to change configuration values without command parameters\"); } String clusterName = commandParameters.get(\"clusterName\"); Cluster cluster = m_clusters.getCluster(clusterName); String configType = commandParameters.get(ConfigureTask.PARAMETER_CONFIG_TYPE); List<ConfigurationKeyValue> keyValuePairs = Collections.emptyList(); String keyValuePairJson = commandParameters.get(ConfigureTask.PARAMETER_KEY_VALUE_PAIRS); if (null != keyValuePairJson) { keyValuePairs = m_gson.fromJson( keyValuePairJson, new TypeToken<List<ConfigurationKeyValue>>(){}.getType()); keyValuePairs = getAllowedSets(cluster, configType, keyValuePairs); } List<Transfer> transfers = Collections.emptyList(); String transferJson = commandParameters.get(ConfigureTask.PARAMETER_TRANSFERS); if (null != transferJson) { transfers = m_gson.fromJson( transferJson, new TypeToken<List<Transfer>>(){}.getType()); transfers = getAllowedTransfers(cluster, configType, transfers); } List<Replace> replacements = Collections.emptyList(); String replaceJson = commandParameters.get(ConfigureTask.PARAMETER_REPLACEMENTS); if (null != replaceJson) { replacements = m_gson.fromJson( replaceJson, new TypeToken<List<Replace>>(){}.getType()); replacements = getAllowedReplacements(cluster, configType, replacements); } List<Insert> insertions = Collections.emptyList(); String insertJson = commandParameters.get(ConfigureTask.PARAMETER_INSERTIONS); if (null != insertJson) { insertions = m_gson.fromJson( insertJson, new TypeToken<List<Insert>>(){}.getType()); } if (keyValuePairs.isEmpty() && transfers.isEmpty() && replacements.isEmpty() && insertions.isEmpty()) { String message = \"cluster={0}, type={1}, transfers={2}, replacements={3}, insertions={4}, configurations={5}\"; message = MessageFormat.format(message, clusterName, configType, transfers, replacements, insertions, keyValuePairs); StringBuilder buffer = new StringBuilder( \"Skipping this configuration task since none of the conditions were met and there are no transfers, replacements, or insertions.\").append(\"\\n\"); buffer.append(message); return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", buffer.toString(), \"\"); } if (null == clusterName || null == configType || (keyValuePairs.isEmpty() && transfers.isEmpty() && replacements.isEmpty() && insertions.isEmpty())) { String message = \"cluster={0}, type={1}, transfers={2}, replacements={3}, insertions={4}, configurations={5}\"; message = MessageFormat.format(message, clusterName, configType, transfers, replacements, insertions, keyValuePairs); return createCommandReport(0, HostRoleStatus.FAILED, \"{}\", \"\", message); } Map<String, DesiredConfig> desiredConfigs = cluster.getDesiredConfigs(); DesiredConfig desiredConfig = desiredConfigs.get(configType); if (desiredConfig == null) { throw new AmbariException(\"Could not find desired config type with name \" + configType); } Config config = cluster.getConfig(configType, desiredConfig.getTag()); if (config == null) { throw new AmbariException(\"Could not find config type with name \" + configType); } StackId currentStack = cluster.getCurrentStackVersion(); StackId targetStack = cluster.getDesiredStackVersion(); StackId configStack = config.getStackId(); Map<String, String> base = config.getProperties(); Map<String, String> newValues = new HashMap<>(base); boolean changedValues = false; StringBuilder outputBuffer = new StringBuilder(250); for (Transfer transfer : transfers) { switch (transfer.operation) { case COPY: String valueToCopy = null; if( null == transfer.fromType ) { valueToCopy = base.get(transfer.fromKey); } else { Config other = cluster.getDesiredConfigByType(transfer.fromType); if (null != other){ Map<String, String> otherValues = other.getProperties(); if (otherValues.containsKey(transfer.fromKey)){ valueToCopy = otherValues.get(transfer.fromKey); } } } if (StringUtils.isBlank(valueToCopy) && !StringUtils.isBlank(transfer.defaultValue)) { valueToCopy = transfer.defaultValue; } if (StringUtils.isNotBlank(valueToCopy)) { if (transfer.coerceTo != null) { switch (transfer.coerceTo) { case YAML_ARRAY: { String[] splitValues = StringUtils.split(valueToCopy, ','); List<String> quotedValues = new ArrayList<>(splitValues.length); for (String splitValue : splitValues) { quotedValues.add(\"'\" + StringUtils.trim(splitValue) + \"'\"); } valueToCopy = \"[\" + StringUtils.join(quotedValues, ',') + \"]\"; break; } default: break; } } changedValues = true; newValues.put(transfer.toKey, valueToCopy); updateBufferWithMessage(outputBuffer, MessageFormat.format(\"Created {0}/{1} = \\\"{2}\\\"\", configType, transfer.toKey, mask(transfer, valueToCopy))); } break; case MOVE: if (newValues.containsKey(transfer.fromKey)) { newValues.put(transfer.toKey, newValues.remove(transfer.fromKey)); changedValues = true; updateBufferWithMessage(outputBuffer, MessageFormat.format(\"Renamed {0}/{1} to {2}/{3}\", configType, transfer.fromKey, configType, transfer.toKey)); } else if (StringUtils.isNotBlank(transfer.defaultValue)) { newValues.put(transfer.toKey, transfer.defaultValue); changedValues = true; updateBufferWithMessage(outputBuffer, MessageFormat.format(\"Created {0}/{1} with default value \\\"{2}\\\"\", configType, transfer.toKey, mask(transfer, transfer.defaultValue))); } break; case DELETE: if (\"*\".equals(transfer.deleteKey)) { newValues.clear(); updateBufferWithMessage(outputBuffer, MessageFormat.format(\"Deleted all keys from {0}\", configType)); for (String keeper : transfer.keepKeys) { if (base.containsKey(keeper) && base.get(keeper) != null) { newValues.put(keeper, base.get(keeper)); updateBufferWithMessage(outputBuffer, MessageFormat.format(\"Preserved {0}/{1} after delete\", configType, keeper)); } } if (transfer.preserveEdits) { List<String> edited = findValuesToPreserve(clusterName, config); for (String changed : edited) { newValues.put(changed, base.get(changed)); updateBufferWithMessage(outputBuffer, MessageFormat.format(\"Preserved {0}/{1} after delete\", configType, changed)); } } changedValues = true; } else { newValues.remove(transfer.deleteKey); changedValues = true; updateBufferWithMessage(outputBuffer, MessageFormat.format(\"Deleted {0}/{1}\", configType, transfer.deleteKey)); } break; } } if (null != keyValuePairs && !keyValuePairs.isEmpty()) { for (ConfigurationKeyValue keyValuePair : keyValuePairs) { String key = keyValuePair.key; String value = keyValuePair.value; if (null != key) { String oldValue = base.get(key); if (null != oldValue && value.equals(oldValue)) { if (currentStack.equals(targetStack) && !changedValues) { updateBufferWithMessage(outputBuffer, MessageFormat.format( \"{0}/{1} for cluster {2} would not change, skipping setting\", configType, key, clusterName)); continue; } } newValues.put(key, value); final String message; if (StringUtils.isEmpty(value)) { message = MessageFormat.format(\"{0}/{1} changed to an empty value\", configType, key); } else { message = MessageFormat.format(\"{0}/{1} changed to \\\"{2}\\\"\", configType, key, mask(keyValuePair, value)); } updateBufferWithMessage(outputBuffer, message); } } } for (Replace replacement : replacements) { String toReplace = newValues.get(replacement.key); if (StringUtils.isNotBlank(toReplace)) { if (!toReplace.contains(replacement.find)) { updateBufferWithMessage(outputBuffer, MessageFormat.format(\"String \\\"{0}\\\" was not found in {1}/{2}\", replacement.find, configType, replacement.key)); } else { String replaced = StringUtils.replace(toReplace, replacement.find, replacement.replaceWith); newValues.put(replacement.key, replaced); updateBufferWithMessage(outputBuffer, MessageFormat.format(\"Replaced {0}/{1} containing \\\"{2}\\\" with \\\"{3}\\\"\", configType, replacement.key, replacement.find, replacement.replaceWith)); } } else { updateBufferWithMessage(outputBuffer, MessageFormat.format( \"Skipping replacement for {0}/{1} because it does not exist or is empty.\", configType, replacement.key)); } } for (Insert insert : insertions) { String valueToInsertInto = newValues.get(insert.key); if (StringUtils.isNotBlank(valueToInsertInto)) { if (StringUtils.contains(valueToInsertInto, insert.value)) { updateBufferWithMessage(outputBuffer, MessageFormat.format(\"Skipping insertion for {0}/{1} because it already contains {2}\", configType, insert.key, insert.value)); continue; } String valueToInsert = insert.value; if (insert.newlineBefore) { valueToInsert = System.lineSeparator() + valueToInsert; } if (insert.newlineAfter) { valueToInsert = valueToInsert + System.lineSeparator(); } switch (insert.insertType) { case APPEND: valueToInsertInto = valueToInsertInto + valueToInsert; break; case PREPEND: valueToInsertInto = valueToInsert + valueToInsertInto; break; default: LOG.error(\"Unable to insert {0}/{1} with unknown insertion type of {2}\", configType, insert.key, insert.insertType); break; } newValues.put(insert.key, valueToInsertInto); updateBufferWithMessage(outputBuffer, MessageFormat.format( \"Updated {0}/{1} by inserting {2}\", configType, insert.key, insert.value)); } else { updateBufferWithMessage(outputBuffer, MessageFormat.format( \"Skipping insertion for {0}/{1} because it does not exist or is empty.\", configType, insert.key)); } } if (!targetStack.equals(currentStack) && targetStack.equals(configStack)) { config.setProperties(newValues); config.save(); return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", outputBuffer.toString(), \"\"); } String serviceVersionNote = \"Stack Upgrade\"; String auditName = getExecutionCommand().getRoleParams().get(ServerAction.ACTION_USER_NAME); if (auditName == null) { auditName = m_configuration.getAnonymousAuditName(); } m_configHelper.createConfigType(cluster, m_controller, configType, newValues, auditName, serviceVersionNote); String message = \"Finished updating configuration ''{0}''\"; message = MessageFormat.format(message, configType); return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", message, \"\"); }### Assistant: @Test public void testConfigActionUpgradeAcrossStack() throws Exception { makeUpgradeCluster(); Cluster c = clusters.getCluster(\"c1\"); assertEquals(1, c.getConfigsByType(\"zoo.cfg\").size()); c.setCurrentStackVersion(HDP_211_STACK); c.setDesiredStackVersion(HDP_220_STACK); Config config = cf.createNew(c, \"zoo.cfg\", \"version2\", new HashMap<String, String>() {{ put(\"initLimit\", \"10\"); }}, new HashMap<String, Map<String,String>>()); c.addDesiredConfig(\"user\", Collections.singleton(config)); assertEquals(2, c.getConfigsByType(\"zoo.cfg\").size()); List<ConfigurationKeyValue> configurations = new ArrayList<>(); ConfigurationKeyValue keyValue = new ConfigurationKeyValue(); configurations.add(keyValue); keyValue.key = \"initLimit\"; keyValue.value = \"11\"; Map<String, String> commandParams = new HashMap<>(); commandParams.put(\"upgrade_direction\", \"upgrade\"); commandParams.put(\"version\", HDP_2_2_0_1); commandParams.put(\"clusterName\", \"c1\"); commandParams.put(ConfigureTask.PARAMETER_CONFIG_TYPE, \"zoo.cfg\"); commandParams.put(ConfigureTask.PARAMETER_KEY_VALUE_PAIRS, new Gson().toJson(configurations)); ExecutionCommand executionCommand = new ExecutionCommand(); executionCommand.setCommandParams(commandParams); executionCommand.setClusterName(\"c1\"); HostRoleCommand hostRoleCommand = hostRoleCommandFactory.create(null, null, null, null); hostRoleCommand.setExecutionCommandWrapper(new ExecutionCommandWrapper( executionCommand)); action.setExecutionCommand(executionCommand); action.setHostRoleCommand(hostRoleCommand); CommandReport report = action.execute(null); assertNotNull(report); assertEquals(2, c.getConfigsByType(\"zoo.cfg\").size()); config = c.getDesiredConfigByType(\"zoo.cfg\"); assertNotNull(config); assertEquals(\"version2\", config.getTag()); assertEquals(\"11\", config.getProperties().get(\"initLimit\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: RowMapper<T> build() { builder.addMethod(mapMethod()); return builder.build(); }### Assistant: @Test void sourceCode() { RowMapperBuilder<AutoIncrementIdEntity> builder = new RowMapperBuilder<>(AutoIncrementIdEntity.class, new EnumDBMapper()); RowMapper<AutoIncrementIdEntity> mapper = builder.build(); assertNotNull(mapper); String sourceCode = builder.builder.sourceCode(); assertEquals(ClasspathResources.text(\"db-test/row-mapper-auto-increment-id.java\"), sourceCode); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Group readSvg(InputStream in, DoubleProperty svgWidth, DoubleProperty svgHeight, ObjectProperty<Paint> svgFill) throws Exception { NodeList paths = (NodeList) XPathFactory.newDefaultInstance().newXPath().evaluate(\"/svg/g/path\", DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(in), XPathConstants.NODESET); Group group = new Group(); for (int i = 0; i < paths.getLength(); i++) { NamedNodeMap attributes = paths.item(i).getAttributes(); SVGPath path = new SVGPath(); var fill = attributes.getNamedItem(\"fill\"); if (fill != null) path.setFill(fill.getTextContent().equals(\"none\") ? Color.TRANSPARENT : Paint.valueOf(fill.getTextContent())); else if (svgFill.get() != null) path.setFill(svgFill.get()); var fillRule = attributes.getNamedItem(\"fill-rule\"); if (fillRule != null) switch (fillRule.getTextContent()) { case \"evenodd\": path.setFillRule(FillRule.EVEN_ODD); break; case \"nonzero\": path.setFillRule(FillRule.NON_ZERO); break; default: log.warn(\"Unknown fill-rule: \" + fillRule.getTextContent()); break; } var d = attributes.getNamedItem(\"d\"); if (d != null) path.setContent(d.getTextContent()); var style = attributes.getNamedItem(\"style\"); if (style != null) path.setStyle(style.getTextContent()); group.getChildren().add(path); } group.scaleXProperty().bind(Bindings.divide(svgWidth, group.getBoundsInParent().getWidth())); group.scaleYProperty().bind(Bindings.divide(svgHeight, group.getBoundsInParent().getHeight())); return group; }### Assistant: @Test @DisplayName(\"Test a simple SVG\") void readSvg_1() throws Exception { InputStream in = new ByteArrayInputStream( \"<svg xmlns=\\\"http: .getBytes()); Group svg = readSvg(in, new SimpleDoubleProperty(64), new SimpleDoubleProperty(64), new SimpleObjectProperty<Paint>(null)); assertNotNull(svg); assertEquals(64, svg.getBoundsInParent().getWidth()); assertEquals(64, svg.getBoundsInParent().getHeight()); assertEquals(2, svg.getChildren().size()); assertEquals(\"M0 0h24v24H0z\", ((SVGPath) svg.getChildren().get(0)).getContent()); assertEquals(\"M3 4h18v2H3V4zm0 7h18v2H3v-2zm0 7h18v2H3v-2z\", ((SVGPath) svg.getChildren().get(1)).getContent()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void addOutput(PopulatedFileOutput fileOutput) { if (nonNull(multipleFiles.putIfAbsent(fileOutput.getName(), fileOutput.getFile()))) { int count = 1; String basename = getBaseName(fileOutput.getName()); String extension = getExtension(fileOutput.getName()); while (nonNull( multipleFiles.putIfAbsent(format(\"%s(%d).%s\", basename, count, extension), fileOutput.getFile())) && count < 100) { count++; } } }### Assistant: @Test public void addFilesRenamesExisting() throws TaskOutputVisitException, IOException { DefaultMultipleOutputWriter victim = new DefaultMultipleOutputWriter(ExistingOutputPolicy.FAIL, context); victim.addOutput(FileOutput.file(folder.newFile()).name(\"myName.pdf\")); victim.addOutput(FileOutput.file(folder.newFile()).name(\"myName.pdf\")); victim.addOutput(FileOutput.file(folder.newFile()).name(\"myName.pdf\")); File outFolder = folder.newFolder(); new DirectoryTaskOutput(outFolder).accept(victim); assertEquals(3, outFolder.list().length); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public double validate(IMolecularFormula formula) throws CDKException { logger.info(\"Start validation of \", formula); double mass = MolecularFormulaManipulator.getTotalMassNumber(formula); if (mass == 0) return 0.0; int numberN = MolecularFormulaManipulator.getElementCount(formula, formula.getBuilder().newInstance(IElement.class, \"N\")); numberN += getOthers(formula); if (formula.getCharge() == null || formula.getCharge() == 0 || !isOdd(Math.abs(formula.getCharge()))) { if (isOdd(mass) && isOdd(numberN)) { return 1.0; } else if (!isOdd(mass) && (numberN == 0 || !isOdd(numberN))) { return 1.0; } else return 0.0; } else { if (!isOdd(mass) && isOdd(numberN)) { return 1.0; } else if (isOdd(mass) && (numberN == 0 || !isOdd(numberN))) { return 1.0; } else return 0.0; } }### Assistant: @Test public void testDefaultValidTrue() throws ClassNotFoundException, CDKException, Exception { IRule rule = new NitrogenRule(); IMolecularFormula formula = MolecularFormulaManipulator.getMajorIsotopeMolecularFormula(\"C4H13N1O5\", builder); formula.setCharge(0); Assert.assertEquals(1.0, rule.validate(formula), 0.0001); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String prettyPrintAsString(IAstNode node) { ByteArrayOutputStream bytes = new ByteArrayOutputStream(); new PrettyPrinterVisitor(new PrintStream(bytes)).visit(node); return new String(bytes.toByteArray(), StandardCharsets.UTF_8); }### Assistant: @Test public void testArraySizeExpressionInParameter() throws Exception { final String program = \"\" + \"void foo(int A[3 + 4])\\n\" + \"{\\n\" + \"}\\n\" + \"void main()\\n\" + \"{\\n\" + \" int a[7];\\n\" + \" foo(a);\\n\" + \"}\\n\"; assertEquals(program, PrettyPrinterVisitor.prettyPrintAsString(ParseHelper.parse(program ))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean checkTransformers(Network network, ValidationConfig config, ValidationWriter twtsWriter) { Objects.requireNonNull(network); Objects.requireNonNull(config); Objects.requireNonNull(twtsWriter); LOGGER.info(\"Checking transformers of network {}\", network.getId()); return network.getTwoWindingsTransformerStream() .filter(TransformersValidation::filterTwt) .sorted(Comparator.comparing(TwoWindingsTransformer::getId)) .map(twt -> checkTransformer(twt, config, twtsWriter)) .reduce(Boolean::logicalAnd) .orElse(true); }### Assistant: @Test public void checkNetworkTwts() throws IOException { Network network = Mockito.mock(Network.class); Mockito.when(network.getId()).thenReturn(\"network\"); Mockito.when(network.getTwoWindingsTransformerStream()).thenAnswer(dummy -> Stream.of(transformer)); assertTrue(TransformersValidation.INSTANCE.checkTransformers(network, strictConfig, data)); assertTrue(ValidationType.TWTS.check(network, strictConfig, tmpDir)); ValidationWriter validationWriter = ValidationUtils.createValidationWriter(network.getId(), strictConfig, NullWriter.NULL_WRITER, ValidationType.TWTS); assertTrue(ValidationType.TWTS.check(network, strictConfig, validationWriter)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static synchronized TranslationUnit parse(File file) throws IOException, ParseTimeoutException, InterruptedException, GlslParserException { return parseInputStream(new ByteArrayInputStream(FileUtils.readFileToByteArray(file)), ShaderKind.fromExtension(FilenameUtils.getExtension(file.getName()))); }### Assistant: @Test public void testParseFromFile() throws Exception { File tempFile = testFolder.newFile(\"shader.frag\"); BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile)); bw.write(TEST_PROGRAM); bw.close(); TranslationUnit tu = ParseHelper.parse(tempFile); checkTranslationUnit(tu); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int getBucketCount() { return bucketCount; }### Assistant: @Test public void shouldCorrectlyPlace1000RandomFloatValues() { Histogram<Float> gram = createRandomHistogram(10.0f, 100.0f, 1000, new FloatOperations()); HistogramTest.writeHistogramToLog(this.logger, gram, 0, \"Histogram of 1000 random float values in \" + gram.getBucketCount() + \" buckets: \"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Notification buildNotification(Episode episode) { Notification.MediaStyle mediaStyle = new Notification.MediaStyle(); return notificationBuilder .setSmallIcon(R.drawable.ic_av_play_circle_fill) .setContentTitle(episode.getFeed().getTitle()) .setContentText(episode.getTitle()) .setStyle(mediaStyle) .setVisibility(Notification.VISIBILITY_PUBLIC) .addAction(generateAction(episode, R.drawable.ic_fast_rewind, REWIND, ACTION_REWIND)) .addAction(generateAction(episode, R.drawable.ic_pause, PAUSE, ACTION_PAUSE)) .addAction(generateAction(episode, R.drawable.ic_stop_black, STOP, ACTION_STOP)) .addAction(generateAction(episode, R.drawable.ic_fast_forward, FAST_FORWARD, ACTION_FAST_FORWARD)) .build(); }### Assistant: @Test public void itSetsNotificationContentText() { Notification notification = audioPlayerNotification.buildNotification(episode); assertThat(notification.extras.getString(Notification.EXTRA_TEXT), is(\"Lorem ipsum dolor sit amet\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public URL getResource(String name) { log.trace(\"Received request to load resource '{}'\", name); for (ClassLoadingStrategy.Source classLoadingSource : classLoadingStrategy.getSources()) { URL url = null; switch (classLoadingSource) { case APPLICATION: url = super.getResource(name); break; case PLUGIN: url = findResource(name); break; case DEPENDENCIES: url = findResourceFromDependencies(name); break; } if (url != null) { log.trace(\"Found resource '{}' in {} classpath\", name, classLoadingSource); return url; } else { log.trace(\"Couldn't find resource '{}' in {}\", name, classLoadingSource); } } return null; }### Assistant: @Test void parentLastGetResourceNonExisting() { assertNull(parentLastPluginClassLoader.getResource(\"META-INF/non-existing-file\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public double mahalanobis(double[] query) { double[] delta = new double[k]; for (int i = 0; i < k; i++) { delta[i] = query[i] - mean[i]; } double diagSum = 0, nonDiagSum = 0; for (int d1 = 0; d1 < k; ++d1) { for (int d2 = d1; d2 < k; ++d2) { double v = delta[d1] * delta[d2] * inverseCov[d1][d2]; if (d1 == d2) { diagSum += v; } else { nonDiagSum += v; } } } return diagSum + 2 * nonDiagSum; }### Assistant: @Test public void testMahalanobis() { MultivariateNormalDistribution mvNormal = getSample3dNormal(); Gaussian gaussian = new Gaussian(mvNormal.getMeans(), mvNormal.getCovariances()); int N = 100000; int k = 3; double[][] testData = new double[N][k]; for (int i = 0; i < N; i++) { testData[i] = mvNormal.sample(); } double[] mScores = new double[N]; long startTime = System.currentTimeMillis(); for (int i = 0; i < N; i++) { mScores[i] = gaussian.mahalanobis(testData[i]); } long endTime = System.currentTimeMillis(); log.debug(\"Mahalobis distance on {} in {}\", N, endTime-startTime); double[] dScores = new double[N]; startTime = System.currentTimeMillis(); for (int i = 0; i < N; i++) { dScores[i] = -Math.log(mvNormal.density(testData[i])); } endTime = System.currentTimeMillis(); log.debug(\"LogPDF on {} in {}\", N, endTime-startTime); for (int i = 1; i < N; i++) { assertEquals(mScores[i] > mScores[i-1], dScores[i] > dScores[i-1]); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Collection<ValidationMessage> validate(@NotNull WorkspaceFilter filter) { if (isSubPackage) { return null; } Collection<ValidationMessage> messages = new LinkedList<>(); messages.addAll(validatePathFilterSets(filter.getFilterSets(), true)); messages.addAll(validatePathFilterSets(filter.getPropertyFilterSets(), false)); Set<String> ancestors = new LinkedHashSet<>(); for (PathFilterSet set : filter.getFilterSets()) { if (\"cleanup\".equals(set.getType())) { continue; } String root = StringUtils.substringBeforeLast(set.getRoot(), \"/\"); if (validRoots.contains(root)) { continue; } if (filter.contains(root)) { continue; } ancestors.add(root); } for (String root : ancestors) { String coveringPackageId = null; boolean isContained = false; for (PackageInfo dependencyInfo : dependenciesMetaInfo) { WorkspaceFilter dependencyFilter = dependencyInfo.getFilter(); if (dependencyFilter.contains(root)) { isContained = true; } if (dependencyFilter.covers(root)) { coveringPackageId = dependencyInfo.getId().toString(); } } if (!isContained) { String msg; if (coveringPackageId == null) { msg = String.format(MESSAGE_FILTER_ROOT_ANCESTOR_UNCOVERED, root); } else { msg = String.format(MESSAGE_FILTER_ROOT_ANCESTOR_COVERED_BUT_EXCLUDED, root, coveringPackageId); } messages.add(new ValidationMessage(severityForUncoveredFilterRootAncestors, msg)); } } return messages; }### Assistant: @Test public void testUncoveredRootNodesInFilter() throws IOException, ConfigurationException { DefaultWorkspaceFilter filter = new DefaultWorkspaceFilter(); try (InputStream input = this.getClass().getResourceAsStream(\"/filter.xml\")) { filter.load(input); } validator = new AdvancedFilterValidator( factory, ValidationMessageSeverity.INFO, AdvancedFilterValidatorFactory.DEFAULT_SEVERITY_FOR_UNCOVERED_ANCESTOR_NODES, ValidationMessageSeverity.INFO, ValidationMessageSeverity.ERROR, false, dependenciesMetaInfo, filter, validRoots); Collection<ValidationMessage> messages = validator.validate(filter); ValidationExecutorTest.assertViolation(messages, ValidationMessageSeverity.INFO, new ValidationMessage(ValidationMessageSeverity.INFO, String.format(AdvancedFilterValidator.MESSAGE_FILTER_ROOT_ANCESTOR_UNCOVERED, \"/apps/test4\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Enumeration<String> getPropertyNames() { return Collections.enumeration(props.keySet()); }### Assistant: @Test public void testGetPropertyNames01() throws Exception { Enumeration<String> en = PropertyUtil.getPropertyNames(); Vector<String> v = new Vector<String>(); while (en.hasMoreElements()) { String key = (String) en.nextElement(); v.add(key); } assertTrue(v.contains(\"system.name\")); assertTrue(v.contains(\"property.test001.id.0\")); assertTrue(v.contains(\"property.test002.id.0\")); assertTrue(v.contains(\"property.test002.id.1\")); assertTrue(v.contains(\"property.test002.id.2\")); assertTrue(v.contains(\"property.test003.id.0\")); assertTrue(v.contains(\"property.test004.id.0\")); assertTrue(v.contains(\"property.test004.id.0\")); assertTrue(v.contains(\"@property.test0\")); assertTrue(v.contains(\"fileutiltest.dir.base\")); assertTrue(v.contains(\"property.test100.id.0\")); assertTrue(v.contains(\"property.test005\")); assertTrue(v.contains(\"property.test006.id.0\")); assertTrue(v.contains(\"property.test007.id.0\")); assertTrue(v.contains(\"property.test008.id.0\")); assertTrue(v.contains(\"property.test009.id.0\")); assertTrue(v.contains(\"codelist.gengo1.define.1\")); assertTrue(v.contains(\"codelist.gengo1.define.2\")); assertTrue(v.contains(\"codelist.gengo1.define.3\")); assertTrue(v.contains(\"codelist.gengo2.define.1\")); assertTrue(v.contains(\"codelist.gengo2.define.2\")); assertTrue(v.contains(\"codelist.sql1.sql.0\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Span setTag(String key, String value) { if (key == null || value == null) { tracer.debug(\"key (\" + key + \") or value (\" + value + \") is null, ignoring\"); return this; } synchronized (mutex) { grpcSpan.addTags(KeyValue.newBuilder().setKey(key).setStringValue(value)); } return this; }### Assistant: @Test public void testSetTag_stringTypeNullKey() { Span result = undertest.setTag((String)null, \"v\"); assertSame(result, undertest); verify(abstractTracer).debug(\"key (null) or value (v) is null, ignoring\"); assertTrue(\"When key is null, should not be added to attributes\", grpcSpan.getTagsList().isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ISchedulerEntry getEntry(final String id) throws EntryStorageAccessException, EntryNotFoundException { try { ISchedulerEntry localEntry = getLocalEntry(id); if (null != localEntry) { return localEntry; } IObject savedEntryState = remoteEntryStorage.querySingleEntry(id); return IOC.resolve(Keys.getOrAdd(\"restore scheduler entry\"), savedEntryState, this); } catch (ResolutionException e) { throw new EntryStorageAccessException(\"Error occurred restoring required entry from state saved in remote storage.\"); } catch (CancelledLocalEntryRequestException e) { throw new EntryNotFoundException(\"The entry was not found as it was cancelled recently.\"); } }### Assistant: @Test(expected = EntryNotFoundException.class) public void Should_throwWhenRequiredEntryIsNotFoundInBothRemoteAndLocalStorage() throws Exception { EntryStorage storage = new EntryStorage(remoteEntryStorage, null); assertNull(storage.getEntry(\"666\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public DistinguishedName() { names = new LinkedList(); }### Assistant: @Test public void testDistinguishedName() { String testPath = \"cn=foo\\\\,bar,OU=FOO\\\\,bar , OU=foo\\\\;bar;OU=foo\\\\;bar\" + \" ; ou=foo\\\\,,ou=foo\\\\,;ou=foo\\\\;;ou=foo\\\\,;ou=bar\\\\,\"; System.out.println(testPath); DistinguishedName path = new DistinguishedName(testPath); assertThat(path.getLdapRdn(8).getComponent().getKey()).isEqualTo(\"cn\"); assertThat(path.getLdapRdn(8).getComponent().getValue()).isEqualTo(\"foo,bar\"); assertThat(path.getLdapRdn(7).getComponent().getKey()).isEqualTo(\"ou\"); assertThat(path.getLdapRdn(7).getComponent().getValue()).isEqualTo(\"FOO,bar\"); assertThat(path.getLdapRdn(6).getComponent().getKey()).isEqualTo(\"ou\"); assertThat(path.getLdapRdn(6).getComponent().getValue()).isEqualTo(\"foo;bar\"); assertThat(path.getLdapRdn(5).getComponent().getKey()).isEqualTo(\"ou\"); assertThat(path.getLdapRdn(5).getComponent().getValue()).isEqualTo(\"foo;bar\"); assertThat(path.getLdapRdn(4).getComponent().getKey()).isEqualTo(\"ou\"); assertThat(path.getLdapRdn(4).getComponent().getValue()).isEqualTo(\"foo,\"); assertThat(path.getLdapRdn(3).getComponent().getKey()).isEqualTo(\"ou\"); assertThat(path.getLdapRdn(3).getComponent().getValue()).isEqualTo(\"foo,\"); assertThat(path.getLdapRdn(2).getComponent().getKey()).isEqualTo(\"ou\"); assertThat(path.getLdapRdn(2).getComponent().getValue()).isEqualTo(\"foo;\"); assertThat(path.getLdapRdn(1).getComponent().getKey()).isEqualTo(\"ou\"); assertThat(path.getLdapRdn(1).getComponent().getValue()).isEqualTo(\"foo,\"); assertThat(path.getLdapRdn(0).getComponent().getKey()).isEqualTo(\"ou\"); assertThat(path.getLdapRdn(0).getComponent().getValue()).isEqualTo(\"bar,\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getTemplateId() { return templateId; }### Assistant: @Test public void testGetTemplateId() throws Exception { assertEquals( TEMPLATE_ID, environmentContainer.getTemplateId() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void info(String format, Object... args) { String s = String.format(format, args); outPrintln(s); }### Assistant: @Test public void testInfo() { assertEquals(\"\", mLog.getOut()); assertEquals(\"\", mLog.getErr()); mLog.info(\"Test %d\", 43); assertEquals(\"Test 43\\n\", mLog.getOut()); assertEquals(\"\", mLog.getErr()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final Header getHeader() { return header; }### Assistant: @Test public void testMessageIterator() { Message message = new Message(); java.util.Iterator<Field<?>> i = message.iterator(); assertFalse(i.hasNext()); try { assertNull(i.next()); fail(\"exception not thrown\"); } catch (final java.util.NoSuchElementException e) { } try { message = new Message(\"8=FIX.4.2\\0019=12\\00135=A\\001108=30\\00110=026\\001\"); i = message.iterator(); assertTrue(i.hasNext()); StringField field = (StringField) i.next(); assertEquals(108, field.getField()); assertEquals(\"30\", field.getValue()); assertFalse(i.hasNext()); try { assertNull(i.next()); fail(\"exception not thrown\"); } catch (final java.util.NoSuchElementException e) { } final java.util.Iterator<Field<?>> j = message.getHeader().iterator(); assertTrue(j.hasNext()); field = (StringField) j.next(); assertEquals(8, field.getField()); assertEquals(\"FIX.4.2\", field.getValue()); field = (StringField) j.next(); assertEquals(9, field.getField()); assertEquals(\"12\", field.getValue()); field = (StringField) j.next(); assertEquals(35, field.getField()); assertEquals(\"A\", field.getValue()); assertFalse(j.hasNext()); try { assertNull(j.next()); fail(\"exception not thrown\"); } catch (final java.util.NoSuchElementException e) { } } catch (final InvalidMessage e) { fail(\"exception thrown\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public synchronized void evaluate(Population[] populations, Function function) { this.barrier.reset(); int totalIndividuals = PopulationUtils.sumSizes(populations); int individualsPerThread = totalIndividuals / numProcessors; PositionDescriptor from = new PositionDescriptor(0, 0); PositionDescriptor toExclusive; if (individualsPerThread > 0){ int currentIndividualExclusive = individualsPerThread; for (int i = 0; i < numProcessors - 1; i++){ toExclusive = getIndexForIndividual(populations, currentIndividualExclusive); new Thread(new EvaluatorThread(this.barrier, function, populations, from, toExclusive)).start(); from = getIndexForIndividual(populations, currentIndividualExclusive); currentIndividualExclusive += individualsPerThread; } } toExclusive = new PositionDescriptor(populations.length - 1, populations[populations.length-1].getIndividuals().length); new EvaluatorThread(this.barrier, function, populations, from, toExclusive).run(); }### Assistant: @Test public void testEvaluate2() throws Exception { DeJongParabolaFunction function = new DeJongParabolaFunction(); function.setDimension(2); function.setOffset(0.0); function.setInverted(false); SimpleIndividual ind1 = new SimpleIndividual(1, 0.0, new SimplePhenotypeRepresentation(new double[]{1.0, 2.0})); SimpleIndividual ind2 = new SimpleIndividual(1, 0.0, new SimplePhenotypeRepresentation(new double[]{-2.0, 2.0})); SimpleIndividual ind3 = new SimpleIndividual(1, 0.0, new SimplePhenotypeRepresentation(new double[]{-3.0, -2.0})); SimpleIndividual ind4 = new SimpleIndividual(1, 0.0, new SimplePhenotypeRepresentation(new double[]{1.0, -3.0})); ind1.setValue(0.0); ind2.setValue(0.0); ind3.setValue(0.0); ind4.setValue(0.0); Individual[] individuals = new Individual[]{ind1, ind2, ind3, ind4}; Population[] populations = new Population[]{new SimplePopulation(individuals)}; ParallelFunctionEvaluator evaluator = new ParallelFunctionEvaluator(2); evaluator.evaluate(populations, function); assertEquals(5.0, ind1.getValue(), 0.0); assertEquals(8.0, ind2.getValue(), 0.0); assertEquals(13.0, ind3.getValue(), 0.0); assertEquals(10.0, ind4.getValue(), 0.0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ColVector apply(double... values) { return feedForward(values).a[getNumLayers() - 1]; }### Assistant: @Test public void testOr() { NinjaMatrix w1 = new NinjaMatrix(1, 3, true, -15, 20, 20); Network net = new Network(w1); assertTrue(isZero(net.apply(0, 0))); assertTrue(isOne(net.apply(0, 1))); assertTrue(isOne(net.apply(1, 0))); assertTrue(isOne(net.apply(1, 1))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static PlacementRule getPlacementRule(String ruleStr, Configuration conf) throws ClassNotFoundException { Class<? extends PlacementRule> ruleClass = Class.forName(ruleStr) .asSubclass(PlacementRule.class); LOG.info(\"Using PlacementRule implementation - \" + ruleClass); return ReflectionUtils.newInstance(ruleClass, conf); }### Assistant: @Test public void testGetExistRuleText() { final String exists = DefaultPlacementRule.class.getCanonicalName(); PlacementRule rule = null; try { rule = PlacementFactory.getPlacementRule(exists, null); } catch (ClassNotFoundException cnfe) { fail(\"Class should have been found\"); } assertNotNull(\"Rule object is null\", rule); assertEquals(\"Names not equal\", rule.getName(), exists); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getMessage(String key){ return msgMap.get(key); }### Assistant: @Test public void testGetMessage() { Assert.assertNull(MessageUtils.getMessage(null)); Assert.assertNull(MessageUtils.getMessage(\"\")); Assert.assertNotNull(MessageUtils.getMessage(InvalidCredentialException.MSG_KEY)); Assert.assertNotNull(MessageUtils.getMessage(NoKi4soKeyException.MSG_KEY)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<Date> getRandomDateList(Date startDate, Date endDate, int count) { List<Date> dateList = new ArrayList<>(); if (startDate.getTime() >= endDate.getTime() || count < 1 || count > 10) { logger.warn(\"getRandomDateList, param illegal, startDate: [{}], endDate: [{}], count: [{}]\", startDate.getTime(), endDate.getTime(), count); return dateList; } for (int i = 0; i < count; i++) { dateList.add(new Date(randomTimeStamp(startDate.getTime(), endDate.getTime()))); } if (dateList.size() > 1) { dateList.sort((date1, date2) -> (int) (date1.getTime() - date2.getTime())); } return dateList; }### Assistant: @Test public void getRandomDateList() { Date startDate = new Date(); List<Date> resultList = DateUtil.getRandomDateList(startDate, DateUtil.getDelayTime(startDate, 10), 5); for (Date d : resultList) { System.out.println(\"getRandomDateList, random date is\uff1a\" + d.getTime()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String hexStringToBinaryString(String s) { StringBuilder sb = new StringBuilder(); for(int i=0;i<s.length();i++) { char c = s.charAt(i); int index=0; if(c >= '0' && c <= '9') { index = c - '0'; } else if(c >= 'a' && c <= 'f') { index = c - 'a' + 10; } else if(c >= 'A' && c <= 'F') { index = c - 'A' + 10; } else { return null; } sb.append(binary[index]); } return sb.toString(); }### Assistant: @Test public void testHexStringToBinaryString() { System.out.println(\"hexStringToBinaryString\"); String s = \"FF124A\"; String expResult = \"111111110001001001001010\"; String result = Util.hexStringToBinaryString(s); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute(final Connection connection, final Graph<Node, Edge> graph) throws SQLException { for (final Neo4JOperation operation : operations) { operation.execute(connection, graph); } }### Assistant: @Test public void testOperationExecution() throws SQLException { final Graph<Node, Edge> graph = new DefaultDirectedGraph<>(new ClassBasedEdgeFactory<>(Edge.class)); final CompositeOperation operation = new CompositeOperation(operation1, operation2, operation3); operation.execute(connection, graph); final InOrder order = inOrder(operation1, operation2, operation3); order.verify(operation1).execute(eq(connection), eq(graph)); order.verify(operation2).execute(eq(connection), eq(graph)); order.verify(operation3).execute(eq(connection), eq(graph)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> resetSvcAccPassword(String token, String svcAccName, UserDetails userDetails){ log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"resetSvcAccPassword\"). put(LogMessage.MESSAGE, String.format(\"Trying to reset service account password [%s]\", svcAccName)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); OnboardedServiceAccountDetails onbSvcAccDtls = getOnboarderdServiceAccountDetails(token, svcAccName); if (onbSvcAccDtls == null) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"resetSvcAccPassword\"). put(LogMessage.MESSAGE, String.format(\"Unable to reset password for [%s]\", svcAccName)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Unable to reset password details for the given service account\\\"]}\"); } long ttl = onbSvcAccDtls.getTtl(); ServiceAccount serviceAccount = new ServiceAccount(); serviceAccount.setName(svcAccName); serviceAccount.setAutoRotate(true); serviceAccount.setTtl(1L); ResponseEntity<String> roleCreationResetResponse = createAccountRole(token, serviceAccount); if(roleCreationResetResponse.getStatusCode().equals(HttpStatus.OK)) { sleep(); Response resetResponse = reqProcessor.process(\"/ad/serviceaccount/resetpwd\",\"{\\\"role_name\\\":\\\"\"+svcAccName+\"\\\"}\",token); if(HttpStatus.OK.equals(resetResponse.getHttpstatus())) { serviceAccount.setTtl(ttl); ResponseEntity<String> roleCreationResponse = createAccountRole(token, serviceAccount); if(roleCreationResponse.getStatusCode().equals(HttpStatus.OK)) { Response response = reqProcessor.process(\"/ad/serviceaccount/readpwd\",\"{\\\"role_name\\\":\\\"\"+svcAccName+\"\\\"}\",token); if(HttpStatus.OK.equals(response.getHttpstatus())) { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"resetSvcAccPassword\"). put(LogMessage.MESSAGE, String.format(\"Successfully reset service account password for [%s]\", svcAccName)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); try { ADServiceAccountCreds adServiceAccountCreds = new ADServiceAccountCreds(); Map<String, Object> requestParams = new ObjectMapper().readValue(response.getResponse(), new TypeReference<Map<String, Object>>(){}); if (requestParams.get(\"current_password\") != null) { adServiceAccountCreds.setCurrent_password((String) requestParams.get(\"current_password\")); } if (requestParams.get(\"username\") != null) { adServiceAccountCreds.setUsername((String) requestParams.get(\"username\")); } if (requestParams.get(\"last_password\") != null ) { adServiceAccountCreds.setLast_password((String) requestParams.get(\"last_password\")); } Response metaDataResponse = getMetadata(token, userDetails, TVaultConstants.SVC_ACC_ROLES_PATH + svcAccName); if (metaDataResponse!=null) { try { JsonNode metaNode = new ObjectMapper().readTree(metaDataResponse.getResponse()).get(\"data\").get(\"initialPasswordReset\"); if (metaNode != null) { boolean initialResetStatus = false; initialResetStatus = Boolean.parseBoolean(metaNode.asText()); if (!initialResetStatus) { String path = new StringBuffer(TVaultConstants.SVC_ACC_ROLES_PATH).append(svcAccName).toString(); Map<String,String> params = new Hashtable<>(); params.put(\"type\", \"initialPasswordReset\"); params.put(\"path\",path); params.put(\"value\",\"true\"); Response metadataResponse = ControllerUtil.updateMetadataOnSvcaccPwdReset(params,token); if(metadataResponse !=null && (HttpStatus.NO_CONTENT.equals(metadataResponse.getHttpstatus()) || HttpStatus.OK.equals(metadataResponse.getHttpstatus()))){ log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Update metadata on password reset\"). put(LogMessage.MESSAGE, \"Metadata update Success.\"). put(LogMessage.STATUS, metadataResponse.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); } else { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Update metadata on password reset\"). put(LogMessage.MESSAGE, \"Metadata update failed.\"). put(LogMessage.STATUS, metadataResponse!=null?metadataResponse.getHttpstatus().toString():HttpStatus.BAD_REQUEST.toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); } metaNode = new ObjectMapper().readTree(metaDataResponse.getResponse()).get(\"data\").get(\"managedBy\"); String svcOwner = metaNode.asText(); ServiceAccountUser serviceAccountOwner = new ServiceAccountUser(svcAccName, svcOwner, TVaultConstants.RESET_POLICY); ResponseEntity<String> addOwnerWriteToServiceAccountResponse = addUserToServiceAccount(token, serviceAccountOwner, userDetails, false); if (addOwnerWriteToServiceAccountResponse!= null && HttpStatus.NO_CONTENT.equals(addOwnerWriteToServiceAccountResponse.getStatusCode())) { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"readSvcAccPassword\"). put(LogMessage.MESSAGE, \"Updated write permission to Service account owner as part of initial reset.\"). put(LogMessage.STATUS, addOwnerWriteToServiceAccountResponse.getStatusCode().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); } } } } catch (IOException e) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"resetSvcAccPassword\"). put(LogMessage.MESSAGE, String.format (\"Failed to get metadata for the Service account [%s]\", svcAccName)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); } } else { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"resetSvcAccPassword\"). put(LogMessage.MESSAGE, String.format (\"Failed to get metadata for the Service account [%s]\", svcAccName)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); } return ResponseEntity.status(HttpStatus.OK).body(JSONUtil.getJSON(adServiceAccountCreds)); } catch(Exception ex) { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"readSvcAccPassword\"). put(LogMessage.MESSAGE, String.format(\"There are no service accounts currently onboarded or error in retrieving credentials for the onboarded service account [%s]\", svcAccName)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); } return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Unable to get password details for the given service account\\\"]}\"); } else { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"resetSvcAccPassword\"). put(LogMessage.MESSAGE, String.format(\"Unable to reset password for [%s]\", svcAccName)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Unable to reset password details for the given service account. Failed to read the updated password.\\\"]}\"); } } else { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"resetSvcAccPassword\"). put(LogMessage.MESSAGE, String.format(\"Unable to reset password for [%s]\", svcAccName)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Unable to reset password details for the given service account. Failed to reset the service account with original ttl.\\\"]}\"); } } else { log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"resetSvcAccPassword\"). put(LogMessage.MESSAGE, String.format(\"Unable to reset password for [%s]\", svcAccName)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); serviceAccount.setTtl(ttl); ResponseEntity<String> roleCreationResponse = createAccountRole(token, serviceAccount); if(roleCreationResponse.getStatusCode().equals(HttpStatus.OK)) { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"resetSvcAccPassword\"). put(LogMessage.MESSAGE, String.format(\"Unable to reset password for [%s]. Role updated back to the correct ttl\", svcAccName)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); } if (HttpStatus.FORBIDDEN.equals(resetResponse.getHttpstatus())) { return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"{\\\"errors\\\":[\\\"Access denied: Unable to reset password details for the given service account.\\\"]}\"); } else { return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Unable to reset password details for the given service account. Failed to read the updated password after setting ttl to 1 second.\\\"]}\"); } } } log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"resetSvcAccPassword\"). put(LogMessage.MESSAGE, String.format(\"Unable to reset password for [%s]\", svcAccName)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"{\\\"errors\\\":[\\\"Unable to reset password details for the given service account\\\"]}\"); }### Assistant: @Test public void test_resetSvcAccPassword_success_metaupdate_failure() { UserDetails userDetails = getMockUser(true); String token = userDetails.getClientToken(); String svcAccName = \"testacc03\"; ServiceAccount serviceAccount = generateServiceAccount(\"testacc02\",\"testacc01\"); serviceAccount.setAutoRotate(true); ServiceAccountTTL serviceAccountTTL = new ServiceAccountTTL(); serviceAccountTTL.setRole_name(serviceAccount.getName()); serviceAccountTTL.setService_account_name(serviceAccount.getName() + \"@aaa.bbb.ccc.com\") ; serviceAccountTTL.setTtl(serviceAccount.getTtl()); String svc_account_payload = getJSON(serviceAccountTTL); when(JSONUtil.getJSON(Mockito.any(ServiceAccount.class))).thenReturn(svc_account_payload); Response onboardResponse = getMockResponse(HttpStatus.OK, true, \"{\\\"messages\\\":[\\\"Successfully created service account role.\\\"]}\"); when(reqProcessor.process(Mockito.eq(\"/ad/serviceaccount/onboard\"), Mockito.anyString(), Mockito.eq(token))).thenReturn(onboardResponse); Map<String,Object> rqstParams = new HashMap<>(); rqstParams.put(\"service_account_name\",svcAccName); rqstParams.put(\"ttl\", 10); rqstParams.put(\"last_vault_rotation\", \"2018-05-24T17:14:38.677370855Z\"); rqstParams.put(\"password_last_set\",\"2018-05-24T17:14:38.6038495Z\"); Response svcAccDetailsRes = getMockResponse(HttpStatus.OK, true, getJSON(rqstParams)); when(reqProcessor.process(\"/ad/serviceaccount/details\",\"{\\\"role_name\\\":\\\"\"+svcAccName+\"\\\"}\",token)).thenReturn(svcAccDetailsRes); ADServiceAccountCreds adServiceAccountCreds = new ADServiceAccountCreds(); adServiceAccountCreds.setCurrent_password(\"current_password\"); adServiceAccountCreds.setLast_password(\"last_password\"); adServiceAccountCreds.setUsername(svcAccName); String expectedOutput = getJSON(adServiceAccountCreds); Response pwdReadResponse = getMockResponse(HttpStatus.OK, true,expectedOutput); Response pwdResetResponse = getMockResponse(HttpStatus.OK, true,expectedOutput); when(JSONUtil.getJSON(Mockito.any(ADServiceAccountCreds.class))).thenReturn(expectedOutput); when(reqProcessor.process(Mockito.eq(\"/ad/serviceaccount/resetpwd\"),Mockito.anyString(),Mockito.eq(token))).thenReturn(pwdResetResponse); when(reqProcessor.process(Mockito.eq(\"/ad/serviceaccount/readpwd\"),Mockito.anyString(),Mockito.eq(token))).thenReturn(pwdReadResponse); when(ControllerUtil.updateMetadataOnSvcaccPwdReset(Mockito.any(),eq(token))).thenReturn(getMockResponse(HttpStatus.BAD_REQUEST, true,\"\")); ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.OK).body(expectedOutput); when(reqProcessor.process(eq(\"/sdb\"),Mockito.any(),eq(token))).thenReturn(getMockResponse(HttpStatus.OK, true, \"{\\\"data\\\":{\\\"initialPasswordReset\\\":true,\\\"managedBy\\\":\\\"normaluser\\\",\\\"name\\\":\\\"svc_vault_test5\\\",\\\"users\\\":{\\\"normaluser\\\":\\\"sudo\\\"}}}\")); ResponseEntity<String> responseEntity = serviceAccountsService.resetSvcAccPassword(token, svcAccName, userDetails); assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void writeCData(String data) throws XMLStreamException { state = State.SEEN_DATA; super.writeCData(data); }### Assistant: @Test void testWriteCData() throws XMLStreamException { writer.writeCData(DATA); delegateInOrder.verify(delegateMock).writeCData(DATA); delegateInOrder.verifyNoMoreInteractions(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<String, Metric> getMetrics() { final Map<String, Metric> gauges = new HashMap<>(); for (String pool : POOLS) { for (int i = 0; i < ATTRIBUTES.length; i++) { final String attribute = ATTRIBUTES[i]; final String name = NAMES[i]; try { final ObjectName on = new ObjectName(\"java.nio:type=BufferPool,name=\" + pool); mBeanServer.getMBeanInfo(on); gauges.put(name(pool, name), new JmxAttributeGauge(mBeanServer, on, attribute)); } catch (JMException ignored) { LOGGER.debug(\"Unable to load buffer pool MBeans, possibly running on Java 6\"); } } } return Collections.unmodifiableMap(gauges); }### Assistant: @Test public void includesGaugesForDirectAndMappedPools() { assertThat(buffers.getMetrics().keySet()) .containsOnly(\"direct.count\", \"mapped.used\", \"mapped.capacity\", \"direct.capacity\", \"mapped.count\", \"direct.used\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ApiOperation(value = \"Exports *Procurement activity by year* dashboard in Excel format.\") @RequestMapping(value = \"/api/ocds/procurementActivityExcelChart\", method = {RequestMethod.GET, RequestMethod.POST}) public void procurementActivityExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter, final HttpServletResponse response) throws IOException { final String chartTitle = translationService.getValue(filter.getLanguage(), \"charts:overview:title\"); final List<Document> countAwardsByYear = countPlansTendersAwardsController.countAwardsByYear(filter); final List<Document> countTendersByYear = countPlansTendersAwardsController.countTendersByYear(filter); final List<?> categories = excelChartHelper.getCategoriesFromDBObject( getExportYearMonthXAxis(filter), countAwardsByYear, countTendersByYear); final List<List<? extends Number>> values = new ArrayList<>(); final List<Number> valueAwards = excelChartHelper.getValuesFromDBObject(countAwardsByYear, categories, getExportYearMonthXAxis(filter), CountPlansTendersAwardsController.Keys.COUNT); final List<Number> valueTenders = excelChartHelper.getValuesFromDBObject(countTendersByYear, categories, getExportYearMonthXAxis(filter), CountPlansTendersAwardsController.Keys.COUNT); if (!valueAwards.isEmpty()) { values.add(valueAwards); } if (!valueTenders.isEmpty()) { values.add(valueTenders); } final List<String> seriesTitle; if (!values.isEmpty()) { seriesTitle = Arrays.asList( translationService.getValue(filter.getLanguage(), \"charts:overview:traces:award\"), translationService.getValue(filter.getLanguage(), \"charts:overview:traces:tender\")); } else { seriesTitle = new ArrayList<>(); } response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"); response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + chartTitle + \".xlsx\"); response.getOutputStream().write( excelChartGenerator.getExcelChart( ChartType.line, chartTitle, seriesTitle, categories, values)); }### Assistant: @Test public void procurementActivityExcelChart() throws Exception { LangYearFilterPagingRequest filter = getLangYearFilterMockRequest(); procurementActivityByYearController.procurementActivityExcelChart( filter, mockHttpServletResponse); final byte[] responseOutput = mockHttpServletResponse.getContentAsByteArray(); final Workbook workbook = new XSSFWorkbook(new ByteArrayInputStream(responseOutput)); Assert.assertNotNull(workbook); final Sheet sheet = workbook.getSheet(ChartType.line.toString()); Assert.assertNotNull(\"check chart type, sheet name should be the same as the type\", sheet); final XSSFDrawing drawing = (XSSFDrawing) sheet.getDrawingPatriarch(); final List<XSSFChart> charts = drawing.getCharts(); Assert.assertEquals(\"number of charts\", 1, charts.size()); final XSSFChart chart = charts.get(0); Assert.assertEquals(\"chart title\", translationService.getValue(filter.getLanguage(), \"charts:overview:title\"), chart.getTitle().getString()); final List<? extends XSSFChartAxis> axis = chart.getAxis(); Assert.assertEquals(\"number of axis\", 2, axis.size()); final CTChart ctChart = chart.getCTChart(); Assert.assertEquals(\"Check if we have 1 line chart\", 1, ctChart.getPlotArea().getLineChartArray().length); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <DOC extends HasName & HasMainInterface, T extends ClassOrInterface<T>> void remove(Class<DOC> docType, String key) { acquireTranslatorSettings(docType, null, key).setConstructor(null); }### Assistant: @Test void remove() { }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public LocationReferenceHolder encodeLocation( final OpenLREncoderParameter parameter, final Location loc) throws OpenLRProcessingException { return encodeLocation(parameter, new OpenLREncoderProperties(parameter.getConfiguration(), parameter.getPhysicalEncoders()), loc); }### Assistant: @Test public final void testInvalidLocationType() { final Location mockedLocRef = mockery.mock(Location.class, \"invalidType\"); final String id = \"locID\"; mockery.checking(new Expectations() { { allowing(mockedLocRef).getLocationType(); will(returnValue(LocationType.UNKNOWN)); } }); mockery.checking(new Expectations() { { allowing(mockedLocRef).getID(); will(returnValue(id)); } }); LocationReferenceHolder result = encodeLocation(mockedLocRef); assertFalse(result.isValid()); assertSame(result.getReturnCode().toString(), EncoderReturnCode.INVALID_LOCATION_TYPE.toString()); assertEquals(result.getID(), id); assertNotNull(result.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public RangerPolicy toRangerPolicy(VXResource resource, RangerService service) { if(resource == null) { return null; } RangerPolicy ret = new RangerPolicy(); dataObjectToRangerObject(resource, ret); if(service != null) { ret.setService(service.getName()); } else { ret.setService(resource.getAssetName()); } ret.setName(StringUtils.trim(resource.getPolicyName())); ret.setDescription(resource.getDescription()); ret.setIsEnabled(resource.getResourceStatus() == RangerCommonEnums.STATUS_ENABLED); ret.setIsAuditEnabled(resource.getAuditList() != null && !resource.getAuditList().isEmpty()); Boolean isPathRecursive = resource.getIsRecursive() == RangerCommonEnums.BOOL_TRUE; Boolean isTableExcludes = resource.getTableType() == RangerCommonEnums.POLICY_EXCLUSION; Boolean isColumnExcludes = resource.getColumnType() == RangerCommonEnums.POLICY_EXCLUSION; toRangerResourceList(resource.getName(), \"path\", Boolean.FALSE, isPathRecursive, ret.getResources()); toRangerResourceList(resource.getTables(), \"table\", isTableExcludes, Boolean.FALSE, ret.getResources()); toRangerResourceList(resource.getColumnFamilies(), \"column-family\", Boolean.FALSE, Boolean.FALSE, ret.getResources()); toRangerResourceList(resource.getColumns(), \"column\", isColumnExcludes, Boolean.FALSE, ret.getResources()); toRangerResourceList(resource.getDatabases(), \"database\", Boolean.FALSE, Boolean.FALSE, ret.getResources()); toRangerResourceList(resource.getUdfs(), \"udf\", Boolean.FALSE, Boolean.FALSE, ret.getResources()); toRangerResourceList(resource.getTopologies(), \"topology\", Boolean.FALSE, Boolean.FALSE, ret.getResources()); toRangerResourceList(resource.getServices(), \"service\", Boolean.FALSE, Boolean.FALSE, ret.getResources()); toRangerResourceList(resource.getHiveServices(), \"hiveservice\", Boolean.FALSE, Boolean.FALSE, ret.getResources()); HashMap<String, List<VXPermMap>> sortedPermMap = new HashMap<String, List<VXPermMap>>(); if (resource.getPermMapList() != null) { for(VXPermMap permMap : resource.getPermMapList()) { String permGrp = permMap.getPermGroup(); List<VXPermMap> sortedList = sortedPermMap.get(permGrp); if(sortedList == null) { sortedList = new ArrayList<VXPermMap>(); sortedPermMap.put(permGrp, sortedList); } sortedList.add(permMap); } } Integer assetType = getAssetType(service,ret.getService()); for (Entry<String, List<VXPermMap>> entry : sortedPermMap.entrySet()) { List<String> userList = new ArrayList<String>(); List<String> groupList = new ArrayList<String>(); List<RangerPolicyItemAccess> accessList = new ArrayList<RangerPolicyItemAccess>(); String ipAddress = null; RangerPolicy.RangerPolicyItem policyItem = new RangerPolicy.RangerPolicyItem(); for(VXPermMap permMap : entry.getValue()) { if(permMap.getPermFor() == AppConstants.XA_PERM_FOR_USER) { String userName = getUserName(permMap); if (! userList.contains(userName)) { userList.add(userName); } } else if(permMap.getPermFor() == AppConstants.XA_PERM_FOR_GROUP) { String groupName = getGroupName(permMap); if (! groupList.contains(groupName)) { groupList.add(groupName); } } String accessType = toAccessType(permMap.getPermType()); if(StringUtils.equalsIgnoreCase(accessType, \"Admin\")) { policyItem.setDelegateAdmin(Boolean.TRUE); if ( assetType != null && assetType == RangerCommonEnums.ASSET_HBASE) { accessList.add(new RangerPolicyItemAccess(accessType)); } } else { accessList.add(new RangerPolicyItemAccess(accessType)); } ipAddress = permMap.getIpAddress(); } policyItem.setUsers(userList); policyItem.setGroups(groupList); policyItem.setAccesses(accessList); if(ipAddress != null && !ipAddress.isEmpty()) { RangerPolicy.RangerPolicyItemCondition ipCondition = new RangerPolicy.RangerPolicyItemCondition(\"ipaddress\", Collections.singletonList(ipAddress)); policyItem.getConditions().add(ipCondition); } ret.getPolicyItems().add(policyItem); } return ret; }### Assistant: @Test public void testToRangerPolicyForNull(){ VXResource resource = null; RangerService rangerService = null; RangerPolicy actualRangerPolicy = serviceUtil.toRangerPolicy(resource, rangerService); Assert.assertNull(actualRangerPolicy); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean needsMoreCowbell(Checkpoint ckpt) { return true; }### Assistant: @Test public void testSanity() { BootstrapCheckpointHandler handler = new BootstrapCheckpointHandler(ONE_SOURCE); Assert.assertTrue(handler.needsMoreCowbell(null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void call(final Subscriber<? super Integer> o) { o.setProducer(new RangeProducer(o, start, end)); }### Assistant: @Test public void testNoBackpressure() { ArrayList<Integer> list = new ArrayList<Integer>(RxRingBuffer.SIZE * 2); for (int i = 1; i <= RxRingBuffer.SIZE * 2 + 1; i++) { list.add(i); } OnSubscribeRange o = new OnSubscribeRange(1, list.size()); TestSubscriber<Integer> ts = new TestSubscriber<Integer>(); ts.assertReceivedOnNext(Collections.<Integer> emptyList()); ts.requestMore(Long.MAX_VALUE); o.call(ts); ts.assertReceivedOnNext(list); ts.assertTerminalEvent(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static List<Instruction> processDollarLabelOperands(List<Instruction> instructions) { List<Instruction> processedAssembly = new ArrayList<>(); long nextLabelIndex = 0; List<Pair<Long, String>> labelsToInsert = new ArrayList<>(); long instructionNumber = 0; long lastOriginalLine = 0; for (Instruction instruction : instructions) { lastOriginalLine = instruction.originalLine; if (!((instruction.type == InstructionType.INSTRUCTION && instruction.opcode == null) || (instruction.type == InstructionType.DIRECTIVE && instruction.directive == null))) { instructionNumber++; } List<Pair<Long, String>> labelsLeftToInsert = new ArrayList<>(); for (Pair<Long, String> labelToInsert : labelsToInsert) { if (labelToInsert.a.equals(instructionNumber)) { processedAssembly.add(new Instruction(InstructionType.INSTRUCTION, labelToInsert.b, null, null, null, null, null, instruction.originalLine)); } else { labelsLeftToInsert.add(labelToInsert); } } labelsToInsert = labelsLeftToInsert; if (instruction.labelOperand != null) { Matcher dollarMatcher = dollarPattern.matcher(instruction.labelOperand); Instruction substitutedInstruction = instruction; while (dollarMatcher.find()) { nextLabelIndex++; if (dollarMatcher.group(\"current\") != null) { processedAssembly.add(new Instruction(InstructionType.INSTRUCTION, \"__dollar\" + nextLabelIndex, null, null, null, null, null, instruction.originalLine)); substitutedInstruction = new Instruction( substitutedInstruction.type, substitutedInstruction.label, substitutedInstruction.opcode, substitutedInstruction.constantOperand, substitutedInstruction.labelOperand.replace(\"$C\", \"__dollar\" + nextLabelIndex), substitutedInstruction.comment, substitutedInstruction.directive, substitutedInstruction.originalLine); } else if (dollarMatcher.group(\"number\") != null) { Long maybeNumber = tryParse(dollarMatcher.group(\"number\")); if (maybeNumber != null) { labelsToInsert.add(new Pair<>(instructionNumber + 1 + maybeNumber, \"__dollar\" + nextLabelIndex)); substitutedInstruction = new Instruction( substitutedInstruction.type, substitutedInstruction.label, substitutedInstruction.opcode, substitutedInstruction.constantOperand, substitutedInstruction.labelOperand.replace(\"$\" + maybeNumber, \"__dollar\" + nextLabelIndex), substitutedInstruction.comment, substitutedInstruction.directive, substitutedInstruction.originalLine); } else { throw new IllegalArgumentException(\"Label operand '$\" + dollarMatcher.group(\"number\") + \"' could not be parsed\"); } } else { throw new IllegalArgumentException(\"Cannot process dollar label '\" + dollarMatcher.group(0) + \"'\"); } dollarMatcher = dollarPattern.matcher(substitutedInstruction.labelOperand); } processedAssembly.add(substitutedInstruction); } else { processedAssembly.add(instruction); } } instructionNumber++; List<Pair<Long, String>> labelsLeftToInsert = new ArrayList<>(); for (Pair<Long, String> labelToInsert : labelsToInsert) { if (labelToInsert.a.equals(instructionNumber)) { processedAssembly.add(new Instruction(InstructionType.INSTRUCTION, labelToInsert.b, null, null, null, null, null, lastOriginalLine)); } else { labelsLeftToInsert.add(labelToInsert); } } if (labelsLeftToInsert.size() > 0) { throw new ArrayIndexOutOfBoundsException(\"A dollar label wants to be inserted beyond the end of the code.\"); } return processedAssembly; }### Assistant: @Test public void testProcessDollarLabelOperandZero() { List<Instruction> instructions = Arrays.asList( new Instruction(InstructionType.INSTRUCTION, \"init\", Assembler.opcodes.get(\"j\"), null, \"ALABEL-$0\", null, null, 1), new Instruction(InstructionType.INSTRUCTION, null, Assembler.opcodes.get(\"ldc\"), 5L, null, null, null, 2), new Instruction(InstructionType.INSTRUCTION, \"ALABEL\", Assembler.opcodes.get(\"ajw\"), 1L, null, null, null, 3) ); List<Instruction> processedInstructions = Assembler.processDollarLabelOperands(instructions); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, \"init\", Assembler.opcodes.get(\"j\"), null, \"ALABEL-__dollar1\", null, null, 1), processedInstructions.get(0)); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, \"__dollar1\", null, null, null, null, null, 2), processedInstructions.get(1)); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, null, Assembler.opcodes.get(\"ldc\"), 5L, null, null, null, 2), processedInstructions.get(2)); checkInstructionEquality( new Instruction(InstructionType.INSTRUCTION, \"ALABEL\", Assembler.opcodes.get(\"ajw\"), 1L, null, null, null, 3), processedInstructions.get(3)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Container> allocateContainers(ResourceBlacklistRequest blackList, List<ResourceRequest> oppResourceReqs, ApplicationAttemptId applicationAttemptId, OpportunisticContainerContext opportContext, long rmIdentifier, String appSubmitter) throws YarnException { updateBlacklist(blackList, opportContext); opportContext.addToOutstandingReqs(oppResourceReqs); Set<String> nodeBlackList = new HashSet<>(opportContext.getBlacklist()); Set<String> allocatedNodes = new HashSet<>(); List<Container> allocatedContainers = new ArrayList<>(); boolean continueLoop = true; while (continueLoop) { continueLoop = false; List<Map<Resource, List<Allocation>>> allocations = new ArrayList<>(); for (SchedulerRequestKey schedulerKey : opportContext.getOutstandingOpReqs().descendingKeySet()) { int remAllocs = -1; int maxAllocationsPerAMHeartbeat = getMaxAllocationsPerAMHeartbeat(); if (maxAllocationsPerAMHeartbeat > 0) { remAllocs = maxAllocationsPerAMHeartbeat - allocatedContainers.size() - getTotalAllocations(allocations); if (remAllocs <= 0) { LOG.info(\"Not allocating more containers as we have reached max \" + \"allocations per AM heartbeat {}\", maxAllocationsPerAMHeartbeat); break; } } Map<Resource, List<Allocation>> allocation = allocate( rmIdentifier, opportContext, schedulerKey, applicationAttemptId, appSubmitter, nodeBlackList, allocatedNodes, remAllocs); if (allocation.size() > 0) { allocations.add(allocation); continueLoop = true; } } matchAllocation(allocations, allocatedContainers, opportContext); } return allocatedContainers; }### Assistant: @Test public void testLotsOfContainersRackLocalAllocation() throws Exception { ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance( new ArrayList<>(), new ArrayList<>()); List<ResourceRequest> reqs = new ArrayList<>(); for (int i = 0; i < 100; i++) { reqs.add(ResourceRequest.newBuilder().allocationRequestId(i + 1) .priority(PRIORITY_NORMAL) .resourceName(\"*\") .capability(CAPABILITY_1GB) .relaxLocality(true) .executionType(ExecutionType.OPPORTUNISTIC).build()); reqs.add(ResourceRequest.newBuilder().allocationRequestId(i + 1) .priority(PRIORITY_NORMAL) .resourceName(\"h1\") .capability(CAPABILITY_1GB) .relaxLocality(true) .executionType(ExecutionType.OPPORTUNISTIC).build()); reqs.add(ResourceRequest.newBuilder().allocationRequestId(i + 1) .priority(PRIORITY_NORMAL) .resourceName(\"/r1\") .capability(CAPABILITY_1GB) .relaxLocality(true) .executionType(ExecutionType.OPPORTUNISTIC).build()); } ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance( ApplicationId.newInstance(0L, 1), 1); oppCntxt.updateNodeList( Arrays.asList( RemoteNode.newInstance( NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r2\"), RemoteNode.newInstance( NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance( NodeId.newInstance(\"h5\", 1234), \"h5:1234\", \"/r1\"), RemoteNode.newInstance( NodeId.newInstance(\"h4\", 1234), \"h4:1234\", \"/r2\"))); List<Container> containers = new ArrayList<>(); for (int i = 0; i < 25; i++) { containers.addAll(allocator.allocateContainers( blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\")); } Assert.assertEquals(100, containers.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Point decode() throws DecodeException { byte readTarget = value[value.length - 1]; int x0 = ByteUtils.readBit(readTarget, 7); Coordinate y = recoverY(this.value); Coordinate x = recoverX(y, x0); return PointEd25519.fromAffine(x, y); }### Assistant: @Test public void success_DecodePoint_6() throws DecodeException { EncodedPoint encodedPoint = new EncodedPointEd25519(HexEncoder.getBytes(\"0b67a11b2564accd38d9b963ac22eb64ed2ec9c17de25f7fe3209afc21886702\")); Point point = encodedPoint.decode(); assertThat(point.getX().getInteger(), is(new BigInteger(\"31621228259983782766387151846173419701451207683454700670358544852161525834558\"))); assertThat(point.getY().getInteger(), is(new BigInteger(\"1087550498622212171315934886475455672530696511327350732598338573849547859723\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected Diff() {}### Assistant: @Test(timeout=60000) public void testDiff() throws Exception { for(int startSize = 0; startSize <= 10000; startSize = nextStep(startSize)) { for(int m = 0; m <= 10000; m = nextStep(m)) { runDiffTest(startSize, m); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int hashCode() { int hash = 3; hash = 53 * hash + (this.id != null ? this.id.hashCode() : 0); hash = 53 * hash + (this.typeClass != null ? this.typeClass.hashCode() : 0); return hash; }### Assistant: @Test public void testColumnHashcode() { ColumnImpl col1 = new ColumnImpl(\"0\", String.class, null, null, Origin.DATA, false, false); ColumnImpl col2 = new ColumnImpl(\"0\", String.class, null, null, Origin.DATA, false, false); ColumnImpl col3 = new ColumnImpl(\"0\", Integer.class, null, null, Origin.DATA, false, false); ColumnImpl col4 = new ColumnImpl(\"1\", String.class, null, null, Origin.DATA, false, false); Assert.assertEquals(col1.hashCode(), col2.hashCode()); Assert.assertNotEquals(col1.hashCode(), col3.hashCode()); Assert.assertNotEquals(col1.hashCode(), col4.hashCode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String revertValue(Object cleanValue) { if (cleanValue == null) { return \"null\"; } Class<?> clazz = cleanValue.getClass(); if (clazz.isAssignableFrom(String.class)) { return String.valueOf(cleanValue); } else if (clazz.isAssignableFrom(Boolean.class) || clazz.isAssignableFrom(boolean.class)) { return Boolean.toString((Boolean) cleanValue); } else if (clazz.isAssignableFrom(Integer.class) || clazz.isAssignableFrom(int.class)) { return Integer.toString((Integer) cleanValue); } else if (clazz.isAssignableFrom(Long.class) || clazz.isAssignableFrom(long.class)) { return Long.toString((Long) cleanValue); } else if (clazz.isAssignableFrom(Double.class) || clazz.isAssignableFrom(double.class)) { return revertDouble((Double) cleanValue); } else if (clazz.isAssignableFrom(Float.class) || clazz.isAssignableFrom(float.class)) { return cleanValue + \"f\"; } else if (clazz.isAssignableFrom(Character.class) || clazz.isAssignableFrom(char.class)) { return String.valueOf(cleanValue); } else if (clazz.isAssignableFrom(Byte.class) || clazz.isAssignableFrom(byte.class)) { return String.valueOf(cleanValue); } else if (clazz.isAssignableFrom(Short.class) || clazz.isAssignableFrom(short.class)) { return String.valueOf(cleanValue); } else if (clazz.isAssignableFrom(LocalDate.class)) { LocalDate localDate = (LocalDate) cleanValue; return String.format(\"%04d-%02d-%02d\", localDate.getYear(), localDate.getMonthValue(), localDate.getDayOfMonth()); } else if (Enum.class.isAssignableFrom(clazz)) { return String.valueOf(cleanValue); } else { return String.valueOf(cleanValue); } }### Assistant: @Test public void revertValueTest() { assertEquals(\"Test\", revertValue(\"Test\")); assertEquals(\"false\", revertValue(false)); assertEquals(\"true\", revertValue(Boolean.TRUE)); assertEquals(\"1\", revertValue(1)); assertEquals(\"1\", revertValue(1L)); assertEquals(\"1.0d\", revertValue(1.0d)); assertEquals(\"NaN\", revertValue(Double.NaN)); assertEquals(\"Infinity\", revertValue(Double.POSITIVE_INFINITY)); assertEquals(\"-Infinity\", revertValue(Double.NEGATIVE_INFINITY)); assertEquals(\"1.0f\", revertValue(1.0f)); assertEquals(\"a\", revertValue('a')); assertEquals(\"1\", revertValue((short) 1)); assertEquals(String.valueOf(\"0\".getBytes()[0]), revertValue(\"0\".getBytes()[0])); assertEquals(\"null\", revertValue(null)); assertEquals(\"2018-10-20\", revertValue(LocalDate.of(2018, 10, 20))); assertEquals(\"FIRST\", revertValue(EnumTest.FIRST)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private String _getResizeFitValues( AMImageConfigurationEntry amImageConfigurationEntry) { Map<String, String> properties = amImageConfigurationEntry.getProperties(); int maxHeight = GetterUtil.getInteger(properties.get(\"max-height\")); String maxHeightString = StringPool.UNDERLINE; if (maxHeight != 0) { maxHeightString = String.valueOf(maxHeight); } int maxWidth = GetterUtil.getInteger(properties.get(\"max-width\")); String maxWidthString = StringPool.UNDERLINE; if (maxWidth != 0) { maxWidthString = String.valueOf(maxWidth); } return StringBundler.concat(maxWidthString, \"x\", maxHeightString); }### Assistant: @Test public void testGetResizeFitArgumentWithMaxWidthAndMaxHeight() { AMGIFImageScaler amGIFImageScaler = new AMGIFImageScaler(); AMImageConfigurationEntry amImageConfigurationEntry = new AMImageConfigurationEntryImpl( \"test\", \"desc\", \"12345\", HashMapBuilder.put( \"max-height\", \"100\" ).put( \"max-width\", \"200\" ).build(), true); Assert.assertEquals( \"200x100\", _getResizeFitValues(amGIFImageScaler, amImageConfigurationEntry)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validate() throws APIRestGeneratorException { super.validate() ; String errorString = null ; if (!this.isRequired()) { errorString = \"The 'name' field '\" + this.getName() + \"' in PATH must contain a field 'required' as 'true'\" ; } else if (this.getAlias() != null && !this.getAlias().equals(this.getName())) { errorString = \"The 'alias' field '\" + this.getAlias() + \"' in PATH must be the same than the 'name' value '\" + this.getName() + \"'\" ; } else if (this.isAutoInjected()) { errorString = \"Auto Injection cannot be implemented for path parameters\" ; } if (errorString != null) { ParameterPath.LOGGER.error(errorString) ; throw new APIRestGeneratorException(errorString) ; } }### Assistant: @Test(expected = APIRestGeneratorException.class) public void invalidParameterRequiredFalse() throws APIRestGeneratorException { final ParameterPath parameterPath = new ParameterPath(ConstantsTest.NAME, ConstantsTest.ALIAS, ConstantsTest.DESCRIPTION, \"false\", ConstantsTest.TYPE, ConstantsTest.AUTO_INJECTED) ; parameterPath.validate() ; }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Fact apply(FactRecord record) { if (record == null) return null; return Fact.builder() .setId(record.getId()) .setType(ObjectUtils.ifNotNull(factTypeConverter.apply(record.getTypeID()), FactType::toInfo)) .setValue(record.getValue()) .setInReferenceTo(ObjectUtils.ifNotNull(convertInReferenceTo(record.getInReferenceToID()), Fact::toInfo)) .setOrganization(ObjectUtils.ifNotNull(organizationConverter.apply(record.getOrganizationID()), Organization::toInfo)) .setAddedBy(ObjectUtils.ifNotNull(subjectConverter.apply(record.getAddedByID()), Subject::toInfo)) .setOrigin(ObjectUtils.ifNotNull(originConverter.apply(record.getOriginID()), Origin::toInfo)) .setTrust(record.getTrust()) .setConfidence(record.getConfidence()) .setAccessMode(ObjectUtils.ifNotNull(record.getAccessMode(), m -> AccessMode.valueOf(m.name()))) .setTimestamp(record.getTimestamp()) .setLastSeenTimestamp(record.getLastSeenTimestamp()) .setSourceObject(ObjectUtils.ifNotNull(objectConverter.apply(record.getSourceObject()), Object::toInfo)) .setDestinationObject(ObjectUtils.ifNotNull(objectConverter.apply(record.getDestinationObject()), Object::toInfo)) .setBidirectionalBinding(record.isBidirectionalBinding()) .setFlags(convertFlags(record)) .build(); }### Assistant: @Test public void testConvertFactBothSourceAndDestination() { ObjectRecord source = new ObjectRecord().setId(UUID.randomUUID()); ObjectRecord destination = new ObjectRecord().setId(UUID.randomUUID()); FactRecord record = createRecord() .setSourceObject(source) .setDestinationObject(destination) .setBidirectionalBinding(true); when(objectResponseConverter.apply(source)).thenReturn(Object.builder().setId(source.getId()).build()); when(objectResponseConverter.apply(destination)).thenReturn(Object.builder().setId(destination.getId()).build()); Fact model = converter.apply(record); assertModelCommon(record, model); assertTrue(model.isBidirectionalBinding()); assertNotNull(model.getSourceObject()); assertEquals(source.getId(), model.getSourceObject().getId()); assertNotNull(model.getDestinationObject()); assertEquals(destination.getId(), model.getDestinationObject().getId()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static ByteBuf[] decodeMimeAndContentBuffersSlices( ByteBuf compositeMetadata, int entryIndex, boolean retainSlices) { compositeMetadata.markReaderIndex(); compositeMetadata.readerIndex(entryIndex); if (compositeMetadata.isReadable()) { ByteBuf mime; int ridx = compositeMetadata.readerIndex(); byte mimeIdOrLength = compositeMetadata.readByte(); if ((mimeIdOrLength & STREAM_METADATA_KNOWN_MASK) == STREAM_METADATA_KNOWN_MASK) { mime = retainSlices ? compositeMetadata.retainedSlice(ridx, 1) : compositeMetadata.slice(ridx, 1); } else { int mimeLength = Byte.toUnsignedInt(mimeIdOrLength) + 1; if (compositeMetadata.isReadable( mimeLength)) { mime = retainSlices ? compositeMetadata.retainedSlice(ridx, mimeLength + 1) : compositeMetadata.slice(ridx, mimeLength + 1); compositeMetadata.skipBytes(mimeLength); } else { compositeMetadata.resetReaderIndex(); throw new IllegalStateException(\"metadata is malformed\"); } } if (compositeMetadata.isReadable(3)) { final int metadataLength = compositeMetadata.readUnsignedMedium(); if (compositeMetadata.isReadable(metadataLength)) { ByteBuf metadata = retainSlices ? compositeMetadata.readRetainedSlice(metadataLength) : compositeMetadata.readSlice(metadataLength); compositeMetadata.resetReaderIndex(); return new ByteBuf[] {mime, metadata}; } else { compositeMetadata.resetReaderIndex(); throw new IllegalStateException(\"metadata is malformed\"); } } else { compositeMetadata.resetReaderIndex(); throw new IllegalStateException(\"metadata is malformed\"); } } compositeMetadata.resetReaderIndex(); throw new IllegalArgumentException( String.format(\"entry index %d is larger than buffer size\", entryIndex)); }### Assistant: @Test void decodeEntryTooShortForContentLength() { ByteBuf fakeEntry = Unpooled.buffer(); fakeEntry.writeByte(1); fakeEntry.writeCharSequence(\"w\", CharsetUtil.US_ASCII); NumberUtils.encodeUnsignedMedium(fakeEntry, 456); fakeEntry.writeChar('w'); assertThatIllegalStateException() .isThrownBy(() -> decodeMimeAndContentBuffersSlices(fakeEntry, 0, false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void overrideParams(Config overrideOptions) { config = overrideOptions.withFallback(config); validateConfig(); }### Assistant: @Test public void testUnexpectedElementInNodeConfigThrowsException() { String nodeWithUnexpectedElement = \"peer = {\" + \"active = [{\\n\" + \" port = 30303\\n\" + \" nodeName = Test\\n\" + \" unexpectedElement = 12345\\n\" + \"}]}\"; Config invalidConfig = ConfigFactory.parseString(nodeWithUnexpectedElement); SystemProperties props = new SystemProperties(); try { props.overrideParams(invalidConfig); } catch (RuntimeException ignore) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static int computeRawVarint32Size(final int value) { if ((value & (0xffffffff << 7)) == 0) { return 1; } if ((value & (0xffffffff << 14)) == 0) { return 2; } if ((value & (0xffffffff << 21)) == 0) { return 3; } if ((value & (0xffffffff << 28)) == 0) { return 4; } return 5; }### Assistant: @Test public void testSize4Varint() { final int size = 4; final int num = 0x200000; assertThat(ProtobufVarint32LengthFieldPrepender.computeRawVarint32Size(num), is(size)); final byte[] buf = new byte[size + num]; buf[0] = (byte) (0x80 & 0xFF); buf[1] = (byte) (0x80 & 0xFF); buf[2] = (byte) (0x80 & 0xFF); buf[3] = 0x01; for (int i = size; i < num + size; ++i) { buf[i] = 1; } assertTrue(ch.writeOutbound(wrappedBuffer(buf, size, buf.length - size))); ByteBuf expected = wrappedBuffer(buf); ByteBuf actual = ch.readOutbound(); assertThat(actual, is(expected)); assertFalse(ch.finish()); expected.release(); actual.release(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static NameMapper createNameMapper(NameMappingStrategy strategy) { switch (requireNonNull(strategy, \"strategy\")) { case SIMPLE: return new VerySimpleNameMapper(); case JACKSON_DEFAULT: return new JacksonDefaultNameMapper(); case UPPER_CAMEL_CASE: return new UpperCamelCaseNameMapper(); case SNAKE_CASE: return new SnakeCaseNameMapper(); } throw new IllegalStateException(\"No Mapper implemented for strategy \" + strategy); }### Assistant: @Test @DisplayName(\"Check Factory errors when called with null\") void createNameMapper() { assertThrows(NullPointerException.class, () -> NameMapperFactory.createNameMapper(null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public RepositoryBackedSession getSession(RequestWithSession request, boolean create, SessionTracking.IdAndSource forceId) { SessionTracking.IdAndSource id = retrieveId(request, forceId); RepositoryBackedSession session = null; if (id != null && id.id != null) { putIdInLoggingMdc(id.id); request.setRequestedSessionId(id.id, id.cookie); session = fetchSession(id.id, true); if (!request.isRepositoryChecked()) { logger.info(\"Session with sessionId: '{}' but it was not in repository!\", id); request.repositoryChecked(); } } else { putIdInLoggingMdc(null); request.setRequestedSessionId(null, tracking.isCookieTracking()); } if (session == null && create) { if (forceId == null) { id = new SessionTracking.IdAndSource(tracking.newId(), tracking.isCookieTracking()); } else { id = forceId; } putIdInLoggingMdc(id.id); logger.info(\"Creating new session with sessionId: '{}'\", id); session = newSession(id.id); } if (session != null) { session.checkUsedAndLock(); } return session; }### Assistant: @Test public void testGetSessionNoSessionIdCreate() { RequestWithSession request = mock(RequestWithSession.class); when(tracking.newId()).thenReturn(\"new-id\"); RepositoryBackedSession session = mock(RepositoryBackedSession.class); when(session.getId()).thenReturn(\"new-id\"); when(factory.build(any(SessionData.class))).thenReturn(session); RepositoryBackedSession retrievedSession = sessionManager.getSession(request, true, null); verify(request).setRequestedSessionId(null, false); verify(tracking).newId(); assertEquals(\"Session id in Logging MDC is wrong\", \"new-id\", MDC.get(configuration.getLoggingMdcKey())); assertSame(session, retrievedSession); assertEquals(1, metrics.meter(MetricRegistry.name(SessionManager.SESSIONS_METRIC_PREFIX, \"created\")).getCount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Set<String> getPropertyIds() { return propertyIds; }### Assistant: @Test public void testGetProperties() { Set<String> propertyIds = new HashSet<String>(); propertyIds.add(\"foo\"); propertyIds.add(\"bar\"); propertyIds.add(\"cat1/prop1\"); propertyIds.add(\"cat2/prop2\"); propertyIds.add(\"cat3/subcat3/prop3\"); BaseProvider provider = new TestProvider(propertyIds); Set<String> supportedPropertyIds = provider.getPropertyIds(); assertTrue(supportedPropertyIds.containsAll(propertyIds)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @EventListener public void onApplicationEvent(WebServerInitializedEvent event) { initCRL(); cvcTlsCheck.check(); }### Assistant: @Test void testWhenTerminalPermissionIsNullThenCRLNotInitialized() throws Exception { tempDirectory = JAVA_IO_TMPDIR + \"-\" + (int)(Math.random() * 1000000); Files.createDirectory(Paths.get(tempDirectory)); log.trace(\"Generated random temp dir: {}\", tempDirectory); Path resourceDirectory = Paths.get(\"src\", \"test\", \"resources\"); File source = new File(resourceDirectory + \"/POSeIDAS.xml\"); File dest = new File(tempDirectory + \"/POSeIDAS.xml\"); Files.copy(source.toPath(), dest.toPath(), StandardCopyOption.REPLACE_EXISTING); System.setProperty(\"spring.config.additional-location\", Paths.get(tempDirectory).toString()); startupListener = new StartupListener(facade, timer, cvcTlsCheck); startupListener.onApplicationEvent(webServerInitializedEvent); Mockito.verify(timer, Mockito.times(1)).renewMasterDefectList(); Assertions.assertThrows(IllegalStateException.class, CertificationRevocationListImpl::getInstance); Mockito.verify(cvcTlsCheck, Mockito.times(1)).check(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void setEscapeProcessing( boolean enable ) throws SQLException { notClosed(); }### Assistant: @Test public void shouldSetEscapeProcessingTrue() throws SQLException { stmt.setEscapeProcessing(true); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void clear() { if (!this.gridHistory.peek().getValue0().isEmpty()) { Grid newGrid = new Grid(); this.gridHistory.push(Pair.with(newGrid, null)); save(); fireUpdate(); } }### Assistant: @Test public void testClear() { LotoGrid grid = new LotoGrid(HISTORY_DEPTH, MAX_NUMBER); for (int i = 1; i <= MAX_NUMBER; i++) { grid.clic(i); } grid.clear(); assertThat(grid.getActualGrid().isEmpty()).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean validateCertRequestSanDnsNames(final Map<String, String> attributes, final String domain, final String service, final String dnsSuffix, StringBuilder instanceId) { if (dnsSuffix == null || dnsSuffix.isEmpty()) { LOGGER.error(\"No AWS DNS suffix specified for validation\"); return false; } final String hostnames = InstanceUtils.getInstanceProperty(attributes, InstanceProvider.ZTS_INSTANCE_SAN_DNS); if (hostnames == null || hostnames.isEmpty()) { LOGGER.error(\"Request contains no SAN DNS entries for validation\"); return false; } final String hostNameCheck = service + \".\" + domain.replace('.', '-') + \".\" + dnsSuffix; boolean hostCheck = false; boolean instanceIdCheck = false; String[] hosts = hostnames.split(\",\"); if (hosts.length > 2) { LOGGER.error(\"Request does not contain expected number of SAN DNS entries: {}\", hosts.length); return false; } for (String host : hosts) { int idx = host.indexOf(ZTS_CERT_INSTANCE_ID); if (idx != -1) { instanceId.append(host, 0, idx); if (!dnsSuffix.equals(host.substring(idx + ZTS_CERT_INSTANCE_ID.length()))) { LOGGER.error(\"Host: {} does not have expected instance id format\", host); return false; } instanceIdCheck = true; } else { if (!hostNameCheck.equals(host)) { LOGGER.error(\"Unable to verify SAN DNS entry: {}\", host); return false; } hostCheck = true; } } if (!hostCheck) { LOGGER.error(\"Request does not contain expected host SAN DNS entry\"); return false; } if (!instanceIdCheck && !validateCertRequestUriId(attributes, instanceId)) { LOGGER.error(\"Request does not contain expected instance id entry\"); return false; } return true; }### Assistant: @Test public void testValidateCertRequestHostnamesWithInstanceIdURI() { HashMap<String, String> attributes = new HashMap<>(); attributes.put(\"sanDNS\", \"api.athenz.athenz.cloud\"); attributes.put(\"sanURI\", \"spiffe: StringBuilder id = new StringBuilder(256); assertTrue(InstanceUtils.validateCertRequestSanDnsNames(attributes, \"athenz\", \"api\", \"athenz.cloud\", id)); assertEquals(id.toString(), \"i-1234\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final BatchDeletePhotosResponse batchDeletePhotos(List<String> photoIds) { BatchDeletePhotosRequest request = BatchDeletePhotosRequest.newBuilder().addAllPhotoIds(photoIds).build(); return batchDeletePhotos(request); }### Assistant: @Test @SuppressWarnings(\"all\") public void batchDeletePhotosExceptionTest() throws Exception { StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT); mockStreetViewPublishService.addException(exception); try { List<String> photoIds = new ArrayList<>(); client.batchDeletePhotos(photoIds); Assert.fail(\"No exception raised\"); } catch (InvalidArgumentException e) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object other) { if (other == null) return false; if (!(other instanceof TeradataTimestampPeriod)) return false; TeradataTimestampPeriod odp = (TeradataTimestampPeriod)other; Object[] thisAtts = null; Object[] otherAtts = null; try { otherAtts = odp.getAttributes(); thisAtts = this.getAttributes(); } catch (SQLException e) { System.out.println(\"TeradataTimestampPeriod: equals: caught exception\"); } if (!(thisAtts[0].equals(otherAtts[0]))) return false; if (!(thisAtts[1].equals(otherAtts[1]))) return false; return true; }### Assistant: @Test public void notEqualsTest() { String fromStr = \"2012-11-11 01:23:45\"; String toStr = \"2014-06-02 12:13:14\"; java.sql.Timestamp F = null; java.sql.Timestamp T = null; try { F = (java.sql.Timestamp) SqlTimestampParseDelegate.parse(fromStr); T = (java.sql.Timestamp) SqlTimestampParseDelegate.parse(toStr); } catch (Exception e) { throw new Error(\"Parsing timestamp literals\"); } Object[] range = { F, T }; TeradataTimestampPeriod tdp = new TeradataTimestampPeriod(range); Object[] range2 = { F, F }; TeradataTimestampPeriod tdp2 = new TeradataTimestampPeriod(range2); assertFalse(\"Timestamp periods are equal\", tdp.equals(tdp2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Comment getCellComment(CellAddress ref) { throw new UnsupportedOperationException(); }### Assistant: @Test(expected = UnsupportedOperationException.class) public void getCellComment() throws Exception { streamingSheet.getCellComment(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override synchronized public ReportEvent getMetrics() { ReportEvent rpt = super.getMetrics(); rpt.setLongMetric(A_FILESADDED, filesAdded.get()); rpt.setLongMetric(A_FILESDELETED, filesDeleted.get()); rpt.setLongMetric(A_SUBDIRSADDED, subdirsAdded.get()); rpt.setLongMetric(A_SUBDIRSDELETED, subdirsDeleted.get()); rpt.setLongMetric(A_FILESPRESENT, tail.cursors.size()); return rpt; }### Assistant: @Test public void testExistingDir() throws IOException, InterruptedException { File tmpdir = FileUtil.mktempdir(); File subDir = new File(tmpdir, \"subdir\"); subDir.mkdirs(); TailDirSource src = new TailDirSource(tmpdir, \".*\"); AccumulatorSink cnt = new AccumulatorSink(\"tailcount\"); DirectDriver drv = new DirectDriver(src, cnt); genFiles(tmpdir, \"foo\", 10, 100); drv.start(); Clock.sleep(1000); assertEquals(1000, cnt.getCount()); drv.stop(); FileUtil.rmr(tmpdir); assertEquals(Long.valueOf(10), src.getMetrics().getLongMetric(TailDirSource.A_FILESADDED)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Message findMessage(Long messageId) { return forumDao.findMessage(messageId); }### Assistant: @Test public void findMessageExisting() { Message message = forumService.findMessage(MESSAGE_ID); assertTrue(message != null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Collection<String[]> values() { return requestMap.values(); }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void testValues() { Collection<String[]> values = createMock(Collection.class); expect(requestMap.values()).andReturn(values); replay(requestMap, responseMap, values); assertEquals(values, map.values()); verify(requestMap, responseMap, values); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public IRichCardinality merge(IRichCardinality... estimators) throws LogLogMergeException { LogLog res = (LogLog) super.merge(estimators); return new AdaptiveCounting(res.M); }### Assistant: @Test public void testMerge() throws CardinalityMergeException { int numToMerge = 10; int cardinality = 10000; AdaptiveCounting[] lcs = new AdaptiveCounting[numToMerge]; AdaptiveCounting baseline = new AdaptiveCounting(16); for (int i = 0; i < numToMerge; i++) { lcs[i] = new AdaptiveCounting(16); for (int j = 0; j < cardinality; j++) { double val = Math.random(); lcs[i].offer(val); baseline.offer(val); } } int expectedCardinality = numToMerge * cardinality; long mergedEstimate = AdaptiveCounting.mergeEstimators(lcs).cardinality(); double error = Math.abs(mergedEstimate - expectedCardinality) / (double) expectedCardinality; assertEquals(0.01, error, 0.01); AdaptiveCounting lc = lcs[0]; lcs = Arrays.asList(lcs).subList(1, lcs.length).toArray(new AdaptiveCounting[0]); mergedEstimate = lc.merge(lcs).cardinality(); error = Math.abs(mergedEstimate - expectedCardinality) / (double) expectedCardinality; assertEquals(0.01, error, 0.01); assertEquals(baseline.cardinality(), mergedEstimate); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void run() { if (Thread.currentThread().getId() != tid) { if (currentSpan != null) { traceContext.push(currentSpan); SpanExtensionFactory.logStartedSpan(currentSpan); } } try { wrappedRunnable.run(); } finally { if (Thread.currentThread().getId() != tid) { if (currentSpan != null) { traceContext.pop(); } } } }### Assistant: @Test public void testInstrumentedRunnableNoCurrentSpan() { when(traceContext.isEmpty()).thenReturn(true); Runnable wrappedRunnable = mock(Runnable.class); SofaTracerRunnable runnable = new SofaTracerRunnable(wrappedRunnable, traceContext); runnable.run(); verify(traceContext, times(1)).isEmpty(); verify(wrappedRunnable, times(1)).run(); verifyNoMoreInteractions(traceContext, wrappedRunnable); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Point decode() throws DecodeException { byte readTarget = value[value.length - 1]; int x0 = ByteUtils.readBit(readTarget, 7); Coordinate y = recoverY(this.value); Coordinate x = recoverX(y, x0); return PointEd448.fromAffine(x, y); }### Assistant: @Test public void success_DecodePoint_1() throws DecodeException { EncodedPoint encodedPoint = new EncodedPointEd448(HexEncoder.getBytes(\"fe73d757bbbc3754bc121a8e541013daab78f022af8a0391ea7413c11d317821038039890768fd93f6a1850c4ce2948a02c5278ff1dfd21a80\")); Point point = encodedPoint.decode(); assertThat(point.getX().getInteger(), is(new BigInteger(\"346711535767036312264896787009588144353847535648881470250016240193210663703211967520979531621448938121538315092227252553492140171084741\"))); assertThat(point.getY().getInteger(), is(new BigInteger(\"76158302379442260505276576686796488278997776206127607371674860847167404089902911584147334234478926201420191503410874437273677905490942\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final long requested() { return requested.get(); }### Assistant: @Test public void orderedFastPathReject() { TestSubscriber<Integer> ts = new TestSubscriber<Integer>(1); Disposable d = Disposables.empty(); QueueDrainSubscriber<Integer, Integer, Integer> qd = createOrderedReject(ts, d); ts.onSubscribe(new BooleanSubscription()); qd.requested(1); qd.onNext(1); ts.assertValuesOnly(1); assertEquals(1, qd.requested()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ProgressEvent<ResourceModel, CallbackContext> handleRequest( final AmazonWebServicesClientProxy proxy, final ResourceHandlerRequest<ResourceModel> request, final CallbackContext callbackContext, final Logger logger) { final ResourceModel model = request.getDesiredResourceState(); try { proxy.injectCredentialsAndInvokeV2(RequestUtil.generateDeleteComponentRequest(model), ClientBuilder.getImageBuilderClient()::deleteComponent); } catch (ResourceNotFoundException e) { throw new CfnNotFoundException(ResourceModel.TYPE_NAME, e.toString()); } return ProgressEvent.<ResourceModel, CallbackContext>builder() .resourceModel(model) .status(OperationStatus.SUCCESS) .build(); }### Assistant: @Test public void handleRequest_SimpleSuccess() { final ProgressEvent<ResourceModel, CallbackContext> response = handler.handleRequest(proxy, request, null, logger); assertThat(response).isNotNull(); assertThat(response.getStatus()).isEqualTo(OperationStatus.SUCCESS); assertThat(response.getCallbackContext()).isNull(); assertThat(response.getCallbackDelaySeconds()).isEqualTo(0); assertThat(response.getResourceModel()).isEqualTo(request.getDesiredResourceState()); assertThat(response.getResourceModels()).isNull(); assertThat(response.getMessage()).isNull(); assertThat(response.getErrorCode()).isNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Object> create() { _evaluate(); return createPagesTemplateContext( _ddmFormLayout.getDDMFormLayoutPages()); }### Assistant: @Test public void testPageTitle() throws Exception { DDMForm ddmForm = DDMFormTestUtil.createDDMForm(); DDMFormLayout ddmFormLayout = new DDMFormLayout(); String pageTitle = String.format(_HTML_WRAPPER, \"titlePage\"); DDMFormLayoutPage ddmFormLayoutPage1 = createDDMFormLayoutPage( pageTitle, \"descriptionPage\"); ddmFormLayout.addDDMFormLayoutPage(ddmFormLayoutPage1); DDMFormPagesTemplateContextFactory ddmFormPagesTemplateContextFactory = createDDMFormPagesTemplateContextFactory( ddmForm, ddmFormLayout, null, false, true, true); List<Object> pages = ddmFormPagesTemplateContextFactory.create(); Map<String, Object> pageTemplateContext = (Map<String, Object>)pages.get(0); Assert.assertEquals(pageTitle, pageTemplateContext.get(\"title\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void parse(ParseContext parseContext) { Chunk currentChunk = parseContext.getCurrent(); Matcher matcher = BLOCKFACE.matcher(currentChunk.getText()); if(!matcher.matches()) { patternNotMatched(parseContext,BLOCKFACE); return; } MatchBuilder builder = new MatchBuilder() .add(matcher) .add(MatchType.COMPLETE) .add(parseContext) .add(BLOCKFACE, 1, TokenType.ON) .add(BLOCKFACE, 2, TokenType.ON_STREET) .add(BLOCKFACE, 3, TokenType.BETWEEN) .add(BLOCKFACE, 4, TokenType.CROSS_STREET_ONE) .add(BLOCKFACE, 5, TokenType.AND) .add(BLOCKFACE, 6, TokenType.CROSS_STREET_TWO); handleMatch(builder.build(), ChunkType.BLOCKFACE); }### Assistant: @Test public void testParse() { testParser(parser, LOGGER); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T> Collection<T> findAll(Class<T> clazz) { return selectAdapter(clazz).findAll(clazz); }### Assistant: @Test public void testFindAll() throws Exception { lda.findAll(NonLegacy.class); verify(kradLegacyDataAdapter).findAll(eq(NonLegacy.class)); verifyZeroInteractions(knsLegacyDataAdapter); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR) @ExceptionHandler(Throwable.class) @ResponseBody public MultiExecuteOutput exception(Throwable pEx){ ExecuteOutput<?> resp = new ExecuteOutput<>(); ExecuteError execError = constructExecError(pEx); String message = constructMessage(execError); if (Optional.ofNullable(exceptions).isPresent()) { if (exceptions.containsKey(pEx.getClass())) { message = constructMessage(exceptions.get(pEx.getClass()), execError); } else { Optional<Class<?>> hierarchyclass = exceptions.keySet() .stream() .filter(c -> null != c && c.isAssignableFrom(pEx.getClass())) .findFirst(); if (hierarchyclass.isPresent()) message = constructMessage(exceptions.get(hierarchyclass.get()), execError); } } execError.setMessage(message); logError(execError, pEx); resp.setExecuteException(execError); return defaultInterceptor.handleResponse(resp); }### Assistant: @Test public void testMethodArgumentNotValidExceptionHandler() throws NoSuchMethodException, SecurityException { final MethodArgumentNotValidException ex = Mockito.mock(MethodArgumentNotValidException.class); final MultiExecuteOutput expected = new MultiExecuteOutput(sessionid); Mockito.when(this.interceptor.handleResponse(Mockito.isA(ExecuteOutput.class))).thenReturn(expected); final MultiExecuteOutput actual = this.testee.exception(ex); final ArgumentCaptor<ExecuteOutput> respCaptor = ArgumentCaptor.forClass(ExecuteOutput.class); Mockito.verify(this.interceptor, Mockito.only()).handleResponse(respCaptor.capture()); Assert.assertEquals(expected, actual); Assert.assertNotNull(respCaptor.getValue().getValidationResult()); Assert.assertNotNull(respCaptor.getValue().getValidationResult().getErrors()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ContentSummary getContentSummary(Path f) throws IOException { return fs.getContentSummary(fullPath(f)); }### Assistant: @Test public void testGetContentSummary() throws IOException { fSys.mkdirs(new Path(\"/newDir/dirFoo\")); ContentSummary cs = fSys.getContentSummary(new Path(\"/newDir/dirFoo\")); Assert.assertEquals(-1L, cs.getQuota()); Assert.assertEquals(-1L, cs.getSpaceQuota()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties) { requireNonNull(stateProperties, \"The state properties must not be null\"); try { stateProperties.initializeSerializerUnlessSet(getExecutionConfig()); return operator.getPartitionedState(stateProperties); } catch (Exception e) { throw new RuntimeException(\"Error while getting state\", e); } }### Assistant: @Test public void testReduceingStateInstantiation() throws Exception { final ExecutionConfig config = new ExecutionConfig(); config.registerKryoType(Path.class); final AtomicReference<Object> descriptorCapture = new AtomicReference<>(); StreamingRuntimeContext context = new StreamingRuntimeContext( createMockOp(descriptorCapture, config), createMockEnvironment(), Collections.<String, Accumulator<?, ?>>emptyMap()); @SuppressWarnings(\"unchecked\") ReduceFunction<TaskInfo> reducer = (ReduceFunction<TaskInfo>) mock(ReduceFunction.class); ReducingStateDescriptor<TaskInfo> descr = new ReducingStateDescriptor<>(\"name\", reducer, TaskInfo.class); context.getReducingState(descr); StateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get(); TypeSerializer<?> serializer = descrIntercepted.getSerializer(); assertTrue(serializer instanceof KryoSerializer); assertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static View viewFromJson(final BundleService bundleService, final JSONObject viewJSON) throws JSONException, IllegalArgumentException { final View view = new View(); view.setName(viewJSON.getString(\"name\")); view.setType(viewJSON.getString(\"type\")); view.setCreator(viewJSON.optLong(\"creator\", -1L)); view.setIsDefault(viewJSON.optBoolean(\"default\")); view.setIsPublic(viewJSON.optBoolean(\"public\", false)); view.setOnlyForUuId(viewJSON.optBoolean(\"onlyUuid\", true)); view.setMetadata(viewJSON.optJSONObject(\"metadata\")); if (viewJSON.has(\"oskari\")) { final JSONObject oskari = viewJSON.getJSONObject(\"oskari\"); view.setApplication(oskari.getString(\"application\")); view.setPage(oskari.getString(\"page\")); } else { view.setApplication(viewJSON.getString(\"application\")); view.setPage(viewJSON.getString(\"page\")); } addBundles(bundleService, view, viewJSON.getJSONArray(\"bundles\")); return view; }### Assistant: @Test public void testThatParsingWorks() throws IOException, IllegalArgumentException, JSONException { byte[] b = null; try (InputStream in = this.getClass() .getResourceAsStream(\"view-to-import.json\")) { b = IOHelper.readBytes(in); } if (b == null || b.length == 0) { fail(\"Failed to read view-to-import.json\"); return; } String jsonStr = new String(b, StandardCharsets.UTF_8); JSONObject viewJSON = new JSONObject(jsonStr); Bundle foobar = new Bundle(); foobar.setName(\"foobar\"); bundleService.addBundleTemplate(foobar); View view = ViewHelper.viewFromJson(bundleService, viewJSON); assertEquals(\"Default view\", view.getName()); assertEquals(\"DEFAULT\", view.getType()); assertEquals(true, view.isDefault()); assertEquals(true, view.isPublic()); assertEquals(false, view.isOnlyForUuId()); assertEquals(\"servlet\", view.getApplication()); assertEquals(\"index\", view.getPage()); List<Bundle> bundles = view.getBundles(); assertNotNull(bundles); assertEquals(1, bundles.size()); assertEquals(foobar.getName(), bundles.get(0).getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String parseUntilTerminator( DdlTokenStream tokens ) throws ParsingException { final StringBuilder sb = new StringBuilder(); boolean lastTokenWasPeriod = false; Position prevPosition = (tokens.hasNext() ? tokens.nextPosition() : Position.EMPTY_CONTENT_POSITION); String prevToken = \"\"; while (tokens.hasNext() && !tokens.matches(DdlTokenizer.STATEMENT_KEY) && ((doUseTerminator() && !isTerminator(tokens)) || !doUseTerminator())) { final Position currPosition = tokens.nextPosition(); final String thisToken = tokens.consume(); final boolean thisTokenIsPeriod = thisToken.equals(PERIOD); final boolean thisTokenIsComma = thisToken.equals(COMMA); if (lastTokenWasPeriod || thisTokenIsPeriod || thisTokenIsComma) { sb.append(thisToken); } else if ((currPosition.getIndexInContent() - prevPosition.getIndexInContent() - prevToken.length()) > 0) { sb.append(SPACE).append(thisToken); } else { sb.append(thisToken); } if (thisTokenIsPeriod) { lastTokenWasPeriod = true; } else { lastTokenWasPeriod = false; } prevToken = thisToken; prevPosition = currPosition; } return sb.toString(); }### Assistant: @Test public void shoudParseUntilTerminated() { printTest(\"shoudParseUntilTerminated()\"); String prefix = \"( COL_SUM, COL_DIFF ) AS SELECT COMM + BONUS, COMM - BONUS FROM SAMP.EMPLOYEE\"; String content = prefix + \"; CREATE TABLE someName\"; DdlTokenStream tokens = getTokens(content); String result = parser.parseUntilTerminator(tokens); printTest(result); assertEquals(prefix, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: String createTokenName(final TransactionTokenCheck classAnnotation, final TransactionTokenCheck methodAnnotation) { String methodTokenName = methodAnnotation.value(); String classTokenName = (classAnnotation == null) ? \"\" : classAnnotation.value(); StringBuilder tokenNameStringBuilder = new StringBuilder(); if (classTokenName != null && !classTokenName.isEmpty()) { tokenNameStringBuilder.append(classTokenName); } if (methodTokenName != null && !methodTokenName.isEmpty()) { if (tokenNameStringBuilder.length() != 0) { tokenNameStringBuilder.append(\"/\"); } tokenNameStringBuilder.append(methodTokenName); } if (tokenNameStringBuilder.length() == 0) { tokenNameStringBuilder.append(globalTokenName); } return tokenNameStringBuilder.toString(); }### Assistant: @Test public void testCreateTokenInfoName05() throws Exception { TransactionTokenCheck methodAnnotation = mock( TransactionTokenCheck.class); TransactionTokenCheck classAnnotation = mock( TransactionTokenCheck.class); when(methodAnnotation.value()).thenReturn(\"test\"); when(classAnnotation.value()).thenReturn(\"\"); assertThat(store.createTokenName(classAnnotation, methodAnnotation), is( notNullValue())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object visit(ASTRingIdentifier node, Object data) { IQueryAtom atom = (IQueryAtom) data; RingIdentifierAtom ringIdAtom = new RingIdentifierAtom(builder); ringIdAtom.setAtom(atom); IQueryBond bond; if (node.jjtGetNumChildren() == 0) { bond = null; } else { bond = (IQueryBond) node.jjtGetChild(0).jjtAccept(this, data); } ringIdAtom.setRingBond(bond); return ringIdAtom; }### Assistant: @Test public void testPattern198() throws Exception { visit(\"[#16X2H0][!#16].[#16X2H0][!#16]\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public URI resolveLocation(String location, boolean create) { List<String> elements = new ArrayList<>(); if (StringUtils.isNotBlank(prefix)) { elements.add(prefix); } elements.add(location); String path = elements.stream().collect(joining(\"/\")); if (create) { ByteArrayInputStream content = new ByteArrayInputStream(new byte[0]); ObjectMetadata metadata = new ObjectMetadata(); metadata.setContentLength(0); s3.putObject(bucket, path + \"/\", content, metadata); } try { return new URI(\"s3\", bucket, \"/\" + path, null); } catch (URISyntaxException e) { throw new MetaStoreException( String.format(\"Could not construct location URI for: bucket='%s', prefix='%s', location='%s'\", bucket, prefix, location), e); } }### Assistant: @Test public void create() throws URISyntaxException { S3LocationResolver resolver = new S3LocationResolver(s3, \"bucket\", \"prefix\"); resolver.resolveLocation(\"tableName\", true); ArgumentCaptor<ByteArrayInputStream> contentCaptor = ArgumentCaptor.forClass(ByteArrayInputStream.class); ArgumentCaptor<ObjectMetadata> metadataCaptor = ArgumentCaptor.forClass(ObjectMetadata.class); verify(s3).putObject(eq(\"bucket\"), eq(\"prefix/tableName/\"), contentCaptor.capture(), metadataCaptor.capture()); assertThat(contentCaptor.getValue().available(), is(0)); assertThat(metadataCaptor.getValue().getContentLength(), is(0L)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void process(BoundContainer boundContainer) { Bound newBound = null; if (area == null) { area = new PolygonFileReader(polygonFile).loadPolygon(); } for (Bound b : boundContainer.getEntity().toSimpleBound()) { if (newBound == null) { newBound = simpleBoundIntersect(b); } else { newBound = newBound.union(simpleBoundIntersect(b)); } } if (newBound != null) { super.process(new BoundContainer(newBound)); } }### Assistant: @Test public final void testProcessBoundContainer3() { polyAreaFilter.process(new BoundContainer(nonIntersectingBound)); polyAreaFilter.complete(); assertNull(entityInspector.getLastEntityContainer()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static <T> T fromString(Class<T> returnType, String... strings) { Class<?> componentType = returnType.getComponentType(); if (componentType != null) { if (strings == null) { return null; } else { int length = strings.length; Object typed = Array.newInstance(componentType, length); for (int i = 0; i < length; i++) { Array.set(typed, i, fromString(componentType, strings[i])); } return (T) typed; } } else { String string = strings == null || strings.length == 0 ? null : strings[0]; if (String.class == returnType) { return (T) string; } else if (string == null && !returnType.isPrimitive()) { return null; } else if (boolean.class == returnType || Boolean.class.isAssignableFrom(returnType)) { return (T) Boolean.valueOf(string); } else if (byte.class == returnType || Byte.class.isAssignableFrom(returnType)) { return (T) Byte.valueOf(string); } else if (short.class == returnType || Short.class.isAssignableFrom(returnType)) { return (T) Short.valueOf(string); } else if (int.class == returnType || Integer.class.isAssignableFrom(returnType)) { return (T) Integer.valueOf(string); } else if (long.class == returnType || Long.class.isAssignableFrom(returnType)) { return (T) Long.valueOf(string); } else if (float.class == returnType || Float.class.isAssignableFrom(returnType)) { return (T) Float.valueOf(string); } else if (double.class == returnType || Double.class.isAssignableFrom(returnType)) { return (T) Double.valueOf(string); } else if (char.class == returnType || Character.class.isAssignableFrom(returnType)) { if (string.length() == 1) { return (T) Character.valueOf(string.charAt(0)); } } else if (Date.class.isAssignableFrom(returnType)) { return (T) DateUtils.fromString(string); } throw new IllegalArgumentException(String.format( \"Cannot convert [%s] string to [%s] type!\", string, returnType.getName() )); } }### Assistant: @Test (expected=IllegalArgumentException.class) public void fromString_other() { class MyClass {} StringUtils.fromString(MyClass.class, \"c\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void accept(IAstVisitor visitor) { visitor.visitIntConstantExpr(this); }### Assistant: @Test public void accept() throws Exception { new StandardVisitor() { @Override public void visitIntConstantExpr(IntConstantExpr intConstantExpr) { super.visitIntConstantExpr(intConstantExpr); assertEquals(\"42\", intConstantExpr.getValue()); } }.visit(new IntConstantExpr(\"42\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isExpired() { return now().getTime() - receivedAt.getTime() > DAYS.toMillis(10); }### Assistant: @Test public void testNewAuthTokenExpiration() { AuthToken token = new AuthToken(\"token_value\"); assert !token.isExpired(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Set<String> doUpdateForClusterCreate() throws ConfigurationTopologyException { Set<String> configTypesUpdated = new HashSet<String>(); Configuration clusterConfig = clusterTopology.getConfiguration(); Map<String, HostGroupInfo> groupInfoMap = clusterTopology.getHostGroupInfo(); doRecommendConfigurations(clusterConfig, configTypesUpdated); doFilterPriorToClusterUpdate(clusterConfig, configTypesUpdated); Map<String, Map<String, String>> clusterProps = clusterConfig.getFullProperties(); for (Map<String, Map<String, PropertyUpdater>> updaterMap : createCollectionOfUpdaters()) { for (Map.Entry<String, Map<String, PropertyUpdater>> entry : updaterMap.entrySet()) { String type = entry.getKey(); for (Map.Entry<String, PropertyUpdater> updaterEntry : entry.getValue().entrySet()) { String propertyName = updaterEntry.getKey(); PropertyUpdater updater = updaterEntry.getValue(); Map<String, String> typeMap = clusterProps.get(type); if (typeMap != null && typeMap.containsKey(propertyName) && typeMap.get(propertyName) != null) { final String originalValue = typeMap.get(propertyName); final String updatedValue = updater.updateForClusterCreate(propertyName, originalValue, clusterProps, clusterTopology); if(updatedValue == null ) { continue; } if (!updatedValue.equals(originalValue)) { configTypesUpdated.add(type); } clusterConfig.setProperty(type, propertyName, updatedValue); } for (HostGroupInfo groupInfo : groupInfoMap.values()) { Configuration hgConfig = groupInfo.getConfiguration(); Map<String, Map<String, String>> hgConfigProps = hgConfig.getFullProperties(1); Map<String, String> hgTypeMap = hgConfigProps.get(type); if (hgTypeMap != null && hgTypeMap.containsKey(propertyName)) { final String originalValue = hgTypeMap.get(propertyName); final String updatedValue = updater.updateForClusterCreate(propertyName, originalValue, hgConfigProps, clusterTopology); if (!updatedValue.equals(originalValue)) { configTypesUpdated.add(type); } hgConfig.setProperty(type, propertyName, updatedValue); } } } } } if (clusterTopology.isNameNodeHAEnabled()) { Map<String, String> hdfsSiteConfig = clusterConfig.getFullProperties().get(\"hdfs-site\"); String nameservices = hdfsSiteConfig.get(\"dfs.nameservices\"); String int_nameservices = hdfsSiteConfig.get(\"dfs.internal.nameservices\"); if(int_nameservices == null && nameservices != null) { clusterConfig.setProperty(\"hdfs-site\", \"dfs.internal.nameservices\", nameservices); } if (! isNameNodeHAInitialActiveNodeSet(clusterProps) && ! isNameNodeHAInitialStandbyNodeSet(clusterProps)) { Collection<String> nnHosts = clusterTopology.getHostAssignmentsForComponent(\"NAMENODE\"); if (nnHosts.size() != 2) { throw new ConfigurationTopologyException(\"NAMENODE HA requires exactly 2 hosts running NAMENODE but there are: \" + nnHosts.size() + \" Hosts: \" + nnHosts); } Iterator<String> nnHostIterator = nnHosts.iterator(); clusterConfig.setProperty(\"hadoop-env\", \"dfs_ha_initial_namenode_active\", nnHostIterator.next()); clusterConfig.setProperty(\"hadoop-env\", \"dfs_ha_initial_namenode_standby\", nnHostIterator.next()); configTypesUpdated.add(\"hadoop-env\"); } } setMissingConfigurations(clusterConfig, configTypesUpdated); trimProperties(clusterConfig, clusterTopology); return configTypesUpdated; }### Assistant: @Test public void testHiveConfigClusterUpdateExportedHostGroupValue() throws Exception { final String expectedHostGroupName = \"host_group_1\"; final String expectedHostName = \"c6401.ambari.apache.org\"; final String expectedPropertyValue = \"hive.metastore.local=false,hive.metastore.uris=thrift: Map<String, Map<String, String>> properties = new HashMap<String, Map<String, String>>(); Map<String, String> webHCatSiteProperties = new HashMap<String, String>(); properties.put(\"webhcat-site\", webHCatSiteProperties); webHCatSiteProperties.put(\"templeton.hive.properties\", expectedPropertyValue); Configuration clusterConfig = new Configuration(properties, Collections.<String, Map<String, Map<String, String>>>emptyMap()); Collection<String> hgComponents = new HashSet<String>(); hgComponents.add(\"HIVE_METASTORE\"); List<String> hosts = new ArrayList<String>(); hosts.add(expectedHostName); TestHostGroup group1 = new TestHostGroup(expectedHostGroupName, hgComponents, hosts); Collection<TestHostGroup> hostGroups = new HashSet<TestHostGroup>(); hostGroups.add(group1); ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups); BlueprintConfigurationProcessor updater = new BlueprintConfigurationProcessor(topology); updater.doUpdateForClusterCreate(); assertEquals(\"Unexpected config update for templeton.hive.properties\", \"hive.metastore.local=false,hive.metastore.uris=thrift: webHCatSiteProperties.get(\"templeton.hive.properties\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException { ByteArrayOutputStream os = new ByteArrayOutputStream(); IOUtils.copy(stream, os); String name = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY); if (name == null) { name = \"\"; } try { NetcdfFile ncFile = NetcdfFile.openInMemory(name, os.toByteArray()); unravelStringMet(ncFile, null, metadata); } catch (IOException e) { throw new TikaException(\"HDF parse error\", e); } XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata); xhtml.startDocument(); xhtml.endDocument(); }### Assistant: @Test public void testParseGlobalMetadata() throws Exception { if(System.getProperty(\"java.version\").startsWith(\"1.5\")) { return; } Parser parser = new HDFParser(); ContentHandler handler = new BodyContentHandler(); Metadata metadata = new Metadata(); try (InputStream stream = HDFParser.class.getResourceAsStream(\"/test-documents/test.he5\")) { parser.parse(stream, handler, metadata, new ParseContext()); } assertNotNull(metadata); assertEquals(\"5\", metadata.get(\"GranuleMonth\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Before(\"serviceMethods()\") public void checkPermission(JoinPoint joinPoint) { MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature(); Method method = methodSignature.getMethod(); List<NamespacePermission> namespacePermissions = new ArrayList<>(); if (method.isAnnotationPresent(NamespacePermissions.class)) { namespacePermissions.addAll(Arrays.asList(method.getAnnotation(NamespacePermissions.class).value())); } else if (method.isAnnotationPresent(NamespacePermission.class)) { namespacePermissions.add(method.getAnnotation(NamespacePermission.class)); } if (!namespacePermissions.isEmpty()) { String[] parameterNames = methodSignature.getParameterNames(); Object[] args = joinPoint.getArgs(); Map<String, Object> variables = new HashMap<>(); for (int i = 0; i < parameterNames.length; i++) { variables.put(parameterNames[i], args[i]); } List<AccessDeniedException> accessDeniedExceptions = new ArrayList<>(); for (NamespacePermission namespacePermission : namespacePermissions) { for (String field : namespacePermission.fields()) { try { namespaceSecurityHelper.checkPermission(spelExpressionHelper.evaluate(field, Object.class, variables), namespacePermission .permissions()); } catch (AccessDeniedException accessDeniedException) { accessDeniedExceptions.add(accessDeniedException); } } } if (!accessDeniedExceptions.isEmpty()) { throw namespaceSecurityHelper.getAccessDeniedException(accessDeniedExceptions); } } }### Assistant: @Test public void checkPermissionAssertNoExceptionWhenMultipleAnnotationsAndAllPermissionsValid() throws Exception { JoinPoint joinPoint = mock(JoinPoint.class); MethodSignature methodSignature = mock(MethodSignature.class); Method method = NamespaceSecurityAdviceTest.class.getDeclaredMethod(\"mockMethodMultipleAnnotations\", String.class, String.class); when(methodSignature.getParameterNames()).thenReturn(new String[] {\"namespace1\", \"namespace2\"}); when(methodSignature.getMethod()).thenReturn(method); when(joinPoint.getSignature()).thenReturn(methodSignature); when(joinPoint.getArgs()).thenReturn(new Object[] {\"foo\", \"bar\"}); String userId = \"userId\"; ApplicationUser applicationUser = new ApplicationUser(getClass()); applicationUser.setUserId(userId); applicationUser.setNamespaceAuthorizations(new HashSet<>()); applicationUser.getNamespaceAuthorizations().add(new NamespaceAuthorization(\"foo\", Arrays.asList(NamespacePermissionEnum.READ))); applicationUser.getNamespaceAuthorizations().add(new NamespaceAuthorization(\"bar\", Arrays.asList(NamespacePermissionEnum.WRITE))); SecurityContextHolder.getContext().setAuthentication( new TestingAuthenticationToken(new SecurityUserWrapper(userId, \"\", false, false, false, false, Arrays.asList(), applicationUser), null)); try { namespaceSecurityAdvice.checkPermission(joinPoint); } catch (AccessDeniedException e) { fail(); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Transactional(readOnly = true) public Middleware find(Long apiId, Long middlewareId) { Middleware middleware = middlewareRepository.findByApiIdAndId(apiId, middlewareId); HeimdallException.checkThrow(middleware == null, GLOBAL_RESOURCE_NOT_FOUND); return middleware; }### Assistant: @Test public void findTest() { Mockito.when(middlewareRepository.findByApiIdAndId(Mockito.anyLong(), Mockito.anyLong())).thenReturn(m1); Middleware middleware = service.find(1L, 1L); assertEquals(m1, middleware); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static public boolean isPowerOfTwo(int value) { return value != 0 && (value & value - 1) == 0; }### Assistant: @Test public void testIsPowerOfTwo() { Assert.assertFalse(MathUtil.isPowerOfTwo(3)); Assert.assertTrue(MathUtil.isPowerOfTwo(2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean contains(String id) { return (id != null) && super.contains(id); }### Assistant: @Test public void testSetUp() throws Exception { HttpClient httpClient = new StdHttpClient.Builder().url(COUCH_DB_URL).build(); CouchDbInstance dbInstance = new StdCouchDbInstance(httpClient); CouchDbConnector db = new StdCouchDbConnector(COUCH_DB_DATABASE, dbInstance, factory); assertTrue(db.contains(id)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Profile generate(Profile dirty){ String name = StringUtils.trimToEmpty(dirty.getName()); String email = StringUtils.trimToEmpty(dirty.getEmail()); Profile profile = new Profile(); profile.setUsername(dirty.getUsername()); profile.setEmail(email); profile.setSourceId(dirty.getSourceId()); Pattern p = Pattern.compile(\"([\\\\p{L}\\\\w\\\\?-]+) *([\\\\p{L}\\\\w\\\\?\\\\.\\\\d=\\\\\\\\ -]+)?\"); Matcher matcher = p.matcher(name); logger.trace(\"Profile generate() {} \",name,email); if(matcher.matches()){ logger.trace(\"Profile generate() ************* MATCHES ***************\"); profile.setName(matcher.group(1)); profile.setLastname(matcher.group(2)); }else{ logger.trace(\"Profile generate() ---------------- NOT MATCHED\"); profile.setName(null); profile.setLastname(null); } if(StringUtils.trimToEmpty(profile.getName()).toLowerCase().equals(\"none\")){ profile.setName(null); } if(StringUtils.trimToEmpty(profile.getLastname()).toLowerCase().equals(\"none\")){ profile.setLastname(null); } if(StringUtils.trimToEmpty(profile.getUsername()).toLowerCase().equals(\"none\")){ profile.setUsername(null); } if(StringUtils.trimToEmpty(profile.getEmail()).toLowerCase().equals(\"none\")){ profile.setEmail(null); } logger.trace(\"Profile generate() Returning {} \",profile); return profile; }### Assistant: @Test public void testNone(){ Profile p = new Profile(); p.setName(\"None\"); p.setLastname(\"None\"); p.setUsername(\"None\"); p.setEmail(\"None\"); p.setSource(\"None\"); p.setSourceId(\"None\"); Profile generate = service.generate(p); Assert.assertNull(generate.getName()); Assert.assertNull(generate.getLastname()); Assert.assertNull(generate.getUsername()); Assert.assertNull(generate.getEmail()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Path saveAndRename(final Path path, final String newFileName, final Metadata metadata, final String content, final String comment) { return saveAndRenameService.saveAndRename(path, newFileName, metadata, content, comment); }### Assistant: @Test public void testSaveAndRename() throws Exception { final Path path = mock(Path.class); final String newFileName = \"newFileName\"; final Metadata metadata = mock(Metadata.class); final String content = \"content\"; final String comment = \"comment\"; enumService.saveAndRename(path, newFileName, metadata, content, comment); verify(saveAndRenameService).saveAndRename(path, newFileName, metadata, content, comment); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void toggleRowExpansion(boolean toExpand) { CollectionEditorUtils.toggleRowExpansion(faAngleRight, toExpand); }### Assistant: @Test public void toggleRowExpansion() { commonToggleRowExpansion(true); commonToggleRowExpansion(false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Map<String,String> queryToMap(String query, Method m) { Map<String,String> out = new HashMap<String,String>(); if (query == null) return out; String[] pairs = query.split(\"&\"); if (pairs.length == 1 && pairs[0].indexOf(\"=\") < 0) { if (m == Method.GET) { out.put(pairs[0], \"\"); } else { out.put(\"\", pairs[0]); } } else { for (String pair : pairs) { String[] av = pair.split(\"=\"); String att = av[0]; String val; if (av.length > 1) val = av[1]; else val = \"\"; out.put(att, val); } } return out; }### Assistant: @Test public void testArguments3() { Map<String,String> args = ParseCommonLog.queryToMap(\"abc=def\", HttpRequest.Method.GET); assertEquals(1, args.size()); assertEquals(\"def\", args.get(\"abc\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean contains(@Nullable final AuthorizationContextType authorizationContextType) { if (null != authorizationContextType) { for (final AuthorizationContextType dittoAuthorizationContextType : values()) { if (dittoAuthorizationContextType.equals(authorizationContextType)) { return true; } } } return false; }### Assistant: @Test public void doesNotContainGivenLabel() { final AuthorizationContextType authorizationContextType = ImmutableAuthorizationContextType.of(\"abc\"); assertThat(DittoAuthorizationContextType.contains(authorizationContextType)).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public int addType(final Object label) { checkType(label); short id = labelMap.getShort(label); if (id == NULL_SHORT) { if (!garbageQueue.isEmpty()) { id = garbageQueue.firstShort(); garbageQueue.remove(id); } else { id = intToShort(length); if (length >= MAX_SIZE) { throw new RuntimeException(\"Maximum number of edge types reached at \" + MAX_SIZE); } length++; } labelMap.put(label, id); idMap.put(id, label); } return shortToInt(id); }### Assistant: @Test public void testAddType() { EdgeTypeStore edgeTypeStore = new EdgeTypeStore(); int type = edgeTypeStore.addType(\"0\"); Assert.assertEquals(type, 1); Assert.assertTrue(edgeTypeStore.contains(\"0\")); type = edgeTypeStore.addType(\"0\"); Assert.assertEquals(type, 1); Assert.assertTrue(edgeTypeStore.contains(\"0\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static List<RemoveUnusedParameterReductionOpportunity> findOpportunities( ShaderJob shaderJob, ReducerContext context) { return shaderJob.getShaders() .stream() .map(item -> findOpportunitiesForShader(item, context)) .reduce(Arrays.asList(), ListConcat::concatenate); }### Assistant: @Test public void testRemoveParam2() throws Exception { final String shader = \"float foo(int a);\" + \"float foo(int a) {\" + \" return 0.0;\" + \"}\" + \"void main() {\" + \" foo(2.0);\" + \"}\"; final String expectedResult = \"float foo();\" + \"float foo() {\" + \" return 0.0;\" + \"}\" + \"void main() {\" + \" foo();\" + \"}\"; final TranslationUnit tu = ParseHelper.parse(shader); List<RemoveUnusedParameterReductionOpportunity> opportunities = findOpportunities(tu, true); assertEquals(1, opportunities.size()); opportunities.get(0).applyReduction(); CompareAsts.assertEqualAsts(expectedResult, tu); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void afterTaskClaimedEvent(TaskEvent event) { String userId = event.getTaskContext().getUserId(); Task ti = event.getTask(); TaskEventImpl taskEvent = new TaskEventImpl(ti.getId(), org.kie.internal.task.api.model.TaskEvent.TaskEventType.CLAIMED, ti.getTaskData().getProcessInstanceId(), ti.getTaskData().getWorkItemId(), userId); AuditTaskImpl auditTaskImpl = createAuditTask(ti, event.getEventDate()); auditTaskImpl.setStatus(ti.getTaskData().getStatus().name()); auditTaskImpl.setActualOwner(getActualOwner(ti)); auditTaskImpl.setDescription(ti.getDescription()); auditTaskImpl.setLastModificationDate(event.getEventDate()); sendMessage(new AuditTaskData(auditTaskImpl, taskEvent), 8); }### Assistant: @Test public void testAfterTaskClaimed() throws JMSException { logProducer.afterTaskClaimedEvent(event); assertMessage(\"<type>CLAIMED</type>\", 8); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int intValue() { return value != null ? value.intValue() : 0; }### Assistant: @Test() public void testIntValue() { assertTrue(d1.intValue() == h1.intValue()); assertTrue(d2.intValue() == h2.intValue()); assertEquals(0, h3.intValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getHeaderField(int index) { assert index >= 0 : AssertMessages.positiveOrZeroParameter(); try { connect(); } catch (IOException e) { throw new IllegalStateException(e); } switch (index) { case 0: return this.contentType; case 1: return Long.toString(this.file.length()); case 2: return Long.toString(this.file.lastModified()); default: } return null; }### Assistant: @Test public void getHeaderFieldString() { assertEquals(\"text/plain\", this.connection.getHeaderField(\"content-type\")); assertEquals(\"25\", this.connection.getHeaderField(\"content-length\")); assertNotNull(this.connection.getHeaderField(\"last-modified\")); assertNull(this.connection.getHeaderField(\"expires\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isIsolatedQueue(String queue) { return StringUtils.isNotBlank(getIsolationGroup(queue)); }### Assistant: @Test public void notIsolatedIfSeparatorNotPresent() { String notIsolatedQueue = \"notIsolated\"; Assert.assertFalse( QueueUtils.isIsolatedQueue(notIsolatedQueue)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void compress() { checkUncompressed(\"compress is only allowed once\"); List<HelpNode> nodesInOrder = createNodesInOrder(); selectZeroCache = new int[nodeCount + 1]; int position = 2; int zeroesWritten = 1; selectZeroCache[1] = 1; for (HelpNode node : nodesInOrder) { position+=node.children.size(); zeroesWritten++; selectZeroCache[zeroesWritten] = position; position++; } root = null; compressed = true; }### Assistant: @Test public void serializationTest() throws JsonParseException, JsonMappingException, JsonProcessingException, IOException, JSONException { SuccinctTrie dict = new SuccinctTrie(); DirectDictionary direct = new DirectDictionary(dict); dict.setDataset(new DatasetId(\"test\")); dict.setName(\"testDict\"); data().forEach(direct::put); dict.compress(); SerializationTestUtil .forType(Dictionary.class) .test(dict); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected abstract void validatePaths(DistCpOptions options) throws IOException, InvalidInputException;### Assistant: @Test public void testMultipleSrcToFile() { FileSystem fs = null; try { fs = FileSystem.get(getConf()); List<Path> srcPaths = new ArrayList<Path>(); srcPaths.add(new Path(\"/tmp/in/1\")); srcPaths.add(new Path(\"/tmp/in/2\")); Path target = new Path(\"/tmp/out/1\"); TestDistCpUtils.createFile(fs, \"/tmp/in/1\"); TestDistCpUtils.createFile(fs, \"/tmp/in/2\"); fs.mkdirs(target); DistCpOptions options = new DistCpOptions(srcPaths, target); validatePaths(options); TestDistCpUtils.delete(fs, \"/tmp\"); target = new Path(\"/tmp/out/1\"); fs.create(target).close(); options = new DistCpOptions(srcPaths, target); try { validatePaths(options); Assert.fail(\"Invalid inputs accepted\"); } catch (InvalidInputException ignore) { } TestDistCpUtils.delete(fs, \"/tmp\"); srcPaths.clear(); srcPaths.add(new Path(\"/tmp/in/1\")); fs.mkdirs(new Path(\"/tmp/in/1\")); target = new Path(\"/tmp/out/1\"); fs.create(target).close(); options = new DistCpOptions(srcPaths, target); try { validatePaths(options); Assert.fail(\"Invalid inputs accepted\"); } catch (InvalidInputException ignore) { } TestDistCpUtils.delete(fs, \"/tmp\"); } catch (IOException e) { LOG.error(\"Exception encountered \", e); Assert.fail(\"Test input validation failed\"); } finally { TestDistCpUtils.delete(fs, \"/tmp\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"PMD.CompareObjectsWithEquals\") public Object extractObject(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, boolean jsonify) throws AttributeNotFoundException { ValueFaultHandler faultHandler = pConverter.getValueFaultHandler(); String pathPart = pPathParts.isEmpty() ? null : pPathParts.pop(); if (pathPart != null) { Object attributeValue = extractBeanPropertyValue(pValue, pathPart, faultHandler); return pConverter.extractObject(attributeValue, pPathParts, jsonify); } else { if (jsonify) { return exctractJsonifiedValue(pConverter, pValue, pPathParts); } else { return pValue; } } }### Assistant: @Test public void simple() throws AttributeNotFoundException { JSONObject res = (JSONObject) extractJson(this); assertEquals(res.get(\"number\"),10); assertEquals(res.get(\"text\"),\"Test\"); assertFalse((Boolean) res.get(\"flag\")); assertEquals( ((JSONObject) res.get(\"inner\")).get(\"innerText\"),\"innerValue\"); assertNull(res.get(\"nulli\")); assertTrue(!res.containsKey(\"forbiddenStream\")); assertTrue(res.containsKey(\"nulli\")); assertEquals(res.get(\"nacked\"),\"nacked object\"); assertEquals(res.get(\"self\"),\"[this]\"); JSONObject inner = (JSONObject) extractJson(this,\"inner\"); assertEquals(inner.get(\"innerText\"),\"innerValue\"); JSONObject innerWithWildcardPath = (JSONObject) extractJson(this,null,\"innerDate\"); assertEquals(innerWithWildcardPath.size(),1); assertTrue((Long) ((JSONObject) innerWithWildcardPath.get(\"inner\")).get(\"millis\") <= new Date().getTime()); BeanExtractorTest test = (BeanExtractorTest) extractObject(this); assertEquals(test,this); Date date = (Date) extractObject(this,\"inner\",\"innerDate\"); assertTrue(date.getTime() <= new Date().getTime()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public IChemObjectWriter createWriter(IChemFormat format) { if (format != null) { String writerClassName = format.getWriterClassName(); if (writerClassName != null) { try { if (registeredReaders.containsKey(writerClassName)) { Class<IChemObjectWriter> writer = registeredReaders.get(writerClassName); if (writer != null) return writer.newInstance(); } return (IChemObjectWriter) this.getClass().getClassLoader().loadClass(writerClassName) .newInstance(); } catch (ClassNotFoundException exception) { logger.error(\"Could not find this ChemObjectWriter: \", writerClassName); logger.debug(exception); } catch (InstantiationException | IllegalAccessException exception) { logger.error(\"Could not create this ChemObjectWriter: \", writerClassName); logger.debug(exception); } } else { logger.warn(\"ChemFormat is recognized, but no writer is available.\"); } } else { logger.warn(\"ChemFormat is not recognized.\"); } return null; }### Assistant: @Test public void testCreateWriter_IChemFormat() { IChemFormat format = (IChemFormat) XYZFormat.getInstance(); IChemObjectWriter writer = factory.createWriter(format); Assert.assertNotNull(writer); Assert.assertEquals(format.getFormatName(), writer.getFormat().getFormatName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onDecisionTableSelectedEvent(final @Observes DecisionTableSelectedEvent event) { super.onDecisionTableSelectedEvent(event); }### Assistant: @Test public void testOnDecisionTableSelectedEventWithMultipleRowsSelected() { model.getData().add(new ArrayList<DTCellValue52>() {{ add(new DTCellValue52(1)); add(new DTCellValue52(\"descr\")); add(new DTCellValue52(\"md\")); }}); model.getData().add(new ArrayList<DTCellValue52>() {{ add(new DTCellValue52(1)); add(new DTCellValue52(\"descr\")); add(new DTCellValue52(\"md\")); }}); uiModel.selectCells(0, 2, 1, 2); menu.onDecisionTableSelectedEvent(new DecisionTableSelectedEvent(dtPresenter)); verify(view, times(1)).enableCutMenuItem(eq(true)); verify(view, times(1)).enableCopyMenuItem(eq(true)); verify(view, times(1)).enablePasteMenuItem(eq(false)); verify(view, times(1)).enableInsertRowAboveMenuItem(eq(false)); verify(view, times(1)).enableInsertRowBelowMenuItem(eq(false)); verify(view, times(1)).enableDeleteRowMenuItem(eq(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Set<String> addMembers(final @NotNull String... memberIds) throws RepositoryException { throw new ListenerReadOnlyException(); }### Assistant: @Test(expected = ListenerReadOnlyException.class) public void testROAddMembers() throws Exception { Group delegate = mock(Group.class); GroupFacade facade = getFacade(delegate); facade.addMembers(\"\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean overlaps(final Interval<C> that) { return !this.intersect(that).hasNone(); }### Assistant: @Test public void testOverlaps() { assertTrue(a.overlaps(Interval.MAGIC)); assertTrue(Interval.MAGIC.overlaps(a)); assertTrue(a.overlaps(a)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DocumentContext fromYaml(String raw) { Yaml yaml = new Yaml(new SafeConstructor()); Object o = yaml.load(raw); return JsonPath.parse(o); }### Assistant: @Test public void testParsingYaml() { String yaml = \"hello: 25\"; DocumentContext doc = JsonUtils.fromYaml(yaml); assertEquals(\"{\\\"hello\\\":25}\", doc.jsonString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void parseProperties(Properties zkProp) throws IOException, ConfigException { int clientPort = 0; int secureClientPort = 0; String clientPortAddress = null; String secureClientPortAddress = null; VerifyingFileFactory vff = new VerifyingFileFactory.Builder(LOG).warnForRelativePath().build(); for (Entry<Object, Object> entry : zkProp.entrySet()) { String key = entry.getKey().toString().trim(); String value = entry.getValue().toString().trim(); if (key.equals(\"dataDir\")) { dataDir = vff.create(value); } else if (key.equals(\"dataLogDir\")) { dataLogDir = vff.create(value); } else if (key.equals(\"clientPort\")) { clientPort = Integer.parseInt(value); } else if (key.equals(\"localSessionsEnabled\")) { localSessionsEnabled = Boolean.parseBoolean(value); } else if (key.equals(\"localSessionsUpgradingEnabled\")) { localSessionsUpgradingEnabled = Boolean.parseBoolean(value); } else if (key.equals(\"clientPortAddress\")) { clientPortAddress = value.trim(); } else if (key.equals(\"secureClientPort\")) { secureClientPort = Integer.parseInt(value); } else if (key.equals(\"secureClientPortAddress\")){ secureClientPortAddress = value.trim(); } else if (key.equals(\"tickTime\")) { tickTime = Integer.parseInt(value); } else if (key.equals(\"maxClientCnxns\")) { maxClientCnxns = Integer.parseInt(value); } else if (key.equals(\"minSessionTimeout\")) { minSessionTimeout = Integer.parseInt(value); } else if (key.equals(\"maxSessionTimeout\")) { maxSessionTimeout = Integer.parseInt(value); } else if (key.equals(\"initLimit\")) { initLimit = Integer.parseInt(value); } else if (key.equals(\"syncLimit\")) { syncLimit = Integer.parseInt(value); } else if (key.equals(\"electionAlg\")) { electionAlg = Integer.parseInt(value); } else if (key.equals(\"quorumListenOnAllIPs\")) { quorumListenOnAllIPs = Boolean.parseBoolean(value); } else if (key.equals(\"peerType\")) { if (value.toLowerCase().equals(\"observer\")) { peerType = LearnerType.OBSERVER; } else if (value.toLowerCase().equals(\"participant\")) { peerType = LearnerType.PARTICIPANT; } else { throw new ConfigException(\"Unrecognised peertype: \" + value); } } else if (key.equals( \"syncEnabled\" )) { syncEnabled = Boolean.parseBoolean(value); } else if (key.equals(\"dynamicConfigFile\")){ dynamicConfigFileStr = value; } else if (key.equals(\"autopurge.snapRetainCount\")) { snapRetainCount = Integer.parseInt(value); } else if (key.equals(\"autopurge.purgeInterval\")) { purgeInterval = Integer.parseInt(value); } else if (key.equals(\"standaloneEnabled\")) { if (value.toLowerCase().equals(\"true\")) { setStandaloneEnabled(true); } else if (value.toLowerCase().equals(\"false\")) { setStandaloneEnabled(false); } else { throw new ConfigException(\"Invalid option \" + value + \" for standalone mode. Choose 'true' or 'false.'\"); } } else if (key.equals(\"reconfigEnabled\")) { if (value.toLowerCase().equals(\"true\")) { setReconfigEnabled(true); } else if (value.toLowerCase().equals(\"false\")) { setReconfigEnabled(false); } else { throw new ConfigException(\"Invalid option \" + value + \" for reconfigEnabled flag. Choose 'true' or 'false.'\"); } } else if (key.equals(\"sslQuorum\")){ sslQuorum = Boolean.parseBoolean(value); } else if (key.equals(\"portUnification\")){ shouldUsePortUnification = Boolean.parseBoolean(value); } else if (key.equals(\"sslQuorumReloadCertFiles\")) { sslQuorumReloadCertFiles = Boolean.parseBoolean(value); } else if ((key.startsWith(\"server.\") || key.startsWith(\"group\") || key.startsWith(\"weight\")) && zkProp.containsKey(\"dynamicConfigFile\")) { throw new ConfigException(\"parameter: \" + key + \" must be in a separate dynamic config file\"); } else if (key.equals(QuorumAuth.QUORUM_SASL_AUTH_ENABLED)) { quorumEnableSasl = Boolean.parseBoolean(value); } else if (key.equals(QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED)) { quorumServerRequireSasl = Boolean.parseBoolean(value); } else if (key.equals(QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED)) { quorumLearnerRequireSasl = Boolean.parseBoolean(value); } else if (key.equals(QuorumAuth.QUORUM_LEARNER_SASL_LOGIN_CONTEXT)) { quorumLearnerLoginContext = value; } else if (key.equals(QuorumAuth.QUORUM_SERVER_SASL_LOGIN_CONTEXT)) { quorumServerLoginContext = value; } else if (key.equals(QuorumAuth.QUORUM_KERBEROS_SERVICE_PRINCIPAL)) { quorumServicePrincipal = value; } else if (key.equals(\"quorum.cnxn.threads.size\")) { quorumCnxnThreadsSize = Integer.parseInt(value); } else { System.setProperty(\"zookeeper.\" + key, value); } } if (!quorumEnableSasl && quorumServerRequireSasl) { throw new IllegalArgumentException( QuorumAuth.QUORUM_SASL_AUTH_ENABLED + \" is disabled, so cannot enable \" + QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED); } if (!quorumEnableSasl && quorumLearnerRequireSasl) { throw new IllegalArgumentException( QuorumAuth.QUORUM_SASL_AUTH_ENABLED + \" is disabled, so cannot enable \" + QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED); } if (!quorumLearnerRequireSasl && quorumServerRequireSasl) { throw new IllegalArgumentException( QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED + \" is disabled, so cannot enable \" + QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED); } if (snapRetainCount < MIN_SNAP_RETAIN_COUNT) { LOG.warn(\"Invalid autopurge.snapRetainCount: \" + snapRetainCount + \". Defaulting to \" + MIN_SNAP_RETAIN_COUNT); snapRetainCount = MIN_SNAP_RETAIN_COUNT; } if (dataDir == null) { throw new IllegalArgumentException(\"dataDir is not set\"); } if (dataLogDir == null) { dataLogDir = dataDir; } if (clientPort == 0) { LOG.info(\"clientPort is not set\"); if (clientPortAddress != null) { throw new IllegalArgumentException(\"clientPortAddress is set but clientPort is not set\"); } } else if (clientPortAddress != null) { this.clientPortAddress = new InetSocketAddress( InetAddress.getByName(clientPortAddress), clientPort); LOG.info(\"clientPortAddress is {}\", this.clientPortAddress.toString()); } else { this.clientPortAddress = new InetSocketAddress(clientPort); LOG.info(\"clientPortAddress is {}\", this.clientPortAddress.toString()); } if (secureClientPort == 0) { LOG.info(\"secureClientPort is not set\"); if (secureClientPortAddress != null) { throw new IllegalArgumentException(\"secureClientPortAddress is set but secureClientPort is not set\"); } } else if (secureClientPortAddress != null) { this.secureClientPortAddress = new InetSocketAddress( InetAddress.getByName(secureClientPortAddress), secureClientPort); LOG.info(\"secureClientPortAddress is {}\", this.secureClientPortAddress.toString()); } else { this.secureClientPortAddress = new InetSocketAddress(secureClientPort); LOG.info(\"secureClientPortAddress is {}\", this.secureClientPortAddress.toString()); } if (this.secureClientPortAddress != null) { configureSSLAuth(); } if (tickTime == 0) { throw new IllegalArgumentException(\"tickTime is not set\"); } minSessionTimeout = minSessionTimeout == -1 ? tickTime * 2 : minSessionTimeout; maxSessionTimeout = maxSessionTimeout == -1 ? tickTime * 20 : maxSessionTimeout; if (minSessionTimeout > maxSessionTimeout) { throw new IllegalArgumentException( \"minSessionTimeout must not be larger than maxSessionTimeout\"); } if (dynamicConfigFileStr == null) { setupQuorumPeerConfig(zkProp, true); if (isDistributed() && isReconfigEnabled()) { backupOldConfig(); } } }### Assistant: @Test public void testErrorMessageWhensecureClientPortNotSetButsecureClientPortAddressSet() throws IOException, ConfigException { QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig(); try { Properties zkProp = getDefaultZKProperties(); zkProp.setProperty(\"secureClientPortAddress\", \"localhost\"); quorumPeerConfig.parseProperties(zkProp); fail(\"IllegalArgumentException is expected\"); } catch (IllegalArgumentException e) { String expectedMessage = \"secureClientPortAddress is set but secureClientPort is not set\"; assertEquals(expectedMessage, e.getMessage()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Observable<Server> searchServer() { return serverSearchManager.searchServer().map(serverEntityDataMapper::transform); }### Assistant: @Test public void shouldNotReturnAnyServerForACertainNetworkAddress() throws Exception { NetworkAddress networkAddress = NetworkAddress.builder() .ip(\"192.168.1.435\") .port(9998) .build(); NetworkAddressEntity networkAddressEntity = NetworkAddressEntity.builder() .ip(\"192.168.1.435\") .port(9998) .build(); when(mockNetworkAddressEntityDataMapper.transformInverse(networkAddress)).thenReturn( networkAddressEntity); when(mockServerSearchManager.searchServer(networkAddressEntity)).thenReturn(Observable.never()); Observable<Server> serverObservable = networkActionProvider.searchServer(networkAddress); TestObserver<Server> testObserver = serverObservable.test(); testObserver.assertEmpty(); testObserver.assertNotComplete(); verify(mockServerSearchManager, times(1)).searchServer(networkAddressEntity); verifyZeroInteractions(mockServerEntityDataMapper); verifyNoMoreInteractions(mockServerSearchManager); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public <T> BatchJob<T> startJob(BatchProcessor<T> task, T batchSizes, Duration startDelay, Duration interBatchDelay) { BatchJob<T> job = new BatchJob<>(task, batchSizes, interBatchDelay); job.scheduleNextBatch(startDelay); return job; }### Assistant: @Test public void testJobBatchSizeUpdate() { ScheduledFuture<?> future = Mockito.mock(ScheduledFuture.class); AtomicReference<Runnable> runnableToInvoke = new AtomicReference<>(); when(scheduledExecutor.schedule(isA(Runnable.class), anyLong(), any())).then((invoc) -> { runnableToInvoke.set(((Runnable) invoc.getArgument(0))); return future; }); Duration startDelay = Duration.ofMillis(10); Duration interBatchDelay = Duration.ofMillis(5); AtomicReference<BatchJobExecutorService.BatchJob<Integer>> job = new AtomicReference<>(); job.set(batchExecutor.startJob((batchSize) -> { if (batchSize == 42) { job.get().setBatchSizes(10); } else if (batchSize == 10) { return true; } return false; }, 42, startDelay, interBatchDelay)); verify(scheduledExecutor, times(1)).schedule(isA(Runnable.class), eq(startDelay.toNanos()), eq(TimeUnit.NANOSECONDS)); runnableToInvoke.get().run(); verify(scheduledExecutor, times(1)).schedule(isA(Runnable.class), eq(interBatchDelay.toNanos()), eq(TimeUnit.NANOSECONDS)); runnableToInvoke.get().run(); verify(scheduledExecutor, times(2)).schedule(isA(Runnable.class), anyLong(), any()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String getProperty(String fpsKey) { String lvsReturn = \"\"; String lvsKey = \"\"; lvsKey = Parser.ParseMe( fpsKey ); lvsReturn = super.getProperty( lvsKey ); if ( lvsReturn == null ) okw.log.Logger_Sngltn.getInstance().LogWarning( \"Propertykey (parsed) not found: '\" + lvsKey + \"'\" ); else lvsReturn = Parser.ParseMe( lvsReturn ); return lvsReturn; }### Assistant: @Test public final void tc_getProperty_CombindValues() throws IOException { assertEquals( \"Wert 1\", myProperties.getProperty( \"CombineValues.One_Value\" ) ); assertEquals( \"Wert 1; Wert 2\", myProperties.getProperty( \"CombineValues.Two_Values\" ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void start() throws TransactionFailureException { currentTx = txClient.startShort(); for (TransactionAware txAware : txAwares) { try { txAware.startTx(currentTx); } catch (Throwable e) { String message = String.format(\"Unable to start transaction-aware '%s' for transaction %d. \", txAware.getTransactionAwareName(), currentTx.getTransactionId()); LOG.warn(message, e); txClient.abort(currentTx); throw new TransactionFailureException(message, e); } } }### Assistant: @Test public void testStartAndRollbackFailure() throws TransactionFailureException, InterruptedException { ds1.failStartTxOnce = InduceFailure.ThrowException; TransactionContext context = newTransactionContext(ds1, ds2); try { context.start(); Assert.fail(\"start failed - exception should be thrown\"); } catch (TransactionFailureException e) { Assert.assertEquals(\"start failure\", e.getCause().getMessage()); } Assert.assertTrue(ds1.started); Assert.assertFalse(ds2.started); Assert.assertFalse(ds1.checked); Assert.assertFalse(ds2.checked); Assert.assertFalse(ds1.committed); Assert.assertFalse(ds2.committed); Assert.assertFalse(ds1.postCommitted); Assert.assertFalse(ds2.postCommitted); Assert.assertFalse(ds1.rolledBack); Assert.assertFalse(ds2.rolledBack); Assert.assertEquals(txClient.state, DummyTxClient.CommitState.Aborted); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean add(final Node n) { checkNonNullNodeObject(n); NodeImpl node = (NodeImpl) n; if (node.storeId == NodeStore.NULL_ID) { checkIdDoesntExist(n.getId()); incrementVersion(); if (garbageSize > 0) { for (int i = 0; i < blocksCount; i++) { NodeBlock nodeBlock = blocks[i]; if (nodeBlock.hasGarbage()) { nodeBlock.set(node); garbageSize--; dictionary.put(node.getId(), node.storeId); break; } } } else { ensureCapacity(1); currentBlock.add(node); dictionary.put(node.getId(), node.storeId); } if (viewStore != null) { viewStore.addNode(node); } node.indexAttributes(); size++; return true; } else if (isValidIndex(node.storeId) && get(node.storeId) == node) { return false; } else { throw new IllegalArgumentException(\"The node already belongs to another store\"); } }### Assistant: @Test(expectedExceptions = IllegalArgumentException.class) public void testDictionaryDuplicate() { NodeStore nodeStore = new NodeStore(); NodeImpl node = new NodeImpl(\"1\"); nodeStore.add(node); NodeImpl node2 = new NodeImpl(\"1\"); nodeStore.add(node2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public BufferedImage get() { if (image != null) { return image; } InputStream in = null; try { in = getImageStream(); image = ImageIO.read(in); } catch (IOException e) { throw new TestRuntimeException(e); } finally { if (in != null) { try { in.close(); } catch (IOException e) { LOG.error(\"\", e); } } } return image; }### Assistant: @Test public void testGet_image_exists() throws Exception { BufferedImage expected = getImage(); persister.saveScreenshot(metadata, expected); ScreenshotImage image = new PersistedScreenshotImage(persister, metadata); assertThat(image.isImageCached(), is(false)); BufferedImage actual = image.get(); assertThat(ImageUtils.imageEquals(expected, actual), is(true)); assertThat(image.isImageCached(), is(true)); BufferedImage i = image.get(); assertThat(i, is(sameInstance(actual))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void postResponse(BallRequest<?> request, BallResponse<?> response) { request.addMarker(MARKER_POST_RESPONSE); mResponsePoster.execute(new ResponseDeliveryRunnable(request, response, null)); }### Assistant: @Test public void shouldNotDeliverFinalErrorResponseWhenIntermediateIsNotYetDelivered() { VolleyError error = new VolleyError(\"Some error\"); when(mRequest.isIntermediateResponseDelivered()).thenReturn(false); when(mResponse.isIntermediate()).thenReturn(false); when(mResponse.isSuccess()).thenReturn(false); when(mResponse.getError()).thenReturn(error); when(mResponse.getResponseSource()).thenReturn(BallResponse.ResponseSource.NETWORK); mResponseDelivery.postResponse(mRequest, mResponse); verify(mRequest).addMarker(BallExecutorDelivery.MARKER_ERROR_IN_FINAL_RESPONSE_LET_INTERMEDIATE_CONTINUE); verify(mRequest, new LastInteraction()).setFinalResponseError(error); verify(mRequest, never()).deliverError(any(VolleyError.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void updateDetectorTrainingTime(String uuid, long nextRun) { notNull(uuid, \"uuid can't be null\"); MDC.put(\"DetectorUuid\", uuid); Detector detectorToBeUpdated = repository.findByUuid(uuid); TrainingMetaData updatedTrainingTimeMeta = DetectorDataUtil.buildUpdatedRuntimeTrainingMeta( detectorToBeUpdated, nextRun); detectorToBeUpdated.getDetectorConfig().setTrainingMetaData(updatedTrainingTimeMeta); repository.save(detectorToBeUpdated); }### Assistant: @Test public void testUpdateDetectorTrainingTime() { val uuid = this.someUuid.toString(); val timestamp = DateUtil.toUtcDate(\"2020-07-15 20:00:00\").toInstant().toEpochMilli(); serviceUnderTest.updateDetectorTrainingTime(uuid, timestamp); verify(repository, times(1)).findByUuid(someUuid.toString()); verify(repository, times(1)).save(legalParamsDetector); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Date getUTCDate(){ try{ Calendar local=Calendar.getInstance(); int offset = local.getTimeZone().getOffset(local.getTimeInMillis()); GregorianCalendar utc = new GregorianCalendar(gmtTimeZone); utc.setTimeInMillis(local.getTimeInMillis()); utc.add(Calendar.MILLISECOND, -offset); return utc.getTime(); }catch(Exception ex){ return null; } }### Assistant: @Test public void testGetUTCDate(){ Calendar local=Calendar.getInstance(); int offset = local.getTimeZone().getOffset(local.getTimeInMillis()); GregorianCalendar utc = new GregorianCalendar(gmtTimeZone); utc.setTimeInMillis(local.getTimeInMillis()); utc.add(Calendar.MILLISECOND, -offset); Date expectedDate = utc.getTime(); Date actualDate = dateUtil.getUTCDate(); Assert.assertEquals(actualDate.getDate(),expectedDate.getDate()); Assert.assertEquals(actualDate.getMinutes(),expectedDate.getMinutes()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final CreateOfflineUserDataJobResponse createOfflineUserDataJob( String customerId, OfflineUserDataJob job) { CreateOfflineUserDataJobRequest request = CreateOfflineUserDataJobRequest.newBuilder().setCustomerId(customerId).setJob(job).build(); return createOfflineUserDataJob(request); }### Assistant: @Test @SuppressWarnings(\"all\") public void createOfflineUserDataJobTest() { String resourceName = \"resourceName979421212\"; CreateOfflineUserDataJobResponse expectedResponse = CreateOfflineUserDataJobResponse.newBuilder().setResourceName(resourceName).build(); mockOfflineUserDataJobService.addResponse(expectedResponse); String customerId = \"customerId-1772061412\"; OfflineUserDataJob job = OfflineUserDataJob.newBuilder().build(); CreateOfflineUserDataJobResponse actualResponse = client.createOfflineUserDataJob(customerId, job); Assert.assertEquals(expectedResponse, actualResponse); List<AbstractMessage> actualRequests = mockOfflineUserDataJobService.getRequests(); Assert.assertEquals(1, actualRequests.size()); CreateOfflineUserDataJobRequest actualRequest = (CreateOfflineUserDataJobRequest) actualRequests.get(0); Assert.assertEquals(customerId, actualRequest.getCustomerId()); Assert.assertEquals(job, actualRequest.getJob()); Assert.assertTrue( channelProvider.isHeaderSent( ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), GaxGrpcProperties.getDefaultApiClientHeaderPattern())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings({\"PMD.CyclomaticComplexity\", \"checkstyle:ParameterNumber\"}) Object createTrendDetails(final String link, final Run<?, ?> owner, final AnalysisResult result, final Report allIssues, final Report newIssues, final Report outstandingIssues, final Report fixedIssues, final Charset sourceEncoding, final IssuesDetail parent) { StaticAnalysisLabelProvider labelProvider = parent.getLabelProvider(); if (link.contains(LINK_SEPARATOR)) { return createFilteredView(link, owner, result, allIssues, newIssues, outstandingIssues, fixedIssues, sourceEncoding, parent, labelProvider); } else { return createNewDetailView(link, owner, result, allIssues, newIssues, outstandingIssues, fixedIssues, sourceEncoding, parent, labelProvider); } }### Assistant: @Test void shouldReturnIssuesDetailWithOutstandingIssuesWhenCalledWithOutstandingLink() { IssuesDetail details = createTrendDetails(\"outstanding\", RUN, createResult(), ALL_ISSUES, NEW_ISSUES, OUTSTANDING_ISSUES, FIXED_ISSUES, ENCODING, createParent(), IssuesDetail.class); assertThat(details).hasIssues(OUTSTANDING_ISSUES); assertThat(details).hasFixedIssues(NO_ISSUES); assertThat(details).hasNewIssues(NO_ISSUES); assertThat(details).hasOutstandingIssues(OUTSTANDING_ISSUES); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean hasTestMethodKeyword(AstNode astNode) { boolean hasAnnotation = false; List<AstNode> modifiersChildren = astNode.getChildren(MODIFIERS); for (AstNode modifier : modifiersChildren) { for (AstNode modifierChild : modifier.getChildren()) { if ((modifierChild.getTokenOriginalValue().matches(TEST_METHOD_PATTERN))) { hasAnnotation = true; break; } } } return hasAnnotation; }### Assistant: @Test public void testHasTestMethodKeywordEmptyChildrenListOfModifiers() { AstNode parentNode = mock(AstNode.class); List<AstNode> modifiers = new LinkedList<>(); AstNode modifier = mock(AstNode.class); when(modifier.getChildren()).thenReturn(new LinkedList<>()); modifiers.add(modifier); when(parentNode.getChildren()).thenReturn(modifiers); assertFalse(MethodChecksUtils.hasTestMethodKeyword(parentNode)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void makeGraph() { this.container = this.builder.newInstance(IAtomContainer.class); }### Assistant: @Test public void makeGraphTest() { MoleculeFromSignatureBuilder builder = new MoleculeFromSignatureBuilder(SilentChemObjectBuilder.getInstance()); builder.makeGraph(); Assert.assertNotNull(builder.getAtomContainer()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static java.sql.ResultSet getDistinctKeysAndCounts(boolean sortByKeyDescending, final String tableName, final Connection connection){ final String selectSql = String.format(\"SELECT DISTINCT value, COUNT(value) AS valueCount FROM cqtbl_%s GROUP BY (value) %s\", tableName, sortByKeyDescending ? \"ORDER BY value DESC\" : \"\"); Statement statement = null; try{ statement = connection.createStatement(); return statement.executeQuery(selectSql); }catch(Exception e){ DBUtils.closeQuietly(statement); throw new IllegalStateException(\"Unable to look up index entries and counts.\", e); } }### Assistant: @Test public void getDistinctKeysAndCounts(){ Connection connection = null; ResultSet resultSet = null; try { ConnectionManager connectionManager = temporaryFileDatabase.getConnectionManager(true); initWithTestData(connectionManager); connection = connectionManager.getConnection(null, noQueryOptions()); resultSet = DBQueries.getDistinctKeysAndCounts(false, NAME, connection); Map<String, Integer> resultSetToMap = resultSetToMap(resultSet); assertEquals(3, resultSetToMap.size()); assertEquals(new Integer(2), resultSetToMap.get(\"abs\")); assertEquals(new Integer(1), resultSetToMap.get(\"airbags\")); assertEquals(new Integer(1), resultSetToMap.get(\"gps\")); }finally { DBUtils.closeQuietly(resultSet); DBUtils.closeQuietly(connection); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Pure @Override public Iterator<Integer> iterator() { return new IntegerListIterator(); }### Assistant: @Test public void iterator() { Iterator<Integer> i; i = this.list.iterator(); assertTrue(i.hasNext()); assertEquals(Integer.valueOf(1), i.next()); assertTrue(i.hasNext()); assertEquals(Integer.valueOf(2), i.next()); assertTrue(i.hasNext()); assertEquals(Integer.valueOf(3), i.next()); assertTrue(i.hasNext()); assertEquals(Integer.valueOf(10), i.next()); assertTrue(i.hasNext()); assertEquals(Integer.valueOf(20), i.next()); assertTrue(i.hasNext()); assertEquals(Integer.valueOf(21), i.next()); assertTrue(i.hasNext()); assertEquals(Integer.valueOf(22), i.next()); assertTrue(i.hasNext()); assertEquals(Integer.valueOf(23), i.next()); assertTrue(i.hasNext()); assertEquals(Integer.valueOf(24), i.next()); assertTrue(i.hasNext()); assertEquals(Integer.valueOf(25), i.next()); assertFalse(i.hasNext()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void dispatch(GenericContainerRequest request, GenericContainerResponse response) { ApplicationContext context = ApplicationContext.getCurrent(); String requestPath = getRequestPathWithoutMatrixParameters(context); List<String> parameterValues = context.getParameterValues(); ObjectFactory<ResourceDescriptor> resourceFactory = getRootResource(parameterValues, requestPath); if (resourceFactory == null) { LOG.debug(\"Root resource not found for {}\", requestPath); response.setResponse(Response.status(NOT_FOUND) .entity(String.format(\"There is no any resources matched to request path %s\", requestPath)) .type(TEXT_PLAIN) .build()); return; } String newRequestPath = getPathTail(parameterValues); context.addMatchedURI(requestPath.substring(0, requestPath.lastIndexOf(newRequestPath))); context.setParameterNames(resourceFactory.getObjectModel().getUriPattern().getParameterNames()); Object resource = resourceFactory.getInstance(context); dispatch(request, response, context, resourceFactory.getObjectModel(), resource, newRequestPath); }### Assistant: @Test public void returnsResponseWithStatus_NOT_ACCEPTABLE_WhenResourceMethodDoesNotProduceContentAcceptableByCaller() throws Exception { when(applicationContext.getPathSegments(false)).thenReturn(createPathSegments(\"a\", \"b;x=y\")); when(request.getAcceptMediaTypeList()).thenReturn(newArrayList(new AcceptMediaType(TEXT_PLAIN_TYPE))); Resource resource = new Resource(); ResourceMethodDescriptor resourceMethod = mockResourceMethod(Resource.class.getMethod(\"echo\", String.class), \"POST\", newArrayList(WILDCARD_TYPE), newArrayList(TEXT_XML_TYPE, APPLICATION_XML_TYPE)); ObjectFactory resourceFactory = mockResourceFactory(resource, newArrayList(resourceMethod), newArrayList(), newArrayList()); matchRequestPath(); when(resources.getMatchedResource(eq(\"/a/b\"), anyList())).thenReturn(resourceFactory); requestDispatcher.dispatch(request, response); ArgumentCaptor<Response> argumentCaptor = ArgumentCaptor.forClass(Response.class); verify(response).setResponse(argumentCaptor.capture()); assertEquals(NOT_ACCEPTABLE, argumentCaptor.getValue().getStatusInfo()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public T send() throws IOException { return web3jService.send(this, responseType); }### Assistant: @Test public void testEthSendTransaction() throws Exception { web3j.ethSendTransaction(new Transaction( \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\", BigInteger.ONE, Numeric.toBigInt(\"0x9184e72a000\"), Numeric.toBigInt(\"0x76c0\"), \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\", Numeric.toBigInt(\"0x9184e72a\"), \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb\" + \"970870f072445675058bb8eb970870f072445675\")).send(); verifyResult(\"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_sendTransaction\\\",\\\"params\\\":[{\\\"from\\\":\\\"0xb60e8dd61c5d32be8058bb8eb970870f07233155\\\",\\\"to\\\":\\\"0xb60e8dd61c5d32be8058bb8eb970870f07233155\\\",\\\"gas\\\":\\\"0x76c0\\\",\\\"gasPrice\\\":\\\"0x9184e72a000\\\",\\\"value\\\":\\\"0x9184e72a\\\",\\\"data\\\":\\\"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\\\",\\\"nonce\\\":\\\"0x1\\\"}],\\\"id\\\":1}\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public GrammarType identify(final GrammarDocument grammar) { if (grammar == null) { if (LOGGER.isDebugEnabled()) { LOGGER.debug(\"grammar is null or empty\"); } return null; } if (!grammar.isAscii()) { if (LOGGER.isDebugEnabled()) { LOGGER.debug(\"can only handle ascii grammars\"); } return null; } final String document = grammar.getTextContent(); if (document.startsWith(JSGF_HEDAER)) { return GrammarType.JSGF; } final StringTokenizer tok = new StringTokenizer(document, \";\"); if (!tok.hasMoreTokens()) { return null; } final String header = tok.nextToken(); if (header.startsWith(JSGF_HEDAER)) { return GrammarType.JSGF; } return null; }### Assistant: @Test public void testIdentifyGrammarNode() throws Exception { final String cr = System.getProperty(\"line.separator\"); final VoiceXmlDocument document = new VoiceXmlDocument(); final Vxml vxml = document.getVxml(); final Form form = vxml.appendChild(Form.class); final Grammar grammar = form.appendChild(Grammar.class); grammar.setType(GrammarType.JSGF); final StringBuilder str = new StringBuilder(); str.append(\"#JSGF V1.0;\"); str.append(cr); str.append(\"grammar jvoicexml;\"); str.append(cr); str.append(\"public <boolean> = yes{true}|no{false};\"); grammar.addCData(str.toString()); final GrammarDocument grammarDocument = new InternalGrammarDocument(grammar); final GrammarType type = identifier.identify(grammarDocument); Assert.assertEquals(GrammarType.JSGF, type); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Time fromNano(long nano) { return new Time(nano); }### Assistant: @Test public void testFromNano() { Time t = Time.fromNano(10200000000l); assertEquals(10, t.secs); assertEquals(200000000, t.nsecs); assertEquals(10, t.getSecs()); assertEquals(200000000, t.getNsecs()); assertFalse(t.isZero()); assertEquals(10.2, t.toSec(), 0); assertEquals(10200000000l, t.toNSec()); assertEquals(\"{\\\"secs\\\":10,\\\"nsecs\\\":200000000}\", t.toString()); assertEquals(2, t.toJsonObject().size()); assertEquals(10, t.toJsonObject().getInt(TimeBase.FIELD_SECS)); assertEquals(200000000, t.toJsonObject().getInt(TimeBase.FIELD_NSECS)); assertEquals(Time.TYPE, t.getPrimitiveType()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final ChannelHandlerContext firstContext() { AbstractChannelHandlerContext first = head.next; if (first == tail) { return null; } return head.next; }### Assistant: @Test public void testFirstContextEmptyPipeline() throws Exception { ChannelPipeline pipeline = new LocalChannel().pipeline(); assertNull(pipeline.firstContext()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ServiceModel parseServiceClass(Class<?> mainServiceClass, TypescriptServiceGeneratorConfiguration settings, Class<?>... serviceClassesToMerge) { List<Class<?>> serviceClazzes = Lists.newArrayList(mainServiceClass); serviceClazzes.addAll(Lists.newArrayList(serviceClassesToMerge)); ImmutableServiceModel.Builder serviceModel = ImmutableServiceModel.builder(); serviceModel.name(mainServiceClass.getSimpleName()); for (Class<?> serviceClass : serviceClazzes) { ImmutableInnerServiceModel.Builder innerServiceModel = ImmutableInnerServiceModel.builder(); Path servicePathAnnotation = serviceClass.getAnnotation(Path.class); innerServiceModel.servicePath(servicePathAnnotation == null ? \"\" : PathUtils.trimSlashes(servicePathAnnotation.value())); innerServiceModel.name(serviceClass.getSimpleName()); Set<Method> serviceMethods = getAllServiceMethods(serviceClass, settings.methodFilter()); Set<Type> referencedTypes = Sets.newHashSet(); for (Method method : serviceMethods) { referencedTypes.addAll(getTypesFromEndpoint(method, settings)); } serviceModel.addAllReferencedTypes(referencedTypes); ModelCompiler compiler = new TypeScriptGenerator(settings.getSettings()).getModelCompiler(); List<ServiceEndpointModel> endpointModels = Lists.newArrayList(); endpointModels = computeEndpointModels(serviceMethods, compiler, settings); Collections.sort(endpointModels); innerServiceModel.endpointModels(endpointModels); serviceModel.addInnerServiceModels(innerServiceModel.build()); } return serviceModel.build(); }### Assistant: @Test public void plainTextTest() { ServiceModel model = serviceClassParser.parseServiceClass(PlainTextService.class, settings); ImmutableServiceEndpointParameterModel expectedParameterModel = ImmutableServiceEndpointParameterModel.builder() .javaType(String.class) .tsType(TsType.String) .build(); ImmutableServiceEndpointModel expectedEndpointModel = ImmutableServiceEndpointModel.builder() .javaReturnType(String.class) .tsReturnType(TsType.String) .addParameters(expectedParameterModel) .endpointName(\"plainText\") .endpointPath(\"plainText\") .endpointMethodType(\"GET\") .endpointRequestMediaType(MediaType.TEXT_PLAIN) .endpointResponseMediaType(MediaType.TEXT_PLAIN) .build(); InnerServiceModel innerServiceModel = ImmutableInnerServiceModel.builder() .addEndpointModels(expectedEndpointModel) .servicePath(\"plainTextService\") .name(\"PlainTextService\") .build(); ServiceModel expectedServiceModel = ImmutableServiceModel.builder() .addInnerServiceModels(innerServiceModel) .name(\"PlainTextService\") .addReferencedTypes(String.class) .build(); assertEquals(expectedServiceModel, model); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String name(String name, String... names) { final StringBuilder builder = new StringBuilder(); append(builder, name); if (names != null) { for (String s : names) { append(builder, s); } } return builder.toString(); }### Assistant: @Test @SuppressWarnings(\"NullArgumentToVariableArgMethod\") public void elidesNullValuesFromNamesWhenOnlyOneNullPassedIn() { assertThat(name(\"one\", (String) null)) .isEqualTo(\"one\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static String dataHeader(final String line) { if (line.length() > 2 && line.charAt(0) != '>' && line.charAt(1) != ' ') return null; int i = line.indexOf('<', 2); if (i < 0) return null; int j = line.indexOf('>', i); if (j < 0) return null; return line.substring(i + 1, j); }### Assistant: @Test public void dataHeader_1() { assertThat(MDLV2000Reader.dataHeader(\"> 29 <DENSITY> \"), is(\"DENSITY\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Shape shapeOf(List<Point2D> points) { Path2D path = new Path2D.Double(); if (!points.isEmpty()) { path.moveTo(points.get(0).getX(), points.get(0).getY()); for (Point2D point : points) path.lineTo(point.getX(), point.getY()); path.closePath(); } return path; }### Assistant: @Test public void emptyShapeDoesBreak() throws Exception { Shape shape = ConvexHull.shapeOf(Collections.<Point2D> emptyList()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void updateEmrClusterDefinitionWithBestPrice(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition, AwsParamsDto awsParamsDto) { EmrVpcPricingState emrVpcPricingState = new EmrVpcPricingState(); int totalInstanceCount = getTotalInstanceCount(emrClusterDefinition); List<Subnet> subnets = getSubnets(emrClusterDefinition, awsParamsDto); for (Subnet subnet : subnets) { emrVpcPricingState.getSubnetAvailableIpAddressCounts().put(subnet.getSubnetId(), subnet.getAvailableIpAddressCount()); } removeSubnetsWithAvailableIpsLessThan(subnets, totalInstanceCount); if (subnets.isEmpty()) { LOGGER.info(String.format(\"Insufficient IP availability. namespace=\\\"%s\\\" emrClusterDefinitionName=\\\"%s\\\" emrClusterName=\\\"%s\\\" \" + \"totalRequestedInstanceCount=%s emrVpcPricingState=%s\", emrClusterAlternateKeyDto.getNamespace(), emrClusterAlternateKeyDto.getEmrClusterDefinitionName(), emrClusterAlternateKeyDto.getEmrClusterName(), totalInstanceCount, jsonHelper.objectToJson(emrVpcPricingState))); throw new ObjectNotFoundException(String.format( \"There are no subnets in the current VPC which have sufficient IP addresses available to run your \" + \"clusters. Try expanding the list of subnets or try again later. requestedInstanceCount=%s%n%s\", totalInstanceCount, emrVpcPricingStateFormatter.format(emrVpcPricingState))); } List<EmrClusterPriceDto> emrClusterPrices = new ArrayList<>(); InstanceDefinition masterInstanceDefinition = getMasterInstanceDefinition(emrClusterDefinition); InstanceDefinition coreInstanceDefinition = getCoreInstanceDefinition(emrClusterDefinition); InstanceDefinition taskInstanceDefinition = getTaskInstanceDefinition(emrClusterDefinition); Set<String> requestedInstanceTypes = new HashSet<>(); String masterInstanceType = masterInstanceDefinition.getInstanceType(); requestedInstanceTypes.add(masterInstanceType); if (coreInstanceDefinition != null) { String coreInstanceType = coreInstanceDefinition.getInstanceType(); requestedInstanceTypes.add(coreInstanceType); } if (taskInstanceDefinition != null) { String taskInstanceType = taskInstanceDefinition.getInstanceType(); requestedInstanceTypes.add(taskInstanceType); } for (AvailabilityZone availabilityZone : getAvailabilityZones(subnets, awsParamsDto)) { Map<String, BigDecimal> instanceTypeSpotPrices = getInstanceTypeSpotPrices(availabilityZone, requestedInstanceTypes, awsParamsDto); emrVpcPricingState.getSpotPricesPerAvailabilityZone().put(availabilityZone.getZoneName(), instanceTypeSpotPrices); BigDecimal masterSpotPrice = instanceTypeSpotPrices.get(masterInstanceType); Ec2PriceDto masterPrice = getBestInstancePrice(masterSpotPrice, masterInstanceDefinition); Ec2PriceDto corePrice = null; if (coreInstanceDefinition != null) { String coreInstanceType = coreInstanceDefinition.getInstanceType(); BigDecimal coreSpotPrice = instanceTypeSpotPrices.get(coreInstanceType); corePrice = getBestInstancePrice(coreSpotPrice, coreInstanceDefinition); } Ec2PriceDto taskPrice = null; if (taskInstanceDefinition != null) { String taskInstanceType = taskInstanceDefinition.getInstanceType(); BigDecimal taskSpotPrice = instanceTypeSpotPrices.get(taskInstanceType); taskPrice = getBestInstancePrice(taskSpotPrice, taskInstanceDefinition); } if (masterPrice != null && (coreInstanceDefinition == null || corePrice != null) && (taskInstanceDefinition == null || taskPrice != null)) { emrClusterPrices.add(createEmrClusterPrice(availabilityZone, masterPrice, corePrice, taskPrice)); } } if (emrClusterPrices.isEmpty()) { LOGGER.info(String.format(\"No subnets which satisfied the best price search criteria. namespace=\\\"%s\\\" emrClusterDefinitionName=\\\"%s\\\" \" + \"emrClusterName=\\\"%s\\\" emrVpcPricingState=%s\", emrClusterAlternateKeyDto.getNamespace(), emrClusterAlternateKeyDto.getEmrClusterDefinitionName(), emrClusterAlternateKeyDto.getEmrClusterName(), jsonHelper.objectToJson(emrVpcPricingState))); throw new ObjectNotFoundException(String.format( \"There were no subnets which satisfied your best price search criteria. If you explicitly opted to use spot EC2 instances, please confirm \" + \"that your instance types support spot pricing. Otherwise, try setting the max price or the on-demand threshold to a higher value.%n%s\", emrVpcPricingStateFormatter.format(emrVpcPricingState))); } EmrClusterPriceDto bestEmrClusterPrice = getEmrClusterPriceWithLowestCoreInstancePrice(emrClusterPrices); if (bestEmrClusterPrice != null) { Subnet bestEmrClusterSubnet = getBestSubnetForAvailabilityZone(bestEmrClusterPrice.getAvailabilityZone(), subnets); updateInstanceDefinitionsWithBestPrice(emrClusterDefinition, bestEmrClusterSubnet, bestEmrClusterPrice); } }### Assistant: @Test public void testMaxSearchPriceConvertedToSportPrice() { String subnetId = SUBNET_1; MasterInstanceDefinition masterInstanceDefinition = new MasterInstanceDefinition(); masterInstanceDefinition.setInstanceCount(1); masterInstanceDefinition.setInstanceType(INSTANCE_TYPE_1); masterInstanceDefinition.setInstanceMaxSearchPrice(ONE_POINT_ONE); InstanceDefinition coreInstanceDefinition = new InstanceDefinition(); coreInstanceDefinition.setInstanceCount(1); coreInstanceDefinition.setInstanceType(INSTANCE_TYPE_1); coreInstanceDefinition.setInstanceMaxSearchPrice(ONE_POINT_ONE); InstanceDefinition taskInstanceDefinition = null; EmrClusterDefinition emrClusterDefinition = updateEmrClusterDefinitionWithBestPrice(subnetId, masterInstanceDefinition, coreInstanceDefinition, taskInstanceDefinition); assertBestPriceCriteriaRemoved(emrClusterDefinition); assertEquals(\"master instance bid price\", ONE_POINT_ONE, emrClusterDefinition.getInstanceDefinitions().getMasterInstances().getInstanceSpotPrice()); assertEquals(\"core instance bid price\", ONE_POINT_ONE, emrClusterDefinition.getInstanceDefinitions().getCoreInstances().getInstanceSpotPrice()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @OnError public void onError(Throwable t) { LOG.error(Throwables.getStackTraceAsString(t)); }### Assistant: @Test public void testOnError() { underTest.onError(new RuntimeException(\"test\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object o) { if (!(o instanceof PharmacophoreAtom)) return false; PharmacophoreAtom that = (PharmacophoreAtom) o; return smarts.equals(that.getSmarts()) && symbol.equals(that.getSymbol()) && point3d.equals(that.getPoint3d()) && Arrays.equals(this.matchingAtoms, that.matchingAtoms); }### Assistant: @Test public void testEquals() { PharmacophoreAtom patom1 = new PharmacophoreAtom(\"[CX2]N\", \"Amine\", new Point3d(0, 0, 0)); patom1.setMatchingAtoms(new int[]{1, 4, 5}); PharmacophoreAtom patom2 = new PharmacophoreAtom(\"[CX2]N\", \"Amine\", new Point3d(0, 0, 0)); patom2.setMatchingAtoms(new int[]{1, 4, 5}); PharmacophoreAtom patom3 = new PharmacophoreAtom(\"[CX2]N\", \"Amine\", new Point3d(0, 1, 0)); patom3.setMatchingAtoms(new int[]{1, 4, 5}); PharmacophoreAtom patom4 = new PharmacophoreAtom(\"[CX2]N\", \"Amine\", new Point3d(0, 0, 0)); patom4.setMatchingAtoms(new int[]{1, 4, 6}); Assert.assertEquals(patom2, patom1); Assert.assertNotSame(patom3, patom1); Assert.assertNotSame(patom4, patom1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static URI[] stringToURI(String[] str){ if (str == null) return null; URI[] uris = new URI[str.length]; for (int i = 0; i < str.length;i++){ try{ uris[i] = new URI(str[i]); }catch(URISyntaxException ur){ throw new IllegalArgumentException( \"Failed to create uri for \" + str[i], ur); } } return uris; }### Assistant: @Test (timeout = 30000) public void testStringToURI() { String[] str = new String[] { \"file: try { StringUtils.stringToURI(str); fail(\"Ignoring URISyntaxException while creating URI from string file: } catch (IllegalArgumentException iae) { assertEquals(\"Failed to create uri for file: } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @NonNull @Override public ActionHandle then(@Nullable ResultListener<R> listener) { final R result = mResult; final ResourceCleaner<R> cleaner = mCleaner; mResult = null; if (listener != null) { listener.onResult(result); } else if (cleaner != null && result != null) { cleaner.clean(result); } mResult = null; mCleaner = null; return this; }### Assistant: @Test public void then_callListenerOnActorThread_withListener() throws Exception { PromiseImpl<Object> promise = new PromiseImpl<>(mResult, mCleaner); promise.then(mActorThread, mListener); Mockito.verify(mActorThread).bind(Mockito.same(ResultListener.class), mCaptor.capture()); Mockito.verify(mProxy).onResult(mResult); mCaptor.getValue().onResult(mResult); Mockito.verify(mListener).onResult(mResult); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String toString() { return getType().getSimpleName() + \"#\" + method.getName() + \"(\" + Stream.of(method.getParameters()) .map(p -> p.getType().getSimpleName().substring(0, 1)) .collect(joining(\", \")) + \")\"; }### Assistant: @Test void testToString() { final String toString = instance.toString(); System.out.println(\"toString = \" + toString); assertTrue(toString.contains(\"Foo\")); assertTrue(toString.contains(\"inc()\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void deleteById(int shard, List<String> idsToDelete) throws SolrServerException, IOException { try { solrServer.deleteById(idsToDelete); indexDeleteMeter.mark(idsToDelete.size()); } catch (SolrException e) { if (isDocumentIssue(e)) { retryDeletesIndividually(idsToDelete); } else { solrDeleteErrorMeter.mark(idsToDelete.size()); throw e; } } catch (SolrServerException sse) { solrDeleteErrorMeter.mark(idsToDelete.size()); throw sse; } }### Assistant: @Test(expected = SolrException.class) public void testDeleteById_SolrExceptionCausedByIOException() throws SolrServerException, IOException { List<String> idsToDelete = Lists.newArrayList(\"idA\", \"idB\"); when(solrServer.deleteById(idsToDelete)).thenThrow(new SolrException(ErrorCode.SERVER_ERROR, new IOException())); solrWriter.deleteById(-1, idsToDelete); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ET executeBlockingCall(Callable<ET> eventSupplier) throws Exception { throwExceptionIfCircuitBreakerIsOpen(); ET event = null; Exception eventException = null; long beforeCallNanos = System.nanoTime(); try { event = eventSupplier.call(); } catch (Exception ex) { eventException = ex; } long afterCallNanos = System.nanoTime(); Exception timeoutException = null; if (callTimeoutNanos.isPresent()) { long timeoutNanos = callTimeoutNanos.get(); if ((afterCallNanos - beforeCallNanos) > timeoutNanos) { timeoutException = generateNewCircuitBreakerTimeoutException(timeoutNanos); } } Exception exceptionToHandle = (timeoutException == null) ? eventException : timeoutException; if (exceptionToHandle != null) { handleException(exceptionToHandle); throw exceptionToHandle; } handleEvent(event); return event; }### Assistant: @Test public void executeBlockingCall_gives_precedence_to_CircuitBreakerTimeoutException_if_supplier_takes_longer_than_callTimeout_even_if_supplier_throws_exception() { long callTimeoutMillis = 50; long callExecutionTimeMillis = 100; Whitebox .setInternalState(cbSpy, \"callTimeoutNanos\", Optional.of(Duration.ofMillis(callTimeoutMillis).toNanos())); Callable<String> supplier = () -> { try { Thread.sleep(callExecutionTimeMillis); } catch (InterruptedException e) { throw new RuntimeException(e); } throw new Exception(\"crunch\"); }; long startTimeMillis = System.currentTimeMillis(); Throwable cbExplosion = catchThrowable(() -> cbSpy.executeBlockingCall(supplier)); long endTimeMillis = System.currentTimeMillis(); assertThat(cbExplosion) .isNotNull() .isInstanceOf(CircuitBreakerTimeoutException.class); assertThat((endTimeMillis - startTimeMillis)).isGreaterThanOrEqualTo(callExecutionTimeMillis); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: WorkflowInstanceExecutionData executionInfo(Iterable<SequenceEvent> events) { for (SequenceEvent sequenceEvent : events) { eventTs = Instant.ofEpochMilli(sequenceEvent.timestamp()); sequenceEvent.event().accept(visitor); } if (!completed) { closeTrigger(); } return WorkflowInstanceExecutionData.create(currWorkflowInstance, triggerList); }### Assistant: @Test public void testStop() { long c = 0L; List<SequenceEvent> events = List.of( SequenceEvent.create(E.triggerExecution(UNKNOWN_TRIGGER0), c++, ts(\"07:55\")), SequenceEvent.create(E.dequeue(RESOURCE_IDS), c++, ts(\"07:55\")), SequenceEvent.create(E.submit(dockerDesc(\"img1\", \"sha1\"), \"exec-id-00\"), c++, ts(\"07:55\")), SequenceEvent.create(E.runError(\"First failure\"), c++, ts(\"07:58\")), SequenceEvent.create(E.retryAfter(10), c++, ts(\"07:59\")), SequenceEvent.create(E.retry(), c++, ts(\"08:56\")), SequenceEvent.create(E.submit(dockerDesc(\"img2\", \"sha2\"), \"exec-id-01\"), c++, ts(\"08:55\")), SequenceEvent.create(E.submitted(\"exec-id-01\"), c++, ts(\"08:56\")), SequenceEvent.create(E.started(), c++, ts(\"08:57\")), SequenceEvent.create(E.runError(\"Second failure\"), c++, ts(\"08:59\")), SequenceEvent.create(E.stop(), c++, ts(\"08:59\")) ); assertValidTransitionSequence(events); WorkflowInstanceExecutionData workflowInstanceExecutionData = new WFIExecutionBuilder().executionInfo(events); WorkflowInstanceExecutionData expected = WorkflowInstanceExecutionData.create( WORKFLOW_INSTANCE, List.of( Trigger.create( \"trig0\", time(\"07:55\"), TriggerParameters.zero(), true, List.of( Execution.create( Optional.of(\"exec-id-00\"), Optional.of(\"img1\"), Optional.of(\"sha1\"), Optional.empty(), List.of( ExecStatus.create(time(\"07:58\"), \"FAILED\", Optional.of(\"First failure\")) ) ), Execution.create( Optional.of(\"exec-id-01\"), Optional.of(\"img2\"), Optional.of(\"sha2\"), Optional.of(TEST_RUNNER_ID), List.of( ExecStatus.create(time(\"08:56\"), \"SUBMITTED\", Optional.empty()), ExecStatus.create(time(\"08:57\"), \"STARTED\", Optional.empty()), ExecStatus.create(time(\"08:59\"), \"FAILED\", Optional.of(\"Second failure\")) ) ) ) ) ) ); assertThat(workflowInstanceExecutionData, is(expected)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void addMeter(final DeviceMessageMetadata deviceMessageMetadata, final AddSmartMeterRequest addSmartMeterRequest) throws FunctionalException { final String organisationId = deviceMessageMetadata.getOrganisationIdentification(); final String deviceId = deviceMessageMetadata.getDeviceIdentification(); LOGGER.debug(\"addMeter for organisationIdentification: {} for deviceIdentification: {}\", organisationId, deviceId); final SmartMeteringDevice smartMeteringDevice = addSmartMeterRequest.getDevice(); final SmartMeter smartMeter = this.smartMeterService.getSmartMeter(deviceId, smartMeteringDevice); this.smartMeterService.storeMeter(organisationId, addSmartMeterRequest, smartMeter); this.osgpCoreRequestMessageSender.send(this.getRequestMessage(deviceMessageMetadata, smartMeteringDevice), deviceMessageMetadata.getMessageType(), deviceMessageMetadata.getMessagePriority(), deviceMessageMetadata.getScheduleTime()); }### Assistant: @Test public void addMeterProtocolInfoSaved() throws FunctionalException { when(this.smartMeteringDeviceRepository.findByDeviceIdentification(DEVICE_IDENTIFICATION)).thenReturn(null); when(this.smartMeteringDevice.getProtocolName()).thenReturn(PROTOCOL_NAME); when(this.smartMeteringDevice.getProtocolVersion()).thenReturn(PROTOCOL_VERSION); when(this.protocolInfoRepository .findByProtocolAndProtocolVersion(this.smartMeteringDevice.getProtocolInfoLookupName(), PROTOCOL_VERSION)).thenReturn(this.protocolInfo); this.instance.addMeter(this.deviceMessageMetadata, this.addSmartMeterRequest); verify(this.smartMeter).updateProtocol(this.protocolInfo); verify(this.smartMeteringDeviceRepository).save(this.smartMeter); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public FindTModel createFindTModelForProcessName (QName serviceName) { FindTModel findTModel = new FindTModel(); Name name = new Name(); name.setValue(serviceName.getLocalPart()); findTModel.setName(name); CategoryBag categoryBag = new CategoryBag(); String namespace = serviceName.getNamespaceURI(); if (namespace!=null && namespace.length()!=0) { KeyedReference namespaceReference = WSDL2UDDI.newKeyedReference( \"uddi:uddi.org:xml:namespace\", \"uddi-org:xml:namespace\", namespace); categoryBag.getKeyedReference().add(namespaceReference); } KeyedReference typesReference = WSDL2UDDI.newKeyedReference( \"uddi:uddi.org:bpel:types\", \"uddi-org:bpel:types\", \"process\"); categoryBag.getKeyedReference().add(typesReference); findTModel.setCategoryBag(categoryBag); if (log.isDebugEnabled()) { log.debug(new PrintUDDI<FindTModel>().print(findTModel)); } return findTModel; }### Assistant: @Test public void testHelloWorld_FindTModelForProcessName() throws JAXBException { QName processName = new QName(\"http: FindTModel findTModel = bpel2UDDI.createFindTModelForProcessName(processName); System.out.println(\"***** Find TModel For ProcessName: \" + processName); if (serialize) System.out.println(pFindTModel.print(findTModel)); Assert.assertNotNull(findTModel.getCategoryBag()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void executeWorkItem(WorkItem workItem, WorkItemManager manager) { boolean handleException = false; String urlStr = (String) workItem.getParameter(\"Url\"); String method = (String) workItem.getParameter(\"Method\"); String handleExceptionStr = (String) workItem.getParameter(\"HandleResponseErrors\"); String resultClass = (String) workItem.getParameter(\"ResultClass\"); String acceptHeader = (String) workItem.getParameter(\"AcceptHeader\"); String acceptCharset = (String) workItem.getParameter(\"AcceptCharset\"); String headers = (String) workItem.getParameter(PARAM_HEADERS); if (urlStr == null) { throw new IllegalArgumentException(\"Url is a required parameter\"); } if (method == null || method.trim().length() == 0) { method = \"GET\"; } if (handleExceptionStr != null) { handleException = Boolean.parseBoolean(handleExceptionStr); } Map<String, Object> params = workItem.getParameters(); AuthenticationType authType = type; if (params.get(PARAM_AUTH_TYPE) != null) { authType = AuthenticationType.valueOf((String) params.get(PARAM_AUTH_TYPE)); } Integer connectTimeout = getParamAsInt(params.get(PARAM_CONNECT_TIMEOUT)); if (connectTimeout == null) { connectTimeout = 60000; } Integer readTimeout = getParamAsInt(params.get(PARAM_READ_TIMEOUT)); if (readTimeout == null) { readTimeout = 60000; } if(headers == null) { headers = \"\"; } HttpClient httpClient = getHttpClient(readTimeout, connectTimeout); Object methodObject = configureRequest(method, urlStr, params, acceptHeader, acceptCharset, headers); try { HttpResponse response = doRequestWithAuthorization(httpClient, methodObject, params, authType); StatusLine statusLine = response.getStatusLine(); int responseCode = statusLine.getStatusCode(); Map<String, Object> results = new HashMap<String, Object>(); HttpEntity respEntity = response.getEntity(); String responseBody = null; String contentType = null; if (respEntity != null) { responseBody = EntityUtils.toString(respEntity, acceptCharset); if (respEntity.getContentType() != null) { contentType = respEntity.getContentType().getValue(); } } if (responseCode >= 200 && responseCode < 300) { postProcessResult(responseBody, resultClass, contentType, results); results.put(PARAM_STATUS_MSG, \"request to endpoint \" + urlStr + \" successfully completed \" + statusLine.getReasonPhrase()); } else { if (handleException) { handleException(new RESTServiceException(responseCode, responseBody, urlStr)); } else { logger.warn(\"Unsuccessful response from REST server (status: {}, endpoint: {}, response: {}\", responseCode, urlStr, responseBody); results.put(PARAM_STATUS_MSG, \"endpoint \" + urlStr + \" could not be reached: \" + responseBody); } } results.put(PARAM_STATUS, responseCode); manager.completeWorkItem(workItem.getId(), results); } catch (Exception e) { handleException(e); } finally { try { close(httpClient, methodObject); } catch (Exception e) { handleException(e); } } }### Assistant: @Test public void testPOSTOperationWithCompleteXmlTransformation() { RESTWorkItemHandler handler = new RESTWorkItemHandler(); Person request = new Person(); request.setAge(25); request.setName(\"john\"); WorkItemImpl workItem = new WorkItemImpl(); workItem.setParameter(\"Url\", serverURL + \"/xml\"); workItem.setParameter(\"Method\", \"POST\"); workItem.setParameter(PARAM_CONTENT_TYPE, \"application/xml\"); workItem.setParameter(PARAM_CONTENT_TYPE_CHARSET, \"UTF-8\"); workItem.setParameter(contentParamName, request); workItem.setParameter(\"ResultClass\", Person.class.getName()); WorkItemManager manager = new TestWorkItemManager(); handler.executeWorkItem(workItem, manager); Map<String, Object> results = ((TestWorkItemManager) manager).getResults(workItem.getId()); Person result = (Person) results.get(PARAM_RESULT); assertNotNull(\"result cannot be null\", result); assertEquals(\"Post john\", result.getName()); assertEquals(25, result.getAge().intValue()); int responseCode = (Integer) results.get(PARAM_STATUS); assertNotNull(responseCode); assertEquals(200, responseCode); String responseMsg = (String) results.get(PARAM_STATUS_MSG); assertNotNull(responseMsg); assertEquals(\"request to endpoint \" + workItem.getParameter(\"Url\") + \" successfully completed OK\", responseMsg); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void clic(int number) { if (1 <= number && number <= this.maxNumber) { Grid oldGrid = this.gridHistory.peek().getValue0(); Grid newGrid = oldGrid.derive(number); Integer newLastNumber = getNewLastNumber(number); this.gridHistory.push(Pair.with(newGrid, newLastNumber)); save(); fireUpdate(); } }### Assistant: @Test public void testHistoryOverflow() { LotoGrid grid = new LotoGrid(HISTORY_DEPTH, MAX_NUMBER); for (int i = 0; i < HISTORY_DEPTH * 2; i++) { grid.clic(MAX_NUMBER); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public V remove(K key) { if (key == null) throw new NullPointerException(\"key == null\"); expungeStaleEntries(); return target.remove(key); }### Assistant: @Test public void remove_okWhenDoesntExist() { map.remove(key); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Collection<Class<?>> traverseBundlesForOsgiServices(final Collection<Bundle> bundles) { Collection<Class<?>> allClasses = getClasses(bundles); Set<Class<?>> osgiClasses = new HashSet<Class<?>>(); for (Class<?> clazz : allClasses) { Set<Class<?>> osgiServicesForClass = readOsgiServicesForClass(clazz); osgiClasses.addAll(osgiServicesForClass); } return osgiClasses; }### Assistant: @Test public void testTraverseBundlesForOsgiServices() throws ClassNotFoundException { bundleSetup(); Collection<Class<?>> classes = classFinder.traverseBundlesForOsgiServices(Lists.newArrayList(bundle)); Assert.assertEquals(classes.size(), 1); Assert.assertEquals(\"Long\", new ArrayList<Class<?>>(classes).get(0).getSimpleName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Page<Post> fullTextQuery(String queryString, QueryParser parser, Pageable pageRequest) { Query luceneQuery; try { luceneQuery = parser.parse(queryString); } catch (ParseException e) { throw new ServiceException(e); } FullTextSession s = Search.getFullTextSession(getSession()); FullTextQuery query = s.createFullTextQuery(luceneQuery, Post.class); query.setMaxResults(pageRequest.getPageSize()); query.setFirstResult(pageRequest.getOffset()); @SuppressWarnings(\"unchecked\") List<Post> result = query.list(); PageImpl<Post> page = new PageImpl<Post>(result, pageRequest, query.getResultSize()); return page; }### Assistant: @Test public void testFullTextQueryStringQueryParserPageable() { Page<Post> result = postDao.fullTextQuery(\"content:first\", new QueryParser(Version.LUCENE_35, \"content\", new StopAnalyzer( Version.LUCENE_35)), new PageRequest(0, 10)); List<Post> list = result.getContent(); assertThat(list.size(), equalTo(2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validateEvent( ValidationErrorReporter reporter, Event event ) { event.setNotes( NoteValidationUtils.getPersistableNotes( commentService, event.getNotes() ) ); }### Assistant: @Test public void verifyOnlyNonExistingNoteArePersisted() { final List<Note> notes = rnd.randomObjects( Note.class, 3, \"newNote\" ); final List<Note> existingNotes = rnd.randomObjects( Note.class, 2, \"newNote\" ); event.setNotes( newArrayList( concat( notes, existingNotes ) ) ); when( commentService.filterExistingNotes( anyList() ) ) .thenReturn( notes.stream().map( Note::getNote ).collect( Collectors.toList() ) ); this.hook.validateEvent( mock( ValidationErrorReporter.class ), event ); assertThat( event.getNotes(), hasSize( 3 ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute) throws WrongReferenceAttributeValueException { if (attribute.getValue() == null) throw new WrongReferenceAttributeValueException(attribute, \"Group fromEmail cannot be null.\"); }### Assistant: @Test public void testCorrectSemantics() throws Exception { System.out.println(\"testCorrectSemantics()\"); attributeToCheck.setValue(\"\\\"my example\\\" <my@example.com>\"); classInstance.checkAttributeSemantics(sess, group, attributeToCheck); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean permittedTopology(DimensionInfo sourceDimensionInfo, DimensionInfo targetDimensionInfo) { return sourceDimensionInfo.isArea() && targetDimensionInfo.isArea(); }### Assistant: @Test public void testPermittedTopology_polygon_linestring() { DimensionInfo sourceDimensionInfo = DimensionInfo.XY_POLYGON; DimensionInfo targetDimensionInfo = DimensionInfo.XY_LINESTRING; RccPartiallyOverlappingFF instance = new RccPartiallyOverlappingFF(); boolean expResult = false; boolean result = instance.permittedTopology(sourceDimensionInfo, targetDimensionInfo); assertEquals(expResult, result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String format(Object object) { Type type = Type.CLASS_TO_TYPE.get(object.getClass()); if (type == null) { return object.toString(); } switch (type) { case FLOAT: { return format((float)((Float)object)); } case DOUBLE: { return format((double)((Double)object)); } case BYTE: { return format((byte)((Byte)object)); } case SHORT: { return format((short)((Short)object)); } case INTEGER: { return format((int)((Integer)object)); } case LONG: { return format((long)((Long)object)); } default: return object.toString(); } }### Assistant: @Test public void testObject() { ResultFormatter adf = new ResultFormatter(); final String testString = \"Hello World\"; Assert.assertEquals(testString, adf.format(testString)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Request createRequest() { ViewContext viewContext = (ViewContext) context.getInternalUserContext(); HttpServletRequest request = viewContext.getRequest(); HttpServletResponse response = viewContext.getResponse(); ServletContext servletContext = viewContext.getServletContext(); return VelocityRequest.createVelocityRequest(ServletUtil.getApplicationContext(servletContext), request, response, context, writer); }### Assistant: @Test public void testCreateRequest() { InternalContextAdapter context = createMock(InternalContextAdapter.class); Writer writer = createMock(Writer.class); Node node = createMock(Node.class); ViewToolContext viewContext = createMock(ViewToolContext.class); HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); ServletContext servletContext = createMock(ServletContext.class); ApplicationContext applicationContext = createMock(ApplicationContext.class); expect(context.getInternalUserContext()).andReturn(viewContext); expect(viewContext.getRequest()).andReturn(request); expect(viewContext.getResponse()).andReturn(response); expect(viewContext.getServletContext()).andReturn(servletContext); expect(servletContext.getAttribute(ApplicationAccess.APPLICATION_CONTEXT_ATTRIBUTE)).andReturn(applicationContext); replay(context, writer, node, viewContext, request, response, servletContext, applicationContext); VelocityAutotagRuntime runtime = new VelocityAutotagRuntime(); runtime.render(context, writer, node); Request velocityRequest = runtime.createRequest(); assertTrue(velocityRequest instanceof VelocityRequest); verify(context, writer, node, viewContext, request, response, servletContext, applicationContext); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Channel initialize() throws InvalidArgumentException, TransactionException { logger.debug(format(\"Channel %s initialize shutdown %b\", name, shutdown)); if (shutdown) { throw new InvalidArgumentException(format(\"Channel %s has been shutdown.\", name)); } if (isNullOrEmpty(name)) { throw new InvalidArgumentException(\"Can not initialize channel without a valid name.\"); } if (client == null) { throw new InvalidArgumentException(\"Can not initialize channel without a client object.\"); } userContextCheck(client.getUserContext()); try { parseConfigBlock(); loadCACertificates(); logger.debug(format(\"Eventque started %s\", \"\" + eventQueueThread)); for (EventHub eh : eventHubs) { eh.connect(getTransactionContext()); } for (Peer peer : getEventingPeers()) { peer.initiateEventing(getTransactionContext(), getPeersOptions(peer)); } logger.debug(format(\"%d eventhubs initialized\", getEventHubs().size())); registerTransactionListenerProcessor(); logger.debug(format(\"Channel %s registerTransactionListenerProcessor completed\", name)); startEventQue(); this.initialized = true; logger.debug(format(\"Channel %s initialized\", name)); return this; } catch (TransactionException e) { logger.error(e.getMessage(), e); throw e; } catch (Exception e) { TransactionException exp = new TransactionException(e); logger.error(exp.getMessage(), exp); throw exp; } }### Assistant: @Test public void testChannelShutdownInitialize() throws Exception { thrown.expect(InvalidArgumentException.class); thrown.expectMessage(\"Channel shutdown has been shutdown.\"); shutdownChannel.initialize(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static MessageHeadersBuilder newInstance(final MessageDirection direction, final CharSequence thingId, final CharSequence subject) { return newInstance(direction, ThingId.of(thingId), subject); }### Assistant: @Test public void tryToCreateInstanceWithNullThingId() { assertThatExceptionOfType(NullPointerException.class) .isThrownBy(() -> MessageHeadersBuilder.newInstance(DIRECTION, null, SUBJECT)) .withMessage(\"The %s must not be null!\", \"thing-id\") .withNoCause(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static SslContext newServerContext(File certChainFile, File keyFile) throws SSLException { return newServerContext(certChainFile, keyFile, null); }### Assistant: @Test public void testSslServerWithEncryptedPrivateKey() throws SSLException { File keyFile = new File(getClass().getResource(\"test_encrypted.pem\").getFile()); File crtFile = new File(getClass().getResource(\"test.crt\").getFile()); newServerContext(crtFile, keyFile, \"12345\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T> T execute(CommandConfig config, Command<T> command) { LOGGER.debug(\"command=\\\"{}\\\"\", command.getClass().getName()); try { return super.execute(config, command); } catch (Exception e) { LOGGER.warn(String.format(\"HerdCommandInvoker caught an exception.\"), e); if (command instanceof ExecuteAsyncJobCmd) { ExecuteAsyncJobCmd executeAsyncJobCmd = (ExecuteAsyncJobCmd) command; JobEntity jobEntity = getJobEntity(executeAsyncJobCmd); if (StringUtils.containsIgnoreCase(ExceptionUtils.getMessage(e), CANNOT_CREATE_TRANSACTION_EXCEPTION)) { LOGGER.warn(String.format(\"HerdCommandInvoker caught a CannotCreateTransactionException. Job id %s, Process instance id %s, Retries %d.\", jobEntity.getId(), jobEntity.getProcessInstanceId(), jobEntity.getRetries()), e); throw e; } jobEntity.setExceptionMessage(ExceptionUtils.getMessage(e)); jobEntity.setExceptionStacktrace(ExceptionUtils.getStackTrace(e)); return null; } else { throw e; } } }### Assistant: @Test public void testExecuteWithExceptionAndGetCreateTransactionException() { CommandConfig config = mock(CommandConfig.class); JobEntity job = mock(JobEntity.class); JobEntityManager jobEntityManager = mock(JobEntityManager.class); CommandContext commandContext = mock(CommandContext.class); CommandContext commandContextSaved = Context.getCommandContext(); Context.setCommandContext(commandContext); String jobId = \"testId100\"; when(job.getId()).thenReturn(jobId); when(job.getProcessInstanceId()).thenReturn(\"testProcessId100\"); when(job.getRetries()).thenReturn(3); ExecuteAsyncJobCmd command = new ExecuteAsyncJobCmd(job); doThrow(CannotCreateTransactionException.class).when(job).execute(any()); when(commandContext.getJobEntityManager()).thenReturn(jobEntityManager); when(jobEntityManager.findJobById(jobId)).thenReturn(job); try { herdCommandInvoker.execute(config, command); fail(); } catch (CannotCreateTransactionException e) { } finally { Context.setCommandContext(commandContextSaved); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ParseResult<O> parse(String query) { try { if (query == null) { throw new IllegalArgumentException(\"Query was null\"); } SQLGrammarLexer lexer = new SQLGrammarLexer(new ANTLRInputStream(query)); lexer.removeErrorListeners(); lexer.addErrorListener(SYNTAX_ERROR_LISTENER); CommonTokenStream tokens = new CommonTokenStream(lexer); SQLGrammarParser parser = new SQLGrammarParser(tokens); parser.removeErrorListeners(); parser.addErrorListener(SYNTAX_ERROR_LISTENER); SQLGrammarParser.StartContext queryContext = parser.start(); ParseTreeWalker walker = new ParseTreeWalker(); SQLAntlrListener<O> listener = new SQLAntlrListener<O>(this); walker.walk(listener, queryContext); return new ParseResult<O>(listener.getParsedQuery(), listener.getQueryOptions()); } catch (InvalidQueryException e) { throw e; } catch (Exception e) { throw new InvalidQueryException(\"Failed to parse query\", e); } }### Assistant: @Test public void testOrderBy_SimpleOrdering2() { ParseResult<Car> parseResult = parser.parse(\"SELECT * FROM cars WHERE 'manufacturer' = 'Ford' ORDER BY manufacturer asc\"); assertQueriesEquals(equal(Car.MANUFACTURER, \"Ford\"), parseResult.getQuery()); Assert.assertEquals(queryOptions(orderBy(ascending(Car.MANUFACTURER))), parseResult.getQueryOptions()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals( final Object o ) { if ( this == o ) { return true; } if ( !( o instanceof RequestBuilder ) ) { return false; } final RequestBuilder that = ( RequestBuilder ) o; if ( cmdArgs != null ? !cmdArgs.equals( that.cmdArgs ) : that.cmdArgs != null ) { return false; } if ( command != null ? !command.equals( that.command ) : that.command != null ) { return false; } if ( cwd != null ? !cwd.equals( that.cwd ) : that.cwd != null ) { return false; } if ( envVars != null ? !envVars.equals( that.envVars ) : that.envVars != null ) { return false; } if ( errRedirection != that.errRedirection ) { return false; } if ( outputRedirection != that.outputRedirection ) { return false; } if ( runAs != null ? !runAs.equals( that.runAs ) : that.runAs != null ) { return false; } if ( timeout != null ? !timeout.equals( that.timeout ) : that.timeout != null ) { return false; } return type == that.type; }### Assistant: @Test public void testEquals2() throws Exception { requestBuilder.equals( object ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected ConnectClientRequest cloneAsVersion(final ABIVersion version) { return new ConnectClientRequest(this, version); }### Assistant: @Test public void cloneAsVersionTest() { final ConnectClientRequest clone = OBJECT.cloneAsVersion(ABIVersion.BORON); Assert.assertNotNull(clone); Assert.assertEquals(ABIVersion.BORON, clone.getVersion()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public GuidedDecisionTable52 load(final Path path) { try { final String content = ioService.readAllString(Paths.convert(path)); return GuidedDTXMLPersistence.getInstance().unmarshal(content); } catch (Exception e) { throw ExceptionUtilities.handleException(e); } }### Assistant: @Test public void checkLoad() { final Path path = mock(Path.class); when(path.toURI()).thenReturn(\"file: when(ioService.readAllString(any(org.uberfire.java.nio.file.Path.class))).thenReturn(\"\"); final GuidedDecisionTable52 model = service.load(path); verify(ioService, times(1)).readAllString(any(org.uberfire.java.nio.file.Path.class)); assertNotNull(model); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @POST @Consumes(\"application/json\") public Response post(JsonNode node) { Resource resource; try { resource = store.create(node); } catch (Exception e) { return Response.serverError().build(); } final URI uri = UriBuilder.fromPath(resource.getURI().path()).build(); return Response.created(uri).build(); }### Assistant: @Test public void testPost() { ObjectMapper mapper = new ObjectMapper(); JsonNode node = mapper.createObjectNode() .put(\"name\", \"u2\"); Response response = client.target(Main.uri) .request(MediaType.APPLICATION_JSON) .post(Entity.entity(node, MediaType.APPLICATION_JSON)); assertEquals(201, response.getStatus()); assertEquals(\"http: WebTarget target = client.target(Main.uri + \"u2\"); Resource resource = target.request(MediaType.APPLICATION_JSON).get(Resource.class); assertEquals(1, resource.getContents().size()); EObject u1 = resource.getContents().get(0); assertEquals(\"User\", u1.eClass().getName()); assertEquals(\"u2\", u1.eGet(u1.eClass().getEStructuralFeature(\"name\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static URI resolve(final URI baseURI, final String reference) { return URIUtils.resolve(baseURI, URI.create(reference)); }### Assistant: @Test public void testResolve39() { Assert.assertEquals(\"http: .toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Type binaryOperator(Type innerType) { return SimpleParameterizedType.create(BinaryOperator.class, innerType); }### Assistant: @Test void binaryOperator() { assertSingleParameter(BinaryOperator.class, Integer.class, DefaultType::binaryOperator); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isString(final Object obj) { boolean rtn = false; rtn = obj instanceof String; return rtn; }### Assistant: @Test public void isString_StringAsObject_ShouldReturnTrue() { Object o = \"abc\"; assert (Utils.isString(o) == true); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static DistCpOptions parse(String args[]) throws IllegalArgumentException { CommandLineParser parser = new CustomParser(); CommandLine command; try { command = parser.parse(cliOptions, args, true); } catch (ParseException e) { throw new IllegalArgumentException(\"Unable to parse arguments. \" + Arrays.toString(args), e); } DistCpOptions option; Path targetPath; List<Path> sourcePaths = new ArrayList<Path>(); String leftOverArgs[] = command.getArgs(); if (leftOverArgs == null || leftOverArgs.length < 1) { throw new IllegalArgumentException(\"Target path not specified\"); } targetPath = new Path(leftOverArgs[leftOverArgs.length -1].trim()); for (int index = 0; index < leftOverArgs.length - 1; index++) { sourcePaths.add(new Path(leftOverArgs[index].trim())); } if (command.hasOption(DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())) { if (!sourcePaths.isEmpty()) { throw new IllegalArgumentException(\"Both source file listing and source paths present\"); } option = new DistCpOptions(new Path(getVal(command, DistCpOptionSwitch. SOURCE_FILE_LISTING.getSwitch())), targetPath); } else { if (sourcePaths.isEmpty()) { throw new IllegalArgumentException(\"Neither source file listing nor source paths present\"); } option = new DistCpOptions(sourcePaths, targetPath); } if (command.hasOption(DistCpOptionSwitch.IGNORE_FAILURES.getSwitch())) { option.setIgnoreFailures(true); } if (command.hasOption(DistCpOptionSwitch.ATOMIC_COMMIT.getSwitch())) { option.setAtomicCommit(true); } if (command.hasOption(DistCpOptionSwitch.WORK_PATH.getSwitch()) && option.shouldAtomicCommit()) { String workPath = getVal(command, DistCpOptionSwitch.WORK_PATH.getSwitch()); if (workPath != null && !workPath.isEmpty()) { option.setAtomicWorkPath(new Path(workPath)); } } else if (command.hasOption(DistCpOptionSwitch.WORK_PATH.getSwitch())) { throw new IllegalArgumentException(\"-tmp work-path can only be specified along with -atomic\"); } if (command.hasOption(DistCpOptionSwitch.LOG_PATH.getSwitch())) { option.setLogPath(new Path(getVal(command, DistCpOptionSwitch.LOG_PATH.getSwitch()))); } if (command.hasOption(DistCpOptionSwitch.SYNC_FOLDERS.getSwitch())) { option.setSyncFolder(true); } if (command.hasOption(DistCpOptionSwitch.OVERWRITE.getSwitch())) { option.setOverwrite(true); } if (command.hasOption(DistCpOptionSwitch.DELETE_MISSING.getSwitch())) { option.setDeleteMissing(true); } if (command.hasOption(DistCpOptionSwitch.SKIP_CRC.getSwitch())) { option.setSkipCRC(true); } if (command.hasOption(DistCpOptionSwitch.BLOCKING.getSwitch())) { option.setBlocking(false); } if (command.hasOption(DistCpOptionSwitch.BANDWIDTH.getSwitch())) { try { Integer mapBandwidth = Integer.parseInt( getVal(command, DistCpOptionSwitch.BANDWIDTH.getSwitch()).trim()); if (mapBandwidth.intValue() <= 0) { throw new IllegalArgumentException(\"Bandwidth specified is not positive: \" + mapBandwidth); } option.setMapBandwidth(mapBandwidth); } catch (NumberFormatException e) { throw new IllegalArgumentException(\"Bandwidth specified is invalid: \" + getVal(command, DistCpOptionSwitch.BANDWIDTH.getSwitch()), e); } } if (command.hasOption(DistCpOptionSwitch.SSL_CONF.getSwitch())) { option.setSslConfigurationFile(command. getOptionValue(DistCpOptionSwitch.SSL_CONF.getSwitch())); } if (command.hasOption(DistCpOptionSwitch.MAX_MAPS.getSwitch())) { try { Integer maps = Integer.parseInt( getVal(command, DistCpOptionSwitch.MAX_MAPS.getSwitch()).trim()); option.setMaxMaps(maps); } catch (NumberFormatException e) { throw new IllegalArgumentException(\"Number of maps is invalid: \" + getVal(command, DistCpOptionSwitch.MAX_MAPS.getSwitch()), e); } } if (command.hasOption(DistCpOptionSwitch.COPY_STRATEGY.getSwitch())) { option.setCopyStrategy( getVal(command, DistCpOptionSwitch.COPY_STRATEGY.getSwitch())); } if (command.hasOption(DistCpOptionSwitch.PRESERVE_STATUS.getSwitch())) { String attributes = getVal(command, DistCpOptionSwitch.PRESERVE_STATUS.getSwitch()); if (attributes == null || attributes.isEmpty()) { for (FileAttribute attribute : FileAttribute.values()) { option.preserve(attribute); } } else { for (int index = 0; index < attributes.length(); index++) { option.preserve(FileAttribute. getAttribute(attributes.charAt(index))); } } } if (command.hasOption(DistCpOptionSwitch.FILE_LIMIT.getSwitch())) { String fileLimitString = getVal(command, DistCpOptionSwitch.FILE_LIMIT.getSwitch().trim()); try { Integer.parseInt(fileLimitString); } catch (NumberFormatException e) { throw new IllegalArgumentException(\"File-limit is invalid: \" + fileLimitString, e); } LOG.warn(DistCpOptionSwitch.FILE_LIMIT.getSwitch() + \" is a deprecated\" + \" option. Ignoring.\"); } if (command.hasOption(DistCpOptionSwitch.SIZE_LIMIT.getSwitch())) { String sizeLimitString = getVal(command, DistCpOptionSwitch.SIZE_LIMIT.getSwitch().trim()); try { Long.parseLong(sizeLimitString); } catch (NumberFormatException e) { throw new IllegalArgumentException(\"Size-limit is invalid: \" + sizeLimitString, e); } LOG.warn(DistCpOptionSwitch.SIZE_LIMIT.getSwitch() + \" is a deprecated\" + \" option. Ignoring.\"); } return option; }### Assistant: @Test public void testParsebandwidth() { DistCpOptions options = OptionsParser.parse(new String[] { \"hdfs: \"hdfs: Assert.assertEquals(options.getMapBandwidth(), DistCpConstants.DEFAULT_BANDWIDTH_MB); options = OptionsParser.parse(new String[] { \"-bandwidth\", \"11\", \"hdfs: \"hdfs: Assert.assertEquals(options.getMapBandwidth(), 11); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static UserGroupInformation getUGI(HttpServletRequest request, Configuration conf) throws IOException { return getUGI(null, request, conf); }### Assistant: @Test public void testGetUgiDuringStartup() throws Exception { conf.set(DFSConfigKeys.FS_DEFAULT_NAME_KEY, \"hdfs: ServletContext context = mock(ServletContext.class); String realUser = \"TheDoctor\"; String user = \"TheNurse\"; conf.set(DFSConfigKeys.HADOOP_SECURITY_AUTHENTICATION, \"kerberos\"); UserGroupInformation.setConfiguration(conf); HttpServletRequest request; Text ownerText = new Text(user); DelegationTokenIdentifier dtId = new DelegationTokenIdentifier( ownerText, ownerText, new Text(realUser)); Token<DelegationTokenIdentifier> token = new Token<DelegationTokenIdentifier>(dtId, new DummySecretManager(0, 0, 0, 0)); String tokenString = token.encodeToUrlString(); request = getMockRequest(realUser, null, null); when(request.getParameter(JspHelper.DELEGATION_PARAMETER_NAME)).thenReturn( tokenString); NameNode mockNN = mock(NameNode.class); Mockito.doCallRealMethod().when(mockNN) .verifyToken(Mockito.any(), Mockito.any()); when(context.getAttribute(\"name.node\")).thenReturn(mockNN); LambdaTestUtils.intercept(RetriableException.class, \"Namenode is in startup mode\", () -> JspHelper.getUGI(context, request, conf)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean set(final String key, final int exp, final Object value) throws TimeoutException, CacheException { Future<Boolean> f = null; try { f = memcachedClient.set(key, exp, value); return f.get(); } catch (InterruptedException | ExecutionException e) { cancel(f); throw new CacheException(e); } }### Assistant: @Test public void setStringIntObject() throws TimeoutException, CacheException { EasyMock.expect(client.set(\"key1\", 1, \"value\")).andReturn(getFuture(true)); EasyMock.replay(client); assertTrue(clientWrapper.set(\"key1\", 1, \"value\")); EasyMock.verify(client); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void editSchedule(){ CSQueue root = scheduler.getRootQueue(); Resource clusterResources = Resources.clone(scheduler.getClusterResources()); containerBasedPreemptOrKill(root, clusterResources); }### Assistant: @Test public void testZeroGuar() { int[][] qData = new int[][] { { 200, 100, 0, 99, 100, 10, 90 }, { 200, 200, 200, 200, 200, 200, 200 }, { 170, 80, 60, 20, 90, 90, 0 }, { 10, 0, 0, 0, 10, 0, 10 }, { 0, 0, 0, 0, 0, 0, 0 }, { 4, 2, 1, 1, 2, 1, 1 }, { -1, -1, 1, 1, -1, 1, 1 }, { 2, 2, 0, 0, 2, 0, 0 }, }; ProportionalCapacityPreemptionPolicy policy = buildPolicy(qData); policy.editSchedule(); verify(mDisp, never()).handle(argThat(new IsPreemptionRequestFor(appA))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected String extractRuntimeSource(Map<String, String> metadata) { String processId = metadata.get(ProcessInstanceEventBody.PROCESS_ID_META_DATA); if(processId == null){ return null; } else { return service + \"/\" + (processId.contains(\".\") ? processId.substring(processId.lastIndexOf('.') + 1) : processId); } }### Assistant: @Test public void testServiceDefined() { ProcessInstanceEventBatch batch = new ProcessInstanceEventBatch(\"http: assertThat(batch.extractRuntimeSource(singletonMap(PROCESS_ID_META_DATA, \"travels\"))).isEqualTo(\"http: assertThat(batch.extractRuntimeSource(singletonMap(PROCESS_ID_META_DATA, \"demo.orders\"))).isEqualTo(\"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public DataSourceInfoGroup builder(DataSourceInfo dataSourceInfo) { this.setJdbcUrl(dataSourceInfo.getJdbcUrl()); this.setBusyConnections(dataSourceInfo.getBusyConnections()); this.setEstablishedConnections(dataSourceInfo.getEstablishedConnections()); this.setMaxConnections(dataSourceInfo.getMaxConnections()); this.setDataSourceCount(1); return this; }### Assistant: @Test public void javabeanTester() { JavaBeanTester.builder(DataSourceInfoGroup.class).loadData().test(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull @Override public Boolean zero(@Nonnull final Boolean initialValue) { return initialValue; }### Assistant: @Test public void zero() { final BooleanOrAccumulatorParam param = new BooleanOrAccumulatorParam(); Assert.assertFalse(param.zero(false)); Assert.assertTrue(param.zero(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: StandardizationAndValidationResult standardizeAndValidateField(FieldPolicy fieldPolicy, Object value, HCatDataType dataType, Map<Class, Class> validatorParamType) { StandardizationAndValidationResult result = new StandardizationAndValidationResult(value); List<BaseFieldPolicy> fieldPolicies = fieldPolicy.getAllPolicies(); int standardizerCount = 0; for (BaseFieldPolicy p : fieldPolicies) { if (p instanceof StandardizationPolicy) { standardizerCount++; } } boolean validateNullValues = false; int processedStandardizers = 0; for (BaseFieldPolicy p : fieldPolicies) { boolean isEmpty = ((result.getFieldValue() == null) || (StringUtils.isEmpty(result.getFieldValue().toString()))); if (p instanceof StandardizationPolicy) { processedStandardizers++; StandardizationPolicy standardizationPolicy = (StandardizationPolicy) p; boolean shouldStandardize = true; if (isEmpty && !(standardizationPolicy instanceof AcceptsEmptyValues)) { shouldStandardize = false; } if (!standardizationPolicy.accepts(result.getFieldValue())) { shouldStandardize = false; } if (shouldStandardize) { Object newValue = result.getFieldValue(); try { newValue = standardizationPolicy.convertRawValue(result.getFieldValue()); } catch (Exception e) { log.error(\"Standardizer '{}' threw exception while attempting to standardize value, original value will be kept. Exception: {}\", standardizationPolicy.getClass(), e); } if (newValue != null && dataType.getConvertibleType() != newValue.getClass() && standardizerCount == processedStandardizers) { try { boolean isValueOk = dataType.isStringValueValidForHiveType(newValue.toString()); if (!isValueOk) { try { newValue = dataType.toNativeValue(newValue.toString()); } catch (RuntimeException e) { result.addValidationResult(ValidationResult .failField(\"incompatible\", dataType.getName(), \"Not convertible to \" + dataType.getNativeType())); } } } catch (InvalidFormatException e) { log.warn(\"Could not convert value {} to correct type {}\", newValue.toString(), dataType.getConvertibleType().getName()); } } result.setFieldValue(newValue); } } if (p instanceof ValidationPolicy) { ValidationPolicy validationPolicy = (ValidationPolicy) p; if (!isEmpty || validateNullValues || validationPolicy instanceof NotNullValidator) { ValidationResult validationResult = validateValue(validationPolicy, dataType, result.getFieldValue(), validatorParamType); if (isEmpty && validationPolicy instanceof NotNullValidator) { validateNullValues = validationPolicy != VALID_RESULT; } if (validationResult != VALID_RESULT) { result.addValidationResult(validationResult); break; } } if (!(validationPolicy instanceof NotNullValidator)) { validateNullValues = false; } } } ValidationResult finalValidationCheck = finalValidationCheck(fieldPolicy, dataType, result.getFieldValue()); if (finalValidationCheck != VALID_RESULT) { result.addValidationResult(finalValidationCheck); } return result; }### Assistant: @Test public void exceptionsShouldNotStopStandardization() { StandardizationPolicy standardizer = EXCEPTION_POLICY; String fieldName = \"field1\"; List<BaseFieldPolicy> policies = new ArrayList<>(); policies.add(standardizer); FieldPolicy fieldPolicy = FieldPolicyBuilder.newBuilder().addPolicies(policies).tableName(\"emp\").fieldName(fieldName).feedFieldName(fieldName).build(); HCatDataType fieldDataType = HCatDataType.createFromDataType(fieldName, \"string\"); StandardizationAndValidationResult result = validator.standardizeAndValidateField(fieldPolicy, \"aafooaa\", fieldDataType, new HashMap<Class, Class>()); assertEquals(result.getFieldValue(), \"aafooaa\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void addWallet(Wallet wallet) { wallets.add(wallet); }### Assistant: @Test public void timeLockedTransactionNew() throws Exception { connectWithVersion(NetworkParameters.ProtocolVersion.MINIMUM.getBitcoinProtocolVersion(), VersionMessage.NODE_NETWORK); Wallet wallet = new Wallet(PARAMS); ECKey key = wallet.freshReceiveKey(); peer.addWallet(wallet); final Transaction[] vtx = new Transaction[1]; wallet.addCoinsReceivedEventListener(new WalletCoinsReceivedEventListener() { @Override public void onCoinsReceived(Wallet wallet, Transaction tx, Coin prevBalance, Coin newBalance) { vtx[0] = tx; } }); Transaction t1 = FakeTxBuilder.createFakeTx(PARAMS, COIN, key); inbound(writeTarget, t1); GetDataMessage getdata = (GetDataMessage) outbound(writeTarget); inbound(writeTarget, new NotFoundMessage(PARAMS, getdata.getItems())); pingAndWait(writeTarget); Threading.waitForUserCode(); assertNotNull(vtx[0]); vtx[0] = null; Transaction t2 = FakeTxBuilder.createFakeTx(PARAMS, valueOf(2, 0), key); t2.setLockTime(999999); inbound(writeTarget, t2); Threading.waitForUserCode(); assertNull(vtx[0]); wallet.setAcceptRiskyTransactions(true); inbound(writeTarget, t2); getdata = (GetDataMessage) outbound(writeTarget); inbound(writeTarget, new NotFoundMessage(PARAMS, getdata.getItems())); pingAndWait(writeTarget); Threading.waitForUserCode(); assertEquals(t2, vtx[0]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) { final String command = buildFormatCommand(obj); try { toAppendTo.append(getCycAccess().converseString(command)); } catch (Exception ex) { throw new RuntimeException(\"Exception formatting \" + obj, ex); } return toAppendTo; }### Assistant: @Test public void testFormat() throws ParseException { System.out.println(\"format\"); Object obj = instance.parseObject(\"(#$implies (#$isa ?X #$Cat) (#$likesAsFriend ?X #$CycAdministrator))\", new ParsePosition(0)); StringBuffer toAppendTo = new StringBuffer(); FieldPosition pos = null; String expResult = \"(#$implies (#$isa ?X #$Cat) (#$likesAsFriend ?X #$CycAdministrator))\"; instance.setShowHashDollar(true); instance.setWrapLines(false); StringBuffer result = instance.format(obj, toAppendTo, pos); assertEquals(expResult, result.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> Set<T> copyOf(Collection<? extends T> values) { return values.isEmpty() ? Collections.emptySet() : Collections.unmodifiableSet(new HashSet<>(values)); }### Assistant: @Test public void copyOfIsSame() { assertThat(SetUtils.copyOf(Collections.singletonList(\"Jason\")), contains(\"Jason\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private void readMetaInfo(String resource) throws IOException { int startTime = getMetaInfo(resource, \"start\"); this.startTime = (int) TimeUtil.secondsSince1981ToSecondsSinceEpoch(startTime); step = getMetaInfo(resource, \"step\"); final int numberOfRecords = getMetaInfo(resource, \"number of records\"); temperatures = new float[numberOfRecords]; }### Assistant: @Test public void testReadMetaInfo() throws Exception { final DetectorTemperatureProvider provider = getDetectorTemperatureProviderForTesting(); assertEquals(2 * 365 * 24 * 60 * 60 + 366 * 24 * 60 * 60 + 333849750, provider.startTime); assertEquals(300, provider.step); assertEquals(36, provider.temperatures.length); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings( { \"unchecked\", \"rawtypes\" } ) public static ObjectMapper createObjectMapper() { ObjectMapper mapper = new ObjectMapper(); mapper.configure( DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false ); SimpleModule module = new SimpleModule( \"RoboconfModule\", new Version( 1, 0, 0, null, null, null )); for( Map.Entry<Class<?>,? super JsonSerializer<?>> entry : SERIALIZERS.entrySet()) module.addSerializer((Class) entry.getKey(), (JsonSerializer) entry.getValue()); for( Map.Entry<Class<?>,? super JsonDeserializer<?>> entry : DESERIALIZERS.entrySet()) module.addDeserializer((Class) entry.getKey(), (JsonDeserializer) entry.getValue()); mapper.registerModule( module ); return mapper; }### Assistant: @Test public void testScheduledJobBinding_1() throws Exception { final String result = \"{}\"; ObjectMapper mapper = JSonBindingUtils.createObjectMapper(); ScheduledJob job = new ScheduledJob( null ); StringWriter writer = new StringWriter(); mapper.writeValue( writer, job ); String s = writer.toString(); Assert.assertEquals( result, s ); ScheduledJob readJob = mapper.readValue( result, ScheduledJob.class ); Assert.assertNotNull( readJob ); Assert.assertNull( readJob.getJobId()); Assert.assertNull( readJob.getJobName()); Assert.assertNull( readJob.getCmdName()); Assert.assertNull( readJob.getAppName()); Assert.assertNull( readJob.getCron()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void validate(IValidatable<String> validatable) { super.validate(validatable); final String value = validatable.getValue(); if(value==null || value.length()==0) return; try { if(!isNIFValid(value)) validatable.error(new ValidationError(this)); } catch(NumberFormatException e){ validatable.error(new ValidationError(this)); } }### Assistant: @Test public void testInvalidNif() { IValidator<String> validator = new PortugueseNIFValidator(); Validatable<String> validatable = new Validatable<String>(\"124456789\"); validator.validate(validatable); assertEquals(1, validatable.getErrors().size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public NotAvailableFreemarkerServletException() { }### Assistant: @Test public void testNotAvailableFreemarkerServletException() { NotAvailableFreemarkerServletException exception = new NotAvailableFreemarkerServletException(); assertNull(exception.getMessage()); assertNull(exception.getCause()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T8> get8() { return getAndCast(8); }### Assistant: @Test void get8() { assertEquals(m8, instance.get8()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected List<String> getHighestBundleVersions(String... filenames) { if(filenames==null) return Collections.emptyList(); SortedSetMultimap<String, String> map = TreeMultimap.create(Collator.getInstance(), new VersionComparator()); for (String string : filenames) { Matcher matcher = BUNDLE_PATTERN.matcher(string); if(matcher.matches()) { String name = matcher.group(1); String version = matcher.group(2); map.put(name, version); } else { logger.warn(\"{} does not match the pattern {}. Skipping\",string,BUNDLE_PATTERN); } } Set<Entry<String, Collection<String>>> entrySet = map.asMap().entrySet(); List<String> result = new ArrayList<String>(entrySet.size()); for (Entry<String, Collection<String>> entry : entrySet) { result.add(entry.getKey()+\"_\"+entry.getValue().iterator().next()+\".jar\"); } return result; }### Assistant: @Test public void testGetHighestBundleVersions() { List<String> versions = fixture.getHighestBundleVersions(\"a.b_1.0.0.jar\",\"a.b_1.0.1.jar\",\"a.b_2.0.0.jar\",\"a.b_19.0.1.jar\"); assertEquals(1, versions.size()); assertEquals(\"a.b_19.0.1.jar\", versions.get(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String format(final String message) { logger.debug(\"Message: {}\", message); if (null == message) { return null; } final StringReader reader = new StringReader(message); int ch = 0; State state = new Normal(new Stack<>(), new StringWriter()); try { while (0 <= (ch = reader.read())) { logger.trace(\"Char: {} - {}\", ch < 32 ? ' ' : (char) ch, ch); final State old = state; state = state.next(ch); if (old != state) { logger.debug(\"{} -> {}\", old, state); } } } catch (final IOException ex) { throw new IllegalStateException(); } logger.debug(\"State: {}\", state); logger.debug(\"Tags: {}\", state.getTags()); assertTrue(state instanceof Normal, \"Expression is invalid[\" + state + \": \" + message); assertTrue(state.getTags().isEmpty(), \"The closing tag[\" + state.getTags() + \"] missed: \" + message); return state.getWriter().toString(); }### Assistant: @Test public void testFormat() { final String resetCode = randomUUID().toString(); final String blue = randomUUID().toString(); final HashMap<String, String> colors = new HashMap<>(); colors.put(\"blue\", blue); colors.put(\"red\", blue); final AnsiMessagePrinter printer = new AnsiMessagePrinter(mock(PrintStream.class)); printer.setResetCode(resetCode); printer.setColors(colors); final String encoded = printer.format(\"<blue>hello, world</blue>\"); logger.debug(\"Encoded: {}\", encoded); assertTrue(encoded.startsWith(blue)); assertTrue(encoded.contains(\"hello\")); assertTrue(encoded.contains(\"world\")); assertTrue(encoded.endsWith(resetCode)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void initialize(final JobContext context, final Class<?> scope) throws IOException { this.initialize(context.getConfiguration(), scope); }### Assistant: @Test public void test() throws IOException, ClassNotFoundException { final SimpleFeatureType ftype = AnalyticFeature.createGeometryFeatureAdapter( \"centroid\", new String[] {\"extra1\"}, BasicFeatureTypes.DEFAULT_NAMESPACE, ClusteringUtils.CLUSTERING_CRS).getFeatureType(); final GeometryFactory factory = new GeometryFactory(); SimpleFeature feature = AnalyticFeature.createGeometryFeature( ftype, \"b1\", \"123\", \"fred\", \"NA\", 20.30203, factory.createPoint(new Coordinate(0, 0)), new String[] {\"extra1\"}, new double[] {0.022}, 1, 1, 0); final PropertyManagement propertyManagement = new PropertyManagement(); propertyManagement.store(PartitionParameters.Partition.DISTANCE_THRESHOLDS, \"10000\"); propertyManagement.store( CommonParameters.Common.INDEX_MODEL_BUILDER_CLASS, SpatialIndexModelBuilder.class); propertyManagement.store( ExtractParameters.Extract.DIMENSION_EXTRACT_CLASS, SimpleFeatureGeometryExtractor.class); propertyManagement.store(GlobalParameters.Global.CRS_ID, \"EPSG:4326\"); propertyManagement.store(PartitionParameters.Partition.GEOMETRIC_DISTANCE_UNIT, \"m\"); final OrthodromicDistancePartitioner<SimpleFeature> partitioner = new OrthodromicDistancePartitioner<>(); final Configuration configuration = new Configuration(); final Class<?> scope = OrthodromicDistancePartitionerTest.class; propertyManagement.setJobConfiguration(configuration, scope); partitioner.initialize(Job.getInstance(configuration), scope); List<PartitionData> partitions = partitioner.getCubeIdentifiers(feature); assertEquals(4, partitions.size()); assertTrue(hasOnePrimary(partitions)); for (final PartitionData partition : partitions) { final MultiDimensionalNumericData ranges = partitioner.getRangesForPartition(partition); assertTrue(ranges.getDataPerDimension()[0].getMin() < 0.0000000001); assertTrue(ranges.getDataPerDimension()[0].getMax() > -0.0000000001); assertTrue(ranges.getDataPerDimension()[1].getMin() < 0.00000000001); assertTrue(ranges.getDataPerDimension()[1].getMax() > -0.0000000001); } feature = AnalyticFeature.createGeometryFeature( ftype, \"b1\", \"123\", \"fred\", \"NA\", 20.30203, factory.createPoint(new Coordinate(-179.99999996, 0)), new String[] {\"extra1\"}, new double[] {0.022}, 1, 1, 0); partitions = partitioner.getCubeIdentifiers(feature); assertEquals(4, partitions.size()); assertTrue(hasOnePrimary(partitions)); feature = AnalyticFeature.createGeometryFeature( ftype, \"b1\", \"123\", \"fred\", \"NA\", 20.30203, factory.createPoint(new Coordinate(88, 0)), new String[] {\"extra1\"}, new double[] {0.022}, 1, 1, 0); partitions = partitioner.getCubeIdentifiers(feature); assertEquals(2, partitions.size()); assertTrue(hasOnePrimary(partitions)); double maxX = 0; double minX = 0; double maxY = 0; double minY = 0; for (final PartitionData partition : partitions) { final MultiDimensionalNumericData ranges = partitioner.getRangesForPartition(partition); maxX = Math.max(maxX, ranges.getMaxValuesPerDimension()[1]); maxY = Math.max(maxY, ranges.getMaxValuesPerDimension()[0]); minX = Math.min(minX, ranges.getMinValuesPerDimension()[1]); minY = Math.min(minY, ranges.getMinValuesPerDimension()[0]); } assertTrue(maxY > 88.0); assertTrue(minY < 88.0); assertTrue(maxX > 0); assertTrue(minX < 0); try (final ByteArrayOutputStream bs = new ByteArrayOutputStream()) { final ObjectOutputStream os = new ObjectOutputStream(bs); os.writeObject(partitioner); os.flush(); try (final ObjectInputStream is = new ObjectInputStream(new ByteArrayInputStream(bs.toByteArray()))) { @SuppressWarnings(\"unchecked\") final OrthodromicDistancePartitioner<SimpleFeature> partitioner2 = (OrthodromicDistancePartitioner<SimpleFeature>) is.readObject(); assertEquals(partitioner2, partitioner); } } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean accepts(ResourceMethod method) { return ServletFileUpload.isMultipartContent(request); }### Assistant: @Test public void shouldAcceptMultipart() { interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, null); when(request.getContentType()).thenReturn(\"multipart/form-data\"); when(request.getMethod()).thenReturn(\"POST\"); assertThat(interceptor.accepts(method), equalTo(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Attribute getAttribute(String streamName, int columnOrder) { return siddhiManager.getStreamDefinition(streamName).getAttributeList().get(columnOrder); }### Assistant: @Test public void testGetAttribute() throws Exception { assertEquals(\"Expected value not found\", \"name\", metadataService.getAttribute(StreamsHelper.STREAM_NAME, 0).getName()); assertEquals(\"Expected value not found\", \"timestamp\", metadataService.getAttribute(StreamsHelper.STREAM_NAME, 1).getName()); assertEquals(\"Expected value not found\", \"value\", metadataService.getAttribute(StreamsHelper.STREAM_NAME, 2).getName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean removeOperatorToUndeploy(int operatorId) { return operatorsToUndeploy.remove(operatorId); }### Assistant: @Test public void testRemoveOperatorToUndeploy() { int operatorId = 1; underTest.addOperatorToUndeploy(operatorId); Assert.assertTrue(underTest.getOperatorsToUndeploy().contains(operatorId)); underTest.removeOperatorToUndeploy(operatorId); Assert.assertFalse(underTest.getOperatorsToUndeploy().contains(operatorId)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String readPart(Reader reader, char openingChar, char closingChar) throws IOException { StringBuilder part = new StringBuilder(PART_BUFFER_SIZE); int characterCode = reader.read(); int pairCounter = 0; char character; boolean read = false; while (characterCode != -1) { character = (char) characterCode; if (character == openingChar) { read = true; pairCounter++; } if (read) { part.append(character); } if (character == closingChar) { pairCounter--; if (pairCounter == 0) { break; } } characterCode = reader.read(); } if (pairCounter != 0) { throw new IllegalStateException(\"Stream ended but no ending char found! Possibly because of dangling opening char.\"); } return part.toString(); }### Assistant: @Test public void shouldReadPartToEndCharacterLeavingSufixUnchangedInStream() throws IOException { String text = \"{ this is important } leave me alone please\"; StringReader reader = new StringReader(text); String textPart = StreamPartReader.readPart(reader, '{', '}'); assertThat(textPart).isEqualTo(\"{ this is important }\"); assertThat(reader).hasTextLeft(\" leave me alone please\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isFinished() { try { return content.available() == 0; } catch (IOException e) { throw new RuntimeException(e); } }### Assistant: @Test public void isFinished() throws IOException { when(content.available()).thenReturn(0); boolean result = underTest.isFinished(); assertThat(result, is(true)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public UInt16MultiArray clone() { return new UInt16MultiArray(this.layout, this.data); }### Assistant: @Test public void testClone() { UInt16MultiArray clone = a1.clone(); assertEquals(a1.toString(), clone.toString()); assertEquals(a1.toJsonObject(), clone.toJsonObject()); assertEquals(a1.getMessageType(), clone.getMessageType()); assertTrue(Arrays.equals(a1.getData(), clone.getData())); assertEquals(a1.getLayout(), clone.getLayout()); assertEquals(a1.size(), clone.size()); assertNotSame(a1, clone); assertNotSame(a1.toString(), clone.toString()); assertNotSame(a1.toJsonObject(), clone.toJsonObject()); assertNotSame(a1.getData(), clone.getData()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ManifestInfo getManifestInfo() { final Properties properties = new Properties(); final InputStream gitProperties = ClassPathManifestInfoProvider.class.getResourceAsStream(resource); if (gitProperties != null) { try { properties.load(gitProperties); } catch (IOException e) { LOGGER.debug(\"Unable to read from resource '{}'.\", resource, e); } } else { LOGGER.debug(\"Resource '{}' does not exist.\", resource); } final String versionId = Optional.ofNullable(properties.getProperty(\"git.build.version\")).orElse(\"N/A\"); final String buildId = Optional.ofNullable(properties.getProperty(\"git.commit.id.abbrev\")).orElse(\"N/A\"); return new ManifestInfo(versionId, buildId); }### Assistant: @Test public void shouldReadFromFile() throws Exception { final ClassPathManifestInfoProvider provider = new ClassPathManifestInfoProvider(\"/git.properties\", \"source1\"); final ManifestInfo manifestInfo = provider.getManifestInfo(); assertEquals(\"1.0.0\", manifestInfo.getVersionId()); assertEquals(\"abcd1234\", manifestInfo.getBuildId()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting void evaluateOutputDir() { if (isDirectWrite() || isDryRun) { if (outputDir != null) { throw new IllegalStateException( \"--output-dir must not be specified if --reducers is 0 or --dry-run is enabled\"); } if (zkHost == null && (hbaseIndexerName == null || hbaseIndexerZkHost == null)) { throw new IllegalStateException( \"--zk-host must be specified if --reducers is 0 or --dry-run is enabled\"); } return; } if (goLive) { if (outputDir == null) { outputDir = new Path(conf.get(\"hbase.search.mr.tmpdir\", \"/tmp\"), \"search-\" + UUID.randomUUID().toString()); generatedOutputDir = true; } } else { if (outputDir == null) { throw new IllegalStateException(\"Must supply --output-dir unless --go-live is enabled\"); } } }### Assistant: @Test(expected=IllegalStateException.class) public void testEvaluateOutputDir_OutputDirSetAlongWithDirectWriteMode() { opts.outputDir = new Path(\"/some/path\"); opts.reducers = 0; opts.evaluateOutputDir(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CuratorFramework zkCli() { return this.zkCli; }### Assistant: @Test public void testCreateDimitConf() { DimitConf dimit = DimitConf.newBuilder().setCt(System.currentTimeMillis()).setMt(System.currentTimeMillis()) .setId(IDUtil.storeID(Const.V, MagicFlag.DIMIT_CONF)).setV(Const.V).setName(\"voice\").build(); try { String path = dss.zkCli().create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT) .forPath(\"/dimit/dzh/conf/\" + dimit.getId(), dimit.toByteArray()); LOG.info(\"create {}\", path); dss.zkCli().delete().deletingChildrenIfNeeded().forPath(path); LOG.info(\"delete {}\", path); } catch (Exception e) { LOG.error(e.getMessage(), e); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void close() throws IOException { while (!events.isEmpty()) { events.pollFirst().write(delegate); } delegate.close(); }### Assistant: @Test public void testArray() throws Exception { StringWriter result = new StringWriter(); XMLStreamWriter writer = createXmlStreamWriter(result); writer.writeStartDocument(); writer.writeStartElement(\"alice\"); writer.writeStartElement(\"bob\"); writer.writeCharacters(\"charlie\"); writer.writeEndElement(); writer.writeStartElement(\"bob\"); writer.writeCharacters(\"david\"); writer.writeEndElement(); writer.writeEndElement(); writer.writeEndDocument(); writer.close(); Assert.assertEquals(\"{\\\"alice\\\":{\\\"bob\\\":[\\\"charlie\\\",\\\"david\\\"]}}\", result.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable static String route(ContainerRequest request) { ExtendedUriInfo uriInfo = request.getUriInfo(); List<UriTemplate> templates = uriInfo.getMatchedTemplates(); int templateCount = templates.size(); if (templateCount == 0) return \"\"; StringBuilder builder = null; String basePath = uriInfo.getBaseUri().getPath(); String result = null; if (!\"/\" .equals(basePath)) { result = basePath; } for (int i = templateCount - 1; i >= 0; i--) { String template = templates.get(i).getTemplate(); if (\"/\" .equals(template)) continue; if (builder != null) { builder.append(template); } else if (result != null) { builder = new StringBuilder(result).append(template); result = null; } else { result = template; } } return result != null ? result : builder != null ? builder.toString() : \"\"; }### Assistant: @Test public void route_nested() { setBaseUri(\"/\"); when(uriInfo.getMatchedTemplates()).thenReturn(Arrays.asList( new PathTemplate(\"/\"), new PathTemplate(\"/items/{itemId}\"), new PathTemplate(\"/\"), new PathTemplate(\"/nested\") )); assertThat(SpanCustomizingApplicationEventListener.route(request)) .isEqualTo(\"/nested/items/{itemId}\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void identifyPackage(final PackageId packageId, final File file) { guardHandler(INVOKE_ON_IDENTIFY_PACKAGE, handle -> handle.apply(packageId, file)); }### Assistant: @Test public void testIdentifyPackage() throws Exception { final Invocable delegate = mock(Invocable.class); final ScriptProgressCheck.ScriptHelper helper = new ScriptProgressCheck.ScriptHelper(); final ScriptProgressCheck check = new ScriptProgressCheck(delegate, helper, null); final List<Map.Entry<String, Object[]>> argRecord = new ArrayList<>(); doAnswer(call -> argRecord.add(toEntry(call.getArgument(0), call.getArguments()))) .when(delegate).invokeFunction(anyString(), any()); final PackageId arg1 = PackageId.fromString(\"my_packages:example:1.0\"); final File arg2 = new File(\"./foo\"); check.identifyPackage(arg1, arg2); Map.Entry<String, Object[]> call = argRecord.stream() .filter(entry -> \"identifyPackage\".equals(entry.getKey()) && entry.getValue().length == 3).findFirst() .orElse(null); assertNotNull(\"expect call for identifyPackage\", call); assertSame(\"same arg1\", arg1, call.getValue()[1]); assertSame(\"same arg2\", arg2, call.getValue()[2]); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected StanfordPartOfSpeechTagger(){ RedwoodConfiguration.empty().captureStderr().apply(); Properties props = new Properties(); props.put(\"annotators\", \"tokenize, ssplit, pos\"); pipeline = new StanfordCoreNLP(props); RedwoodConfiguration.current().clear().apply(); }### Assistant: @Test public void testStanfordPartOfSpeechTagger() { String s = StanfordPartOfSpeechTagger.INSTANCE.tag(\"The quick brown fox jumps over the lazy dog.\"); assertEquals(\"The/DT quick/JJ brown/JJ fox/NN jumps/VBZ over/IN the/DT lazy/JJ dog/NN ./.\",s); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void tick() { try (Scope ignored = tracer.spanBuilder(\"Styx.BackfillTriggerManager.tick\") .setRecordEvents(true) .setSampler(Samplers.alwaysSample()) .startScopedSpan()) { tick0(); } }### Assistant: @Test public void shouldTriggerBackfillsNew() throws IOException { final Workflow workflow = createWorkflow(WORKFLOW_ID1); initWorkflow(workflow); final int concurrency = BACKFILL_1.concurrency(); backfills.put(BACKFILL_1.id(), BACKFILL_1); backfillTriggerManager.tick(); final List<Instant> instants = instantsInRange(BACKFILL_1.start(), BACKFILL_1.end(), workflow.configuration().schedule()) .subList(0, concurrency); for (Instant instant : instants) { verify(triggerListener).event(workflow, Trigger.backfill(BACKFILL_1.id()), instant, TRIGGER_PARAMETERS); verify(transaction).store(BACKFILL_1.builder().nextTrigger(nextInstant(instant, BACKFILL_1.schedule())).build()); } verify(transaction, times(concurrency)).store(any(Backfill.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static File getFile(String path, String toolHome) { if (StringUtils.isBlank(path)) { return null; } if (!(path.startsWith(\".\") || new File(path).isAbsolute())) { return new File(toolHome, path); } return new File(path); }### Assistant: @Test public void testGetFile_relativePath() { final File toolHomeFile = new File(\".\"); final String toolHome = toolHomeFile.getAbsolutePath(); final File file = FileUtil.getFile(\"schneck\", toolHome); assertNotNull(file); assertEquals(toolHome + File.separator + \"schneck\", file.getAbsolutePath()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Function<Message, ?> protobufPath( Descriptors.Descriptor messageDescriptor, String pathString) { List<PathFragment> fields = ProtobufPathParser.parse(pathString); List<PathFragmentDescriptor> pathFragments = ProtobufPathCompiler.compile(messageDescriptor, fields); return new ProtobufDynamicMessageLens(pathFragments); }### Assistant: @Test public void exampleUsage() { Message message = SimpleMessage.newBuilder().setName(\"bob\").build(); Function<Message, ?> getter = protobufPath(message.getDescriptorForType(), \"$.name\"); assertThat(getter.apply(message), is(\"bob\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Attribute getAttribute(Object feature, String name) throws LayerException { try { return entityMappingService.getAttribute(feature, getFeatureInfo(), entityMapper, name); } catch (GeomajasException e) { throw new LayerException(e); } }### Assistant: @Test public void getAttributeInteger() throws Exception { Assert.assertEquals(10, featureModel.getAttribute(feature1, PARAM_INT_ATTR).getValue()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public LogAction record(double... values) { return record(DEFAULT_RECORDER_NAME, timer.monotonicNow(), values); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testLoggingWithInconsistentValues() { assertTrue(helper.record(1, 2).shouldLog()); helper.record(1, 2); helper.record(1, 2, 3); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Object resolveArgument(MessageContext messageContext, MethodParameter parameter) throws TransformerException, XPathExpressionException { Class<?> parameterType = parameter.getParameterType(); QName evaluationReturnType = getReturnType(parameterType); boolean useConversionService = false; if (evaluationReturnType == null) { evaluationReturnType = XPathConstants.STRING; useConversionService = true; } XPath xpath = createXPath(); xpath.setNamespaceContext(NamespaceUtils.getNamespaceContext(parameter.getMethod())); Element rootElement = getRootElement(messageContext.getRequest().getPayloadSource()); String expression = parameter.getParameterAnnotation(XPathParam.class).value(); Object result = xpath.evaluate(expression, rootElement, evaluationReturnType); return useConversionService ? conversionService.convert(result, parameterType) : result; }### Assistant: @Test public void resolveConvertedType() throws Exception { MockWebServiceMessage request = new MockWebServiceMessage(CONTENTS); MessageContext messageContext = new DefaultMessageContext(request, new MockWebServiceMessageFactory()); Object result = resolver.resolveArgument(messageContext, convertedParameter); assertTrue(\"resolver does not return String\", result instanceof Integer); Integer i = (Integer) result; assertEquals(\"Invalid integer value\", new Integer(42), i); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static PortableDistance fromDistance(Distance distance) { long seconds = (Objects.requireNonNull(distance).millis() + 500) / 1000; return new PortableDistance(String.format(\"%dh %dm %ds\", seconds / 3600, seconds / 60 % 60, seconds % 60)); }### Assistant: @Test void equals_hashCode_toString() { long millis = 173_000; Distance distance = Distance.ofMillis(millis); PortableDistance portableDistance = PortableDistance.fromDistance(distance); assertThat(portableDistance) .isEqualTo(portableDistance) .isEqualTo(PortableDistance.fromDistance(distance)) .isNotEqualTo(null) .isNotEqualTo(millis) .isNotEqualTo(PortableDistance.fromDistance(Distance.ofMillis(millis - 501))) .hasSameHashCodeAs(PortableDistance.fromDistance(distance)) .asString().contains(\"0h 2m 53s\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static public FieldValue evaluateTextIndex(TextIndex textIndex, EvaluationContext context){ FieldName textName = textIndex.getTextField(); if(textName == null){ throw new MissingAttributeException(textIndex, PMMLAttributes.TEXTINDEX_TEXTFIELD); } FieldValue textValue = context.evaluate(textName); FieldValue termValue = ExpressionUtil.evaluateExpressionContainer(textIndex, context); if(FieldValueUtil.isMissing(textValue) || FieldValueUtil.isMissing(termValue)){ return FieldValues.MISSING_VALUE; } TextUtil.TextProcessor textProcessor = new TextUtil.TextProcessor(textIndex, textValue); List<String> textTokens = textProcessor.process(); TextUtil.TermProcessor termProcessor = new TextUtil.TermProcessor(textIndex, termValue); List<String> termTokens = termProcessor.process(); int termFrequency = TextUtil.termFrequency(textIndex, textTokens, termTokens); TextIndex.LocalTermWeights localTermWeights = textIndex.getLocalTermWeights(); switch(localTermWeights){ case BINARY: case TERM_FREQUENCY: return FieldValueUtil.create(TypeInfos.CONTINUOUS_INTEGER, termFrequency); case LOGARITHMIC: return FieldValueUtil.create(TypeInfos.CONTINUOUS_DOUBLE, Math.log10(1d + termFrequency)); default: throw new UnsupportedAttributeException(textIndex, localTermWeights); } }### Assistant: @Test public void evaluateTextIndex(){ FieldName name = FieldName.create(\"x\"); TextIndex textIndex = new TextIndex(name, new Constant(\"user friendly\")) .setWordSeparatorCharacterRE(\"[\\\\s\\\\-]\"); assertEquals(null, evaluate(textIndex, name, null)); assertEquals(1, evaluate(textIndex, name, \"user friendly\")); assertEquals(1, evaluate(textIndex, name, \"user-friendly\")); textIndex = new TextIndex(name, new Constant(\"brown fox\")); String text = \"The quick browny foxy jumps over the lazy dog. The brown fox runs away and to be with another brown foxy.\"; textIndex.setMaxLevenshteinDistance(0); assertEquals(1, evaluate(textIndex, name, text)); textIndex.setMaxLevenshteinDistance(1); assertEquals(2, evaluate(textIndex, name, text)); textIndex.setMaxLevenshteinDistance(2); assertEquals(3, evaluate(textIndex, name, text)); textIndex = new TextIndex(name, new Constant(\"dog\")) .setMaxLevenshteinDistance(1); text = \"I have a doog. My dog is white. The doog is friendly.\"; textIndex.setCountHits(CountHits.ALL_HITS); assertEquals(3, evaluate(textIndex, name, text)); textIndex.setCountHits(CountHits.BEST_HITS); assertEquals(1, evaluate(textIndex, name, text)); textIndex = new TextIndex(name, new Constant(\"sun\")) .setCaseSensitive(false); text = \"The Sun was setting while the captain's son reached the bounty island, minutes after their ship had sunk to the bottom of the ocean.\"; textIndex.setMaxLevenshteinDistance(0); assertEquals(1, evaluate(textIndex, name, text)); textIndex.setMaxLevenshteinDistance(1); assertEquals(3, evaluate(textIndex, name, text)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void step(Program program) { program.fullTrace(); if (CONFIG.vmTrace()) program.saveOpTrace(); try { OpCode op = OpCode.code(program.getCurrentOp()); if (op == null) throw program.new IllegalOperationException(); program.setLastOp(op.val()); long oldMemSize = program.getMemSize(); BigInteger newMemSize = BigInteger.ZERO; Stack<DataWord> stack = program.getStack(); String hint = \"\"; long callGas = 0, memWords = 0; long gasCost = GasCost.STEP; long gasBefore = program.getGas().longValue(); int stepBefore = program.getPC(); program.stackRequire(op.require()); switch (op) { case STOP: case SUICIDE: gasCost = GasCost.STOP; break; case SSTORE: DataWord newValue = stack.get(stack.size()-2); DataWord oldValue = program.storageLoad(stack.peek()); if (oldValue == null && !newValue.isZero()) gasCost = GasCost.SSTORE * 2; else if (oldValue != null && newValue.isZero()) gasCost = GasCost.SSTORE * 0; else gasCost = GasCost.SSTORE; break; case SLOAD: gasCost = GasCost.SLOAD; break; case BALANCE: gasCost = GasCost.BALANCE; break; case MSTORE: newMemSize = memNeeded(stack.peek(), new DataWord(32)); break; case MSTORE8: newMemSize = memNeeded(stack.peek(), new DataWord(1)); break; case MLOAD: newMemSize = memNeeded(stack.peek(), new DataWord(32)); break; case RETURN: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-2)); break; case SHA3: gasCost = GasCost.SHA3; newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-2)); break; case CALLDATACOPY: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-3)); break; case CODECOPY: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-3)); break; case EXTCODECOPY: newMemSize = memNeeded(stack.get(stack.size()-2), stack.get(stack.size()-4)); break; case CALL: case CALLCODE: gasCost = GasCost.CALL; DataWord callGasWord = stack.get(stack.size()-1); if(callGasWord.compareTo(program.getGas()) == 1) { throw program.new OutOfGasException(); } callGas = callGasWord.longValue(); BigInteger in = memNeeded(stack.get(stack.size()-4), stack.get(stack.size()-5)); BigInteger out = memNeeded(stack.get(stack.size()-6), stack.get(stack.size()-7)); newMemSize = in.max(out); break; case CREATE: gasCost = GasCost.CREATE; newMemSize = memNeeded(stack.get(stack.size()-2), stack.get(stack.size()-3)); break; default: break; } program.spendGas(gasCost, op.name()); if(newMemSize.compareTo(MAX_GAS) == 1) { throw program.new OutOfGasException(); } long memoryUsage = (newMemSize.longValue() + 31) / 32 * 32; if (memoryUsage > oldMemSize) { memWords = (memoryUsage - oldMemSize) / 32; long memGas = GasCost.MEMORY * memWords; program.spendGas(memGas, op.name() + \" (memory usage)\"); gasCost += memGas; } if(program.getNumber().intValue() == CONFIG.dumpBlock()) this.dumpLine(op, gasBefore, gasCost+callGas, memWords, program); switch (op) { case STOP:{ program.setHReturn(ByteBuffer.allocate(0)); program.stop(); } break; case ADD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" + \" + word2.value(); word1.add(word2); program.stackPush(word1); program.step(); } break; case MUL:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" * \" + word2.value(); word1.mul(word2); program.stackPush(word1); program.step(); } break; case SUB:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" - \" + word2.value(); word1.sub(word2); program.stackPush(word1); program.step(); } break; case DIV:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" / \" + word2.value(); word1.div(word2); program.stackPush(word1); program.step(); } break; case SDIV:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" / \" + word2.sValue(); word1.sDiv(word2); program.stackPush(word1); program.step(); } break; case MOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" % \" + word2.value(); word1.mod(word2); program.stackPush(word1); program.step(); } break; case SMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" #% \" + word2.sValue(); word1.sMod(word2); program.stackPush(word1); program.step(); } break; case EXP:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" ** \" + word2.value(); word1.exp(word2); program.stackPush(word1); program.step(); } break; case NEG:{ DataWord word1 = program.stackPop(); word1.negate(); if (logger.isInfoEnabled()) hint = \"\" + word1.value(); program.stackPush(word1); program.step(); } break; case LT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" < \" + word2.value(); if (word1.value().compareTo(word2.value()) == -1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case SLT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" < \" + word2.sValue(); if (word1.sValue().compareTo(word2.sValue()) == -1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case SGT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" > \" + word2.sValue(); if (word1.sValue().compareTo(word2.sValue()) == 1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case GT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" > \" + word2.value(); if (word1.value().compareTo(word2.value()) == 1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case EQ:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" == \" + word2.value(); if (word1.xor(word2).isZero()) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case NOT: { DataWord word1 = program.stackPop(); if (word1.isZero()) { word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } if (logger.isInfoEnabled()) hint = \"\" + word1.value(); program.stackPush(word1); program.step(); } break; case AND:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" && \" + word2.value(); word1.and(word2); program.stackPush(word1); program.step(); } break; case OR: { DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" || \" + word2.value(); word1.or(word2); program.stackPush(word1); program.step(); } break; case XOR: { DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" ^ \" + word2.value(); word1.xor(word2); program.stackPush(word1); program.step(); } break; case BYTE:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord result = null; if (word1.value().compareTo(_32_) == -1) { byte tmp = word2.getData()[word1.intValue()]; word2.and(DataWord.ZERO); word2.getData()[31] = tmp; result = word2; } else { result = new DataWord(); } if (logger.isInfoEnabled()) hint = \"\" + result.value(); program.stackPush(result); program.step(); } break; case ADDMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord word3 = program.stackPop(); word1.addmod(word2, word3); program.stackPush(word1); program.step(); } break; case MULMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord word3 = program.stackPop(); word1.mulmod(word2, word3); program.stackPush(word1); program.step(); } break; case SHA3:{ DataWord memOffsetData = program.stackPop(); DataWord lengthData = program.stackPop(); ByteBuffer buffer = program.memoryChunk(memOffsetData, lengthData); byte[] encoded = HashUtil.sha3(buffer.array()); DataWord word = new DataWord(encoded); if (logger.isInfoEnabled()) hint = word.toString(); program.stackPush(word); program.step(); } break; case ADDRESS:{ DataWord address = program.getOwnerAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(address.getLast20Bytes()); program.stackPush(address); program.step(); } break; case BALANCE:{ DataWord address = program.stackPop(); DataWord balance = program.getBalance(address); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(address.getLast20Bytes()) + \" balance: \" + balance.longValue(); program.stackPush(balance); program.step(); } break; case ORIGIN:{ DataWord originAddress = program.getOriginAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(originAddress.getLast20Bytes()); program.stackPush(originAddress); program.step(); } break; case CALLER:{ DataWord callerAddress = program.getCallerAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(callerAddress.getLast20Bytes()); program.stackPush(callerAddress); program.step(); } break; case CALLVALUE:{ DataWord callValue = program.getCallValue(); if (logger.isInfoEnabled()) hint = \"value: \" + callValue; program.stackPush(callValue); program.step(); } break; case CALLDATALOAD:{ DataWord dataOffs = program.stackPop(); DataWord value = program.getDataValue(dataOffs); if (logger.isInfoEnabled()) hint = \"data: \" + value; program.stackPush(value); program.step(); } break; case CALLDATASIZE:{ DataWord dataSize = program.getDataSize(); if (logger.isInfoEnabled()) hint = \"size: \" + dataSize.value(); program.stackPush(dataSize); program.step(); } break; case CALLDATACOPY:{ DataWord memOffsetData = program.stackPop(); DataWord dataOffsetData = program.stackPop(); DataWord lengthData = program.stackPop(); byte[] msgData = program.getDataCopy(dataOffsetData, lengthData); if (logger.isInfoEnabled()) hint = \"data: \" + Hex.toHexString(msgData); program.memorySave(memOffsetData.intValue(), msgData); program.step(); } break; case CODESIZE: case EXTCODESIZE: { int length; if (op == OpCode.CODESIZE) length = program.getCode().length; else { DataWord address = program.stackPop(); length = program.getCodeAt(address).length; } DataWord codeLength = new DataWord(length); if (logger.isInfoEnabled()) hint = \"size: \" + length; program.stackPush(codeLength); program.step(); } break; case CODECOPY: case EXTCODECOPY: { byte[] fullCode; if (op == OpCode.CODECOPY) fullCode = program.getCode(); else { DataWord address = program.stackPop(); fullCode = program.getCodeAt(address); } DataWord memOffsetData = program.stackPop(); BigInteger codeOffsetData = program.stackPop().value(); BigInteger lengthData = program.stackPop().value(); if (fullCode == null || BigInteger.valueOf(fullCode.length).compareTo( codeOffsetData.add(lengthData)) < 0) { program.stop(); break; } int length = lengthData.intValue(); int codeOffset = codeOffsetData.intValue(); byte[] codeCopy = new byte[length]; System.arraycopy(fullCode, codeOffset, codeCopy, 0, length); if (logger.isInfoEnabled()) hint = \"code: \" + Hex.toHexString(codeCopy); program.memorySave(memOffsetData.intValue(), codeCopy); program.step(); } break; case GASPRICE:{ DataWord gasPrice = program.getGasPrice(); if (logger.isInfoEnabled()) hint = \"price: \" + gasPrice.toString(); program.stackPush(gasPrice); program.step(); } break; case PREVHASH: { DataWord prevHash = program.getPrevHash(); if (logger.isInfoEnabled()) hint = \"prevHash: \" + prevHash; program.stackPush(prevHash); program.step(); } break; case COINBASE: { DataWord coinbase = program.getCoinbase(); if (logger.isInfoEnabled()) hint = \"coinbase: \" + Hex.toHexString(coinbase.getLast20Bytes()); program.stackPush(coinbase); program.step(); } break; case TIMESTAMP:{ DataWord timestamp = program.getTimestamp(); if (logger.isInfoEnabled()) hint = \"timestamp: \" + timestamp.value(); program.stackPush(timestamp); program.step(); } break; case NUMBER:{ DataWord number = program.getNumber(); if (logger.isInfoEnabled()) hint = \"number: \" + number.value(); program.stackPush(number); program.step(); } break; case DIFFICULTY:{ DataWord difficulty = program.getDifficulty(); if (logger.isInfoEnabled()) hint = \"difficulty: \" + difficulty; program.stackPush(difficulty); program.step(); } break; case GASLIMIT:{ DataWord gaslimit = program.getGaslimit(); if (logger.isInfoEnabled()) hint = \"gaslimit: \" + gaslimit; program.stackPush(gaslimit); program.step(); } break; case POP:{ program.stackPop(); program.step(); } break; case DUP1: case DUP2: case DUP3: case DUP4: case DUP5: case DUP6: case DUP7: case DUP8: case DUP9: case DUP10: case DUP11: case DUP12: case DUP13: case DUP14: case DUP15: case DUP16:{ int n = op.val() - OpCode.DUP1.val() + 1; DataWord word_1 = stack.get(stack.size() - n); program.stackPush(word_1.clone()); program.step(); } break; case SWAP1: case SWAP2: case SWAP3: case SWAP4: case SWAP5: case SWAP6: case SWAP7: case SWAP8: case SWAP9: case SWAP10: case SWAP11: case SWAP12: case SWAP13: case SWAP14: case SWAP15: case SWAP16:{ int n = op.val() - OpCode.SWAP1.val() + 2; DataWord word_1 = stack.peek(); stack.set(stack.size() - 1, stack.get(stack.size() - n)); stack.set(stack.size() - n, word_1); program.step(); } break; case MLOAD:{ DataWord addr = program.stackPop(); DataWord data = program.memoryLoad(addr); if (logger.isInfoEnabled()) hint = \"data: \" + data; program.stackPush(data); program.step(); } break; case MSTORE:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); if (logger.isInfoEnabled()) hint = \"addr: \" + addr + \" value: \" + value; program.memorySave(addr, value); program.step(); } break; case MSTORE8:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); byte[] byteVal = {value.getData()[31]}; program.memorySave(addr.intValue(), byteVal); program.step(); } break; case SLOAD:{ DataWord key = program.stackPop(); DataWord val = program.storageLoad(key); if (logger.isInfoEnabled()) hint = \"key: \" + key + \" value: \" + val; if (val == null) { val = key.and(DataWord.ZERO); } program.stackPush(val); program.step(); } break; case SSTORE:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); if (logger.isInfoEnabled()) hint = \"addr: \" + addr + \" value: \" + value; program.storageSave(addr, value); program.step(); } break; case JUMP:{ DataWord pos = program.stackPop(); int nextPC = pos.intValue(); if (nextPC != 0 && program.getOp(nextPC-1) != OpCode.JUMPDEST.val()) throw new BadJumpDestinationException(); if (logger.isInfoEnabled()) hint = \"~> \" + nextPC; program.setPC(nextPC); } break; case JUMPI:{ DataWord pos = program.stackPop(); DataWord cond = program.stackPop(); if (!cond.isZero()) { int nextPC = pos.intValue(); if (nextPC != 0 && program.getOp(nextPC-1) != OpCode.JUMPDEST.val()) throw new BadJumpDestinationException(); if (logger.isInfoEnabled()) hint = \"~> \" + nextPC; program.setPC(nextPC); } else { program.step(); } } break; case PC:{ int pc = program.getPC(); DataWord pcWord = new DataWord(pc); if (logger.isInfoEnabled()) hint = pcWord.toString(); program.stackPush(pcWord); program.step(); } break; case MSIZE:{ int memSize = program.getMemSize(); DataWord wordMemSize = new DataWord(memSize); if (logger.isInfoEnabled()) hint = \"\" + memSize; program.stackPush(wordMemSize); program.step(); } break; case GAS:{ DataWord gas = program.getGas(); if (logger.isInfoEnabled()) hint = \"\" + gas; program.stackPush(gas); program.step(); } break; case PUSH1: case PUSH2: case PUSH3: case PUSH4: case PUSH5: case PUSH6: case PUSH7: case PUSH8: case PUSH9: case PUSH10: case PUSH11: case PUSH12: case PUSH13: case PUSH14: case PUSH15: case PUSH16: case PUSH17: case PUSH18: case PUSH19: case PUSH20: case PUSH21: case PUSH22: case PUSH23: case PUSH24: case PUSH25: case PUSH26: case PUSH27: case PUSH28: case PUSH29: case PUSH30: case PUSH31: case PUSH32:{ program.step(); int nPush = op.val() - PUSH1.val() + 1; byte[] data = program.sweep(nPush); hint = \"\" + Hex.toHexString(data); program.stackPush(data); } break; case JUMPDEST:{ program.step(); } break; case CREATE:{ DataWord value = program.stackPop(); DataWord inOffset = program.stackPop(); DataWord inSize = program.stackPop(); if (logger.isInfoEnabled()) logger.info(logString, program.getPC(), String.format(\"%-12s\", op.name()), program.getGas().value(), program.invokeData.getCallDeep(), hint); program.createContract(value, inOffset, inSize); program.step(); } break; case CALL: case CALLCODE: { DataWord gas = program.stackPop(); DataWord codeAddress = program.stackPop(); DataWord value = program.stackPop(); DataWord inDataOffs = program.stackPop(); DataWord inDataSize = program.stackPop(); DataWord outDataOffs = program.stackPop(); DataWord outDataSize = program.stackPop(); if (logger.isInfoEnabled()) { hint = \"addr: \" + Hex.toHexString(codeAddress.getLast20Bytes()) + \" gas: \" + gas.shortHex() + \" inOff: \" + inDataOffs.shortHex() + \" inSize: \" + inDataSize.shortHex(); logger.info(logString, program.getPC(), String.format(\"%-12s\", op.name()), program.getGas().value(), program.invokeData.getCallDeep(), hint); } MessageCall msg = new MessageCall( op.equals(CALL) ? MsgType.CALL : MsgType.STATELESS, gas, codeAddress, value, inDataOffs, inDataSize, outDataOffs, outDataSize); program.callToAddress(msg); program.step(); } break; case RETURN:{ DataWord offset = program.stackPop(); DataWord size = program.stackPop(); ByteBuffer hReturn = program.memoryChunk(offset, size); program.setHReturn(hReturn); if (logger.isInfoEnabled()) hint = \"data: \" + Hex.toHexString(hReturn.array()) + \" offset: \" + offset.value() + \" size: \" + size.value(); program.step(); program.stop(); } break; case SUICIDE:{ DataWord address = program.stackPop(); program.suicide(address); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(program.getOwnerAddress().getLast20Bytes()); program.stop(); } break; default: break; } if (logger.isInfoEnabled() && !op.equals(CALL) && !op.equals(CREATE)) logger.info(logString, stepBefore, String.format(\"%-12s\", op.name()), program.getGas().longValue(), program.invokeData.getCallDeep(), hint); vmCounter++; } catch (RuntimeException e) { if(e instanceof OutOfGasException) program.spendAllGas(); logger.warn(\"VM halted\", e.getMessage()); program.stop(); throw e; } finally { program.fullTrace(); } }### Assistant: @Test public void testMOD_3() { VM vm = new VM(); program = new Program(Hex.decode(\"6004600206\"), invoke); String s_expected_1 = \"0000000000000000000000000000000000000000000000000000000000000002\"; vm.step(program); vm.step(program); vm.step(program); DataWord item1 = program.stackPop(); assertEquals(s_expected_1, Hex.toHexString(item1.getData()).toUpperCase()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void addOrInsertMethod(InsertableMethod insertableMethod) throws CannotCompileException, AfterBurnerImpossibleException { log.info(\"InsertableMethod : \" + insertableMethod); String targetMethodName = insertableMethod.getTargetMethodName(); CtClass classToTransform = insertableMethod.getClassToInsertInto(); CtMethod targetMethod = extractExistingMethod(classToTransform, targetMethodName); log.info(\"Method : \" + targetMethod); if (targetMethod != null) { InsertableMethodInjectorEditor injectorEditor = new InsertableMethodInjectorEditor( classToTransform, insertableMethod); targetMethod.instrument(injectorEditor); if (!injectorEditor.isSuccessful) { throw new CannotCompileException(\"Transformation failed. Insertion method not found.: \" + targetMethodName); } } else { classToTransform.addMethod(CtNewMethod.make( insertableMethod.getFullMethod(), classToTransform)); } }### Assistant: @Test public void testInsertMethod_before() throws Exception { target.addMethod(CtNewMethod.make(\"public void bar() { }\", target)); target.addMethod(CtNewMethod.make(\"public boolean foo() { bar(); return false; }\", target)); target.addField(new CtField(CtClass.intType, \"foo\", target)); InsertableMethod insertableMethod = new SimpleInsertableMethod(target, \"foo\", \"bar\", null, \"foo = 2;\", null); afterBurner.addOrInsertMethod(insertableMethod); targetClass = target.toClass(); targetInstance = targetClass.newInstance(); assertHasFooMethodWithReturnValue(target, false); assertHasFooFieldWithValue(target, 2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean validateCertRequestSanDnsNames(final Map<String, String> attributes, final String domain, final String service, final String dnsSuffix, StringBuilder instanceId) { if (dnsSuffix == null || dnsSuffix.isEmpty()) { LOGGER.error(\"No AWS DNS suffix specified for validation\"); return false; } final String hostnames = InstanceUtils.getInstanceProperty(attributes, InstanceProvider.ZTS_INSTANCE_SAN_DNS); if (hostnames == null || hostnames.isEmpty()) { LOGGER.error(\"Request contains no SAN DNS entries for validation\"); return false; } final String hostNameCheck = service + \".\" + domain.replace('.', '-') + \".\" + dnsSuffix; boolean hostCheck = false; boolean instanceIdCheck = false; String[] hosts = hostnames.split(\",\"); if (hosts.length > 2) { LOGGER.error(\"Request does not contain expected number of SAN DNS entries: {}\", hosts.length); return false; } for (String host : hosts) { int idx = host.indexOf(ZTS_CERT_INSTANCE_ID); if (idx != -1) { instanceId.append(host, 0, idx); if (!dnsSuffix.equals(host.substring(idx + ZTS_CERT_INSTANCE_ID.length()))) { LOGGER.error(\"Host: {} does not have expected instance id format\", host); return false; } instanceIdCheck = true; } else { if (!hostNameCheck.equals(host)) { LOGGER.error(\"Unable to verify SAN DNS entry: {}\", host); return false; } hostCheck = true; } } if (!hostCheck) { LOGGER.error(\"Request does not contain expected host SAN DNS entry\"); return false; } if (!instanceIdCheck && !validateCertRequestUriId(attributes, instanceId)) { LOGGER.error(\"Request does not contain expected instance id entry\"); return false; } return true; }### Assistant: @Test public void testValidateCertRequestHostnamesWithInvalidInstanceIdURI() { HashMap<String, String> attributes = new HashMap<>(); attributes.put(\"sanDNS\", \"api.athenz.athenz.cloud\"); attributes.put(\"sanURI\", \"spiffe: StringBuilder id = new StringBuilder(256); assertFalse(InstanceUtils.validateCertRequestSanDnsNames(attributes, \"athenz\", \"api\", \"athenz.cloud\", id)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void close() throws IOException { if (this.lexer != null) { this.lexer.close(); } }### Assistant: @Test(expected = NoSuchElementException.class) public void testClose() throws Exception { final Reader in = new StringReader(\"# comment\\na,b,c\\n1,2,3\\nx,y,z\"); final CSVParser parser = CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in); final Iterator<CSVRecord> records = parser.iterator(); assertTrue(records.hasNext()); parser.close(); assertFalse(records.hasNext()); records.next(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"deprecation\") static void setConnectionParametersForRequest( HttpURLConnection connection, Request<?> request) throws IOException, AuthFailureError { switch (request.getMethod()) { case Method.DEPRECATED_GET_OR_POST: byte[] postBody = request.getPostBody(); if (postBody != null) { connection.setRequestMethod(\"POST\"); addBody(connection, request, postBody); } break; case Method.GET: connection.setRequestMethod(\"GET\"); break; case Method.DELETE: connection.setRequestMethod(\"DELETE\"); break; case Method.POST: connection.setRequestMethod(\"POST\"); addBodyIfExists(connection, request); break; case Method.PUT: connection.setRequestMethod(\"PUT\"); addBodyIfExists(connection, request); break; case Method.HEAD: connection.setRequestMethod(\"HEAD\"); break; case Method.OPTIONS: connection.setRequestMethod(\"OPTIONS\"); break; case Method.TRACE: connection.setRequestMethod(\"TRACE\"); break; case Method.PATCH: connection.setRequestMethod(\"PATCH\"); addBodyIfExists(connection, request); break; default: throw new IllegalStateException(\"Unknown method type.\"); } }### Assistant: @Test public void connectionForDeprecatedGetRequest() throws Exception { TestRequest.DeprecatedGet request = new TestRequest.DeprecatedGet(); assertEquals(request.getMethod(), Method.DEPRECATED_GET_OR_POST); HurlStack.setConnectionParametersForRequest(mMockConnection, request); verify(mMockConnection, never()).setRequestMethod(anyString()); verify(mMockConnection, never()).setDoOutput(true); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Decomposition decompose() { fDecomposition = new Decomposition(fData); int outerIteration = 0; while (true) { boolean useResidualWeights = outerIteration > 0; for (int iteration = 0; iteration < fInnerIterations; ++iteration) { smoothSeasonalSubCycles(useResidualWeights); removeSeasonality(); updateSeasonalAndTrend(useResidualWeights); } if (++outerIteration > fRobustIterations) break; fDecomposition.computeResidualWeights(); } fDecomposition.updateResiduals(); Decomposition result = fDecomposition; fDecomposition = null; return result; }### Assistant: @Test public void periodicBuilderCanBeReused() { double[] data = SimulatedWeeklyMetric.getFourWeekValues(); int periodicity = 1008; SeasonalTrendLoess.Builder builder = new SeasonalTrendLoess.Builder(); builder.setPeriodLength(periodicity) .setRobust() .setPeriodic() .setFlatTrend(); SeasonalTrendLoess stlSmoother = builder.buildSmoother(data); SeasonalTrendLoess.Decomposition stl = stlSmoother.decompose(); assertNotNull(stl); builder.setRobustnessIterations(17); stlSmoother = builder.buildSmoother(data); stl = stlSmoother.decompose(); assertNotNull(stl); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Path writeFile(byte[] content, Path folderPath, String suffix) { Path path = folderPath.resolve(FILENAME_PREFIX + suffix + \".js\"); if (!Files.exists(path)) { writeFile(content, path); } return path; }### Assistant: @Test public void should_write_content_at_path() throws Exception { byte[] content = \"Mon content\".getBytes(); Path path = WidgetFileHelper.writeFile(content,temporaryFolder.toPath(),\"f8a4574\"); assertThat(path.toFile()).exists(); assertThat(path.getFileName().toString()).isEqualTo(\"widgets-f8a4574.js\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void evalProperties(Properties target, Configuration vars) { ScriptEngine engine = new ScriptEngineManager().getEngineByName(\"javascript\"); Pattern substitutionPattern = Pattern.compile(\"\\\\$\\\\{(.+?)\\\\}\"); Pattern evalPattern = Pattern.compile(\"\\\\{% (.+?) %\\\\}\"); try { engine.eval(\"var _prop = {}\"); for (Map.Entry<String, String> entry : vars) { String evalString = String.format(\"_prop[\\\"%s\\\"] = \\\"%s\\\"\", StringEscapeUtils.escapeJava(entry.getKey()), StringEscapeUtils.escapeJava(entry.getValue())); engine.eval(evalString); } } catch (ScriptException ex) { LOG.warn(\"Javascript error: {}\", ex.getMessage()); } for (Map.Entry<Object, Object> entry : target.entrySet()) { String value = entry.getValue().toString(); Matcher matcher = substitutionPattern.matcher(value); if (matcher.find()) { StringBuilder newValue = new StringBuilder(); int cursor = 0; do { newValue.append(value.substring(cursor, matcher.start())); String subst = vars.get(matcher.group(1)); if (subst != null) { newValue.append(subst); } cursor = matcher.end(); } while (matcher.find()); newValue.append(value.substring(cursor)); target.put(entry.getKey(), newValue.toString()); } matcher = evalPattern.matcher(value); if (matcher.find()) { StringBuilder newValue = new StringBuilder(); int cursor = 0; do { newValue.append(value.substring(cursor, matcher.start())); try { Object result = engine.eval(matcher.group(1)); String eval = result.toString(); if (eval != null) { newValue.append(eval); } } catch (ScriptException ex) { LOG.warn(\"JavaScript exception {}\", ex.getMessage()); } cursor = matcher.end(); } while (matcher.find()); newValue.append(value.substring(cursor)); target.put(entry.getKey(), newValue.toString()); } } }### Assistant: @Test public void testVariableSubstitution() throws Exception { Configuration conf = new Configuration(); conf.set(\"a.b.c\", \"123\"); conf.set(\"x.y.z\", \"foobar\"); Properties prop = new Properties(); prop.put(\"var.result\", \"1111 ${a.b.c} xxx ${x.y.z} yyy\"); StramClientUtils.evalProperties(prop, conf); Assert.assertEquals(\"1111 123 xxx foobar yyy\", prop.get(\"var.result\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Metadata deserialize(Map<String, Object> map) { ConcurrentHashMap<String, Object> store = new ConcurrentHashMap<>(map); return new Metadata(store); }### Assistant: @Test public void deserialize() { Metadata metadata = new MetadataDeserializer().deserialize(map); assertEquals(123, metadata.getMetadata(\"custom\", \"id\")); assertEquals(\"Bloggs\", metadata.getMetadata(\"custom\", \"surname\")); assertTrue((Boolean) metadata.getMetadata(\"data\", \"optIn\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static public void write(Writer out, Operation operation) throws SxmpErrorException, IOException { write(out, operation, true); }### Assistant: @Test public void writeSubmitRequestWithNationalAndApplication() throws Exception { SubmitRequest request = new SubmitRequest(); request.setAccount(new Account(\"customer1\", \"test1\")); request.setApplication(new Application(\"TestApp\")); request.setOperatorId(20); request.setSourceAddress(new MobileAddress(MobileAddress.Type.NATIONAL, \"0123456789\")); request.setDestinationAddress(new MobileAddress(MobileAddress.Type.INTERNATIONAL, \"+13135551212\")); request.setText(\"Hello World\"); StringWriter sw = new StringWriter(); SxmpWriter.write(sw, request); logger.debug(sw.toString()); StringBuilder expectedXML = new StringBuilder(200) .append(\"<?xml version=\\\"1.0\\\"?>\\n\") .append(\"<operation type=\\\"submit\\\">\\n\") .append(\" <account username=\\\"customer1\\\" password=\\\"test1\\\"/>\\n\") .append(\" <application>TestApp</application>\\n\") .append(\" <submitRequest>\\n\") .append(\" <operatorId>20</operatorId>\\n\") .append(\" <priority>0</priority>\\n\") .append(\" <deliveryReport>false</deliveryReport>\\n\") .append(\" <sourceAddress type=\\\"national\\\">0123456789</sourceAddress>\\n\") .append(\" <destinationAddress type=\\\"international\\\">+13135551212</destinationAddress>\\n\") .append(\" <text encoding=\\\"UTF-8\\\">48656C6C6F20576F726C64</text>\\n\") .append(\" </submitRequest>\\n\") .append(\"</operation>\\n\") .append(\"\"); XMLUnit.setIgnoreWhitespace(true); Diff myDiff = new Diff(expectedXML.toString(), sw.toString()); DetailedDiff myDetailedDiff = new DetailedDiff(myDiff); Assert.assertTrue(\"XML are similar \" + myDetailedDiff, myDetailedDiff.similar()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Map<String, Collection<String>> getGroupMapping(XWikiContext context) { return getOneToManyParam(\"groupsMapping\", '|', null, false, context); }### Assistant: @Test public void testGetGroupMappingsWithEmptyProperty() throws Exception { this.mockery.checking(new Expectations() {{ allowing(xwikiMock).getXWikiPreference(\"puma_groupsMapping\", getContext()); will(returnValue(\"\")); allowing(xwikiMock).Param(\"xwiki.authentication.puma.groupsMapping\"); will(returnValue(\"\")); }}); Map<String, Collection<String>> groupMapping = this.config.getGroupMapping(getContext()); Assert.assertTrue(groupMapping.isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean anyMatch(Predicate<? super Map.Entry<K, V>> predicate) { return inner.anyMatch(requireNonNull(predicate)); }### Assistant: @Test void anyMatch() { final Predicate<Map.Entry<String, Integer>> predicate = e -> e.getKey().contains(\"a\"); final boolean expected = refStream().anyMatch(predicate); final boolean actual = instance.anyMatch(predicate); assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = \"/alarms/{alarmId}/subscriptions/{subscriptionId}\", method = RequestMethod.DELETE) @ApiResponses(value={@ApiResponse(code=200, message = \"Deletes the subscription with the given alarm and subscription Ids\")}) public String deleteSubscription(@ApiParam(name=\"alarmId\", value=\"an alarm Id\") @PathVariable(\"alarmId\") final String alarmId, @ApiParam(name = \"subscriptionId\", value = \"a subscription Id\") @PathVariable(\"subscriptionId\") final String subscriptionId) { return subscriptionService.deleteSubscription(alarmId, subscriptionId).name(); }### Assistant: @Test public void test_deleteSubscription() throws Exception{ when(subscriptionService.deleteSubscription(anyString(),anyString())).thenReturn(SubscriptionService.DeletedSubscriptionStatus.OK); mockMvc.perform(delete(\"/alarms/alarmId/subscriptions/subscriptionId\") .accept(MediaType.APPLICATION_JSON_UTF8_VALUE) .contentType(MediaType.APPLICATION_JSON_UTF8_VALUE) ).andExpect(status().isOk()) .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)) .andExpect(jsonPath(\"$\",is(\"OK\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean registerDomObject(String type, Class<? extends WXDomObject> clazz) throws WXException { return WXDomRegistry.registerDomObject(type, clazz); }### Assistant: @Test public void testRegisterDomObject() throws Exception { assertFalse(WXSDKEngine.registerDomObject(\"test\",null)); assertFalse(WXSDKEngine.registerDomObject(\"\", TestDomObject.class)); assertTrue(WXSDKEngine.registerDomObject(\"test\",TestDomObject.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void assertObjectTypesToBindExist(List<FactObjectBindingDefinition> bindingDefinitions, String propertyName) throws InvalidArgumentException { if (CollectionUtils.isEmpty(bindingDefinitions)) return; InvalidArgumentException ex = new InvalidArgumentException(); for (int i = 0; i < bindingDefinitions.size(); i++) { UUID sourceObjectType = bindingDefinitions.get(i).getSourceObjectType(); UUID destinationObjectType = bindingDefinitions.get(i).getDestinationObjectType(); if (sourceObjectType == null && destinationObjectType == null) { ex.addValidationError(\"Object binding definition must specify at least one of 'sourceObjectType' or 'destinationObjectType'.\", \"invalid.object.binding.definition\", String.format(\"%s[%d]\", propertyName, i), \"NULL\"); } if (sourceObjectType != null && objectManager.getObjectType(sourceObjectType) == null) { ex.addValidationError(String.format(\"ObjectType with id = %s does not exist.\", sourceObjectType), \"object.type.not.exist\", String.format(\"%s[%d].sourceObjectType\", propertyName, i), sourceObjectType.toString()); } if (destinationObjectType != null && objectManager.getObjectType(destinationObjectType) == null) { ex.addValidationError(String.format(\"ObjectType with id = %s does not exist.\", destinationObjectType), \"object.type.not.exist\", String.format(\"%s[%d].destinationObjectType\", propertyName, i), destinationObjectType.toString()); } } if (ex.hasErrors()) throw ex; }### Assistant: @Test public void testAssertObjectTypesToBindExistFailsOnDestination() { UUID destinationObjectType = UUID.randomUUID(); List<FactObjectBindingDefinition> definitions = ListUtils.list(new FactObjectBindingDefinition() .setDestinationObjectType(destinationObjectType) ); try { helper.assertObjectTypesToBindExist(definitions, \"property\"); fail(); } catch (InvalidArgumentException ignored) { } verify(objectManager).getObjectType(destinationObjectType); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> createRole(UserDetails userDetails, String userToken, AWSLoginRole awsLoginRole, String path) throws TVaultValidationException { String token = userDetails.getClientToken(); if (userDetails.isAdmin()) { return awsAuthService.createRole(token, awsLoginRole, userDetails); } else { ResponseEntity<String> isAuthorized = isAuthorized(userDetails, path); if (!isAuthorized.getStatusCode().equals(HttpStatus.OK)) { return isAuthorized.getStatusCode().equals(HttpStatus.BAD_REQUEST)?isAuthorized:ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"{\\\"errors\\\":[\\\"Error checking user permission\\\"]}\"); } if (isAuthorized.getBody().equals(TVaultConstants.FALSE)) { return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"{\\\"errors\\\":[\\\"Access denied: no permission to create AWS role\\\"]}\"); } token = userDetails.getSelfSupportToken(); return awsAuthService.createRole(token, awsLoginRole, userDetails); } }### Assistant: @Test public void test_createRole_successfully() throws TVaultValidationException { String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; UserDetails userDetails = getMockUser(false); AWSLoginRole awsLoginRole = new AWSLoginRole(\"ec2\", \"mytestawsrole\", \"ami-fce3c696\", \"1234567890123\", \"us-east-2\", \"vpc-2f09a348\", \"subnet-1122aabb\", \"arn:aws:iam::8987887:role/test-role\", \"arn:aws:iam::877677878:instance-profile/exampleinstanceprofile\", \"\\\"[prod, dev\\\"]\"); ResponseEntity<String> response = ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"AWS Role created \\\"]}\"); ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"AWS Role created \\\"]}\"); when(awsAuthService.createRole(eq(token), eq(awsLoginRole), Mockito.any())).thenReturn(response); mockIsAuthorized(userDetails, true); ResponseEntity<String> responseEntity = selfSupportService.createRole(userDetails, token, awsLoginRole,\"shared/mysafe01\"); assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isSectionVisible(final Section section) { return mSections.get(section).getVisibility() == VISIBLE; }### Assistant: @Test public void testCreationWithTimeSectionVisible() { AttributeSet attributeSet = Robolectric.buildAttributeSet() .addAttribute(R.attr.visibleSection, \"time\") .build(); RouteDescriptionItem item = new RouteDescriptionItem(getContextWithTheme(), attributeSet); assertNotNull(item); assertTrue(item.isSectionVisible(RouteDescriptionItem.Section.TIME)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public PDDocumentHandler addPage(Source<?> source) throws TaskException { return addPage(source, null, PageOrientation.AUTO, 0); }### Assistant: @Test public void imageWithExifRotation() throws TaskException { FileSource source = BaseTaskTest.customNonPdfInputAsFileSource(\"image/with_exif_orientation.JPG\"); ImagesToPdfDocumentConverter converter = new ImagesToPdfDocumentConverter(); PDDocumentHandler d = converter.addPage(source); assertEquals(90, d.getPage(1).getRotation()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String ltrim(String key, long start, long end) { try (Jedis jedis = jedisPool.getResource()) { return jedis.ltrim(key, start, end); } }### Assistant: @Test public void testLtrim() { jedisSentinel.ltrim(\"key\", 1337, 1338); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public final Header getHeader() { return header; }### Assistant: @Test public void testMessageIterator() { Message message = new Message(); java.util.Iterator<Field<?>> i = message.iterator(); assertEquals(false, i.hasNext()); try { assertNull(i.next()); fail(\"exception not thrown\"); } catch (final java.util.NoSuchElementException e) { } try { message = new Message(\"8=FIX.4.2\\0019=12\\00135=A\\001108=30\\00110=026\\001\"); i = message.iterator(); assertTrue(i.hasNext()); StringField field = (StringField) i.next(); assertEquals(108, field.getField()); assertEquals(\"30\", field.getValue()); assertEquals(false, i.hasNext()); try { assertNull(i.next()); fail(\"exception not thrown\"); } catch (final java.util.NoSuchElementException e) { } final java.util.Iterator<Field<?>> j = message.getHeader().iterator(); assertTrue(j.hasNext()); field = (StringField) j.next(); assertEquals(8, field.getField()); assertEquals(\"FIX.4.2\", field.getValue()); field = (StringField) j.next(); assertEquals(9, field.getField()); assertEquals(\"12\", field.getValue()); field = (StringField) j.next(); assertEquals(35, field.getField()); assertEquals(\"A\", field.getValue()); assertEquals(false, j.hasNext()); try { assertNull(j.next()); fail(\"exception not thrown\"); } catch (final java.util.NoSuchElementException e) { } } catch (final InvalidMessage e) { fail(\"exception thrown\"); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Dialog getDialog(final String id) { if (id == null) { LOGGER.warn(\"unable to get form with a null id\"); return null; } if (dialogs == null) { LOGGER.warn(\"dialogs not initialized. can not determine dialog\" + \" with id '\" + id + \"'\"); return null; } for (Dialog dialog : dialogs) { final String currentId = dialog.getId(); if (id.equalsIgnoreCase(currentId)) { return dialog; } } return null; }### Assistant: @Test public void testGetDialogNoDocument() throws Exception { final Dialog dialog = interpreter.getDialog(\"unknown\"); Assert.assertNull(\"execpted to find no form\", dialog); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<String> getAllLHSVariables() { return getLHSVariables(true, true); }### Assistant: @Test public void getAllLHSVariables() { final Pattern52 p = whenThereIsAPattern(\"Applicant\", \"$a1\"); whenPatternHasAField(p, \"field1\", DataType.TYPE_STRING, \"$f1\"); final BRLConditionColumn brl1 = whenThereIsABRLFactPattern(\"Applicant\", \"$a2\"); whenBRLFactPatternHasAField(brl1, \"field1\", DataType.TYPE_STRING, \"$f2\"); final BRLConditionColumn brl2 = whenThereIsABRLFromCompositeFactPattern(\"Applicant\", \"$a3\"); whenBRLFromCompositeFactPatternHasAField(brl2, \"field1\", DataType.TYPE_STRING, \"$f3\"); assertLHSBindings(\"$a1\", \"$a2\", \"$a3\", \"$f1\", \"$f2\", \"$f3\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public long getSpaceFree() { return backingStore.getSpaceFree(); }### Assistant: @Test public void delegatedGetSpaceFree() { when(backingStore.getSpaceFree()).thenReturn(124L); assertEquals(124L, cachingStore.getSpaceFree()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ResponseEntity<String> updatePolicy( String token, AccessPolicy accessPolicy){ String jsonStr = JSONUtil.getJSON(accessPolicy); log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Update Policy\"). put(LogMessage.MESSAGE, String.format(\"Trying to update policy [%s]\", jsonStr)). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); Response response = reqProcessor.process(\"/access/update\",jsonStr,token); if(response.getHttpstatus().equals(HttpStatus.NO_CONTENT)) { log.debug(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Update Policy\"). put(LogMessage.MESSAGE, \"Policy Update completed successfully\"). put(LogMessage.STATUS, response.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(HttpStatus.OK).body(\"{\\\"messages\\\":[\\\"Policy updated \\\"]}\"); } log.error(JSONUtil.getJSON(ImmutableMap.<String, String>builder(). put(LogMessage.USER, ThreadLocalContext.getCurrentMap().get(LogMessage.USER).toString()). put(LogMessage.ACTION, \"Update Policy\"). put(LogMessage.MESSAGE, \"Policy Update failed\"). put(LogMessage.RESPONSE, response.getResponse()). put(LogMessage.STATUS, response.getHttpstatus().toString()). put(LogMessage.APIURL, ThreadLocalContext.getCurrentMap().get(LogMessage.APIURL).toString()). build())); return ResponseEntity.status(response.getHttpstatus()).body(response.getResponse()); }### Assistant: @Test public void test_updateAccessPolicy_failure_400() { String responseBody = \"{\\\"errors\\\":[\\\"Requried Parameter Missing : accessid\\\"]}\"; Response response =getMockResponse(HttpStatus.BAD_REQUEST, true, responseBody); String token = \"5PDrOhsy4ig8L3EpsJZSLAMg\"; HashMap<String, String> access = new HashMap<>(); access.put(\"users/*\", \"read\"); access.put(\"apps/*\", \"read\"); access.put(\"shared/*\", \"read\"); AccessPolicy accessPolicy = new AccessPolicy(); accessPolicy.setAccess(access); String jsonStr = \"{\\\"access\\\": {\\\"users/*\\\": \\\"read\\\", \\\"apps/*\\\": \\\"read\\\",\\\"shared/*\\\": \\\"read\\\"}\\\"}\"; ResponseEntity<String> responseEntityExpected = ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseBody); when(reqProcessor.process(\"/access/update\",jsonStr,token)).thenReturn(response); when(JSONUtil.getJSON(accessPolicy)).thenReturn(jsonStr); ResponseEntity<String> responseEntity = accessService.updatePolicy(token, accessPolicy); assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); assertEquals(responseEntityExpected, responseEntity); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"WeakerAccess\") public @NotNull List<BluetoothGattService> getServices() { if (bluetoothGatt != null) { return bluetoothGatt.getServices(); } return Collections.emptyList(); }### Assistant: @Test public void onServicesDiscoveredTest() throws Exception { BluetoothGattCallback callback = connectAndGetCallback(); BluetoothGattService service = mock(BluetoothGattService.class); when(service.getUuid()).thenReturn(SERVICE_UUID); when(gatt.getServices()).thenReturn(Arrays.asList(service)); BluetoothGattCharacteristic characteristic = mock(BluetoothGattCharacteristic.class); when(characteristic.getProperties()).thenReturn(PROPERTY_READ); when(service.getCharacteristics()).thenReturn(Arrays.asList(characteristic)); callback.onServicesDiscovered(gatt, 0); List<UUID> expected = Arrays.asList(SERVICE_UUID); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CSVReaderDataPool(CSVDataPool configuration) { super(configuration); this.delimiter = configuration.getDelimiter().get(); }### Assistant: @Test public void testCSVReaderDataPool() { DataSet<?> pool = getDataPool(\"File.csv\"); Assert.assertEquals(\"row12\", ((SimpleStringMap)pool.next().getValue()).get(\"Col2\").toString()); Assert.assertEquals(\"\", ((SimpleStringMap)pool.next().getValue()).get(\"Col4\").toString()); pool.close(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static void validateMultiValueFunctionGenericTypes(Class<?>[] typeArgs, Class<?> subType) { if (typeArgs == null) { throw new IllegalStateException(\"Could not resolve any generic type information from the given \" + \"function of type: \" + subType.getName() + \". \" + GENERIC_TYPE_RESOLUTION_FAILURE_MESSAGE); } if (typeArgs.length != 3 || typeArgs[0] == TypeResolver.Unknown.class) { throw new IllegalStateException(\"Could not resolve sufficient generic type information from the given \" + \"function of type: \" + subType.getName() + \", resolved: \" + Arrays.toString(typeArgs) + \". \" + GENERIC_TYPE_RESOLUTION_FAILURE_MESSAGE); } }### Assistant: @Test(expected = IllegalStateException.class) public void testValidateMultiValueFunctionGenericTypes_IncorrectNumberOfTypeArgs() { Class<?>[] typeArgs = new Class<?>[] {Car.class, Integer.class}; validateMultiValueFunctionGenericTypes(typeArgs, MultiValueFunction.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void install(File artifact) throws Exception { LOGGER.debug(\"ConnectorDeployer.install(\\\"{}\\\")\", artifact.getAbsolutePath()); synchronized (failedInstalls) { if (!doInstall(artifact)) { failedInstalls.add(artifact); } } }### Assistant: @Test public void testConnectorFileWithArrays_shouldBeInstalled() throws Exception { File connectorFile = temporaryFolder.newFile(TEST_FILE_NAME); FileUtils.writeStringToFile(connectorFile, testConnectorData + \"\\nproperty.bla=foo,bar\"); connectorDeployerService.install(connectorFile); serviceUtils.getService(\"(bla=foo)\", 100L); serviceUtils.getService(\"(bla=bar)\", 100L); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void loadNativeAd(@NonNull final Context context, @NonNull final Map<String, Object> localExtras, @NonNull final DownloadResponse downloadResponse, @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) { final String customEventNativeData = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA); final String customEventNativeClassName = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME); final CustomEventNative customEventNative; try { customEventNative = CustomEventNativeFactory.create(customEventNativeClassName); } catch (Exception e) { MoPubLog.w(\"Failed to load Custom Event Native class: \" + customEventNativeClassName); customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND); return; } Map<String, String> serverExtras = new HashMap<String, String>(); try { serverExtras = Json.jsonStringToMap(customEventNativeData); } catch (Exception e) { MoPubLog.w(\"Failed to create Map from JSON: \" + customEventNativeData, e); } serverExtras.put(RESPONSE_BODY_KEY, HttpResponses.asResponseString(downloadResponse)); customEventNative.loadNativeAd( context, customEventNativeListener, localExtras, serverExtras ); }### Assistant: @Test public void loadNativeAd_withInvalidClassName_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception { testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), \"com.mopub.baaad.invalidinvalid123143\"); downloadResponse = new DownloadResponse(testHttpResponseWithHeaders); CustomEventNativeAdapter.loadNativeAd(context, localExtras, downloadResponse, mCustomEventNativeListener); verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND); verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class)); verify(mCustomEventNative, never()).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) { RequestMappingInfo info = createRequestMappingInfo(method); if (info != null) { RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType); if (typeInfo != null) { info = typeInfo.combine(info); } if (shouldAddClassNameContext(handlerType)) { RequestMappingInfo prefixMappingInfo = prefixMappingInfo(handlerType); info = prefixMappingInfo.combine(info); } } return info; }### Assistant: @Test public void shouldAddRequestMappingValueAfterApiControllerPrefixes() throws Exception { apiProps.getResources().setDefaultPrefix(\"v1\"); apiProps.getResources().setClassNamePattern(\"?Controller\"); mappingHandler(apiProps); RequestMappingInfo info = handlerMapping.getMappingForMethod(ClassMappingController.class.getMethod(\"get\"), ClassMappingController.class); assertPattern(info, \"/v1/class-mapping/hi/get\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public FDBRecordVersion next() { if (isComplete()) { byte[] newVersionBytes = Arrays.copyOf(versionBytes, VERSION_LENGTH); boolean stopped = false; for (int i = newVersionBytes.length - 1; i >= 0; i--) { if (((int) newVersionBytes[i] & 0xff) == 0xff) { newVersionBytes[i] = 0x00; } else { newVersionBytes[i] = (byte) (((int) newVersionBytes[i] & 0xff) + 1); stopped = true; break; } } if (!stopped || !isGlobalVersionComplete(newVersionBytes)) { throw new RecordCoreException(\"Attempted to increment maximum version\"); } return FDBRecordVersion.complete(newVersionBytes, false); } else { return FDBRecordVersion.incomplete(getLocalVersion() + 1); } }### Assistant: @Test public void nextAfterMax() { assertThrows(RecordCoreException.class, () -> FDBRecordVersion.MAX_VERSION.next()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public short readShort() { return (short) ((data[position++] & 0xFF) << 8 | (data[position++] & 0xFF)); }### Assistant: @Test public void testReadShort() { testReadShort((short) -1); testReadShort((short) 0); testReadShort((short) 1); testReadShort(Short.MIN_VALUE); testReadShort(Short.MAX_VALUE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Runnable managedTask(Runnable task, ManagedTaskListener taskListener) throws IllegalArgumentException { return managedTask(task, null, taskListener); }### Assistant: @Test public void testManagedTask_Runnable_ManagedTask() { ManagedTaskListenerImpl TASK_LISTENER = new ManagedTaskListenerImpl(); Map<String, String> EXEC_PROPERTIES = new HashMap<String, String>(); EXEC_PROPERTIES.put(\"custom\", \"true\"); EXEC_PROPERTIES.put(ManagedTask.LONGRUNNING_HINT, \"false\"); final String TASK_DESCRIPTION = \"task1 description\"; ManagedTaskRunnableImpl task = new ManagedTaskRunnableImpl(TASK_DESCRIPTION, EXEC_PROPERTIES, TASK_LISTENER); ManagedTaskListenerImpl taskListener = new ManagedTaskListenerImpl(); Map<String, String> executionProperties = new HashMap<String, String>(); final String TASK_NAME = \"task1\"; executionProperties.put(ManagedTask.IDENTITY_NAME, TASK_NAME); executionProperties.put(ManagedTask.LONGRUNNING_HINT, \"true\"); Runnable wrapped = ManagedExecutors.managedTask(task, executionProperties, taskListener); ManagedTask managedTask = (ManagedTask) wrapped; assertTrue(taskListener == managedTask.getManagedTaskListener()); assertEquals(\"true\", managedTask.getExecutionProperties().get(ManagedTask.LONGRUNNING_HINT)); assertEquals(TASK_NAME, managedTask.getExecutionProperties().get(ManagedTask.IDENTITY_NAME)); assertEquals(\"true\", managedTask.getExecutionProperties().get(\"custom\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean equals(Object obj) { if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } final FilterReport other = (FilterReport) obj; if (this.filterType != other.filterType) { return false; } if (!Objects.equals(this.messages, other.messages)) { return false; } if (this.passed != other.passed) { return false; } return this.failed == other.failed; }### Assistant: @Test public void testEqualsOtherClassIsFalse() { Object obj = \"string\"; assertThat(instance.equals(obj), is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = \"role/{role}\", method = RequestMethod.GET) public Boolean claimContainsRole(@PathVariable final String role, final HttpServletRequest request) { final Claims claims = (Claims) request.getAttribute(JwtFilter.ATTRIBUTE_CLAIMS); if (claims == null || claims.isEmpty()) { return false; } return getRoles(claims).stream().anyMatch(map -> map.containsValue(role)); }### Assistant: @Test public void testClaimsWithoutRoles() { final boolean containsRole; final Claims claims = Jwts.claims().setSubject(\"test\"); Mockito.when(mockHttpServletRequest.getAttribute(JwtFilter.ATTRIBUTE_CLAIMS)).thenReturn(claims); containsRole = userController.claimContainsRole(ROLE, mockHttpServletRequest); assertFalse(containsRole); Mockito.verify(mockHttpServletRequest).getAttribute(JwtFilter.ATTRIBUTE_CLAIMS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void unregisterDriver(){ String jdbcURL = this.config.getJdbcUrl(); if ((jdbcURL != null) && this.config.isDeregisterDriverOnClose()){ logger.info(\"Unregistering JDBC driver for : \"+jdbcURL); try { DriverManager.deregisterDriver(DriverManager.getDriver(jdbcURL)); } catch (SQLException e) { logger.info(\"Unregistering driver failed.\", e); } } }### Assistant: @Test public void testUnregisterDriver() { expect(mockConfig.isDeregisterDriverOnClose()).andReturn(true).anyTimes(); expect(mockConfig.getJdbcUrl()).andReturn(\"jdbc:mock\").anyTimes(); replay(mockConfig); try { Assert.assertNotNull(DriverManager.getDriver(\"jdbc:mock\")); } catch (SQLException e1) { fail(\"SQLException thrown\"); } testClass.unregisterDriver(); testClass.unregisterDriver(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getMessage() { return this.message; }### Assistant: @Test public void getMessageTest() { SpeechRecognitionErrorEvent sRE = new SpeechRecognitionErrorEvent(\"Message\"); assertEquals(\"Message\", sRE.getMessage(), \"SpeechRecognitionErrorEvent.getMessage() method failed\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SupportedEncodings parseEncodings( DeegreeWMS jaxbConfig ) { SupportedRequests supportedRequests = jaxbConfig.getSupportedRequests(); if ( supportedRequests != null ) { if ( isAtLeastOneRequestTypeConfigured( supportedRequests ) || isGlobalSupportedEncodingsConfigured( supportedRequests ) ) return parseEncodings( supportedRequests ); } return new UnlimitedSupportedEncodings(); }### Assistant: @Test public void testParseEncodingsWithRequestTypeSpecific() { DeegreeWMS deegreeWmsConfig = prepareSupportedRequestsWithRequestTypeSpecific(); LimitedSupportedEncodings limitedSupportedEncodings = (LimitedSupportedEncodings) webFeatureService.parseEncodings( deegreeWmsConfig ); Map<WMSRequestType, Set<String>> enabledEncodings = limitedSupportedEncodings.getEnabledEncodingsPerRequestType(); Set<String> getCapabilitiesEncodings = enabledEncodings.get( GetCapabilities ); assertThat( getCapabilitiesEncodings, hasOnlyItems( \"xml\", \"soap\" ) ); Set<String> describeLayerEncodings = enabledEncodings.get( DescribeLayer ); assertThat( describeLayerEncodings, hasOnlyItems( \"xml\" ) ); Set<String> getMapEncodings = enabledEncodings.get( GetMap ); assertThat( getMapEncodings, hasOnlyItems( \"xml\" ) ); Set<String> mapEncodings = enabledEncodings.get( map ); assertThat( mapEncodings, hasOnlyItems( \"xml\" ) ); Set<String> getFeatureInfoEncodings = enabledEncodings.get( GetFeatureInfo ); assertThat( getFeatureInfoEncodings.size(), is( 0 ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); }### Assistant: @Test public void isExecutable_CellsAndHeaderCellsSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Arrays.asList(selectedCell)); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell2)); assertFalse(handler.isExecutable(scenarioGridMock)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: List<Executor> fetchAllExecutors() throws ExecutorManagerException { try { return this.dbOperator .query(FetchExecutorHandler.FETCH_ALL_EXECUTORS, new FetchExecutorHandler()); } catch (final Exception e) { throw new ExecutorManagerException(\"Error fetching executors\", e); } }### Assistant: @Test public void testFetchAllExecutors() throws Exception { final List<Executor> executors = addTestExecutors(); executors.get(0).setActive(false); this.executorDao.updateExecutor(executors.get(0)); final List<Executor> fetchedExecutors = this.executorDao.fetchAllExecutors(); assertThat(executors.size()).isEqualTo(fetchedExecutors.size()); assertThat(executors.toArray()).isEqualTo(fetchedExecutors.toArray()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String write(GeometryWrapper geometryWrapper) { Geometry geometry = geometryWrapper.getParsingGeometry(); CoordinateSequenceDimensions dimensions = geometryWrapper.getCoordinateSequenceDimensions(); String srsName = geometryWrapper.getSrsURI(); Element gmlElement = expand(geometry, dimensions, srsName); String output = XML_OUTPUT.outputString(gmlElement); return output; }### Assistant: @Test public void testWritePolygon2() { LinearRing shell = GEOMETRY_FACTORY.createLinearRing(new CustomCoordinateSequence(CoordinateSequenceDimensions.XY, \"30 10, 40 40, 20 40, 10 20, 30 10\")); LinearRing[] holes = new LinearRing[]{GEOMETRY_FACTORY.createLinearRing(new CustomCoordinateSequence(CoordinateSequenceDimensions.XY, \"20 30, 35 35, 30 20, 20 30\"))}; Geometry geometry = GEOMETRY_FACTORY.createPolygon(shell, holes); GeometryWrapper geometryWrapper = new GeometryWrapper(geometry, GML_SRS_NAMESPACE, GMLDatatype.URI, new DimensionInfo(2, 2, 0)); String result = GMLWriter.write(geometryWrapper); String expResult = \"<gml:Polygon xmlns:gml=\\\"http: assertEquals(expResult.trim(), result.trim()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void addOFSwitchListener(IOFSwitchListener listener) { this.switchListeners.add(listener); }### Assistant: @Test public void testUpdateQueue() throws Exception { class DummySwitchListener implements IOFSwitchListener { public int nAdded; public int nRemoved; public int nPortChanged; public DummySwitchListener() { nAdded = 0; nRemoved = 0; nPortChanged = 0; } public synchronized void addedSwitch(IOFSwitch sw) { nAdded++; notifyAll(); } public synchronized void removedSwitch(IOFSwitch sw) { nRemoved++; notifyAll(); } public String getName() { return \"dummy\"; } @Override public void switchPortChanged(Long switchId) { nPortChanged++; notifyAll(); } } DummySwitchListener switchListener = new DummySwitchListener(); IOFSwitch sw = createMock(IOFSwitch.class); ControllerRunThread t = new ControllerRunThread(); t.start(); controller.addOFSwitchListener(switchListener); synchronized(switchListener) { controller.updates.put(controller.new SwitchUpdate(sw, Controller.SwitchUpdateType.ADDED)); switchListener.wait(500); assertTrue(\"IOFSwitchListener.addedSwitch() was not called\", switchListener.nAdded == 1); controller.updates.put(controller.new SwitchUpdate(sw, Controller.SwitchUpdateType.REMOVED)); switchListener.wait(500); assertTrue(\"IOFSwitchListener.removedSwitch() was not called\", switchListener.nRemoved == 1); controller.updates.put(controller.new SwitchUpdate(sw, Controller.SwitchUpdateType.PORTCHANGED)); switchListener.wait(500); assertTrue(\"IOFSwitchListener.switchPortChanged() was not called\", switchListener.nPortChanged == 1); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public RaftActorBehavior handleMessage(final ActorRef sender, final Object message) { if (message instanceof ElectionTimeout) { log.debug(\"{}: Received ElectionTimeout\", logName()); if (votesRequired == 0) { return internalSwitchBehavior(RaftState.Leader); } startNewTerm(); scheduleElection(electionDuration()); return this; } if (message instanceof RaftRPC) { RaftRPC rpc = (RaftRPC) message; log.debug(\"{}: RaftRPC message received {}, my term is {}\", logName(), rpc, context.getTermInformation().getCurrentTerm()); if (rpc.getTerm() > context.getTermInformation().getCurrentTerm()) { log.info(\"{}: Term {} in \\\"{}\\\" message is greater than Candidate's term {} - switching to Follower\", logName(), rpc.getTerm(), rpc, context.getTermInformation().getCurrentTerm()); context.getTermInformation().updateAndPersist(rpc.getTerm(), null); if (message instanceof RequestVote) { super.handleMessage(sender, message); } return internalSwitchBehavior(RaftState.Follower); } } return super.handleMessage(sender, message); }### Assistant: @Test public void testHandleElectionTimeoutWhenThereAreTwoNodeCluster() { MockRaftActorContext raftActorContext = createActorContext(); raftActorContext.setPeerAddresses(setupPeers(1)); candidate = new Candidate(raftActorContext); candidate = candidate.handleMessage(candidateActor, ElectionTimeout.INSTANCE); assertEquals(\"Behavior\", RaftState.Candidate, candidate.state()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String createHashCode(String stringToHash) { String trimmed = trimIfNotNull(stringToHash); if (trimmed == null) { return null; } return Hashing.murmur3_128().hashString(trimmed, Charsets.UTF_8).toString(); }### Assistant: @Test public void testHashingWithNullValues(TestContext context){ String hash = HashCodeGenerator.createHashCode(null, null); String sameHash = HashCodeGenerator.createHashCode(null, null); context.assertEquals(hash, sameHash, \"hash values should be identical\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Helper<C> getHelper(String name) { return this.helpers.get(name); }### Assistant: @Test void getHelper() { Helper<TestConnector> helper = this.manager.getHelper(\"test\"); assertNotNull(helper); assertEquals(this.testHelper, helper); assertNull(this.manager.getHelper(\"no-test\")); TestHelper test = this.manager.getHelper(\"test\", TestHelper.class); assertNotNull(test); assertEquals(this.testHelper, test); assertThrows(IllegalArgumentException.class, () -> this.manager.getHelper(\"test\", BlankHelper.class)); assertNull(this.manager.getHelper(\"no-test\", TestHelper.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static File getReportsDirectory(Settings settings, FileSystem fs, PathResolver pathResolver) { File dir = getReportsDirectoryFromProperty(settings, fs, pathResolver); if (dir == null) { dir = new File(fs.baseDir(), \"target/surefire-reports\"); } return dir; }### Assistant: @Test public void return_default_value_if_property_unset() throws Exception { File directory = SurefireUtils.getReportsDirectory(mock(Settings.class), fs, pathResolver); assertThat(directory.getCanonicalPath()).endsWith(\"target\" + File.separator + \"surefire-reports\"); assertThat(directory.exists()).isFalse(); assertThat(directory.isDirectory()).isFalse(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public T getTransformer() { return transformer; }### Assistant: @Test void getTransformer() { TestTransformer transformer = new TestTransformer(); TestMappedEntity entity = new TestMappedEntity(transformer, StandardEntity.class); assertEquals(transformer, entity.getTransformer()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Individual create() { Individual individual = individualProvider.get(); individual.setIndividualStatusListeners(individualStateListeners); Genotype genotype = creator.create(); individual.setGenotype(genotype); return individual; }### Assistant: @Test public void createTest() { AbstractIndividualFactory<Individual> factory = getFactory(); init(factory); Individual individual = factory.create(); Assert.assertTrue(individual.individualStateListeners.contains(listener)); Assert.assertNotNull(individual.genotype); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getPMMLRuleMapperSource(final String fullRuleName) { final String packageName = fullRuleName.contains(\".\") ? fullRuleName.substring(0, fullRuleName.lastIndexOf('.')) : \"\"; CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(KIE_PMML_RULE_MAPPER_CLASS_NAME, packageName, KIE_PMML_RULE_MAPPER_TEMPLATE_JAVA, KIE_PMML_RULE_MAPPER_CLASS_NAME); ClassOrInterfaceDeclaration typeDeclaration = (ClassOrInterfaceDeclaration) cloneCU.getTypes().get(0); FieldDeclaration ruleNameField = typeDeclaration.getFieldByName(\"model\").orElseThrow(() -> new RuntimeException(\"The template \" + KIE_PMML_RULE_MAPPER_TEMPLATE_JAVA + \" has been modified.\")); ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr(); objectCreationExpr.setType(fullRuleName); ruleNameField.getVariables().get(0).setInitializer(objectCreationExpr); return cloneCU.toString(); }### Assistant: @Test public void getPredictionRuleMapperSourceWithoutPackage() { final String fullRuleName = \"FULL_RULE_NAME\"; String retrieved = PMMLRuleMapperFactory.getPMMLRuleMapperSource(fullRuleName); assertNotNull(retrieved); String expected = String.format(\"public final static Model model = new %s();\", fullRuleName); assertTrue(retrieved.contains(expected)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(\"/\") public ModelAndView index(HttpSession session) throws XMPPException { ExtendedXMPPConnection client = (ExtendedXMPPConnection) session.getAttribute(SESSION_ATTRIBUTE); if (client == null) { return login(); } else if (!client.isConnected()) { return login(\"Disconnected from XMPP server, please log in again\"); } else { ModelAndView mav = new ModelAndView(\"index\"); mav.addObject(MODEL_AUTHENTICATED, getUserName(client)); return mav; } }### Assistant: @Test public void indexNotAuthenticated() throws XMPPException { ModelAndView mav = controller.index(session); Assert.assertEquals(\"index\", mav.getViewName()); Assert.assertNull(mav.getModel().get(\"authenticated\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Path(\"{clientId}\") @Timed @ExceptionMetered @GET public ClientDetailResponse getClient(@Auth User user, @PathParam(\"clientId\") LongParam clientId) { logger.info(\"User '{}' retrieving client id={}.\", user, clientId); return clientDetailResponseFromId(clientId.get()); }### Assistant: @Test public void includesAssociations() { Group group1 = new Group(0, \"group1\", null, null, null, null, null, null); Group group2 = new Group(0, \"group2\", null, null, null, null, null, null); Secret secret = new Secret(15, \"secret\", null, () -> \"supersecretdata\", \"checksum\", now, \"creator\", now, \"updater\", null, null, null, 0, 1L, now, \"updater\"); when(clientDAO.getClientById(1)).thenReturn(Optional.of(client)); when(aclDAO.getGroupsFor(client)).thenReturn(Sets.newHashSet(group1, group2)); when(aclDAO.getSanitizedSecretsFor(client)) .thenReturn(ImmutableSet.of(SanitizedSecret.fromSecret(secret))); ClientDetailResponse response = resource.getClient(user, new LongParam(\"1\")); assertThat(response.groups).containsOnly(group1, group2); assertThat(response.secrets).containsOnly(SanitizedSecret.fromSecret(secret)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public double getMin(Graph graph) { if (nodeIndexStore == null || edgeIndexStore == null) { return Double.NEGATIVE_INFINITY; } double nodeMin = nodeIndexStore.getIndex(graph).getMinTimestamp(); double edgeMin = edgeIndexStore.getIndex(graph).getMinTimestamp(); if (Double.isInfinite(nodeMin)) { return edgeMin; } if (Double.isInfinite(edgeMin)) { return nodeMin; } return Math.min(nodeMin, edgeMin); }### Assistant: @Test public void testGetMinNull() { GraphStore graphStore = new GraphStore(); TimeStore store = new TimeStore(graphStore, null, true); Assert.assertEquals(store.getMin(graphStore), Double.NEGATIVE_INFINITY); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FDFlowEvent addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user) { if (flowEvent == null) { throw new IllegalArgumentException(\"Flow event cannot be null or blank\"); } if (StringUtils.isBlank(flowEvent.getFlowIdentifier())) { throw new IllegalArgumentException(\"Flow identifier of flow event cannot be null or blank\"); } if (flowContent == null) { throw new IllegalArgumentException(\"Flow content cannot be null or blank\"); } if (StringUtils.isBlank(flowContent.getIdentifier()) || StringUtils.isBlank(flowContent.getName())) { throw new IllegalArgumentException(\"Flow content must contain a root process group with an identifier and name\"); } if (user == null || StringUtils.isBlank(user.getIdentity())) { throw new IllegalArgumentException(\"A user identity must be provided\"); } final Optional<FDFlowEntity> flowEntity = flowRepository.findById(flowEvent.getFlowIdentifier()); if (!flowEntity.isPresent()) { throw new ResourceNotFoundException(\"No flow exists with the provided flow id\"); } final String previousRootGroupId = flowEntity.get().getRootProcessGroupId(); final String incomingRootGroupId = flowContent.getIdentifier(); if (!previousRootGroupId.equals(incomingRootGroupId)) { throw new IllegalArgumentException(\"Cannot change the id of the root process group\"); } final Optional<FDFlowEventEntity> latestFlowEvent = flowEventRepository.findFirstByFlowOrderByFlowRevisionDesc(flowEntity.get()); if (!latestFlowEvent.isPresent()) { throw new IllegalStateException(\"Could not find any flow content for the given flow\"); } final BigInteger currRevision = latestFlowEvent.get().getFlowRevision(); final BigInteger nextRevision = currRevision.add(BigInteger.ONE); flowEvent.setIdentifier(UUID.randomUUID().toString()); flowEvent.setCreated(System.currentTimeMillis()); flowEvent.setUpdated(System.currentTimeMillis()); flowEvent.setFlowRevision(nextRevision); flowEvent.setFlowFormat(CURRENT_FLOW_FORMAT); flowEvent.setUserIdentity(user.getIdentity()); if (flowEvent.getEventType() != FDFlowEventType.FLOW_PUBLISHED) { flowEvent.setRegistryUrl(latestFlowEvent.get().getRegistryUrl()); flowEvent.setRegistryBucketId(latestFlowEvent.get().getRegistryBucketId()); flowEvent.setRegistryFlowId(latestFlowEvent.get().getRegistryFlowId()); flowEvent.setRegistryVersion(latestFlowEvent.get().getRegistryVersion()); final Date lastPublished = latestFlowEvent.get().getLastPublished(); flowEvent.setLastPublished(lastPublished == null ? null : lastPublished.getTime()); flowEvent.setLastPublishedUserIdentity(latestFlowEvent.get().getLastPublishedUserIdentity()); } if (flowEvent.getEventType() == FDFlowEventType.FLOW_PUBLISHED && flowEvent.getLastPublished() == null) { throw new IllegalArgumentException(\"Publish event must contain a published date\"); } validate(flowEvent, \"Cannot add flow event due to invalid event\"); final FDFlowEventEntity flowEventEntity = modelMapper.map(flowEvent, FDFlowEventEntity.class); flowEventEntity.setFlowContent(serializeFlowContent(flowContent)); flowEventEntity.setFlow(flowEntity.get()); final FDFlowEventEntity savedFlowEventEntity = flowEventRepository.save(flowEventEntity); final String flowId = flowEntity.get().getId(); if (flowsById.containsKey(flowId)) { final FDVersionInfo versionInfo = createVersionInfo(savedFlowEventEntity); final FDFlow cachedFlow = flowsById.get(flowId); cachedFlow.setVersionInfo(versionInfo); cachedFlow.setLocalFlowRevision(savedFlowEventEntity.getFlowRevision()); } return modelMapper.map(savedFlowEventEntity, FDFlowEvent.class); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testAddFlowEventWhenMissingFlowId() { final FDFlowEvent flowEvent = new FDFlowEvent(); flowEvent.setComponentId(\"proc-1\"); flowEvent.setEventType(FDFlowEventType.COMPONENT_ADDED); flowEvent.setEventDescription(\"Added TailFile processor\"); flowEvent.setUserIdentity(\"test-user\"); final VersionedProcessGroup pg = new VersionedProcessGroup(); pg.setIdentifier(UUID.randomUUID().toString()); pg.setName(\"NEW ROOT GROUP\"); final NiFiUser user = new StandardNiFiUser.Builder().identity(\"system\").build(); flowManager.addFlowEvent(flowEvent, pg, user); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void register(ProviderConfig config) { String appName = config.getAppName(); if (!registryConfig.isRegister()) { if (LOGGER.isInfoEnabled(appName)) { LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_REGISTRY_IGNORE)); } return; } if (!config.isRegister()) { return; } try { List<NewService> services = buildNewServices(config); if (CommonUtils.isNotEmpty(services)) { if (LOGGER.isInfoEnabled(appName)) { LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_PUB_START, config.getInterfaceId())); } for (NewService service : services) { registerConsulService(service); if (LOGGER.isInfoEnabled(appName)) { LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_PUB, config.getInterfaceId())); } } if (LOGGER.isInfoEnabled(appName)) { LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_PUB_OVER, config.getInterfaceId())); } } }catch (SofaRpcRuntimeException e){ throw e; } catch (Exception e) { throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_REG_PROVIDER, \"consulRegistry\", config.buildKey()), e); } if (EventBus.isEnable(ProviderPubEvent.class)) { ProviderPubEvent event = new ProviderPubEvent(config); EventBus.post(event); } }### Assistant: @Test public void testRegister() { ProviderConfig<?> providerConfig = providerConfig(\"consul-test-1\", 12200, 12201, 12202); registry.register(providerConfig); ConsulClient consulClient = new ConsulClient(\"localhost:\" + consul.getHttpPort()); HealthServicesRequest request = HealthServicesRequest.newBuilder().setPassing(true).build(); assertUntil(() -> { Response<List<HealthService>> healthServices = consulClient.getHealthServices(INTERFACE_ID, request); Assert.assertEquals(3, healthServices.getValue().size()); }, 10, TimeUnit.SECONDS); registry.unRegister(providerConfig); assertUntil(() -> { Response<List<HealthService>> healthServices = consulClient.getHealthServices(INTERFACE_ID, request); Assert.assertEquals(0, healthServices.getValue().size()); }, 10, TimeUnit.SECONDS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Origin handle(DeleteOriginRequest request) throws AccessDeniedException, AuthenticationFailedException, InvalidArgumentException, ObjectNotFoundException { OriginEntity entity = fetchExistingOrigin(request); securityContext.checkReadPermission(entity); checkDeletePermission(entity); assertNotDeleted(entity); entity.addFlag(OriginEntity.Flag.Deleted); entity = originManager.saveOrigin(entity); return originResponseConverter.apply(entity); }### Assistant: @Test(expected = InvalidArgumentException.class) public void testDeleteOriginAlreadyDeleted() throws Exception { OriginEntity entity = new OriginEntity() .setId(UUID.randomUUID()) .addFlag(OriginEntity.Flag.Deleted); when(originResolver.apply(entity.getId())).thenReturn(entity); delegate.handle(new DeleteOriginRequest().setId(entity.getId())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean scheduleDelayedTask(String action, Task task, Duration delay) { Instant now = Instant.now(); String actionId = LogManager.ID_GENERATOR.next(now); logger.debug(\"submit delayed task, action={}, id={}, delay={}\", action, actionId, delay); Callable<Void> execution = execution(actionId, action, now.plus(delay), () -> { task.execute(); return null; }); Runnable delayedTask = () -> { try { submitTask(action, execution); } catch (Throwable e) { logger.error(e.getMessage(), e); } }; try { scheduler.schedule(delayedTask, delay.toMillis(), TimeUnit.MILLISECONDS); return true; } catch (RejectedExecutionException e) { logger.warn(errorCode(\"TASK_REJECTED\"), \"reject task due to server is shutting down, action={}\", action, e); } return false; }### Assistant: @Test void scheduleDelayedTask() throws InterruptedException { executor.scheduler = ThreadPools.singleThreadScheduler(\"test-\"); boolean scheduled = executor.scheduleDelayedTask(\"action\", () -> { ActionLog actionLog = LogManager.CURRENT_ACTION_LOG.get(); assertThat(actionLog.action).isEqualTo(\"task:action\"); assertThat(actionLog.context).doesNotContainKey(\"root_action\"); }, Duration.ZERO); executor.scheduler.shutdown(); executor.scheduler.awaitTermination(10, TimeUnit.SECONDS); assertThat(scheduled).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isSupportedProductType(String productType) { Guardian.assertNotNull(\"productType\", productType); return isSupportedAatsrProductType(productType) || isSupportedMerisProductType(productType); }### Assistant: @Test public void testIsSupportedFileType() { try { SmacUtils.isSupportedProductType(null); fail(\"IllegalArgumentException expected\"); } catch (IllegalArgumentException ignored) { } assertTrue(SmacUtils.isSupportedProductType(EnvisatConstants.AATSR_L1B_TOA_PRODUCT_TYPE_NAME)); assertTrue(SmacUtils.isSupportedProductType(EnvisatConstants.MERIS_FR_L1B_PRODUCT_TYPE_NAME)); assertTrue(SmacUtils.isSupportedProductType(EnvisatConstants.MERIS_RR_L1B_PRODUCT_TYPE_NAME)); assertFalse(SmacUtils.isSupportedProductType(\"TomType\")); assertFalse(SmacUtils.isSupportedProductType(\"NonExistingType\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public List<Event> processEvents( ServerNode node, ServerComponent component ) throws HMSRestException { List<Event> aggregatedEvents = new ArrayList<Event>(); aggregatedEvents.addAll( getIBEvents( node, component ) ); List<Event> oobEvents = getOOBEvents( node, component ); aggregatedEvents.addAll( oobEvents ); initiateInventoryRefreshOnOutOfBand( oobEvents ); try { aggregatedEvents = EventFilterService.filterOrMassageEvents( NODE, component, aggregatedEvents ); } catch ( Exception e ) { logger.warn( \"Error filtering events for HMS:: Component:\" + component, e ); } return aggregatedEvents; }### Assistant: @Test public void testProcessEvents() throws HmsException { PowerMockito.mockStatic( MonitoringUtil.class ); PowerMockito.mockStatic( AgentHealthMonitoringUtil.class ); List<Event> eventsLst = new ArrayList<Event>(); Event event = new Event(); Body body = new Body(); Map<String, String> data = new HashMap<String, String>(); data.put( Constants.HMS_INV_FROM_AGG_AVAILABILITY_STATUS, new String( \"true\" ) ); body.setData( data ); event.setBody( body ); eventsLst.add( event ); when( MonitoringUtil.getHealthMonitorEventsOOB() ).thenReturn( eventsLst ); InbandServiceTestImpl inbandSvc = new InbandServiceTestImpl(); List<ServerComponentEvent> eventLst = inbandSvc.getComponentEventList( null, ServerComponent.CPU ); when( AgentHealthMonitoringUtil.getCPUUsage() ).thenReturn( eventLst.get( 0 ) ); eventLst = inbandSvc.getComponentEventList( null, ServerComponent.MEMORY ); when( AgentHealthMonitoringUtil.getHMSMemoryUsage() ).thenReturn( eventLst.get( 0 ) ); ServerComponentEvent sensor = new ServerComponentEvent(); sensor.setComponentId( \"HMS_AGENT_THREAD_USAGE\" ); sensor.setUnit( EventUnitType.COUNT ); sensor.setEventName( NodeEvent.HMS_AGENT_THREAD_COUNT ); sensor.setValue( 1 ); when( AgentHealthMonitoringUtil.getThreadCount() ).thenReturn( sensor ); HealthMonitorEventAggregatorTask task = new HealthMonitorEventAggregatorTask(); ServerNode serverNode = new ServerNode(); List<Event> events = task.processEvents( serverNode, ServerComponent.HMS ); Assert.assertNotNull( events ); Event eventObj = events.get( events.size() - 1 ); Map<String, String> map = eventObj.getBody().getData(); String value = map.get( Constants.HMS_INV_FROM_AGG_AVAILABILITY_STATUS ); Assert.assertEquals( \"true\", value ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Deprecated public static ResourceCreated of(final String policyId, final Label label, final Resource resource, final long revision, final DittoHeaders dittoHeaders) { return of(PolicyId.of(policyId), label, resource, revision, dittoHeaders); }### Assistant: @Test(expected = PolicyIdInvalidException.class) public void tryToCreateInstanceWithNullPolicyIdString() { ResourceCreated.of((String) null, TestConstants.Policy.LABEL, TestConstants.Policy.RESOURCE, TestConstants.Policy.REVISION_NUMBER, TestConstants.EMPTY_DITTO_HEADERS); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: void handleDnsRequest(byte[] packetData) throws AdVpnThread.VpnNetworkException { IpPacket parsedPacket = null; try { parsedPacket = (IpPacket) IpSelector.newPacket(packetData, 0, packetData.length); } catch (Exception e) { Log.i(TAG, \"handleDnsRequest: Discarding invalid IP packet\", e); return; } UdpPacket parsedUdp; Packet udpPayload; try { parsedUdp = (UdpPacket) parsedPacket.getPayload(); udpPayload = parsedUdp.getPayload(); } catch (Exception e) { try { Log.i(TAG, \"handleDnsRequest: Discarding unknown packet type \" + parsedPacket.getHeader(), e); } catch (Exception e1) { Log.i(TAG, \"handleDnsRequest: Discarding unknown packet type, could not log packet info\", e1); } return; } InetAddress destAddr = translateDestinationAdress(parsedPacket); if (destAddr == null) return; if (udpPayload == null) { try { Log.i(TAG, \"handleDnsRequest: Sending UDP packet without payload: \" + parsedUdp); } catch (Exception e1) { Log.i(TAG, \"handleDnsRequest: Sending UDP packet without payload\"); } try { DatagramPacket outPacket = new DatagramPacket(new byte[0], 0, 0 , destAddr, parsedUdp.getHeader().getDstPort().valueAsInt()); eventLoop.forwardPacket(outPacket, null); } catch (Exception e) { Log.i(TAG, \"handleDnsRequest: Could not send empty UDP packet\", e); } return; } byte[] dnsRawData = udpPayload.getRawData(); Message dnsMsg; try { dnsMsg = new Message(dnsRawData); } catch (IOException e) { Log.i(TAG, \"handleDnsRequest: Discarding non-DNS or invalid packet\", e); return; } if (dnsMsg.getQuestion() == null) { Log.i(TAG, \"handleDnsRequest: Discarding DNS packet with no query \" + dnsMsg); return; } String dnsQueryName = dnsMsg.getQuestion().getName().toString(true); if (!ruleDatabase.isBlocked(dnsQueryName.toLowerCase(Locale.ENGLISH))) { Log.i(TAG, \"handleDnsRequest: DNS Name \" + dnsQueryName + \" Allowed, sending to \" + destAddr); DatagramPacket outPacket = new DatagramPacket(dnsRawData, 0, dnsRawData.length, destAddr, parsedUdp.getHeader().getDstPort().valueAsInt()); eventLoop.forwardPacket(outPacket, parsedPacket); } else { Log.i(TAG, \"handleDnsRequest: DNS Name \" + dnsQueryName + \" Blocked!\"); dnsMsg.getHeader().setFlag(Flags.QR); dnsMsg.getHeader().setRcode(Rcode.NOERROR); dnsMsg.addRecord(NEGATIVE_CACHE_SOA_RECORD, Section.AUTHORITY); handleDnsResponse(parsedPacket, dnsMsg.toWire()); } }### Assistant: @Test public void testBlockedInet6DnsQuery() throws Exception { Message message = Message.newQuery(new ARecord(new Name(\"blocked.example.com.\"), 0x01, 3600, Inet4Address.getByAddress(new byte[]{0, 0, 0, 0}) )); UdpPacket.Builder payLoadBuilder = new UdpPacket.Builder() .srcPort(UdpPort.DOMAIN) .dstPort(UdpPort.DOMAIN) .srcAddr((Inet6Address) Inet6Address.getByName(\"::0\")) .dstAddr((Inet6Address) Inet6Address.getByName(\"::1\")) .correctChecksumAtBuild(true) .correctLengthAtBuild(true) .payloadBuilder( new UnknownPacket.Builder() .rawData(message.toWire()) ); IpPacket ipOutPacket = new IpV6Packet.Builder() .version(IpVersion.IPV6) .trafficClass(IpV6SimpleTrafficClass.newInstance((byte) 0)) .flowLabel(IpV6SimpleFlowLabel.newInstance(0)) .nextHeader(IpNumber.UDP) .srcAddr((Inet6Address) Inet6Address.getByName(\"::0\")) .dstAddr((Inet6Address) Inet6Address.getByName(\"::1\")) .correctLengthAtBuild(true) .payloadBuilder(payLoadBuilder) .build(); dnsPacketProxy.handleDnsRequest(ipOutPacket.getRawData()); assertNotNull(mockEventLoop.lastResponse); assertNull(mockEventLoop.lastOutgoing); assertTrue(mockEventLoop.lastResponse instanceof IpPacket); assertTrue(mockEventLoop.lastResponse.getPayload() instanceof UdpPacket); Message responseMsg = new Message(mockEventLoop.lastResponse.getPayload().getPayload().getRawData()); assertEquals(NOERROR, responseMsg.getHeader().getRcode()); assertArrayEquals(new Record[] {}, responseMsg.getSectionArray(Section.ANSWER)); assertNotEquals(0, responseMsg.getSectionArray(Section.AUTHORITY).length); assertTrue(responseMsg.getSectionArray(Section.AUTHORITY)[0] instanceof SOARecord); assertTrue(responseMsg.getSectionArray(Section.AUTHORITY)[0].getTTL() > 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onMessage(Message msg) { TextMessage tMsg = (TextMessage)msg; AsyncRetrieveMessage aMsg = null; try { aMsg = (AsyncRetrieveMessage)getAsyncMessageFormat().parse(tMsg.getText()); } catch (Exception ex) { logger.error(\"message parsing error for \" + msg + \": USER CANNOT BE NOTIFIED (users info is not known)\", ex); return; } C32DocumentEntity doc = getC32Document(aMsg); try { if (logger.isDebugEnabled()) { logger.debug(\"Attempting to Persist Domain XML for: \" + aMsg.getPatientId()); } updateDocumentWithNewDocument(aMsg.getPatientId(), doc); } catch (Exception ex) { logger.error(\"error saving c32 document: USER NOT NOTIFIED:\" + msg, ex); } }### Assistant: @Test public void onMessage_docNull() { ptIdToAssert = \"998877v99\"; setupDocList(ptIdToAssert, ptIdToAssert, null); retriever.onMessage(new TestTextMessage(\"20120908070605:998877v99:fred\")); Assert.assertEquals(0, insertedList.size()); Assert.assertEquals(1, updatedList.size()); Assert.assertEquals(BlueButtonConstants.UNAVAILABLE_STATUS_STRING, updatedList.get(0).getDocument()); Assert.assertEquals(ptIdToAssert, updatedList.get(0).getDocumentPatientId()); Assert.assertEquals(ptIdToAssert, updatedList.get(0).getIcn()); assertDatePartEqualsToday(updatedList.get(0).getCreateDate()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static InputStream sendPacket(URL url, String requestMethod) throws IOException { HttpURLConnection httpConnection = openHttpConnection(url, requestMethod); return getHttpConnectionInputStream(httpConnection); }### Assistant: @Test public void testSendPacket() { if (!isServerReachable) { log.debug(server + \" is not reachable. Skipping testSendPacket()\"); return; } InputStream result = null; try { result = HTTPUtils.sendPacket(new URL(\"http: assertTrue(result.read() > -1); } catch (IOException ex) { Logger.getLogger(HTTPUtilsTest.class.getName()).log(Level.SEVERE, null, ex); } try { result.close(); } catch (IOException ex) { Logger.getLogger(HTTPUtilsTest.class.getName()).log(Level.SEVERE, null, ex); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void setPackageManager(final JcrPackageManager packageManager) { }### Assistant: @Test public void testSetPackageManager() { instance().setPackageManager(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public KeyStore loadTrustStore() throws IOException, GeneralSecurityException { return PemReader.loadTrustStore(new File(trustStorePath)); }### Assistant: @Test(expected = NullPointerException.class) public void testLoadTrustStoreWithNullFilePath() throws Exception { new PEMFileLoader.Builder() .setTrustStorePassword(x509TestContext.getTrustStorePassword()) .build() .loadTrustStore(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static List<RemoveUnusedParameterReductionOpportunity> findOpportunities( ShaderJob shaderJob, ReducerContext context) { return shaderJob.getShaders() .stream() .map(item -> findOpportunitiesForShader(item, context)) .reduce(Arrays.asList(), ListConcat::concatenate); }### Assistant: @Test public void testDoNotRemoveParamIfOverloaded() throws Exception { final String shader = \"float foo(int a, float b) {\" + \" return float(a);\" + \"}\" + \"void foo(int a) {\" + \"}\" + \"void main() {\" + \" foo(2, 3.0);\" + \" foo(2);\" + \"}\"; final TranslationUnit tu = ParseHelper.parse(shader); List<RemoveUnusedParameterReductionOpportunity> opportunities = findOpportunities(tu, true); assertEquals(0, opportunities.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Function<T, T1> get1() { return getAndCast(1); }### Assistant: @Test void get1() { assertEquals(m1, instance.get1()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean checkFeatureSize(int width, int height) { return width >= FeatureCol && height >= FeatureRow; }### Assistant: @Test public void testCheckFeatureSizeLess() throws Exception { boolean actual = SimilarityUtils.checkFeatureSize(4, 4); assertThat(actual, is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean add(Interval interval) { return addInner(interval.getLow(), interval.getHigh()) >= 0; }### Assistant: @Test(expectedExceptions = IllegalArgumentException.class) public void testStartOverlappingAbove() { IntervalSet set = new IntervalSet(); Assert.assertTrue(set.add(new Interval(4.0, 5.0))); set.add(new Interval(4, 6)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static public void write(Writer out, Operation operation) throws SxmpErrorException, IOException { write(out, operation, true); }### Assistant: @Test public void writeSubmitRequestWithUTF8PushDestination() throws Exception { SubmitRequest request = new SubmitRequest(SxmpParser.VERSION_1_1); request.setAccount(new Account(\"customer1\", \"test1\")); request.setOperatorId(20); request.setDestinationAddress(new MobileAddress(MobileAddress.Type.PUSH_DESTINATION, \"abcd\\n1234\\rfghi-\u20ac\u00a3\u00e6_\\u20AC\\u0623\\u0647\\u0644\")); request.setText(\"Hello World\"); StringWriter sw = new StringWriter(); SxmpWriter.write(sw, request); logger.debug(\"UTF8 PUSH DEST: \"+sw.toString()); StringBuilder expectedXML = new StringBuilder(200) .append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\") .append(\"<operation type=\\\"submit\\\">\\n\") .append(\" <account username=\\\"customer1\\\" password=\\\"test1\\\"/>\\n\") .append(\" <submitRequest>\\n\") .append(\" <operatorId>20</operatorId>\\n\") .append(\" <priority>0</priority>\\n\") .append(\" <deliveryReport>false</deliveryReport>\\n\") .append(\" <destinationAddress type=\\\"push_destination\\\">abcd\\n1234\\rfghi-\u20ac\u00a3\u00e6_\\u20AC\\u0623\\u0647\\u0644</destinationAddress>\\n\") .append(\" <text encoding=\\\"UTF-8\\\">48656C6C6F20576F726C64</text>\\n\") .append(\" </submitRequest>\\n\") .append(\"</operation>\\n\") .append(\"\"); XMLUnit.setIgnoreWhitespace(true); Diff myDiff = new Diff(expectedXML.toString(), sw.toString()); DetailedDiff myDetailedDiff = new DetailedDiff(myDiff); Assert.assertTrue(\"XML are similar \" + myDetailedDiff, myDetailedDiff.similar()); Assert.assertTrue(!expectedXML.toString().contains(\"optionalParams\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void afterTaskAddedEvent(TaskEvent event) { String userId = event.getTaskContext().getUserId(); Task ti = event.getTask(); if(ti.getTaskData().getProcessId() != null){ userId = ti.getTaskData().getProcessId(); } AuditTaskImpl auditTask = createAuditTask(ti, event.getEventDate()); TaskEventImpl taskEvent = new TaskEventImpl(ti.getId(), org.kie.internal.task.api.model.TaskEvent.TaskEventType.ADDED, ti.getTaskData().getProcessInstanceId(), ti.getTaskData().getWorkItemId(), userId); sendMessage(new AuditTaskData(auditTask, taskEvent), 9); }### Assistant: @Test public void testAfterTaskAdded() throws JMSException { logProducer.afterTaskAddedEvent(event); assertMessage(\"<type>ADDED</type>\", 9); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void processHeartbeat(HeartBeat heartbeat) throws AmbariException { long now = System.currentTimeMillis(); processAlerts(heartbeat); processStatusReports(heartbeat); processCommandReports(heartbeat, now); processHostStatus(heartbeat); }### Assistant: @Test @SuppressWarnings(\"unchecked\") public void testCommandStatusProcesses() throws Exception { Cluster cluster = heartbeatTestHelper.getDummyCluster(); Service hdfs = cluster.addService(HDFS); hdfs.addServiceComponent(DATANODE); hdfs.getServiceComponent(DATANODE).addServiceComponentHost(DummyHostname1); hdfs.getServiceComponent(DATANODE).getServiceComponentHost(DummyHostname1).setState(State.STARTED); ActionQueue aq = new ActionQueue(); HeartBeat hb = new HeartBeat(); hb.setTimestamp(System.currentTimeMillis()); hb.setResponseId(0); hb.setHostname(DummyHostname1); hb.setNodeStatus(new HostStatus(HostStatus.Status.HEALTHY, DummyHostStatus)); hb.setReports(new ArrayList<CommandReport>()); List<Map<String, String>> procs = new ArrayList<Map<String, String>>(); Map<String, String> proc1info = new HashMap<String, String>(); proc1info.put(\"name\", \"a\"); proc1info.put(\"status\", \"RUNNING\"); procs.add(proc1info); Map<String, String> proc2info = new HashMap<String, String>(); proc2info.put(\"name\", \"b\"); proc2info.put(\"status\", \"NOT_RUNNING\"); procs.add(proc2info); Map<String, Object> extra = new HashMap<String, Object>(); extra.put(\"processes\", procs); ArrayList<ComponentStatus> componentStatuses = new ArrayList<ComponentStatus>(); ComponentStatus componentStatus1 = new ComponentStatus(); componentStatus1.setClusterName(DummyCluster); componentStatus1.setServiceName(HDFS); componentStatus1.setMessage(DummyHostStatus); componentStatus1.setStatus(State.STARTED.name()); componentStatus1.setSecurityState(SecurityState.UNSECURED.name()); componentStatus1.setComponentName(DATANODE); componentStatus1.setExtra(extra); componentStatuses.add(componentStatus1); hb.setComponentStatus(componentStatuses); final HostRoleCommand command = hostRoleCommandFactory.create(DummyHostname1, Role.DATANODE, null, null); ActionManager am = actionManagerTestHelper.getMockActionManager(); expect(am.getTasks(EasyMock.<List<Long>>anyObject())).andReturn( new ArrayList<HostRoleCommand>() {{ add(command); }}).anyTimes(); replay(am); HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am, aq); HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor(); heartbeatProcessor.processHeartbeat(hb); ServiceComponentHost sch = hdfs.getServiceComponent(DATANODE).getServiceComponentHost(DummyHostname1); Assert.assertEquals(Integer.valueOf(2), Integer.valueOf(sch.getProcesses().size())); hb = new HeartBeat(); hb.setTimestamp(System.currentTimeMillis()); hb.setResponseId(1); hb.setHostname(DummyHostname1); hb.setNodeStatus(new HostStatus(HostStatus.Status.HEALTHY, DummyHostStatus)); hb.setReports(new ArrayList<CommandReport>()); componentStatus1 = new ComponentStatus(); componentStatus1.setClusterName(DummyCluster); componentStatus1.setServiceName(HDFS); componentStatus1.setMessage(DummyHostStatus); componentStatus1.setStatus(State.STARTED.name()); componentStatus1.setSecurityState(SecurityState.UNSECURED.name()); componentStatus1.setComponentName(DATANODE); hb.setComponentStatus(Collections.singletonList(componentStatus1)); heartbeatProcessor.processHeartbeat(hb); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static XmlValidator createValidator(Resource schemaResource, String schemaLanguage) throws IOException { return createValidator(new Resource[] { schemaResource }, schemaLanguage); }### Assistant: @Test public void testCreateValidator() throws Exception { Resource resource = new ClassPathResource(\"schema.xsd\", AbstractValidatorFactoryTestCase.class); XmlValidator validator = XmlValidatorFactory.createValidator(resource, XmlValidatorFactory.SCHEMA_W3C_XML); Assert.assertNotNull(\"No validator returned\", validator); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String assertEquals(String value, String matcher) { return \"assertEquals(\" + value + \", \" + matcher + \")\"; }### Assistant: @Test public void checkAssertEqualsReturnsValidCode() { assertThat(com.assertEquals(condition, condition), is(equalTo(\"assertEquals(\" + condition + \", \" + condition + \")\"))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String encodeUrl(RequestWithSession request, String url) { RepositoryBackedSession session = request.getRepositoryBackedSession(false); if (session == null || !session.isValid()) { return url; } String encodedSessionAlias; try { encodedSessionAlias = URLEncoder.encode(session.getId(), \"UTF-8\"); } catch (UnsupportedEncodingException e) { throw new IllegalStateException(\"This exception should never happen!\", e); } int queryStart = url.indexOf('?'); if (queryStart < 0) { return url + sessionIdPathItem + encodedSessionAlias; } String path = url.substring(0, queryStart); String query = url.substring(queryStart + 1, url.length()); path += sessionIdPathItem + encodedSessionAlias; return path + '?' + query; }### Assistant: @Test public void testEncodeUrl() { SessionConfiguration sc = new SessionConfiguration(); sc.setSessionIdName(\"asession\"); urlSessionTracking.configure(sc); RequestWithSession request = mock(RequestWithSession.class, withSettings().extraInterfaces(HttpServletRequest.class)); RepositoryBackedSession session = mock(RepositoryBackedSession.class); when(request.getRepositoryBackedSession(false)).thenReturn(session); when(session.isValid()).thenReturn(Boolean.FALSE); String url = urlSessionTracking.encodeUrl(request, \"http: assertEquals(\"Session is not valid, so URL should stay the same\", \"http: when(session.isValid()).thenReturn(Boolean.TRUE); when(session.getId()).thenReturn(\"1234\"); url = urlSessionTracking.encodeUrl(request, \"http: assertEquals(\"Session is valid, so URL should be encoded\", \"http: url = urlSessionTracking.encodeUrl(request, \"http: assertEquals(\"Session is valid, so URL should be encoded\", \"http: url = urlSessionTracking.encodeUrl(request, \"http: assertEquals(\"Session is valid, so URL should be encoded\", \"http: url = urlSessionTracking.encodeUrl(request, \"http: assertEquals(\"Session is valid, so URL should be encoded\", \"http: }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Around(\"operationsMethods()\") public Object logMethodBeingInvoked(ProceedingJoinPoint pjp) throws Throwable { Class<?> targetClass = pjp.getTarget().getClass(); MethodSignature targetMethodSignature = (MethodSignature) pjp.getSignature(); Method targetMethod = targetMethodSignature.getMethod(); if (targetMethod.getDeclaringClass().isInterface()) { targetMethod = pjp.getTarget().getClass().getMethod(pjp.getSignature().getName(), targetMethod.getParameterTypes()); } if ((AnnotationUtils.findAnnotation(targetClass, SuppressLogging.class) == null) && (AnnotationUtils.findAnnotation(targetMethod, SuppressLogging.class) == null) && (LOGGER.isDebugEnabled())) { LOGGER.debug(\"javaMethod=\\\"{}.{}\\\"\", targetClass.getName(), targetMethodSignature.getName()); } return pjp.proceed(); }### Assistant: @Test public void testLogMethodTimeClassSuppressLogging() throws Throwable { methodLoggingAdvice.logMethodBeingInvoked(new MockProceedingJoinPointClassSuppressLogging()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void handleMessage( final Message message ) { try { if ( InterceptorState.SERVER_IN.isActive( message ) ) { HttpServletRequest req = ( HttpServletRequest ) message.getExchange().getInMessage() .get( AbstractHTTPDestination.HTTP_REQUEST ); if ( req.getLocalPort() == Common.DEFAULT_PUBLIC_SECURE_PORT ) { HttpHeaders headers = new HttpHeadersImpl( message.getExchange().getInMessage() ); String subutaiHeader = headers.getHeaderString( Common.SUBUTAI_HTTP_HEADER ); String path = req.getRequestURI(); if ( path.startsWith( \"/rest/v1/peer\" ) ) { handlePeerMessage( subutaiHeader, message ); } else { final String prefix = \"/rest/v1/env\"; if ( path.startsWith( prefix ) ) { String s = path.substring( prefix.length() + 1 ); String environmentId = s.substring( 0, s.indexOf( \"/\" ) ); handleEnvironmentMessage( subutaiHeader, environmentId, message ); } } } } } catch ( Exception e ) { throw new Fault( e ); } }### Assistant: @Test public void testHandleMessage() throws Exception { Message message = InterceptorStateHelper.getMessage( InterceptorState.SERVER_IN ); Exchange exchange = message.getExchange(); doReturn( message ).when( exchange ).getInMessage(); doReturn( request ).when( message ).get( AbstractHTTPDestination.HTTP_REQUEST ); doReturn( Common.DEFAULT_PUBLIC_SECURE_PORT ).when( request ).getLocalPort(); doReturn( \"/rest/v1/peer\" ).when( request ).getRequestURI(); interceptor.handleMessage( message ); verify( interceptor ).handlePeerMessage( anyString(), eq( message ) ); doReturn( \"/rest/v1/env/123/\" ).when( request ).getRequestURI(); interceptor.handleMessage( message ); verify( interceptor ).handleEnvironmentMessage( anyString(), anyString(), eq( message ) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Vector2 normalize(final Vector2 store) { final double lengthSq = lengthSquared(); if (Math.abs(lengthSq) > MathUtils.EPSILON) { return multiply(MathUtils.inverseSqrt(lengthSq), store); } return store != null ? store.set(Vector2.ZERO) : new Vector2(Vector2.ZERO); }### Assistant: @Test public void testNormalize() { final Vector2 vec1 = new Vector2(2, 1); assertTrue(vec1.length() == Math.sqrt(5)); final Vector2 vec2 = vec1.normalize(null); final double invLength = MathUtils.inverseSqrt(2 * 2 + 1 * 1); assertEquals(new Vector2(2 * invLength, 1 * invLength), vec2); vec1.normalizeLocal(); assertEquals(new Vector2(2 * invLength, 1 * invLength), vec1); vec1.zero(); vec1.normalize(vec2); assertEquals(vec1, vec2); vec1.normalizeLocal(); vec1.normalize(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public DescriptorValue calculate(IAtom atom, IAtomContainer atomContainer) { IAtomContainer clone; IAtom localAtom; try { clone = (IAtomContainer) atomContainer.clone(); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(clone); if (lpeChecker) { LonePairElectronChecker lpcheck = new LonePairElectronChecker(); lpcheck.saturate(atomContainer); } localAtom = clone.getAtom(atomContainer.indexOf(atom)); } catch (CloneNotSupportedException e) { return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult( Double.NaN), NAMES, null); } catch (CDKException e) { return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult( Double.NaN), NAMES, null); } if (maxIterations != -1 && maxIterations != 0) electronegativity.setMaxIterations(maxIterations); if (maxResonStruc != -1 && maxResonStruc != 0) electronegativity.setMaxResonStruc(maxResonStruc); double result = electronegativity.calculatePiElectronegativity(clone, localAtom); return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(result), NAMES); }### Assistant: @Test public void testCompareIonized() throws ClassNotFoundException, CDKException, java.lang.Exception { IAtomContainer molA = builder.newInstance(IAtomContainer.class); molA.addAtom(builder.newInstance(IAtom.class, \"C\")); molA.addAtom(builder.newInstance(IAtom.class, \"C\")); molA.addBond(0, 1, IBond.Order.SINGLE); molA.addAtom(builder.newInstance(IAtom.class, \"C\")); molA.addBond(1, 2, IBond.Order.SINGLE); molA.addAtom(builder.newInstance(IAtom.class, \"Cl\")); molA.addBond(2, 3, IBond.Order.SINGLE); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molA); addExplicitHydrogens(molA); lpcheck.saturate(molA); double resultA = ((DoubleResult) descriptor.calculate(molA.getAtom(3), molA).getValue()).doubleValue(); IAtomContainer molB = builder.newInstance(IAtomContainer.class); molB.addAtom(builder.newInstance(IAtom.class, \"C\")); molB.addAtom(builder.newInstance(IAtom.class, \"C\")); molB.addBond(0, 1, IBond.Order.SINGLE); molB.addAtom(builder.newInstance(IAtom.class, \"C\")); molB.addBond(1, 2, IBond.Order.SINGLE); molB.addAtom(builder.newInstance(IAtom.class, \"Cl\")); molB.getAtom(3).setFormalCharge(1); molB.addSingleElectron(3); molB.addLonePair(3); molB.addLonePair(3); molB.addBond(2, 3, IBond.Order.SINGLE); addExplicitHydrogens(molB); AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molB); lpcheck.saturate(molB); Assert.assertEquals(1, molB.getAtom(3).getFormalCharge(), 0.00001); Assert.assertEquals(1, molB.getSingleElectronCount(), 0.00001); Assert.assertEquals(2, molB.getLonePairCount(), 0.00001); IAtomicDescriptor descriptor = new PiElectronegativityDescriptor(); double resultB = ((DoubleResult) descriptor.calculate(molB.getAtom(3), molB).getValue()).doubleValue(); Assert.assertEquals(resultA, resultB, 0.00001); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String createSequenceId(final String handlerKey, final SequenceDescriptor sequenceDescriptor) { StringBuilder sb = new StringBuilder(); String descriptorKey = sequenceDescriptorKeyUtil.createDescriptorKey(sequenceDescriptor.getGroupName(), sequenceDescriptor.getName()); sb.append(descriptorKey).append(SequenceConstants.SEQUENCE_ID_SEPARATOR.getConstant()).append(handlerKey); return sb.toString(); }### Assistant: @Test public void testCreateSequenceId() { String handlerKey = \"Key\"; given(sequenceDescriptor.getGroupName()).willReturn(\"groupname\"); given(sequenceDescriptor.getName()).willReturn(\"name\"); given(sequenceDescriptorKeyUtil.createDescriptorKey(\"groupname\", \"name\")).willReturn(\"groupname_name\"); Whitebox.setInternalState(underTest, \"sequenceDescriptorKeyUtil\", sequenceDescriptorKeyUtil); String result = underTest.createSequenceId(handlerKey, sequenceDescriptor); Assert.assertEquals(result, \"groupname_name|Key\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Path(\"delete\") @POST @Consumes(MediaType.APPLICATION_JSON) public List<Transaction> delete(AccountWithJobIds accountWithJobIds) { try { return ukelonn.deleteJobsFromAccount(accountWithJobIds.getAccount().getAccountId(), accountWithJobIds.getJobIds()); } catch (Exception e) { String message = \"REST endpoint /ukelonn/admin/jobs/delete failed with exception\"; logservice.log(LogService.LOG_ERROR, message, e); throw new InternalServerErrorException(String.format(\"%s, see log for details\", message)); } }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void testDeleteSomeJobsOfUser() { AdminJobs resource = new AdminJobs(); UkelonnService ukelonn = mock(UkelonnService.class); when(ukelonn.deleteJobsFromAccount(anyInt(), anyList())).thenReturn(getFirstJodJob()); resource.ukelonn = ukelonn; Account account = getJodAccount(); List<Transaction> jobs = getJodJobs(); List<Integer> idsOfJobsToDelete = Arrays.asList(jobs.get(0).getId()); AccountWithJobIds accountWithJobIds = new AccountWithJobIds(account, idsOfJobsToDelete); List<Transaction> jobsAfterDelete = resource.delete(accountWithJobIds); assertEquals(1, jobsAfterDelete.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean compatibleWith(@Nonnull RecordStoreState other) { return indexStateMap.get().entrySet().stream().allMatch(entry -> { boolean readableInOther = other.getState(entry.getKey()).equals(IndexState.READABLE); return entry.getValue().equals(IndexState.READABLE) == readableInOther; }); }### Assistant: @Test public void compatibleWith() { final RecordStoreState empty = stateOf(); final RecordStoreState oneWriteOnly = stateOf(\"one\", IndexState.WRITE_ONLY); final RecordStoreState oneDisabled = stateOf(\"one\", IndexState.DISABLED); final RecordStoreState hasBoth = stateOf(\"one\", IndexState.WRITE_ONLY, \"two\", IndexState.DISABLED); assertTrue(empty.compatibleWith(oneWriteOnly)); assertFalse(oneWriteOnly.compatibleWith(empty)); assertTrue(empty.compatibleWith(oneDisabled)); assertFalse(oneDisabled.compatibleWith(empty)); assertTrue(empty.compatibleWith(hasBoth)); assertFalse(hasBoth.compatibleWith(empty)); assertTrue(oneDisabled.compatibleWith(oneWriteOnly)); assertTrue(oneWriteOnly.compatibleWith(oneDisabled)); assertTrue(oneWriteOnly.compatibleWith(hasBoth)); assertFalse(hasBoth.compatibleWith(oneWriteOnly)); assertTrue(oneDisabled.compatibleWith(hasBoth)); assertFalse(hasBoth.compatibleWith(oneDisabled)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static TimeStampMilliVector vectorFor(BufferAllocator allocator,String name,Date[] data) { TimeStampMilliVector float4Vector = new TimeStampMilliVector(name,allocator); float4Vector.allocateNew(data.length); for(int i = 0; i < data.length; i++) { float4Vector.setSafe(i,data[i].getTime()); } float4Vector.setValueCount(data.length); return float4Vector; }### Assistant: @Test public void testVectorFor() { BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE); val vector = ArrowConverter.vectorFor(allocator,\"field1\",new float[]{1,2,3}); assertEquals(3,vector.getValueCount()); assertEquals(1,vector.get(0),1e-2); assertEquals(2,vector.get(1),1e-2); assertEquals(3,vector.get(2),1e-2); val vectorLong = ArrowConverter.vectorFor(allocator,\"field1\",new long[]{1,2,3}); assertEquals(3,vectorLong.getValueCount()); assertEquals(1,vectorLong.get(0),1e-2); assertEquals(2,vectorLong.get(1),1e-2); assertEquals(3,vectorLong.get(2),1e-2); val vectorInt = ArrowConverter.vectorFor(allocator,\"field1\",new int[]{1,2,3}); assertEquals(3,vectorInt.getValueCount()); assertEquals(1,vectorInt.get(0),1e-2); assertEquals(2,vectorInt.get(1),1e-2); assertEquals(3,vectorInt.get(2),1e-2); val vectorDouble = ArrowConverter.vectorFor(allocator,\"field1\",new double[]{1,2,3}); assertEquals(3,vectorDouble.getValueCount()); assertEquals(1,vectorDouble.get(0),1e-2); assertEquals(2,vectorDouble.get(1),1e-2); assertEquals(3,vectorDouble.get(2),1e-2); val vectorBool = ArrowConverter.vectorFor(allocator,\"field1\",new boolean[]{true,true,false}); assertEquals(3,vectorBool.getValueCount()); assertEquals(1,vectorBool.get(0),1e-2); assertEquals(1,vectorBool.get(1),1e-2); assertEquals(0,vectorBool.get(2),1e-2); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void add(int shard, Map<String, SolrInputDocument> inputDocumentMap) throws SolrServerException, IOException { Collection<SolrInputDocument> inputDocuments = inputDocumentMap.values(); try { solrServer.add(inputDocuments); indexAddMeter.mark(inputDocuments.size()); } catch (SolrException e) { if (isDocumentIssue(e)) { retryAddsIndividually(inputDocuments); } else { solrAddErrorMeter.mark(inputDocuments.size()); throw e; } } catch (SolrServerException sse) { solrAddErrorMeter.mark(inputDocuments.size()); throw sse; } }### Assistant: @Test public void testAdd_NormalCase() throws SolrServerException, IOException { SolrInputDocument inputDocA = mock(SolrInputDocument.class); SolrInputDocument inputDocB = mock(SolrInputDocument.class); Map<String, SolrInputDocument> toAdd = ImmutableSortedMap.of(\"idA\", inputDocA, \"idB\", inputDocB); solrWriter.add(-1, toAdd); verify(solrServer).add(toAdd.values()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean isAuthorizedProxyUser(Set<String> proxyUsers, String principal) { if (proxyUsers == null) { return false; } return proxyUsers.contains(principal); }### Assistant: @Test public void testIsAuthorizedProxyUser() { assertFalse(zts.isAuthorizedProxyUser(null, \"user.joe\")); Set<String> proxyUsers = new HashSet<>(); proxyUsers.add(\"user.joe\"); proxyUsers.add(\"user.jane\"); assertTrue(zts.isAuthorizedProxyUser(proxyUsers, \"user.joe\")); assertTrue(zts.isAuthorizedProxyUser(proxyUsers, \"user.jane\")); assertFalse(zts.isAuthorizedProxyUser(proxyUsers, \"user.john\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getImplementationVendor() { return implementationVendor; }### Assistant: @Test void testGetImplementationVendor() { final String result = instance.getImplementationVendor(); assertNotNull(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void inheritFingerprint(String fingerprint) throws AuthorizationAccessException { if (StringUtils.isBlank(fingerprint)) { return; } final String userGroupFingerprint = parseFingerprint(fingerprint); if (StringUtils.isNotBlank(userGroupFingerprint) && userGroupProvider instanceof ConfigurableUserGroupProvider) { ((ConfigurableUserGroupProvider) userGroupProvider).inheritFingerprint(userGroupFingerprint); } }### Assistant: @Test(expected = AuthorizationAccessException.class) public void testInheritInvalidFingerprint() { final ConfigurableUserGroupProvider userGroupProvider = mock(ConfigurableUserGroupProvider.class); final AuthorizerConfigurationContext configurationContext = createMockConfigContext(); setup(mock(NiFiRegistryProperties.class), userGroupProvider, configurationContext); authorizer.inheritFingerprint(\"not a valid fingerprint\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void handleMethodAnnotation(FormParam annotation, MethodConfigBuilder builder) { builder.startExtraParamConfig() .setType(FORM) .setName(ph(annotation.value())) .setDefaultValue(nullIfUnset(ph(annotation.defaultValue()))); }### Assistant: @Test public void handleMethodAnnotationShouldSetParamsTypeAndName() throws Exception { when(mockMethodConfigBuilder.startExtraParamConfig()).thenReturn(mockParamConfigBuilder); when(mockParamConfigBuilder.setType(any(ParamType.class))).thenReturn(mockParamConfigBuilder); when(mockParamConfigBuilder.setName(any(String.class))).thenReturn(mockParamConfigBuilder); when(mockAnnotation.value()).thenReturn(\"a\"); when(mockAnnotation.defaultValue()).thenReturn(\"\"); toTest.handleMethodAnnotation(mockAnnotation, mockMethodConfigBuilder); verify(mockMethodConfigBuilder).startExtraParamConfig(); verify(mockParamConfigBuilder).setType(ParamType.FORM); verify(mockParamConfigBuilder).setName(\"a\"); verify(mockParamConfigBuilder).setDefaultValue(null); verify(mockAnnotation).value(); verify(mockAnnotation).defaultValue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void execute() throws Exception { assertTrue(0 < arguments.size() && arguments.size() < 3); final String packageName = getArgument(0); logger.debug(\"URL: {}\", packageName); final int separatorIndex = packageName.indexOf(\"/\"); assertTrue(0 < separatorIndex, \"Invalid argument: \" + packageName); final Optional<String> checkout = getOptionalArgument(1); final CloneGit cloneGit = new CloneGit(); logger.trace(\"CloneGit: {}\", cloneGit); cloneGit.setArguments(asList(packageName, checkout.orElse(\"master\"))); cloneGit.execute(); final FileSet fileSet = cloneGit.getFileSet(); logger.debug(\"FileSet: {}\", fileSet.getFiles()); final String publishRepository = append(System.getProperty(\"user.home\"), MODULES_BASE); final Path publishPath = Paths.get(append(publishRepository, packageName)); if (exists(publishPath)) { deleteRecursively(publishPath, ALLOW_INSECURE); } createDirectories(publishPath); fileSet.copyTo(publishPath); printer.println(bind(NL_0, packageName)); printer.println(bind(NL_1, publishPath)); }### Assistant: @Test @PrepareForTest(InstallPackage.class) public void testExecute() throws Exception { final CloneGit cloneGit = mock(CloneGit.class); final FileSet fileSet = mock(FileSet.class); mockStatic(Files.class); when(Files.createDirectories(any())).thenReturn(null); whenNew(CloneGit.class).withAnyArguments().thenReturn(cloneGit); when(cloneGit.getFileSet()).thenReturn(fileSet); final InstallPackage command = new InstallPackage(); command.setPrinter(DummyMessagePrinter.getInstance()); command.setArguments(singletonList(randomUUID().toString() + \"/\" + randomUUID().toString())); command.execute(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: Offset createOffset(String name, int year) { if (name == null) { throw new IllegalArgumentException(\"Parameter 'name' must not be null.\"); } if (name.startsWith(\"AT1\")) { switch (year) { case 1991: return new Offset(-1, 0); case 1992: case 1993: case 1994: case 1995: return new Offset(0, 0); case 1996: return new Offset(0, 1); case 1997: return new Offset(0, 0); default: throw new IllegalArgumentException(MessageFormat.format(\"Illegal year {0}.\", year)); } } if (name.startsWith(\"AT2\")) { switch (year) { case 1995: case 1996: case 1997: case 1998: return new Offset(-1, 0); case 1999: case 2000: return new Offset(0, 0); case 2001: return new Offset(1, 1); case 2002: return new Offset(0, 0); case 2003: return new Offset(1, 0); default: throw new IllegalArgumentException(MessageFormat.format(\"Illegal year {0}.\", year)); } } if (name.startsWith(\"ATS\")) { switch (year) { case 2002: case 2003: case 2004: case 2005: case 2006: case 2007: case 2008: return new Offset(0, -1); case 2009: return new Offset(1, -1); case 2010: return new Offset(0, -1); case 2011: return new Offset(1, -1); case 2012: return new Offset(1, 0); default: throw new IllegalArgumentException(MessageFormat.format(\"Illegal year {0}.\", year)); } } throw new IllegalArgumentException(MessageFormat.format(\"Illegal name {0}.\", name)); }### Assistant: @Test public void testCreateOffset_ATSR3_2004() throws Exception { final Offset offset = factory.createOffset(\"ATS\", 2004); assertEquals(0, offset.getAcrossTrackOffset()); assertEquals(-1, offset.getAlongTrackOffset()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String getVersion() { final String defaultVersion = \"dev-\" + System.currentTimeMillis(); final String fileName = \"bigtable-hbase-version.properties\"; final String versionProperty = \"bigtable-hbase.version\"; try (InputStream stream = BigtableHBaseVersion.class.getResourceAsStream(fileName)) { if (stream == null) { LOG.error(\"Could not load properties file %s\", fileName); return defaultVersion; } Properties properties = new Properties(); properties.load(stream); String value = properties.getProperty(versionProperty); if (value == null) { LOG.error(\"%s not found in %s.\", versionProperty, fileName); } else if (value.startsWith(\"$\")) { LOG.info(\"%s property is not replaced.\", versionProperty); } else { return value; } } catch (IOException e) { LOG.error(\"Error while trying to get user agent name from %s\", e, fileName); } return defaultVersion; }### Assistant: @Test public void testVersionNumber() { Pattern versionPattern = Pattern.compile(\"^(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(-\\\\w+)?\"); Matcher versionMatcher = versionPattern.matcher(BigtableHBaseVersion.getVersion()); assertTrue(\"incorrect version format\", versionMatcher.matches()); int result = ComparisonChain.start() .compare(1, Integer.parseInt(versionMatcher.group(1))) .compare(14, Integer.parseInt(versionMatcher.group(2))) .compare(1, Integer.parseInt(versionMatcher.group(3))) .result(); assertTrue(\"Expected BigtableHBaseVersion.getVersion() to be at least 1.14.1\", result <= 0); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Optional<V> get(K key) { return wrapped.getIfPresent(key); }### Assistant: @Test public void testGet() { String key = \"A\"; GuavaCache<String, Integer> instance = new GuavaCache<>(100, Cache.EXPIRE_POLICY.AFTER_WRITE, 10000); instance.put(key, 1); Optional<Integer> result = instance.get(key); assertTrue(result.isPresent()); assertEquals(Integer.valueOf(1), result.get()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static BlockStmt getMapValuesExpressionBlockStmt(final String variableName, final MapValues mapValues, final ClassOrInterfaceType returnedType, final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap) { throw new KiePMMLException(\"MapValues not managed, yet\"); }### Assistant: @Test(expected = KiePMMLException.class) public void getMapValuesExpressionBlockStmt() { ExpressionFunctionUtils.getMapValuesExpressionBlockStmt(\"variableName\", new MapValues(), parseClassOrInterfaceType(Object.class.getName()), DEFAULT_PARAMETERTYPE_MAP); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public ProviderPage listWithPageableAndFilter(ProviderDTO providerDTO, PageableDTO pageableDTO) { Provider provider = GenericConverter.mapper(providerDTO, Provider.class); Example<Provider> example = Example.of(provider, ExampleMatcher.matching().withIgnorePaths(\"providerDefault\").withIgnoreCase().withStringMatcher(StringMatcher.CONTAINING)); Pageable pageable = Pageable.setPageable(pageableDTO.getOffset(), pageableDTO.getLimit()); Page<Provider> page = this.providerRepository.findAll(example, pageable); return new ProviderPage(PageDTO.build(page)); }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void testListWithPageableAndFilter() { PageableDTO pageableDTO = new PageableDTO(); pageableDTO.setLimit(10); pageableDTO.setOffset(0); ArrayList<Provider> listProviders = new ArrayList<>(); this.providerDatabase.setName(\"Provider Authentication\"); listProviders.add(providerDatabase); Page<Provider> page = new PageImpl<>(listProviders); Mockito.when(this.providerRepository.findAll(Mockito.any(Example.class), Mockito.any(Pageable.class))).thenReturn(page); ProviderPage providerPageResp = this.providerService.listWithPageableAndFilter(this.providerDTO, pageableDTO); assertEquals(1L, providerPageResp.getTotalElements()); Mockito.verify(this.providerRepository, Mockito.times(1)).findAll(Mockito.any(Example.class), Mockito.any(Pageable.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public AccessTokenResponse postAccessTokenRequest(ResourceContext ctx, String request) { final String caller = ctx.getApiName(); final String principalDomain = logPrincipalAndGetDomain(ctx); validateRequest(ctx.request(), principalDomain, caller); final Principal principal = ((RsrcCtxWrapper) ctx).principal(); String principalName = principal.getFullName(); if (request == null || request.isEmpty()) { throw requestError(\"Empty request body\", caller, ZTSConsts.ZTS_UNKNOWN_DOMAIN, principalDomain); } ctx.request().setAttribute(ACCESS_LOG_ADDL_QUERY, getQueryLogData(request)); String grantType = null; String scope = null; String proxyForPrincipal = null; int expiryTime = 0; String[] comps = request.split(\"&\"); for (String comp : comps) { int idx = comp.indexOf('='); if (idx == -1) { if (LOGGER.isDebugEnabled()) { LOGGER.debug(\"postAccessTokenRequest: skipping invalid component: {}\", comp); } continue; } final String key = decodeString(comp.substring(0, idx)); if (key == null) { if (LOGGER.isDebugEnabled()) { LOGGER.debug(\"postAccessTokenRequest: skipping invalid component: {}\", comp); } continue; } final String value = decodeString(comp.substring(idx + 1)); if (value == null) { continue; } switch (key) { case KEY_GRANT_TYPE: grantType = value.toLowerCase(); break; case KEY_SCOPE: scope = value.toLowerCase(); break; case KEY_EXPIRES_IN: expiryTime = ZTSUtils.parseInt(value, 0); break; case KEY_PROXY_FOR_PRINCIPAL: proxyForPrincipal = getProxyForPrincipalValue(value.toLowerCase(), principalName, principalDomain, caller); break; } } if (!OAUTH_GRANT_CREDENTIALS.equals(grantType)) { throw requestError(\"Invalid grant request: \" + grantType, caller, principal.getDomain(), principalDomain); } if (scope == null || scope.isEmpty()) { throw requestError(\"Invalid request: no scope provided\", caller, principal.getDomain(), principalDomain); } if (LOGGER.isDebugEnabled()) { LOGGER.debug(\"postAccessTokenRequest(principal: {}, grant-type: {}, scope: {}, expires-in: {}, proxy-for-principal: {})\", principalName, grantType, scope, expiryTime, proxyForPrincipal); } AccessTokenRequest tokenRequest = new AccessTokenRequest(scope); final String domainName = tokenRequest.getDomainName(); setRequestDomain(ctx, domainName); validate(domainName, TYPE_DOMAIN_NAME, principalDomain, caller); String[] requestedRoles = tokenRequest.getRoleNames(); if (requestedRoles != null) { for (String requestedRole : requestedRoles) { validate(requestedRole, TYPE_ENTITY_NAME, principalDomain, caller); } } DataCache data = dataStore.getDataCache(domainName); if (data == null) { setRequestDomain(ctx, ZTSConsts.ZTS_UNKNOWN_DOMAIN); throw notFoundError(\"No such domain: \" + domainName, caller, ZTSConsts.ZTS_UNKNOWN_DOMAIN, principalDomain); } checkRoleTokenAuthorizedServiceRequest(principal, domainName, caller); Set<String> roles = new HashSet<>(); dataStore.getAccessibleRoles(data, domainName, principalName, requestedRoles, roles, false); if (roles.isEmpty()) { throw forbiddenError(\"No access to any roles in domain: \" + domainName, caller, domainName, principalDomain); } String proxyUser = null; if (proxyForPrincipal != null) { if (tokenRequest.isOpenidScope()) { throw requestError(\"Proxy Principal cannot request id tokens\", caller, domainName, principalDomain); } Set<String> rolesForProxy = new HashSet<>(); dataStore.getAccessibleRoles(data, domainName, proxyForPrincipal, requestedRoles, rolesForProxy, false); roles.retainAll(rolesForProxy); if (roles.isEmpty()) { throw forbiddenError(\"No access to any roles by User and Proxy Principals\", caller, domainName, principalDomain); } proxyUser = principalName; principalName = proxyForPrincipal; } if (!isPrincipalRoleCertificateAccessValid(principal, domainName, roles)) { throw forbiddenError(\"Role based Principal does not include all roles\", caller, domainName, principalDomain); } long tokenTimeout = determineTokenTimeout(data, roles, null, expiryTime); long iat = System.currentTimeMillis() / 1000; AccessToken accessToken = new AccessToken(); accessToken.setVersion(1); accessToken.setAudience(domainName); accessToken.setClientId(principalName); accessToken.setIssueTime(iat); accessToken.setAuthTime(iat); accessToken.setExpiryTime(iat + tokenTimeout); accessToken.setUserId(principalName); accessToken.setSubject(principalName); accessToken.setIssuer(ztsOAuthIssuer); accessToken.setProxyPrincipal(proxyUser); accessToken.setScope(new ArrayList<>(roles)); X509Certificate cert = principal.getX509Certificate(); if (cert != null) { accessToken.setConfirmX509CertHash(cert); } String accessJwts = accessToken.getSignedToken(privateKey.getKey(), privateKey.getId(), privateKey.getAlgorithm()); String idJwts = null; if (tokenRequest.isOpenidScope()) { final String serviceName = tokenRequest.getServiceName(); validate(serviceName, TYPE_SIMPLE_NAME, principalDomain, caller); IdToken idToken = new IdToken(); idToken.setVersion(1); idToken.setAudience(tokenRequest.getDomainName() + \".\" + serviceName); idToken.setSubject(principalName); idToken.setIssuer(ztsOAuthIssuer); idToken.setIssueTime(iat); idToken.setAuthTime(iat); idToken.setExpiryTime(iat + determineIdTokenTimeout(tokenTimeout)); idJwts = idToken.getSignedToken(privateKey.getKey(), privateKey.getId(), privateKey.getAlgorithm()); } AccessTokenResponse response = new AccessTokenResponse().setAccess_token(accessJwts) .setToken_type(OAUTH_BEARER_TOKEN).setExpires_in((int) tokenTimeout).setId_token(idJwts); if (tokenRequest.sendScopeResponse() || requestedRoles != null && requestedRoles.length != roles.size()) { List<String> domainRoles = new ArrayList<>(); for (String role : roles) { domainRoles.add(domainName + AccessTokenRequest.OBJECT_ROLE + role); } if (tokenRequest.isOpenidScope()) { domainRoles.add(AccessTokenRequest.OBJECT_OPENID); } response.setScope(String.join(\" \", domainRoles)); } return response; }### Assistant: @Test public void testPostAccessTokenRequestInvalidDomain() { SignedDomain signedDomain = createSignedDomain(\"coretech\", \"weather\", \"storage\", true); store.processDomain(signedDomain, false); Principal principal = SimplePrincipal.create(\"user_domain\", \"user\", \"v=U1;d=user_domain;n=user;s=signature\", 0, null); ResourceContext context = createResourceContext(principal); try { zts.postAccessTokenRequest(context, \"grant_type=client_credentials&scope=sportstest:domain\"); fail(); } catch (ResourceException ex) { assertEquals(404, ex.getCode()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> void read(Property<? super T> property, Preferences preferences, Function<String, ? extends T> parser) { String name = property.getName(); String saved = preferences.get(name, null); if (saved != null) { try { property.setValue(parser.apply(saved)); } catch (Exception ignore) { } } }### Assistant: @Test public void testReadDouble() { String name = \"double\"; double value = Double.MIN_VALUE; DoubleProperty property = new SimpleDoubleProperty(null, name, -value); preferences.putDouble(name, value); PreferencesUtils.read(property, preferences); assertEquals(property.getValue().doubleValue(), value); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: String createIfNeeded(String path, byte[] data, CreateMode createMode) throws ZookeeperClientFailedException, InterruptedException { assert !createMode.isSequential() : createMode; if (data == null) data = EMPTY_BYTES; for (;;) { long connStartTime = this.connStartTime; try { return zk.create(path, data, ZK_ACL, createMode); } catch (KeeperException.NodeExistsException e) { if (log.isDebugEnabled()) log.debug(\"Node already exists: \" + path); return path; } catch (Exception e) { onZookeeperError(connStartTime, e); } } }### Assistant: @Test public void testReconnect1() throws Exception { startZK(1); ZookeeperClient client = createClient(SES_TIMEOUT); client.createIfNeeded(\"/apacheIgnite1\", null, CreateMode.PERSISTENT); zkCluster.getServers().get(0).stop(); IgniteInternalFuture fut = GridTestUtils.runAsync(new Callable<Void>() { @Override public Void call() throws Exception { U.sleep(2000); info(\"Restart zookeeper server\"); zkCluster.getServers().get(0).restart(); info(\"Zookeeper server restarted\"); return null; } }, \"start-zk\"); client.createIfNeeded(\"/apacheIgnite2\", null, CreateMode.PERSISTENT); fut.get(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Cookbook load(InputStream ingredients) { ObjectMapper mapper = new ObjectMapper(new YAMLFactory()); Cookbook cookbook = null; try { cookbook = mapper.readValue(ingredients, Cookbook.class); } catch (IOException e) { throw new RuntimeException(\"could not load recipe cookbook from input stream\", e); } validate(cookbook); return cookbook; }### Assistant: @Test(expected = RuntimeException.class) public void testLoad_throwsOnEmptyDomain() { String cookbook = String.join(\"\\n\", \"domain: ''\", \"ingredients: []\"); String ingredients = \"ingredients: []\"; loader.load(toStream(ingredients)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private XmlBuilder getTree(DirContext parentContext, String context, IPipeLineSession session, Map paramValueMap) { XmlBuilder contextElem = new XmlBuilder(\"context\"); contextElem.addAttribute(\"name\", context); String[] subCtxList = getSubContextList(parentContext, context, session); try { if (subCtxList.length == 0) { XmlBuilder attrs = attributesToXml(parentContext.getAttributes(context, getAttributesReturnedParameter())); contextElem.addSubElement(attrs); } else { for (int i = 0; i < subCtxList.length; i++) { contextElem.addSubElement( getTree((DirContext)parentContext.lookup(context), subCtxList[i], session, paramValueMap) ); } contextElem.addSubElement( attributesToXml(parentContext.getAttributes(context, getAttributesReturnedParameter()))); } } catch (NamingException e) { storeLdapException(e, session); log.error(\"Exception in operation [\" + getOperation()+ \"]: \", e); } return contextElem; }### Assistant: @Test public void init() throws SAXException, IOException, ConfigurationException, SenderException, LDAPException, TimeOutException { compareXML(\"Ldap/expected/init.xml\", getTree()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T extends View> T findParentOfClass(View view, Class<T> theClass) { if (theClass.isAssignableFrom(view.getClass())) return (T) view; else if (view.getParent() != null && view.getParent() instanceof View) return findParentOfClass((View) view.getParent(), theClass); else return null; }### Assistant: @Test public void testFindParentOfClass_fail() throws Exception { LinearLayout linearLayout = mock(LinearLayout.class); ViewGroup viewGroup = mock(ViewGroup.class); View view = mock(View.class); doReturn(viewGroup).when(view).getParent(); doReturn(linearLayout).when(viewGroup).getParent(); assertNull(CarpaccioHelper.findParentOfClass(view, RelativeLayout.class)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <T extends Thing> List<OrmFactory<? extends T>> getFactoriesOfType(Class<T> type) { return getFactoryStreamOfType(type).collect(Collectors.toList()); }### Assistant: @Test public void getFactoriesByTypeClassThatDoesNotExistTest() throws Exception { List<OrmFactory<? extends Error>> result = registry.getFactoriesOfType(Error.class); assertEquals(0, result.size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String getRole() { String retValue = null; if (roles != null && !roles.isEmpty()) { StringBuilder builder = new StringBuilder(); Iterator<String> roleIt = roles.iterator(); if (roleIt.hasNext()) { builder.append(roleIt.next()); while (roleIt.hasNext()) { builder.append(\",\"); builder.append(roleIt.next()); } retValue = builder.toString(); } } return retValue; }### Assistant: @Test public void testGetRole() { Attribute attribute = new Attribute(\"my.value\"); assertNull(attribute.getRole()); Set<String> roles = new LinkedHashSet<String>(); attribute.setRoles(roles); assertNull(attribute.getRole()); roles.add(\"role1\"); roles.add(\"role2\"); assertEquals(\"role1,role2\", attribute.getRole()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull public Money withAmount(@Nonnull final Integer amount) { return new Money(currency, amount); }### Assistant: @Test public void testWithAmount() { LOG.info(\"testWithAmount\"); Assert.assertTrue(y2 == x.withAmount(y2).getAmount()); Assert.assertTrue(x2 == y.withAmount(x2).getAmount()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void addFileToArchive(Path sourcePath, Path zipFile, Path pathInArchive) { if (pathInArchive == null){ throw new ExecutionException(\"The argument pathInArchive was empty\"); } if(sourcePath == null) { throw new ExecutionException(\"The argument sourcePath was empty\"); } if(! sourcePath.toFile().exists()){ throw new ExecutionException(\"Source file=[\"+sourcePath+\"] does not exist\"); } try { addNewEntryToZipFile(zipFile, pathInArchive, sourcePath); } catch (IOException | URISyntaxException e) { throw new ExecutionException(\"The file=[\" + sourcePath + \"] could not be added to the archive=[\" + zipFile + \"]\", e); } }### Assistant: @Test public void testAddFileToArchive() throws Exception { fileToArchiveWriter.addFileToArchive(fileToAddIntoArchive.toPath(), archiveToAddFileIn.toPath(), innerPath); List<String> filesInZip = listContentsOfZip(archiveToAddFileIn); assertThat(filesInZip.stream().map(Paths::get)).contains(innerPath); originalContentOfZip.forEach( f -> assertThat(filesInZip).contains(f)); String contentOfAddedFile = getContentOfEntryInZip(archiveToAddFileIn, innerPath.toString()); assertThat(contentOfAddedFile).isEqualTo(contentOfInnerFile); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void resetDocks() { abstractScenarioSimulationDocksHandler.resetDocks(); }### Assistant: @Test public void resetDocks() { presenterSpy.resetDocks(); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).resetDocks(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static String replaceWildcards(final String input) { if (input == null) { return null; } else { return input.replace(ESCAPE, ESCAPE + ESCAPE) .replace(WILDCARD_ALL_REPLACEMENT, ESCAPE + WILDCARD_ALL_REPLACEMENT) .replace(WILDCARD_SINGLE_REPLACEMENT, ESCAPE + WILDCARD_SINGLE_REPLACEMENT) .replace(WILDCARD_ALL, WILDCARD_ALL_REPLACEMENT) .replace(WILDCARD_SINGLE, WILDCARD_SINGLE_REPLACEMENT); } }### Assistant: @Test public void escapePercentageCharacters() { final String input = \"TST%-111%\"; assertThat(SearchUtil.replaceWildcards(input)).isEqualTo(\"TST\\\\%-111\\\\%\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<LocationResourceTemplate> matchNode(NodeTemplate nodeTemplate, NodeType nodeType, LocationResources locationResources, Map<String, MatchingConfiguration> matchingConfigurations) { return super.match(nodeTemplate, nodeType, locationResources.getNodeTemplates(), locationResources.getNodeTypes(), locationResources, matchingConfigurations); }### Assistant: @Test public void real_world_location_resource_compute_should_be_able_to_match_an_abstract_compute_from_topology() throws Exception { Map<String, MatchingConfiguration> emptyMatchingConfigurations = new HashMap<>(); NodeTemplate wantedNodeTemplate = nodeTemplate(\"tosca.nodes.Compute\"); NodeType wantedNodeType = new NodeType(); List<LocationResourceTemplate> proposition = nodeMatcher.matchNode(wantedNodeTemplate, wantedNodeType, locationResources, emptyMatchingConfigurations); assertThat(proposition).hasSize(1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void setPerceiveStereo(boolean val) { this.optPerceiveStereo = val; }### Assistant: @Test public void testUseStereoElements() throws CDKException { final String smiles1 = \"CC[C@@H](C)O\"; final String smiles2 = \"CC[C@H](O)C\"; final String molfile = \"\\n\" + \" CDK 10121722462D \\n\" + \"\\n\" + \" 5 4 0 0 0 0 999 V2000\\n\" + \" -4.1837 2.6984 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0\\n\" + \" -3.4692 3.1109 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0\\n\" + \" -2.7547 2.6984 0.0000 C 0 0 1 0 0 0 0 0 0 0 0 0\\n\" + \" -2.0403 3.1109 0.0000 C 0 0 0 0 0 0 0 0 0 0 0 0\\n\" + \" -2.7547 1.8734 0.0000 O 0 0 0 0 0 0 0 0 0 0 0 0\\n\" + \" 1 2 1 0 0 0 0\\n\" + \" 2 3 1 0 0 0 0\\n\" + \" 3 4 1 0 0 0 0\\n\" + \" 3 5 1 1 0 0 0\\n\" + \"M END\\n\"; IChemObjectBuilder bldr = SilentChemObjectBuilder.getInstance(); MDLV2000Reader mdlr = new MDLV2000Reader(new StringReader(molfile)); SmilesParser smipar = new SmilesParser(bldr); IAtomContainer mol1 = smipar.parseSmiles(smiles1); IAtomContainer mol2 = smipar.parseSmiles(smiles2); IAtomContainer mol3 = mdlr.read(bldr.newAtomContainer()); CircularFingerprinter fpr = new CircularFingerprinter(); fpr.setPerceiveStereo(true); org.hamcrest.MatcherAssert.assertThat(fpr.getFingerprint(mol1), is(fpr.getFingerprint(mol2))); org.hamcrest.MatcherAssert.assertThat(fpr.getFingerprint(mol2), is(not(fpr.getFingerprint(mol3)))); fpr.setPerceiveStereo(false); org.hamcrest.MatcherAssert.assertThat(fpr.getFingerprint(mol1), is(fpr.getFingerprint(mol2))); org.hamcrest.MatcherAssert.assertThat(fpr.getFingerprint(mol2), is(fpr.getFingerprint(mol3))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void onMessage(ResponseBody body) { byte[] data; try { if (body.contentType() == WebSocket.TEXT) { data = body.string().getBytes(); } else { data = body.bytes(); } } catch (IOException e) { log.error(\"Error trying to interpret WebSocket message\", e); return; } body.close(); if (this.isClosed) { return; } Map msg; try { msg = mapper.readValue(data, Map.class); } catch (Exception e) { log.warn(\"Failed to interpret WebSocket message as Map.\", e); return; } if (msg.containsKey(\"status\")) { int statusCheck = (Integer) msg.get(\"status\"); if (statusCheck >= 300) { log.error(\"Map of the received message: {}\", msg); } else { log.trace(\"Map of the received message: {}\", msg); } } else { log.debug(\"Map of the received message: {}\", msg); } if (msg.get(\"op\") == null) { Response message = Response.fromMap(msg); log.trace(\"Http response received\"); if (client.isAuthed()) { if (!client.isConnected() && (Integer) message.getStatus() >= 300) { log.warn(\"Error occurred attempting to connect to source.\"); log.debug(\"Error message was: {}\", message); client.sourceFuture.complete(false); } else { client.acknowledgeNotification(); } if (this.httpHandler != null) { try { this.httpHandler.handleMessage(message); } catch (Exception e) { log.error(\"Error occurred when running the HTTP handler.\", e); } } else { log.trace(\"Http response received with no handler set\"); } } else { synchronized (client) { if (!client.isOpen() || this.isClosed) { return; } if ((int) message.getStatus() == 200 && !client.isAuthed()) { client.authFuture.complete(true); } else { client.authFuture.complete(false); log.warn(\"Error occurred attempting to authenticate\"); } } if (authHandler != null) { try { this.authHandler.handleMessage(message); } catch (Exception e) { log.error(\"Error occurred when running the authentication handler for source.\", e); } } else { log.debug(\"Auth received with no handler set\"); } } } else { ExtensionServiceMessage message = new ExtensionServiceMessage(\"\").fromMap(msg); if (client.isConnected()) { log.debug(\"Message with op '{}' received\", message.getOp()); log.debug(\"Map of ExtensionServiceMessage: {}\", message); if (message.getOp().equals(ExtensionServiceMessage.OP_PUBLISH)) { if (this.publishHandler != null) { try { this.publishHandler.handleMessage(message); } catch (Exception e) { log.error(\"Error occurred when running the Publish handler.\", e); } } else { log.debug(\"Publish received with no handler set\"); } } else if (message.getOp().equals(ExtensionServiceMessage.OP_QUERY)) { if (this.queryHandler != null && !isClosed) { try { this.queryHandler.handleMessage(message); } catch (Exception e) { log.error(\"Error occurred when running the Query handler.\", e); } } else { log.warn(\"Query received with no user-set handler\"); log.debug(\"Full message: {}\", message); client.sendQueryError(ExtensionServiceMessage.extractReplyAddress(msg), \"io.vantiq.extjsdk.unsetQueryHandler\", \"Queries are not supported for source '{0}'. No handler has been set.\", new Object[] {message.getSourceName()}); } } else if (message.getOp().equals(ExtensionServiceMessage.OP_RECONNECT_REQUIRED)) { synchronized (client) { if (this.isClosed) { return; } client.sourceHasDisconnected(); } if (this.reconnectHandler != null) { try { this.reconnectHandler.handleMessage(message); } catch (Exception e) { log.error(\"Error occurred when running the Reconnect handler.\", e); } } if (client.autoReconnect) { log.info(\"Automatically attempting to reconnect to source.\"); client.connectToSource(); } if (!client.autoReconnect && this.reconnectHandler == null) { log.warn(\"Reconnect received with no handler set and no autoconnect. Can no longer \" + \"communicate with source.\"); } } else { log.warn(\"ExtensionServiceMessage with unknown/unexpected op '{}'\", msg.get(\"op\")); } } else if (msg.get(\"op\").equals(ExtensionServiceMessage.OP_CONFIGURE_EXTENSION) && client.isAuthed()) { synchronized (client) { if (!client.isAuthed()) { return; } client.sourceFuture.complete(true); log.info(\"Successful connection to {}\", msg.get(\"resourceId\").toString()); } if (this.configHandler != null) { try { this.configHandler.handleMessage(message); } catch (Exception e) { log.error(\"Error occurred when running the Configuration handler.\", e); } } else { log.warn(\"Configuration received with no handler set\"); } } else { log.warn(\"ExtensionServiceMessage received when not connected\"); } } }### Assistant: @Test public void testPublish() { connectToSource(srcName, null); Map<String,Object> publishMessage = new LinkedHashMap<>(); String key = \"publish\"; String val = \"info\"; publishMessage.put(key, val); ResponseBody body = TestListener.createPublishMessage(publishMessage, srcName); listener.onMessage(body); assert pHandler.compareOp(ExtensionServiceMessage.OP_PUBLISH); assert pHandler.compareSourceName(srcName); assert pHandler.compareValue( key, val); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String resolve(final Object... args) throws ResolveDependencyStrategyException { return UUID.randomUUID().toString(); }### Assistant: @Test public void testUuidGenerated() throws ResolveDependencyStrategyException { IResolveDependencyStrategy strategy = new UuidNextIdStrategy(); assertTrue(strategy.resolve() instanceof String); assertNotEquals(strategy.resolve(), strategy.resolve()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void validate(CollectedClientData collectedClientData, ServerProperty serverProperty) { final Origin clientOrigin = collectedClientData.getOrigin(); if (!serverProperty.getOrigins().contains(clientOrigin)) { throw new BadOriginException(\"The collectedClientData '\" + clientOrigin + \"' origin doesn't match any of the preconfigured server origin.\"); } }### Assistant: @Test void apk_key_hash_sha256_test_with_not_equal_origins() { Origin originA = new Origin(\"android:apk-key-hash-sha256:aNiP5iKyQ8JwgGOaKA1zGPUPJIS-0H1xKCQcfIoGLck\"); Origin originB = new Origin(\"android:apk-key-hash-sha256:pNiP5iKyQ8JwgGOaKA1zGPUPJIS-0H1xKCQcfIoGLck\"); CollectedClientData collectedClientData = new CollectedClientData(ClientDataType.CREATE, TestDataUtil.createChallenge(), originA, null); ServerProperty serverProperty = new ServerProperty(originB, \"example.com\", TestDataUtil.createChallenge(), null); assertThrows(BadOriginException.class, () -> target.validate(collectedClientData, serverProperty) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static boolean isFrozen() { synchronized (initLock) { return Jta.frozen; } }### Assistant: @Test public void testIsFrozen() throws Exception { assertFalse(Jta.isFrozen()); Jta.configure(transactionManager, userTransaction); assertTrue(Jta.isFrozen()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Metadata headers() { return headers; }### Assistant: @Test public void headers() { assertThat(response.headers()).isSameAs(headers); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static MultiLevelSource create(MultiLevelSource lonSource, MultiLevelSource latSource, LonLatFunction function, int targetDataType) { Assert.argument(lonSource != null, \"lonSource != null\"); Assert.argument(latSource != null, \"latSource != null\"); Assert.argument(function != null, \"function != null\"); Rectangle2D lonModelBounds = lonSource.getModel().getModelBounds(); Rectangle2D latModelBounds = latSource.getModel().getModelBounds(); Assert.argument(Objects.equals(lonModelBounds, latModelBounds), \"Model bounds of lat and lon source must be equal\"); return new LonLatMultiLevelSource(lonSource, latSource, function, targetDataType); }### Assistant: @Test public void testCreate_WithIncompatibleSources() { final MultiLevelSource lonSource = new TestMultiLevelSource(10, 10); final MultiLevelSource latSource = new TestMultiLevelSource(11, 11); final LonLatFunction function = new TestLonLatFunction(); try { LonLatMultiLevelSource.create(lonSource, latSource, function, DataBuffer.TYPE_BYTE); fail(); } catch (IllegalArgumentException ignored) { } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public boolean isShardByDb() { return shardByDb; }### Assistant: @Test public void testIsShardByDb() { AbstractShardingStrategy test = new TestShardingStrategy(); assertFalse(test.isShardByDb()); test.setShardByDb(true); assertTrue(test.isShardByDb()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: byte[] toIntegerBytes(final BigInteger bigInt, boolean rfc) { if (!rfc) { return bigInt.toByteArray(); } int bitlen = bigInt.bitLength(); bitlen = ((bitlen + 7) >> 3) << 3; final byte[] bigBytes = bigInt.toByteArray(); if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) { return bigBytes; } int startSrc = 0; int len = bigBytes.length; if ((bigInt.bitLength() % 8) == 0) { startSrc = 1; len--; } final int startDst = bitlen / 8 - len; final byte[] resizedBytes = new byte[bitlen / 8]; System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len); return resizedBytes; }### Assistant: @Test public void testToIntegerBytes4() { ChangeLogStore clogStore = new MockZMSFileChangeLogStore(\"/tmp/zts_server_unit_tests/zts_root\", pkey, \"0\"); DataStore store = new DataStore(clogStore, null); final Base64.Encoder encoder = Base64.getEncoder(); final String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\" + \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\" + \"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv\" + \"Q0=\"; final BigInteger bigInt4 = new BigInteger( \"80624726256040348115552042320\" + \"6968135001872753709424419772586693950232350200555646471175944\" + \"519297087885987040810778908507262272892702303774422853675597\" + \"748008534040890923814202286633163248086055216976551456088015\" + \"338880713818192088877057717530169381044092839402438015097654\" + \"53542091716518238707344493641683483917\"); assertEquals(encodedInt4, new String(encoder.encode(store.toIntegerBytes(bigInt4, true)))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Pointer update(final Pointer pointer, final byte[] payload, final long expiry) { try { return pointer.getOffHeapByteBuffer().update(pointer, payload, expiry); } catch (final BufferOverflowException exception) { return store(payload, expiry); } }### Assistant: @Test public void update() { int size = 100; final long expiry = System.currentTimeMillis(); byte[] bytes = new byte[size]; random.nextBytes(bytes); Pointer pointer = bufferStore.store(bytes, expiry); byte[] expectedBytes = new byte[size]; random.nextBytes(expectedBytes); pointer = bufferStore.update(pointer, expectedBytes, expiry); byte[] actualBytes = bufferStore.retrieve(pointer); assertArrayEquals(expectedBytes, actualBytes); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<String> split(String input) { List<String> statements = new ArrayList<String>(); StrBuilder currentSql = new StrBuilder(); StrTokenizer lineTokenizer = new StrTokenizer(input); lineTokenizer.setDelimiterMatcher(StrMatcher.charSetMatcher(\"\\r\\n\")); for (String line : lineTokenizer.getTokenArray()) { String strippedLine = StringUtils.stripEnd(line, null); if (!currentSql.isEmpty()) { currentSql.append(lineEnding.get()); } currentSql.append(strippedLine); if (delimiterType.matches(strippedLine, delimiter)) { statements.add(currentSql.substring(0, currentSql.length() - delimiter.length())); currentSql.clear(); } } if (!currentSql.isEmpty()) { statements.add(currentSql.toString()); } return statements; }### Assistant: @Test public void shouldNotSplitStatementsThatHaveNoDelimter() throws Exception { List<String> result = splitter.split(\"SELECT 1\"); assertThat(result, hasItem(\"SELECT 1\")); assertThat(result.size(), is(1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public FeatureInputStream query( Query query ) throws FilterEvaluationException, FeatureStoreException { return storedFeatures.query( query ); }### Assistant: @Test public void testQueryAllPhilosophers() throws FilterEvaluationException, FeatureStoreException { TypeName[] typeNames = new TypeName[] { new TypeName( QName.valueOf( \"{http: null ) }; Query query = new Query( typeNames, null, null, null, null ); FeatureCollection fc = store.query( query ).toCollection(); Assert.assertEquals( typeNames[0].getFeatureTypeName(), fc.iterator().next().getName() ); Assert.assertEquals( 7, fc.size() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static <P> Matcher[] toArray(Iterable<? extends Matcher<P>> matchers) { if (matchers == null) throw new NullPointerException(\"matchers == null\"); if (matchers instanceof Collection) { return (Matcher[]) ((Collection) matchers).toArray(new Matcher[0]); } List<Matcher<P>> result = new ArrayList<>(); for (Matcher<P> matcher : matchers) result.add(matcher); return result.toArray(new Matcher[0]); }### Assistant: @Test public void toArray_list() { Matcher<Void> one = b -> true; Matcher<Void> two = b -> false; Matcher<Void> three = b -> true; assertThat(Matchers.toArray(asList(one, two, three))) .containsExactly(one, two, three); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public SubscriptionItem createSubscriptionItem(final Subscriber subscriber, final Locale locale, final String mimeTypeTitle, final String mimeTypeContent) { final Date compareDate = getDefaultCompareDate(); return createSubscriptionItem(subscriber, locale, mimeTypeTitle, mimeTypeContent, compareDate); }### Assistant: @Test public void createSubscriptionItem_ForNullSubcriber() { SubscriptionItem subscriptionItem = notificationService.createSubscriptionItem(null, LOCALE_EN, \"\", \"\"); assertNull(subscriptionItem); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public int hashCode() { long temp = Double.doubleToLongBits( val ); return (int) (temp ^ (temp >>> 32)); }### Assistant: @Test void testHashCode() { FloatValue value = new FloatValue( 6.28 ); assertThat( value.hashCode(), notNullValue() ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public <E, F> List<UnifiedDiffBlock<E, F>> display(DiffResult<E> diffResult) { return display(diffResult, this.<E, F>getDefaultConfiguration()); }### Assistant: @Test void displayWithConflicts() throws Exception { List<String> previous = readLines(\"previous.txt\"); List<String> current = readLines(\"twoContexts.txt\"); List<String> next = readLines(\"twoContexts_next.txt\"); MergeResult<String> mergeResult = getDiffManager().merge(previous, next, current, null); assertEquals(1, mergeResult.getConflicts().size()); DiffResult<String> diffResult = getDiffManager().diff(previous, next, null); List<UnifiedDiffBlock<String, Object>> unifiedDiffBlocks = unifiedDiffDisplayer.display(diffResult); assertEquals(2, unifiedDiffBlocks.size()); assertFalse(unifiedDiffBlocks.get(0).isConflicting()); assertFalse(unifiedDiffBlocks.get(1).isConflicting()); unifiedDiffBlocks = unifiedDiffDisplayer.display(diffResult, mergeResult.getConflicts()); assertEquals(4, unifiedDiffBlocks.size()); assertFalse(unifiedDiffBlocks.get(0).isConflicting()); assertFalse(unifiedDiffBlocks.get(1).isConflicting()); assertTrue(unifiedDiffBlocks.get(2).isConflicting()); assertFalse(unifiedDiffBlocks.get(3).isConflicting()); assertEquals(3, unifiedDiffBlocks.get(1).size()); assertEquals(2, unifiedDiffBlocks.get(2).size()); UnifiedDiffConflictElement<String> unifiedDiffConflictElement = unifiedDiffBlocks.get(2).getConflict(); assertEquals(Collections.singletonList(\" unifiedDiffConflictElement.getPreviousElement()); assertEquals(Collections.singletonList(\" unifiedDiffConflictElement.getCurrentElement()); assertEquals(Collections.singletonList(\" unifiedDiffConflictElement.getNextElement()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public List<V> execute(Query query) { List<K> keys = indexHandler.execute(query); List<V> values = new ArrayList<V>(keys.size()); for (K key : keys) { V value = get(key); if (value != null) { values.add(value); } } if (query.getFilter() != null) { values = (List<V>) query.getFilter().filter((List<Object>) values); } return values; }### Assistant: @Test @SuppressWarnings(\"unchecked\") public void execute() { AbstractSearchableCache<Integer, Item> abstractCache = new AbstractSearchableCache<Integer, Item>( \"searchable-cache\", key -> null, (key, value) -> { }, indexHandler) { final Map<Integer, Item> items = new HashMap<>(); @Override public void put(Integer key, Item value) { items.put(key, value); indexHandler.add(key, value); } @Override public void put(Integer key, Item value, TimeUnit timeUnit, long duration) { items.put(key, value); indexHandler.add(key, value); } @Override public Item get(Integer key) { return null; } @Override public Item invalidate(Integer key) { final Item value = items.remove(key); indexHandler.remove(key, value); return null; } @Override public boolean contains(Integer key) { return false; } @Override public void clear() { } @Override public long size() { return 0; } @Override public CacheStats stats() { return null; } }; Item item1 = new Item(1); Item item2 = new Item(2); abstractCache.put(1, item1); abstractCache.put(2, item1); List<Integer> keys = new ArrayList<Integer>(); keys.add(1); keys.add(2); List<Item> values = new ArrayList<Item>(); values.add(item1); values.add(item2); doReturn(keys).when(indexHandler).execute(any(Query.class)); doReturn(values).when(filter).filter(anyList()); List<Item> items = abstractCache .execute(CacheQuery.newQuery().setCriteria(criteria).setFilter(filter)); assertTrue(items.contains(item1)); assertTrue(items.contains(item2)); abstractCache.setCacheLoader(key -> null); assertNull(abstractCache.getCacheLoader().load(1)); assertEquals(\"searchable-cache\", abstractCache.getName()); abstractCache.setEvictionListener((key, value) -> { }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override void decode(ByteBufAllocator alloc, ByteBuf headerBlock, SpdyHeadersFrame frame) throws Exception { if (headerBlock == null) { throw new NullPointerException(\"headerBlock\"); } if (frame == null) { throw new NullPointerException(\"frame\"); } if (cumulation == null) { decodeHeaderBlock(headerBlock, frame); if (headerBlock.isReadable()) { cumulation = alloc.buffer(headerBlock.readableBytes()); cumulation.writeBytes(headerBlock); } } else { cumulation.writeBytes(headerBlock); decodeHeaderBlock(cumulation, frame); if (cumulation.isReadable()) { cumulation.discardReadBytes(); } else { releaseBuffer(); } } }### Assistant: @Test public void testNegativeNameValuePairs() throws Exception { ByteBuf headerBlock = Unpooled.buffer(4); headerBlock.writeInt(-1); decoder.decode(ByteBufAllocator.DEFAULT, headerBlock, frame); assertFalse(headerBlock.isReadable()); assertTrue(frame.isInvalid()); assertEquals(0, frame.headers().names().size()); headerBlock.release(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public EntityCollection readAll(final EdmEntitySet edmEntitySet) throws DataProviderException { EntityCollection entityCollection = data.get(edmEntitySet.getName()); if (entityCollection == null) { entityCollection = new EntityCollection(); data.put(edmEntitySet.getName(), entityCollection); } return entityCollection; }### Assistant: @Test public void esAllPrim() throws Exception { final DataProvider data = new DataProvider(oData, edm); EntityCollection outSet = data.readAll(esAllPrim); Assert.assertEquals(4, outSet.getEntities().size()); Entity first = outSet.getEntities().get(0); Assert.assertEquals(16, first.getProperties().size()); Assert.assertEquals(2, first.getNavigationLinks().size()); final EntityCollection target = first.getNavigationLink(\"NavPropertyETTwoPrimMany\").getInlineEntitySet(); Assert.assertNotNull(target); Assert.assertEquals(1, target.getEntities().size()); Assert.assertEquals(data.readAll(entityContainer.getEntitySet(\"ESTwoPrim\")).getEntities().get(1), target.getEntities().get(0)); Assert.assertEquals(16, outSet.getEntities().get(1).getProperties().size()); Assert.assertEquals(16, outSet.getEntities().get(2).getProperties().size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Activity asMessageUpdateActivity() { return isActivity(ActivityTypes.MESSAGE_UPDATE) ? this : null; }### Assistant: @Test public void AsMessageUpdateActivity() { Activity activity = createActivity(); activity.setType(\"messageUpdate\"); Activity result = activity.asMessageUpdateActivity(); Assert.assertEquals(result.getType(), ActivityTypes.MESSAGE_UPDATE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Supplier<Boolean> isInTimeWindowPredicate(TitusRuntime titusRuntime, TimeWindow timeWindow) { if (isEmpty(timeWindow)) { return () -> true; } List<Function<DayOfWeek, Boolean>> dayPredicates = new ArrayList<>(); timeWindow.getDays().forEach(day -> dayPredicates.add(buildDayPredicate(day))); List<Function<Integer, Boolean>> hourPredicates = new ArrayList<>(); timeWindow.getHourlyTimeWindows().forEach(h -> hourPredicates.add(buildHourlyTimeWindows(h))); Function<DayOfWeek, Boolean> combinedDayPredicate = dayPredicates.isEmpty() ? day -> true : oneOf(dayPredicates); Function<Integer, Boolean> combinedHourPredicate = hourPredicates.isEmpty() ? hour -> true : oneOf(hourPredicates); ZoneId zoneId; try { zoneId = DateTimeExt.toZoneId(timeWindow.getTimeZone()); } catch (Exception e) { titusRuntime.getCodeInvariants().unexpectedError(\"Unrecognized time zone (data not properly validated)\", e); return () -> false; } return () -> { ZonedDateTime dateTime = Instant.ofEpochMilli(titusRuntime.getClock().wallTime()).atZone(zoneId); return combinedDayPredicate.apply(dateTime.getDayOfWeek()) && combinedHourPredicate.apply(dateTime.getHour()); }; }### Assistant: @Test public void testEmptyTimeWindowPredicate() { Supplier<Boolean> predicate = TimeWindowFunctions.isInTimeWindowPredicate(titusRuntime, TimeWindow.empty()); assertThat(predicate.get()).isTrue(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static Properties loadProperties(@Nonnull File pluginsDirectory) throws IOException { if (!pluginsDirectory.exists()) { throw new IOException(format(DIRECTORY_NOT_FOUND_ERROR_MESSAGE, pluginsDirectory.getAbsolutePath())); } File propertyFile = new File(pluginsDirectory, PROPERTY_FILE); if (!propertyFile.exists()) { throw new IOException(format(FILE_NOT_FOUND_ERROR_MESSAGE, propertyFile.getAbsolutePath())); } Properties properties = new Properties(); try (FileInputStream fis = new FileInputStream(propertyFile)) { properties.load(fis); } return properties; }### Assistant: @Test void loadProperties_shouldThrowIOE_ifPropertyFileNotExist() { Path pluginsDirWithoutPropertyFile = Paths.get(TEST_DIRECTORY.getAbsolutePath(), \"without-property-file\"); IOException exception = assertThrows(IOException.class, () -> PropertyLoader.loadProperties(pluginsDirWithoutPropertyFile.toFile())); assertLinesMatch(singletonList(\"^File '.*' not found$\"), singletonList(exception.getMessage())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static byte[] encodeInt(int singleInt) { if ((singleInt & 0xFF) == singleInt) return encodeByte((byte) singleInt); else if ((singleInt & 0xFFFF) == singleInt) return encodeShort((short) singleInt); else if ((singleInt & 0xFFFFFF) == singleInt) return new byte[]{(byte) (OFFSET_SHORT_ITEM + 3), (byte) (singleInt >>> 16), (byte) (singleInt >>> 8), (byte) singleInt}; else { return new byte[]{(byte) (OFFSET_SHORT_ITEM + 4), (byte) (singleInt >>> 24), (byte) (singleInt >>> 16), (byte) (singleInt >>> 8), (byte) singleInt}; } }### Assistant: @Ignore @Test(expected = RuntimeException.class) public void cannotEncodeNegativeNumbers() { encodeInt(Integer.MIN_VALUE); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static long requireInRange(long val, long first, long lastExclusive) { if (val < first || val >= lastExclusive) { throw new IllegalArgumentException(val + IS_NOT_IN_THE_RANGE + first + \", \" + lastExclusive + \")\"); } return val; }### Assistant: @Test void testRequireInRange3() { assertThrows(RuntimeException.class, () -> LongRangeUtil.requireInRange(1,-1,0, RuntimeException::new)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public LinesChartModel create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results, final ChartModelConfiguration configuration) { SeveritySeriesBuilder builder = new SeveritySeriesBuilder(); LinesDataSet dataSet = builder.createDataSet(configuration, results); return createChartFromDataSet(dataSet); }### Assistant: @Test void shouldHaveNotMoreValuesThatAllowed() { SeverityTrendChart chart = new SeverityTrendChart(); ChartModelConfiguration configuration = mock(ChartModelConfiguration.class); when(configuration.getBuildCount()).thenReturn(3); when(configuration.getAxisType()).thenReturn(AxisType.BUILD); when(configuration.isBuildCountDefined()).thenReturn(true); List<BuildResult<AnalysisBuildResult>> results = new ArrayList<>(); results.add(createResult(4, 4000, 400, 40, 4)); results.add(createResult(3, 3000, 300, 30, 3)); results.add(createResult(2, 2000, 200, 20, 2)); results.add(createResult(1, 1000, 100, 10, 1)); LinesChartModel model = chart.create(results, configuration); verifySeries(model.getSeries().get(3), Severity.ERROR, 2000, 3000, 4000); verifySeries(model.getSeries().get(2), Severity.WARNING_HIGH, 200, 300, 400); verifySeries(model.getSeries().get(1), Severity.WARNING_NORMAL, 20, 30, 40); verifySeries(model.getSeries().get(0), Severity.WARNING_LOW, 2, 3, 4); assertThatJson(model).node(\"domainAxisLabels\") .isArray().hasSize(3).containsExactly(\"#2\", \"#3\", \"#4\"); assertThatJson(model).node(\"buildNumbers\") .isArray().hasSize(3).containsExactly(2, 3, 4); assertThatJson(model).node(\"series\") .isArray().hasSize(4); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String findRevType( List<ModifiedEntityTypeEntity> modifiedEntityTypeEntitys) { Byte btype = 1; if (modifiedEntityTypeEntitys.size() == 1) btype = modifiedEntityTypeEntitys.get(0).getRevisionType(); if (modifiedEntityTypeEntitys.size() == 2) { if (modifiedEntityTypeEntitys.get(0).getRevisionType() != 1) btype = modifiedEntityTypeEntitys.get(0).getRevisionType(); else btype = modifiedEntityTypeEntitys.get(1).getRevisionType(); } if (modifiedEntityTypeEntitys.size() == 3) { if (modifiedEntityTypeEntitys.get(0).getRevisionType() == 2 || modifiedEntityTypeEntitys.get(1).getRevisionType() == 2 || modifiedEntityTypeEntitys.get(2).getRevisionType() == 2) btype = 2; else if (modifiedEntityTypeEntitys.get(0).getRevisionType() == 0 || modifiedEntityTypeEntitys.get(1).getRevisionType() == 0 || modifiedEntityTypeEntitys.get(2).getRevisionType() == 0) btype = 0; } String revType = findRevType(btype); return revType; }### Assistant: @Test public void testFindRevType_when_type_is_deleted() { Byte btype = 2; String revType = pasut.findRevType(btype); assertEquals(\"Delete entry\", revType); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void loadContent() { view.showLoading(); getService().call(getModelSuccessCallback(), getNoSuchFileExceptionErrorCallback()).loadContent(versionRecordManager.getCurrentPath()); }### Assistant: @Test public void testLoadContentFail() throws Exception { doThrow(new RuntimeException()).when(service).loadContent(eq(path)); presenter.loadContent(); verify(view, never()).setContent(any(TemplateModel.class), any(AsyncPackageDataModelOracle.class), any(Caller.class), any(EventBus.class), anyBoolean()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Response updateDeviceAssigningToGroups(DeviceToGroupsAssignment deviceToGroupsAssignment) { try { List<DeviceIdentifier> deviceIdentifiers = new ArrayList<>(); deviceIdentifiers.add(deviceToGroupsAssignment.getDeviceIdentifier()); GroupManagementProviderService service = DeviceMgtAPIUtils.getGroupManagementProviderService(); List<DeviceGroup> deviceGroups = service.getGroups(deviceToGroupsAssignment.getDeviceIdentifier()); for (DeviceGroup group : deviceGroups) { Integer groupId = group.getGroupId(); if (deviceToGroupsAssignment.getDeviceGroupIds().contains(groupId)) { deviceToGroupsAssignment.getDeviceGroupIds().remove(groupId); } else if (!CarbonConstants.REGISTRY_SYSTEM_USERNAME.equals(group.getOwner())) { DeviceMgtAPIUtils.getGroupManagementProviderService().removeDevice(groupId, deviceIdentifiers); } } for (int groupId : deviceToGroupsAssignment.getDeviceGroupIds()) { DeviceMgtAPIUtils.getGroupManagementProviderService().addDevices(groupId, deviceIdentifiers); } return Response.status(Response.Status.OK).build(); } catch (GroupManagementException e) { String msg = \"Error occurred while assigning device to groups.\"; log.error(msg, e); return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(msg).build(); } catch (DeviceNotFoundException e) { return Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build(); } }### Assistant: @Test(description = \"This method tests updateDeviceAssigningToGroups under different conditions.\") public void testUpdateDeviceAssigningToGroups() throws GroupManagementException, DeviceNotFoundException { PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, \"getGroupManagementProviderService\")) .toReturn(groupManagementProviderService); Mockito.reset(groupManagementProviderService); DeviceToGroupsAssignment deviceToGroupsAssignment = new DeviceToGroupsAssignment(); List<Integer> groupIds = new ArrayList<>(); groupIds.add(1); groupIds.add(2); deviceToGroupsAssignment.setDeviceGroupIds(groupIds); deviceToGroupsAssignment.setDeviceIdentifier(new DeviceIdentifier(\"test\", \"android\")); List<DeviceGroup> deviceGroups = new ArrayList<>(); DeviceGroup deviceGroup = new DeviceGroup(); deviceGroup.setGroupId(1); deviceGroups.add(deviceGroup); deviceGroup = new DeviceGroup(); deviceGroup.setGroupId(3); deviceGroup.setOwner(CarbonConstants.REGISTRY_SYSTEM_USERNAME); deviceGroups.add(deviceGroup); deviceGroup = new DeviceGroup(); deviceGroup.setGroupId(4); deviceGroup.setOwner(\"test\"); deviceGroups.add(deviceGroup); Mockito.doReturn(deviceGroups).when(groupManagementProviderService) .getGroups(Mockito.any(DeviceIdentifier.class)); Mockito.doNothing().when(groupManagementProviderService).addDevices(Mockito.anyInt(), Mockito.any()); Mockito.doNothing().when(groupManagementProviderService).removeDevice(Mockito.anyInt(), Mockito.any()); Response response = groupManagementService.updateDeviceAssigningToGroups(deviceToGroupsAssignment); Assert.assertEquals(response.getStatus(), Response.Status.OK.getStatusCode(), \"updateDeviceAssigningToGroups request failed with valid parameters\"); Mockito.doThrow(new DeviceNotFoundException()).when(groupManagementProviderService) .removeDevice(Mockito.anyInt(), Mockito.any()); response = groupManagementService.updateDeviceAssigningToGroups(deviceToGroupsAssignment); Assert.assertEquals(response.getStatus(), Response.Status.BAD_REQUEST.getStatusCode(), \"updateDeviceAssigningToGroups request succeeded with in-valid parameters\"); Mockito.doThrow(new GroupManagementException()).when(groupManagementProviderService) .getGroups(Mockito.any(DeviceIdentifier.class)); response = groupManagementService.updateDeviceAssigningToGroups(deviceToGroupsAssignment); Assert.assertEquals(response.getStatus(), Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), \"updateDeviceAssigningToGroups request succeeded with in-valid parameters\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Object get(T bean, String name) { validate(bean, name); Function<T, Object> getter = getters.get(name); if (getter == null) { throw new IllegalArgumentException(\"No getter specified for property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\"); } return getter.apply(bean); }### Assistant: @Test(expected = IllegalArgumentException.class) public void testGetNullName() { TypeReflector<TestClass> underTest = new TypeReflector<>(TestClass.class); underTest.get(new TestClass(), null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public byte[] transform(final InputStream xslInputStream, final InputStream requestInputStream, final InputStream templateInputStream) throws SaxonApiException, SAXException { Processor processor = processorFactory.createProcessor(); XMLReader xmlReader = createXMLReader(); XsltExecutable xsltExecutable = xslCompiler.compileXsl(xslInputStream, processor); XsltTransformer xsltTransformer = xsltExecutable.load(); ByteArrayOutputStream output = xslOutputProvider.getOutput(xsltTransformer); setRequest(requestInputStream, processor, xsltTransformer); setTemplate(templateInputStream, processor, xmlReader, xsltTransformer); xsltTransformer.transform(); return output.toByteArray(); }### Assistant: @Test public void testTransformShouldDoTransform() throws SaxonApiException, SAXException { given(xslCompiler.compileXsl(xslInputStream, processor)).willReturn(xsltExecutable); given(xsltExecutable.load()).willReturn(xsltTransformer); given(xslOutputProvider.getOutput(xsltTransformer)).willReturn(outputStream); setRequestMocks(); setTemplateMocks(); underTest.transform(xslInputStream, requestInputStream, templateInputStream); verify(xsltTransformer).transform(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(path = \"\", method = RequestMethod.GET) public String index( final Model model, final Pageable pageable, @RequestParam Map<String,String> allParams, final RedirectAttributes redirectAttributes ) { setupBreadCrumbs(model, null, null); if (redirectIfUsingLdapAuthentication(redirectAttributes)) { return \"redirect:/\"; } final Datatable.Builder<User> builder = Datatable.newBuilder(User.class) .withRepository(userRepository) .withPageable(pageable) .withRequestParams(allParams) .withUrl(\"/configuration/user\") .withLabel(\"Users\") .withConstraint(\"isActive\", true, ConstraintOperator.EQUALS) .withCreateLink(\"/configuration/user/create\") .withColumn(DatatableColumn.newBuilder(User.class) .withFieldName(\"email\") .withLabel(\"Email\") .withRenderFunction(User::getEmail) .withIsSortable(true) .build()) .withColumn(DatatableColumn.newBuilder(User.class) .withFieldName(\"displayName\") .withLabel(\"Name\") .withRenderFunction(User::getDisplayName) .withIsSortable(true) .build()) .withColumn(DatatableColumn.newBuilder(User.class) .withFieldName(\"role\") .withLabel(\"Role\") .withRenderFunction((user) -> { switch (user.getRole()) { case ROLE_ADMIN: return \"Admin\"; case ROLE_USER: return \"User\"; default: return \"Unknown\"; } }) .withIsSortable(true) .build()) .withColumn(DatatableColumn.newBuilder(User.class) .withLabel(\"Action\") .withFieldName(\"id\") .withIsSortable(false) .withHeaderAlignRight() .withRenderTemplate(ActionTemplate.newBuilder(User.class) .withEditLink(User.class, (record) -> \"/configuration/user/edit/\" + record.getId()) .withDeleteLink(User.class, (record) -> \"/configuration/user/delete/\" + record.getId()) .build()) .build()) .withSearch(\"email\", \"displayName\"); model.addAttribute(\"datatable\", builder.build()); return \"configuration/user/index\"; }### Assistant: @Test @Transactional public void testIndex() throws Exception { mockMvc .perform(get(\"/configuration/user\").with(user(adminUserDetails))) .andExpect(status().isOk()) .andExpect(content().string(containsString(adminUser.getEmail()))) .andExpect(content().string(containsString(adminUser.getDisplayName()))) .andExpect(content().string(containsString(nonAdminUser.getEmail()))) .andExpect(content().string(containsString(nonAdminUser.getDisplayName()))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean endsWith(byte[] prefix) { if ((prefix.length == 0) || (prefix.length > size())) { return false; } boolean match = true; int i = prefix.length - 1; int j = (this.currentWritePosition - 1 + this.buffer.length) % this.buffer.length; while (match && (i >= 0)) { if (this.buffer[j] != prefix[i]) { match = false; } i--; j = (j - 1 + this.buffer.length) % this.buffer.length; } return match; }### Assistant: @Test public void endsWith() throws BufferException { ByteBuffer buffer = createCircledByteBuffer(TEST_BYTES1.length); buffer.add(TEST_BYTES1); Assert.assertEquals(false, buffer.endsWith(TEST_H)); Assert.assertEquals(false, buffer.endsWith(TEST_HELLO)); Assert.assertEquals(true, buffer.endsWith(TEST_WORLD)); buffer.clear(); buffer.add(TEST_WORLD); Assert.assertEquals(true, buffer.endsWith(TEST_D)); Assert.assertEquals(false, buffer.endsWith(TEST_HELLO)); Assert.assertEquals(true, buffer.endsWith(TEST_WORLD)); Assert.assertEquals(false, buffer.endsWith(TEST_W)); buffer.clear(); buffer.add(TEST_HELLO); Assert.assertEquals(false, buffer.endsWith(TEST_H)); Assert.assertEquals(true, buffer.endsWith(TEST_HELLO)); Assert.assertEquals(false, buffer.endsWith(TEST_BYTES1)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected byte[] serialize(Object data) throws IOException { return gson.toJson(data).getBytes(Charsets.UTF_8); }### Assistant: @Test public void serializeOneAnnotated() throws Exception { Gson gson = new Gson(); JsonSerializer serializer = new JsonSerializer(gson); Invokable<?, Object> method = Invokable.from(Methods.class.getMethod(\"oneAnnotated\", Pojo.class)); Parameter[] parameters = Iterables.toArray(method.getParameters(), Parameter.class); Pojo pojo = new Pojo(\"Hello world!\", 42); byte[] bytes = serializer.serialize(parameters, new Object[] { pojo }); String expected = gson.toJson(Collections.singletonMap(\"value\", pojo)); JSONAssert.assertEquals(expected, new String(bytes, Charsets.UTF_8), true); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected List<InstanceTypeConfig> getInstanceTypeConfigs(List<EmrClusterDefinitionInstanceTypeConfig> emrClusterDefinitionInstanceTypeConfigs) { List<InstanceTypeConfig> instanceTypeConfigs = null; if (!CollectionUtils.isEmpty(emrClusterDefinitionInstanceTypeConfigs)) { instanceTypeConfigs = new ArrayList<>(); for (EmrClusterDefinitionInstanceTypeConfig emrClusterDefinitionInstanceTypeConfig : emrClusterDefinitionInstanceTypeConfigs) { if (emrClusterDefinitionInstanceTypeConfig != null) { InstanceTypeConfig instanceTypeConfig = new InstanceTypeConfig(); instanceTypeConfig.setInstanceType(emrClusterDefinitionInstanceTypeConfig.getInstanceType()); instanceTypeConfig.setWeightedCapacity(emrClusterDefinitionInstanceTypeConfig.getWeightedCapacity()); instanceTypeConfig.setBidPrice(emrClusterDefinitionInstanceTypeConfig.getBidPrice()); instanceTypeConfig.setBidPriceAsPercentageOfOnDemandPrice(emrClusterDefinitionInstanceTypeConfig.getBidPriceAsPercentageOfOnDemandPrice()); instanceTypeConfig.setEbsConfiguration(getEbsConfiguration(emrClusterDefinitionInstanceTypeConfig.getEbsConfiguration())); instanceTypeConfig.setConfigurations(getConfigurations(emrClusterDefinitionInstanceTypeConfig.getConfigurations())); instanceTypeConfigs.add(instanceTypeConfig); } } } return instanceTypeConfigs; }### Assistant: @Test public void testGetInstanceTypeConfigs() { final String instanceType = STRING_VALUE; final Integer weightedCapacity = INTEGER_VALUE; final String bidPrice = STRING_VALUE_2; final Double bidPriceAsPercentageOfOnDemandPrice = DOUBLE_VALUE; final EmrClusterDefinitionEbsConfiguration emrClusterDefinitionEbsConfiguration = null; final List<EmrClusterDefinitionConfiguration> emrClusterDefinitionConfigurations = null; final EmrClusterDefinitionInstanceTypeConfig emrClusterDefinitionInstanceTypeConfig = new EmrClusterDefinitionInstanceTypeConfig(instanceType, weightedCapacity, bidPrice, bidPriceAsPercentageOfOnDemandPrice, emrClusterDefinitionEbsConfiguration, emrClusterDefinitionConfigurations); List<InstanceTypeConfig> result = emrDaoImpl.getInstanceTypeConfigs(Lists.newArrayList(emrClusterDefinitionInstanceTypeConfig)); verifyNoMoreInteractionsHelper(); final List<Configuration> expectedConfigurations = null; assertEquals(Lists.newArrayList(new InstanceTypeConfig().withInstanceType(instanceType).withWeightedCapacity(weightedCapacity).withBidPrice(bidPrice) .withBidPriceAsPercentageOfOnDemandPrice(bidPriceAsPercentageOfOnDemandPrice).withEbsConfiguration(null) .withConfigurations(expectedConfigurations)), result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting boolean shouldDeletePodWithoutRunState(WorkflowInstance workflowInstance, Pod pod) { if (isTerminated(pod)) { return shouldDeletePodIfNonDeletePeriodExpired(workflowInstance, pod); } else { return shouldDeleteNonTerminatedPodWithoutRunState(workflowInstance, pod.getMetadata().getName()); } }### Assistant: @Test public void shouldNotCleanupRunningPodWithoutRunStateIfTerminatedAfterRefresh() { final ContainerStatus runningMainContainer = new ContainerStatusBuilder() .withName(MAIN_CONTAINER_NAME) .withNewState().withNewRunning().endRunning().endState() .build(); final ContainerStatus terminatedMainContainer = new ContainerStatusBuilder() .withName(MAIN_CONTAINER_NAME) .withNewState() .withNewTerminated() .withFinishedAt(FIXED_INSTANT.minus(Duration.ofDays(1)).toString()) .endTerminated() .endState() .build(); createdPod.setStatus(new PodStatusBuilder() .withContainerStatuses(runningMainContainer, keepaliveContainerStatus) .build()); final Pod refreshedPod = new PodBuilder(createdPod) .withStatus(new PodStatusBuilder() .withContainerStatuses(terminatedMainContainer, keepaliveContainerStatus) .build()) .build(); when(k8sClient.getPod(POD_NAME)).thenReturn(Optional.of(refreshedPod)); var shouldDelete = kdr.shouldDeletePodWithoutRunState(WORKFLOW_INSTANCE, createdPod); assertThat(shouldDelete, is(false)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @GET @Path(\"/{applicationName}\") public ApplicationSlaRepresentation getApplicationSLA(@PathParam(\"applicationName\") String applicationName, @QueryParam(\"extended\") boolean extended) { Either<ApplicationSlaRepresentation, WebApplicationException> result = CellWebClientConnectorUtil.doGetFromCell( cellWebClientConnector, API_PATH + '/' + applicationName + \"?extended=\" + extended, APPLICATION_SLA_TP, configuration.getRestRequestTimeoutMs() ); if (result.hasError()) { throw result.getError(); } return result.getValue(); }### Assistant: @Test public void testGetCapacityGroup() { ApplicationSlaRepresentation result = resource.getApplicationSLA(CELL_1_CAPACITY_GROUP.getAppName(), false); assertThat(result).isNotNull(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Configuration getConfiguration(Class<?> clazz) throws ConfigurationException { String className = clazz.getName(); _log.info(\"Class name is \" + className); return getConfiguration(className); }### Assistant: @Test(expected=ConfigurationException.class) public void testGetConfigurationClassPropsDontExist() throws ConfigurationException { ServiceConfig.getConfiguration(java.lang.UnsupportedOperationException.class); fail(\"expected ConfigurationException to have been thrown\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ByteArrayOutputStream marshalAsByteArrayOutputStream(Object obj) throws SimpleMarshallerException { try { final ByteArrayOutputStream marshalresult = new ByteArrayOutputStream(); JAXBContext jaxbContext; jaxbContext = JAXBContext.newInstance(obj.getClass()); final Marshaller marshaller = jaxbContext.createMarshaller(); marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE); marshaller.marshal(obj, marshalresult); return marshalresult; } catch (final Exception e) { throw new SimpleMarshallerException(e); } }### Assistant: @Test public void testMarshalAsByteArrayOutputStream() throws SimpleMarshallerException, SAXException, IOException { XMLUnit.setIgnoreAttributeOrder(true); XMLUnit.setIgnoreComments(true); XMLUnit.setIgnoreWhitespace(true); final String expectedOutput = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?><ruleExecutionContainer><executionResponseList/></ruleExecutionContainer>\"; final RuleExecutionContainer r = createRuleExecutionContainer(); final ByteArrayOutputStream output = marshaller .marshalAsByteArrayOutputStream(r); assertNotNull(output); assertXMLEqual(expectedOutput, output.toString()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @VisibleForTesting int doMain(String[] args, Configuration conf) { if (args.length < 1) { printUsage(); return 1; } Injector injector = Guice.createInjector( new ConfigModule(conf), new ZKModule(), new DiscoveryModules().getDistributedModules(), new TransactionModules().getDistributedModules(), new TransactionClientModule() ); ZKClientService zkClient = injector.getInstance(ZKClientService.class); zkClient.startAndWait(); try { TransactionSystemClient txClient = injector.getInstance(TransactionSystemClient.class); String option = args[0]; if (option.equals(OPT_TRUNCATE_INVALID_TX)) { if (args.length != 2) { printUsage(); return 1; } Set<Long> txIds; try { txIds = parseTxIds(args[1]); } catch (NumberFormatException e) { err.println(\"NumberFormatException: \" + e.getMessage()); return 1; } if (!txIds.isEmpty()) { out.println(\"Invalid list size before truncation: \" + txClient.getInvalidSize()); txClient.truncateInvalidTx(txIds); out.println(\"Invalid list size after truncation: \" + txClient.getInvalidSize()); } } else if (option.equals(OPT_TRUNCATE_INVALID_TX_BEFORE)) { if (args.length != 2) { printUsage(); return 1; } try { long time = Long.parseLong(args[1]); out.println(\"Invalid list size before truncation: \" + txClient.getInvalidSize()); txClient.truncateInvalidTxBefore(time); out.println(\"Invalid list size after truncation: \" + txClient.getInvalidSize()); } catch (InvalidTruncateTimeException e) { err.println(e.getMessage()); return 1; } catch (NumberFormatException e) { err.println(\"NumberFormatException: \" + e.getMessage()); return 1; } } else if (option.equals(OPT_GET_INVALID_TX_SIZE)) { if (args.length != 1) { printUsage(); return 1; } out.println(\"Invalid list size: \" + txClient.getInvalidSize()); } else { printUsage(); return 1; } } finally { zkClient.stopAndWait(); } return 0; }### Assistant: @Test public void testTruncateInvalidTx() throws Exception { Transaction tx1 = txClient.startLong(); Transaction tx2 = txClient.startShort(); txClient.invalidate(tx1.getTransactionId()); txClient.invalidate(tx2.getTransactionId()); Assert.assertEquals(2, txClient.getInvalidSize()); TransactionAdmin txAdmin = new TransactionAdmin(new PrintStream(System.out), new PrintStream(System.err)); int status = txAdmin.doMain(new String[]{\"--truncate-invalid-tx\", String.valueOf(tx2.getTransactionId())}, conf); Assert.assertEquals(0, status); Assert.assertEquals(1, txClient.getInvalidSize()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void clearState() { synchronized (dataLock) { data = null; } }### Assistant: @Test public void clearState() { assertSame(data, configurationService.retrieve()); configurationService.clearState(); data = new TestConfig(\"b\"); doReturn(data).when(persistenceService).load(); assertSame(data, configurationService.retrieve()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public double resolveOverlap(IAtomContainer ac, IRingSet sssr) { Vector overlappingAtoms = new Vector(); Vector overlappingBonds = new Vector(); logger.debug(\"Start of resolveOverlap\"); double overlapScore = getOverlapScore(ac, overlappingAtoms, overlappingBonds); if (overlapScore > 0) { overlapScore = displace(ac, overlappingAtoms, overlappingBonds); } logger.debug(\"overlapScore = \" + overlapScore); logger.debug(\"End of resolveOverlap\"); return overlapScore; }### Assistant: @Test public void testResolveOverlap5() throws Exception { double overlapScore = 0; logger.debug(\"Test case with atom clash\"); IAtomContainer atomContainer = new SmilesParser(DefaultChemObjectBuilder.getInstance()) .parseSmiles(\"OC4C(N2C1=C(C(=NC(=N1)SC)SC)C3=C2N=CN=C3N)OC(C4O)CO\"); StructureDiagramGenerator sdg = new StructureDiagramGenerator(); sdg.setMolecule(new AtomContainer(atomContainer)); sdg.generateCoordinates(); atomContainer = sdg.getMolecule(); OverlapResolver or = new OverlapResolver(); overlapScore = or.resolveOverlap(atomContainer, null); Assert.assertEquals(0.0, overlapScore, 0.0001); logger.debug(\"End of test case with atom clash\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void step(Program program) { program.fullTrace(); if (CONFIG.vmTrace()) program.saveOpTrace(); try { OpCode op = OpCode.code(program.getCurrentOp()); if (op == null) throw program.new IllegalOperationException(); program.setLastOp(op.val()); long oldMemSize = program.getMemSize(); BigInteger newMemSize = BigInteger.ZERO; Stack<DataWord> stack = program.getStack(); String hint = \"\"; long callGas = 0, memWords = 0; long gasCost = GasCost.STEP; long gasBefore = program.getGas().longValue(); int stepBefore = program.getPC(); program.stackRequire(op.require()); switch (op) { case STOP: case SUICIDE: gasCost = GasCost.STOP; break; case SSTORE: DataWord newValue = stack.get(stack.size()-2); DataWord oldValue = program.storageLoad(stack.peek()); if (oldValue == null && !newValue.isZero()) gasCost = GasCost.SSTORE * 2; else if (oldValue != null && newValue.isZero()) gasCost = GasCost.SSTORE * 0; else gasCost = GasCost.SSTORE; break; case SLOAD: gasCost = GasCost.SLOAD; break; case BALANCE: gasCost = GasCost.BALANCE; break; case MSTORE: newMemSize = memNeeded(stack.peek(), new DataWord(32)); break; case MSTORE8: newMemSize = memNeeded(stack.peek(), new DataWord(1)); break; case MLOAD: newMemSize = memNeeded(stack.peek(), new DataWord(32)); break; case RETURN: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-2)); break; case SHA3: gasCost = GasCost.SHA3; newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-2)); break; case CALLDATACOPY: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-3)); break; case CODECOPY: newMemSize = memNeeded(stack.peek(), stack.get(stack.size()-3)); break; case EXTCODECOPY: newMemSize = memNeeded(stack.get(stack.size()-2), stack.get(stack.size()-4)); break; case CALL: case CALLCODE: gasCost = GasCost.CALL; DataWord callGasWord = stack.get(stack.size()-1); if(callGasWord.compareTo(program.getGas()) == 1) { throw program.new OutOfGasException(); } callGas = callGasWord.longValue(); BigInteger in = memNeeded(stack.get(stack.size()-4), stack.get(stack.size()-5)); BigInteger out = memNeeded(stack.get(stack.size()-6), stack.get(stack.size()-7)); newMemSize = in.max(out); break; case CREATE: gasCost = GasCost.CREATE; newMemSize = memNeeded(stack.get(stack.size()-2), stack.get(stack.size()-3)); break; default: break; } program.spendGas(gasCost, op.name()); if(newMemSize.compareTo(MAX_GAS) == 1) { throw program.new OutOfGasException(); } long memoryUsage = (newMemSize.longValue() + 31) / 32 * 32; if (memoryUsage > oldMemSize) { memWords = (memoryUsage - oldMemSize) / 32; long memGas = GasCost.MEMORY * memWords; program.spendGas(memGas, op.name() + \" (memory usage)\"); gasCost += memGas; } if(program.getNumber().intValue() == CONFIG.dumpBlock()) this.dumpLine(op, gasBefore, gasCost+callGas, memWords, program); switch (op) { case STOP:{ program.setHReturn(ByteBuffer.allocate(0)); program.stop(); } break; case ADD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" + \" + word2.value(); word1.add(word2); program.stackPush(word1); program.step(); } break; case MUL:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" * \" + word2.value(); word1.mul(word2); program.stackPush(word1); program.step(); } break; case SUB:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" - \" + word2.value(); word1.sub(word2); program.stackPush(word1); program.step(); } break; case DIV:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" / \" + word2.value(); word1.div(word2); program.stackPush(word1); program.step(); } break; case SDIV:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" / \" + word2.sValue(); word1.sDiv(word2); program.stackPush(word1); program.step(); } break; case MOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" % \" + word2.value(); word1.mod(word2); program.stackPush(word1); program.step(); } break; case SMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" #% \" + word2.sValue(); word1.sMod(word2); program.stackPush(word1); program.step(); } break; case EXP:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" ** \" + word2.value(); word1.exp(word2); program.stackPush(word1); program.step(); } break; case NEG:{ DataWord word1 = program.stackPop(); word1.negate(); if (logger.isInfoEnabled()) hint = \"\" + word1.value(); program.stackPush(word1); program.step(); } break; case LT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" < \" + word2.value(); if (word1.value().compareTo(word2.value()) == -1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case SLT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" < \" + word2.sValue(); if (word1.sValue().compareTo(word2.sValue()) == -1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case SGT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.sValue() + \" > \" + word2.sValue(); if (word1.sValue().compareTo(word2.sValue()) == 1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case GT:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" > \" + word2.value(); if (word1.value().compareTo(word2.value()) == 1) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case EQ:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" == \" + word2.value(); if (word1.xor(word2).isZero()) { word1.and(DataWord.ZERO); word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } program.stackPush(word1); program.step(); } break; case NOT: { DataWord word1 = program.stackPop(); if (word1.isZero()) { word1.getData()[31] = 1; } else { word1.and(DataWord.ZERO); } if (logger.isInfoEnabled()) hint = \"\" + word1.value(); program.stackPush(word1); program.step(); } break; case AND:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" && \" + word2.value(); word1.and(word2); program.stackPush(word1); program.step(); } break; case OR: { DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" || \" + word2.value(); word1.or(word2); program.stackPush(word1); program.step(); } break; case XOR: { DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); if (logger.isInfoEnabled()) hint = word1.value() + \" ^ \" + word2.value(); word1.xor(word2); program.stackPush(word1); program.step(); } break; case BYTE:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord result = null; if (word1.value().compareTo(_32_) == -1) { byte tmp = word2.getData()[word1.intValue()]; word2.and(DataWord.ZERO); word2.getData()[31] = tmp; result = word2; } else { result = new DataWord(); } if (logger.isInfoEnabled()) hint = \"\" + result.value(); program.stackPush(result); program.step(); } break; case ADDMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord word3 = program.stackPop(); word1.addmod(word2, word3); program.stackPush(word1); program.step(); } break; case MULMOD:{ DataWord word1 = program.stackPop(); DataWord word2 = program.stackPop(); DataWord word3 = program.stackPop(); word1.mulmod(word2, word3); program.stackPush(word1); program.step(); } break; case SHA3:{ DataWord memOffsetData = program.stackPop(); DataWord lengthData = program.stackPop(); ByteBuffer buffer = program.memoryChunk(memOffsetData, lengthData); byte[] encoded = HashUtil.sha3(buffer.array()); DataWord word = new DataWord(encoded); if (logger.isInfoEnabled()) hint = word.toString(); program.stackPush(word); program.step(); } break; case ADDRESS:{ DataWord address = program.getOwnerAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(address.getLast20Bytes()); program.stackPush(address); program.step(); } break; case BALANCE:{ DataWord address = program.stackPop(); DataWord balance = program.getBalance(address); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(address.getLast20Bytes()) + \" balance: \" + balance.longValue(); program.stackPush(balance); program.step(); } break; case ORIGIN:{ DataWord originAddress = program.getOriginAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(originAddress.getLast20Bytes()); program.stackPush(originAddress); program.step(); } break; case CALLER:{ DataWord callerAddress = program.getCallerAddress(); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(callerAddress.getLast20Bytes()); program.stackPush(callerAddress); program.step(); } break; case CALLVALUE:{ DataWord callValue = program.getCallValue(); if (logger.isInfoEnabled()) hint = \"value: \" + callValue; program.stackPush(callValue); program.step(); } break; case CALLDATALOAD:{ DataWord dataOffs = program.stackPop(); DataWord value = program.getDataValue(dataOffs); if (logger.isInfoEnabled()) hint = \"data: \" + value; program.stackPush(value); program.step(); } break; case CALLDATASIZE:{ DataWord dataSize = program.getDataSize(); if (logger.isInfoEnabled()) hint = \"size: \" + dataSize.value(); program.stackPush(dataSize); program.step(); } break; case CALLDATACOPY:{ DataWord memOffsetData = program.stackPop(); DataWord dataOffsetData = program.stackPop(); DataWord lengthData = program.stackPop(); byte[] msgData = program.getDataCopy(dataOffsetData, lengthData); if (logger.isInfoEnabled()) hint = \"data: \" + Hex.toHexString(msgData); program.memorySave(memOffsetData.intValue(), msgData); program.step(); } break; case CODESIZE: case EXTCODESIZE: { int length; if (op == OpCode.CODESIZE) length = program.getCode().length; else { DataWord address = program.stackPop(); length = program.getCodeAt(address).length; } DataWord codeLength = new DataWord(length); if (logger.isInfoEnabled()) hint = \"size: \" + length; program.stackPush(codeLength); program.step(); } break; case CODECOPY: case EXTCODECOPY: { byte[] fullCode; if (op == OpCode.CODECOPY) fullCode = program.getCode(); else { DataWord address = program.stackPop(); fullCode = program.getCodeAt(address); } DataWord memOffsetData = program.stackPop(); BigInteger codeOffsetData = program.stackPop().value(); BigInteger lengthData = program.stackPop().value(); if (fullCode == null || BigInteger.valueOf(fullCode.length).compareTo( codeOffsetData.add(lengthData)) < 0) { program.stop(); break; } int length = lengthData.intValue(); int codeOffset = codeOffsetData.intValue(); byte[] codeCopy = new byte[length]; System.arraycopy(fullCode, codeOffset, codeCopy, 0, length); if (logger.isInfoEnabled()) hint = \"code: \" + Hex.toHexString(codeCopy); program.memorySave(memOffsetData.intValue(), codeCopy); program.step(); } break; case GASPRICE:{ DataWord gasPrice = program.getGasPrice(); if (logger.isInfoEnabled()) hint = \"price: \" + gasPrice.toString(); program.stackPush(gasPrice); program.step(); } break; case PREVHASH: { DataWord prevHash = program.getPrevHash(); if (logger.isInfoEnabled()) hint = \"prevHash: \" + prevHash; program.stackPush(prevHash); program.step(); } break; case COINBASE: { DataWord coinbase = program.getCoinbase(); if (logger.isInfoEnabled()) hint = \"coinbase: \" + Hex.toHexString(coinbase.getLast20Bytes()); program.stackPush(coinbase); program.step(); } break; case TIMESTAMP:{ DataWord timestamp = program.getTimestamp(); if (logger.isInfoEnabled()) hint = \"timestamp: \" + timestamp.value(); program.stackPush(timestamp); program.step(); } break; case NUMBER:{ DataWord number = program.getNumber(); if (logger.isInfoEnabled()) hint = \"number: \" + number.value(); program.stackPush(number); program.step(); } break; case DIFFICULTY:{ DataWord difficulty = program.getDifficulty(); if (logger.isInfoEnabled()) hint = \"difficulty: \" + difficulty; program.stackPush(difficulty); program.step(); } break; case GASLIMIT:{ DataWord gaslimit = program.getGaslimit(); if (logger.isInfoEnabled()) hint = \"gaslimit: \" + gaslimit; program.stackPush(gaslimit); program.step(); } break; case POP:{ program.stackPop(); program.step(); } break; case DUP1: case DUP2: case DUP3: case DUP4: case DUP5: case DUP6: case DUP7: case DUP8: case DUP9: case DUP10: case DUP11: case DUP12: case DUP13: case DUP14: case DUP15: case DUP16:{ int n = op.val() - OpCode.DUP1.val() + 1; DataWord word_1 = stack.get(stack.size() - n); program.stackPush(word_1.clone()); program.step(); } break; case SWAP1: case SWAP2: case SWAP3: case SWAP4: case SWAP5: case SWAP6: case SWAP7: case SWAP8: case SWAP9: case SWAP10: case SWAP11: case SWAP12: case SWAP13: case SWAP14: case SWAP15: case SWAP16:{ int n = op.val() - OpCode.SWAP1.val() + 2; DataWord word_1 = stack.peek(); stack.set(stack.size() - 1, stack.get(stack.size() - n)); stack.set(stack.size() - n, word_1); program.step(); } break; case MLOAD:{ DataWord addr = program.stackPop(); DataWord data = program.memoryLoad(addr); if (logger.isInfoEnabled()) hint = \"data: \" + data; program.stackPush(data); program.step(); } break; case MSTORE:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); if (logger.isInfoEnabled()) hint = \"addr: \" + addr + \" value: \" + value; program.memorySave(addr, value); program.step(); } break; case MSTORE8:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); byte[] byteVal = {value.getData()[31]}; program.memorySave(addr.intValue(), byteVal); program.step(); } break; case SLOAD:{ DataWord key = program.stackPop(); DataWord val = program.storageLoad(key); if (logger.isInfoEnabled()) hint = \"key: \" + key + \" value: \" + val; if (val == null) { val = key.and(DataWord.ZERO); } program.stackPush(val); program.step(); } break; case SSTORE:{ DataWord addr = program.stackPop(); DataWord value = program.stackPop(); if (logger.isInfoEnabled()) hint = \"addr: \" + addr + \" value: \" + value; program.storageSave(addr, value); program.step(); } break; case JUMP:{ DataWord pos = program.stackPop(); int nextPC = pos.intValue(); if (nextPC != 0 && program.getOp(nextPC-1) != OpCode.JUMPDEST.val()) throw new BadJumpDestinationException(); if (logger.isInfoEnabled()) hint = \"~> \" + nextPC; program.setPC(nextPC); } break; case JUMPI:{ DataWord pos = program.stackPop(); DataWord cond = program.stackPop(); if (!cond.isZero()) { int nextPC = pos.intValue(); if (nextPC != 0 && program.getOp(nextPC-1) != OpCode.JUMPDEST.val()) throw new BadJumpDestinationException(); if (logger.isInfoEnabled()) hint = \"~> \" + nextPC; program.setPC(nextPC); } else { program.step(); } } break; case PC:{ int pc = program.getPC(); DataWord pcWord = new DataWord(pc); if (logger.isInfoEnabled()) hint = pcWord.toString(); program.stackPush(pcWord); program.step(); } break; case MSIZE:{ int memSize = program.getMemSize(); DataWord wordMemSize = new DataWord(memSize); if (logger.isInfoEnabled()) hint = \"\" + memSize; program.stackPush(wordMemSize); program.step(); } break; case GAS:{ DataWord gas = program.getGas(); if (logger.isInfoEnabled()) hint = \"\" + gas; program.stackPush(gas); program.step(); } break; case PUSH1: case PUSH2: case PUSH3: case PUSH4: case PUSH5: case PUSH6: case PUSH7: case PUSH8: case PUSH9: case PUSH10: case PUSH11: case PUSH12: case PUSH13: case PUSH14: case PUSH15: case PUSH16: case PUSH17: case PUSH18: case PUSH19: case PUSH20: case PUSH21: case PUSH22: case PUSH23: case PUSH24: case PUSH25: case PUSH26: case PUSH27: case PUSH28: case PUSH29: case PUSH30: case PUSH31: case PUSH32:{ program.step(); int nPush = op.val() - PUSH1.val() + 1; byte[] data = program.sweep(nPush); hint = \"\" + Hex.toHexString(data); program.stackPush(data); } break; case JUMPDEST:{ program.step(); } break; case CREATE:{ DataWord value = program.stackPop(); DataWord inOffset = program.stackPop(); DataWord inSize = program.stackPop(); if (logger.isInfoEnabled()) logger.info(logString, program.getPC(), String.format(\"%-12s\", op.name()), program.getGas().value(), program.invokeData.getCallDeep(), hint); program.createContract(value, inOffset, inSize); program.step(); } break; case CALL: case CALLCODE: { DataWord gas = program.stackPop(); DataWord codeAddress = program.stackPop(); DataWord value = program.stackPop(); DataWord inDataOffs = program.stackPop(); DataWord inDataSize = program.stackPop(); DataWord outDataOffs = program.stackPop(); DataWord outDataSize = program.stackPop(); if (logger.isInfoEnabled()) { hint = \"addr: \" + Hex.toHexString(codeAddress.getLast20Bytes()) + \" gas: \" + gas.shortHex() + \" inOff: \" + inDataOffs.shortHex() + \" inSize: \" + inDataSize.shortHex(); logger.info(logString, program.getPC(), String.format(\"%-12s\", op.name()), program.getGas().value(), program.invokeData.getCallDeep(), hint); } MessageCall msg = new MessageCall( op.equals(CALL) ? MsgType.CALL : MsgType.STATELESS, gas, codeAddress, value, inDataOffs, inDataSize, outDataOffs, outDataSize); program.callToAddress(msg); program.step(); } break; case RETURN:{ DataWord offset = program.stackPop(); DataWord size = program.stackPop(); ByteBuffer hReturn = program.memoryChunk(offset, size); program.setHReturn(hReturn); if (logger.isInfoEnabled()) hint = \"data: \" + Hex.toHexString(hReturn.array()) + \" offset: \" + offset.value() + \" size: \" + size.value(); program.step(); program.stop(); } break; case SUICIDE:{ DataWord address = program.stackPop(); program.suicide(address); if (logger.isInfoEnabled()) hint = \"address: \" + Hex.toHexString(program.getOwnerAddress().getLast20Bytes()); program.stop(); } break; default: break; } if (logger.isInfoEnabled() && !op.equals(CALL) && !op.equals(CREATE)) logger.info(logString, stepBefore, String.format(\"%-12s\", op.name()), program.getGas().longValue(), program.invokeData.getCallDeep(), hint); vmCounter++; } catch (RuntimeException e) { if(e instanceof OutOfGasException) program.spendAllGas(); logger.warn(\"VM halted\", e.getMessage()); program.stop(); throw e; } finally { program.fullTrace(); } }### Assistant: @Test(expected=StackTooSmallException.class) public void testMOD_4() { VM vm = new VM(); program = new Program(Hex.decode(\"600406\"), invoke); try { vm.step(program); vm.step(program); vm.step(program); } finally { assertTrue(program.isStopped()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected boolean shouldIntercept(WebServiceMessage request, Object endpoint) { if (request instanceof SoapMessage) { String soapAction = ((SoapMessage) request).getSoapAction(); if (StringUtils.hasLength(soapAction) && soapAction.charAt(0) == '\"' && soapAction.charAt(soapAction.length() - 1) == '\"') { soapAction = soapAction.substring(1, soapAction.length() - 1); } return this.soapAction.equals(soapAction); } else { return false; } }### Assistant: @Test public void shouldInterceptNonMatch() throws Exception { SoapActionSmartEndpointInterceptor interceptor = new SoapActionSmartEndpointInterceptor(delegate, \"http: boolean result = interceptor.shouldIntercept(messageContext, null); assertFalse(\"Interceptor should apply\", result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: String selectedAttribute() { return plugin().getAttribute(); }### Assistant: @Test public void testSelectedAttribute() { page.selectedAttribute(); verify(plugin).getAttribute(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void testEntry(String[] args) throws IOException { Utilities.parseVmArgs(args, null); conf = Utilities.loadConfiguration(\"distributed-server\"); if (!conf.getBoolean(\"distributed.performance.test\", false)) { System.out.println(\"ignore distributed performance test\"); return; } String[] invocationStrings = conf.get(\"distributed.performance.test.invocations\", \";\").split(\";\"); for (String invocationString : invocationStrings) { testMethod(invocationString); } Utilities.logInfo(Utilities.logger, \"-------------------------------------------------\"); Utilities.logInfo(Utilities.logger, \"\"); }### Assistant: @Test public void testDistributedPerformance() throws IOException { String argString = System.getenv(\"ARGS\"); if (argString == null) argString = \"\"; testEntry(argString.trim().split(\" \")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public CyNode getCyNode ( Resource nodeRes, String labelsSparql, String propsSparql ) { ensureOpen (); QuerySolutionMap params = new QuerySolutionMap (); params.add ( \"iri\", nodeRes ); CyNode cyNode = new CyNode ( nodeRes.getURI () ); if ( labelsSparql != null ) { Query qry = SparqlUtils.getCachedQuery ( labelsSparql ); Function<String, String> labelIdConverter = this.getCyNodeLabelIdConverter (); boolean wasInTnx = dataSet.isInTransaction (); if ( !wasInTnx ) dataSet.begin ( ReadWrite.READ ); try { QueryExecution qx = QueryExecutionFactory.create ( qry, this.getDataSet(), params ); qx.execSelect ().forEachRemaining ( row -> cyNode.addLabel ( this.getCypherId ( row.get ( \"label\" ), labelIdConverter ) ) ); } finally { if ( !wasInTnx && dataSet.isInTransaction () ) dataSet.end (); } } this.addCypherProps ( cyNode, propsSparql ); return cyNode; }### Assistant: @Test public void testNodes () { log.info ( \"Verifying Nodes\" ); Dataset ds = rdfMgr.getDataSet (); Model m = ds.getDefaultModel (); CyNode cyNode = rdfMgr.getCyNode ( m.getResource ( iri ( \"ex:1\" ) ), SPARQL_NODE_LABELS, SPARQL_NODE_PROPS ); assertNotNull ( \"CyNode 1 not found!\", cyNode ); log.info ( \"Got node 1\" ); assertEquals ( \"CyNode 1's Label not found!\", 1, cyNode.getLabels ().size () ); assertEquals ( \"CyNode 1's Label not found!\", \"TestNode\", cyNode.getLabels ().iterator ().next () ); assertEquals ( \"CyNode 1's wrong properties count!\", 2, cyNode.getProperties ().size () ); assertEquals ( \"CyNode 1's prop1 not found!\", \"10.0\", cyNode.getPropValue ( \"attrib1\" ) ); assertEquals ( \"CyNode 1's prop2 not found!\", \"a string\", cyNode.getPropValue ( \"attrib2\" ) ); log.info ( \"End\" ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public RowData build(final Context context, final TableType tableType) { final Map<FieldType, FieldHolder> typeToHolderIndex = createTypeToHolderIndex(tableType); final List<FieldData> fields = mapFieldsToContainers(context, tableType, typeToHolderIndex); return new ImmutableRowData(fields); }### Assistant: @Test public void aRowWithJustDefaults_should_buildThatRow() { assertThat( new RowBuilder((long) 23).build(context, tableType), is(sb.row( sb.field(ExampleTable.PROP_A, \"23\"), sb.field(ExampleTable.PROP_B, \"23\") )) ); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: protected void handleGpsLost() { final GuidanceStreetLabelData data = new GuidanceStreetLabelData(mContext.getString(R.string.msdkui_waypoint_current_location), ThemeUtil.getColor(mContext, R.attr.colorForegroundSecondary)); notifyDataChanged(data); }### Assistant: @Test public void testHandleGpsLost() { GuidanceStreetLabelListener listener = mock(GuidanceStreetLabelListener.class); mGuidanceStreetLabelPresenter.addListener(listener); mGuidanceStreetLabelPresenter.handleGpsLost(); verify(listener, times(2)).onDataChanged(any()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Span setTag(String key, String value) { if (key == null || value == null) { tracer.debug(\"key (\" + key + \") or value (\" + value + \") is null, ignoring\"); return this; } synchronized (mutex) { grpcSpan.addTags(KeyValue.newBuilder().setKey(key).setStringValue(value)); } return this; }### Assistant: @Test public void testSetTag_stringTypeNullValue() { Span result = undertest.setTag(\"k\", (String) null); assertSame(result, undertest); verify(abstractTracer).debug(\"key (k) or value (null) is null, ignoring\"); assertTrue(\"When value is null, should not be added to attributes\", grpcSpan.getTagsList().isEmpty()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void importedPath(final PackageId packageId, final String path, final Node node, final PathAction action) throws RepositoryException { wrapped.importedPath(packageId, path, node, action); }### Assistant: @Test public void testImportedPath() throws Exception { final PackageId arg0 = PackageId.fromString(\"my_packages:example:1.0\"); final String arg1 = \"/correct/path\"; final Node arg2 = mock(Node.class); final PathAction arg3 = PathAction.MODIFIED; final CompletableFuture<PackageId> slot0 = new CompletableFuture<>(); final CompletableFuture<String> slot1 = new CompletableFuture<>(); final CompletableFuture<Node> slot2 = new CompletableFuture<>(); final CompletableFuture<PathAction> slot3 = new CompletableFuture<>(); final ProgressCheck delegate = mock(ProgressCheck.class); doAnswer(call -> { slot0.complete(call.getArgument(0, PackageId.class)); slot1.complete(call.getArgument(1, String.class)); slot2.complete(call.getArgument(2, Node.class)); slot3.complete(call.getArgument(3, PathAction.class)); return true; }).when(delegate).importedPath( any(PackageId.class), any(String.class), any(Node.class), any(PathAction.class)); final ProgressCheckAliasFacade alias = new ProgressCheckAliasFacade(delegate, null); alias.importedPath(arg0, arg1, arg2, arg3); assertSame(\"same arg0\", arg0, slot0.getNow(null)); assertSame(\"same arg1\", arg1, slot1.getNow(null)); assertSame(\"same arg2\", arg2, slot2.getNow(null)); assertSame(\"same arg3\", arg3, slot3.getNow(null)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Response post(Request request) { String origin = request.header(\"Origin\").orElse(null); if (origin != null) checkOrigin(origin); processEvents(request, Instant.now()); Response response = Response.empty(); if (origin != null) { response.header(\"Access-Control-Allow-Origin\", origin); response.header(\"Access-Control-Allow-Credentials\", \"true\"); } return response; }### Assistant: @Test void post() { when(request.header(\"Origin\")).thenReturn(Optional.of(\"localhost\")); when(request.body()).thenReturn(Optional.empty()); var controller = new EventController(List.of(\"localhost\"), null); Response response = controller.post(request); assertThat(response.header(\"Access-Control-Allow-Origin\")).get().isEqualTo(\"localhost\"); assertThat(response.header(\"Access-Control-Allow-Credentials\")).get().isEqualTo(\"true\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException { resp.setContentType(\"application/json\"); PrintWriter out = resp.getWriter(); boolean proxyModeOn = proxyModeToggle.isProxyModeOn(); boolean stubModeOn = routingService.isStubModeOn(); boolean wilmaModeOn = !proxyModeOn && !stubModeOn; out.write(\"{\\\"proxyMode\\\":\" + proxyModeOn + \",\\\"stubMode\\\":\" + stubModeOn + \",\\\"wilmaMode\\\":\" + wilmaModeOn + \"}\"); out.flush(); out.close(); }### Assistant: @Test public void testDoGetShouldWriteSetContentTypeToJson() throws ServletException, IOException { given(proxyModeToggle.isProxyModeOn()).willReturn(true); given(routingService.isStubModeOn()).willReturn(false); underTest.doGet(request, response); verify(response).setContentType(\"application/json\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Stream<Integer> indexesFrom(int firstIndex) { return IntStream.iterate(firstIndex, i -> i + 1).boxed(); }### Assistant: @Test public void testIndexesFrom() { assertThat(indexesFrom(1).limit(3)).containsExactly(1, 2, 3).inOrder(); assertThat(indexesFrom(Integer.MAX_VALUE).limit(3)) .containsExactly(Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE + 1).inOrder(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static File link(File sourceLocation, File targetLocation) throws IOException { return link(sourceLocation, targetLocation, false); }### Assistant: @Test public void linkTestWithForce() throws IOException { assertNotNull(FileSupport.link(fileToLink, linkLocation, true)); assertTrue(linkLocation.exists()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void doGetPolicyMetrics(HttpServletResponse response) { Set<OnapPDPGroup> groups = new HashSet<>(); try { if (XACMLPapServlet.getPAPEngine() != null) { groups = XACMLPapServlet.getPAPEngine().getOnapPDPGroups(); } int pdpCount = 0; for (OnapPDPGroup group : groups) { Set<PDPPolicy> policies = group.getPolicies(); pdpCount += policies.size(); } List<Object> dataList = commonClassDao.getData(PolicyVersion.class); int papCount = dataList.size(); int totalCount = pdpCount + papCount; JSONObject json = new JSONObject(); json.put(\"papCount\", papCount); json.put(\"pdpCount\", pdpCount); json.put(\"totalCount\", totalCount); if (pdpCount > 0 && papCount > 0 && totalCount > 0) { PolicyLogger.info( \"Metrics have been found on the Policy Engine for the number of policies on the PAP and PDP.\"); response.setStatus(HttpServletResponse.SC_OK); response.addHeader(\"successMapKey\", \"success\"); response.addHeader(\"operation\", \"getMetrics\"); response.addHeader(\"metrics\", json.toString()); return; } else { String message = \"The policy count on the PAP and PDP is 0. Please check the database and file system to correct this error.\"; response.setStatus(HttpServletResponse.SC_BAD_REQUEST); response.addHeader(errorMsg, message); return; } } catch (Exception e) { String message = XACMLErrorConstants.ERROR_DATA_ISSUE + \" Error Querying the Database: \" + e.getMessage(); PolicyLogger.error(MessageCodes.ERROR_DATA_ISSUE, e, \"XACMLPapServlet\", \" Error Querying the Database.\"); response.setStatus(HttpServletResponse.SC_BAD_REQUEST); response.addHeader(errorMsg, message); return; } }### Assistant: @Test public void testService() { CommonClassDao dao = Mockito.mock(CommonClassDao.class); List<Object> value = new ArrayList<Object>(); when(dao.getData(PolicyVersion.class)).thenReturn(value); MetricService service = new MetricService(dao); assertNotNull(service); MockHttpServletResponse response = new MockHttpServletResponse(); MetricService.doGetPolicyMetrics(response); assertEquals(HttpServletResponse.SC_BAD_REQUEST, response.getStatusCode()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: RenameShapes(Map<ShapeId, ShapeId> renamed, Supplier<ModelAssembler> modelAssemblerSupplier) { this.renamed = new HashMap<>(renamed); this.assembler = modelAssemblerSupplier.get(); }### Assistant: @Test public void returnsModelWithRenamedStringShape() { ShapeId fromStringId = ShapeId.from(\"ns.foo#String\"); ShapeId containerId = ShapeId.from(\"ns.foo#Container\"); ShapeId keyId = ShapeId.from(\"ns.foo#Container$key\"); ShapeId valueId = ShapeId.from(\"ns.foo#Container$value\"); StringShape target = StringShape.builder().id(fromStringId).build(); MemberShape keyMember = MemberShape.builder().id(keyId).target(fromStringId).build(); MemberShape valueMember = MemberShape.builder().id(valueId).target(fromStringId).build(); MapShape container = MapShape.builder().id(containerId).key(keyMember).value(valueMember).build(); Model model = Model.builder() .addShapes(target, keyMember, valueMember, container) .build(); ModelTransformer transformer = ModelTransformer.create(); ShapeId toStringId = ShapeId.from(\"ns.bar#String\"); Map<ShapeId, ShapeId> renamed = new HashMap<>(); renamed.put(fromStringId, toStringId ); Model result = transformer.renameShapes(model, renamed); assertTrue(result.getShape(toStringId).isPresent()); assertFalse(result.getShape(fromStringId).isPresent()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void isComplete(final Callback<Boolean> callback) { boolean isNotEmpty = isHeaderNotEmpty(); boolean isUnique = isHeaderUnique(); boolean isValid = isNotEmpty && isUnique; if (!isNotEmpty) { view.showWarning(translate(GuidedDecisionTableErraiConstants.YouMustEnterAColumnHeaderValueDescription)); } if (!isUnique) { view.showWarning(translate(GuidedDecisionTableErraiConstants.ThatColumnNameIsAlreadyInUsePleasePickAnother)); } if (isValid) { view.hideWarning(); } callback.callback(isValid); }### Assistant: @Test public void testIsCompleteWhenHeaderIsNotEnabled() throws Exception { createEmptyModel(); page.isComplete(Assert::assertFalse); verify(view).showWarning(ENTER_COLUMN_DESCRIPTION); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static synchronized MLEnvironment getDefault() { return get(DEFAULT_ML_ENVIRONMENT_ID); }### Assistant: @Test public void testGetDefault() { MLEnvironment mlEnvironment = MLEnvironmentFactory .get(MLEnvironmentFactory.DEFAULT_ML_ENVIRONMENT_ID); MLEnvironment mlEnvironmentDefault = MLEnvironmentFactory.getDefault(); Assert.assertSame(mlEnvironment, mlEnvironmentDefault); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isProviderComboMatch(Consent consent, ConsentDto consentDto) { boolean isContain = false; Set<String> selToDiscloseNpi = getDtoProviderToDiscloseToNpi(consentDto); Set<String> conToDiscloseNpi = getProviderToDiscloseToNpi(consent); Set<String> selToDiscloseNpiCopy = new HashSet<String>(selToDiscloseNpi); Set<String> conToDiscloseNpiCopy = new HashSet<String>(conToDiscloseNpi); selToDiscloseNpiCopy.retainAll(conToDiscloseNpiCopy); if (null != selToDiscloseNpiCopy && selToDiscloseNpiCopy.size() > 0) { Set<String> selIsMadeToNpi = getDtoProviderIsMadeToNpi(consentDto); Set<String> conIsMadeToNpi = getProviderIsMadeToNpi(consent); Set<String> selIsMadeToNpiCopy = new HashSet<String>(selIsMadeToNpi); Set<String> conIsMadeToNpiCopy = new HashSet<String>(conIsMadeToNpi); selIsMadeToNpiCopy.retainAll(conIsMadeToNpiCopy); if (null != selIsMadeToNpiCopy && selIsMadeToNpiCopy.size() > 0) { isContain = true; } } return isContain; }### Assistant: @Test public void testIsProviderCombomatch_selsameToDiscloseAndPermittedTo(){ Consent consent = new Consent(); setConsentProvidersMatchData(consent); setDtoProvidersMatchData(consentDto); consentDto.setProvidersPermittedToDisclose(consentDto.getProvidersDisclosureIsMadeTo()); boolean isProviderComboMatch = cst.isProviderComboMatch(consent, consentDto); assertEquals(isProviderComboMatch, false); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public String toTweet(TradeEventPayLoad payLoad) { if (!tradeEventsSupported.contains(payLoad.getEvent())) { return null; } final JSONObject jsonPayLoad = payLoad.getPayLoad(); final String instrument = jsonPayLoad.get(OandaJsonKeys.instrument).toString(); final String instrumentAsHashtag = OandaUtils.oandaToHashTagCcy(instrument); final long tradeUnits = (Long) jsonPayLoad.get(OandaJsonKeys.units); final double price = ((Number) jsonPayLoad.get(OandaJsonKeys.price)).doubleValue(); final long origTransactionId = (Long) jsonPayLoad.get(OandaJsonKeys.tradeId); final long accountId = (Long) jsonPayLoad.get(OandaJsonKeys.accountId); Transaction<Long, Long, String> origTransaction = this.transactionDataProvider.getTransaction( origTransactionId, accountId); if (origTransaction == null) { String side = jsonPayLoad.get(OandaJsonKeys.side).toString(); TradingSignal signal = OandaUtils.toTradingSignal(side); return String.format(\"Closed %s %d units of %s@%2.5f.\", signal.flip().name(), tradeUnits, instrumentAsHashtag, price); } double pips = 0; if (origTransaction.getSide() == TradingSignal.LONG) { pips = (price - origTransaction.getPrice()) / this.instrumentService.getPipForInstrument(new TradeableInstrument<String>(instrument)); } else { pips = (origTransaction.getPrice() - price) / this.instrumentService.getPipForInstrument(new TradeableInstrument<String>(instrument)); } return String.format(\"Closed %s %d units of %s@%2.5f for %3.1f pips.\", origTransaction.getSide().name(), tradeUnits, instrumentAsHashtag, price, pips); }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void payLoadToTweet() { JSONObject jsonPayLoad = mock(JSONObject.class); TradeableInstrument<String> eurchf = new TradeableInstrument<String>(\"EUR_CHF\"); TradeEventPayLoad payLoad = new TradeEventPayLoad(TradeEvents.TAKE_PROFIT_FILLED, jsonPayLoad); when(jsonPayLoad.get(OandaJsonKeys.instrument)).thenReturn(eurchf.getInstrument()); when(jsonPayLoad.get(OandaJsonKeys.units)).thenReturn(200l); when(jsonPayLoad.get(OandaJsonKeys.price)).thenReturn(1.10325); when(jsonPayLoad.get(OandaJsonKeys.tradeId)).thenReturn(OandaTestConstants.tradeId); when(jsonPayLoad.get(OandaJsonKeys.accountId)).thenReturn(OandaTestConstants.accountId); TransactionDataProvider<Long, Long, String> transactionDataProvider = mock(TransactionDataProvider.class); Transaction<Long, Long, String> transaction = mock(Transaction.class); when(transactionDataProvider.getTransaction(OandaTestConstants.tradeId, OandaTestConstants.accountId)) .thenReturn(transaction); when(transaction.getSide()).thenReturn(TradingSignal.SHORT); when(transaction.getPrice()).thenReturn(1.11); InstrumentService<String> instrumentService = mock(InstrumentService.class); when(instrumentService.getPipForInstrument(eq(eurchf))).thenReturn(0.0001); TradeEventHandler eventHandler = new TradeEventHandler(null, transactionDataProvider, instrumentService); String tweet = eventHandler.toTweet(payLoad); assertNotNull(tweet); assertEquals(\"Closed SHORT 200 units of #EURCHF@1.10325 for 67.5 pips.\", tweet); transaction = mock(Transaction.class); when(transactionDataProvider.getTransaction(OandaTestConstants.tradeId, OandaTestConstants.accountId)) .thenReturn(transaction); when(transaction.getSide()).thenReturn(TradingSignal.SHORT); when(transaction.getPrice()).thenReturn(1.10); tweet = eventHandler.toTweet(payLoad); assertNotNull(tweet); assertEquals(\"Closed SHORT 200 units of #EURCHF@1.10325 for -32.5 pips.\", tweet); transaction = mock(Transaction.class); when(transactionDataProvider.getTransaction(OandaTestConstants.tradeId, OandaTestConstants.accountId)) .thenReturn(transaction); when(transaction.getSide()).thenReturn(TradingSignal.LONG); when(transaction.getPrice()).thenReturn(1.10); tweet = eventHandler.toTweet(payLoad); assertNotNull(tweet); assertEquals(\"Closed LONG 200 units of #EURCHF@1.10325 for 32.5 pips.\", tweet); transaction = mock(Transaction.class); when(transactionDataProvider.getTransaction(OandaTestConstants.tradeId, OandaTestConstants.accountId)) .thenReturn(transaction); when(transaction.getSide()).thenReturn(TradingSignal.LONG); when(transaction.getPrice()).thenReturn(1.11); tweet = eventHandler.toTweet(payLoad); assertNotNull(tweet); assertEquals(\"Closed LONG 200 units of #EURCHF@1.10325 for -67.5 pips.\", tweet); when(transactionDataProvider.getTransaction(OandaTestConstants.tradeId, OandaTestConstants.accountId)) .thenReturn(null); when(jsonPayLoad.get(OandaJsonKeys.side)).thenReturn(\"sell\"); tweet = eventHandler.toTweet(payLoad); assertNotNull(tweet); assertEquals(\"Closed LONG 200 units of #EURCHF@1.10325.\", tweet); TradeEventPayLoad payload2 = new TradeEventPayLoad(TradeEvents.MIGRATE_TRADE_CLOSE, jsonPayLoad); assertNull(eventHandler.toTweet(payload2)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: byte[] encode(final JsonNode record) { return ByteBuffer.allocate(Integer.BYTES).putInt(hasherSupplier.get().apply(record)).array(); }### Assistant: @Test public void pathResolvesToMissingInMessage() { JsonKeyEncoder encoder = new JsonKeyEncoder(() -> KeyPathParser.parse(\"$.X\"), random); assertThat(encoder.encode(message), is(asBytes(RANDOM_VALUE))); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void deviceAdded(IDevice device) { SwitchPort[] switchPort = device.getAttachmentPoints(); if (switchPort.length == 0) { return; } IPv4Address[] ips = device.getIPv4Addresses(); if (ips.length == 0) { return; } String dpid = HexString.toHexString(switchPort[0].getSwitchDPID() .getLong()); String ip = IPv4.fromIPv4Address(ips[0].getInt()); logger.debug(\"AP(dpid:{},ip:{}) is added\", dpid, ip); AP ap = new AP(ip, dpid); apManager.addAP(ap); processAPAdded(ap); }### Assistant: @Test public void testDeviceAdded() { reset(topology); expect(topology.isAttachmentPointPort(DatapathId.of(1L), OFPort.of(1))).andReturn(true).anyTimes(); expect(topology.isAttachmentPointPort(DatapathId.of(1L), OFPort.of(2))).andReturn(true).anyTimes(); expect(topology.isAttachmentPointPort(DatapathId.of(2L), OFPort.of(1))).andReturn(true).anyTimes(); expect(topology.isAttachmentPointPort(DatapathId.of(2L), OFPort.of(2))).andReturn(true).anyTimes(); replay(topology); int[] cidr = new int[2]; ACLRule rule1, rule2; IResultSet resultSet; Iterator<IResultSet> it; Map<String, Object> row; rule1 = new ACLRule(); rule1.setNw_src(\"10.0.0.0/28\"); cidr = IPAddressUtil.parseCIDR(\"10.0.0.0/28\"); rule1.setNw_src_prefix(cidr[0]); rule1.setNw_src_maskbits(cidr[1]); rule1.setNw_dst(\"10.0.0.254/32\"); cidr = IPAddressUtil.parseCIDR(\"10.0.0.254/32\"); rule1.setNw_dst_prefix(cidr[0]); rule1.setNw_dst_maskbits(cidr[1]); rule1.setNw_proto(6); rule1.setTp_dst(80); rule1.setAction(Action.DENY); assertEquals(acl.addRule(rule1), true); assertEquals(acl.getRules().size(), 1); deviceManager.learnEntity(MacAddress.of(\"00:00:00:00:00:01\"), VlanVid.ZERO, IPv4Address.of(\"10.0.0.1\"), IPv6Address.NONE, DatapathId.of(1), OFPort.of(1)); resultSet = storageService.getRow( StaticFlowEntryPusher.TABLE_NAME, \"ACLRule_1_00:00:00:00:00:00:00:01\"); it = resultSet.iterator(); while(it.hasNext()){ row = it.next().getRow(); assertEquals(row.get(\"switch\").toString(),\"00:00:00:00:00:00:00:01\"); assertEquals(row.get(\"priority\").toString(),\"30000\"); assertEquals(row.get(\"eth_type\").toString(),\"2048\"); assertEquals(row.get(\"ipv4_src\").toString(),\"10.0.0.0/28\"); assertEquals(row.get(\"ipv4_dst\").toString(),\"10.0.0.254/32\"); assertEquals(row.get(\"ip_proto\").toString(),\"6\"); assertEquals(row.get(\"tp_dst\").toString(),\"80\"); assertEquals(row.get(\"actions\"), null); } deviceManager.learnEntity(MacAddress.of(\"00:00:00:00:00:02\"), VlanVid.ZERO, IPv4Address.of(\"10.0.0.2\"), IPv6Address.NONE, DatapathId.of(1), OFPort.of(2)); resultSet = storageService.getRow( StaticFlowEntryPusher.TABLE_NAME, \"ACLRule_1_00:00:00:00:00:00:00:01\"); it = resultSet.iterator(); int count = 0; while(it.hasNext()){ row = it.next().getRow(); count++; } assertEquals(count, 1); rule2 = new ACLRule(); rule2.setNw_dst(\"10.0.0.3/32\"); cidr = IPAddressUtil.parseCIDR(\"10.0.0.3/32\"); rule2.setNw_dst_prefix(cidr[0]); rule2.setNw_dst_maskbits(cidr[1]); rule2.setNw_proto(1); rule2.setAction(Action.DENY); assertEquals(acl.addRule(rule2), true); assertEquals(acl.getRules().size(), 2); deviceManager.learnEntity(MacAddress.of(\"00:00:00:00:00:03\"), VlanVid.ZERO, IPv4Address.of(\"10.0.0.3\"), IPv6Address.NONE, DatapathId.of(2), OFPort.of(1)); resultSet = storageService.getRow( StaticFlowEntryPusher.TABLE_NAME, \"ACLRule_2_00:00:00:00:00:00:00:02\"); it = resultSet.iterator(); while(it.hasNext()){ row = it.next().getRow(); assertEquals(row.get(\"switch\").toString(),\"00:00:00:00:00:00:00:02\"); assertEquals(row.get(\"priority\").toString(),\"29999\"); assertEquals(row.get(\"eth_type\").toString(),\"2048\"); assertEquals(row.get(\"ipv4_src\"), null); assertEquals(row.get(\"ipv4_dst\").toString(),\"10.0.0.3/32\"); assertEquals(row.get(\"ip_proto\").toString(),\"1\"); assertEquals(row.get(\"tp_dst\"), null); assertEquals(row.get(\"actions\"), null); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @SuppressWarnings(\"unchecked\") public static <T> T coercedTypeCasting(Object source, Class<T> clazz) throws IllegalArgumentException { if (null == clazz) { throw new IllegalArgumentException(\"Target Class can not be null\"); } if (source instanceof JsonValue) { source = ((JsonValue)source).getObject(); } Class<T> targetClazz = clazz; Class sourceClass = (source == null ? null : source.getClass()); boolean coerced = false; T result = null; try { if (source == null) { return null; } if (targetClazz.equals(Object.class)) { if ((Number.class.isAssignableFrom(sourceClass)) || (int.class == clazz) || (double.class == clazz) || (float.class == clazz) || (long.class == clazz)) { return (T) source; } else if ((Boolean.class.isAssignableFrom(sourceClass)) || (boolean.class == clazz)) { return (T) source; } else if (String.class.isAssignableFrom(sourceClass)) { return (T) source; } else if (Map.class.isAssignableFrom(sourceClass)) { return (T) source; } else if (List.class.isAssignableFrom(sourceClass)) { return (T) source; } else if (sourceClass.isArray()) { return (T) Arrays.asList(source); } else if (sourceClass == QualifiedUid.class) { Map<String, Object> v = new HashMap<String, Object>(2); v.put(\"_id\", ((QualifiedUid) source).getUid().getUidValue()); v.put(\"_type\", ((QualifiedUid) source).getObjectClass().getObjectClassValue()); return (T) v; } else if (sourceClass == Script.class) { Map<String, Object> v = new HashMap<String, Object>(2); v.put(\"scriptLanguage\", ((Script) source).getScriptLanguage()); v.put(\"scriptText\", ((Script) source).getScriptText()); return (T) v; } else { targetClazz = (Class<T>) String.class; } } if (targetClazz.isAssignableFrom(sourceClass)) { return (T) source; } else if (targetClazz == sourceClass) { return (T) source; } else if (targetClazz.equals(java.math.BigDecimal.class)) { if (Double.class.isAssignableFrom(sourceClass) || sourceClass == double.class) { result = (T) BigDecimal.valueOf((Double) source); coerced = true; } else if (Integer.class.isAssignableFrom(sourceClass) || sourceClass == int.class) { result = (T) BigDecimal.valueOf((Integer) source); coerced = true; } else if (Long.class.isAssignableFrom(sourceClass) || sourceClass == long.class) { result = (T) BigDecimal.valueOf((Long) source); coerced = true; } else if (sourceClass == String.class) { java.math.BigDecimal v = new java.math.BigDecimal((String) source); result = targetClazz.cast(v); coerced = true; } } else if (targetClazz.equals(java.math.BigInteger.class)) { if (Long.class.isAssignableFrom(sourceClass) || sourceClass == long.class) { result = (T) BigInteger.valueOf((Long) source); coerced = true; } else if (sourceClass == String.class) { java.math.BigInteger v = new java.math.BigInteger((String) source); result = targetClazz.cast(v); coerced = true; } else { result = (T) BigInteger.valueOf(coercedTypeCasting(source, Long.class)); coerced = true; } } else if (targetClazz.equals(boolean.class) || targetClazz.equals(Boolean.class)) { if (sourceClass == Boolean.class) { result = (T) source; coerced = true; } else if (sourceClass == Integer.class) { int val = ((Integer) source).intValue(); if (val == 0) { result = targetClazz.cast(Boolean.FALSE); coerced = true; } else if (val == 1) { result = targetClazz.cast(Boolean.TRUE); coerced = true; } } else if (sourceClass == String.class) { String s = (String) source; if (s.equalsIgnoreCase(\"true\") || s.equalsIgnoreCase(\"false\")) { result = (T) Boolean.valueOf((String) source); coerced = true; } } } else if (targetClazz.equals(byte[].class)) { if (sourceClass == String.class) { result = targetClazz.cast(((String) source).getBytes()); coerced = true; } else if (sourceClass == String.class) { result = targetClazz.cast(Base64.decode((String) source)); coerced = true; } else if (sourceClass == GuardedByteArray.class) { GuardedByteArray gba = (GuardedByteArray) source; byte[] byteArray = decrypt(gba); result = targetClazz.cast(byteArray); coerced = true; } } else if ((targetClazz.equals(Character.class)) || (targetClazz.equals(char.class))) { if (sourceClass == String.class) { Character v = ((String) source).charAt(0); result = (T) v; coerced = true; } } else if (targetClazz.equals(Character[].class)) { if (sourceClass == String.class) { char[] charArray = ((String) source).toCharArray(); Character[] characterArray = new Character[charArray.length]; for (int i = 0; i < charArray.length; i++) { characterArray[i] = new Character(charArray[i]); } result = targetClazz.cast(characterArray); coerced = true; } } else if (targetClazz.equals(char[].class)) { if (sourceClass == String.class) { char[] charArray = ((String) source).toCharArray(); result = targetClazz.cast(charArray); coerced = true; } } else if (targetClazz.equals(Date.class)) { if (sourceClass == String.class) { } } else if (targetClazz.equals(double.class)) { if (sourceClass == Double.class) { result = (T) source; coerced = true; } else if (sourceClass == int.class) { result = (T) Double.valueOf((((Integer) source).doubleValue())); coerced = true; } else if (sourceClass == Integer.class) { result = (T) Double.valueOf(((Integer) source).doubleValue()); coerced = true; } else if (sourceClass == String.class) { result = targetClazz.cast(Double.valueOf((String) source)); coerced = true; } } else if (targetClazz.equals(Double.class)) { if (sourceClass == double.class) { result = (T) source; coerced = true; } else if (sourceClass == int.class) { result = (T) Double.valueOf((((Integer) source).doubleValue())); coerced = true; } else if (sourceClass == Integer.class) { result = (T) Double.valueOf(((Integer) source).doubleValue()); coerced = true; } else if (sourceClass == String.class) { result = targetClazz.cast(Double.valueOf((String) source)); coerced = true; } } else if (targetClazz.equals(java.io.File.class)) { if (sourceClass == String.class) { result = (T) new File((String) source); coerced = true; } } else if (targetClazz.equals(float.class) || targetClazz.equals(Float.class)) { if (sourceClass == Float.class || sourceClass == float.class) { result = (T) source; coerced = true; } else if (sourceClass == Double.class || sourceClass == double.class) { result = (T) new Float((Double) source); coerced = true; } else if (sourceClass == int.class) { result = (T) Float.valueOf((((Integer) source).floatValue())); coerced = true; } else if (sourceClass == Integer.class) { result = (T) Float.valueOf(((Integer) source).floatValue()); coerced = true; } else if (sourceClass == String.class) { result = (T) Float.valueOf((String) source); coerced = true; } } else if (targetClazz.equals(GuardedByteArray.class)) { if (sourceClass == String.class) { byte[] byteArray = ((String) source).getBytes(); GuardedByteArray v = new GuardedByteArray(byteArray); result = targetClazz.cast(v); coerced = true; } } else if (targetClazz.equals(GuardedString.class)) { if (sourceClass == String.class) { char[] charArray = ((String) source).toCharArray(); GuardedString v = new GuardedString(charArray); result = targetClazz.cast(v); coerced = true; } } else if (targetClazz.equals(int.class) || targetClazz.equals(Integer.class)) { if (sourceClass == Integer.class || sourceClass == int.class) { result = (T) source; coerced = true; } else if (sourceClass == String.class) { result = (T) Integer.valueOf((String) source); coerced = true; } else if (sourceClass == Float.class) { result = targetClazz.cast(((Float) source).intValue()); coerced = true; } else if (sourceClass == Long.class) { Long l = (Long) source; if (l.longValue() <= Integer.MAX_VALUE) { result = targetClazz.cast(l.intValue()); coerced = true; } } else if (sourceClass == Boolean.class) { boolean val = ((Boolean) source).booleanValue(); if (val) { result = targetClazz.cast(1); } else { result = targetClazz.cast(new Integer(0)); } coerced = true; } } else if (targetClazz.equals(long.class) || targetClazz.equals(Long.class)) { if (sourceClass == int.class) { result = (T) Long.valueOf((((Integer) source).longValue())); coerced = true; } else if (sourceClass == Integer.class) { result = (T) Long.valueOf(((Integer) source).longValue()); coerced = true; } else if (sourceClass == Long.class || sourceClass == long.class) { result = (T) source; coerced = true; } else if (sourceClass == String.class) { result = (T) Long.valueOf((String) source); coerced = true; } } else if (targetClazz.equals(Name.class)) { if (sourceClass == String.class) { result = targetClazz.cast(new Name((String) source)); coerced = true; } } else if (targetClazz.equals(ObjectClass.class)) { if (sourceClass == String.class) { ScriptBuilder sb = new ScriptBuilder(); sb.setScriptLanguage(\"\"); sb.setScriptText(\"\"); result = targetClazz.cast(sb.build()); coerced = true; } } else if (targetClazz.equals(QualifiedUid.class)) { if (sourceClass == String.class) { ScriptBuilder sb = new ScriptBuilder(); sb.setScriptLanguage(\"\"); sb.setScriptText(\"\"); result = targetClazz.cast(sb.build()); coerced = true; } } else if (targetClazz.equals(Script.class)) { if (sourceClass == String.class) { ScriptBuilder sb = new ScriptBuilder(); sb.setScriptLanguage(\"\"); sb.setScriptText(\"\"); result = targetClazz.cast(sb.build()); coerced = true; } else if (Map.class.isAssignableFrom(sourceClass)) { ScriptBuilder sb = new ScriptBuilder(); sb.setScriptLanguage((String) ((Map) source).get(\"scriptLanguage\")); sb.setScriptText((String) ((Map) source).get(\"scriptText\")); result = targetClazz.cast(sb.build()); coerced = true; } } else if (targetClazz.equals(String.class)) { if (sourceClass == byte[].class) { result = (T) new String((byte[]) source); coerced = true; } else if (sourceClass == char.class) { result = (T) new String((char[]) source); coerced = true; } else if (sourceClass == Character[].class) { Character[] characterArray = (Character[]) source; char[] charArray = new char[characterArray.length]; for (int i = 0; i < characterArray.length; i++) { charArray[i] = characterArray[i]; } result = (T) new String(charArray); coerced = true; } else if (sourceClass == Double.class) { String s = ((Double) source).toString(); result = targetClazz.cast(s); coerced = true; } else if (sourceClass == Float.class) { String s = ((Float) source).toString(); result = targetClazz.cast(s); coerced = true; } else if (sourceClass == Boolean.class) { Boolean b = (Boolean) source; result = targetClazz.cast(Boolean.toString(b.booleanValue())); coerced = true; } else if (sourceClass == Long.class) { String s = ((Long) source).toString(); result = targetClazz.cast(s); coerced = true; } else if (sourceClass == Integer.class) { String s = ((Integer) source).toString(); result = targetClazz.cast(s); coerced = true; } else if (sourceClass == java.math.BigInteger.class) { String s = source.toString(); result = targetClazz.cast(s); coerced = true; } else if (sourceClass == java.math.BigDecimal.class) { String s = ((java.math.BigDecimal) source).toString(); result = targetClazz.cast(s); coerced = true; } else if (sourceClass == java.io.File.class) { File file = (File) source; String s = file.getPath(); result = targetClazz.cast(s); coerced = true; } else if (sourceClass == java.net.URI.class) { java.net.URI uri = (java.net.URI) source; String s = uri.toString(); result = targetClazz.cast(s); coerced = true; } else if (sourceClass == Character.class) { Character c = (Character) source; char[] charArray = new char[1]; charArray[0] = c.charValue(); String s = new String(charArray); result = targetClazz.cast(s); coerced = true; } else if (sourceClass == GuardedString.class) { String s = decrypt((GuardedString) source); result = targetClazz.cast(s); coerced = true; } else if (sourceClass == GuardedByteArray.class) { byte[] s = decrypt((GuardedByteArray) source); result = targetClazz.cast(new String(s)); coerced = true; } } else if (targetClazz.equals(Uid.class)) { if (sourceClass == String.class) { Uid v = new Uid((String) source); result = targetClazz.cast(v); coerced = true; } } else if (targetClazz.equals(java.net.URI.class)) { if (sourceClass == String.class) { try { java.net.URI v = new java.net.URI((String) source); result = targetClazz.cast(v); coerced = true; } catch (URISyntaxException e) { throw new IOException(e); } } } } catch (Exception e) { if (TRACE.isDebugEnabled()) { TRACE.error(\"Failed to coerce {} from {} to {} \", new Object[]{source, sourceClass.getCanonicalName(), targetClazz.getCanonicalName()}, e); } else { TRACE.error(\"Failed to coerce from {} to {} \", new Object[]{sourceClass.getCanonicalName(), targetClazz.getCanonicalName()}, e); } throw new IllegalArgumentException(source.getClass().getCanonicalName() + \" to \" + targetClazz.getCanonicalName(), e); } if (!coerced) { TRACE.error(\"Can not coerce {} to {}\", sourceClass.getCanonicalName(), targetClazz.getCanonicalName()); throw new IllegalArgumentException(source.getClass().getCanonicalName() + \" to \" + targetClazz.getCanonicalName()); } return result; }### Assistant: @Test public void testCoercedTypeCasting() throws Exception { BigInteger bigInteger = ConnectorUtil.coercedTypeCasting(new Integer(20), BigInteger.class); Assert.assertEquals(bigInteger.intValue(), 20); Boolean booleanValue = ConnectorUtil.coercedTypeCasting(\"true\",boolean.class); Assert.assertTrue(booleanValue); Integer integerValue = ConnectorUtil.coercedTypeCasting(\"636\",int.class); Assert.assertEquals(integerValue, (Integer)636); float floatValue = ConnectorUtil.coercedTypeCasting(\"636\",float.class); Assert.assertEquals(floatValue, 636.0f); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Reservation readFrom(Class<Reservation> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream) throws IOException, WebApplicationException { JsonReader reader = Json.createReader(entityStream); JsonObject jsonObject = reader.readObject(); DateTimeFormatter formatter = ofPattern(\"yyyy-MM-dd\"); LocalDate checkin = parse(requireNonNull(jsonObject.getString(CHECKINDATE.fieldName())), formatter); LocalDate checkout = parse(requireNonNull(jsonObject.getString(CHECKOUTDATE.fieldName())), formatter); BigDecimal cost = null; if (null == jsonObject.getJsonNumber(COSTSINEURO.fieldName())) { cost = reservationCostCalculator.calculateRateFor(STANDARD, checkin, checkout); } else { cost = jsonObject.getJsonNumber(COSTSINEURO.fieldName()).bigDecimalValue(); } return new Reservation(requireNonNull(jsonObject.getString(GUESTID.fieldName())), jsonObject.getString(RESERVATIONNUMBER.fieldName(), \"\"), requireNonNull(jsonObject.getString(ASSIGNEDROOMID.fieldName())), checkin, checkout, cost); }### Assistant: @Test public void a_json_reservation_can_be_read() throws IOException { String json = \"{\\\"guestId\\\":\\\"9999\\\",\\\"reservationNumber\\\":\\\"abc-123\\\",\\\"checkinDate\\\":\\\"2013-01-01\\\",\\\"checkoutDate\\\":\\\"2013-02-01\\\",\\\"assignedRoomId\\\":\\\"999\\\",\\\"reservationStatus\\\":\\\"CLOSED\\\",\\\"costsInEuro\\\":242.23}\"; Reservation reservation = new ReservationBodyReader(new ReservationCostCalculator()).readFrom(Reservation.class, null, null, null, null, new ByteArrayInputStream(json.getBytes())); assertThat(reservation).isNotNull(); assertThat(reservation.getGuest()).isEqualTo(\"9999\"); assertThat(reservation.getReservationNumber()).isEqualTo(\"abc-123\"); assertThat(reservation.getCostsInEuro()).isEqualTo(new BigDecimal(\"242.23\")); assertThat(reservation.getReservationStatus()).isEqualTo(OPEN); assertThat(reservation.getCheckinDate()).isEqualTo(of(2013, 1, 1)); assertThat(reservation.getCheckoutDate()).isEqualTo(of(2013, 2, 1)); assertThat(reservation.getAssignedRoom()).isEqualTo(\"999\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static SampleIdentifier of(String id, int position) { Objects.requireNonNull(id, \"sample id cannot be null\"); if (id.isEmpty()) { throw new IllegalArgumentException(\"sample id cannot be empty\"); } return new SampleIdentifier(id, position); }### Assistant: @Test public void throwsExceptionWhenInitialisedWithNull() { assertThrows(NullPointerException.class, () -> SampleIdentifier.of(null, 0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<ReferencedEnvelope> getQueryEnvelopes() throws TransformException, FactoryException { CoordinateReferenceSystem renderingCRS = renderingEnvelope.getCoordinateReferenceSystem(); if(renderingCRS instanceof GeographicCRS && !CRS.equalsIgnoreMetadata(renderingCRS, WGS84)) { ReferencedEnvelope re = renderingEnvelope; List<ReferencedEnvelope> envelopes = new ArrayList<ReferencedEnvelope>(); envelopes.add(re); if(CRS.getAxisOrder(renderingCRS) == CRS.AxisOrder.NORTH_EAST) { if (re.getMinY() >= -180.0 && re.getMaxY() <= 180) { return Collections .singletonList(transformEnvelope(renderingEnvelope, sourceCRS)); } if (re.getMinY() < -180) { envelopes.add(new ReferencedEnvelope(re.getMinY() + 360, 180, re.getMinX(), re .getMaxX(), re.getCoordinateReferenceSystem())); } if (re.getMaxY() > 180) { envelopes.add(new ReferencedEnvelope(-180, re.getMaxY() - 360, re.getMinX(), re .getMaxX(), re.getCoordinateReferenceSystem())); } } else { if (re.getMinX() >= -180.0 && re.getMaxX() <= 180) { return Collections .singletonList(transformEnvelope(renderingEnvelope, sourceCRS)); } if (re.getMinX() < -180) { envelopes.add(new ReferencedEnvelope(re.getMinX() + 360, 180, re.getMinY(), re .getMaxY(), re.getCoordinateReferenceSystem())); } if (re.getMaxX() > 180) { envelopes.add(new ReferencedEnvelope(-180, re.getMaxX() - 360, re.getMinY(), re .getMaxY(), re.getCoordinateReferenceSystem())); } } mergeEnvelopes(envelopes); reprojectEnvelopes(sourceCRS, envelopes); return envelopes; } else { if (!Double.isNaN(datelineX) && renderingEnvelope.getMinX() < datelineX && renderingEnvelope.getMaxX() > datelineX && renderingEnvelope.getWidth() < radius) { double minX = renderingEnvelope.getMinX(); double minY = renderingEnvelope.getMinY(); double maxX = renderingEnvelope.getMaxX(); double maxY = renderingEnvelope.getMaxY(); ReferencedEnvelope re1 = new ReferencedEnvelope(minX, datelineX - EPS, minY, maxY, renderingCRS); ReferencedEnvelope tx1 = transformEnvelope(re1, WGS84); tx1.expandToInclude(180, tx1.getMinY()); ReferencedEnvelope re2 = new ReferencedEnvelope(datelineX + EPS, maxX, minY, maxY, renderingCRS); ReferencedEnvelope tx2 = transformEnvelope(re2, WGS84); if (tx2.getMinX() > 180) { tx2.translate(-360, 0); } tx2.expandToInclude(-180, tx1.getMinY()); List<ReferencedEnvelope> result = new ArrayList<ReferencedEnvelope>(); result.add(tx1); result.add(tx2); mergeEnvelopes(result); return result; } else { return getSourceEnvelopes(renderingEnvelope); } } }### Assistant: @Test public void testQueryWrappingWGS84() throws Exception { ReferencedEnvelope wgs84Envelope = new ReferencedEnvelope(-190, 60, -90, 45, WGS84); ProjectionHandler handler = ProjectionHandlerFinder.getHandler(wgs84Envelope, WGS84, true); assertNull(handler.validAreaBounds); List<ReferencedEnvelope> envelopes = handler.getQueryEnvelopes(); assertEquals(2, envelopes.size()); ReferencedEnvelope expected = new ReferencedEnvelope(170, 180, -90, 45, WGS84); assertTrue(envelopes.remove(wgs84Envelope)); assertEquals(expected, envelopes.get(0)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void processTable(StrategyConfig strategyConfig, GlobalConfig globalConfig) { String entityName = strategyConfig.getNameConvert().entityNameConvert(this); this.setEntityName(strategyConfig, this.getFileName(entityName, globalConfig.getEntityName(), () -> entityName)); this.mapperName = this.getFileName(entityName, globalConfig.getMapperName(), () -> entityName + ConstVal.MAPPER); this.xmlName = this.getFileName(entityName, globalConfig.getXmlName(), () -> entityName + ConstVal.XML); this.serviceName = this.getFileName(entityName, globalConfig.getServiceName(), () -> \"I\" + entityName + ConstVal.SERVICE); this.serviceImplName = this.getFileName(entityName, globalConfig.getServiceImplName(), () -> entityName + ConstVal.SERVICE_IMPL); this.controllerName = this.getFileName(entityName, globalConfig.getControllerName(), () -> entityName + ConstVal.CONTROLLER); this.importPackage(strategyConfig, globalConfig); }### Assistant: @Test void processTableTest() { TableInfo tableInfo = new TableInfo().setName(\"user\"); tableInfo.processTable(new StrategyConfig(), new GlobalConfig()); Assertions.assertFalse(tableInfo.isConvert()); Assertions.assertEquals(\"UserMapper\", tableInfo.getMapperName()); Assertions.assertEquals(\"UserXml\", tableInfo.getXmlName()); Assertions.assertEquals(\"IUserService\", tableInfo.getServiceName()); Assertions.assertEquals(\"UserServiceImpl\", tableInfo.getServiceImplName()); Assertions.assertEquals(\"UserController\", tableInfo.getControllerName()); tableInfo = new TableInfo().setName(\"user\"); tableInfo.processTable(new StrategyConfig(), new GlobalConfig().setEntityName(\"%sEntity\") .setXmlName(\"%sXml\").setMapperName(\"%sDao\").setControllerName(\"%sAction\").setServiceName(\"%sService\").setServiceImplName(\"%sServiceImp\")); Assertions.assertTrue(tableInfo.isConvert()); Assertions.assertEquals(\"UserEntity\", tableInfo.getEntityName()); Assertions.assertEquals(\"UserDao\", tableInfo.getMapperName()); Assertions.assertEquals(\"UserXml\", tableInfo.getXmlName()); Assertions.assertEquals(\"UserService\", tableInfo.getServiceName()); Assertions.assertEquals(\"UserServiceImp\", tableInfo.getServiceImplName()); Assertions.assertEquals(\"UserAction\", tableInfo.getControllerName()); tableInfo = new TableInfo().setName(\"user\"); tableInfo.processTable(new StrategyConfig().setNameConvert(new INameConvert() { @Override public String entityNameConvert(TableInfo tableInfo) { return \"E\" + tableInfo.getName(); } @Override public String propertyNameConvert(TableField field) { return field.getName(); } }), new GlobalConfig()); Assertions.assertTrue(tableInfo.isConvert()); Assertions.assertEquals(\"Euser\", tableInfo.getEntityName()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean createPermanentData(final String name, final String data) { final Response response = httpClient .target(endpoint) .path(\"/v1/kv/\").path(name) .queryParam(\"cas\", \"0\") .request() .put(Entity.text(data)); if (response.getStatus() != Response.Status.OK.getStatusCode()) { LOG.log(Level.WARNING, \"Could not create permanent value \" + name + \"/\" + data + \" got response \" + response.getStatus() + \" but expected 200\"); return false; } final String result = response.readEntity(String.class); if (result.equals(\"true\")) { return true; } return false; }### Assistant: @Test public void createPermanentData() { final Consul consul = new Consul(System.getProperty(EP_PROPERTY)); assertTrue(consul.isValid()); final String keyName = \"thepermanentone\"; consul.removePermanentData(keyName); assertTrue(consul.createPermanentData(keyName, \"SomeValue\")); assertFalse(consul.createPermanentData(keyName, \"AlreadyExists\")); assertThat(consul.readData(keyName), is(\"SomeValue\")); assertTrue(consul.writePermanentData(keyName, \"OtherValue\")); assertThat(consul.readData(keyName), is(\"OtherValue\")); assertTrue(consul.removePermanentData(keyName)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void handle(RMContainerEvent event) { LOG.debug(\"Processing {} of type {}\", event.getContainerId(), event.getType()); writeLock.lock(); try { RMContainerState oldState = getState(); try { stateMachine.doTransition(event.getType(), event); } catch (InvalidStateTransitionException e) { LOG.error(\"Can't handle this event at current state\", e); onInvalidStateTransition(event.getType(), oldState); } if (oldState != getState()) { LOG.info(event.getContainerId() + \" Container Transitioned from \" + oldState + \" to \" + getState()); } } finally { writeLock.unlock(); } }### Assistant: @Test(timeout = 30000) public void testContainerAcquiredAtKilled() { DrainDispatcher drainDispatcher = new DrainDispatcher(); EventHandler<RMAppAttemptEvent> appAttemptEventHandler = mock( EventHandler.class); EventHandler generic = mock(EventHandler.class); drainDispatcher.register(RMAppAttemptEventType.class, appAttemptEventHandler); drainDispatcher.register(RMNodeEventType.class, generic); drainDispatcher.init(new YarnConfiguration()); drainDispatcher.start(); NodeId nodeId = BuilderUtils.newNodeId(\"host\", 3425); ApplicationId appId = BuilderUtils.newApplicationId(1, 1); ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId( appId, 1); ContainerId containerId = BuilderUtils.newContainerId(appAttemptId, 1); ContainerAllocationExpirer expirer = mock(ContainerAllocationExpirer.class); Resource resource = BuilderUtils.newResource(512, 1); Priority priority = BuilderUtils.newPriority(5); Container container = BuilderUtils.newContainer(containerId, nodeId, \"host:3465\", resource, priority, null); ConcurrentMap<ApplicationId, RMApp> appMap = new ConcurrentHashMap<>(); RMApp rmApp = mock(RMApp.class); appMap.putIfAbsent(appId, rmApp); RMApplicationHistoryWriter writer = mock(RMApplicationHistoryWriter.class); SystemMetricsPublisher publisher = mock(SystemMetricsPublisher.class); RMContext rmContext = mock(RMContext.class); when(rmContext.getDispatcher()).thenReturn(drainDispatcher); when(rmContext.getContainerAllocationExpirer()).thenReturn(expirer); when(rmContext.getRMApplicationHistoryWriter()).thenReturn(writer); when(rmContext.getSystemMetricsPublisher()).thenReturn(publisher); AllocationTagsManager ptm = mock(AllocationTagsManager.class); when(rmContext.getAllocationTagsManager()).thenReturn(ptm); YarnConfiguration conf = new YarnConfiguration(); conf.setBoolean( YarnConfiguration.APPLICATION_HISTORY_SAVE_NON_AM_CONTAINER_META_INFO, true); when(rmContext.getYarnConfiguration()).thenReturn(conf); when(rmContext.getRMApps()).thenReturn(appMap); RMContainer rmContainer = new RMContainerImpl(container, SchedulerRequestKey.extractFrom(container), appAttemptId, nodeId, \"user\", rmContext) { @Override protected void onInvalidStateTransition( RMContainerEventType rmContainerEventType, RMContainerState state) { Assert.fail(\"RMContainerImpl: can't handle \" + rmContainerEventType + \" at state \" + state); } }; rmContainer.handle(new RMContainerEvent(containerId, RMContainerEventType.KILL)); rmContainer.handle(new RMContainerEvent(containerId, RMContainerEventType.ACQUIRED)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @RequestMapping(value = \"/sync\") public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user) throws Exception { DatabaseSet databaseSet = databaseSetDao.getDatabaseSetById(id); return databaseSetService.syncDbSet(user, databaseSet); }### Assistant: @Test public void sync() throws Exception { mockMvc.perform(MockMvcRequestBuilders.post(\"/groupdbset/sync\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", \"1\") .accept(MediaType.APPLICATION_JSON_UTF8)) .andExpect(MockMvcResultMatchers.status().isOk()) .andDo(MockMvcResultHandlers.print()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void notificationReceived(final Notification notification) { LOGGER.info(String.format(\"Received device notification from device: %s with notification: %s\", m_device.getDeviceName(), notification.notificationToString())); Notification normalizedNotification = m_adapterContext.getDeviceInterface().normalizeNotification(notification); if (normalizedNotification != null) { RequestScope.withScope(new RequestScope.RsTemplate<Void>() { @Override protected Void execute() throws RequestScopeExecutionException { try { NotificationContext context = new NotificationContext(); context.put(Device.class.getSimpleName(), m_device); context.put(DeviceAdapterId.class.getSimpleName(), m_deviceAdapterId); QName onuStateChangeNotification = QName.create(ONU_STATE_CHANGE_NS, \"onu-state-change\"); if (onuStateChangeNotification.equals(normalizedNotification.getType())) { getDeviceSlotAndPort(m_device.getDeviceName(), normalizedNotification); } m_notificationService.executeCallBack(normalizedNotification, context); } catch (Exception e) { LOGGER.error(\"Error while processing notification\", e); } return null; } }); } else { LOGGER.debug(\"The normalized notification received from the adapter is null\"); } }### Assistant: @Test public void testNotificationReceivedForNormalization() { when(m_deviceInterface.normalizeNotification(m_notification)).thenReturn(m_normalizedNotification); m_deviceNotificationListener.notificationReceived(m_notification); verify(m_notificationService).executeCallBack(eq(m_normalizedNotification), m_notificationContextCaptor.capture()); NotificationContext context = m_notificationContextCaptor.getValue(); assertEquals(m_device, context.get(Device.class.getSimpleName())); assertEquals(m_deviceAdapterId, context.get(DeviceAdapterId.class.getSimpleName())); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static float[] createLonData(GridDef gridDef) { final float[] lonData = new float[gridDef.getWidth()]; for (int x = 0; x < gridDef.getWidth(); x++) { lonData[x] = (float) gridDef.getCenterLon(x); } return lonData; }### Assistant: @Test public void testCreateLonData() throws Exception { final GridDef gridDef = SpatialResolution.DEGREE_10_00.getGridDef(); final float[] lonData = WriterHelper.createLonData(gridDef); assertArrayEquals(EXPECTED_LON, lonData, 1e-8f); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: private static FileStatus getFileStatus(final FileSystem fs, final Path path, LoadingCache<Path,Future<FileStatus>> statCache) throws IOException { if (statCache == null) { return fs.getFileStatus(path); } try { return statCache.get(path).get(); } catch (ExecutionException e) { Throwable cause = e.getCause(); if (cause instanceof IOException) { throw (IOException)cause; } else { throw new IOException(cause); } } catch (InterruptedException e) { Thread.currentThread().interrupt(); throw new IOException(e); } }### Assistant: @Test (timeout=10000) public void testDirDownload() throws IOException, InterruptedException { FileContext files = FileContext.getLocalFSFileContext(conf); final Path basedir = files.makeQualified(new Path(\"target\", TestFSDownload.class.getSimpleName())); files.mkdir(basedir, null, true); conf.setStrings(TestFSDownload.class.getName(), basedir.toString()); Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>(); Random rand = new Random(); long sharedSeed = rand.nextLong(); rand.setSeed(sharedSeed); System.out.println(\"SEED: \" + sharedSeed); Map<LocalResource,Future<Path>> pending = new HashMap<LocalResource,Future<Path>>(); ExecutorService exec = HadoopExecutors.newSingleThreadExecutor(); LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName()); for (int i = 0; i < 5; ++i) { LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE; if (i%2 == 1) { vis = LocalResourceVisibility.APPLICATION; } Path p = new Path(basedir, \"dir\" + i + \".jar\"); LocalResource rsrc = createJar(files, p, vis); rsrcVis.put(rsrc, vis); Path destPath = dirs.getLocalPathForWrite( basedir.toString(), conf); destPath = new Path (destPath, Long.toString(uniqueNumberGenerator.incrementAndGet())); FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc); pending.put(rsrc, exec.submit(fsd)); } exec.shutdown(); while (!exec.awaitTermination(1000, TimeUnit.MILLISECONDS)); for (Future<Path> path: pending.values()) { Assert.assertTrue(path.isDone()); } try { for (Map.Entry<LocalResource,Future<Path>> p : pending.entrySet()) { Path localized = p.getValue().get(); FileStatus status = files.getFileStatus(localized); System.out.println(\"Testing path \" + localized); assert(status.isDirectory()); assert(rsrcVis.containsKey(p.getKey())); verifyPermsRecursively(localized.getFileSystem(conf), files, localized, rsrcVis.get(p.getKey())); } } catch (ExecutionException e) { throw new IOException(\"Failed exec\", e); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static void stream(final Readable readable, final HspListener listener) throws IOException { checkNotNull(readable); checkNotNull(listener); HspLineProcessor lineProcessor = new HspLineProcessor(listener); CharStreams.readLines(readable, lineProcessor); }### Assistant: @Test public void testStream() throws Exception { stream(readable, new HspListener() { @Override public boolean hsp(final HighScoringPair hsp) { assertNotNull(hsp); return true; } }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Plan validateReservationDeleteRequest( ReservationSystem reservationSystem, ReservationDeleteRequest request) throws YarnException { return validateReservation(reservationSystem, request.getReservationId(), AuditConstants.DELETE_RESERVATION_REQUEST); }### Assistant: @Test public void testDeleteReservationInvalidPlan() { ReservationDeleteRequest request = new ReservationDeleteRequestPBImpl(); ReservationId reservationID = ReservationSystemTestUtil.getNewReservationId(); request.setReservationId(reservationID); when(rSystem.getPlan(PLAN_NAME)).thenReturn(null); Plan plan = null; try { plan = rrValidator.validateReservationDeleteRequest(rSystem, request); Assert.fail(); } catch (YarnException e) { Assert.assertNull(plan); String message = e.getMessage(); Assert .assertTrue(message .endsWith(\" is not associated with any valid plan. Please try again with a valid reservation.\")); LOG.info(message); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Enumeration<String> getHeaders(String name) { Enumeration<String> result = Collections.enumeration(Collections.emptyList()); if (headers.containsKey(name.toUpperCase(locale))) { result = headers.get(name.toUpperCase(locale)).getValues(); } return result; }### Assistant: @Test void testGetHeaders() { DefaultHttpHeaderManager manager = new DefaultHttpHeaderManager(); assertNotNull(manager.getHeaders(\"NAME\")); assertFalse(manager.getHeaders(\"NAME\").hasMoreElements()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public void configure(String xml, Object obj) throws XmlBeanException, IOException, SAXException { configure(xml, obj, null); }### Assistant: @Test(expected=PropertyAlreadySetException.class) public void configureSamePropertyTwiceCausesException() throws Exception { StringBuilder string0 = new StringBuilder(200) .append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\") .append(\"<configuration>\\n\") .append(\" <server>\\n\") .append(\" <port>80</port>\\n\") .append(\" <port>8080</port>\\n\") .append(\" </server>\\n\") .append(\"</configuration>\") .append(\"\"); ByteArrayInputStream is = new ByteArrayInputStream(string0.toString().getBytes()); XmlParser parser = new XmlParser(); XmlParser.Node rootNode = parser.parse(is); ComplexConfiguration config = new ComplexConfiguration(); XmlBean bean = new XmlBean(); bean.configure(rootNode, config); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @SuppressWarnings(\"rawtypes\") public void report(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters, SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers) { if (loggerProxy.isEnabled(marker)) { StringBuilder b = new StringBuilder(); for (Entry<String, Gauge> entry : gauges.entrySet()) { logGauge(b, entry.getKey(), entry.getValue()); } for (Entry<String, Counter> entry : counters.entrySet()) { logCounter(b, entry.getKey(), entry.getValue()); } for (Entry<String, Histogram> entry : histograms.entrySet()) { logHistogram(b, entry.getKey(), entry.getValue()); } for (Entry<String, Meter> entry : meters.entrySet()) { logMeter(b, entry.getKey(), entry.getValue()); } for (Entry<String, Timer> entry : timers.entrySet()) { logTimer(b, entry.getKey(), entry.getValue()); } } }### Assistant: @Test public void reportsTimerValuesDefault() { final Timer timer = timer(); when(logger.isInfoEnabled(marker)).thenReturn(true); infoReporter().report(map(), map(), map(), map(), map(\"test.another.timer\", timer)); verify(logger).info(marker, \"type=TIMER, name=prefix.test.another.timer, count=1, min=300.0, max=100.0, \" + \"mean=200.0, stddev=400.0, p50=500.0, p75=600.0, p95=700.0, p98=800.0, p99=900.0, p999=1000.0,\" + \" m1_rate=3.0, m5_rate=4.0, m15_rate=5.0, mean_rate=2.0, rate_unit=events/second, duration_unit=milliseconds\"); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Power getPower(long num) { return new Power(num/DIV, num % DIV ); }### Assistant: @Test public void testPower() { assertEquals(10_000, DigitUtils.DIV, \"Value of DigitUtils.DIV was changed, must be always 10_000\"); assertEquals(0, DigitUtils.getPower(42).power7); assertEquals(42, DigitUtils.getPower(42).power4); assertEquals(1, DigitUtils.getPower(10042).power7); assertEquals(42, DigitUtils.getPower(10042).power4); assertEquals(100, DigitUtils.getPower(1009999).power7); assertEquals(9999, DigitUtils.getPower(1009999).power4); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: static long parseFlySightDate(@NonNull String dateString) throws ParseException { if (df == null) { df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\", Locale.US); df.setTimeZone(TimeZone.getTimeZone(\"UTC\")); } long millis = 0; final int len = dateString.length(); if (dateString.charAt(len - 4) == '.') { millis = 10 * Long.parseLong(dateString.substring(len - 3, len - 1)); } return df.parse(dateString).getTime() + millis; }### Assistant: @Test public void parseFlySightDateTest() throws Exception { long millis = 1517000000400L; String str = \"2018-01-26T20:53:20.40Z\"; long parsed = CSVParse.parseFlySightDate(str); assertEquals(millis, parsed); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static float getB(int argb) { return ((float) ((argb & 0xFF))) / 255; }### Assistant: @Test public void testGetB() throws Exception { Assert.assertEquals(1, ARGB.getB(-1), 0.1); Assert.assertEquals(0, ARGB.getB(0), 0.1); Assert.assertEquals(1, ARGB.getB(0x000000FF), 0.1); Assert.assertEquals(0, ARGB.getB(0xFFFFFF00), 0.1); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String build() { StringBuilder sb = new StringBuilder(); int templateCounter = 0; for (String part : parts) { if (part == null) { int index = templateIndexes[templateCounter++]; part = getString(index); } if (part != null) { sb.append(part); } } return sb.toString(); }### Assistant: @Test public void unknownKeyInTemplateIsHandledAsText() { GetTileRequestBuilderREST builder = new GetTileRequestBuilderREST(\"foo/{bar}/baz\"); String expected = \"foo/{bar}/baz\"; String actual = builder.build(); assertEquals(expected, actual); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @ExceptionHandler(value = Exception.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) @ResponseBody public ErrorInformation handleInternalServerErrorException(Exception exception) { logError(\"A general error occurred.\", exception); return getErrorInformation(HttpStatus.INTERNAL_SERVER_ERROR, exception); }### Assistant: @Test public void testHandleInternalServerError() throws Exception { validateErrorInformation(exceptionHandler.handleInternalServerErrorException(new Exception(MESSAGE)), HttpStatus.INTERNAL_SERVER_ERROR); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public ByteBuf heapBuffer() { return heapBuffer(DEFAULT_INITIAL_CAPACITY, DEFAULT_MAX_CAPACITY); }### Assistant: @SuppressWarnings(\"unchecked\") @Test public void testUsedHeapMemory() { T allocator = newAllocator(true); ByteBufAllocatorMetric metric = ((ByteBufAllocatorMetricProvider) allocator).metric(); assertEquals(0, metric.usedHeapMemory()); ByteBuf buffer = allocator.heapBuffer(1024, 4096); int capacity = buffer.capacity(); assertEquals(expectedUsedMemory(allocator, capacity), metric.usedHeapMemory()); buffer.capacity(capacity << 1); capacity = buffer.capacity(); assertEquals(expectedUsedMemory(allocator, capacity), metric.usedHeapMemory()); buffer.release(); assertEquals(expectedUsedMemoryAfterRelease(allocator, capacity), metric.usedHeapMemory()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) { RequestMappingInfo info = createRequestMappingInfo(method); if (info != null) { RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType); if (typeInfo != null) { info = typeInfo.combine(info); } if (shouldAddClassNameContext(handlerType)) { RequestMappingInfo prefixMappingInfo = prefixMappingInfo(handlerType); info = prefixMappingInfo.combine(info); } } return info; }### Assistant: @Test @Parameters({ \"List?Controller, /endpoint-api/getList\", \"ListController, /list-endpoint-api-controller/getList\", \"List?Controller?, /endpoint-api/getList\", \"?Controller, /list-endpoint-api/getList\", \"List?, /endpoint-api-controller/getList\", \"SomeList?, /list-endpoint-api-controller/getList\", \"List?ControllerEnd, /list-endpoint-api-controller/getList\", \"?, /list-endpoint-api-controller/getList\"}) public void shouldHandlePrefixAndSuffixWhenPatternProvided(String pattern, String expectedUrl) throws Exception { apiProps.getResources().setClassNamePattern(pattern); mappingHandler(apiProps); RequestMappingInfo info = handlerMapping.getMappingForMethod(ListEndpointApiController.class.getMethod(\"getList\"), ListEndpointApiController.class); assertPattern(info, expectedUrl); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nonnull @Override public R option(@Nonnull final String key, @Nullable final String value) { if (key.startsWith(KyloCatalogConstants.HADOOP_CONF_PREFIX)) { hadoopConfiguration.set(key.substring(KyloCatalogConstants.HADOOP_CONF_PREFIX.length()), value); } options.setOption(key, value); return (R) this; }### Assistant: @Test public void option() { final MockDataSetOptionsAccess mock = new MockDataSetOptionsAccess(Mockito.mock(DataSourceResourceLoader.class)); mock.option(\"spark.option\", \"1\"); mock.option(\"spark.hadoop.option\", \"2\"); Assert.assertEquals(2, mock.getOptions().getOptions().size()); Assert.assertEquals(\"1\", mock.getOptions().getOption(\"spark.option\").get()); Assert.assertEquals(\"2\", mock.getOptions().getOption(\"spark.hadoop.option\").get()); Assert.assertEquals(1, mock.hadoopConfiguration.size()); Assert.assertEquals(\"2\", mock.hadoopConfiguration.get(\"option\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public MetricQueryService() { this(new HttpClientWrapper()); }### Assistant: @Test public void testMetricQueryService() throws Exception { MetricQueryService metricQueryService = new MetricQueryService(); assertTrue(metricQueryService != null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: boolean isAllValuesRequested(Object resource) { final boolean result; if (resource == null) { result = true; } else if (resource instanceof String) { result = StringUtils.isEmpty((String) resource) || WILDCARD_ASTERISK.equals(resource); } else { result = false; } if (LOG.isDebugEnabled()) { LOG.debug(\"isAllValuesRequested(\" + resource + \"): \" + result); } return result; }### Assistant: @Test public void test_isAllPossibleValues() { RangerAbstractResourceMatcher matcher = new AbstractMatcherWrapper(); for (String resource : new String[] { null, \"\", \"*\"}) { assertTrue(matcher.isAllValuesRequested(resource)); } for (String resource : new String[] { \" \", \"\\t\", \"\\n\", \"foo\"}) { assertFalse(matcher.isAllValuesRequested(resource)); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public Map<String, Object> read() throws Exception { String line = _unsyncBufferedReader.readLine(); if (line == null) { return null; } return _objectMapper.readValue( line, new TypeReference<Map<String, Object>>() { }); }### Assistant: @Test public void testColumnMapping() throws Exception { try (JSONLBatchEngineImportTaskItemReader jsonlBatchEngineImportTaskItemReader = _getJSONLBatchEngineImportTaskItemReader( new String[] { \"createDate1\", \"description1\", \"id1\", \"name1\" }, new Object[][] { { \"\\\"\" + createDateString + \"\\\"\", \"\\\"sample description\\\"\", 1, \"{\\\"en\\\": \\\"sample name\\\", \\\"hr\\\": \\\"naziv\\\"}\" } })) { validate( createDateString, \"sample description\", 1L, HashMapBuilder.put( \"createDate1\", \"createDate\" ).put( \"description1\", \"description\" ).put( \"id1\", \"id\" ).put( \"name1\", \"name\" ).build(), jsonlBatchEngineImportTaskItemReader.read(), HashMapBuilder.put( \"en\", \"sample name\" ).put( \"hr\", \"naziv\" ).build()); } }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override protected float getBottomFadingEdgeStrength() { if (getChildCount() == 0) { return 0.0f; } View child = getChildAt(0); final NestedScrollView.LayoutParams lp = (LayoutParams) child.getLayoutParams(); final int length = getVerticalFadingEdgeLength(); final int bottomEdge = getHeight() - getPaddingBottom(); final int span = child.getBottom() + lp.bottomMargin - getScrollY() - bottomEdge; if (span < length) { return span / (float) length; } return 1.0f; }### Assistant: @Test public void getBottomFadingEdgeStrength_childBottomIsBelowParentDuetoMargins_isCorrect() { setup(100); mNestedScrollView.setVerticalFadingEdgeEnabled(true); setChildMargins(100, 0); measureAndLayout(100); float expected = mNestedScrollView.getBottomFadingEdgeStrength(); assertThat(expected, is(1.0f)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public boolean isVoteGranted() { return voteGranted; }### Assistant: @Test public void testSerialization() { RequestVoteReply expected = new RequestVoteReply(5, true); RequestVoteReply cloned = (RequestVoteReply) SerializationUtils.clone(expected); assertEquals(\"getTerm\", expected.getTerm(), cloned.getTerm()); assertEquals(\"isVoteGranted\", expected.isVoteGranted(), cloned.isVoteGranted()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public Fact handle(CreateFactRequest request) throws AccessDeniedException, AuthenticationFailedException, InvalidArgumentException { requestedOrigin = factCreateHandler.resolveOrigin(request.getOrigin()); requestedOrganization = factCreateHandler.resolveOrganization(request.getOrganization(), requestedOrigin); requestedFactType = factTypeRequestResolver.resolveFactType(request.getType()); securityContext.checkPermission(TiFunctionConstants.addThreatIntelFact, requestedOrganization.getId()); factCreateHandler.assertValidFactValue(requestedFactType, request.getValue()); assertValidFactObjectBindings(request); FactRecord newFact = toFactRecord(request); return factCreateHandler.saveFact(newFact, request.getComment(), ListUtils.list(factCreateHandler.resolveSubjects(request.getAcl()), Subject::getId)); }### Assistant: @Test public void testValidateBindingsFailsWithoutBindingsOnFactType() throws Exception { CreateFactRequest request = createRequest(); resolveFactType.setRelevantObjectBindings(null); mockCreateNewFact(); InvalidArgumentException ex = assertThrows(InvalidArgumentException.class, () -> delegate.handle(request)); assertEquals(set(\"invalid.fact.object.binding\"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate)); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Compressor getCompressor(String alias) { return EXTENSION_LOADER.getExtension(alias); }### Assistant: @Test public void getCompressor() throws Exception { Compressor compressor = CompressorFactory.getCompressor((byte) 113); Assert.assertNotNull(compressor); Assert.assertEquals(compressor.getClass(), TestCompressor.class); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public String reverseIterative(String input) { validateInput(input); StringBuilder stringBuilder = new StringBuilder(); for (int i = input.length() - 1; i >= 0; i--) { stringBuilder.append(input.charAt(i)); } return stringBuilder.toString(); }### Assistant: @Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullStringsIterative() { reverseString.reverseIterative(null); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Method getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive) throws IllegalAccessException, NoSuchMethodException { boolean methodNameFound = false; Class<?> classType = type; while (classType != null && !classType.equals(Object.class)) { for (Method m : classType.getDeclaredMethods()) { if ((!caseSensitive && m.getName().equalsIgnoreCase(name)) || (caseSensitive && m.getName().equals(name))) { methodNameFound = true; if (returnType != null) { if (!m.getReturnType().equals(returnType)) { throw new NoSuchMethodException(\"Method '\" + name + \"' was found in \" + type.getSimpleName() + \".class\" + \", but the returnType \" + m.getReturnType().getSimpleName() + \".class did not match expected \" + returnType.getSimpleName() + \".class\"); } } else { if (!m.getReturnType().equals(void.class)) { throw new NoSuchMethodException(\"Method '\" + name + \"' was found in \" + type.getSimpleName() + \".class\" + \", but the returnType \" + m.getReturnType().getSimpleName() + \".class was expected to be void\"); } } Class<?>[] paramTypes = m.getParameterTypes(); if (paramType != null) { if (paramTypes.length != 1) { continue; } else { if (!paramTypes[0].equals(paramType)) { continue; } } } else { if (paramTypes.length != 0) { continue; } } if (!Modifier.isPublic(m.getModifiers())) { throw new IllegalAccessException(\"Method '\" + name + \"' was found in \" + type.getSimpleName() + \".class \"+ \", but its not accessible since its \" + Modifier.toString(m.getModifiers())); } return m; } } classType = classType.getSuperclass(); } String signature = \"public \" + (returnType == null ? \"void\" : returnType.getName()) + \" \" + name + \"(\" + (paramType == null ? \"\" : paramType.getName()) + \")\"; if (methodNameFound) { throw new NoSuchMethodException(\"Method '\" + signature + \"' was found in \" + type.getSimpleName() + \".class, but signature match failed\"); } else { throw new NoSuchMethodException(\"Method '\" + signature + \"' was not found in \" + type.getSimpleName() + \".class\"); } }### Assistant: @Test public void getMethodCaseInsensitiveSet() throws Exception { Method m = ClassUtil.getMethod(InternetPerson.class, \"setfirstname\", null, String.class, false); Method expectedMethod = Person.class.getMethod(\"setFirstName\", String.class); Assert.assertEquals(expectedMethod, m); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static Properties loadProperties(String propertyName) { if (propertyName == null || \"\".equals(propertyName)) { return null; } Properties retProps = new Properties(); StringBuilder resourceName = new StringBuilder(); resourceName.append(propertyName); if (!propertyName.endsWith(PROPERTY_EXTENSION)) { resourceName.append(PROPERTY_EXTENSION); } InputStream is = Thread.currentThread().getContextClassLoader() .getResourceAsStream(resourceName.toString()); if (is == null) { is = PropertyUtil.class.getResourceAsStream(\"/\" + propertyName + PROPERTY_EXTENSION); } try { retProps.load(is); } catch (NullPointerException npe) { log.warn(\"*** Can not find property-file [\" + propertyName + \".properties] ***\", npe); retProps = null; } catch (IOException ie) { log.error(\"\", ie); retProps = null; } finally { try { if (is != null) { is.close(); } } catch (IOException ie) { log.error(\"\", ie); retProps = null; } } return retProps; }### Assistant: @Test public void testLoadProperties04() throws Exception { String input = \"\"; Properties result = PropertyUtil.loadProperties(input); assertNull(result); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public AppInfo configureApplication(final File jarFile) throws OpenEJBException { logger.debug(\"Beginning load: \" + jarFile.getAbsolutePath()); try { final AppModule appModule = deploymentLoader.load(jarFile); final AppInfo appInfo = configureApplication(appModule); appInfo.paths.add(appInfo.path); appInfo.paths.add(jarFile.getAbsolutePath()); return appInfo; } catch (ValidationFailedException e) { logger.warning(\"configureApplication.loadFailed\", jarFile.getAbsolutePath(), e.getMessage()); throw e; } catch (OpenEJBException e) { logger.warning(\"configureApplication.loadFailed\", e, jarFile.getAbsolutePath(), e.getMessage()); throw e; } }### Assistant: @Test public void testConfigureApplicationWebModule() throws OpenEJBException { final String moduleId = \"testConfigureApplicationWebModule\"; final String fileSeparator = System.getProperty(\"file.separator\"); SystemInstance.get().setProperty(ConfigurationFactory.VALIDATION_SKIP_PROPERTY, \"false\"); SystemInstance.get().setProperty(DeploymentsResolver.SEARCH_CLASSPATH_FOR_DEPLOYMENTS_PROPERTY, \"false\"); ConfigurationFactory factory = new ConfigurationFactory(); WebApp webApp = new WebApp(); webApp.setMetadataComplete(true); WebModule webModule = new WebModule(webApp, null, null, fileSeparator + \"some\" + fileSeparator+ \"where.war\", moduleId); WebAppInfo info = factory.configureApplication(webModule); assertEquals(moduleId, info.moduleId); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public static <T> T[] requireNonNullElements(T[] array) { requireNonNull(array, \"The provided array \" + IS_NULL + \".\"); int len = array.length; for (int i = 0; i < len; i++) { if (array[i] == null) { throw new NullPointerException(\"Item \" + i + \" in the array \" + Arrays.toString(array) + \" \" + IS_NULL); } } return array; }### Assistant: @Test void testRequireNonNullElements_GenericType_String() { assertThrows(NullPointerException.class, () -> { final String msg = \"OlleOchTryggve\"; try { final String[] result = NullUtil.requireNonNullElements(ARRAY_WITH_NULL, msg); } catch (NullPointerException ex) { assertTrue(ex.getMessage().contains(msg)); throw ex; } }); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void cacheTemplateRecord(long obsvDomain, String hostname, Map<Integer, AbstractTemplateRecord> templateByIdCache) { if (templateByIdCache == null || templateByIdCache.isEmpty()) { return; } String prefix = buildCacheKey(obsvDomain, hostname); templateByIdCache.forEach((templateId, templateRecord) -> { m_ipfixTemplateRecordCache.put(new Element(buildCacheKey(prefix, templateId), templateRecord)); }); }### Assistant: @Test public void testCacheTemplateRecord() throws Exception { long obsvDomain = 4335L; String hostname = \"deviceA\"; IpfixTemplateRecord expected = generateTemplateRecord(\"01030002000800048008000500000E91\"); IpfixTemplateRecord tr = generateTemplateRecord(\"01010002000800048008000500000E91\"); HashMap<Integer, AbstractTemplateRecord> templateByIdCache = new HashMap<>(); templateByIdCache.put(259, expected); templateByIdCache.put(257, tr); m_ipfixfeCachingService.cacheTemplateRecord(obsvDomain, hostname, templateByIdCache); IpfixTemplateRecord tmplRecord11 = generateTemplateRecord(\"01030002000800048008000500000E91\"); IpfixTemplateRecord tmplRecord12 = generateTemplateRecord(\"01010002000800048008000500000E91\"); HashMap<Integer, AbstractTemplateRecord> tmplRecordByIdCache1 = new HashMap<>(); templateByIdCache.put(259, tmplRecord11); templateByIdCache.put(257, tmplRecord12); m_ipfixfeCachingService.cacheTemplateRecord(obsvDomain, \"ANV1.ONT2\", tmplRecordByIdCache1); IpfixTemplateRecord tmplRecord21 = generateTemplateRecord(\"01030002000800048008000500000E91\"); IpfixTemplateRecord tmplRecord22 = generateTemplateRecord(\"01010002000800048008000500000E91\"); HashMap<Integer, AbstractTemplateRecord> tmplRecordByIdCache2 = new HashMap<>(); templateByIdCache.put(259, tmplRecord21); templateByIdCache.put(257, tmplRecord22); m_ipfixfeCachingService.cacheTemplateRecord(obsvDomain, \"ANV1.ONT3\", tmplRecordByIdCache2); IpfixTemplateRecord template = (IpfixTemplateRecord) m_ipfixfeCachingService.getTemplateRecord(obsvDomain, hostname, 259); assertTemplateRecord(expected, template); template = (IpfixTemplateRecord) m_ipfixfeCachingService.getTemplateRecord(obsvDomain, hostname, 257); assertTemplateRecord(tr, template); Set<String> allCacheKeys = m_ipfixfeCachingService.getAllCacheKeys(); assertEquals(2, allCacheKeys.size()); assertTrue(allCacheKeys.contains(\"4335_deviceA_259\")); assertTrue(allCacheKeys.contains(\"4335_deviceA_257\")); String newHostname = \"deviceA.New\"; m_ipfixfeCachingService.updateHostName(obsvDomain, hostname, newHostname); template = (IpfixTemplateRecord) m_ipfixfeCachingService.getTemplateRecord(obsvDomain, newHostname, 257); assertTemplateRecord(tr, template); allCacheKeys = m_ipfixfeCachingService.getAllCacheKeys(); assertEquals(2, allCacheKeys.size()); assertTrue(allCacheKeys.contains(\"4335_deviceA.New_259\")); assertTrue(allCacheKeys.contains(\"4335_deviceA.New_257\")); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public void dispose() { super.dispose(); if (shpFiles != null) { shpFiles.dispose(); shpFiles = null; } }### Assistant: @Test public void testAttributesWriting() throws Exception { SimpleFeatureCollection features = createFeatureCollection(); File tmpFile = getTempFile(); tmpFile.createNewFile(); ShapefileDataStore s = new ShapefileDataStore(tmpFile.toURI().toURL()); writeFeatures(s, features); s.dispose(); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Nullable public static Display getDisplay(@NonNull View view) { if (Build.VERSION.SDK_INT >= 17) { return view.getDisplay(); } if (isAttachedToWindow(view)) { final WindowManager wm = (WindowManager) view.getContext().getSystemService( Context.WINDOW_SERVICE); return wm.getDefaultDisplay(); } return null; }### Assistant: @Test public void testGetDisplay() { final Display display = ViewCompat.getDisplay(mView); assertNotNull(display); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override public final TrackSelectorResult selectTracks( RendererCapabilities[] rendererCapabilities, TrackGroupArray trackGroups, MediaPeriodId periodId, Timeline timeline) throws ExoPlaybackException { int[] rendererTrackGroupCounts = new int[rendererCapabilities.length + 1]; TrackGroup[][] rendererTrackGroups = new TrackGroup[rendererCapabilities.length + 1][]; @Capabilities int[][][] rendererFormatSupports = new int[rendererCapabilities.length + 1][][]; for (int i = 0; i < rendererTrackGroups.length; i++) { rendererTrackGroups[i] = new TrackGroup[trackGroups.length]; rendererFormatSupports[i] = new int[trackGroups.length][]; } @AdaptiveSupport int[] rendererMixedMimeTypeAdaptationSupports = getMixedMimeTypeAdaptationSupports(rendererCapabilities); for (int groupIndex = 0; groupIndex < trackGroups.length; groupIndex++) { TrackGroup group = trackGroups.get(groupIndex); boolean preferUnassociatedRenderer = MimeTypes.getTrackType(group.getFormat(0).sampleMimeType) == C.TRACK_TYPE_METADATA; int rendererIndex = findRenderer( rendererCapabilities, group, rendererTrackGroupCounts, preferUnassociatedRenderer); @Capabilities int[] rendererFormatSupport = rendererIndex == rendererCapabilities.length ? new int[group.length] : getFormatSupport(rendererCapabilities[rendererIndex], group); int rendererTrackGroupCount = rendererTrackGroupCounts[rendererIndex]; rendererTrackGroups[rendererIndex][rendererTrackGroupCount] = group; rendererFormatSupports[rendererIndex][rendererTrackGroupCount] = rendererFormatSupport; rendererTrackGroupCounts[rendererIndex]++; } TrackGroupArray[] rendererTrackGroupArrays = new TrackGroupArray[rendererCapabilities.length]; int[] rendererTrackTypes = new int[rendererCapabilities.length]; for (int i = 0; i < rendererCapabilities.length; i++) { int rendererTrackGroupCount = rendererTrackGroupCounts[i]; rendererTrackGroupArrays[i] = new TrackGroupArray( Util.nullSafeArrayCopy(rendererTrackGroups[i], rendererTrackGroupCount)); rendererFormatSupports[i] = Util.nullSafeArrayCopy(rendererFormatSupports[i], rendererTrackGroupCount); rendererTrackTypes[i] = rendererCapabilities[i].getTrackType(); } int unmappedTrackGroupCount = rendererTrackGroupCounts[rendererCapabilities.length]; TrackGroupArray unmappedTrackGroupArray = new TrackGroupArray( Util.nullSafeArrayCopy( rendererTrackGroups[rendererCapabilities.length], unmappedTrackGroupCount)); MappedTrackInfo mappedTrackInfo = new MappedTrackInfo( rendererTrackTypes, rendererTrackGroupArrays, rendererMixedMimeTypeAdaptationSupports, rendererFormatSupports, unmappedTrackGroupArray); Pair<@NullableType RendererConfiguration[], @NullableType TrackSelection[]> result = selectTracks( mappedTrackInfo, rendererFormatSupports, rendererMixedMimeTypeAdaptationSupports); return new TrackSelectorResult(result.first, result.second, mappedTrackInfo); }### Assistant: @Test public void selectTracks_multipleMetadataTracks_mappedToDifferentRenderers() throws ExoPlaybackException { FakeMappingTrackSelector trackSelector = new FakeMappingTrackSelector(); TrackGroupArray trackGroups = new TrackGroupArray(VIDEO_TRACK_GROUP, METADATA_TRACK_GROUP, METADATA_TRACK_GROUP); RendererCapabilities[] rendererCapabilities = new RendererCapabilities[] { VIDEO_CAPABILITIES, METADATA_CAPABILITIES, METADATA_CAPABILITIES }; trackSelector.selectTracks(rendererCapabilities, trackGroups, periodId, TIMELINE); trackSelector.assertMappedTrackGroups(0, VIDEO_TRACK_GROUP); trackSelector.assertMappedTrackGroups(1, METADATA_TRACK_GROUP); trackSelector.assertMappedTrackGroups(2, METADATA_TRACK_GROUP); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: @Override @Transactional public Integer executeScheduledAlerts(int alertCount, int timeout) { requireNotDisposed(); requireArgument(alertCount > 0, \"Alert count must be greater than zero.\"); requireArgument(timeout > 0, \"Timeout in milliseconds must be greater than zero.\"); List<History> historyList = new ArrayList<>(); List<AlertWithTimestamp> alertsWithTimestamp = _mqService.dequeue(ALERT.getQueueName(), AlertWithTimestamp.class, timeout, alertCount); List<Notification> allNotifications = new ArrayList<>(); Map<BigInteger, Alert> alertsByNotificationId = new HashMap<>(); Map<BigInteger, Long> alertEnqueueTimestampsByAlertId = new HashMap<>(); loadWhiteListRegexPatterns(); _monitorService.modifyCounter(Counter.ALERTS_EVALUATED_RAWTOTAL, alertsWithTimestamp.size(), new HashMap<>()); for (AlertWithTimestamp alertWithTimestamp : alertsWithTimestamp) { String serializedAlert = alertWithTimestamp.getSerializedAlert(); _logger.debug(MessageFormat.format(\"serializedAlert {0}\", serializedAlert)); Alert alert; try { alert = _mapper.readValue(serializedAlert, Alert.class); } catch (Exception e) { String logMessage = MessageFormat.format(\"Failed to deserialize alert {0}. Full stack trace of exception {1}\", serializedAlert, ExceptionUtils.getFullStackTrace(e)); _logger.warn(logMessage); logAlertStatsOnFailure(DEFAULTALERTID, DEFAULTUSER); continue; } if (!_shouldEvaluateAlert(alert, alert.getId())) { logAlertStatsOnFailure(alert.getId(), alert.getOwner().getUserName()); continue; } if (alertEnqueueTimestampsByAlertId.containsKey(alert.getId())) { String logMessage = MessageFormat.format(\"Found alert {0}:{1} with multiple timestamps. ExistingTime:{2} NewTime:{3}. Existing evaluation will be overwritten.\", alert.getId(), alert.getName(), alertEnqueueTimestampsByAlertId.get(alert.getId()), alertWithTimestamp.getAlertEnqueueTime()); _logger.warn(logMessage); logAlertStatsOnFailure(alert.getId(), alert.getOwner().getUserName()); } alertEnqueueTimestampsByAlertId.put(alert.getId(), alertWithTimestamp.getAlertEnqueueTime()); List<Notification> notifications = new ArrayList<>(alert.getNotifications()); alert.setNotifications(null); if (notifications.size() == 0) { String logMessage = MessageFormat.format(\"Found alert {0}:{1} with no notification.\", alert.getId(), alert.getName()); _logger.warn(logMessage); logAlertStatsOnFailure(alert.getId(), alert.getOwner().getUserName()); continue; } for (Notification n : notifications) { if (alertsByNotificationId.containsKey(n.getId())) { String logMessage = MessageFormat.format(\"Found alert {0}:{1} where notification {2} is present multiple times. \", alert.getId(), alert.getName(), n.getId()); _logger.warn(logMessage); } alertsByNotificationId.put(n.getId(), alert); } allNotifications.addAll(notifications); } updateNotificationsActiveStatusAndCooldown(allNotifications); for (Notification n : allNotifications) { alertsByNotificationId.get(n.getId()).addNotification(n); } Set<Alert> alerts = new HashSet<>(alertsByNotificationId.values()); long jobStartTime, evaluateEndTime; Long alertEnqueueTimestamp; String logMessage; History history; NotificationProcessor np = new NotificationProcessor(this, _logger); _monitorService.modifyCounter(Counter.ALERTS_EVALUATED_TOTAL, alerts.size(), new HashMap<>()); boolean datalagMonitorEnabled = Boolean.valueOf(_configuration.getValue(DataLagService.Property.DATA_LAG_MONITOR_ENABLED.getName(), DataLagService.Property.DATA_LAG_MONITOR_ENABLED.getDefaultValue())); AtomicInteger numberOfAlertsEvaluated = new AtomicInteger(alerts.size()); for (Alert alert : alerts) { jobStartTime = System.currentTimeMillis(); evaluateEndTime = 0; alertEnqueueTimestamp = alertEnqueueTimestampsByAlertId.get(alert.getId()); updateRequestContext(alert); updateAlertStartEvaluationStats(alertEnqueueTimestampsByAlertId, alert, jobStartTime); history = new History(History.addDateToMessage(JobStatus.STARTED.getDescription()), HOSTNAME, alert.getId(), JobStatus.STARTED); Set<Trigger> missingDataTriggers = new HashSet<Trigger>(); for (Trigger trigger : alert.getTriggers()) { if (trigger.getType().equals(TriggerType.NO_DATA)) { missingDataTriggers.add(trigger); } } boolean alertSkipped = false; boolean alertFailure = false; boolean alertEvaluationStarted = false; boolean doesDatalagExistInAnyDC = false; try { alertEnqueueTimestamp = alertEnqueueTimestampsByAlertId.get(alert.getId()); MetricQueryResult queryResult = _metricService.getMetrics(alert.getExpression(), alertEnqueueTimestamp); MonitoringUtils.updateAlertMetricQueryPerfCounters(_monitorService, queryResult, alert.getOwner().getUserName()); List<Metric> metrics = new ArrayList<>(queryResult.getMetricsList()); int initialMetricSize = metrics.size(); doesDatalagExistInAnyDC = datalagMonitorEnabled && doesDatalagExistsInAtLeastOneDC(queryResult, alert); if (false) { _logger.info(\"Orphan Alert detected. Disabling it and notifying user. Alert Id: {}\", alert.getId()); Alert dbAlert = findAlertByPrimaryKey(alert.getId()); dbAlert.setEnabled(false); _sendOrphanAlertNotification(alert); } else { if (datalagMonitorEnabled) { if (queryResult.containsTransform() || initialMetricSize == 0) { if (doesDatalagExistInAnyDC) { logMessage = MessageFormat.format(\"Skipping Alert {0} Evaluation as data was lagging in at least one dc for expression: {1}\", alert.getId().intValue(), alert.getExpression()); updateDatalagHistory(alert, historyList, logMessage); alertSkipped = true; continue; } } else { metrics.removeIf(m -> shouldMetricBeRemovedForDataLag(alert, m, historyList)); } if (initialMetricSize > 0 && metrics.size() == 0) { alertSkipped = true; _logger.info(MessageFormat.format(\"Skipping Alert {0} Evaluation as the metrics expressions evaluation were skipped due to data lag. {1}\", alert.getId().intValue(), alert.getExpression())); continue; } } alertEvaluationStarted = true; evaluateEndTime = System.currentTimeMillis(); if (areDatapointsEmpty(metrics)) { _processMissingDataNotifications(np, alert, history, alertEnqueueTimestamp, missingDataTriggers); } else { Set<Trigger> triggersToEvaluate = new HashSet<>(); for (Notification notification : alert.getNotifications()) { triggersToEvaluate.addAll(notification.getTriggers()); } Map<BigInteger, Map<Metric, Long>> triggerFiredTimesAndMetricsByTrigger = _evaluateTriggers(triggersToEvaluate, metrics, alert.getExpression(), alertEnqueueTimestamp, this::noopTags); evaluateEndTime = System.currentTimeMillis(); for (Notification notification : alert.getNotifications()) { if (notification.getTriggers().isEmpty()) { _processTriggerlessNotification(np, alert, history, metrics, notification, alertEnqueueTimestamp); } else { _processNotification(np, alert, history, metrics, triggerFiredTimesAndMetricsByTrigger, notification, alertEnqueueTimestamp); if (missingDataTriggers.size() > 0) { _processMissingDataNotification(np, alert, history, missingDataTriggers, notification, false, alertEnqueueTimestamp); } } } } } history.appendMessageNUpdateHistory(\"Alert was evaluated successfully.\", JobStatus.SUCCESS, System.currentTimeMillis() - jobStartTime); } catch (MissingDataException mde) { if (doesDatalagExistInAnyDC && !alertEvaluationStarted) { alertSkipped = true; } alertFailure = true; _handleAlertEvaluationException(np, alert, jobStartTime, alertEnqueueTimestamp, history, missingDataTriggers, mde, true); } catch (Exception ex) { if (doesDatalagExistInAnyDC && !alertEvaluationStarted) { alertSkipped = true; } alertFailure = true; _handleAlertEvaluationException(np, alert, jobStartTime, alertEnqueueTimestamp, history, missingDataTriggers, ex, false); } finally { history = _historyService.createHistory(alert, history.getMessage(), history.getJobStatus(), history.getExecutionTime()); historyList.add(history); Map<String, String> tags = new HashMap<>(); tags.put(HOSTTAG, HOSTNAME); tags.put(USERTAG, alert.getOwner().getUserName()); if (!alertSkipped) { _monitorService.modifyCounter(Counter.ALERTS_EVALUATION_LATENCY, System.currentTimeMillis() - jobStartTime, tags); if (evaluateEndTime == 0) { evaluateEndTime = System.currentTimeMillis(); } _monitorService.modifyCounter(Counter.ALERTS_EVALUATION_ONLY_LATENCY, evaluateEndTime - jobStartTime, tags); _monitorService.modifyCounter(Counter.ALERTS_EVALUATION_LATENCY_COUNT, 1, tags); } _monitorService.modifyCounter(alertSkipped ? Counter.ALERTS_SKIPPED : Counter.ALERTS_EVALUATED, 1, tags); if (alertFailure) { _monitorService.modifyCounter(Counter.ALERTS_FAILED, 1, tags); } tags.put(ALERTIDTAG, alert.getId().toString()); if(alertSkipped) { numberOfAlertsEvaluated.decrementAndGet(); publishAlertTrackingMetric(Counter.ALERTS_SKIPPED.getMetric(), 1.0, tags); } else { publishAlertTrackingMetric(Counter.ALERTS_EVALUATED.getMetric(), 1.0, tags); } if (alertFailure) { publishAlertTrackingMetric(Counter.ALERTS_FAILED.getMetric(), 1.0, tags); } } } return numberOfAlertsEvaluated.get(); }### Assistant: @Test public void testExecuteScheduledAlerts_OnCooldownWithRefocusNotifier() { ServiceFactory sFactory = system.getServiceFactory(); UserService userService = sFactory.getUserService(); final AtomicInteger notificationCount = new AtomicInteger(0); final AtomicInteger clearCount = new AtomicInteger(0); Metric metric = new Metric(\"scope\", \"metric\"); Map<Long, String> dps = new HashMap<Long, String>(); dps.put(1000L, \"11\"); dps.put(2000L, \"21\"); dps.put(3000L, \"31\"); metric.setDatapoints(_convertDatapoints(dps)); Alert alert = new Alert(userService.findAdminUser(), userService.findAdminUser(), \"testAlert\", \"-1h:scope:metric:avg\", \"* * * * *\"); _setAlertId(alert, \"100001\"); Trigger trigger = new Trigger(alert, TriggerType.GREATER_THAN_OR_EQ, \"testTrigger\", 10, 0); _setTriggerId(trigger, \"100002\"); Notification notification = new Notification(\"testNotification\", alert, RefocusNotifier.class.getName(), new ArrayList<String>(), 600000); _setNotificationId(notification, \"100003\"); alert.setTriggers(Arrays.asList(new Trigger[] { trigger })); alert.setNotifications(Arrays.asList(new Notification[] { notification })); notification.setTriggers(alert.getTriggers()); alert.setEnabled(true); DefaultAlertService spyAlertService = _initializeSpyAlertServiceWithStubs(notificationCount, clearCount, Arrays.asList(metric), alert, notification, false); assertEquals(new Integer(1), spyAlertService.executeScheduledAlerts(1, 1000)); assertEquals(new Integer(1), spyAlertService.executeScheduledAlerts(1, 1000)); assertEquals(false, notification.isActiveForTriggerAndMetric(trigger, metric)); assertEquals(2, notificationCount.get()); assertEquals(0, notification.getCooldownExpirationMap().size()); }"
    },
    {
        "text": "### System: Generate unit tests for the following method or function:\n### Human: public List<Map.Entry<K, V>> toList() { return inner.collect(Collectors.toList()); }### Assistant: @Test void toList() { final List<Map.Entry<String, Integer>> expected = refStream().collect(Collectors.toList()); final List<Map.Entry<String, Integer>> actual = instance.toList(); assertEquals(expected, actual); }"
    }
]