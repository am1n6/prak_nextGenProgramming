[
    {
        "text": "<s>[INST]<<SYS>>Generate unit tests for the following method or function:\n<</SYS>> @Override public String toSqlConstraint(String quoteString, DbProduct dbProduct) { if (quoteString == null) { throw new RuntimeException(\"Quote string cannot be null\"); } return generateRangeConstraint( quoteString + column + quoteString, Stream.of(boundaries).map(b -> b == null ? null : b.toString()).toArray(String[]::new) ); } [/INST] @Test public void testLeftBounded() { IntPartition partition = new IntPartition(COL_RAW, 0L, null); String constraint = partition.toSqlConstraint(QUOTE, dbProduct); assertEquals(COL + \" >= 0\", constraint); } </s>"
    },
    {
        "text": "<s>[INST]<<SYS>>Generate unit tests for the following method or function:\n<</SYS>> public Object invoke(Object controller, Context context) { Object[] arguments = new Object[argumentExtractors.length]; for (int i = 0; i < argumentExtractors.length; i++) { arguments[i] = argumentExtractors[i].extract(context); } checkNullArgumentsAndThrowBadRequestExceptionIfConfigured(arguments); try { return method.invoke(controller, arguments); } catch (IllegalAccessException | IllegalArgumentException e) { throw new RuntimeException(e); } catch (InvocationTargetException e) { if (e.getCause() instanceof RuntimeException) { throw (RuntimeException) e.getCause(); } else { throw new RuntimeException(e.getCause()); } } } [/INST] @Test public void customArgumentExtractorWithOptionalAndGuiceShouldBeInstantiated() { create(\"guiceArgumentExtractorWithOptional\", new Dep(\"dep\")).invoke(mockController, context); verify(mockController).guiceArgumentExtractorWithOptional(Optional.of(\"dep:bar:java.lang.String\")); } </s>"
    },
    {
        "text": "<s>[INST]<<SYS>>Generate unit tests for the following method or function:\n<</SYS>> public final static String[] getMethod(String className, boolean extendsMethod) { Class classz = loadClass(className); Method[] methods; if (extendsMethod) { methods = classz.getMethods(); } else { methods = classz.getDeclaredMethods(); } Set<String> set = new HashSet<>(); if (methods != null) { for (Method f : methods) { set.add(f.getName()); } } return set.toArray(new String[set.size()]); } [/INST] @Test public void testMetod() { System.out.println(\"============\u6240\u6709\u65b9\u6cd5================\"); String[] methods = ClassUtil.getMethod(\"com.opslab.util.StringUtil\", false); for (String m : methods) { System.out.println(m); } System.out.println(\"=========\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5\u548c\u7ee7\u627f\u6765\u7684\u65b9\u6cd5===========\"); methods = ClassUtil.getMethod(\"com.opslab.util.StringUtil\", true); for (String m : methods) { System.out.println(m); } } </s>"
    },
    {
        "text": "<s>[INST]<<SYS>>Generate unit tests for the following method or function:\n<</SYS>> @GET @PerformanceMetric(\"brokers.list+v2\") public void list(@Suspended AsyncResponse asyncResponse) { CompletableFuture<BrokerList> response = brokerManager.get() .listLocalBrokers() .thenApply( brokers -> new BrokerList( brokers.stream().map(Broker::getBrokerId).collect(Collectors.toList()))); AsyncResponses.asyncResume(asyncResponse, response); } [/INST] @Test public void testList() { expect(brokerManager.listLocalBrokers()) .andReturn(completedFuture(Arrays.asList(BROKER_1, BROKER_2, BROKER_3))); replay(brokerManager); Response response = request(\"/brokers\", Versions.KAFKA_V2_JSON).get(); assertOKResponse(response, Versions.KAFKA_V2_JSON); final BrokerList returnedBrokerIds = TestUtils.tryReadEntityOrLog(response, new GenericType<BrokerList>() { }); assertEquals(Arrays.asList(1, 2, 3), returnedBrokerIds.getBrokers()); } </s>"
    },
    {
        "text": "<s>[INST]<<SYS>>Generate unit tests for the following method or function:\n<</SYS>> public static POS toPos(String pos) { final String lc = pos.toLowerCase(); POS ret = null; if (lc.startsWith(\"n\")) { ret = POS.NOUN; } else if (lc.startsWith(\"v\")) { ret = POS.VERB; } else if (lc.startsWith(\"r\") || lc.startsWith(\"adv\")) { ret = POS.ADVERB; } else if (lc.startsWith(\"j\") || lc.startsWith(\"adj\")) { ret = POS.ADJECTIVE; } return ret; } [/INST] @Test public void testToPos() { assertEquals(POS.VERB, WordNetUtils.toPos(\"verb\")); assertEquals(POS.VERB, WordNetUtils.toPos(\"vbz\")); assertEquals(POS.NOUN, WordNetUtils.toPos(\"nns\")); assertEquals(POS.ADVERB, WordNetUtils.toPos(\"r\")); assertEquals(POS.ADVERB, WordNetUtils.toPos(\"adv\")); assertEquals(POS.ADJECTIVE, WordNetUtils.toPos(\"j\")); assertEquals(POS.ADJECTIVE, WordNetUtils.toPos(\"adj\")); assertEquals(null, WordNetUtils.toPos(\"somethingelse\")); } </s>"
    },
    {
        "text": "<s>[INST]<<SYS>>Generate unit tests for the following method or function:\n<</SYS>> public String put(String key, String value) throws Exception { long start = System.currentTimeMillis(); boolean exists = vaultRetryService.tryReadingVault(() -> persistentEngine.isExists(key)); long duration = System.currentTimeMillis() - start; metricService.submit(MetricType.VAULT_READ, duration); LOGGER.trace(\"Secret read took {} ms\", duration); if (exists) { throw new InvalidKeyException(format(\"Key: %s already exists!\", key)); } start = System.currentTimeMillis(); String secret = vaultRetryService.tryWritingVault(() -> persistentEngine.put(key, value)); duration = System.currentTimeMillis() - start; metricService.submit(MetricType.VAULT_WRITE, duration); LOGGER.trace(\"Secret write took {} ms\", duration); metricService.incrementMetricCounter(() -> \"secret.write.\" + convertSecretToMetric(secret)); return secret; } [/INST] @Test public void testPutExists() throws Exception { when(persistentEngine.isExists(anyString())).thenReturn(true); thrown.expect(InvalidKeyException.class); try { underTest.put(\"key\", \"value\"); } catch (InvalidKeyException e) { verify(metricService, times(1)).submit(eq(MetricType.VAULT_READ), anyDouble()); throw e; } } </s>"
    }
]